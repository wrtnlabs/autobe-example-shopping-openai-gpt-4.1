import { tags } from "typia";

/**
 * Complete persisted deposit transaction entity. Corresponds directly to
 * ai_commerce_deposit_transactions in schema; all properties reflect database
 * columns.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceDepositTransaction = {
  /** Unique primary key for transaction row. Required. */
  id: string & tags.Format<"uuid">;

  /**
   * Deposit account reference for which this transaction was logged.
   * Required.
   */
  deposit_account_id: string & tags.Format<"uuid">;

  /**
   * Transaction type. One of: 'recharge', 'withdraw', 'payment', or 'refund'.
   * Required.
   */
  type: string;

  /**
   * Transaction amount (float, required). May be positive for recharges or
   * negative/zero for deductions per business rules.
   */
  amount: number;

  /**
   * Transaction status. Allowed: 'pending', 'confirmed', 'failed', or
   * 'expired'. Required.
   */
  status: string;

  /**
   * Optional external/internal reference for payment or refund source/target.
   * May be null.
   */
  counterparty_reference?: string | null | undefined;

  /** Datetime when transaction was performed (ISO 8601, required). */
  performed_at: string & tags.Format<"date-time">;

  /** Timestamp when the ledger entry was created (ISO 8601, required). */
  created_at: string & tags.Format<"date-time">;

  /** When the transaction was last updated (ISO 8601, required). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete field. Optional; non-null if transaction is logically
   * deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceDepositTransaction {
  /**
   * Request format for searching/filtering deposit transactions. Matches
   * ai_commerce_deposit_transactions request patterns.
   */
  export type IRequest = {
    /** Deposit account UUID to filter/search transactions (optional). */
    deposit_account_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Transaction type. Allowed values: 'recharge', 'withdraw', 'payment',
     * 'refund'. Optional; can be used to filter results as per
     * ai_commerce_deposit_transactions.
     */
    type?: string | undefined;

    /**
     * Transaction status (optional). Allowed values: 'pending',
     * 'confirmed', 'failed', 'expired'. Optional.
     */
    status?: string | undefined;

    /**
     * Optional filter start date for performed_at (inclusive, ISO 8601).
     * Format: 'YYYY-MM-DDTHH:mm:ssZ'.
     */
    from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional filter end date for performed_at (inclusive, ISO 8601).
     * Format: 'YYYY-MM-DDTHH:mm:ssZ'.
     */
    to?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Creates a new deposit transaction according to business and schema rules.
   * Required fields enforced, optional fields per schema documentation.
   */
  export type ICreate = {
    /**
     * Deposit account for this transaction (UUID). Required; must refer to
     * an existing account.
     */
    deposit_account_id: string & tags.Format<"uuid">;

    /**
     * Transaction type. Allowed values: 'recharge', 'withdraw', 'payment',
     * 'refund'. Required.
     */
    type: string;

    /**
     * Transaction amount. For positive transactions (e.g. recharge), use
     * >0; for withdrawals/payments, negative values may be permitted
     * according to business rules. Required.
     */
    amount: number;

    /**
     * Transaction status. Allowed values: 'pending', 'confirmed', 'failed',
     * 'expired'. Required.
     */
    status: string;

    /** External or internal reference (optional, string; may be null). */
    counterparty_reference?: string | undefined;

    /** Performance event time in ISO 8601 format. Required. */
    performed_at: string & tags.Format<"date-time">;
  };

  /**
   * Fields for updating selected properties of a deposit transaction. Only
   * allowed for status, counterparty reference, and performed_at.
   *
   * This aligns with audit/compliance logic: amount/account_id are NOT
   * updatable.
   */
  export type IUpdate = {
    /**
     * The business or operational status of this deposit transaction. Must
     * match allowed statuses: (e.g., 'pending', 'confirmed', 'failed').
     * Refer to ai_commerce_deposit_transactions.status.
     */
    status?: string | undefined;

    /**
     * External or internal reference ID (e.g., payment, refund, etc) for
     * this transaction. May be null.
     */
    counterparty_reference?: string | null | undefined;

    /**
     * The timestamp when the transaction event was performed. Should be in
     * ISO 8601 date-time format. Maps to
     * ai_commerce_deposit_transactions.performed_at.
     */
    performed_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
