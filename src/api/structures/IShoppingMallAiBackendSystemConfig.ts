import { tags } from "typia";

/**
 * System configuration entity representing global or scoped platform settings.
 * Each config has a unique 'key', a serialized 'value', effective time bounds,
 * and audit fields. All configuration changes are evidence-traceable for
 * compliance, supporting business feature toggles, operational policies, and
 * legal mandates.
 *
 * Refer to: shopping_mall_ai_backend_system_configs Prisma schema.
 *
 * Every property directly maps to the database fields and must be documented
 * for audit and traceability. 'value' is a string/serialized blob enabling
 * multi-type configs. Soft deletion via 'deleted_at' preserves evidence for
 * business and regulatory purposes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendSystemConfig = {
  /** Primary key. Unique identifier of system config entry. Prisma: id. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique business config key. Scope: global, unless per-channel/feature.
   * Prisma: key.
   */
  key: string;

  /** Config value (string/JSON), serialized. Prisma: value. */
  value: string;

  /**
   * Human readable description for business/admin; audit trace for config's
   * business logic. Prisma: description.
   */
  description?: string | null;

  /**
   * Time when config takes effect (for scheduled/conditional). Prisma:
   * effective_from.
   */
  effective_from?: (string & tags.Format<"date-time">) | null;

  /** Optional end time for config effectivity. Prisma: effective_to. */
  effective_to?: (string & tags.Format<"date-time">) | null;

  /** Timestamp of creation for evidence and audit. Prisma: created_at. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update. Prisma: updated_at. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion time; for evidence trail, not actual removal. Prisma:
   * deleted_at.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendSystemConfig {
  /**
   * Request body for creating a new system configuration. Includes mandatory
   * 'key', 'value', and optional description/time bounds for scheduled
   * effectivity. Follows business logic for unique key constraint and audit
   * trail.
   */
  export type ICreate = {
    /** Unique key for the configuration item. */
    key: string;

    /** Configuration value, serialized if necessary. */
    value: string;

    /** Human-friendly description or memo (optional). */
    description?: string | null;

    /** Optional scheduled start time for config validity. */
    effective_from?: (string & tags.Format<"date-time">) | null;

    /** Optional scheduled end time. */
    effective_to?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Request body for updating an existing system config entry. All fields are
   * optional (partial update), with business logic enforcing unique key
   * constraints and effectivity bounds validation. Follows audit evidence
   * requirements.
   */
  export type IUpdate = {
    /**
     * Config key (unique identifier for this entry); updatable only if
     * allowed.
     */
    key?: string;

    /** New configuration value. */
    value?: string;

    /** Updated business description/notes, if provided. */
    description?: string | null;

    /** Scheduled start time for updated config. */
    effective_from?: (string & tags.Format<"date-time">) | null;

    /** Scheduled end time for updated config. */
    effective_to?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Search, filter, and pagination parameters for system configs. Supports
   * filter on key, value, time bounds, audit timeframe, and advanced options
   * for global admin/system-level queries. Used for listing configurations in
   * dashboards or audit consoles.
   */
  export type IRequest = {
    /** Optionally filter results to only configs with this (exact) key. */
    key?: string;

    /** Optionally filter by config value pattern. */
    value?: string;

    /** Optional search by config description. */
    description?: string | null;

    /** Return only configs effective from this time. */
    effective_from?: (string & tags.Format<"date-time">) | null;

    /** Return only configs effective until this time. */
    effective_to?: (string & tags.Format<"date-time">) | null;

    /** Filter configs created on or after this time. */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** Filter configs created on or before this time. */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /** If true, include only soft-deleted (evidence) configs in search. */
    deleted?: boolean;

    /** Sort results by this field (e.g., 'created_at', 'key'). */
    sort_by?: string;

    /** Sort order for result set. */
    order?: "asc" | "desc";

    /** Result page number (1-indexed). */
    page?: number;

    /** Maximum number of records per page. */
    limit?: number;
  };
}
