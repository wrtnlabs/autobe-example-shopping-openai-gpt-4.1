import { tags } from "typia";

/**
 * Detailed entity type representing an order's delivery window/address in the
 * shopping mall platform. Each record specifies where, to whom, and under what
 * delivery instructions an order (or shipment batch) should be delivered.
 * Includes address snapshot (immutable at delivery creation), recipient,
 * contact info, status, delivered/confirmed state, and metadata for
 * audit/evidence. Used in multi-fulfillment scenarios and international
 * logistics. All fields reflect the shopping_mall_deliveries Prisma schema,
 * including status and audit meta. Links to downstream after-sales and
 * compliance modules. Sensitive information is included only for authorized
 * actors (customer, seller, admin).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallDelivery = {
  /** Unique identifier of the delivery record (primary key). */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key to the parent order. Uniquely identifies which order this
   * delivery belongs to.
   */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /**
   * Optional foreign key to the shipment this delivery is mapped to, if
   * shipment is tracked in split delivery scenarios. May be null if the
   * delivery is global for the order.
   */
  shopping_mall_shipment_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Name of the delivery recipient as submitted for the order/delivery. Used
   * for courier handover and compliance.
   */
  recipient_name: string;

  /**
   * Contact phone number for the recipient. May be regionally formatted. Used
   * for delivery coordination.
   */
  recipient_phone: string;

  /**
   * Full delivery address (structured or serialized) as captured at the
   * moment of delivery creation. Used for immutable evidence and compliance.
   */
  address_snapshot: string;

  /**
   * Customer-provided message or instruction for the courier/logistics
   * provider. Optional.
   */
  delivery_message?: string | undefined;

  /**
   * The current delivery status: 'prepared', 'dispatched', 'delivered',
   * 'returned', 'failed', 'confirmed', or other allowed system statuses.
   * Indicates physical fulfillment process.
   */
  delivery_status: string;

  /**
   * Timestamp indicating when delivery was completed and confirmed by
   * customer/system. Null if delivery is still in process.
   */
  confirmed_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Number of attempts made to deliver the order. Increases on each
   * failed/missed delivery attempt.
   */
  delivery_attempts: number & tags.Type<"int32">;

  /** Datetime delivery record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Datetime delivery record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp for the delivery record. Null if delivery is
   * active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallDelivery {
  /**
   * Request object for searching, filtering, and paginating delivery records
   * associated with an order. Allows advanced querying by delivery_status,
   * shipment ID, recipient, address, confirmation state, delivery attempts,
   * and time periods. Used by fulfillment monitoring, after-sales, and
   * customer UX for order delivery management and analytics. Supports paging
   * and sort controls.
   */
  export type IRequest = {
    /**
     * Page number for pagination. Starts at 1. Optional, for paginated
     * results.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of results per page. Optional; defaults to a
     * system-configured value or 20/50.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Delivery status to filter results (e.g., 'prepared', 'dispatched',
     * 'delivered', 'confirmed', etc). Must match actual system status
     * values from the database.
     */
    delivery_status?: string | undefined;

    /**
     * Filter results for deliveries matching recipient's name
     * (case-insensitive partial match allowed). Optional.
     */
    recipient_name?: string | undefined;

    /**
     * Filter for deliveries to this contact phone number. Exact match or
     * partial, business policy dependent. Optional.
     */
    recipient_phone?: string | undefined;

    /**
     * Shipment UUID filter; returns only deliveries associated with the
     * given shipment batch.
     */
    shipment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * ISO8601 lower-bound for confirmed_at field (i.e., only deliveries
     * confirmed after this datetime). Optional.
     */
    confirmed_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** ISO8601 upper-bound for confirmed_at field. Optional. */
    confirmed_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Lower-bound for delivery record creation date. Optional. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Upper-bound for delivery record creation date. Optional. */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort field for delivery search. Must be one of the allowed enum
     * values.
     */
    sort_by?:
      | "created_at"
      | "recipient_name"
      | "delivery_status"
      | "confirmed_at"
      | undefined;

    /**
     * Sort direction for deliveries (ascending/descending). Optional,
     * default is 'desc'.
     */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Creation DTO for a new delivery record for an order in the shopping mall
   * platform. Used to register a delivery window, recipient, and address at
   * ordering/fulfillment time. This object is passed during initial creation
   * of delivery records and does not include system timestamps or audit meta
   * fields (which are set automatically). All required properties must be
   * populated for a valid delivery. This DTO is referenced only during insert
   * and not for updates.
   */
  export type ICreate = {
    /**
     * UUID reference to the order for which this delivery is created. Must
     * match a valid shopping_mall_orders record.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * Optional UUID reference to the shipment batch this delivery
     * corresponds to. Use if doing split/multi-shipment deliveries; may be
     * null.
     */
    shopping_mall_shipment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Delivery recipient name (as it will appear to courier/logistics).
     * Required.
     */
    recipient_name: string;

    /**
     * Delivery recipient's contact phone number. Must be valid for
     * region/country; required.
     */
    recipient_phone: string;

    /**
     * Serialized address of the recipient at the point of delivery
     * creation. Must include all fields necessary for courier/delivery
     * provider. Optional or required based on platform settings.
     */
    address_snapshot?: string | undefined;

    /**
     * Delivery message or customer comment for logistics (instructions,
     * access notes, etc). Optional.
     */
    delivery_message?: string | undefined;

    /**
     * Initial delivery status for the record, typically 'prepared',
     * 'pending', or other allowed status based on workflow rules.
     * Required.
     */
    delivery_status: string;

    /**
     * Initial number of delivery attempts (typically 0 or 1 when first
     * created). Required.
     */
    delivery_attempts: number & tags.Type<"int32">;
  };

  /**
   * Update payload for a delivery address record in shopping_mall_deliveries.
   * This type is used to update delivery information including the recipient,
   * contact, address, delivery message, status, and confirmation time per
   * delivery and evidence/audit requirements. Only include fields to be
   * updated.
   */
  export type IUpdate = {
    /**
     * Recipient name at time of delivery. When updating, supply the new
     * recipient name per delivery record policy. Maps directly to
     * shopping_mall_deliveries.recipient_name.
     */
    recipient_name: string;

    /**
     * Contact phone of recipient. Updated if delivery recipient phone
     * changes. See shopping_mall_deliveries.recipient_phone.
     */
    recipient_phone: string;

    /**
     * Full delivery address/final snapshot for compliance/audit. When
     * updating, provide new full address as serialized (JSON, string).
     * Preserves audit evidence. See
     * shopping_mall_deliveries.address_snapshot.
     */
    address_snapshot: string;

    /**
     * User-supplied delivery message/instructions; nullable. Provided in
     * update payload if notes or delivery message change. See
     * shopping_mall_deliveries.delivery_message.
     */
    delivery_message?: string | null | undefined;

    /**
     * Updated delivery status (prepared, dispatched, delivered, returned,
     * failed, confirmed, etc). Controls allowed transitions according to
     * platform business rules. See
     * shopping_mall_deliveries.delivery_status.
     */
    delivery_status: string;

    /**
     * New confirmation time (ISO8601, date-time) for successful delivery.
     * Nullable; only set when confirming delivery. Maps to
     * shopping_mall_deliveries.confirmed_at.
     */
    confirmed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * If business logic allows updating attempts, provide new total number
     * of delivery attempts. See
     * shopping_mall_deliveries.delivery_attempts.
     */
    delivery_attempts: number & tags.Type<"int32">;
  };

  /**
   * Summary DTO representing a delivery record (address window, batch
   * delivery) for a shopping mall order. Used for paginated/searchable
   * delivery lists, this includes key recipient, address, status, shipment,
   * and audit fields from shopping_mall_deliveries. Fields and descriptions
   * are mapped directly from the schema specification and audit requirements.
   * The full delivery entity is IShoppingMallDelivery; this summary is for
   * index/grid purposes.
   */
  export type ISummary = {
    /** Primary key for the delivery record; shopping_mall_deliveries.id. */
    id: string & tags.Format<"uuid">;

    /**
     * UUID for the related order.
     * shopping_mall_deliveries.shopping_mall_order_id.
     */
    order_id: string & tags.Format<"uuid">;

    /**
     * Associated shipment batch (if multi-shipment), nullable,
     * shopping_mall_deliveries.shopping_mall_shipment_id.
     */
    shipment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Actual recipient name captured at the time;
     * shopping_mall_deliveries.recipient_name.
     */
    recipient_name: string;

    /**
     * Contact phone for the recipient.
     * shopping_mall_deliveries.recipient_phone.
     */
    recipient_phone: string;

    /**
     * Serialized structure (e.g., JSON string) of the delivery address and
     * any customs meta; frozen at time of creation
     * (shopping_mall_deliveries.address_snapshot).
     */
    address_snapshot: string;

    /**
     * User-supplied delivery instruction/message, nullable,
     * shopping_mall_deliveries.delivery_message.
     */
    delivery_message?: string | null | undefined;

    /**
     * Delivery lifecycle state (prepared, dispatched, delivered, returned,
     * failed, confirmed, etc.). shopping_mall_deliveries.delivery_status.
     */
    delivery_status: string;

    /** Delivery confirmation time, if confirmed by user/system. Nullable. */
    confirmed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Number of delivery attempts recorded for audit/evidence.
     * shopping_mall_deliveries.delivery_attempts.
     */
    delivery_attempts: number & tags.Type<"int32">;

    /**
     * Record creation time for delivery slot/evidence.
     * shopping_mall_deliveries.created_at.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update time (e.g., delivery event) for business audit.
     * shopping_mall_deliveries.updated_at.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft-deletion timestamp for logical removal/compliance. Nullable,
     * shopping_mall_deliveries.deleted_at.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
