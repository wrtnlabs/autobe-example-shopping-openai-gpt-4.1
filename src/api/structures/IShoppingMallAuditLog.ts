import { tags } from "typia";

/**
 * Full system audit log entry detailing the type, actor, event result/message,
 * timestamps, and related snapshot for compliance, evidence, and forensic
 * traceability.
 *
 * Linked to shopping_mall_audit_logs table. Used for legal audit, business rule
 * tracing, and security event tracking. See Prisma schema for additional
 * business logic and column constraints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAuditLog = {
  /** Unique identifier for the audit log entry (UUID format). */
  id: string & tags.Format<"uuid">;

  /**
   * Type of the entity involved in the audit event (polymorphic, e.g.,
   * 'order', 'product', 'customer').
   */
  entity_type: string;

  /** ID of the entity involved in the audit event (polymorphic association). */
  entity_id: string & tags.Format<"uuid">;

  /**
   * Type/category of event (e.g., create, update, delete, login,
   * permission_granted, error, workflow_transition, business_rule_eval,
   * etc.).
   */
  event_type: string;

  /**
   * User/admin/seller or system process that performed/triggered the event.
   * Used for accountability and forensics.
   */
  actor_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional reference to the associated snapshot (if relevant to this audit
   * event or state change).
   */
  snapshot_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Result of the audited event (success, failure, denied, completed,
   * partial, error code). Human/machine readable for business trace/audit.
   */
  event_result: string;

  /**
   * Detailed message or context (structured or free-form) about the event
   * itself (error details, input parameters, automated reasoning).
   */
  event_message?: string | null | undefined;

  /**
   * When this audited event occurred (precise business event time, ISO 8601
   * format).
   */
  event_time: string & tags.Format<"date-time">;

  /**
   * Time when this audit log record was written (system timestamp, ISO 8601
   * format).
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallAuditLog {
  /**
   * Request body for searching and paginating audit log records. Supports
   * advanced filtering by entity, actor, event type, result, timestamp,
   * message, and linkages to snapshots. Used for compliance, forensic, and
   * security/audit monitoring of business events.
   */
  export type IRequest = {
    /**
     * Type of target entity (e.g., 'order', 'product', 'customer'), used
     * for scoped event search in audit logs.
     */
    entity_type?: string | undefined;

    /**
     * UUID/ID of the specific entity instance. Enables audit searching for
     * events affecting a given item.
     */
    entity_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Category of audit event (e.g., 'create', 'update', 'delete',
     * 'workflow_transition', etc).
     */
    event_type?: string | undefined;

    /**
     * UUID identifying the user/admin/seller/system that performed the
     * audited event. Enables actor-scoped event search.
     */
    actor_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Result status of the audited event (e.g. 'success', 'failure',
     * 'denied', error code, etc.)
     */
    event_result?: string | undefined;

    /**
     * Lower bound for event time (ISO8601 string) to restrict search to
     * events at or after a certain time.
     */
    event_time_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound for event time (ISO8601 string) for searching up to a
     * cutoff event time.
     */
    event_time_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * UUID of the entity snapshot associated with the audit event. Allows
     * search for audit events linked to a specific evidence snapshot.
     */
    snapshot_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Free-text or structured event message (error, result context,
     * human-readable note). Enables text-based/debug search.
     */
    event_message?: string | undefined;

    /**
     * Page number for pagination (1-based, system default=1 if
     * null/omitted).
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Result size per page for pagination (system default and maximum
     * enforced by business rules).
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Sorting instruction for results (e.g., 'event_time desc', 'actor_id
     * asc'). Syntax is backend-implementation-specific.
     */
    sort?: string | undefined;
  };
}
