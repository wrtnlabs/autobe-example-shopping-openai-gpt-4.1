import { tags } from "typia";

/**
 * Represents a single option selection for a cart item (e.g., color or size on
 * a product added to cart). Used for downstream order, analytics, and
 * fulfillment logic.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceCartItemOption = {
  /** Unique identifier of this cart item option selection. */
  id: string & tags.Format<"uuid">;

  /**
   * The UUID referencing the cart item to which this option selection
   * belongs.
   */
  cart_item_id: string & tags.Format<"uuid">;

  /**
   * Name of the option as configured by the business logic (e.g., 'color',
   * 'size').
   */
  option_name: string;

  /** The selected value for the option (e.g., 'red', 'XL'). */
  option_value: string;

  /** Timestamp when this option selection was made (ISO8601). */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceCartItemOption {
  /**
   * Search and pagination request for listing cart item options belonging to
   * a specific cart. Used to retrieve, filter, and browse option selections
   * for editing, audit, or checkout logic.
   *
   * Reference: ai_commerce_cart_item_options, ai_commerce_cart_items.
   */
  export type IRequest = {
    /** The UUID identifying the cart whose item options to search. */
    cartId: string & tags.Format<"uuid">;

    /**
     * Search keyword for filtering option names. Partial match,
     * case-insensitive.
     */
    optionName?: string | undefined;

    /** Page number for pagination (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Maximum number of items to return per page. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Request payload for creating a new option selection on a cart item,
   * during cart update or item customization logic.
   */
  export type ICreate = {
    /** UUID of the cart item this option is being selected for. */
    cart_item_id: string & tags.Format<"uuid">;

    /** Business-defined option name, such as 'color', 'addon', etc. */
    option_name: string;

    /** User-selected value for the option. */
    option_value: string;
  };

  /** Payload for updating an existing cart item option's selected value. */
  export type IUpdate = {
    /**
     * If modifiable, the option name may be changed (business rule:
     * typically immutable except in admin/advanced flows).
     */
    option_name?: string | undefined;

    /** Updated value for the option; e.g., changing from 'Red' to 'Blue'. */
    option_value?: string | undefined;
  };
}
