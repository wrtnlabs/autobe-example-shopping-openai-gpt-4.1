import { tags } from "typia";

/**
 * Represents a single product option (e.g., color, size) as registered under a
 * product in the shopping mall system. Implements all fields from the
 * shopping_mall_product_options table, supporting identification, UI display,
 * business rules (mandatory/optional), and audit operations. All date-time
 * fields are ISO 8601 format. The presence of deleted_at indicates soft
 * deletion for compliance/evidence audits.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallProductOption = {
  /**
   * Unique identifier for the product option row. References
   * shopping_mall_product_options.id (UUID).
   */
  id: string & tags.Format<"uuid">;

  /** Parent product's unique identifier (shopping_mall_products.id). */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /** Display label of the product option (e.g., 'Color', 'Size'). */
  name: string;

  /**
   * Indicates if this option is mandatory for purchase (true=must select;
   * false=optional).
   */
  required: boolean;

  /**
   * UI display order for option selection and sorting. Lower numbers appear
   * earlier in option lists.
   */
  position: number & tags.Type<"int32">;

  /**
   * Creation timestamp for this option (ISO 8601 'date-time'). References
   * shopping_mall_product_options.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp (ISO 8601 'date-time'). Updated automatically on
   * change. References shopping_mall_product_options.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp for audit/evidence. Present when option has been
   * logically removed, otherwise null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallProductOption {
  /**
   * Query parameters for searching and paginating product options. Used in
   * filtered PATCH or GET list operations for product options API. All
   * properties are optional, supporting advanced query and filtering
   * workflows for options attached to products.
   */
  export type IRequest = {
    /** Page number for paginated retrieval. Optional. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Page size (max results per page) for paginated list. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Keyword search against option name or other user-facing fields.
     * Optional.
     */
    search?: string | undefined;

    /**
     * Sort order for results (e.g., 'position:asc', 'name:desc'). Optional.
     * Must match supported sort fields.
     */
    sort?: string | undefined;

    /**
     * Filter: Option name (exact or partial match, case-insensitive).
     * Optional.
     */
    name?: string | undefined;

    /** Filter: Only required/optional product options. */
    required?: boolean | undefined;
  };

  /**
   * Request body for creating a new product option for a product. Only
   * accepts schema-defined fields: option name, whether selection is
   * mandatory, and UI display position. Excludes system-managed and
   * relational fields (id, created_at, updated_at, deleted_at).
   */
  export type ICreate = {
    /**
     * The display name of the product option users will see when
     * customizing or selecting product attributes. Must be non-empty.
     * (e.g., 'Color', 'Size')
     */
    name: string;

    /**
     * Set to true if customers must select a value for this option to
     * purchase the product; false if selection can be omitted.
     */
    required: boolean;

    /**
     * Integer representing the UI order of the option among other options
     * for the product. Lower numbers appear first. Optional on create; if
     * omitted, default or auto-increment logic may assign order.
     */
    position: number & tags.Type<"int32">;
  };

  /**
   * Request body for modifying properties of an existing product option.
   * Accepts any subset of the updatable fields; all properties are optional
   * and may be omitted/null for partial updates (PATCH/PUT). System-managed
   * fields (id, product, created_at, updated_at, deleted_at) are not accepted
   * in update requests.
   */
  export type IUpdate = {
    /**
     * Update to the display label for the product option (e.g., correcting
     * from 'Sizee' to 'Size'). Optional; omit or null to leave unchanged.
     */
    name?: string | undefined;

    /**
     * Update whether this option is mandatory to select for purchase.
     * Optional; omit or null to leave unchanged.
     */
    required?: boolean | undefined;

    /**
     * Update the UI display order of the option among its siblings.
     * Optional; omit or null to leave unchanged.
     */
    position?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Summary DTO for a product option in shopping_mall_product_options. Used
   * for option listing, UI presentation, analytics, and validation. Contains
   * business-identifying metadata but omits value arrays. Integrates with
   * parent product entity for full composition/variant logic. Exported in
   * summary result lists and option search APIs. ISO8601 format is used for
   * all date/time fields. Optionally includes soft deletion timestamp for
   * audit/recoverability.
   */
  export type ISummary = {
    /** Primary key of the product option record. */
    id: string & tags.Format<"uuid">;

    /** Parent product ID this option belongs to. */
    shopping_mall_product_id: string & tags.Format<"uuid">;

    /** Option name (e.g. Size, Color) as shown to customers in the UI. */
    name: string;

    /**
     * Whether this option must be selected to order product (business
     * constraint field).
     */
    required: boolean;

    /** Display order/position in option selection UI. */
    position: number & tags.Type<"int32">;

    /** Timestamp when option was created. */
    created_at: string & tags.Format<"date-time">;

    /** Last update to option metadata. */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp; null if still present. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
