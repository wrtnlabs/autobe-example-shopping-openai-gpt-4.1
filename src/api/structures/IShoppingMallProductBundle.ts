import { tags } from "typia";

/**
 * Represents a product bundle/composite product in the shopping mall platform.
 * Each bundle groups one or more products under a parent product, allowing
 * customers to purchase a set rather than individual items. Includes
 * information about display name, bundle type (fixed or optional), order within
 * product, and timestamps. The bundle may be soft deleted (deleted_at) for
 * compliance/audit. Relationships to constituent bundle items and parent
 * product are managed by related endpoints and are not embedded here.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallProductBundle = {
  /**
   * Primary Key. Unique identifier for this product bundle. References
   * shopping_mall_product_bundles.id in the database.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the parent product for which this bundle is defined.
   * Corresponds to shopping_mall_products.id.
   */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /**
   * Bundle display name for customers. Uniquely distinguishes this bundle per
   * product.
   */
  name: string;

  /**
   * Type of bundle: e.g., 'fixed' (must include all items) or 'optional'
   * (user-selectable). String, but should follow a controlled vocabulary in
   * business logic.
   */
  bundle_type: string;

  /**
   * Short (optional) description of the bundle contents, configuration, or
   * purpose. Null if not supplied.
   */
  description?: string | null | undefined;

  /**
   * Display order for multiple bundles attached to the same product. Lower
   * numbers usually appear first in the UI.
   */
  position: number & tags.Type<"int32">;

  /** Timestamp of when the bundle was created (in UTC, RFC 3339 format). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last update to this bundle (in UTC). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp representing soft deletion of the bundle. Null if bundle is
   * active; set to UTC timestamp if logically removed.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallProductBundle {
  /**
   * Request structure for searching, filtering, or paginating product bundles
   * for a parent product.
   *
   * Supports pagination (page, limit), keyword searching (search), bundle
   * type filter, and sort options for result ordering. Used in endpoints
   * fetching a page or filtered set of product bundles linked to a parent
   * product, primarily by sellers or administrators. No required keys; all
   * options are optional for flexible querying.
   */
  export type IRequest = {
    /**
     * Results page to retrieve (1-based index). Used for pagination.
     * Optional; defaults may apply in the system.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of bundle results per page. Optional; bounded by
     * system maximum.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Optional free-text search filter for bundle name, code, or
     * description. Partial word, case-insensitive matches may be applied
     * depending on implementation.
     */
    search?: string | undefined;

    /**
     * Type of the product bundle. Should match the bundle_type field in the
     * product bundle entity. Optional filter; expects exact match if
     * provided (e.g., 'fixed', 'optional').
     */
    bundle_type?: string | undefined;

    /**
     * Optional sort field for ordering bundles in the result. May include
     * values such as 'position', 'created_at', or 'name'. Available fields
     * may vary by implementation.
     */
    sort_by?: string | undefined;

    /**
     * Sort order for the chosen sort field. Allowed values: 'asc', 'desc'.
     * Optional; defaults to system preference.
     */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * DTO type for creating a new product bundle associated with a parent
   * product. Includes display name, type, optional description, and UI
   * position. Excludes primary key (id) and audit timestamps, which are set
   * by the system. All business rules for uniqueness and product eligibility
   * apply at creation.
   */
  export type ICreate = {
    /**
     * UUID referencing the parent product for which this new bundle is
     * being created. Must point to a valid shopping_mall_products.id.
     */
    shopping_mall_product_id: string & tags.Format<"uuid">;

    /**
     * Display name for the bundle as seen by customers. Must be unique per
     * product.
     */
    name: string;

    /**
     * Type of bundle: typically 'fixed' (all items included) or 'optional'
     * (selectable items). Must follow business controlled vocabulary for
     * bundle types.
     */
    bundle_type: string;

    /**
     * Optional human-readable description of what the bundle includes. Null
     * if not supplied.
     */
    description?: string | null | undefined;

    /**
     * Display order for the bundle among all bundles for the product. Lower
     * numbers appear first in sorting/UIs. If omitted, defaults to 'end' or
     * system preference.
     */
    position: number & tags.Type<"int32">;
  };

  /**
   * DTO type for updating an existing product bundle. All fields are optional
   * (PATCH semantics): supply only those that should be changed. Primary key
   * and parent product reference are immutable here. Allows update of name,
   * type, optional description, and UI position. System sets audit/updated_at
   * fields automatically. Excludes creation/deletion timestamps.
   */
  export type IUpdate = {
    /**
     * New value for the bundle's display name. Unique per parent product.
     * Optional; include if updating name.
     */
    name?: string | undefined;

    /**
     * Updated bundle type: e.g., 'fixed' or 'optional'. Optional; include
     * if updating bundle_type.
     */
    bundle_type?: string | undefined;

    /**
     * Optional new human-readable description. Supply null to clear, or a
     * string to set/replace description.
     */
    description?: string | null | undefined;

    /**
     * Updated display order for this bundle among others. Optional; only
     * include if changing position.
     */
    position?: (number & tags.Type<"int32">) | undefined;
  };
}
