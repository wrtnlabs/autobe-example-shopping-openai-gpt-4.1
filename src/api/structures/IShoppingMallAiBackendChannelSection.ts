import { tags } from "typia";

/**
 * Complete channel section entity, including unique ID, admin/business codes,
 * parent/child linkage, description, sort order, and full audit evidence via
 * timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendChannelSection = {
  /** Section unique identifier (PK). */
  id: string & tags.Format<"uuid">;

  /** Parent channel UUID; this section belongs to a single channel. */
  shopping_mall_ai_backend_channel_id: string & tags.Format<"uuid">;

  /** Parent section UUID; nullable for root/top-level sections. */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Unique code for this section within the channel (used for business logic
   * and integration).
   */
  code: string;

  /**
   * Display name for this section (used for visual navigation and admin
   * reference).
   */
  name: string;

  /**
   * Section admin/business description, nullable (used for context and
   * evidence/audit).
   */
  description?: string | null;

  /** Visual sort order (admin UI or navigation ordering context). */
  order: number;

  /** Creation timestamp (for evidence and sorting). */
  created_at: string & tags.Format<"date-time">;

  /** Update timestamp (for evidence and ordering). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp (nullable, used for evidence and business
   * context.)
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendChannelSection {
  /**
   * Filtering and pagination request structure for shopping mall channel
   * sections. Allows flexible query, hierarchical drill-down, and sort
   * control for admin or configuration screens, respecting channel, code,
   * name, parent node, ordering, and paging context for efficient navigation
   * and management.
   */
  export type IRequest = {
    /** Filter sections by their unique code (within the channel). */
    code?: string;

    /**
     * Filter by display name for section/navigation. May use partial-match
     * search for admin UI discovery.
     */
    name?: string;

    /**
     * Search only under the provided parent section for tree/listing logic,
     * or null for root nodes.
     */
    parent_id?: string;

    /** Page of records to return (pagination). */
    page?: number &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Maximum records per page. */
    limit?: number &
      tags.JsonSchemaPlugin<{
        format: "uint32";
      }>;

    /** Field to sort by (e.g., name, order, created_at). */
    sortBy?: string;

    /** Sort direction. */
    sortDir?: "asc" | "desc";
  };

  /**
   * Minimal information for paged lists of channel sections, including
   * business code, sort order, display names, and key audit fields. Excludes
   * description and deep structure for performance.
   */
  export type ISummary = {
    /** Unique section ID (UUID, PK). */
    id: string & tags.Format<"uuid">;

    /** Section code, unique within channel. */
    code: string;

    /** Display name for section. */
    name: string;

    /** Order for visual sorting/navigation. */
    order: number;

    /** Parent section UUID, nullable for root sections. */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** Soft deletion timestamp, nullable. */
    deleted_at?: (string & tags.Format<"date-time">) | null;

    /** Timestamp of section creation. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of last update. */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Payload for creating a new sales channel section. Code and name are
   * required for business reference and display; order defines the visual or
   * navigation sequence. Parent can be null for root-level sections;
   * description is optional.
   */
  export type ICreate = {
    /** Unique code for this new section (required). */
    code: string;

    /** Display name for the new section (required). */
    name: string;

    /**
     * Parent section UUID for tree structure, null for root/top-level
     * section.
     */
    parent_id?: string | null;

    /** Optional section admin/business description. */
    description?: string | null;

    /** Visual display order for navigation (required). */
    order: number;
  };

  /**
   * Payload to update existing section business/metadata. All fields are
   * optional and only updated if supplied, respecting business uniqueness and
   * tree structure logic.
   */
  export type IUpdate = {
    /** Change/rename code for this section (unique within channel). */
    code?: string;

    /** Change display name of the section. */
    name?: string;

    /** Update parent linkage, null for root. */
    parent_id?: string | null;

    /** Change admin/business description. */
    description?: string | null;

    /** Change display order for navigation. */
    order?: number;
  };
}
