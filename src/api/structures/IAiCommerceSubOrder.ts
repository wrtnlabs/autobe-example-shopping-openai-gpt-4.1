import { tags } from "typia";

/**
 * Full sub-order business entity as described in ai_commerce_sub_orders. Used
 * for order segmentation, multi-vendor fulfillment, and admin tracking in split
 * order processing.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceSubOrder = {
  /** Primary key. Unique identifier for the sub-order. */
  id: string & tags.Format<"uuid">;

  /** Reference to the parent order (ai_commerce_orders.id). */
  order_id: string & tags.Format<"uuid">;

  /** UUID of the seller fulfilling this sub-order. */
  seller_id: string & tags.Format<"uuid">;

  /**
   * Unique business code/identifier for this sub-order, e.g., parent order +
   * segment.
   */
  suborder_code: string;

  /**
   * Current status for this sub-order (e.g., 'payment_pending', 'shipped',
   * 'delivered', 'completed', 'cancelled').
   */
  status: string;

  /** Selected shipping method for this fulfillment segment. Nullable. */
  shipping_method?: string | null | undefined;

  /** Tracking waybill or reference number for this sub-order (nullable). */
  tracking_number?: string | null | undefined;

  /**
   * Total price allocated to this sub-order portion, must match sum of linked
   * items.
   */
  total_price: number;

  /** Timestamp (ISO 8601) when this sub-order was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last update to this sub-order. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete marker for sub-order (if present, sub-order is logically
   * deleted).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceSubOrder {
  /**
   * Search/filtering structure for querying sub-orders associated with an
   * order (ai_commerce_sub_orders). All fields are optional; combined to form
   * advanced queries for operational and analytics workflows.
   */
  export type IRequest = {
    /** UUID of the seller responsible for the sub-order, used as a filter. */
    seller_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter sub-orders by their current status (e.g., 'payment_pending',
     * 'shipped', 'delivered', 'cancelled').
     */
    status?: string | undefined;

    /** Filter sub-orders by shipping method used. */
    shipping_method?: string | undefined;

    /** Filter by tracking number (partial or full match). */
    tracking_number?: string | undefined;

    /** Start date for filtering sub-orders by created_at. */
    from_date?: (string & tags.Format<"date-time">) | undefined;

    /** End date for filtering sub-orders by created_at. */
    to_date?: (string & tags.Format<"date-time">) | undefined;

    /** Pagination: the page number for result set. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Pagination: the number of results per page. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Creation DTO for sub-order entity (ai_commerce_sub_orders). Used when
   * splitting orders into multi-vendor or fulfillment segments.
   * Shipping/tracking fields are optional/null at creation.
   */
  export type ICreate = {
    /** Parent order's ai_commerce_orders.id to attach sub-order to. */
    order_id: string & tags.Format<"uuid">;

    /** Seller's ai_commerce_seller.id responsible for this sub-order. */
    seller_id: string & tags.Format<"uuid">;

    /**
     * Business code for the sub-order (unique per set, recommended to
     * combine order code and segment).
     */
    suborder_code: string;

    /**
     * Initial status for the sub-order (e.g., 'payment_pending', 'shipped',
     * etc.).
     */
    status: string;

    /** Shipping method for the sub-order. Nullable. */
    shipping_method?: string | null | undefined;

    /** Tracking waybill or reference number for this sub-order (nullable). */
    tracking_number?: string | null | undefined;

    /** Total price assigned to this sub-order at creation. */
    total_price: number;
  };
}
