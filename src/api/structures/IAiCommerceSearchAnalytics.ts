import { tags } from "typia";

/**
 * Platform search analytics event as stored and used in
 * ai_commerce_search_analytics; includes all analytic and business breakdown
 * details.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceSearchAnalytics = {
  /** Unique identifier for the search analytics event/row. */
  id: string & tags.Format<"uuid">;

  /**
   * Key for aggregation of analytics, such as a query string, filter, or
   * facet.
   */
  aggregation_key: string;

  /**
   * Value of the aggregation key for analytic grouping (e.g., filter value,
   * query, or segment).
   */
  aggregation_value: string;

  /** Number of searches/events for this aggregation. */
  search_count: number & tags.Type<"int32">;

  /** Number of total search results aggregated for this entry. */
  result_total: number & tags.Type<"int32">;

  /** Start of analytic calculation period (ISO 8601). */
  analyzed_period_start: string & tags.Format<"date-time">;

  /** End of analytic calculation period (ISO 8601). */
  analyzed_period_end: string & tags.Format<"date-time">;
};
export namespace IAiCommerceSearchAnalytics {
  /**
   * Request body for searching and filtering platform search analytics
   * (period, aggregation key, filter/pagination, etc.).
   */
  export type IRequest = {
    /**
     * Search analytics aggregation key, e.g., keyword, filter, or facet
     * used for the analysis period.
     */
    aggregation_key?: string | undefined;

    /**
     * Aggregation value (e.g., value of keyword or filter for analytic
     * breakdown).
     */
    aggregation_value?: string | undefined;

    /**
     * Start of analysis period (ISO 8601 date or date-time). Optional
     * filter.
     */
    from?: (string & tags.Format<"date-time">) | undefined;

    /** End of analysis period (ISO 8601 date or date-time). Optional filter. */
    to?: (string & tags.Format<"date-time">) | undefined;

    /** Result page index, starting from 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Page size for results. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Sort key (e.g., aggregation_key, aggregation_value, search_count,
     * period_start, etc.).
     */
    sort?: string | undefined;

    /** Sort order for result set. */
    order?: "asc" | "desc" | undefined;
  };
}
