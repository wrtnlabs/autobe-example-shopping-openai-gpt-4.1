import { tags } from "typia";

/**
 * Moderation log entry for tags, capturing audit fields, action taken,
 * moderator and reason.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceTagModeration = {
  /** Primary Key. */
  id: string & tags.Format<"uuid">;

  /** Associated tag's id for this moderation event. */
  ai_commerce_tag_id: string & tags.Format<"uuid">;

  /** Type of moderation taken: 'approve', 'reject', 'flag', 'suspend'. */
  moderation_action: string;

  /** Moderator's admin user id. */
  moderated_by: string & tags.Format<"uuid">;

  /** Description/rationale for moderation action (optional). */
  moderation_reason?: string | undefined;

  /** Moderation event creation timestamp (ISO 8601 format). */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceTagModeration {
  /**
   * DTO for searching/moderation log paging for tag moderation events. Fields
   * are optional.
   */
  export type IRequest = {
    /** The tag's unique identifier to filter moderation events (optional) */
    tagId?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by moderation action (approve/reject/flag/suspend) (optional) */
    action?: string | undefined;

    /**
     * ISO 8601 string for filtering moderation records created after this
     * time (optional)
     */
    fromDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 string for filtering moderation records created before this
     * time (optional)
     */
    toDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter to moderation events performed by the specified
     * moderator/admin (optional)
     */
    moderatorId?: (string & tags.Format<"uuid">) | undefined;

    /** Page number for pagination (optional) */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Number of results per page */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Create object for moderation record (ai_commerce_tag_moderation). Used
   * for admins to apply or record a moderation action to a tag entity.
   * Includes required moderation_action (enum allowed), optional
   * moderation_reason for audit.
   */
  export type ICreate = {
    /**
     * Moderation action performed on the tag. Acceptable values: 'approve',
     * 'reject', 'flag', 'suspend'. Required.
     */
    moderation_action: string;

    /**
     * (Optional) Business/workflow reason for moderation. Used for
     * compliance, business audit, or moderation record clarity.
     */
    moderation_reason?: string | undefined;
  };

  /**
   * Update object for a tag moderation record. Either field may be supplied
   * independently for patch-like updates; both are optional. Business logic
   * applies for valid transitions.
   */
  export type IUpdate = {
    /**
     * (Optional) Updated moderation action for the tag. Allowed values:
     * 'approve', 'reject', 'flag', 'suspend'. Not required; schema allows
     * partial/patched update.
     */
    moderation_action?: string | undefined;

    /**
     * (Optional) Updated business reason for moderation change. Used for
     * audit and for record keeping.
     */
    moderation_reason?: string | undefined;
  };
}
