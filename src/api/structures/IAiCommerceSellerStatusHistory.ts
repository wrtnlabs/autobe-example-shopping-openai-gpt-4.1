import { tags } from "typia";

/**
 * Status change record for a seller. Used for audit, analytics, moderation
 * review, and legal/compliance events. Linked to onboarding, escalation,
 * penalty, or demotion/withdrawal events as applicable.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceSellerStatusHistory = {
  /** Primary key (UUID) uniquely identifying each status history record. */
  id: string & tags.Format<"uuid">;

  /**
   * FK for the user who had the status transition. References seller
   * onboarding or account entity.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Optional FK to the affected seller profile (UUID or null when transition
   * occurred before profile creation or demotion/withdrawal event).
   */
  seller_profile_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * The status value (role, approval, penalty, etc.) before transition. Null
   * for onboarding/initial role grant.
   */
  previous_status?: string | null | undefined;

  /**
   * The status value (role, approval, penalty, etc.) after the transition.
   * Must be a valid business status/role string.
   */
  new_status: string;

  /**
   * Reason provided for the status transition (e.g., moderation violation,
   * onboarding approval, penalty, AI escalation). May be null for automated
   * or silent transitions.
   */
  transition_reason?: string | null | undefined;

  /**
   * Actor performing or initiating the status change (admin ID, seller, or
   * system/AI identifier).
   */
  transition_actor: string;

  /**
   * UTC ISO timestamp when the status change event occurred. Used for
   * compliance, analytics, and audit evidence.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceSellerStatusHistory {
  /**
   * Query parameters for paginated, filtered search of seller status change
   * history, supporting compliance, audit, and analytics. Supports full and
   * partial query for advanced admin or reporting UI.
   */
  export type IRequest = {
    /**
     * Filter for status history events related to a specific user ID
     * (seller onboarding/account).
     */
    user_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter for status history events for a specific seller profile
     * (store/business identity).
     */
    seller_profile_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional, filter for old status before transition (e.g., filtering
     * all suspensions by previous operational state).
     */
    previous_status?: string | undefined;

    /**
     * Optional, filter for status after transition. Enables targeted
     * analytics/reporting for events such as approval, escalation,
     * penalty.
     */
    new_status?: string | undefined;

    /**
     * Optional, search for status transitions including this reason or note
     * (full or partial match allowed for search).
     */
    transition_reason?: string | undefined;

    /**
     * Optional, search for status changes performed by a specific actor
     * (e.g., admin, AI system, automation routine, seller).
     */
    transition_actor?: string | undefined;

    /**
     * Inclusive UTC timestamp representing the earliest creation date for
     * records in the filter.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Inclusive UTC timestamp representing the latest status change in the
     * result set.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Result page (1-based for user-facing queries). Defaults to 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of results per page for pagination. Business policy may
     * enforce upper bound (e.g., 100).
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };
}
