import { tags } from "typia";

/**
 * Full product bundle entity representation as per ai_commerce_product_bundles.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceProductBundle = {
  /** UUID of the bundle. */
  id: string;

  /** UUID of the parent (container) product. */
  parent_product_id: string;

  /** Unique code for the bundle product. */
  bundle_code: string;

  /** Bundle name for product display and business management. */
  name: string;

  /**
   * Long-form description providing marketing and business context for the
   * bundle.
   */
  description?: string | undefined;

  /** Bundle status. */
  status: string;

  /** Bundle price. */
  current_price: number;

  /** Bundle creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Bundle last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Bundle soft delete timestamp, or null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Bundle component items (child products/variants). */
  items: IAiCommerceProductBundle.IBundleItem[];
};
export namespace IAiCommerceProductBundle {
  /**
   * Filter and pagination criteria for searching product bundles.
   *
   * Enables clients to search, filter, and page through the list of bundles
   * linked to a parent product by various business fields. See parent
   * product/bundle entity comments for detail.
   */
  export type IRequest = {
    /** The UUID of the parent product to filter bundles for. */
    productId?: string | undefined;

    /** Unique business code for the bundle product. */
    bundleCode?: string | undefined;

    /** Bundle display name for filtering. */
    name?: string | undefined;

    /**
     * The status of the bundle to filter by (e.g., active, paused,
     * discontinued, deleted).
     */
    status?: string | undefined;

    /** Page number for paginated results. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Records per page for pagination. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Field to sort by. */
    sort?: string | undefined;

    /** Sort order. */
    order?: "asc" | "desc" | undefined;
  };

  /** Concrete bundle item representation, for use in IAiCommerceProductBundle. */
  export type IBundleItem = {
    /** UUID of this bundle item. */
    id: string;

    /** UUID of the child product if present. */
    child_product_id?: string | undefined;

    /** UUID of the child variant if present. */
    child_variant_id?: string | undefined;

    /** Type of bundle item: 'product' or 'variant'. */
    item_type: string;

    /** Quantity of this child in the bundle. */
    quantity: number & tags.Type<"int32">;

    /** If true, the bundle must contain this item. */
    required: boolean;

    /** Item's position in the bundle's composition array. */
    sort_order: number & tags.Type<"int32">;
  };
  export namespace IBundleItem {
    /**
     * Inner model for items in a bundle at creation.
     *
     * Referencing business rule for composition and bundle item uniqueness.
     * Used as the 'items' array of IAiCommerceProductBundle.ICreate.
     */
    export type ICreate = {
      /** UUID of the child product if applicable. */
      child_product_id?: string | undefined;

      /** UUID of the child variant if applicable. */
      child_variant_id?: string | undefined;

      /** Type of bound item: 'product' or 'variant'. */
      item_type: string;

      /** The quantity of this item in the bundle. */
      quantity: number & tags.Type<"int32">;

      /** True if this item is required for the bundle. */
      required: boolean;

      /** Display/business order in the bundle. */
      sort_order: number & tags.Type<"int32">;
    };

    /**
     * Inner model for items in a bundle at update.
     *
     * Used within the 'items' array for IAiCommerceProductBundle.IUpdate.
     */
    export type IUpdate = {
      /** UUID of the bundle item, if updating an existing. */
      id?: string | undefined;

      /** UUID of the child product if applicable. */
      child_product_id?: string | undefined;

      /** UUID of the child variant if applicable. */
      child_variant_id?: string | undefined;

      /** Type of bound item: 'product' or 'variant'. */
      item_type?: string | undefined;

      /** The quantity of this item in the bundle. */
      quantity?: (number & tags.Type<"int32">) | undefined;

      /** True if this item is required for the bundle. */
      required?: boolean | undefined;

      /** Display/business order in the bundle. */
      sort_order?: (number & tags.Type<"int32">) | undefined;
    };
  }

  /**
   * Payload to create a new product bundle.
   *
   * Includes all required business fields and array of child item info. Refer
   * to ai_commerce_product_bundles schema for rules.
   */
  export type ICreate = {
    /** UUID of the parent (container) product for this bundle. */
    parent_product_id: string;

    /** Unique code for the bundle product. */
    bundle_code: string;

    /** Bundle display name. */
    name: string;

    /** Bundle description/marketing details. */
    description?: string | undefined;

    /**
     * Bundle status, must match business rule list (e.g., active, paused,
     * discontinued, deleted).
     */
    status: string;

    /** Bundle price for all items. */
    current_price: number;

    /** Bundle composition: array of child products/variants. */
    items: IAiCommerceProductBundle.IBundleItem.ICreate[];
  };

  /**
   * Payload to update an existing bundle.
   *
   * Allows full or partial patching for bundle business fields and child
   * composition. Used in PUT/PATCH endpoints for IAiCommerceProductBundle.
   */
  export type IUpdate = {
    /** Bundle business code to update. */
    bundle_code?: string | undefined;

    /** Bundle display name. */
    name?: string | undefined;

    /** Bundle description/marketing details. */
    description?: string | undefined;

    /** Bundle status to update. */
    status?: string | undefined;

    /** Bundle price. */
    current_price?: number | undefined;

    /** Bundle composition array for replacement or update. */
    items?: IAiCommerceProductBundle.IBundleItem.IUpdate[] | undefined;
  };

  /**
   * Summary of product bundle for catalog, analytics, and management lists.
   *
   * Covers core fields of composition, pricing, and visibility for
   * merchandising.
   */
  export type ISummary = {
    /**
     * Unique identifier for the product bundle (primary key @id in
     * ai_commerce_product_bundles).
     */
    id: string & tags.Format<"uuid">;

    /** Unique business code or external identifier for this bundle. */
    bundle_code: string;

    /** Display name/title for the bundle. */
    name: string;

    /** Current workflow status (active, paused, discontinued, deleted). */
    status: string;

    /** Display price for the bundle as currently configured. */
    current_price: number;

    /** Timestamp when the bundle was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the bundle was last updated. */
    updated_at: string & tags.Format<"date-time">;
  };
}
