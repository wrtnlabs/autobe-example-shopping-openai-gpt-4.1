import { tags } from "typia";

/**
 * Cart metadata record with key business fields and all needed data for
 * business logic and evidence preservation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCart = {
  /** Unique identifier for this cart. */
  id: string & tags.Format<"uuid">;

  /** UUID of the customer for member carts, or null for guest carts. */
  shopping_mall_ai_backend_customer_id: (string & tags.Format<"uuid">) | null;

  /** UUID of the session this cart is linked to. Null if cart is persistent. */
  shopping_mall_ai_backend_customer_session_id:
    | (string & tags.Format<"uuid">)
    | null;

  /** Opaque token for cart re-linking (guest or merged cart context). */
  cart_token: string;

  /** Cart status code (active/submitted/merged/etc). */
  status: string;

  /**
   * Expiration timestamp for the cart; determines
   * auto-clear/abandon/self-destruct. May be null.
   */
  expires_at: (string & tags.Format<"date-time">) | null;

  /** When merged with another cart, this is the merge timestamp. Nullable. */
  last_merged_at: (string & tags.Format<"date-time">) | null;

  /**
   * Business or user note attached to the cart, for analytics/evidence.
   * Nullable.
   */
  note: string | null;

  /** Creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp of logical deletion if the cart is marked deleted. Nullable. */
  deleted_at: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendCart {
  /**
   * Search, filter, and pagination options for shopping cart index/search
   * APIs. Used by customers, sellers, or admins to locate active or
   * historical cart records.
   */
  export type IRequest = {
    /** Results page number for pagination. Optional. */
    page?: (number & tags.Type<"int32">) | null;

    /** Max results per page for pagination. Optional. */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Optional filter for cart status (active, submitted, merged, cleared,
     * abandoned, etc).
     */
    status?: string;

    /** Filter carts for a specific customer. UUID. */
    customer_id?: string & tags.Format<"uuid">;

    /** Filter carts by session. UUID. */
    session_id?: string & tags.Format<"uuid">;

    /** Filter carts by text search on note field. */
    note_search?: string;

    /** Filter for carts created after this time. */
    created_at_min?: string & tags.Format<"date-time">;

    /** Filter for carts created before this time. */
    created_at_max?: string & tags.Format<"date-time">;

    /** Field to sort carts by (created_at, updated_at, status, etc). */
    sort_field?: string;

    /** Sort direction. One of 'asc', 'desc'. */
    sort_order?: "asc" | "desc";
  };

  /**
   * Request body for creating a new cart instance with user/session
   * associations, status, and business metadata.
   */
  export type ICreate = {
    /**
     * (Optional) UUID of the customer if cart is member's, or null for
     * guest.
     */
    shopping_mall_ai_backend_customer_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /** (Optional) UUID of the session if linked. Nullable. */
    shopping_mall_ai_backend_customer_session_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /** Opaque token for linking (required, must be unique for guest flows). */
    cart_token: string;

    /** Status to initialize the cart (active/submitted etc). */
    status: string;

    /** (Optional) Set when the cart will expire. Null if not specified. */
    expires_at?: (string & tags.Format<"date-time">) | null;

    /** (Optional) Last merge event, nullable. */
    last_merged_at?: (string & tags.Format<"date-time">) | null;

    /** (Optional) User or business note for this cart. */
    note?: string | null;
  };

  /**
   * Request body for updating a cart instance. Fields are optional and for
   * partial update use. Allows business logic operations for session binding,
   * status, and metadata in shopping mall cart flows.
   */
  export type IUpdate = {
    /**
     * Update the customer reference for this cart (nullable to dissociate
     * for guest flows).
     */
    shopping_mall_ai_backend_customer_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /** Update the session reference for this cart. Nullable. */
    shopping_mall_ai_backend_customer_session_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /** Replace the cart token (rarely used; for guest merge/transfer cases). */
    cart_token?: string;

    /** Update status of the cart (business logic: submitted/abandoned etc). */
    status?: string;

    /** Update cart's expiration timestamp. Null disables auto-clear. */
    expires_at?: (string & tags.Format<"date-time">) | null;

    /** Update merge timestamp. Null for clearout. */
    last_merged_at?: (string & tags.Format<"date-time">) | null;

    /** Update note for this cart. */
    note?: string | null;
  };

  /**
   * Essential summary fields for cart listings, suitable for paging display
   * in UI or search flows.
   */
  export type ISummary = {
    /** Unique UUID primary key of the cart. */
    id: string & tags.Format<"uuid">;

    /** Opaque unique cart identifier for re-linking across devices/sessions. */
    cart_token: string;

    /** Current cart status. */
    status: string;

    /** Cart creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /** Cart last update timestamp. */
    updated_at: string & tags.Format<"date-time">;

    /** UUID of the customer who owns the cart (nullable: guest/anonymous). */
    customer_id?: (string & tags.Format<"uuid">) | null;

    /** User or business note attached to the cart, as of summary. */
    note?: string | null;

    /** When the cart expires and is purged. Null if not set. */
    expires_at?: (string & tags.Format<"date-time">) | null;
  };
}
