import { tags } from "typia";

/**
 * Logical deletion (soft delete) event record for compliance/evidence. Marks
 * removal of entities by entity_type/id, actor, reason, and snapshot. Preserved
 * for audit, legal review, GDPR/CCPA compliance, integrated with evidence chain
 * systems.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallDeletionEvent = {
  /** Unique identifier (UUID) for the logical deletion event record. */
  id: string & tags.Format<"uuid">;

  /** Type of entity affected by deletion (e.g., 'product', 'order', 'review'). */
  entity_type: string;

  /** ID of the entity deleted (polymorphic). */
  entity_id: string & tags.Format<"uuid">;

  /** Actor (user/admin/system) who performed the delete operation. */
  deleted_by_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Business or system reason for deletion (user request, policy violation,
   * auto-expiry, admin action).
   */
  deletion_reason: string;

  /** Reference to the snapshot capturing the entity at/before deletion. */
  snapshot_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Timestamp when entity was marked deleted (ISO 8601 format). */
  deleted_at: string & tags.Format<"date-time">;

  /** Record creation time for the deletion event (system timestamp, ISO 8601). */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallDeletionEvent {
  /**
   * Query body for searching logical deletion events for any business entity
   * (product, order, review, etc) in the system. Supports pagination,
   * filtering by entity type/id, deletion actor, reason, time range, and
   * sorting. All fields are optional for flexible search/user dashboards.
   */
  export type IRequest = {
    /**
     * Filter by entity type affected by deletion (e.g., 'product', 'order',
     * 'review'). Optional for search.
     */
    entity_type?: string | undefined;

    /** Filter by entity id deleted. Optional for query. */
    entity_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by actor who performed the delete operation. Optional, matches
     * deleted_by_id column.
     */
    deleted_by_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by business or system reason for deletion. */
    deletion_reason?: string | undefined;

    /**
     * Filter by reference to the snapshot capturing entity state at or
     * before deletion.
     */
    snapshot_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter for logical deletion records from this time (inclusive). */
    deleted_at_start?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for logical deletion records up to this time (exclusive). */
    deleted_at_end?: (string & tags.Format<"date-time">) | undefined;

    /** Pagination: Current page number (1-based, default 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Pagination: Records per page (default: 20, max: 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Sort field name (e.g., 'deleted_at', 'entity_type'). */
    sort_field?: string | undefined;

    /** Sort order for results (ascending or descending). */
    sort_order?: "asc" | "desc" | undefined;
  };
}
