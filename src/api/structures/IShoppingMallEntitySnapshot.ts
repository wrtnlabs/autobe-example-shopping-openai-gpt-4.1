import { tags } from "typia";

/**
 * Immutable, point-in-time evidence snapshot of a business entity's state,
 * suitable for compliance, audit, forensic, and rollback needs. Directly
 * reflects the shopping_mall_entity_snapshots table structure. May contain PII
 * or sensitive data as required by compliance logic.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallEntitySnapshot = {
  /** Primary key for the snapshot record. */
  id: string & tags.Format<"uuid">;

  /**
   * The type/category for the referenced business entity (e.g., 'customer',
   * 'order', 'product'). Determines polymorphic linking.
   */
  entity_type: string;

  /** UUID of the entity instance whose state is snapshotted. */
  entity_id: string & tags.Format<"uuid">;

  /**
   * Describes why the snapshot was taken (e.g., 'creation', 'update',
   * 'delete', 'compliance', etc). Business/audit context.
   */
  snapshot_reason: string;

  /**
   * Actor/trigger for the snapshot event. May be user, admin, seller, or
   * system process (nullable for system events).
   */
  snapshot_actor_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Serialized (often JSON) entity state at snapshot time. May contain
   * embedded PII, historical evidence, and all business-data needed to
   * reconstruct entity at this point.
   */
  snapshot_data: string;

  /** Timestamp of the business event triggering the snapshot. */
  event_time: string & tags.Format<"date-time">;

  /**
   * Timestamp when this snapshot record itself was written (system timestamp,
   * not always equal event_time).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for last update to the snapshot record (normally immutable, but
   * supports evidence-annotation or legal correction flows).
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallEntitySnapshot {
  /**
   * Request object for searching entity snapshot records
   * (shopping_mall_entity_snapshots).
   *
   * Enables advanced filtering, date-range search, actor/entity-type scope
   * search, and full pagination/sort.
   */
  export type IRequest = {
    /**
     * The string identifier for the business entity type (e.g., 'customer',
     * 'order', 'product', etc).
     *
     * Supports search for snapshots of a particular domain/table/type.
     */
    entity_type?: string | undefined;

    /**
     * The UUID of the business entity whose snapshots are being queried.
     *
     * Allows filtering of snapshots for a specific item within the
     * identified entity_type.
     */
    entity_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * The business reason or context for the snapshot acquisition (e.g.,
     * 'creation', 'update', 'delete', 'compliance_event').
     *
     * Used to filter/search for snapshots taken during particular business
     * flows or events.
     */
    snapshot_reason?: string | undefined;

    /**
     * UUID for the actor who triggered the snapshot
     * (user/admin/seller/system routine).
     *
     * May refer to customers, admins, sellers, or a system actor. Enables
     * actor/audit-level search.
     */
    snapshot_actor_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Lower bound for the event_time (ISO8601 format) - supports searching
     * for snapshots created at or after this time.
     *
     * Used for date-range filtered snapshot/audit search.
     */
    event_time_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound for the event_time (ISO8601 format) - restricts search to
     * snapshots taken before this date/time.
     *
     * Complements event_time_from for range search.
     */
    event_time_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Page number for pagination (starts at 1). Used to fetch specific
     * pages of results during large search operations.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of records per page for pagination. (system default and max
     * are business-configurable; advise 100 or less for large datasets).
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Sorting expression for results (e.g., 'event_time desc', 'entity_type
     * asc', etc).
     *
     * Allows advanced sort configuration for results.
     */
    sort?: string | undefined;
  };
}
