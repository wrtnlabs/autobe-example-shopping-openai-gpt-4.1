import { tags } from "typia";

/**
 * Append-only log of every critical action on orders, items, refunds,
 * after-sales, or fulfillmentsâ€”enables watertight evidence and forensic trace
 * for compliance. Records who/what/when and detailed context of actions for
 * transparency.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceOrderAuditLog = {
  /** Primary key: audit log record */
  id: string & tags.Format<"uuid">;

  /** Related order for this audit event. */
  order_id: string & tags.Format<"uuid">;

  /**
   * Type of action/event: create, update, payment, refund, fulfillment,
   * cancellation, status_change, aftersales, etc.
   */
  event_type: string;

  /** User or admin who performed the action. */
  actor_id: string & tags.Format<"uuid">;

  /** Optional log details/context for this action, escalation, or outcome. */
  event_note?: string | undefined;

  /** Timestamp when action/event took place. */
  occurred_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceOrderAuditLog {
  /**
   * Request schema for searching order audit logs
   * (ai_commerce_order_audit_logs). Supports filtering by orderId, event
   * type, actor, and date range with full pagination per compliance and
   * traceability requirements.
   */
  export type IRequest = {
    /**
     * Unique identifier of the target order for which audit logs are being
     * requested. Only audit log entries related to this order are returned
     * when specified.
     */
    orderId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter audit logs by event type (e.g., 'create', 'update', 'payment',
     * 'refund', 'fulfillment', etc.). Enables focused querying on audit
     * event types.
     */
    event?: string | undefined;

    /**
     * Filter results by the actor (user/admin/system) who performed the
     * audit log action. Allows tracing responsibility or changes by
     * individual identity.
     */
    actorId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Inclusive lower bound for audit log created_at timestamp, in ISO 8601
     * format. Limits logs to those on or after this date.
     */
    fromDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Inclusive upper bound for audit log created_at timestamp, in ISO 8601
     * format. Limits logs to those on or before this date.
     */
    toDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Pagination - page number, defaults to 1. Used with limit for scalable
     * results.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Pagination - number of audit log entries per page.
     * Default/recommended: 20/50/100.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };
}
