import { tags } from "typia";

/**
 * Full record for a single entry in a codebook, including business code, label,
 * order, visibility, and audit evidence fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCodebookEntry = {
  /**
   * Unique ID of this codebook entry. Primary key for reference, management,
   * audit.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the parent codebook to which this entry belongs. Links to
   * business dictionary context.
   */
  shopping_mall_ai_backend_codebook_id: string & tags.Format<"uuid">;

  /**
   * Business code (enum value) for this entry, unique within its parent
   * codebook. Used for selection in business logic.
   */
  code: string;

  /** Human display label/meaning for this entry; appears in UI and reports. */
  label: string;

  /**
   * Optional admin or business memo describing this codebook entry. Used for
   * documentation or evidence.
   */
  description?: string | null;

  /**
   * Sorting number for codebook entries; lower values have higher
   * priority/order. Used for display and management.
   */
  order: number & tags.Type<"int32">;

  /**
   * True if this entry is active/useable in business workflows; false if
   * hidden or deprecated.
   */
  visible: boolean;

  /** Timestamp of creation. Used for audit, compliance, and evidence. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of most recent update to this entry. For history/evidence. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Optional soft deletion timestamp. Null if entry is active; set if
   * logically deleted for evidence/audit.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendCodebookEntry {
  /**
   * Request to search/filter paginated codebook entries for a specific
   * codebook. Provide parent codebook UUID and optional filter/search
   * fields.
   */
  export type IRequest = {
    /**
     * Unique identifier (UUID) of the parent codebook in which to search
     * for entries. Required for all requests.
     */
    codebookId: string & tags.Format<"uuid">;

    /**
     * Optional filter for the code of entries. Filters entries to those
     * matching the provided code.
     */
    code?: string;

    /**
     * Optional filter for entry label. Allows searching by part or full
     * label string.
     */
    label?: string;

    /**
     * Optional filter for the sorting order of codebook entries. Only
     * entries matching order will be included.
     */
    order?: number & tags.Type<"int32">;

    /**
     * Filter by the visibility status for business use. 'true' returns only
     * visible entries; 'false' returns only hidden.
     */
    visible?: boolean;

    /** Page number for pagination. Starts at 1. Null if not specified. */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Number of entries per page for pagination. Null if using default or
     * unlimited.
     */
    limit?: (number & tags.Type<"int32">) | null;
  };

  /**
   * Summary information about a single entry in a codebook. Used in codebook
   * entry list and search views.
   */
  export type ISummary = {
    /**
     * Unique id (UUID) of this codebook entry. Used as primary key for
     * lookup and management.
     */
    id: string & tags.Format<"uuid">;

    /** Business code for this entry. Unique within its parent codebook. */
    code: string;

    /**
     * Human-readable label/meaning for this entry. Used in admin UI and in
     * business logic.
     */
    label: string;

    /**
     * Whether this entry is visible for business use. True if eligible for
     * selection/assignment; false if hidden/deprecated.
     */
    visible: boolean;

    /**
     * Ordering number for sorting codebook entries; lower values appear
     * first.
     */
    order: number & tags.Type<"int32">;

    /** Timestamp when this entry was created. For audit/evidence. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when this entry was last updated. For evidence/history. */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Request to create a new entry in a codebook. Specify code and label.
   * Other fields optional.
   */
  export type ICreate = {
    /**
     * Business code (enum value) to create. Must be unique in this
     * codebook.
     */
    code: string;

    /** Human-readable label for this entry. */
    label: string;

    /** Optional entry description or business memo. */
    description?: string | null;

    /**
     * Optional ordering value to assign. Lower numbers appear before
     * higher. Null to auto-assign.
     */
    order?: (number & tags.Type<"int32">) | null;

    /**
     * Visibility of this codebook entry. True = business visible. Null uses
     * system default (usually true).
     */
    visible?: boolean | null;
  };
}
