import { tags } from "typia";

/**
 * Complete comment information for a board post, product inquiry, or review.
 * Strongly typed for multi-role authors, reply threading, moderation, audit,
 * and evidence management. Follows business structure and audit policies for
 * shopping_mall_comments table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallComment = {
  /** Primary key (UUID) for the comment. */
  id: string & tags.Format<"uuid">;

  /** If this comment is attached to a board post, the related post's UUID. */
  shopping_mall_board_post_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /** If this comment is attached to a product inquiry, its UUID. */
  shopping_mall_product_inquiry_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /** If this comment is attached to a review, its UUID. */
  shopping_mall_review_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** If this is a reply, parent comment's UUID reference. */
  shopping_mall_parent_comment_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /** Authored-by: customer's UUID, or null if not customer. */
  shopping_mall_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Authored-by: seller's UUID, or null if not seller. */
  shopping_mall_seller_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Authored-by: admin's UUID, or null if not admin. */
  shopping_mall_admin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Comment text (Markdown supported). Required and user-facing. All role and
   * content policies apply.
   */
  body: string;

  /** Thread level of comment (root=0). Used for threaded/reply structure. */
  level: number & tags.Type<"int32">;

  /**
   * Moderation state (pending/approved/etc). Controls visibility and editing
   * rights.
   */
  moderation_status: string;

  /** Brief explanation for moderation state (optional). */
  moderation_reason?: string | null | undefined;

  /** Timestamp when this comment was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last modification. */
  updated_at: string & tags.Format<"date-time">;

  /** Time when comment was soft-deleted, or null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallComment {
  /**
   * Query parameters and filters for searching, listing, and paginating board
   * post comments. All properties are optional; if none are provided, returns
   * default set. Filtering enum or value options follow schema business
   * logic. Used for retrieving summary or full threaded comment lists per
   * board post, by customers, sellers, or admins.
   */
  export type IRequest = {
    /**
     * Thread depth filter (root=0), for recursive/threaded comments.
     * Provide to limit comments to a certain reply level.
     */
    reply_level?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Filter comments by moderation state (e.g., 'pending', 'approved',
     * 'denied'). Enum values follow moderation workflow.
     */
    moderation_status?: string | null | undefined;

    /**
     * Optional filter to control author role: 'customer', 'seller', or
     * 'admin'. Only returns comments authored by specified role if
     * present.
     */
    author_type?: string | null | undefined;

    /**
     * ISO 8601 date-time string filter; return only comments created since
     * this point. Used for incremental fetch or analytics.
     */
    created_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sort order. Examples: 'created_at:desc', 'reply_level:asc'. Only
     * allowed values enforced by provider logic.
     */
    sort?: string | null | undefined;

    /** Page number for pagination, starting at 1 by default. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Maximum comments per page. Business logic may constrain allowed size. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Full-text or keyword search in comment body. Supports advanced
     * search/filter functionality, subject to business search policy.
     */
    search?: string | null | undefined;
  };

  /**
   * DTO for creating a new comment on a post, inquiry, or review. Must
   * specify body and one of board_post_id, product_inquiry_id, or review_id.
   * Follows all validation constraints for authorship, target entity, and
   * threading/relationship per shopping_mall_comments schema and business
   * rules.
   */
  export type ICreate = {
    /**
     * Text body of the comment. Markdown supported. Required for comment
     * creation.
     */
    body: string;

    /**
     * If this comment is attached to a board post, its UUID. Mutually
     * exclusive with review/inquiry fields; provider logic enforces.
     */
    shopping_mall_board_post_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * If this comment is attached to a product inquiry, its UUID. See
     * business rules for relation exclusivity.
     */
    shopping_mall_product_inquiry_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** If comment is attached to a review, related review UUID. */
    shopping_mall_review_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** For replies, the parent comment's UUID (optional, null if root). */
    shopping_mall_parent_comment_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;
  };

  /**
   * Schema for updating an existing comment on a board post. Allows
   * authorized users (author/admin) to update mutable fields of a comment
   * such as its body (Markdown), moderation status, moderation reason, and
   * batch label. Only defined properties may be updated; attempted mutation
   * of non-schema fields is prohibited. All changes are audit-logged and
   * snapshotted for evidence compliance and forensic review. This update
   * request is linked to 'shopping_mall_comments'.
   *
   * This schema strictly prohibits adding or using fields not explicitly
   * listed here. Each property includes detailed documentation referencing
   * original schema comments. All fields are English-documented with multiple
   * paragraphs where detail is needed.
   *
   * See 'shopping_mall_comments' for field definitions, constraints, and
   * audit requirements.
   */
  export type IUpdate = {
    /**
     * The text content of the comment after edit.
     *
     * Supports Markdown formatting with length and content restrictions as
     * specified in the original schema. On update, the previous value is
     * snapshotted for compliance and rollback. Edits must comply with
     * business and community guidelines.
     */
    body?: string | undefined;

    /**
     * Updated moderation status for the comment. Must reflect allowed
     * values in the business domain (e.g., 'pending', 'approved',
     * 'rejected'). Status change triggers audit snapshot and, when moving
     * to 'approved', may result in the comment becoming visible.
     *
     * Business logic dictates what transitions are allowed depending on
     * user role (author vs. admin).
     */
    moderation_status?: string | undefined;

    /**
     * Business or compliance-required reason for changing the moderation
     * status or triggering a workflow. Typically required if the status is
     * set to 'rejected' or moved by an admin. Helps maintain transparency
     * and auditability.
     */
    moderation_reason?: string | undefined;

    /**
     * Optional custom label or tag for batch operations, user-driven
     * organization, or notifications. Not used by default business flows,
     * but included for user-organization or marketing batch/label actions.
     * See schema for any restrictions on label formats.
     */
    batch_label?: string | undefined;
  };

  /**
   * Summary DTO for a comment on board post, product inquiry, or review
   * (shopping_mall_comments). Used for batches, thread-overviews, and
   * evidence review; contains essential meta and efficient for
   * listing/display/analytics.
   */
  export type ISummary = {
    /** Unique identifier for the comment (shopping_mall_comments.id). */
    id: string & tags.Format<"uuid">;

    /**
     * Reference to parent board post (nullable per schema if comment is on
     * product inquiry or review).
     */
    shopping_mall_board_post_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Reference to product inquiry, if this is a comment on an inquiry;
     * nullable.
     */
    shopping_mall_product_inquiry_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Reference to review, if comment is attached to a review; nullable. */
    shopping_mall_review_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Parent comment's uuid for threading/reply chain. Null means top-level
     * comment.
     */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Discriminator field indicating author role: 'customer', 'seller', or
     * 'admin'.
     */
    author_type: string;

    /**
     * Trimmed/short version of comment body for quick list display
     * (typically first few lines or chars, as per UI needs).
     */
    comment_body_summary: string;

    /** Depth level in reply thread: 0=top-level, >0=reply-to. */
    level: number & tags.Type<"int32">;

    /** Current moderation status: 'pending', 'approved', 'denied', etc. */
    moderation_status: string;

    /** Datetime of creation (ISO8601, UTC). */
    created_at: string & tags.Format<"date-time">;

    /** Last updated time (ISO8601, UTC). */
    updated_at: string & tags.Format<"date-time">;

    /** Soft-delete timestamp; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
