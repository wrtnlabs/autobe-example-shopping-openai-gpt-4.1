import { tags } from "typia";

import { EOrderExchangeStatus } from "./EOrderExchangeStatus";

/**
 * Represents an after-sales exchange record for an item/order, tracking
 * evidence, state, and business workflow. Aligned to
 * shopping_mall_ai_backend_order_exchanges table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendOrderExchange = {
  /** Unique identifier of the order exchange record. */
  id: string & tags.Format<"uuid">;

  /** UUID of the affected order, referencing shopping_mall_ai_backend_orders. */
  shopping_mall_ai_backend_order_id: string & tags.Format<"uuid">;

  /** Id of the exchanged item in shopping_mall_ai_backend_order_items. */
  shopping_mall_ai_backend_order_item_id: string & tags.Format<"uuid">;

  /** Reason provided for exchange event. */
  exchange_reason: string;

  /**
   * Current status in exchange process workflow (e.g.,
   * requested/approved/rejected/completed).
   */
  status: string;

  /** Exchange request creation timestamp. */
  requested_at: string & tags.Format<"date-time">;

  /** Approval/rejection time (nullable if not yet processed). */
  processed_at?: (string & tags.Format<"date-time">) | null;

  /** Exchange completion time, nullable until finished. */
  completed_at?: (string & tags.Format<"date-time">) | null;

  /** Record creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last modification time (audit/evidence/updating events). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-delete timestamp if logically deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendOrderExchange {
  /** Paging and search/filter parameters for order exchange list APIs. */
  export type IRequest = {
    /** Page number to fetch. */
    page?: number;

    /** Records per page. */
    limit?: number;

    /** Filter by exchange workflow status. */
    status?: EOrderExchangeStatus;

    /** Start date for exchange search filter. */
    date_start?: string & tags.Format<"date-time">;

    /** End date for exchange search filter. */
    date_end?: string & tags.Format<"date-time">;
  };

  /**
   * Staff-admin update for exchange status, completion, or rationale
   * correction.
   */
  export type IUpdate = {
    /** Updated or corrected rationale for the exchange. */
    exchange_reason?: string;

    /** Updated business workflow status post admin/staff action. */
    status?: EOrderExchangeStatus;

    /** Update time for when the exchange was marked completed. */
    completed_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Summarized exchange event for order item, for table view, staff/admin
   * dashboard, or analytics.
   */
  export type ISummary = {
    /** UUID for this exchange event. */
    id: string & tags.Format<"uuid">;

    /** Order UUID for the exchanged item. */
    order_id: string & tags.Format<"uuid">;

    /** UUID of the returned item. */
    item_id: string & tags.Format<"uuid">;

    /** Short reason given for requesting the exchange. */
    exchange_reason: string;

    /** Current business workflow status for the exchange. */
    status: EOrderExchangeStatus;

    /** When the exchange was first requested (ISO timestamp). */
    requested_at: string & tags.Format<"date-time">;

    /** Nullable - when the exchange process finished. */
    completed_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Request body for creating a new order item exchange (after-sales
   * process). Only order and item IDs and business reason are submitted by
   * the client; all others generated and managed by system/fulfillment
   * logic.
   */
  export type ICreate = {
    /** The order identifier for this exchange. */
    order_id: string & tags.Format<"uuid">;

    /** UUID for the associated order item. */
    item_id: string & tags.Format<"uuid">;

    /**
     * Customer-submitted exchange reason/justification (string required by
     * business policy).
     */
    exchange_reason: string;
  };
}
