import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Seller account information. Identifies vendors with permissions to
 * list/manage products and access sales analytics for their own goods. Inherits
 * all customer fields plus seller-specific status, escalation, verification,
 * and profile meta. Links to customer entity, has audit/snapshot, and supports
 * soft delete.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallSeller = {
  /** Primary Key. Unique identifier for the seller entity. */
  id: string & tags.Format<"uuid">;

  /**
   * Base customer record {@link shopping_mall_customers.id} for permission
   * inheritance and login linkage.
   */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Home section/shop for the seller {@link shopping_mall_sections.id}. Used
   * for channel/section scoping.
   */
  shopping_mall_section_id: string & tags.Format<"uuid">;

  /** Seller's public display name or shop title. */
  profile_name: string;

  /**
   * Seller approval/lifecycle status (pending, active, suspended, rejected,
   * withdrawn).
   */
  status: string;

  /** Datetime seller was formally approved. Null if not yet approved. */
  approval_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** KYC/identity check status (pending, verified, denied, etc). */
  kyc_status: string;

  /** Record creation timestamp (UTC ISO-8601). */
  created_at: string & tags.Format<"date-time">;

  /** Record last modification timestamp (auto-update). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp for audit/compliance. Null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallSeller {
  /**
   * Seller registration payload for onboarding a seller in the shopping mall.
   * Fields include those required both in shopping_mall_customers (email,
   * name, phone) and shopping_mall_sellers (channel, section, profile, and
   * optional KYC). Password is sent in plain text for login-based auth and
   * backend hashes before storing.
   *
   * The registration does NOT include system fields (id, created_at,
   * updated_at, deleted_at, approval_at), nor fields managed by system only
   * (status is set to 'pending' or 'active' automatically). This DTO is for
   * onboarding/register (POST) operation only.
   */
  export type IJoin = {
    /**
     * Email of the seller, which is inherited from the customer's primary
     * email. Registered channel's {@link shopping_mall_channels.id}. Used
     * for identity and login. Must be unique per channel.
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password to be hashed and stored as password_hash. If using
     * OAuth/external authentication, this may be omitted. Not stored
     * directly—must be hashed by the backend before persisting to
     * shopping_mall_customers.password_hash.
     */
    password?: string | undefined;

    /**
     * Legal or preferred name for the seller, used for personalized
     * interactions and compliance. Maps to shopping_mall_customers.name.
     */
    name: string;

    /** Optional phone/contact information for seller onboarding. */
    phone?: string | null | undefined;

    /**
     * Channel to which the seller is being registered. Required for
     * multi-tenant segmentation, maps to shopping_mall_channels.id.
     */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /**
     * Home section/shop for the seller (e.g., for channel/section scoping),
     * references shopping_mall_sections.id.
     */
    shopping_mall_section_id: string & tags.Format<"uuid">;

    /**
     * Display name for the seller, as used for branding or public profile
     * (maps to shopping_mall_sellers.profile_name).
     */
    profile_name: string;

    /**
     * Status for KYC/identity verification, initial state is usually
     * 'pending'. Business logic sets this at onboarding.
     */
    kyc_status?: string | undefined;
  };

  /**
   * Authorization response for a successfully authenticated seller. Contains
   * seller uuid, JWT token, and public seller information. Used as response
   * for join/login/refresh APIs. DTO structure follows project convention and
   * OpenAPI best practices.
   */
  export type IAuthorized = {
    /**
     * UUID that uniquely identifies the seller account (as registered in
     * shopping_mall_sellers.id)
     */
    id: string & tags.Format<"uuid">;

    /**
     * Base customer record {@link shopping_mall_customers.id} for permission
     * inheritance and login linkage.
     */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Home section/shop for the seller {@link shopping_mall_sections.id}.
     * Used for channel/section scoping.
     */
    shopping_mall_section_id: string & tags.Format<"uuid">;

    /** Seller's public display name or shop title. */
    profile_name: string;

    /**
     * Seller approval/lifecycle status (pending, active, suspended,
     * rejected, withdrawn).
     */
    status: string;

    /** Datetime seller was formally approved. Null if not yet approved. */
    approval_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** KYC/identity check status (pending, verified, denied, etc). */
    kyc_status: string;

    /** Record creation timestamp (UTC ISO-8601). */
    created_at: string & tags.Format<"date-time">;

    /** Record last modification timestamp (auto-update). */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp for audit/compliance. Null if not deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Summary information about the authenticated seller; see ISummary for
     * reference. Includes non-sensitive, public-facing fields only.
     */
    seller?: IShoppingMallSeller.ISummary | undefined;
  };

  /**
   * Seller login payload for authentication. Includes email, channel ID for
   * scoping, and password.
   */
  export type ILogin = {
    /**
     * Email address used by the seller for authentication, as defined in
     * shopping_mall_customers.email (must be unique per channel).
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password to authenticate against
     * shopping_mall_customers.password_hash. Sent in plaintext over HTTPS,
     * always hashed for comparison in backend logic.
     */
    password: string;

    /**
     * Channel ID for login context to guarantee uniqueness (multi-tenant
     * segmentation). References shopping_mall_channels.id.
     */
    shopping_mall_channel_id: string & tags.Format<"uuid">;
  };

  /**
   * Refresh token request object for seller sessions. Used to issue a new
   * access token upon presentation of a valid refresh token. The token
   * property is named 'refresh_token' in alignment with OpenAPI conventions.
   */
  export type IRefresh = {
    /**
     * The JWT refresh token for the seller session to be refreshed. Must be
     * a valid and unexpired refresh token, issued after join/login.
     */
    refresh_token: string;
  };

  /**
   * Summary view for shopping mall seller accounts, suitable for platform
   * admin, onboarding review, or seller search interfaces. Includes only
   * workflow, contact, and basic audit fields—never sensitive credentials or
   * deep business associations. Backed by shopping_mall_sellers table;
   * adheres to summary DTO pattern for search-indexed entities.
   */
  export type ISummary = {
    /**
     * Unique seller account identifier (primary key in
     * shopping_mall_sellers).
     */
    id: string & tags.Format<"uuid">;

    /**
     * References seller's home section/shop (shopping_mall_sections.id).
     * Required for scoping sellers in admin UI or workflow.
     */
    shopping_mall_section_id: string & tags.Format<"uuid">;

    /**
     * Seller's public-facing display name or shop title, e.g., 'Acme
     * Products'.
     */
    profile_name: string;

    /**
     * Seller account workflow status: 'pending', 'active', 'suspended',
     * etc. Used for onboarding and workflow control.
     */
    status: string;

    /**
     * Datetime the seller account was approved. May be null if not yet
     * approved in onboarding workflow.
     */
    approval_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Seller KYC identity business state, e.g., 'pending', 'verified',
     * 'denied'. For onboarding and compliance analytics.
     */
    kyc_status: string;

    /** Timestamp the seller account was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp the seller account was last changed. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Logical deletion timestamp, present if seller account is
     * deleted/withdrawn for audit/compliance. Otherwise null.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Search/pagination/filter DTO for listing shopping mall sellers. All
   * fields are optional; supply any number for targeted review.
   */
  export type IRequest = {
    /** Filter sellers by the owning/home section they belong to. */
    shopping_mall_section_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Seller's display name or shop title. Supports partial or full-text
     * search.
     */
    profile_name?: string | undefined;

    /**
     * Account status filter, e.g., pending, active, suspended, rejected,
     * withdrawn.
     */
    status?: string | undefined;

    /** KYC/identity state filter, e.g., pending, verified, denied. */
    kyc_status?: string | undefined;

    /** Return sellers approved after this timestamp. */
    approval_after?: (string & tags.Format<"date-time">) | undefined;

    /** Return sellers approved before this timestamp. */
    approval_before?: (string & tags.Format<"date-time">) | undefined;

    /** Return sellers created after this timestamp. */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /** Return sellers created before this timestamp. */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * If true, show only deleted (soft-deleted) sellers. If false, exclude
     * deleted. If absent, don't filter by deletion.
     */
    deleted?: boolean | undefined;

    /** Page number for pagination (starts at 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of results per page. Max 200, default business policy is 100. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /** Sort specification, e.g., 'created_at desc', 'profile_name asc'. */
    sort?: string | undefined;
  };

  /**
   * Update DTO for seller. Includes fields permitted to be updated for seller
   * profile, status, approval, or KYC state. All fields are optional; only
   * include those being changed.
   */
  export type IUpdate = {
    /** Seller's public display name or shop title. */
    profile_name?: string | undefined;

    /**
     * Seller approval/lifecycle status (pending, active, suspended,
     * rejected, withdrawn).
     */
    status?: string | undefined;

    /** Datetime seller was formally approved. Null if not yet approved. */
    approval_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** KYC/identity check status (pending, verified, denied, etc). */
    kyc_status?: string | undefined;
  };
}
