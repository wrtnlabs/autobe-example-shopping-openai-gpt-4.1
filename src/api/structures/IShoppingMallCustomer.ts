import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Full customer profile as stored in the shopping_mall_customers table. All
 * business and audit fields included per schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallCustomer = {
  /** Primary key UUID for the customer record. */
  id: string & tags.Format<"uuid">;

  /** References the unique ID of the channel the customer is registered with. */
  shopping_mall_channel_id: string & tags.Format<"uuid">;

  /** Customer's unique email per channel. Used for login and communication. */
  email: string;

  /** Optional mobile/contact phone number if provided. */
  phone?: string | null | undefined;

  /** Customer's legal or preferred name. */
  name: string;

  /** Account status, e.g., active, pending, suspended, withdrawn, etc. */
  status: string;

  /** KYC/identity verification status: pending, verified, denied, etc. */
  kyc_status: string;

  /** Timestamp when the customer record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last update to the customer record. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion time for audit/compliance. Null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallCustomer {
  /**
   * Payload for customer registration (join) on the shopping mall platform.
   * This structure references only fields that exist in the
   * shopping_mall_customers schema and reflects the required information for
   * the join endpoint. The password is included in plaintext for secure
   * hashing on the backend at account creation; password_hash is never
   * accepted from the client. All registration attempts must ensure the
   * uniqueness of the email within the channel and proper error handling for
   * violations. Optional phone is included if required by channel policy.
   * This type does NOT include status/kyc_status, which are system-assigned
   * upon registration.
   */
  export type IJoin = {
    /**
     * UUID of the channel to which the customer is registering. Required
     * for tenant/business unit scoping. Must be a valid, existing channel.
     */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /**
     * Customer's primary email. Required and must be unique within the
     * channel. Used for login and notifications.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain password to register the account. This field is accepted in
     * registration and will be hashed into password_hash. DO NOT accept
     * password_hash directly from the user. Should meet security
     * requirements for complexity. Optional if registering via OAuth (in
     * which case, omit or provide as an empty string).
     */
    password?: (string & tags.MinLength<6> & tags.MaxLength<128>) | undefined;

    /**
     * Customer's real name or preferred display name. Required for identity
     * and personalized operations.
     */
    name: string & tags.MaxLength<64>;

    /**
     * Mobile/contact phone number for identity verification. Optional; may
     * be null if not required by policy.
     */
    phone?: (string & tags.Pattern<"^[0-9\\-\\+]{7,20}$">) | null | undefined;
  };

  /**
   * Login credentials for customer authentication (shopping_mall_customers).
   * All fields strictly reflect properties present in the login operation and
   * schema. Channel ID is required for multi-tenant resolution. The password
   * must always be provided as plaintext for secure backend hashing and
   * comparison.
   */
  export type ILogin = {
    /**
     * UUID of the channel to which the login attempt is directed. Customers
     * may have accounts in multiple channels; this ensures the login is
     * scoped correctly. Must match an existing channel.
     */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /**
     * The customer's email address previously registered in the platform.
     * Required for login.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain password to authenticate this login. This is NEVER hashed on
     * the client and always sent in plaintext for secure comparison
     * server-side. The backend will hash and verify against password_hash
     * in shopping_mall_customers.
     */
    password: string & tags.MinLength<6> & tags.MaxLength<128>;
  };

  /**
   * Payload for session refresh operation, containing the required refresh
   * token to be validated and exchanged for new authentication tokens. This
   * type matches the input expected for refresh authentication flows.
   */
  export type IRefresh = {
    /**
     * JWT refresh token issued by the platform for session continuation.
     * Required for refresh flows; must be valid, unexpired, and linked to
     * an active customer session.
     */
    refresh_token: string;
  };

  /**
   * Response structure returning all core schema fields for the customer,
   * reflecting current state and session after join/login/refresh. On
   * success, always includes token property using IAuthorizationToken per
   * platform-wide authentication response convention.
   */
  export type IAuthorized = {
    /**
     * UUID identifier of the customer in the shopping_mall_customers table.
     * Provided for consistent referencing across all modules.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The UUID of the channel (tenant/store) to which this customer is
     * linked.
     */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /**
     * The customer's email address as registered in the system. Immutable
     * after registration.
     */
    email: string & tags.Format<"email">;

    /** Phone number as provided in registration. May be null if not present. */
    phone?: (string & tags.Pattern<"^[0-9\\-\\+]{7,20}$">) | null | undefined;

    /**
     * The customer's real or display name. Used for personalization and
     * identification.
     */
    name: string & tags.MaxLength<64>;

    /**
     * Current lifecycle status for the customer profile (values: active,
     * pending, suspended, withdrawn, etc).
     */
    status: string;

    /**
     * KYC/identity verification state (values: pending, verified, denied,
     * etc).
     */
    kyc_status: string;

    /**
     * ISO8601 UTC timestamp of customer account creation. Used for audit,
     * analytics, and display.
     */
    created_at: string & tags.Format<"date-time">;

    /** ISO8601 UTC timestamp of last customer record update. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * ISO8601 UTC timestamp of soft deletion (if deleted), or null if not
     * deleted.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Search filter and pagination options for retrieving shopping mall
   * customer profiles. All fields are optional in advanced search use-cases.
   */
  export type IRequest = {
    /**
     * The unique identifier of the channel this customer is associated
     * with. Used for scoping customer queries to a particular storefront,
     * brand, or business context.
     */
    shopping_mall_channel_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Customer email address for search/filter. Partial or full match
     * supported. Unique per channel in actual customer records.
     */
    email?: string | undefined;

    /** Customer's legal or preferred name for full-text search. */
    name?: string | undefined;

    /**
     * Account status filter, e.g., active, pending, suspended, withdrawn.
     * May accept one, many, or all values, according to business rules.
     */
    status?: string | undefined;

    /**
     * KYC/identity verification filter, e.g., pending, verified, denied.
     * Used to find customers by their identity compliance progress.
     */
    kyc_status?: string | undefined;

    /** Return customers created after this timestamp. */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /** Return customers created before this timestamp. */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * If true, include only soft-deleted records. If false, exclude
     * deleted. If absent, ignore deletion in filtering.
     */
    deleted?: boolean | undefined;

    /** Page number for pagination, starts at 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page. Defaults to 100 if not specified. Max 200. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /**
     * Sorting specification, e.g., 'created_at desc', 'name asc'. Business
     * logic may support multiple fields separated by comma.
     */
    sort?: string | undefined;
  };

  /**
   * Fields permitted for update on shopping_mall_customers. All properties
   * optional; only supply those to be modified. System-managed audit fields
   * must not be included here.
   */
  export type IUpdate = {
    /**
     * (Optional) New email address for the customer. Must be unique per
     * channel when updating.
     */
    email?: string | undefined;

    /** (Optional) Updated phone/mobile number. */
    phone?: string | null | undefined;

    /** (Optional) Legal or preferred name update. */
    name?: string | undefined;

    /** (Optional) Update for the customer's account status. */
    status?: string | undefined;

    /** (Optional) Update for the customer's KYC verification status. */
    kyc_status?: string | undefined;
  };

  /**
   * Summary and list-view optimized type for shopping mall customers.
   * Contains identifying, status, and audit information but not sensitive
   * credential columns (no password_hash, phone, PII, or external accounts).
   * Reference shopping_mall_customers table for business logic. Used in
   * administrative search, compliance, or platform analytic listings.
   */
  export type ISummary = {
    /** Customer primary key (shopping_mall_customers.id). */
    id: string & tags.Format<"uuid">;

    /**
     * Channel ID for business segmentation; cross references
     * shopping_mall_channels. Required.
     */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /**
     * Email address—unique per channel, required for login unless
     * oauth-only. Example: customer@example.com
     */
    email: string;

    /**
     * Customer's legal or preferred display name for address, statement, or
     * greeting. Required.
     */
    name: string;

    /**
     * Customer account status (business workflow). Common values: 'active',
     * 'pending', 'suspended', 'withdrawn', etc. Used in admin and support
     * flows.
     */
    status: string;

    /**
     * KYC/identity verification state. Example values: 'pending',
     * 'verified', 'denied'. Used for compliance and onboarding business
     * logic.
     */
    kyc_status: string;

    /** ISO 8601 timestamp of creation. */
    created_at: string & tags.Format<"date-time">;

    /** ISO 8601 timestamp of last update. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp (if present) indicating this record has been soft deleted.
     * Null if still active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
