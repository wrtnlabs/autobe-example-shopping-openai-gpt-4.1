import { tags } from "typia";

/**
 * Read DTO for a single coupon issuance. Represents one specific
 * allocation/assignment of a coupon to a customer or code, tracking activation,
 * expiration, usage counts, and evidence meta. All fields are as in the
 * shopping_mall_coupon_issuances schema for evidence, compliance, and business
 * analytics.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallCouponIssuance = {
  /**
   * Primary key for coupon issuance. System-generated, a unique UUID for this
   * issuance event.
   */
  id: string & tags.Format<"uuid">;

  /**
   * FK to coupon master entity. References the parent coupon being issued or
   * redeemed.
   */
  shopping_mall_coupon_id: string & tags.Format<"uuid">;

  /**
   * Optional FK to customer or user account entity if coupon is
   * customer-specific or for private/targeted distributions.
   */
  shopping_mall_customer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Returned coupon code, unique per issuance - may match coupon's master
   * code for public coupons or be unique for one-time or single-use
   * issuances.
   */
  code: string;

  /** Datetime this issuance instance was created and/or activated. */
  issued_at: string & tags.Format<"date-time">;

  /**
   * Datetime this issuance instance expires (supersedes or overrides parent
   * coupon's expires_at for personalized/segment cases).
   */
  expires_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * How many times this specific issuance (for a customer) may be redeemed.
   * Often null if global per-coupon limit is in effect.
   */
  usage_limit?: (number & tags.Type<"int32">) | null | undefined;

  /**
   * Running counter of how many times this issuance has been redeemed (must
   * not exceed usage_limit or coupon's global limit).
   */
  used_count: number & tags.Type<"int32">;

  /**
   * Lifecycle state of the issuance: 'active', 'expired', 'redeemed',
   * 'revoked', etc.
   */
  status: string;

  /**
   * UTC ISO timestamp when issuance record was created (audit, evidence, and
   * ordering).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * UTC ISO timestamp of last modification/update (audit, evidence,
   * optimistic concurrency).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp; when set, this issuance is logically removed but
   * kept for compliance and audit evidence.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallCouponIssuance {
  /**
   * Request DTO for searching and filtering coupon issuance records. Used by
   * admins/sellers to page through, audit, or batch-modify coupon issuances
   * with support for advanced query scenarios. Filters include coupon,
   * customer, status, code, issuance and expiry time ranges, and
   * sorting/pagination support as per corporate API convention.
   */
  export type IRequest = {
    /** (Optional) Filter by the associated coupon's unique identifier. */
    shopping_mall_coupon_id?: (string & tags.Format<"uuid">) | undefined;

    /** (Optional) Only issuances assigned to this customer. */
    shopping_mall_customer_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * (Optional) Restrict to a given issuance status (e.g., 'active',
     * 'expired', 'redeemed', 'revoked', etc.).
     */
    status?: string | undefined;

    /**
     * (Optional) Search by the issued coupon code (exact match or partial,
     * depending on backend logic).
     */
    code?: string | undefined;

    /** (Optional) Range filter for issuance creation date - start. */
    issued_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** (Optional) Range filter for issuance creation date - end. */
    issued_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** (Optional) Range filter for expiration date - start. */
    expires_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** (Optional) Range filter for expiration date - end. */
    expires_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination (1-based, optional). */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of records per page (optional, default 20 or per
     * system settings).
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** (Optional) Sorting preference, e.g., 'issued_at desc', 'status', etc. */
    sort?: string | undefined;
  };

  /**
   * DTO for creating (allocating/assigning) a new coupon issuance, mapping to
   * shopping_mall_coupon_issuances table. Only fields directly in schema.
   * Used by admins, sellers, or for self-service to assign a coupon instance
   * (public, personal, one-time, or segment) to a user or generate a unique
   * code.
   */
  export type ICreate = {
    /** FK to coupon master entity; UUID of the coupon to be issued. */
    shopping_mall_coupon_id: string & tags.Format<"uuid">;

    /**
     * Optional customer UUID for targeted or private coupon issuance. Can
     * be null for public or bulk distribution workflows.
     */
    shopping_mall_customer_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Requested issued coupon code. For public/master coupons, may match
     * parent's code; for private/single-use, should be unique per
     * issuance.
     */
    code: string;

    /** Issuance creation/activation timestamp (UTC, ISO8601). */
    issued_at: string & tags.Format<"date-time">;

    /**
     * Expiration datetime for this issuance only; may override parent
     * coupon's expires_at for custom cases.
     */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Limits for this issuance onlyâ€”how many times it may be used, can be
     * null to inherit from coupon's global config.
     */
    usage_limit?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Update payload for a coupon issuance. Supports changing per-issuance
   * usage limits, expiration, and status. All field updates are validated for
   * business rule compliance. Does NOT support changing fundamental
   * coupon/customer linkage.
   */
  export type IUpdate = {
    /** Expiration for this issuance (may differ from base coupon). */
    expires_at?: (string & tags.Format<"date-time">) | undefined;

    /** Usage limit for this actor (may override per-user global). */
    usage_limit?: (number & tags.Type<"int32">) | undefined;

    /** Issuance status (active, expired, redeemed, revoked, etc). */
    status?: string | undefined;
  };
}
