import { tags } from "typia";

/**
 * Business-layer event and transaction log for coupon notification attempts
 * (issuance, usage, expiry, etc). Records state, result, and details for every
 * notification handled by the shopping mall system for coupons, campaign, or
 * event-driven user flows. Supports compliance, reporting, marketing analysis,
 * and support resolution. Used for evidence trace in campaign or business
 * dispute scenarios.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCouponNotification = {
  /**
   * Globally unique identifier for the coupon notification event.
   *
   * This value uniquely identifies each notification event entity within the
   * shopping mall platform and is used for query, update, or evidence
   * purposes.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Coupon entity this notification relates to (UUID).
   *
   * May be null if the notification is only for a specific issuance/code.
   */
  shopping_mall_ai_backend_coupon_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Coupon issuance entity this notification is about, such as for customer
   * delivery or redemption.
   *
   * Nullable field. If present, this notification is about a particular
   * issuance event.
   */
  shopping_mall_ai_backend_coupon_issuance_id?:
    | (string & tags.Format<"uuid">)
    | null;

  /**
   * Coupon code associated with this notification, if it is a code-type
   * campaign/event.
   *
   * Nullable, for bulk/event code notification.
   */
  shopping_mall_ai_backend_coupon_code_id?:
    | (string & tags.Format<"uuid">)
    | null;

  /**
   * Customer recipient for the notification, if targeted.
   *
   * Used to deliver/track user-specific notification events.
   */
  shopping_mall_ai_backend_customer_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Business event that triggered the notification, e.g., 'issuance',
   * 'expiry', 'reminder', 'redemption', 'admin', 'campaign', 'error'.
   *
   * See business codebook or campaign logic for types.
   */
  notification_type: string;

  /**
   * Delivery state for this notification: e.g., 'pending', 'sent', 'failed',
   * 'acknowledged'.
   *
   * Business status code aligns with communication event state.
   */
  status: string;

  /**
   * Number of send attempts made for this notification event.
   *
   * All delivery attempts, including retries, are tracked for reporting.
   */
  send_attempts: number & tags.Type<"int32">;

  /**
   * ISO8601 timestamp of the last delivery attempt for this notification
   * event.
   *
   * Null if no attempt has yet occurred.
   */
  last_attempted_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Provider or platform message outcome for the last notification attempt.
   *
   * Set on success/failure/error as delivered by external communication
   * system.
   */
  result_message?: string | null;

  /**
   * Timestamp this notification entry was created (UTC, ISO8601).
   *
   * Required for audit and evidence trace.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallAiBackendCouponNotification {
  /**
   * Request type for searching coupon notifications. Supports filter, sort,
   * paging.
   */
  export type IRequest = {
    /** Filter by coupon UUID */
    coupon_id?: (string & tags.Format<"uuid">) | null;

    /** Filter by customer UUID */
    customer_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Type:
     * 'issuance','expiry','reminder','redemption','admin','campaign','error'.
     * Filter.
     */
    notification_type?: string | null;

    /** Delivery status filter: 'pending','sent','failed','acknowledged'. */
    status?: string | null;

    /** Min attempts (inclusive) */
    send_attempts_min?: (number & tags.Type<"int32">) | null;

    /** Max attempts (inclusive) */
    send_attempts_max?: (number & tags.Type<"int32">) | null;

    /** Filter for sent after this date */
    last_attempted_from?: (string & tags.Format<"date-time">) | null;

    /** Filter for sent before this date */
    last_attempted_to?: (string & tags.Format<"date-time">) | null;

    /** Created after date */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** Created before date */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /** Page number (>=1) */
    page?: number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>;

    /** Max records per page */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<100> &
      tags.Minimum<1> &
      tags.Maximum<300>;

    /** Sorting field */
    orderBy?: "created_at" | "last_attempted_at";

    /** Sort direction */
    direction?: "asc" | "desc";
  };

  /**
   * Summary view of a coupon notification event (for paginated table or
   * analytics display).
   */
  export type ISummary = {
    /** Notification event UUID (unique ID). */
    id: string & tags.Format<"uuid">;

    /** Business code for notification event type. */
    notification_type: string;

    /** Delivery/push status for notification event. */
    status: string;

    /** Delivery attempt count. */
    send_attempts: number & tags.Type<"int32">;

    /** Date/time of last send attempt. */
    last_attempted_at?: (string & tags.Format<"date-time">) | null;

    /** Creation timestamp of notification event. */
    created_at: string & tags.Format<"date-time">;
  };
}
