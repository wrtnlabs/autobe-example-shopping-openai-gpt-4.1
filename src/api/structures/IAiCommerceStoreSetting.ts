import { tags } from "typia";

/**
 * Represents a settings record for a store in aiCommerce. Encapsulates
 * configuration metadata for advanced business logic and store operation,
 * supporting extensibility, soft deletion, and compliance audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceStoreSetting = {
  /** Unique identifier for the store setting. */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to ai_commerce_stores.id to indicate which store this setting
   * belongs to.
   */
  store_id: string & tags.Format<"uuid">;

  /**
   * Store's settings as a JSON blob; may include shipping, return policy,
   * business rules, etc.
   */
  settings_json: string;

  /** If true, these settings are currently in use. */
  active: boolean;

  /** Creation timestamp (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Last updated timestamp (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null if the record is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceStoreSetting {
  /**
   * Request schema for listing and filtering store settings. Allows searching
   * by store, status, key, value, pagination and sort options.
   */
  export type IRequest = {
    /**
     * The unique identifier of the associated store
     * (ai_commerce_stores.id).
     */
    store_id?: (string & tags.Format<"uuid">) | undefined;

    /** Whether this setting is currently active and in use. */
    active?: boolean | undefined;

    /** Configuration key name for searching/filtering. */
    key?: string | undefined;

    /** Configuration value for searching/filtering. */
    value?: string | undefined;

    /** Page number for pagination (1-based index). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Maximum number of items per page for pagination. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Sorting criteria, e.g., 'created_at desc' or 'key asc'. */
    sort?: string | undefined;
  };

  /**
   * Used for creating a new store setting record. Fields must include a valid
   * store reference, configuration JSON, and explicit activation status.
   * Enforces uniqueness of active flag per store. Handled by admin or
   * authorized seller as per business rules.
   */
  export type ICreate = {
    /** Store's unique identifier (ai_commerce_stores.id). */
    store_id: string & tags.Format<"uuid">;

    /**
     * JSON blob containing the store's settings, e.g., shipping, return,
     * and configuration info.
     */
    settings_json: string;

    /**
     * Flag whether this settings record is currently active. Only one
     * active per store is allowed.
     */
    active: boolean;
  };

  /**
   * Used when updating an existing store settings record. Allows for updating
   * JSON config or the 'active' flag. Does not permit changing the 'store_id'
   * or primary key. Managed by admin or authorized seller roles.
   */
  export type IUpdate = {
    /** Updated settings JSON payload, with revised business rules/config. */
    settings_json?: string | undefined;

    /**
     * Flag to activate/deactivate this settings version. Only one active
     * record per store is allowed.
     */
    active?: boolean | undefined;
  };

  /**
   * Summary representation of a store setting linked to a store
   * (ai_commerce_store_settings).
   *
   * Includes core fields necessary for displaying, searching, and managing
   * store configuration. Used in summary tables, admin screens, and for
   * analytics aggregation.
   */
  export type ISummary = {
    /**
     * Unique identifier for the store setting. References the @id field in
     * ai_commerce_store_settings.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Configuration key for this setting (e.g., 'shipping_default',
     * 'theme_color'). Must be unique within the store context.
     */
    key: string;

    /**
     * Value for the configuration key. May be a string, serialized object,
     * URL, etc., depending on usage.
     */
    value: string;

    /** Timestamp when this setting was created (ISO 8601, timezone-aware). */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when this setting was last modified (ISO 8601,
     * timezone-aware).
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
