import { tags } from "typia";

/**
 * Complete coupon issuance entity with all fields for audit, compliance, or
 * user delivery flows. Matches schema table mapping.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCouponIssuance = {
  id?: string & tags.Format<"uuid">;
  shopping_mall_ai_backend_coupon_id?: string & tags.Format<"uuid">;
  shopping_mall_ai_backend_customer_id?: (string & tags.Format<"uuid">) | null;
  external_code?: string | null;
  expires_at?: (string & tags.Format<"date-time">) | null;
  status?: string;
  issued_at?: string & tags.Format<"date-time">;
  used_at?: (string & tags.Format<"date-time">) | null;
  revoked_at?: (string & tags.Format<"date-time">) | null;
  created_at?: string & tags.Format<"date-time">;
};
export namespace IShoppingMallAiBackendCouponIssuance {
  /**
   * Advanced search/filter for coupon issuances. Supports optional status,
   * customer, and issued date range. Pagination fields available.
   */
  export type IRequest = {
    /** Issuance status to include, e.g., issued, used, revoked. */
    status?: string;

    /** Filter by specific customer UUID (optional). */
    shopping_mall_ai_backend_customer_id?: string & tags.Format<"uuid">;

    /** Filter results after this timestamp (inclusive, optional). */
    issued_at_from?: string & tags.Format<"date-time">;

    /** Filter results on/before this timestamp (inclusive, optional). */
    issued_at_to?: string & tags.Format<"date-time">;

    /** Query page number (1-based, optional). */
    page?: number & tags.Type<"int32">;

    /** Results per page (optional, business default applies if null). */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Summary view of coupon issuance for list views or audit. Contains only
   * primary and business critical fields for efficient browsing and search.
   */
  export type ISummary = {
    /** Unique identifier for the coupon issuance. */
    id?: string & tags.Format<"uuid">;

    /** Parent coupon policy UUID. */
    shopping_mall_ai_backend_coupon_id?: string & tags.Format<"uuid">;

    /** Recipient customer UUID if applicable. */
    shopping_mall_ai_backend_customer_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /** Current status of the issuance, e.g., issued, used, revoked. */
    status?: string;

    /** Issuance timestamp, ISO8601. */
    issued_at?: string & tags.Format<"date-time">;

    /** Timestamp when coupon was used, if any. */
    used_at?: (string & tags.Format<"date-time">) | null;

    /** Timestamp if coupon was revoked, if applicable. */
    revoked_at?: (string & tags.Format<"date-time">) | null;

    /** Expiry time for personal/campaign coupon. Null if unlimited. */
    expires_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Payload to create and issue a coupon to a specific user/event. Typically
   * includes the recipient (customer), external code if necessary, and expiry
   * override if needed by business logic.
   */
  export type ICreate = {
    shopping_mall_ai_backend_customer_id?:
      | (string & tags.Format<"uuid">)
      | null;
    external_code?: string | null;
    expires_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Mutable fields for coupon issuance, allowing status change (e.g.,
   * revoke), expiry extension, and optional metadata correction. Used in
   * campaign management tools and customer service consoles.
   */
  export type IUpdate = {
    expires_at?: (string & tags.Format<"date-time">) | null;
    status?: string;
    revoked_at?: (string & tags.Format<"date-time">) | null;
  };
}
