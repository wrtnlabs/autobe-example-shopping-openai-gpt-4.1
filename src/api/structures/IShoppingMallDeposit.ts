import { tags } from "typia";

/**
 * Business deposit (electronic wallet) entity for a user. Contains current
 * balance, audit fields, and status for compliance. Never used directly for
 * transaction history, but is the core reference for all deposit logic. Maps
 * directly to shopping_mall_deposits Prisma model. SOFT DELETE uses deleted_at.
 * All date fields are ISO 8601.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallDeposit = {
  /** Unique identifier for the deposit account. */
  id: string & tags.Format<"uuid">;

  /**
   * Belonged customer's UUID. Each deposit account is tied to one user
   * account.
   */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Current deposit balance (in system currency units). Always non-negative,
   * may reflect pending operations until settled.
   */
  balance: number;

  /**
   * Account status (active, frozen, closed, under_review, etc.) for financial
   * and compliance operations.
   */
  status: string;

  /** Timestamp when the deposit record was created (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last update to the deposit record (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp if deposit record is soft-deleted. Null unless deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallDeposit {
  /**
   * Search, filter, and pagination DTO for deposits. Allows filtered search
   * on deposit account audit fields and value ranges. All fields are optional
   * but paginated queries should provide page/limit. Reflects fields in
   * shopping_mall_deposits used for list/search APIs.
   */
  export type IRequest = {
    /** Account status filter (active, frozen, closed, etc). */
    status?: string | undefined;

    /** Minimum balance filter for search (inclusive). */
    min_balance?: number | undefined;

    /** Maximum balance filter for search (inclusive). */
    max_balance?: number | undefined;

    /** Filter deposits by belonged customer's UUID. */
    shopping_mall_customer_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by deposits created after this date/time. */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by deposits created before this date/time. */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by deposits updated after this date/time. */
    updated_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by deposits updated before this date/time. */
    updated_to?: (string & tags.Format<"date-time">) | undefined;

    /** Pagination: which page to retrieve (1-based index). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Pagination: number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };

  /**
   * Request DTO for creating a new deposit account. Used at account opening,
   * onboarding, or admin creation. All fields are required. Uniqueness for
   * per-customer enforced in schema. Placement and values must comply with
   * system type and business rules.
   */
  export type ICreate = {
    /**
     * Belonged customer's UUID. Each deposit account is tied to one user
     * account and is unique (enforced by DB).
     */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Initial deposit balance at account creation. Must be non-negative.
     * Usually set to 0 by business rule or admin policy.
     */
    balance: number;

    /**
     * Initial account status (e.g., active or under_review). Should match
     * allowed status values in business logic.
     */
    status: string;
  };

  /**
   * Update payload for a deposit account in the shopping mall platform.
   *
   * Allows updates to the deposit account's business status (`status`),
   * manual adjustment of balance (`balance` â€” admin only), and soft-deletion
   * or restoration (`deleted_at`). Only fields present are updated. All
   * actions are strictly audit-logged per compliance rules. Follows
   * `shopping_mall_deposits` schema for field definitions.
   */
  export type IUpdate = {
    /**
     * Account status (active, frozen, closed, under_review, etc.) for
     * financial and compliance operations.
     *
     * Updates to this field are typically restricted to admin, fraud, or
     * business logic events. Only supported values should match the
     * business enum at the application level (see
     * `shopping_mall_deposits.status`).
     */
    status?: string | undefined;

    /**
     * Current deposit balance (in system currency units) as a float.
     *
     * Typically, changes to this field are rare and only allowed by
     * authorized business logic for refunds, adjustments, or manual
     * correction. Must always be non-negative and accurately verified if
     * changed. System-controlled and evidence/audit-logged for compliance.
     */
    balance?: number | undefined;

    /**
     * Timestamp if deposit record is soft-deleted (ISO 8601 with timezone).
     * Set this to current time string (or null to restore/undelete).
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary DTO for a deposit account (user e-wallet).
   *
   * Used in paginated administrative/index listings. Includes identifiers,
   * balance, and account status.
   *
   * Reflects shopping_mall_deposits table.
   */
  export type ISummary = {
    /**
     * Primary Key.
     *
     * Unique identifier for the deposit account.
     */
    id: string & tags.Format<"uuid">;

    /** Reference to the customer's unique identifier. */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Current deposit balance (in system currency units). Always
     * non-negative, may reflect pending operations until settled.
     */
    balance: number;

    /**
     * Account status (active, frozen, closed, under_review, etc.) for
     * financial and compliance operations.
     */
    status: string;

    /** Timestamp when the deposit record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp for last update to the deposit record. */
    updated_at: string & tags.Format<"date-time">;
  };
}
