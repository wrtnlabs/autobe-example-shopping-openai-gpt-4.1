import { tags } from "typia";

/**
 * A comment entity on a bulletin, inquiry, or review, supporting full
 * conversation, moderation and evidence logging. Maps to ai_commerce_comments
 * table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceComment = {
  /** Unique system identifier for the comment record. */
  id: string & tags.Format<"uuid">;

  /** User UUID who authored the comment. */
  author_id: string & tags.Format<"uuid">;

  /** Parent comment (for threads), nullable. UUID or null. */
  parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** If the comment is attached to a bulletin, parent bulletin's ID. */
  bulletin_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** If the comment is attached to a product inquiry, reference to inquiry ID. */
  inquiry_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** If the comment is attached to a review, reference to review ID. */
  review_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Main content/body of the comment (user/member text). */
  body: string;

  /**
   * Moderation/business status (e.g., 'published', 'flagged', 'deleted',
   * etc.).
   */
  status: string;

  /** ISO 8601 creation timestamp for the comment, for sorting/evidence. */
  created_at: string & tags.Format<"date-time">;

  /** ISO 8601 last update time (for edits/moderation). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * If soft-deleted, timestamp of deletion. Null if active. Audit/compliance
   * only.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceComment {
  /**
   * Advanced query/search DTO for listing/filtering comments on bulletin,
   * inquiry, or review entities. Used to power paginated UIs, moderator
   * dashboards, or analytics.
   */
  export type IRequest = {
    /** Filter for comments authored by the specified user (UUID). Optional. */
    author_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Moderation/business status filter (e.g., 'published', 'flagged',
     * etc.).
     */
    status?: string | undefined;

    /**
     * ISO 8601 (inclusive) lower bound for comment creation time for
     * filtering.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 (inclusive) upper bound for comment creation time for
     * filtering.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Full-text search/filter for comment content/body. */
    search?: string | undefined;

    /**
     * Filter for comments that are direct replies to the given parent
     * (threaded).
     */
    parent_comment_id?: (string & tags.Format<"uuid">) | undefined;

    /** Restrict query to comments on a particular bulletin. */
    bulletin_id?: (string & tags.Format<"uuid">) | undefined;

    /** Restrict query to comments attached to a specific product inquiry. */
    inquiry_id?: (string & tags.Format<"uuid">) | undefined;

    /** Restrict query to comments attached to a review. */
    review_id?: (string & tags.Format<"uuid">) | undefined;

    /** Page number for paginated result sets. 1-based. Optional. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Pagination limit (number of results per page). Optional. Defaults
     * system value.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Field name to sort by: e.g., 'created_at', 'status', etc. */
    sort_by?: string | undefined;

    /** Sort order: 'asc' for ascending, 'desc' for descending. */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Object for creating a new comment on a thread or user-generated content.
   * Includes text, optional parent comment ID for threading, visibility
   * scope, and moderation status. Follows audit and compliance rules for
   * comment storage.
   */
  export type ICreate = {
    /**
     * Content/body of the comment (required text value for all comment
     * creations).
     */
    body: string;

    /** Parent comment ID for threading; null for top-level. */
    parent_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Visibility/scope for this comment (optional, string; e.g., 'public',
     * 'private', etc.)
     */
    visibility?: string | null | undefined;

    /**
     * Moderation status (optional). E.g.,
     * 'draft','published','suspended','deleted', etc.
     */
    status?: string | null | undefined;
  };

  /**
   * Object for updating a comment's body, moderation status, or visibility.
   * Fields may be omitted to retain previous values.
   */
  export type IUpdate = {
    /**
     * Content/body for updating comment. If omitted, previous value is
     * retained.
     */
    body?: string | undefined;

    /**
     * Update the status of the comment (e.g.,
     * 'published','suspended','deleted'). String; domain values allowed.
     */
    status?: string | undefined;

    /** Optionally update the comment visibility ('public','private', etc). */
    visibility?: string | undefined;
  };

  /**
   * Summary view of a comment (UGC context), typically used for listing or
   * previews on bulletin, review, or inquiry discussions. Contains author,
   * content, status, and timestamps, but not full reply threads or moderation
   * histories.
   */
  export type ISummary = {
    /**
     * Unique identifier for the comment. This is a UUID string referencing
     * the primary key of the comment record in the UGC system.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the comment author (usually a buyer, but can be
     * a seller or admin in some UGC flows).
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * Full content of the comment as posted by the author. May be plain
     * text or filtered for moderation as needed.
     */
    body: string;

    /**
     * Business or moderation status of the comment. Common values:
     * 'published', 'moderated', 'deleted', 'draft'. Follows the status
     * values of ai_commerce_comments.
     */
    status: string;

    /**
     * ISO 8601 timestamp for when the comment was created. Referenced from
     * ai_commerce_comments.created_at.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * ISO 8601 timestamp for when the comment was last edited or status was
     * changed. Referenced from ai_commerce_comments.updated_at.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
