import { tags } from "typia";

/**
 * Represents a payment event record in the system, as stored in
 * ai_commerce_payments. Captures transaction status, value, currency,
 * timestamps, and audit/compliance context. All fields are mapped per Prisma
 * DB/ERD schema and described for their operational, financial, or compliance
 * significance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommercePayments = {
  /** Unique payment identifier (ai_commerce_payments.id). */
  id: string & tags.Format<"uuid">;

  /**
   * Unique payment identifier per business or payment gateway. Used to
   * reconcile with external networks and ensure idempotency.
   */
  payment_reference: string;

  /**
   * Current payment status (pending, paid, failed, refunded, etc.). See
   * ai_commerce_payments.status.
   */
  status: string;

  /** Payment value as recorded, per ai_commerce_payments.amount. */
  amount: number;

  /** Currency code (ISO 4217). ai_commerce_payments.currency_code. */
  currency_code: string;

  /** Timestamp the payment was issued (ai_commerce_payments.issued_at). */
  issued_at: string & tags.Format<"date-time">;

  /** Confirmation timestamp for settled payments. Null if not applicable. */
  confirmed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Error code or explanation for failed payments. Null if not failed. */
  failure_reason?: string | null | undefined;

  /** Persistent record creation date (ai_commerce_payments.created_at). */
  created_at: string & tags.Format<"date-time">;

  /** Most recent update timestamp (ai_commerce_payments.updated_at). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion marker for compliance. Null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommercePayments {
  /**
   * DTO for creating a new payment record (ai_commerce_payments) per schema
   * and ERD documentation. Supports all required fields, optional
   * confirmation/failure information, and necessary context for compliance
   * events.
   */
  export type ICreate = {
    /**
     * Unique business or gateway-assigned identifier for the payment.
     * Critical for reconciling and reporting. Maps to
     * ai_commerce_payments.payment_reference.
     */
    payment_reference: string;

    /**
     * Current status string, e.g., pending / paid / failed / refunded.
     * Constrained by business rules and mapped to
     * ai_commerce_payments.status.
     */
    status: string;

    /**
     * Monetary value of the payment event. Must be valid per
     * business/integration rules. Schema: ai_commerce_payments.amount.
     */
    amount: number;

    /**
     * ISO currency code (e.g., 'USD', 'KRW'). Enforced by
     * ai_commerce_payments.currency_code.
     */
    currency_code: string;

    /**
     * Timestamp when the payment was created/initated.
     * ai_commerce_payments.issued_at.
     */
    issued_at: string & tags.Format<"date-time">;

    /**
     * (Optional) Confirmation timestamp, if available. Null if not
     * confirmed.
     */
    confirmed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** (Optional) Populated for failure events. Null if not failed. */
    failure_reason?: string | null | undefined;
  };
}
