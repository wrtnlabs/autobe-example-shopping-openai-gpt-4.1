import { tags } from "typia";

/**
 * Full inquiry business entity. Used for get/detail and main inquiry flows.
 * Aligns to schema record for reading, updating, evidence.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendInquiry = {
  /** Unique inquiry record. */
  id: string & tags.Format<"uuid">;

  /** Owner customer (nullable for seller-only inquiries). */
  customer_id?: (string & tags.Format<"uuid">) | null;

  /** Seller owner (nullable for customer-only or admin inquiries). */
  seller_id?: (string & tags.Format<"uuid">) | null;

  /** Product ID the inquiry is about (if applicable). */
  product_id?: (string & tags.Format<"uuid">) | null;

  /** Order ID this inquiry is linked to (for post-sales activity). */
  order_id?: (string & tags.Format<"uuid">) | null;

  /** Inquiry subject/summary line. */
  title: string;

  /** Full text content of the inquiry. */
  body: string;

  /** True if private (visible only to owner and target); false if public. */
  private: boolean;

  /** Workflow state (open/answered/closed/etc). */
  status: string;

  /** Timestamp inquiry was closed/resolved. */
  closed_at?: string | null;

  /** Creation timestamp. */
  created_at: string;

  /** Timestamp of last update. */
  updated_at: string;

  /** Soft delete (when logically deleted). */
  deleted_at?: string | null;
};
export namespace IShoppingMallAiBackendInquiry {
  /**
   * Search request for customer/seller/admin inquiries (QnA, support,
   * after-sale, etc). All fields are optional; present for advanced filtering
   * in admin/UX.
   */
  export type IRequest = {
    /** Page for pagination, optional. */
    page?: (number & tags.Type<"int32">) | null;

    /** Page size, optional, for paginated search. */
    limit?: (number & tags.Type<"int32">) | null;

    /** Sort expression string, e.g. created_at desc. */
    sort?: string;

    /** Business logic filter object. */
    filter?: {};

    /** Only inquiries matching status (open/closed/pending/etc). */
    status?: string;

    /** Partial title text search. */
    title?: string;

    /** Related product id for filtering. */
    product_id?: string;

    /** Order id for filtering. */
    order_id?: string;

    /** Filter for privacy (true/false). */
    private?: boolean;

    /** Lower created_at time for filtering. */
    created_from?: string;

    /** Upper created_at time for filtering. */
    created_to?: string;
  };

  /**
   * Summary structure for a user inquiry in listings. Used for list pages,
   * admin overview, customer UX, etc.
   */
  export type ISummary = {
    /** Inquiry unique identifier. */
    id: string & tags.Format<"uuid">;

    /** Inquiry title (subject line). */
    title: string;

    /** Status - open/answered/closed/etc. */
    status: string;

    /** Privacy (private/public); true if only owner and counterpart can see. */
    private: boolean;

    /** Creation timestamp. */
    created_at: string;

    /** Last update timestamp. */
    updated_at: string;
  };

  /**
   * Creation structure for a new inquiry from any party. Used with POST
   * endpoints for customer/seller/admin engagement.
   */
  export type ICreate = {
    /** Customer creating the inquiry (if applicable). */
    customer_id?: string | null;

    /** Seller creating/managing the inquiry (if applicable). */
    seller_id?: string | null;

    /** Related product ID. */
    product_id?: string | null;

    /** Related order ID if linked. */
    order_id?: string | null;

    /** Inquiry title/subject. */
    title: string;

    /** Body content. */
    body: string;

    /** Private=visible only to owner/counterparty; public=open. */
    private: boolean;

    /** Initial workflow status ('open', etc). */
    status: string;
  };

  /**
   * Partial update patch structure for an existing inquiry. Only includes
   * fields permitted to be changed.
   */
  export type IUpdate = {
    /** New/edited title for the inquiry. */
    title?: string;

    /** Content/body update. */
    body?: string;

    /** Change privacy state. */
    private?: boolean;

    /** Status update (e.g. open, closed, etc). */
    status?: string;

    /** Close timestamp for status transitions. */
    closed_at?: string | null;
  };
}
