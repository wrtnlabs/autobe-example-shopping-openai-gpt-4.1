import { tags } from "typia";

/**
 * Schema representing a single favorite product record as stored in
 * shopping_mall_favorite_products. Used for API response, export, and evidence
 * in compliance audits. Includes all business fields, current audit timestamps,
 * associated snapshot and product references. Only fields found in the DB model
 * and with business relevance for favorite operation, audit, or personalization
 * are present. Does not include embedded nested product entity; only
 * references. Excludes deleted_at if soft-deleted (only returned if requested
 * for compliance view).
 *
 * @title Favorite Product Entity
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallFavoriteProduct = {
  /** UUID primary key of the favorite product record in the DB. */
  id: string & tags.Format<"uuid">;

  /**
   * UUID reference to the favoriting customer (as per
   * shopping_mall_customers.id).
   */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * UUID reference to the product that has been favorited (as per
   * shopping_mall_products.id).
   */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /**
   * UUID for the snapshot of the product/business entity preserved at time of
   * favoriting (from shopping_mall_favorite_snapshots).
   */
  shopping_mall_favorite_snapshot_id: string & tags.Format<"uuid">;

  /**
   * If true, notifications for events relating to this favorite product are
   * sent to the customer. False disables notifications. Used for batch
   * notification processing, personalization, and system alerts. Editable by
   * the user.
   */
  notification_enabled: boolean;

  /**
   * Optional organizational tag/label for grouping/batch operations in the UI
   * or personalization module. Not required; null means no grouping.
   */
  batch_label?: string | null | undefined;

  /**
   * Datetime the favorite product record was created (favorited/added) in UTC
   * ISO8601.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Datetime the favorite product record was last updated. Used for tracking
   * re-organizations, label/notification preference changes, or evidence
   * audits.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for logical soft-deletion. Null means the favorite is active;
   * set to non-null if logically removed from favorites for audit/evidence.
   * Not returned unless explicitly requested in compliance modes.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallFavoriteProduct {
  /**
   * Schema for filtering and pagination request parameters when listing a
   * customer's favorited products. All properties are optional and match
   * supported search, filter, batch, and sorting features from the backend.
   * Used to perform advanced queries, listing, batch operations, and
   * organizing favorites. Only properties present in the
   * shopping_mall_favorite_products and related tables may be used for search
   * or filter logic. Properties such as notification status, label/tag, or
   * favorite creation time are supported. This DTO is designed as a request
   * payload for list/batch endpoints.
   *
   * @title Request DTO for listing/searching Favorite Products
   */
  export type IRequest = {
    /**
     * Page number for pagination (1-based). Used to fetch a specific subset
     * of the paged results. Optional; default is 1 if not provided.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of items per page for pagination. Controls the page size for
     * returned favorite products. Optional; business default may be applied
     * if missing.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<500>)
      | undefined;

    /**
     * String label/tag for grouping, batch operation, or UI organization of
     * favorite products. Optional filter, used for listing favorites with a
     * particular tag/group. Case-insensitive partial match recommended on
     * the backend.
     */
    batch_label?: string | undefined;

    /**
     * If true, filter to only return favorite products with notifications
     * enabled. If false, only those with notifications turned off.
     * Optional; omit to fetch all.
     */
    notification_enabled?: boolean | undefined;

    /**
     * Filters to favorites created after (greater than) this ISO8601 UTC
     * date-time.
     */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filters to favorites created before (less than) this ISO8601 UTC
     * date-time.
     */
    created_before?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Schema for creating a new favorite product record for a customer as per
   * shopping_mall_favorite_products. Used for POST requests to favorite a
   * product. All properties marked as required must be provided by the
   * client; optional ones follow business logic. Only properties that exist
   * in the DB schema and are required for record creation are included. Does
   * not accept fields that are system-managed or only available post-creation
   * (such as created_at, id). Creator is always inferred from authentication
   * context, not client-specified IDs. This DTO is strictly for creation;
   * updates must use the update DTO.
   *
   * @title Create DTO for Favorite Product
   */
  export type ICreate = {
    /**
     * UUID of the product being favorited (must exist in
     * shopping_mall_products, not soft-deleted).
     */
    shopping_mall_product_id: string & tags.Format<"uuid">;

    /**
     * UUID reference to the product state snapshot at time of favoriting
     * (must exist in shopping_mall_favorite_snapshots).
     */
    shopping_mall_favorite_snapshot_id: string & tags.Format<"uuid">;

    /**
     * Whether to enable notifications for this favorite; true to receive
     * alerts about the product, false otherwise.
     */
    notification_enabled: boolean;

    /**
     * Optional field; if provided, assigns a grouping label/tag to the
     * favorite for UI and batch operations.
     */
    batch_label?: string | null | undefined;
  };

  /**
   * Update payload for customer's favorite product entity.
   *
   * Allows modifying notification preferences (notification_enabled) and
   * organizational label (batch_label) for a favorited product entry.
   * Ownership is enforced: only the owning customer can update their
   * favorite. Does NOT allow changing references to the favorited product or
   * snapshot.
   *
   * All updates are audit-logged and timestamps are updated for compliance
   * and personalization workflows.
   */
  export type IUpdate = {
    /**
     * Whether notifications are enabled for entity changes after
     * favoriting.
     *
     * Boolean indicating whether the customer wants to receive
     * notifications about changes to the favorited product (e.g., restock,
     * price drop, update, etc.).
     */
    notification_enabled?: boolean | undefined;

    /**
     * Optional custom label or tag for user batch operation for organizing
     * favorites. May be used for batch updates, mass removal, etc. Null if
     * not assigned.
     */
    batch_label?: string | null | undefined;
  };
}
