import { tags } from "typia";

/**
 * Represents a session for a shopping cart, tracking linkage to buyer and cart
 * objects, authentication token, status, expiration, and audit timestamps. Used
 * for session bridging, cart recovery, guest/member cart merge, and compliance
 * tracing. Maps to the ai_commerce_cart_sessions table in the database, and is
 * central for persistent or cross-device cart experience. See schema for field
 * types and business rules.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceCartSession = {
  /** Unique identifier for the cart session (UUID, PK). */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the buyer who owns this session, or null if this is a guest
   * cart session. Optional.
   */
  buyer_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Unique identifier to the associated cart (FK, UUID). Required. */
  cart_id: string & tags.Format<"uuid">;

  /** Opaque session identifier (token or device/session string). */
  session_token: string;

  /** Session status (active, expired, merged, etc.) */
  status: string;

  /**
   * Session expiration timestamp in ISO8601/RFC3339, or null if not set.
   * Optional.
   */
  expires_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Cart session creation timestamp (ISO8601, required). */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp for cart session (ISO8601, required). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp, if session was logically removed. Otherwise null
   * or undefined.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceCartSession {
  /**
   * Search and filter request for listing cart session entities matching
   * buyer, token, or status. Used for buyer session management, cross-device
   * and audit flows.
   */
  export type IRequest = {
    /** (Optional) Buyer UUID to filter cart sessions by owner. */
    buyer_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Session token to filter or search among sessions (full or partial
     * match supported).
     */
    session_token?: string | undefined;

    /**
     * Session status, e.g., 'active', 'expired', 'merged', etc.
     * (case-insensitive).
     */
    status?: string | undefined;

    /** Page number for pagination (1-based index). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of results per page. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Request payload for creating a new cart session. Maps to
   * ai_commerce_cart_sessions. Required fields include cart_id,
   * session_token, status, created_at, and updated_at. Optional: buyer_id
   * (for member carts), expires_at (for expirable sessions).
   */
  export type ICreate = {
    /**
     * Reference to the member buyer for this session (FK to buyer id), or
     * null if guest.
     */
    buyer_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Unique cart identifier to link this session to. */
    cart_id: string & tags.Format<"uuid">;

    /** Opaque session token string as generated by client/server. */
    session_token: string;

    /** Current status of session: active, expired, merged, etc. */
    status: string;

    /** Session expiration timestamp, if applicable (ISO8601), else null. */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Session creation time (ISO8601/RFC3339, required). */
    created_at: string & tags.Format<"date-time">;

    /** Latest edit or access time (ISO8601/RFC3339, required). */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Update payload for modifying a cart session entity. Can change status,
   * session token, expiration, buyer assignment, and updates timestamp. All
   * optional except updated_at, which is required to track last change.
   */
  export type IUpdate = {
    /** Updated reference for buyer if changed, or null to unset. Optional. */
    buyer_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Current or new session token, if being changed. Optional. */
    session_token?: string | undefined;

    /**
     * Session status after update (active, merged, expired, etc.).
     * Optional.
     */
    status?: string | undefined;

    /** New expiration timestamp, if being changed; null to clear. Optional. */
    expires_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Timestamp for this update (required). */
    updated_at: string & tags.Format<"date-time">;
  };
}
