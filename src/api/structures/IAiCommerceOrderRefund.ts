import { tags } from "typia";

/**
 * Order refund record containing reference to the associated order, status
 * workflow, amount, and timestamps for compliance, analytics, and legal
 * evidence.
 *
 * Corresponds to ai_commerce_order_refunds table. Includes business and
 * workflow fields as defined in the ERP and legal/audit requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceOrderRefund = {
  /** Unique identifier for the order refund record (UUID). */
  id: string & tags.Format<"uuid">;

  /** Unique identifier of the associated order (UUID). */
  order_id: string & tags.Format<"uuid">;

  /** Actor (buyer, seller, admin) who initiated the refund (UUID). */
  actor_id: string & tags.Format<"uuid">;

  /** Unique refund code for cross-platform reference. */
  refund_code: string;

  /** Optional reason/comment for the refund action. */
  reason?: string | null | undefined;

  /**
   * Workflow/status: pending, processing, denied, approved, paid, failed,
   * etc.
   */
  status: string;

  /** Refunded monetary amount (must be <= paid amount). */
  amount: number;

  /**
   * Refund transaction currency code (must match original payment/order
   * currency).
   */
  currency: string;

  /** Date/time refund was requested. */
  requested_at: string & tags.Format<"date-time">;

  /** Date/time refund was resolved, if completed/canceled (nullable). */
  resolved_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceOrderRefund {
  /**
   * Filtering, searching, and pagination schema for querying order refund
   * records.
   *
   * All parameters are optional; when not provided, default values and
   * maximum paging are applied. Used for admin dashboards, compliance, and
   * business intelligence.
   */
  export type IRequest = {
    /** Filter by status (optional): e.g. 'pending', 'completed', etc. */
    status?: string[] | undefined;

    /** Filter by order_id (optional). */
    order_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by refund_code (optional). */
    refund_code?: string | undefined;

    /** Filter by actor_id (optional). */
    actor_id?: (string & tags.Format<"uuid">) | undefined;

    /** Minimum refund amount (optional). */
    min_amount?: number | undefined;

    /** Maximum refund amount (optional). */
    max_amount?: number | undefined;

    /** Date/time window for requested_at (ISO string, optional). */
    requested_after?: (string & tags.Format<"date-time">) | undefined;

    /** Date/time window for requested_at (ISO string, optional). */
    requested_before?: (string & tags.Format<"date-time">) | undefined;

    /** Pagination: page number (starting from 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Pagination: limit records per page (default 20, max 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** General search string (optional, searches reason and code fields). */
    search?: string | undefined;

    /** Sort key (e.g., 'requested_at', 'resolved_at'). */
    sort_by?: string | undefined;

    /** Sort order ('asc' or 'desc', default 'desc'). */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Create DTO for order refund request, as accepted by API. Only permitted
   * fields (amount, currency, reason) exposed for user input; order linkage
   * and status managed internally.
   */
  export type ICreate = {
    /** Actor (UUID) requesting/initiating the refund. */
    actor_id: string & tags.Format<"uuid">;

    /** Refund amount requested (must not exceed paid amount for order). */
    amount: number;

    /** Currency code for refund (must match payment/order currency). */
    currency: string;

    /** Optional reason for the refund request. */
    reason?: string | null | undefined;
  };

  /**
   * Update DTO for existing order refund record.
   *
   * Permits mutation of allowed fields for compliance, status transitions,
   * and comment update. Used by workflow automation and admin users only.
   */
  export type IUpdate = {
    /** Workflow/status to set (e.g., 'approved', 'denied', 'paid'). */
    status?: string | undefined;

    /** Optional update to refund reason/comment (e.g., escalation details). */
    reason?: string | null | undefined;

    /** Admin/operator only: set resolved_at timestamp. */
    resolved_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
