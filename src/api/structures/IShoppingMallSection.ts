import { tags } from "typia";

/**
 * Defines a logical section within a shopping mall channel (e.g., 'Best Deal',
 * 'International'). Includes unique identifier, linkage to parent channel,
 * business code, display name, description, sort order, and audit fields.
 * Supports soft deletion via 'deleted_at'. Follows Prisma
 * shopping_mall_sections schema. Used in listing, editing, and management
 * endpoints.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallSection = {
  /** Primary key. Unique identifier for the shopping mall section. */
  id: string & tags.Format<"uuid">;

  /**
   * Belonged channel's unique identifier (foreign key to
   * shopping_mall_channels.id).
   */
  shopping_mall_channel_id: string & tags.Format<"uuid">;

  /**
   * Unique section code, scoped to channel. Used for business identification
   * and routing (e.g., 'home', 'event', 'bestseller').
   */
  code: string;

  /** Section display name as rendered in admin UI or customer application. */
  name: string;

  /**
   * Short description of the section's purpose. Nullable. Used for business
   * context or UI hints.
   */
  description?: string | null | undefined;

  /**
   * Display order index for listing sections within a channel. Used to
   * control UI position and business prioritization.
   */
  display_order: number & tags.Type<"int32">;

  /** Section creation timestamp (UTC, ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Time of last update to this section (UTC, ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Section deletion time (soft delete); set if section is logically removed
   * but not purged. Null if active. Used for audit and evidence retention.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallSection {
  /**
   * Request parameters for searching, filtering, and paginating shopping mall
   * sections. Supports advanced query scenarios such as searching by section
   * name, code, display order, and date windows. Controls sort and
   * pagination; designed for admin UI or channel configuration workflows. All
   * fields are optional to maximize query flexibility.
   */
  export type IRequest = {
    /** Page number for section listing. Used for pagination control. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of records to return per page. Helps manage pagination and
     * performance constraints.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Field to sort the list of sections by. May support values like
     * 'display_order', 'created_at', or 'name'. Optional; default depends
     * on backend implementation.
     */
    sort?: string | undefined;

    /**
     * Order direction for sorting. Accepts 'asc' (ascending) or 'desc'
     * (descending). Defaults to 'asc' if not specified.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * Filter for section name. Partial string match for searching by
     * display name. Optional.
     */
    name?: string | undefined;

    /**
     * Filter for section code. Supports exact or partial string search.
     * Optional.
     */
    code?: string | undefined;

    /**
     * Filter for section display order. Allows listing sections by a
     * specific order index. Optional.
     */
    display_order?: (number & tags.Type<"int32">) | undefined;

    /**
     * Filter by section business status (e.g., active, deleted, paused).
     * Value set is platform-defined and optional.
     */
    status?: string | undefined;

    /**
     * Filter for sections created after this timestamp (inclusive). ISO
     * 8601 format. Optional.
     */
    created_at_start?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for sections created before this timestamp (inclusive). ISO
     * 8601 format. Optional.
     */
    created_at_end?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for sections updated after this timestamp (inclusive). ISO
     * 8601 format. Optional.
     */
    updated_at_start?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for sections updated before this timestamp (inclusive). ISO
     * 8601 format. Optional.
     */
    updated_at_end?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Fields required to create a new shopping mall section (entity in
   * shopping_mall_sections Prisma model). Required: channel reference, code,
   * name, and display_order; description is optional. Section creation is the
   * primary step towards organizing the structure of a channel and supports
   * virtual corners and merchandising logic.
   */
  export type ICreate = {
    /**
     * Channel under which the section is being created. Must be an existing
     * shopping_mall_channels.id. Required.
     */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /**
     * Section code unique within this channel. Used for business
     * identification and routing.
     */
    code: string;

    /** Section display name for administration and storefront UI. */
    name: string;

    /**
     * Optional description of the section's purpose or business context.
     * Nullable.
     */
    description?: string | null | undefined;

    /**
     * Integer representing order for UI display. Used to determine list
     * position among sections in a channel.
     */
    display_order: number & tags.Type<"int32">;
  };

  /**
   * DTO for updating properties of an existing shopping mall section
   * (shopping_mall_sections table row). All fields are optional: code, name,
   * description, and display_order. Used in PATCH/PUT endpoints to change
   * business attributes, labels, or UI arrangement of sections within a
   * shopping mall channel without affecting audit fields or channel
   * association.
   */
  export type IUpdate = {
    /**
     * New or updated section code to uniquely identify the section within a
     * channel. Optional; must remain unique if changed.
     */
    code?: string | undefined;

    /** New or updated display name for the section. Optional. */
    name?: string | undefined;

    /** New or updated section description. Nullable and optional. */
    description?: string | null | undefined;

    /**
     * Updated display order for the section within its channel. Optional;
     * controls UI sorting and business priority.
     */
    display_order?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Summary view of a mall section for list displays and search operations.
   * Represents the most important identifying information and business
   * context for managing sections in the platform.
   *
   * References shopping_mall_sections for structure and business logic. Use
   * for efficient administrative, seller, and advanced search UI rendering.
   */
  export type ISummary = {
    /**
     * Unique identifier for the mall section. This is the primary key in
     * the shopping_mall_sections table. Example:
     * 'a8c16761-2f19-4b27-8c7b-5719083fb3e5'.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier of the channel this section belongs to. This forms a
     * foreign key relationship with shopping_mall_channels.id. Example:
     * 'c13b8b50-6645-11eb-9439-0242ac130002'.
     */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /**
     * Section business code, unique in the channel. Used for API routes and
     * admin/business identification. Example: 'bestseller', 'eventy2025'.
     */
    code: string;

    /**
     * Section display name as shown to users or in admin UI. Example: 'Best
     * Deals', '2025 Event'. This is required.
     */
    name: string;

    /**
     * Short description of the section. May be null if not provided. Used
     * in admin UI and for business communication.
     */
    description?: string | null | undefined;

    /**
     * Evaluation order (integer) for listing sections within a channel.
     * Lower numbers typically appear first. Example: 1, 10, 20.
     */
    display_order: number & tags.Type<"int32">;
  };
}
