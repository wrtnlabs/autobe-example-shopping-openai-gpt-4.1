import { tags } from "typia";

/**
 * Full detail for a deposit transaction event in a customer's digital wallet.
 * Each record logs a balance event: income, outcome, refund, admin adjustment,
 * or reversal.
 *
 * Fields and audit meta must match `shopping_mall_deposit_transactions` schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallDepositTransaction = {
  /** Primary Key (UUID) for the deposit transaction record. */
  id: string & tags.Format<"uuid">;

  /**
   * Deposit account (UUID) this transaction is associated with. FK to
   * shopping_mall_deposits.id.
   */
  shopping_mall_deposit_id: string & tags.Format<"uuid">;

  /**
   * Target customer (UUID, FK to shopping_mall_customers.id) for user-level
   * audit/evidence. Always present.
   */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Linked order transaction (UUID) if applicable (nullable). References
   * shopping_mall_orders.id.
   */
  shopping_mall_order_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Transaction type. Enum: income, outcome, refund, admin_adjustment,
   * reversal, etc. Must match domain logic. Required.
   */
  type: string;

  /**
   * Transaction amount (float, always positive). Must be non-negative and
   * reflect system currency units. Required.
   */
  amount: number;

  /**
   * Processing status: applied, confirmed, failed, in_review, reversed, etc.
   * Enum at the application level. Required.
   */
  business_status: string;

  /**
   * Business reason (campaign, event, manual adjustment) or free-text note.
   * Nullable.
   */
  reason?: string | null | undefined;

  /** Reference to order, audit, or snapshot for evidence (nullable). */
  evidence_reference?: string | null | undefined;

  /**
   * Timestamp when transaction was reversed/cancelled. ISO 8601 or null if
   * never reversed.
   */
  reversed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Record creation timestamp (ISO 8601, required). */
  created_at: string & tags.Format<"date-time">;

  /** Record's last update timestamp (ISO 8601, required). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp (null if still active). Required. Logical removal
   * for audit/compliance.
   */
  deleted_at: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallDepositTransaction {
  /**
   * Filtering, search, pagination, and sort criteria for listing deposit
   * transactions.
   *
   * Used with paged transaction listing API. All fields optional.
   */
  export type IRequest = {
    /**
     * Filter: Business-side processing status (applied, confirmed, failed,
     * in_review, reversed, etc.).
     *
     * Optional. Restricts listing of transactions to those with a specific
     * business status.
     */
    business_status?: string | undefined;

    /**
     * Filter: Transaction type (income, outcome, refund, admin_adjustment,
     * reversal, etc.).
     *
     * Optional. Limits search to transactions of the specified type. Should
     * reflect domain enum.
     */
    type?: string | undefined;

    /**
     * Filter: Inclusive lower bound for transaction timestamp (created_at
     * >= start_date), in ISO 8601 format.
     *
     * Optional. Can be used for date range queries.
     */
    start_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter: Exclusive upper bound for transaction timestamp (created_at <
     * end_date), in ISO 8601 format.
     *
     * Optional. Together with start_date for filtering.
     */
    end_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter: Linked order transaction by UUID.
     *
     * Optional. When specified, returns only transactions tied to a
     * particular order ID (shopping_mall_orders.id).
     */
    order_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter: Detailed business reason, event, or note substring (promo,
     * adjustment, campaign).
     *
     * Optional, used for free-text matching in transaction 'reason' field.
     */
    reason?: string | undefined;

    /**
     * Pagination: Page number (1-based).
     *
     * Optional, default may be 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Pagination: Maximum number of items per page.
     *
     * Optional, typical system default is 50 or 100. Should not exceed 200.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<200>)
      | undefined;

    /**
     * Sorting order for transaction records by creation timestamp.
     *
     * Optional. Allowed values: 'created_at:asc', 'created_at:desc'.
     * Default: 'created_at:desc'.
     */
    sort?: "created_at:asc" | "created_at:desc" | undefined;
  };

  /**
   * Creation DTO for a new deposit transaction.
   *
   * Defines all required data to record a digital wallet event for a customer
   * (income, outcome, refund, etc). Additional context (reason,
   * evidence_reference, order linkage) may be provided if applicable. Fully
   * validated and compliant with `shopping_mall_deposit_transactions` Prisma
   * schema.
   */
  export type ICreate = {
    /**
     * Transaction type: income, outcome, refund, admin_adjustment,
     * reversal, etc. Must be allowed type by application logic. Required.
     */
    type: string;

    /**
     * Transaction amount (positive float, non-negative, system currency
     * units). Required.
     */
    amount: number;

    /**
     * Customer (UUID, FK to shopping_mall_customers.id) who owns/affects
     * this deposit transaction. Required.
     */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Linked order reference (nullable UUID), if transaction is tied to an
     * order. Optional.
     */
    shopping_mall_order_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Processing/business status (applied, confirmed, failed, in_review,
     * reversed, etc.). Required.
     */
    business_status: string;

    /**
     * Free-text business reason, context (campaign, manual adjustment).
     * Nullable. Optional.
     */
    reason?: string | null | undefined;

    /**
     * Optional evidence/audit/snapshot reference string. Used for
     * compliance trace or business linkage. Nullable.
     */
    evidence_reference?: string | null | undefined;
  };

  /**
   * Payload for updating an existing deposit transaction in the digital
   * deposit ledger. Allows business status and reason to be changed, along
   * with reference to reversal or evidence. Only mutable fields are strictly
   * allowed.
   */
  export type IUpdate = {
    /**
     * Processing/business status (applied, confirmed, failed, in_review,
     * reversed, etc.). Consult the platform's business rules for available
     * values. May be updated only in restricted contexts.
     */
    status?: string | undefined;

    /**
     * Business-side processing status (applied, confirmed, failed,
     * in_review, reversed, etc.). Used for business logic and may
     * correspond to 'status'. Updated according to workflow.
     */
    business_status?: string | undefined;

    /**
     * Detailed business reason or description for transaction (top-up,
     * purchase, refund, bonus, manual debit, etc.). Optional.
     */
    reason?: string | null | undefined;

    /**
     * Optional reference to evidence, audit record, or snapshot backing
     * this transaction. May be null on update.
     */
    evidence_reference?: string | null | undefined;

    /**
     * If this transaction was reversed/cancelled, indicates the datetime in
     * ISO-8601 format; null otherwise.
     */
    reversed_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
