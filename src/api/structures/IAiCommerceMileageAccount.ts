import { tags } from "typia";

/**
 * Mileage/point account record for a buyer or seller in the platform. Business
 * entity for tracking reward/loyalty account status, balance, compliance, and
 * audit trails.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceMileageAccount = {
  /** Primary Key for mileage account (UUID). */
  id: string;

  /** Unique code/token for identifying this mileage account. */
  account_code: string;

  /** User (buyer/seller) that owns this mileage account. */
  user_id: string;

  /**
   * Current mileage (loyalty point) balance for this account. Cannot be
   * negative per business rules.
   */
  balance: number;

  /**
   * Status for this mileage account (active, suspended, closed). Business
   * logic governs allowed transitions.
   */
  status: string;

  /** When the mileage account was created (ISO 8601 UTC). */
  created_at: string & tags.Format<"date-time">;

  /** When the mileage account was last updated (ISO 8601 UTC). */
  updated_at: string & tags.Format<"date-time">;

  /** When this mileage account was soft deleted (null if active). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceMileageAccount {
  /**
   * Filtering/pagination/search request for listing mileage accounts. See
   * business rules for field use.
   */
  export type IRequest = {
    /** Filter for user (buyer/seller) ID linked to the mileage account. */
    user_id?: string | undefined;

    /**
     * Filter for mileage account business status (e.g., 'active',
     * 'suspended', 'closed').
     */
    status?: string | undefined;

    /** Optional filter for the unique account code of the mileage account. */
    account_code?: string | undefined;

    /** Minimum balance filter for account search. */
    min_balance?: number | undefined;

    /** Maximum balance filter for account search. */
    max_balance?: number | undefined;

    /** Lower bound for filtering based on creation datetime (ISO 8601). */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound for filtering based on creation datetime (ISO 8601). */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Lower bound for filtering based on last update datetime (ISO 8601). */
    updated_from?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound for filtering based on last update datetime (ISO 8601). */
    updated_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination; starts from 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page for pagination (max 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Field name to sort by (e.g., 'created_at', 'balance',
     * 'account_code').
     */
    sort_by?: string | undefined;

    /** Sort order. Must be either 'asc' or 'desc'. */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Creation data for a new mileage (loyalty) account for a user. Used in
   * onboarding, rewards, or role escalation. Defaults for balance/status will
   * be set per business rules if not provided.
   */
  export type ICreate = {
    /**
     * User (buyer or seller) for which the mileage account is being
     * created.
     */
    user_id: string;

    /** Unique code for this account. Must NOT duplicate existing codes. */
    account_code: string;

    /** Initial balance. Optional—if omitted, typically defaults to 0. */
    balance?: number | undefined;

    /**
     * Account status (e.g., 'active', 'suspended', 'closed'). Business
     * logic may require 'active' by default.
     */
    status?: string | undefined;
  };

  /**
   * Update payload for a mileage account—currently only supports status
   * update. Balance is not directly updatable except via transactions.
   */
  export type IUpdate = {
    /**
     * Update the current status for the mileage account (active, suspended,
     * closed). Must comply with business logic.
     */
    status?: string | undefined;
  };
}
