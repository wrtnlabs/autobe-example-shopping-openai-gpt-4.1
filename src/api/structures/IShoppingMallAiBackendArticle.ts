import { tags } from "typia";

/**
 * Full information about a single article entity.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendArticle = {
  /** Article UUID (system unique). */
  id: string & tags.Format<"uuid">;

  /** Sales/content channel UUID this article belongs to. */
  channel_id: string & tags.Format<"uuid">;

  /** Article title. Must be concise and business-relevant. */
  title: string;

  /** Primary article content (multi-format allowed; markdown/html). */
  body: string;

  /** Author UUID (business role). */
  author_id: string & tags.Format<"uuid">;

  /** Is article pinned to top of channel. */
  pinned: boolean;

  /** Status (draft, published, archived, etc). */
  status: string;

  /** View count (audience metric). */
  view_count: number & tags.Type<"int32">;

  /** Is this article a formal notice (shown in notices/announcements). */
  is_notice: boolean;

  /** Creation timestamp (UTC). */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp (UTC). */
  updated_at: string & tags.Format<"date-time">;

  /** Nullable soft delete timestamp; if set, indicates logically deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendArticle {
  /** Input for paginated/filterable article search operation. */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null;

    /** Results per page for pagination. */
    limit?: (number & tags.Type<"int32">) | null;

    /** Optional filter for channel UUID (search only this channel). */
    channel_id?: (string & tags.Format<"uuid">) | null;

    /** Filter by article status (draft,published,archived,hidden,...). */
    status?: string | null;

    /** Search by author UUID. */
    author_id?: (string & tags.Format<"uuid">) | null;

    /** Search by partial title text. */
    title?: string | null;

    /** Search by body content. */
    body?: string | null;

    /** Filter: is notice / not notice. */
    is_notice?: boolean | null;

    /** Searches for articles created after/on this date-time (UTC). */
    created_from?: (string & tags.Format<"date-time">) | null;

    /** Searches for articles created before/on this date-time (UTC). */
    created_to?: (string & tags.Format<"date-time">) | null;

    /** Sort by: created_at | view_count | title */
    sort?: "created_at" | "view_count" | "title" | null;

    /** Sort order: asc or desc */
    order?: "asc" | "desc" | null;
  };

  /** Summary view for paginated/search article listings. */
  export type ISummary = {
    /** Article UUID (summary view). */
    id: string & tags.Format<"uuid">;

    /** Channel UUID for article. */
    channel_id: string & tags.Format<"uuid">;

    /** Article title (summary view). */
    title: string;

    /** Author's UUID (summary view only). */
    author_id: string & tags.Format<"uuid">;

    /** Business status (summary fields). */
    status: string;

    /** View count at summary level. */
    view_count: number & tags.Type<"int32">;

    /** Summary: Is this article a notice? */
    is_notice: boolean;

    /** When created (summary, UTC). */
    created_at: string & tags.Format<"date-time">;

    /** When last updated (summary, UTC). */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body for creating a new article. Maps to the
   * shopping_mall_ai_backend_articles entity. All required properties must be
   * supplied. Do not include audit timestamps or generated fields; these are
   * managed by the system.
   */
  export type ICreate = {
    /**
     * Unique identifier of the channel to which this article is posted.
     * Required for associating the article with a sales/content channel.
     */
    channel_id: string & tags.Format<"uuid">;

    /** Title for the article. Must be unique within the channel. Required. */
    title: string;

    /**
     * Main content body of the article (markdown or rich text allowed).
     * Required.
     */
    body: string;

    /**
     * Unique identifier of the author (user, admin, or seller). Required
     * for ownership and evidence tracking.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * Article status (draft, published, archived, hidden, etc). Required
     * for workflow. Enum values usually controlled elsewhere.
     */
    status: string;

    /** Whether this article is system/official notice. Required. */
    is_notice: boolean;

    /** Whether this article is pinned to the top. Required. */
    pinned: boolean;

    /**
     * Initial view count (for advanced usage or importing legacy data).
     * Optional.
     */
    view_count?: number & tags.Type<"int32">;
  };

  /**
   * Request body type for updating an article. All fields are optional; only
   * supply those to be updated. Maps to shopping_mall_ai_backend_articles
   * entity.
   */
  export type IUpdate = {
    /**
     * Unique identifier of the channel this article is associated with.
     * Optional.
     */
    channel_id?: string & tags.Format<"uuid">;

    /** Title for the article (must be unique within the channel). Optional. */
    title?: string;

    /** Main content body for the article. Optional. */
    body?: string;

    /** Author's unique identifier. Optional. */
    author_id?: string & tags.Format<"uuid">;

    /** Article workflow status. Optional. */
    status?: string;

    /** Whether this is a system/official notice. Optional. */
    is_notice?: boolean;

    /** Whether this article is pinned for the channel. Optional. */
    pinned?: boolean;

    /** View count. Optional. */
    view_count?: number & tags.Type<"int32">;
  };
}
