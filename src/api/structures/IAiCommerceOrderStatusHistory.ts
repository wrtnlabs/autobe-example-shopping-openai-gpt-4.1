import { tags } from "typia";

/**
 * Represents a history/audit record of an order's status transition from one
 * state to another. Used for compliance, audit, support, and rollback. Bound to
 * ai_commerce_order_status_history as per ERD/Prisma specification. Contains
 * full workflow, actor, and timing context for each change in order lifecycle.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceOrderStatusHistory = {
  /**
   * Unique identifier for the order status history record
   * (ai_commerce_order_status_history.id).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the parent order for this status history record. Links to
   * ai_commerce_orders.id for referential integrity.
   */
  order_id: string & tags.Format<"uuid">;

  /**
   * User/Admin/Seller responsible for performing the status change.
   * References actor role/performance in ai_commerce_order_status_history.
   */
  actor_id: string & tags.Format<"uuid">;

  /**
   * Previous order status value prior to this transition. Used for audit,
   * support, or rollback use cases.
   */
  old_status: string;

  /**
   * New status of the order after this state transition. References business
   * process workflow state.
   */
  new_status: string;

  /**
   * Previous business/workflow state value for the order. Nullable per
   * schema.
   */
  old_business_status?: string | null | undefined;

  /**
   * Current business/workflow status for the order after transition. Null if
   * not present.
   */
  new_business_status?: string | null | undefined;

  /**
   * (Optional) Audit/comment/summary provided by actor justifying state
   * transition, escalation, or compliance finding. Null if not supplied.
   */
  note?: string | null | undefined;

  /**
   * Timestamp at which the status change event was recorded. References
   * ai_commerce_order_status_history.changed_at.
   */
  changed_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceOrderStatusHistory {
  /**
   * DTO for querying status history for a given order
   * (ai_commerce_order_status_history). Supports filtering, sorting, and
   * pagination, as defined by business/ERD schema.
   */
  export type IRequest = {
    /**
     * Unique identifier for the order whose status history is being
     * queried. Required for lookup. References
     * ai_commerce_order_status_history.order_id.
     */
    order_id: string & tags.Format<"uuid">;

    /**
     * (Optional) Actor (user/admin/seller) responsible for the status
     * change. Filters results if supplied.
     */
    actor_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * (Optional) Previous status to filter results by. Useful for audit or
     * state change queries.
     */
    old_status?: string | undefined;

    /**
     * (Optional) New status value after state transition. Filter for
     * matching new state.
     */
    new_status?: string | undefined;

    /**
     * (Optional) Lower bound (inclusive) for filtering status changes by
     * date/time. Supports auditing, paging, or dashboard queries.
     */
    changed_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Upper bound (inclusive) for filtering by status change
     * timestamp. Scrolls/searches window for results.
     */
    changed_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Page number (for pagination of large status history results).
     * Optional.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of results per page (pagination support). Optional;
     * default determined by system config.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Field name to sort the results by (e.g., 'changed_at'). Optional. */
    sort_by?: string | undefined;

    /**
     * Sort direction, either 'asc' or 'desc'. Optional; default may be
     * platform- or API-dependent.
     */
    sort_direction?: "asc" | "desc" | undefined;
  };
}
