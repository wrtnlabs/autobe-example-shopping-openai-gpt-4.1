import { tags } from "typia";

/**
 * Full article comment entity record with all fields. Used for detail view,
 * update, evidence and audit traces.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendArticleComment = {
  /** Unique identifier for the comment. */
  id: string & tags.Format<"uuid">;

  /** Reference to parent article id. */
  article_id: string & tags.Format<"uuid">;

  /** Optional parent comment (thread parent), null if root comment. */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /** Identifier for the comment author. */
  author_id: string & tags.Format<"uuid">;

  /** Full text content of the comment. */
  body: string;

  /** Whether the comment is secret/private. */
  is_secret: boolean;

  /** Publication/moderation state. */
  status: string;

  /** Datetime the comment was created. */
  created_at: string & tags.Format<"date-time">;

  /** Datetime the comment was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for logical deletion (null if not deleted). */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendArticleComment {
  /** Filter and search object for paginated article comment queries. */
  export type IRequest = {
    /** Page number for pagination. */
    page?: number & tags.Type<"int32">;

    /** Number of records per page. */
    limit?: number & tags.Type<"int32">;

    /** Sort order or field. */
    sort?: string;

    /** Filter by author (user/admin/seller) id. */
    author_id?: string & tags.Format<"uuid">;

    /** Filter by comment status (visible, hidden, pending, etc). */
    status?: string;

    /** Filter by secret/private comments. */
    is_secret?: boolean;

    /** Full-text search across comment body or relevant fields. */
    q?: string;

    /** Filter comments created on or after this ISO-8601 datetime. */
    created_from?: string & tags.Format<"date-time">;

    /** Filter comments created on or before this ISO-8601 datetime. */
    created_to?: string & tags.Format<"date-time">;
  };

  /**
   * Request body for creating a new article comment. All required fields must
   * be supplied; parent_id is used for reply/threading when applicable.
   */
  export type ICreate = {
    /** Parent article's uuid which this comment is posted under. */
    article_id: string & tags.Format<"uuid">;

    /** Optional parent comment/thread id for threaded discussions. */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** This comment's authorâ€”writing user/admin/seller id. */
    author_id: string & tags.Format<"uuid">;

    /** Comment content body, markdown or plain text accepted. */
    body: string;

    /** Whether comment is private/secret. Required. */
    is_secret: boolean;
  };

  /**
   * Request body type for updating an article comment. Only supply fields to
   * be updated.
   */
  export type IUpdate = {
    /** Optional parent comment id if changing threading structure. */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** New/updated comment content (markdown or string). */
    body?: string;

    /** Whether this comment is flagged secret/private. */
    is_secret?: boolean;

    /** Publication/moderation status (optional, backend controlled). */
    status?: string;
  };

  /** Summary object for a comment, used in page listings or summary UIs. */
  export type ISummary = {
    /** Unique identifier for the comment. */
    id: string & tags.Format<"uuid">;

    /** Identifier of the author. */
    author_id: string & tags.Format<"uuid">;

    /** Shortened comment body or excerpt suitable for summary display. */
    body: string;

    /** Indicates whether the comment is private/secret (user-restricted). */
    is_secret: boolean;

    /** Current moderation/publication status for this comment. */
    status: string;

    /** Datetime when the comment was created. */
    created_at: string & tags.Format<"date-time">;

    /** Optional parent comment thread id if threaded. */
    parent_id?: (string & tags.Format<"uuid">) | null;
  };
}
