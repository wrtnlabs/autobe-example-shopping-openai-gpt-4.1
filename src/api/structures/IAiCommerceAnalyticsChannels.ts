import { tags } from "typia";

/**
 * Aggregated channel analytics summary (ai_commerce_analytics_channels), as
 * used in admin dashboards and reporting. Includes key KPIs and snapshot period
 * information.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceAnalyticsChannels = {
  /**
   * Unique identifier for the analytics summary record, referencing
   * ai_commerce_analytics_channels.id.
   */
  id: string & tags.Format<"uuid">;

  /** Sales channel unique identifier, referencing ai_commerce_channels.id. */
  ai_commerce_channel_id: string & tags.Format<"uuid">;

  /**
   * Analytics snapshot/aggregation date (ISO 8601, typically midnight of
   * period).
   */
  stat_date: string & tags.Format<"date-time">;

  /**
   * Total number of orders placed on the channel for the analytics/stat
   * period.
   */
  total_orders: number & tags.Type<"int32">;

  /** Total sales amount for the reporting window/channel. */
  total_sales: number;

  /** Total count of unique buyers in the reporting window/channel. */
  total_buyers: number & tags.Type<"int32">;

  /** Timestamp of analytics record creation (ISO 8601). */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceAnalyticsChannels {
  /**
   * Request filter and pagination options for analytics channel summary
   * search, supporting date range and KPI constraints.
   */
  export type IRequest = {
    /**
     * Inclusive start date for analytics aggregation period filter (ISO
     * 8601). Optional.
     */
    stat_date_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Inclusive end date for analytics aggregation period filter (ISO
     * 8601). Optional.
     */
    stat_date_to?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by sales channel unique identifier. Optional. */
    ai_commerce_channel_id?: (string & tags.Format<"uuid">) | undefined;

    /** Minimum value for total_orders metric (filter). Optional. */
    min_total_orders?: (number & tags.Type<"int32">) | undefined;

    /** Maximum value for total_orders metric (filter). Optional. */
    max_total_orders?: (number & tags.Type<"int32">) | undefined;

    /** Minimum value for total_sales metric (filter). Optional. */
    min_total_sales?: number | undefined;

    /** Maximum value for total_sales metric (filter). Optional. */
    max_total_sales?: number | undefined;

    /** Minimum value for total_buyers metric (filter). Optional. */
    min_total_buyers?: (number & tags.Type<"int32">) | undefined;

    /** Maximum value for total_buyers metric (filter). Optional. */
    max_total_buyers?: (number & tags.Type<"int32">) | undefined;

    /** Field for sorting the results. Optional. */
    sort_by?:
      | "stat_date"
      | "total_orders"
      | "total_sales"
      | "total_buyers"
      | undefined;

    /** Sort direction (ascending or descending, default desc). Optional. */
    sort_direction?: "asc" | "desc" | undefined;

    /** Pagination: page number for result set. Optional. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Pagination: page size or limit per response. Optional. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };
}
