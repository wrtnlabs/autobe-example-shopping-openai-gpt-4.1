import { tags } from "typia";

/**
 * A single cart item entity in the shopping mall backend system. Captures
 * evidence for each addition to the cart with full auditability.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCartItem = {
  /** Globally unique identifier for the cart item. Primary key. */
  id: string & tags.Format<"uuid">;

  /** ID of the cart (shopping_mall_ai_backend_carts) this item belongs to. */
  shopping_mall_ai_backend_cart_id: string & tags.Format<"uuid">;

  /**
   * References the product snapshot at the time item was added to cart.
   * Ensures evidence for order/inventory.
   */
  shopping_mall_ai_backend_product_snapshot_id: string & tags.Format<"uuid">;

  /** Number of units of the product being added to cart. Must be >= 1. */
  quantity: number & tags.Type<"int32"> & tags.Minimum<1>;

  /**
   * Aggregate code for the option/variant selection of the product for this
   * cart item.
   */
  option_code: string;

  /** Selected product bundle, if any. Null if not used. */
  bundle_code?: string | null;

  /** Customer's note for this cart item, e.g., gift message. Optional. */
  note?: string | null;

  /** Timestamp when the cart item was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the cart item was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp when the cart item was logically deleted. Null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendCartItem {
  /**
   * Request payload supporting pagination, search, and filter for cart items
   * listing APIs.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null;

    /** Max items per page. */
    limit?: (number & tags.Type<"int32">) | null;

    /** Filter for cart items with quantity at least this value. */
    quantity_min?: number & tags.Type<"int32">;

    /** Filter for cart items with quantity at most this value. */
    quantity_max?: number & tags.Type<"int32">;

    /** Filter for specific bundle code in cart items. */
    bundle_code?: string;

    /** Search on note field. */
    note_search?: string;

    /** Earliest creation date for filtering. */
    created_at_min?: string & tags.Format<"date-time">;

    /** Latest creation date for filtering. */
    created_at_max?: string & tags.Format<"date-time">;

    /** Key field to sort by (e.g. created_at, quantity). */
    sort_field?: string;

    /** Direction of sorting: 'asc' or 'desc'. */
    sort_order?: "asc" | "desc";
  };

  /** Request body for adding a cart item to a user's cart in the system. */
  export type ICreate = {
    /** The cart ID to which this item is being added. */
    shopping_mall_ai_backend_cart_id: string & tags.Format<"uuid">;

    /**
     * References the product snapshot at the moment of cart item creation.
     * Ensures item matches product at the time.
     */
    shopping_mall_ai_backend_product_snapshot_id: string & tags.Format<"uuid">;

    /** Amount of product being added. Must be at least 1. */
    quantity: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Aggregate option/variant code for item selection. */
    option_code: string;

    /** Bundle code if a bundle is selected, null otherwise. */
    bundle_code?: string | null;

    /** Optional note for this cart item, e.g., customer instructions. */
    note?: string | null;
  };

  /**
   * Fields that may be updated for a cart item after initial creation. Used
   * for partial modification, e.g., changing quantity or note.
   */
  export type IUpdate = {
    /** Optional new quantity for the item. Must be at least 1 if provided. */
    quantity?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Optional new aggregate option/variant code, if changing selection. */
    option_code?: string;

    /**
     * Optional new bundle code if selection is changed or to nullify
     * bundle.
     */
    bundle_code?: string | null;

    /** Optional note update for the cart item. */
    note?: string | null;
  };
}
