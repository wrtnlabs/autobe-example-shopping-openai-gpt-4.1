import { tags } from "typia";

import { IShoppingMallProduct } from "./IShoppingMallProduct";
import { IShoppingMallAttachment } from "./IShoppingMallAttachment";

/**
 * Represents the association between a product and its attached file/resource.
 * Maps directly to shopping_mall_product_attachment_links in the schema. Used
 * to specify and order images, files, or media attached to a product for
 * gallery, main image, documents, or other business purposes. Relationship
 * fields (product, attachment) can embed referenced objects, assisting in DTO
 * expansion. Position and purpose support UI/logic for file ordering and
 * grouping.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallProductAttachmentLink = {
  /** Primary Key. Unique identifier of this product attachment link row. */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign Key. Product for which this file is attached. See
   * shopping_mall_products.id.
   */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /**
   * Foreign Key. Linked attachment file reference
   * (shopping_mall_attachments.id).
   */
  attachment_id: string & tags.Format<"uuid">;

  /**
   * Business purpose for this attachment (e.g., main_image, gallery,
   * spec_sheet). Used for UIs and logic.
   */
  purpose: string;

  /** Order for displaying attachments of the same purpose/category. */
  position: number & tags.Type<"int32">;

  /** Related product entity (embedded/ref). */
  product?: IShoppingMallProduct | undefined;

  /** Related attachment entity (embedded/ref). */
  attachment?: IShoppingMallAttachment | undefined;
};
export namespace IShoppingMallProductAttachmentLink {
  /**
   * Request body for listing/searching product attachment links. Supports
   * filtering by product, usage context/purpose, specific attachment,
   * position, and paginated results. Used for endpoints returning lists of
   * product-attached files/images and compatible with pagination and sort.
   */
  export type IRequest = {
    /**
     * Unique identifier (UUID) of the shopping mall product whose
     * attachments are to be listed. Used to filter attachment links for a
     * specific product.
     */
    productId: string & tags.Format<"uuid">;

    /**
     * (Optional) If specified, filters results to attachment links with
     * this purpose. E.g. 'main_image', 'gallery', 'spec_sheet', etc.
     */
    purpose?: string | undefined;

    /**
     * (Optional) If specified, filters results to only attachment links at
     * this display position/order.
     */
    position?: (number & tags.Type<"int32">) | undefined;

    /**
     * (Optional) If specified, filters to only attachment links referencing
     * this attachment UUID.
     */
    attachmentId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * (Optional) Sort order for returned list. Accepts 'created_at' or
     * 'position'—default is 'position' if unspecified.
     */
    sort?: "created_at" | "position" | undefined;

    /**
     * (Optional) Sort direction. 'asc' for ascending or 'desc' for
     * descending—default is 'asc'.
     */
    order?: "asc" | "desc" | undefined;

    /**
     * (Optional) Page number for pagination. Used to fetch a specific page
     * of results. Default is 1 if omitted.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * (Optional) Page size for pagination. Controls maximum number of
     * results per page. Default is usually 20 or 50; maximum 100 entries
     * per page.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Request body for creating/attaching a new file link to a product.
   * Associates an attachment (previously uploaded file) to a product for
   * presentation, gallery, document storage, or business logic. Requires
   * reference to file (attachment_id), intended purpose, UI ordering
   * (position), and currently active product (productId, if not supplied via
   * URI/route).
   */
  export type ICreate = {
    /**
     * Attachment file reference to link (shopping_mall_attachments.id).
     * Must point to existing uploaded file/attachment.
     */
    attachment_id: string & tags.Format<"uuid">;

    /**
     * Business usage for this attachment (e.g., main_image, gallery,
     * spec_sheet). Dictates the UI grouping, file context, and role.
     */
    purpose: string;

    /**
     * Order for displaying this attachment within its group/purpose.
     * 0-based integer; unique per (product, purpose).
     */
    position: number & tags.Type<"int32">;

    /**
     * ID of the product to which this attachment will be linked. Only
     * needed if URI does not supply it in route.
     */
    productId?: (string & tags.Format<"uuid">) | undefined;
  };

  /**
   * Summary details for file attachment links associated with a shopping mall
   * product. Used in product galleries, content media, downloadable docs, and
   * evidence flows. Derived solely from columns in the
   * shopping_mall_product_attachment_links Prisma table and related file
   * metadata via business context. Contains only quick-reference and catalog
   * info needed for UI thumbnail lists, download links, and rich content
   * assembly—excludes substantial audit, heavy file, or relational data.
   * Enforces audit consistency.
   *
   * Properties reference the product-attachment link, role/purpose, order,
   * and attachment id for downstream use. Ensures no heavy file or attachment
   * internals are mingled in summary display, for performance and privacy
   * reasons.
   */
  export type ISummary = {
    /**
     * Primary Key. Unique identifier for the attachment link
     * (shopping_mall_product_attachment_links.id). Used to reference and
     * manage specific file associations with a product.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Attachment file reference for display/download operations. Links to
     * the master attachment metadata and file versioning. Corresponds to
     * shopping_mall_product_attachment_links.attachment_id.
     */
    attachment_id: string & tags.Format<"uuid">;

    /**
     * Attachment usage context for this link (e.g., main_image, gallery,
     * spec_sheet). Business string—not formal enum—per
     * shopping_mall_product_attachment_links.purpose. Used for UI slotting
     * and purpose-driven filtering.
     */
    purpose: string;

    /**
     * Order for displaying attachments of the same purpose/category, per
     * shopping_mall_product_attachment_links.position. Used to sort
     * gallery/media asset collections.
     */
    position: number & tags.Type<"int32">;
  };
}
