import { tags } from "typia";

/**
 * Attachment version entity describing all file metadata, audit, and download
 * context for a single versioned file in shopping_mall_attachment_versions.
 * Includes business logic for compliance, rollback, and evidence.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAttachmentVersion = {
  /**
   * Primary key of this attachment version. System-generated UUID referencing
   * the versioned file record. Required for evidence chain, download, or
   * audit referencing.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key referencing the master Attachment entity to which this
   * version is linked. Must match a shopping_mall_attachments.id.
   */
  shopping_mall_attachment_id: string & tags.Format<"uuid">;

  /**
   * Version number for the attachment, 1-based, unique within an attachment.
   * Increments by 1 for each new uploaded version. Used for audit versioning,
   * download, and rollback purposes. Does not reset or skip numbers.
   */
  version_number: number & tags.Type<"int32">;

  /**
   * UUID referencing the user (customer, seller, admin, or system) who
   * uploaded this version. Provides audit/context for uploads, evidence, and
   * traceability.
   */
  uploader_id: string & tags.Format<"uuid">;

  /**
   * Filename at time of upload for this version. Includes extension, reflects
   * what user provided or system assigned at versioning. Example:
   * '20240210_tradesheet_final_v2.pdf'.
   */
  filename: string;

  /**
   * File extension for this version, beginning with a dot (e.g., '.pdf').
   * Used for UX and validation. Must match filename extension/content type.
   */
  file_extension: string;

  /**
   * IANA-standard MIME type for this file version (e.g., 'application/pdf',
   * 'image/png'). Used by file downloaders, preview modules, audit, and for
   * permitted business logic checks.
   */
  mime_type: string;

  /**
   * Exact size of this version in bytes. Unchanged for entire lifetime of
   * this version. Must match actual blob size stored by system. Used for
   * storage quota, audit, compliance enforcement. Must be non-negative.
   */
  size_bytes: number & tags.Type<"int32">;

  /**
   * Fully qualified URL (may reference CDN, internal/object storage, or
   * external resource) for downloading or previewing this version of the
   * file. URL must comply with security rules and not leak
   * unpublished/forbidden files. May include signed tokens or be
   * time-limited.
   */
  server_url: string;

  /**
   * MD5 hex digest of file as uploaded for this version. Used to ensure file
   * integrity, enable quick duplicate/match audit searches, and for certain
   * business compliance policies (e.g., known-evidence rules).
   */
  hash_md5: string;

  /**
   * Timestamp (ISO8601 UTC) when this version was uploaded. Immutable,
   * required for full audit evidence. Used for chain-of-custody and
   * compliance.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp for this file version. Null if not deleted,
   * otherwise set to the time when version was removed per
   * compliance/policy/dispute. May only be set by admin users. Required for
   * rollback/evidence logic.
   */
  deleted_at: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAttachmentVersion {
  /**
   * Filter/search/query and pagination parameters for listing or searching
   * versions of a specific attachment in shopping_mall_attachment_versions.
   */
  export type IRequest = {
    /**
     * For filtering: attachment ID to which the version(s) belong. Used for
     * querying all versions of a single attachment.
     */
    attachmentId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by filename at version upload time. This string may be matched
     * exactly or by fuzzy search as defined by the backend. Use to search
     * for historic versions by name.
     */
    filename?: string | undefined;

    /**
     * Filter attachment versions based on their file extension (e.g.,
     * '.pdf', '.jpg'). Only versions with a matching extension value will
     * be returned in query results.
     */
    file_extension?: string | undefined;

    /**
     * Mime-type (e.g., 'application/pdf') filter. Use this for narrowing to
     * versions with specific content types, as needed for evidence or
     * business audit/reporting.
     */
    mime_type?: string | undefined;

    /**
     * Filter by the UUID of the user, customer, seller, or admin who
     * performed the upload. Helpful in large organizations to track or
     * scope responsibility/audit chain for version updates.
     */
    uploader_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Search or lookup by cryptographic MD5 hash for validation,
     * deduplication, or integrity checking. Used to ensure content
     * identity, or for cross-checking with external systems/evidence
     * files.
     */
    hash_md5?: string | undefined;

    /**
     * Optional timestamp or range filter for version creation time
     * (ISO8601, UTC). Client or backend logic should support filtering
     * multiple creations in a time window if needed.
     */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter to include only deleted versions or only active versions. A
     * value of null means only versions not deleted will be considered;
     * otherwise filter by specific deleted timestamp.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Sort key for paginated results. Must be one of the allowed field
     * names. Example: 'created_at'.
     */
    sort?:
      | "created_at"
      | "filename"
      | "file_extension"
      | "mime_type"
      | "uploader_id"
      | undefined;

    /**
     * Result order for sort parameter. 'asc' for ascending, 'desc' for
     * descending. Example: 'desc'.
     */
    order?: "asc" | "desc" | undefined;

    /** Pagination: which page of results to return (1-based index). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Pagination: maximum number of results to return per page. Default and
     * maximum may be enforced by provider.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Payload for uploading a new attachment version
   * (shopping_mall_attachment_versions). File content is referenced by upload
   * URL; all known business metadata and evidence requirements must be
   * supplied. Only fields allowed by policy and business rules.
   */
  export type ICreate = {
    /**
     * String URL/reference to uploaded file in storage server, CDN, or
     * object store. Must point to a successful upload location (not a
     * browser temp URI).
     *
     * Used to supply the file content for this version. The backend will
     * move/store/copy as appropriate for evidence policy. Links may be
     * time-limited or internal to business infrastructure.
     */
    server_url: string;

    /**
     * User- or system-supplied filename for this version, including
     * required extension. Used for user downloads, evidence trails, and
     * business context/meta reporting. Must match business naming policy
     * and extension requirements (see file_extension).
     */
    filename: string;

    /**
     * Extension of the new version's file, starting with a dot (e.g.,
     * '.pdf'). Must reflect actual content for business and compliance
     * rules. Used for UX and server-side file filtering/matching. Example:
     * '.csv'.
     */
    file_extension: string;

    /**
     * IANA-standard MIME type of the new version ('application/pdf',
     * 'image/jpeg', etc.). Must match file content and backend validation
     * rules. Used for analytic and compliance reporting.
     */
    mime_type: string;

    /**
     * Exact size in bytes of the file as uploaded. Must match actual
     * uploaded content size and facilitate business logic for file size
     * quota and sorting. Must be non-negative.
     */
    size_bytes: number & tags.Type<"int32">;

    /**
     * Hex-encoded, lowercase MD5 digest of uploaded file for this version.
     * Used to guarantee evidentiary chain, audit, and enable rapid
     * deduplication or identification. Must match server-calculated hash or
     * will fail validation.
     */
    hash_md5: string;

    /**
     * UUID ID of the user, seller, admin, or system who performed the
     * upload. Used for tracking, audit, and business reporting. Must
     * resolve to an authorized actor for this version event.
     */
    uploader_id: string & tags.Format<"uuid">;
  };

  /**
   * Schema for updating metadata of an existing attachment version in the
   * shopping mall system. Only editable properties such as filename,
   * file_extension, mime_type, or description should be included. Does not
   * allow changing parent attachment or file content. Used by admin, original
   * uploader, or authorized business role; all changes are audited and linked
   * to compliance evidence. Refer to shopping_mall_attachment_versions Prisma
   * table for allowed fields.
   */
  export type IUpdate = {
    /**
     * The new filename to assign for this version. May include extension;
     * actual file content remains unchanged. Used for correcting or
     * updating display name in UI and audit.
     */
    filename?: string | undefined;

    /**
     * Updated extension for the file (e.g., '.jpg', '.pdf'). Serves
     * business, compliance, and filtering needs; should reflect actual file
     * extension or desired business category.
     */
    file_extension?: string | undefined;

    /**
     * The new MIME type for the file version. Must accurately describe the
     * file's format (e.g., 'image/png', 'application/pdf'). Used for
     * compliance, analytics, and downstream access control.
     */
    mime_type?: string | undefined;

    /**
     * Optional: Updated human-readable note or business context for this
     * version. Displayed in file managers and audit logs. Can provide
     * context for changes, compliance, or version tracking.
     */
    description?: string | undefined;
  };
}
