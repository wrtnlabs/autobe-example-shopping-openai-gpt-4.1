import { tags } from "typia";

/**
 * A snapshot of a payment's state, captured at an audit-relevant event (such as
 * requested, confirmed, cancelled, refunded). Used for legal traceability,
 * dispute reconstruction, and compliance with financial evidence requirements.
 * Immutable after creation. Often referenced by compliance and analytics
 * modules. Maps directly to the shopping_mall_payment_snapshots table. Includes
 * snapshot details per business and audit rules.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallPaymentSnapshot = {
  /**
   * Primary key for the payment snapshot record. Uniquely identifies one
   * immutable, point-in-time snapshot of a payment in the system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the source payment (shopping_mall_payments.id) for which
   * this snapshot was captured. Enables resolution of current vs historic
   * state of a payment object.
   */
  shopping_mall_payment_id: string & tags.Format<"uuid">;

  /**
   * Serialized, immutable snapshot of the payment state at this audit event.
   * Contains all business properties (amount, status, payment type,
   * references, timestamps, etc.) as of the snapshot time, typically in JSON
   * format for easy audit/rollback.
   */
  snapshot_data: string;

  /**
   * Timestamp (ISO 8601, UTC) when the payment snapshot was created.
   * Indicates exact moment of evidence capture and is used for audit
   * ordering.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallPaymentSnapshot {
  /**
   * Request parameters for searching, paginating, or filtering payment
   * snapshot records in shopping_mall_payment_snapshots. Allows querying by
   * payment ID, date range, paging, sorting, etc.
   */
  export type IRequest = {
    /** The ID of the payment whose snapshots should be listed. */
    shopping_mall_payment_id: string & tags.Format<"uuid">;

    /**
     * Only include snapshots created_at after this (inclusive) time
     * (ISO-8601 UTC).
     */
    created_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Only include snapshots created_at before this (inclusive) time
     * (ISO-8601 UTC).
     */
    created_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** How many records to fetch per page. Default 50. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Page number, starting from 1. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Sort by a supported field (created_at or id). */
    sort_by?: "created_at" | "id" | undefined;

    /** Sort order (ascending or descending). */
    sort_order?: "asc" | "desc" | undefined;
  };
}
