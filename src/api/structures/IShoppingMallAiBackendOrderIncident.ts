import { tags } from "typia";

/**
 * Single order incident record with all context and evidence fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendOrderIncident = {
  /** Unique identifier (UUID) for the incident record. */
  id: string;

  /** Order UUID involved in this incident. */
  shopping_mall_ai_backend_order_id: string;

  /**
   * Type/category of the incident: e.g., fraud, dispute, system_error,
   * compliance, evidence, etc.
   */
  incident_type: string;

  /**
   * Extended context/explanation (business or system annotation), may be
   * serialized data.
   */
  context?: string | null;

  /** Datetime for the incident event (ISO 8601). */
  event_at: string & tags.Format<"date-time">;

  /**
   * Incident status: open, closed, resolved, investigating, reversed, etc.
   * (optional, may not exist for legacy data).
   */
  status?: string;

  /** Audit record created at (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Audit record updated at (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /** When the incident was marked as deleted (soft). */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendOrderIncident {
  /**
   * Search/filter input for order incidents. Used for compliance, fraud, and
   * incident dashboards.
   */
  export type IRequest = {
    /**
     * Type of incident, such as fraud, dispute, compliance, evidence,
     * error.
     */
    incident_type?: string;

    /**
     * Filter by incident status. E.g., open, investigating, closed,
     * resolved, reversed, pending.
     */
    status?: string;

    /** (Optional) Filter by incident's customer UUID. */
    customer_id?: string;

    /** (Optional) Filter by incident's seller UUID. */
    seller_id?: string;

    /** (Optional) Filter incidents after this ISO 8601 date. */
    from?: string;

    /** (Optional) Filter to incidents before this ISO 8601 date. */
    to?: string;

    /** Page number for pagination, starts at 1. */
    page?: number & tags.Type<"int32">;

    /** Max records per page (pagination), recommend max 100. */
    limit?: number & tags.Type<"int32">;
  };
}
