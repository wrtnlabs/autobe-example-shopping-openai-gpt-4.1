import { tags } from "typia";

/**
 * Deposit (cash or cash-like) ledger business entity, holding financial status,
 * audit trail fields, and business evidence. Uniquely identified per
 * customer/seller for traceability and compliance. All fields required except
 * soft delete (deleted_at).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendDeposit = {
  /** Deposit ledger unique business identifier (UUID primary key). */
  id: string & tags.Format<"uuid">;

  /** If present, deposit ledger is for customer (UUID foreign key). */
  shopping_mall_ai_backend_customer_id?: (string & tags.Format<"uuid">) | null;

  /** If present, deposit ledger is for seller (UUID foreign key). */
  shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

  /** All-time sum of credited amounts for this ledger account. */
  total_accrued: number;

  /** Current balance available to account holder for use/withdrawal. */
  usable_balance: number;

  /** Cumulative sum of expired (not available) value. */
  expired_balance: number;

  /**
   * Balance temporarily blocked/frozen/unusable due to
   * incident/withdrawal/fraud (not included in usable_balance).
   */
  on_hold_balance: number;

  /** UTC timestamp when the account ledger was created. */
  created_at: string & tags.Format<"date-time">;

  /** UTC timestamp ledger was last updated (for audit). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp marking ledger as removed (never physically
   * deleted).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendDeposit {
  /**
   * Advanced search and filtering logic for deposit ledger index queries.
   * Allows balancing search and auditing usage scenarios for
   * finance/operations UIs.
   */
  export type IRequest = {
    /**
     * Page number for pagination (optional; null returns first page or
     * default).
     */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Number of items per page (for pagination control; server default if
     * not specified).
     */
    limit?: (number & tags.Type<"int32">) | null;

    /** Filter search to only the given customer ID (UUID). */
    customer_id?: (string & tags.Format<"uuid">) | null;

    /** Search only deposit ledgers belonging to this seller ID (UUID). */
    seller_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Minimum usable balance to include in results (nullable; for balance
     * range search).
     */
    min_usable_balance?: number | null;

    /**
     * Maximum usable balance to include in results (nullable; for range
     * filtering).
     */
    max_usable_balance?: number | null;

    /**
     * ISO8601 timestamp to filter from this creation date (inclusive, UTC
     * we recommend).
     */
    created_from?: (string & tags.Format<"date-time">) | null;

    /** ISO8601 timestamp to filter results up to (inclusive, UTC). */
    created_to?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Summarized information about a deposit ledger (customer/seller) for
   * paginated reporting.
   */
  export type ISummary = {
    /** Deposit ledger unique ID. */
    id: string & tags.Format<"uuid">;

    /** Owner customer ID (nullable if not customer type). */
    shopping_mall_ai_backend_customer_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /** Owner seller ID (nullable if not seller type). */
    shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

    /** Cumulative credited amount (lifetime). */
    total_accrued: number;

    /** Current balance available to account holder. */
    usable_balance: number;

    /** Sum of expired balance for evidence/tracking. */
    expired_balance: number;

    /** Temporary hold (not available) due to freeze, withdrawal, etc. */
    on_hold_balance: number;

    /** Ledger account creation date/time UTC. */
    created_at: string & tags.Format<"date-time">;

    /** Most recent timestamp ledger was updated (for evidence/audit). */
    updated_at: string & tags.Format<"date-time">;

    /** Soft-deleted timestamp, if logically removed (else null). */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Create-request for a deposit (cash) ledger entity. Used only by
   * authorized admin/finance roles for onboarding or legacy migration
   * scenarios.
   */
  export type ICreate = {
    /**
     * Optional customer UUID to bind deposit ledger to customer (nullable
     * if seller).
     */
    shopping_mall_ai_backend_customer_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /**
     * Optional seller UUID to bind deposit ledger to seller (nullable if
     * customer type only).
     */
    shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

    /** Initial sum for account; defaults to zero if not set explicitly. */
    total_accrued?: number | null;

    /** Initial available balance, defaults to 0 if omitted. */
    usable_balance?: number | null;

    /** Sum of expired currency at creation, defaults to zero. */
    expired_balance?: number | null;

    /** Initial on-hold amount, defaults to zero. */
    on_hold_balance?: number | null;
  };

  /**
   * Update-request for a deposit ledger entry. Used only in admin/system
   * flows for correcting business or migration defects.
   */
  export type IUpdate = {
    /**
     * Update this to transfer deposit to a different customer ID (rare,
     * restricted to admin/system).
     */
    shopping_mall_ai_backend_customer_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /**
     * Update this to transfer deposit to a different seller ID (rare,
     * restricted to admin/system).
     */
    shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

    /** Correct cumulative credit (for admin/system-correction only). */
    total_accrued?: number | null;

    /**
     * Update usable balance (for admin/system correction, subject to
     * business rules).
     */
    usable_balance?: number | null;

    /** Adjust expired balance (admin/system-correction only). */
    expired_balance?: number | null;

    /** Update on-hold amount (admin/system correction only). */
    on_hold_balance?: number | null;
  };
}
