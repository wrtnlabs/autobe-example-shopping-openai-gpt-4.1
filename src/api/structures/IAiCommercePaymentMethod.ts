import { tags } from "typia";

/**
 * IAiCommercePaymentMethod: Represents a supported payment method on the
 * platform, mapped to ai_commerce_payment_methods table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommercePaymentMethod = {
  /** Unique identifier of the payment method. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique business code for the payment method (e.g., 'CREDIT_CARD',
   * 'VIRTUAL_ACCOUNT').
   */
  method_code: string;

  /** Human-readable name for the payment method. */
  display_name: string;

  /** Whether payment method is available for use. */
  is_active: boolean;

  /**
   * Optional configuration for payment gateways or advanced integrations. May
   * be JSON or URI.
   */
  configuration?: string | null | undefined;

  /** Created timestamp (ISO8601). */
  created_at: string & tags.Format<"date-time">;

  /** Last updated timestamp (ISO8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp. Null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommercePaymentMethod {
  /**
   * IAiCommercePaymentMethod.IRequest: Filtering and pagination options for
   * payment methods listing/search.
   */
  export type IRequest = {
    /** Filter by method_code (exact match). */
    method_code?: string | undefined;

    /** Filter by display name (partial match supported). */
    display_name?: string | undefined;

    /** Filter by active/inactive status. */
    is_active?: boolean | undefined;

    /** Filter: created_at >= this ISO8601 time. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter: created_at <= this ISO8601 time. */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Filter: updated_at >= this ISO8601 time. */
    updated_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter: updated_at <= this ISO8601 time. */
    updated_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Field to sort by (e.g., 'created_at', 'method_code'). */
    sortBy?: string | undefined;

    /** Sort direction: 'asc' or 'desc'. */
    sortDir?: "asc" | "desc" | undefined;
  };

  /**
   * IAiCommercePaymentMethod.ICreate: Request body for creating a new
   * platform payment method.
   */
  export type ICreate = {
    /** Unique code for the payment method to create. */
    method_code: string;

    /** Human-readable name to show buyers at selection. */
    display_name: string;

    /** (Optional) Whether the method is active immediately. */
    is_active?: boolean | undefined;

    /** (Optional) Configuration for the payment method; may be JSON or URI. */
    configuration?: string | null | undefined;
  };

  /**
   * IAiCommercePaymentMethod.IUpdate: Patch body for updating an existing
   * payment method.
   */
  export type IUpdate = {
    /** New display name for the payment method. */
    display_name?: string | undefined;

    /** Activate/deactivate this payment method. */
    is_active?: boolean | undefined;

    /**
     * Configuration update for gateway or integration; may be string or
     * null.
     */
    configuration?: string | null | undefined;
  };
}
