import { tags } from "typia";

/**
 * A request/response object representing a single seller dispute case as
 * defined in ai_commerce_seller_disputes. Contains type, data, status,
 * resolution notes, and audit timestamps. Used in administrative/legal
 * workflows for escalation, penalties, or dispute resolution.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceSellerDispute = {
  /**
   * Unique identifier (UUID) of the seller dispute.
   * ai_commerce_seller_disputes.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the seller profile involved in the dispute case.
   * ai_commerce_seller_disputes.seller_profile_id
   */
  seller_profile_id: string & tags.Format<"uuid">;

  /**
   * Type of dispute/penalty/escalation (e.g., policy_violation,
   * fraud_investigation, payout_hold).
   * ai_commerce_seller_disputes.dispute_type
   */
  dispute_type: string;

  /**
   * JSON data containing dispute details, context, and evidence.
   * ai_commerce_seller_disputes.dispute_data
   */
  dispute_data: string;

  /**
   * Current status in the dispute workflow (e.g., open, in_progress,
   * resolved, closed, escalated, withdrawn).
   * ai_commerce_seller_disputes.status
   */
  status: string;

  /**
   * (Optional) Platform/admin notes on process, outcome, or decision-making.
   * ai_commerce_seller_disputes.resolution_notes
   */
  resolution_notes?: string | null | undefined;

  /**
   * Dispute creation timestamp (ISO 8601).
   * ai_commerce_seller_disputes.created_at
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for this dispute (ISO 8601).
   * ai_commerce_seller_disputes.updated_at
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceSellerDispute {
  /**
   * Request object for searching/discovering seller disputes
   * (ai_commerce_seller_disputes). Used as body in PATCH/POST endpoints. All
   * fields are optional filters/pagination/sort criteria.
   */
  export type IRequest = {
    /**
     * (Optional) Filter – only disputes for the given seller profile.
     * ai_commerce_seller_disputes.seller_profile_id
     */
    seller_profile_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * (Optional) Filter by status (e.g., open, resolved, closed,
     * escalated). ai_commerce_seller_disputes.status
     */
    status?: string | undefined;

    /**
     * (Optional) Filter by dispute type (e.g., penalty, policy_violation,
     * fraud_investigation, payout_hold).
     * ai_commerce_seller_disputes.dispute_type
     */
    dispute_type?: string | undefined;

    /**
     * (Optional) Filter – include disputes created at/after this ISO 8601
     * date. Not persisted in the table, used for query filtering only.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Filter – include disputes created at/before this ISO 8601
     * date. Not persisted in the table, used for query filtering only.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** (Optional) Page number for pagination (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** (Optional) Page size (number of records per page). */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * (Optional) Sort order, e.g., '-created_at' for descending by creation
     * timestamp. Implementation-dependent.
     */
    sort?: string | undefined;
  };

  /**
   * Schema for creating a new seller dispute. All required fields (e.g.,
   * seller_profile_id, dispute_type, dispute_data, status, created_at) must
   * be provided. Optional audit fields (updated_at, resolution_notes) are
   * included for completeness.
   */
  export type ICreate = {
    /**
     * The unique identifier of the seller profile this dispute is related
     * to.
     */
    seller_profile_id: string & tags.Format<"uuid">;

    /**
     * Indicates the type of dispute (e.g., 'policy_violation',
     * 'fraud_investigation', 'payout_hold').
     */
    dispute_type: string;

    /**
     * JSON string containing detailed/structured information and evidence
     * for this dispute.
     */
    dispute_data: string;

    /**
     * The workflow state for this dispute ('open', 'in_progress',
     * 'resolved', etc).
     */
    status: string;

    /** Timestamp for dispute creation. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp for the last update to the record. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Free-form notes or summary on how the dispute was resolved; nullable. */
    resolution_notes?: string | null | undefined;
  };

  /**
   * Schema for updating an existing seller dispute. All fields are optional
   * and can be supplied as needed; at least one should be present per
   * business logic.
   */
  export type IUpdate = {
    /**
     * (optional) New type of the dispute, if being corrected or
     * reclassified.
     */
    dispute_type?: string | undefined;

    /** (optional) Updated JSON data/evidence for the dispute. */
    dispute_data?: string | undefined;

    /** (optional) Updated workflow status for the dispute. */
    status?: string | undefined;

    /** (optional) Updated resolution note or closure reason. */
    resolution_notes?: string | null | undefined;

    /** (optional) Timestamp for the update/modification. */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary of key fields for a seller dispute (ai_commerce_seller_disputes).
   *
   * Used in dashboards, dispute resolution lists, and for compliance
   * reporting.
   */
  export type ISummary = {
    /**
     * Unique identifier for the seller dispute record (primary key @id in
     * ai_commerce_seller_disputes).
     */
    id: string & tags.Format<"uuid">;

    /** Reference to the seller profile involved in this dispute. */
    seller_profile_id: string & tags.Format<"uuid">;

    /**
     * Type of dispute or penalty/escalation (e.g., 'policy_violation',
     * 'fraud_investigation', 'payout_hold').
     */
    dispute_type: string;

    /**
     * Current workflow status of the dispute (e.g., 'open', 'in_progress',
     * 'resolved', 'closed', 'escalated', 'withdrawn').
     */
    status: string;

    /** Timestamp when the dispute was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp of the last update to this dispute record. */
    updated_at: string & tags.Format<"date-time">;
  };
}
