import { tags } from "typia";

/**
 * Channel setting entity associated with an AI commerce channel. Maps directly
 * to ai_commerce_channel_settings in the database. Stores per-channel
 * configuration and advanced business metadata for dynamic system
 * configuration.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceChannelSetting = {
  /**
   * Primary key, unique per channel setting row. Used systemwide for edit,
   * update, and traceability.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key: the parent channel to which this setting belongs. Must match
   * a valid IAiCommerceChannel.id.
   */
  ai_commerce_channel_id: string & tags.Format<"uuid">;

  /**
   * The configuration key for this setting (e.g., 'theme_color',
   * 'feature_discount_enabled'). Unique within the channel.
   */
  key: string;

  /**
   * The setting value, which may be text, a serialized object/JSON, or
   * numeric string.
   */
  value: string;

  /**
   * Timestamp of setting creation, in ISO 8601 format. Populated
   * automatically.
   */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp. Changes in value or key are reflected here. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp (null if active, set if logically deleted). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceChannelSetting {
  /**
   * Request body schema for searching/paginating channel settings. Supports
   * advanced filtering by configuration key, value, business status, paging,
   * and sort order. Used in administrative channel settings dashboards and
   * analytics.
   */
  export type IRequest = {
    /**
     * (Optional) Filter settings by configuration key name (supports
     * partial match).
     */
    key?: string | undefined;

    /**
     * (Optional) Filter settings by their value (supports partial match,
     * can be serialized blobs).
     */
    value?: string | undefined;

    /**
     * (Optional) Business status of the setting for filtering (such as
     * 'active', 'archived').
     */
    status?: string | undefined;

    /**
     * (Optional) Sort criteria for ordering (e.g., 'created_at desc', 'key
     * asc').
     */
    sort?: string | undefined;

    /**
     * (Optional) Paging page number (1-based). Returns corresponding slice
     * of the settings list. Must be a positive integer if set.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * (Optional) Maximum number of results per page. Used in conjunction
     * with 'page' for pagination. Must be a positive integer if set.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Schema for creating a new configuration setting for a channel. 'key' must
   * be unique for the given channel. 'value' is the configuration content.
   */
  export type ICreate = {
    /**
     * The configuration key name (e.g., 'feature_discount_enabled',
     * 'theme_color'). Must be unique within the channel.
     */
    key: string;

    /**
     * The value for configuration key. Can be text, URI, or JSON-serialized
     * settings (depending on business logic).
     */
    value: string;
  };

  /**
   * Schema for updating an existing configuration setting. At least one of
   * 'key' or 'value' should be provided.
   */
  export type IUpdate = {
    /** Optionally update the configuration key. */
    key?: string | undefined;

    /** Optionally update the configuration value. */
    value?: string | undefined;
  };
}
