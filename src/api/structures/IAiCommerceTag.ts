import { tags } from "typia";

/**
 * Tag entity for product/discovery/analytics modules in aiCommerce. Contains
 * moderation status, display label, timestamps, and context. Primary business
 * key: name (unique); moderation key: status.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceTag = {
  /** Primary key; UUID of the tag entity. */
  id: string;

  /**
   * Tag label (alphanumeric, globally unique, used in search/discovery
   * modules).
   */
  name: string;

  /** Optional business/contextual description for moderation and analytics. */
  description?: string | undefined;

  /**
   * Status string (enum: active, under_review, suspended, deleted), used for
   * platform moderation.
   */
  status: string;

  /** Tag creation timestamp (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Tag last update timestamp (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceTag {
  /**
   * Request DTO for searching, filtering, and paginating tags for admin
   * discovery interfaces.
   */
  export type IRequest = {
    /** Full or partial tag name filter; case-insensitive search. */
    name?: string | undefined;

    /** Status enum filter (active, under_review, suspended, deleted). */
    status?: string | undefined;

    /** Filter: include only tags created after this date/time. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter: include only tags created before this date/time. */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Filter: include only tags updated after this date/time. */
    updated_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter: include only tags updated before this date/time. */
    updated_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for paginated listing (default 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page (default 20, max 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Payload for creating a new tag (admin/moderator interface). Uniqueness
   * enforced on name; description is optional.
   */
  export type ICreate = {
    /** New tag label (case-insensitive alphanumeric, unique among tags). */
    name: string;

    /**
     * Initial status value for the new tag, must be one of business enum
     * (e.g., 'active', 'under_review').
     */
    status: string;

    /** Optional moderation/business/context description for the tag. */
    description?: string | undefined;
  };

  /**
   * Payload for fully updating tag properties. Used in tag moderation,
   * curation, or analytics tuning.
   */
  export type IUpdate = {
    /**
     * Tag label to update (case-insensitive alphanumeric, must remain
     * unique).
     */
    name: string;

    /** Updated status value for the tag ('active', 'under_review', etc.). */
    status: string;

    /** Updated description (can be changed for moderation/business context). */
    description?: string | undefined;
  };

  /**
   * Summary structure for tag, used in tag listing, filters, or analytics.
   * Returns only the minimal identifying and status info for performance and
   * usability.
   */
  export type ISummary = {
    /** Tag UUID. Used for all tag operations. */
    id: string & tags.Format<"uuid">;

    /** Unique tag label for the system. */
    name: string;

    /**
     * Current lifecycle status of the tag (active, under_review, suspended,
     * deleted).
     */
    status: string;
  };
}
