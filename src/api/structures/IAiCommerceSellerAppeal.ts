import { tags } from "typia";

/**
 * A request/response object representing a single seller appeal record as
 * defined in ai_commerce_seller_appeals. Contains the appeal type, data,
 * status, resolution notes, and timestamps. Used in seller compliance,
 * escalation, and platform review workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceSellerAppeal = {
  /**
   * The unique identifier (UUID) of the seller appeal record. Used for audit,
   * compliance, and workflow referencing. Sourced from
   * ai_commerce_seller_appeals.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The seller profile's UUID this appeal is for. References
   * ai_commerce_seller_profiles.id. Determines appeal scope and
   * traceability.
   */
  seller_profile_id: string & tags.Format<"uuid">;

  /**
   * The nature of the appeal (e.g., rejection, penalty, demotion, payout).
   * String valueâ€”business logic may restrict to certain enums. Sourced from
   * ai_commerce_seller_appeals.appeal_type.
   */
  appeal_type: string;

  /**
   * JSON-encoded details or evidence attached to this appeal. Should include
   * supporting documentation, case context, or facts.
   * ai_commerce_seller_appeals.appeal_data.
   */
  appeal_data: string;

  /**
   * Current status of the appeal (e.g., open, in_review, resolved, rejected,
   * closed). Value should conform to status business logic and enum list.
   * ai_commerce_seller_appeals.status.
   */
  status: string;

  /**
   * (Optional) Platform/admin summary on how the appeal was processed and
   * resolved. ai_commerce_seller_appeals.resolution_notes.
   */
  resolution_notes?: string | null | undefined;

  /**
   * Appeal creation timestamp (ISO 8601).
   * ai_commerce_seller_appeals.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last updated timestamp for the appeal (ISO 8601).
   * ai_commerce_seller_appeals.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceSellerAppeal {
  /**
   * Query parameters for paginated, filtered search of seller appeal records
   * (escalations, dispute, penalty). All fields are optional.
   */
  export type IRequest = {
    /** Filter search to specific seller profile. */
    seller_profile_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter appeals by status (e.g., open, in_review, resolved, rejected,
     * closed).
     */
    status?: string | undefined;

    /**
     * Filter appeals by type (e.g., penalty, dispute, payout_issue,
     * demotion, rejection, fraud_escalation, other).
     */
    appeal_type?: string | undefined;

    /**
     * Inclusive UTC timestamp representing earliest appeal creation date
     * for filter.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Inclusive UTC timestamp representing latest time for appeals returned
     * in this search.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Result page (1-based UI conventions). Defaults to 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Maximum results per page. System may restrict value to max of 100. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * A request object for creating a new seller appeal in
   * ai_commerce_seller_appeals. Must specify seller_profile_id, appeal_type,
   * appeal_data, and status fields.
   */
  export type ICreate = {
    /**
     * UUID referencing the seller profile making the appeal. Required.
     * ai_commerce_seller_appeals.seller_profile_id.
     */
    seller_profile_id: string & tags.Format<"uuid">;

    /**
     * Nature of the appeal (e.g., rejection, penalty). Application logic
     * may restrict values. ai_commerce_seller_appeals.appeal_type.
     */
    appeal_type: string;

    /**
     * Supporting evidence or documentation for the appeal, must be
     * JSON-encoded string. ai_commerce_seller_appeals.appeal_data.
     */
    appeal_data: string;

    /**
     * Initial status of the appeal (e.g., open, in_review). Must conform to
     * business workflow. ai_commerce_seller_appeals.status.
     */
    status: string;
  };

  /**
   * A request object for updating a seller appeal
   * (ai_commerce_seller_appeals). Supply any subset of fields to update:
   * appeal_data, status, or resolution_notes.
   */
  export type IUpdate = {
    /**
     * (Optional) Updated supporting evidence or documentation (should be
     * JSON-encoded string). ai_commerce_seller_appeals.appeal_data.
     */
    appeal_data?: string | undefined;

    /**
     * (Optional) New status after update (per appeal workflow, e.g.,
     * resolved, rejected). ai_commerce_seller_appeals.status.
     */
    status?: string | undefined;

    /**
     * (Optional) Platform/admin summary of appeal outcome.
     * ai_commerce_seller_appeals.resolution_notes.
     */
    resolution_notes?: string | undefined;
  };
}
