import { tags } from "typia";

/**
 * Represents a single product review as recorded in the shopping mall platform,
 * corresponding to the 'shopping_mall_reviews' Prisma table. This entity
 * captures all critical information about a review, including the product it
 * references, the order context for verified purchase, reviewer account
 * (customer or seller, only if present in the record), rating, review content,
 * moderation and notification state, all timestamps for audit purposes, and
 * logical deletion evidence.
 *
 * Each review is linked to exactly one product and one order, providing
 * evidence of purchase and eligibility. Reviews may be created by customers or
 * sellers, but customer reviews are standard for product verification. Key
 * business rules prevent duplicate reviews per (product, order, customer)
 * combination, as enforced by a unique constraint. Moderation workflows apply
 * for compliance and quality, and status fields track notification, audit, or
 * evidence chain events.
 *
 * This schema is used for all read and detail operations related to reviews;
 * create/update use strict variants. Detailed descriptions for each property
 * reference the comments in the Prisma schema 'shopping_mall_reviews' table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallReview = {
  /**
   * Primary key. Unique identifier for the review, auto-generated by the
   * system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key for the reviewed product, referencing the
   * shopping_mall_products table.
   */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /**
   * Foreign key for the order associated with this review (verifies purchase;
   * references shopping_mall_orders).
   */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /** Reviewer (customer) foreign key, referencing shopping_mall_customers. */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Optional. Reviewer (seller) foreign key, referencing
   * shopping_mall_sellers. Present only if review created by a seller.
   */
  shopping_mall_seller_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Review score as an integer (e.g., 1 to 5 stars). Business rules apply for
   * allowable range and value.
   */
  rating: number & tags.Type<"int32">;

  /** Title or summary of the review, if provided. May be nullable. */
  title?: string | undefined;

  /**
   * Full text content of the review. Can be Markdown or plain text, not
   * intended for very large content. Used for display, moderation, and
   * evidence.
   */
  body: string;

  /**
   * Moderation process state: e.g., 'pending', 'approved', 'denied'. Refer to
   * business logic for valid values.
   */
  moderation_status: string;

  /**
   * Date/time when the review was notified (optional, may be null). Used for
   * audit and notification logic.
   */
  notified_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Timestamp for review creation (ISO 8601, UTC). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for last update to the review (ISO 8601, UTC). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp for compliance; null if active, set if logically
   * deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallReview {
  /**
   * Request DTO for searching/filtering product reviews. Used for review list
   * UIs, dashboards, and analytics, supporting filtering, free-text, and
   * pagination as required by shopping_mall_reviews domain.
   */
  export type IRequest = {
    /**
     * Optional. Filter: Only return reviews associated with the given
     * product ID.
     */
    product_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional. Filter: Only return reviews written by the specified
     * customer.
     */
    customer_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional. Filter: Return reviews associated with this seller as the
     * reviewer (admin/seller context only). Can be null to ignore the
     * filter.
     */
    seller_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional. Filter: Only include reviews with the specified
     * moderation_status (e.g., 'pending', 'approved', 'denied'). May be
     * exact or partial match as per implementation.
     */
    status?: string | undefined;

    /**
     * Optional. Minimum review rating (inclusive). Enables searching by
     * review score for analytics or filtering (e.g., show all reviews rated
     * 4+ stars).
     */
    rating_min?: (number & tags.Type<"int32">) | undefined;

    /** Optional. Maximum review rating (inclusive). */
    rating_max?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional. Filter: Only include reviews created after this ISO 8601
     * timestamp (inclusive).
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional. Filter: Only include reviews created before this ISO 8601
     * timestamp (inclusive).
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional. Free-text predicate for searching within review body,
     * title, or other fields. Used for keyword or fuzzy search interfaces.
     */
    search?: string | undefined;

    /**
     * Optional. Requested page number (pagination). Defaults to 1 if
     * omitted.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional. Results per page (pagination). Platform default applies if
     * omitted.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional. Sort order: must match business-supported column (e.g.,
     * 'created_at', 'rating').
     */
    order_by?: string | undefined;
  };

  /**
   * Request DTO for creating a new review. Maps to shopping_mall_reviews.
   * Requires a product, order, rating, and body text. Supports optional
   * headline/title. Validates that only verified purchases are eligible for
   * review and all business rules for moderation and evidence are enforced.
   */
  export type ICreate = {
    /**
     * Target product to review (shopping_mall_products.id). Required. Must
     * be a valid product and the user must have completed a purchase.
     */
    shopping_mall_product_id: string & tags.Format<"uuid">;

    /**
     * Order through which the product was purchased for review. Required.
     * Enforces 'verified purchase' policy.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * Review rating value. Typically required, value 1-5. Enforced by
     * business and UI.
     */
    rating: number & tags.Type<"int32">;

    /**
     * Optional review headline by user. May be null if no title is
     * provided.
     */
    title?: string | null | undefined;

    /**
     * Main review content. Markdown or HTML supported per platform.
     * Mandatory for submission.
     */
    body: string;
  };

  /**
   * This schema defines the structure for updating an existing product review
   * in the shopping mall system. It only includes properties that are
   * updatable according to the business rules and aligns entirely with the
   * shopping_mall_reviews Prisma schema. Only the review's author (customer),
   * an admin, or authorized staff can invoke updates to a review record.
   * Depending on business workflow, fields may trigger moderation state
   * changes, audit snapshot creation, or compliance notifications. All
   * updates are logged. Properties are subject to validation rules, such as
   * required type/value constraints and only permitted transitions for
   * moderation fields. The schema guarantees no phantom fields – only
   * allowing modifications to properties that exist in the DB model and are
   * documented as editable in business and compliance specifications. This is
   * the patch/update DTO for single review mutability, not for review
   * creation.
   *
   * @title Update DTO for Shopping Mall Product Review
   */
  export type IUpdate = {
    /**
     * The review's star or point rating as an integer, typically on a 1-5
     * scale. Used for analytics, filtering, and product display. Only
     * editable by the original reviewer or admins. Must match platform's
     * review/rating policy.
     */
    rating?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<5>)
      | undefined;

    /**
     * A short headline for the review, as seen in review listings or
     * product displays. Optional per the Prisma schema and required for
     * review creation/update when the business enforces headline reviews.
     */
    title?: (string & tags.MaxLength<255>) | undefined;

    /**
     * The full plain text or markdown content of the review. This forms the
     * main body shown to users and stored for analytics, moderation, and
     * export. Supports multi-language characters and formatting by markdown
     * or HTML. Updates to this property are always snapshotted for audit
     * and legal compliance.
     */
    body?: string | undefined;

    /**
     * Current moderation status for compliance, such as 'pending',
     * 'approved', 'denied'. Only updatable by admins or moderation staff;
     * regular users can trigger moderation flows by editing content, but
     * cannot directly change this value. Enum values are managed via the
     * business policy – do not insert non-schema values.
     */
    moderation_status?: string | undefined;

    /**
     * UTC ISO8601 datetime for when notification about this review was last
     * triggered to relevant stakeholders (author, seller, admin). Can be
     * set to null (no notification sent yet) or updated to now when
     * notifications are retried or delivered. Used for after-sales and
     * compliance workflows.
     */
    notified_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary DTO for a product review posted in the shopping mall backend.
   *
   * Derived from the shopping_mall_reviews schema. Used in review list UIs,
   * moderation dashboards, analytics, and for batch retrieval. Contains only
   * fields needed for preview, analytics, and list display. Does not include
   * full review body, attached media, edit/reply threads, or detailed
   * notification status.
   */
  export type ISummary = {
    /**
     * Primary key of the review. This is the system-unique identifier
     * (UUID) for the review, immutable once assigned.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Product's unique ID (UUID) reviewed here. References the
     * shopping_mall_products.id column.
     */
    shopping_mall_product_id: string & tags.Format<"uuid">;

    /**
     * Order's unique ID (UUID) linked to the review, used to confirm
     * verified purchase status and enable one-review-per-purchase
     * enforcement by business rules.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * Reviewer's (customer's) unique ID. Used for attribution and
     * moderation/audit trail, references shopping_mall_customers.id.
     */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Review's star/point rating, typically integer 1 (lowest) to 5
     * (highest). May be further restricted or validated by business logic.
     */
    rating: number & tags.Type<"int32">;

    /**
     * Review title/headline, optional for customer convenience. May be
     * null.
     */
    title?: string | null | undefined;

    /**
     * Current moderation workflow status ('pending', 'approved',
     * 'rejected', etc.). Enforced by review moderation logic.
     */
    moderation_status: string;

    /**
     * Datetime the review was originally created, in ISO 8601 UTC format.
     * Required for sort, filtering, and evidence trails.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
