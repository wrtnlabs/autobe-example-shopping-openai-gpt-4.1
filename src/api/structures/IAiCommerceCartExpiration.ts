import { tags } from "typia";

/**
 * Represents a single expiration or recovery event for a cartâ€”append-only
 * business record for compliance, recovery, and analytics. Directly models
 * ai_commerce_cart_expirations table in the schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceCartExpiration = {
  /** Primary key identifier of the cart expiration/recovery record. */
  id: string & tags.Format<"uuid">;

  /** FK to the cart whose expiration/recovery this record logs. */
  cart_id: string & tags.Format<"uuid">;

  /**
   * UUID of the user/admin/system responsible for triggering the event
   * (nullable for auto-expiration).
   */
  actor_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Event type (expiration, recovery, retry, auto_reopen). */
  event_type: string;

  /**
   * Detailed business context, manual notes, or automatic description about
   * the cart expiration/recovery event.
   */
  details?: string | null | undefined;

  /**
   * Timestamp of when the expiration or recovery event was logged (ISO 8601
   * date-time).
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceCartExpiration {
  /**
   * Request parameters to filter/search cart expiration (and recovery)
   * records. Used for admin audit, analytics, or compliance review of cart
   * lifecycle events.
   */
  export type IRequest = {
    /** Filter cart expirations by associated cart's UUID. */
    cart_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by the actor (admin/system) UUID. */
    actor_id?: (string & tags.Format<"uuid">) | undefined;

    /** Event type filter. One of: expiration, recovery, retry, auto_reopen. */
    event_type?: string | undefined;

    /**
     * Start of the date range for expiration/recovery event search (ISO
     * 8601, YYYY-MM-DD).
     */
    start_date?: (string & tags.Format<"date">) | undefined;

    /**
     * End of the date range for expiration/recovery event search (ISO 8601,
     * YYYY-MM-DD).
     */
    end_date?: (string & tags.Format<"date">) | undefined;

    /** Page number for pagination (default 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Records per page for pagination (default 20, max 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Summary information for a cart expiration or recovery event, supporting
   * analytics, audit, and recovery reporting. All identifier fields are
   * UUIDs, timestamps use ISO 8601 format.
   *
   * Derived from ai_commerce_cart_expirations per business requirements:
   * includes event type, context, actor ID, and origin cart.
   */
  export type ISummary = {
    /**
     * Unique identifier for the cart expiration or recovery event
     * (ai_commerce_cart_expirations.id).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Primary key of the cart affected by this expiration/recovery event
     * (ai_commerce_cart_expirations.cart_id).
     */
    cart_id: string & tags.Format<"uuid">;

    /**
     * Admin UUID or null for automatic/system expiration
     * (ai_commerce_cart_expirations.actor_id).
     */
    actor_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of expiration event ('expiration', 'recovery', 'retry',
     * 'auto_reopen', etc.)
     */
    event_type: string;

    /**
     * Optional context/details for the expiration/recovery
     * (ai_commerce_cart_expirations.details).
     */
    details?: string | null | undefined;

    /**
     * Event creation timestamp (ISO 8601 date-time)
     * (ai_commerce_cart_expirations.created_at).
     */
    created_at: string & tags.Format<"date-time">;
  };
}
