import { tags } from "typia";

/**
 * Donation record per shopping_mall_donations schema. Captures all
 * evidence-grade fields associated with a user's deposit or mileage donation
 * event, including business role metadata for campaign, source, audit, and
 * compliance. Fields are mapped precisely to the underlying Prisma schema
 * documentation and used for functional, analytic, and legal/compliance
 * purposes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallDonation = {
  /**
   * Primary key, unique global identifier (UUID) for each donation event per
   * Prisma schema. Used for audit, evidence, and linking with recipient
   * campaigns/events.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the customer who performed the donation. Foreign key to
   * shopping_mall_customers. Used for audit, privacy, and
   * personalization/business analytics.
   */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Type of source for the donation: either 'deposit' for digital deposit
   * coin donations, or 'mileage' for loyalty/point system donations. Required
   * for regulatory compliance and analytic separation.
   */
  source_type: string;

  /**
   * UUID reference to the actual source account used: either
   * shopping_mall_deposits.id or shopping_mall_mileages.id depending on
   * source_type. Nullable in schema if required by business.
   */
  source_entity_id: string & tags.Format<"uuid">;

  /**
   * Business code, string identifier of the destination campaign for the
   * donation. Used for analytics, campaign reporting, and evidence tracking.
   */
  target_campaign_code: string;

  /**
   * Donation amount, must be non-negative, expresses the value in either
   * deposit currency or mileage points. Type enforced by business logic;
   * value is positive, zero not permitted.
   */
  amount: number;

  /**
   * Current logical status of the donation (pending, confirmed, refunded,
   * under_review, failed, etc.) per Prisma schema and business rules.
   */
  status: string;

  /**
   * Optional business/audit reference for the compliance snapshot, reason, or
   * context of donation. Helps with regulatory queries/audit exports.
   */
  evidence_reference?: string | undefined;

  /**
   * Timestamp the donation was made (ISO 8601 UTC). Primary date for
   * analytics, sorting, compliance, and time-window search.
   */
  donated_at: string & tags.Format<"date-time">;

  /**
   * Primary system record creation timestamp. Evidence tracking required for
   * audit/compliance situations.
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of last record update (audit and workflow integrity). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * If present, donation logically deleted/hidden for audit, evidence,
   * regulatory or privacy reasons. Otherwise, donation is live/visible.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace IShoppingMallDonation {
  /**
   * Request search, pagination, and filter parameters for donation retrieval
   * in shopping_mall_donations. Used for both admin and customer donation
   * listing with role-specific security filters applied at the service layer.
   * All properties are optional; defaults applied by API as necessary.
   */
  export type IRequest = {
    /**
     * Page number for pagination. Used to select which page of results to
     * return in a multi-page list. Positive integer; default varies by API
     * business rules.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of donation records to return per page. Allows the client to
     * control the number of results for pagination. Positive integer;
     * capped per business limits.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Filter: Restricts to donations performed by the specified customer
     * UUID. Only permitted for administrators or the owner for
     * privacy/compliance.
     */
    shopping_mall_customer_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter: Source type of the donation (either 'deposit' or 'mileage').
     * Restricts search to donations from only one funding type as stored in
     * shopping_mall_donations.source_type.
     */
    source_type?: string | undefined;

    /**
     * Filter: The business campaign code for the destination of donations.
     * Allows filtering donations to a given campaign or event.
     */
    target_campaign_code?: string | undefined;

    /**
     * Filter: Restricts to donations by status (e.g., 'pending',
     * 'confirmed', 'failed', 'refunded', etc.). Reflects workflow state for
     * operational or reporting needs.
     */
    status?: string | undefined;

    /**
     * Filter: Minimum donation value for results. Filters out donations
     * with an amount less than this value.
     */
    amount_min?: number | undefined;

    /**
     * Filter: Maximum donation value for results. Limits the donations by
     * their maximum currency or point contribution.
     */
    amount_max?: number | undefined;

    /**
     * Filter: Lower-bound for donation creation time window (inclusive)
     * using an ISO 8601 formatted date-time string.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter: Upper-bound for donation creation time window (inclusive)
     * using an ISO 8601 formatted date-time string.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * DTO to create a new donation record in shopping_mall_donations (by POST
   * or batch operation), as required for customer-initiated deposit/mileage
   * donation or campaign-driven donation event. Maps to core business, audit,
   * and campaign logic as defined in the Prisma schema.
   */
  export type ICreate = {
    /**
     * UUID of the donating customer. Foreign key for the donation. In most
     * situations populated automatically based on authenticated session;
     * only admins can override or set for proxy donations.
     */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Whether the donation is from the user's deposit (system cash, wallet,
     * 'deposit') or from mileage/loyalty points ('mileage'). Must match one
     * of the two permitted types, any other values are rejected by schema
     * and business rules.
     */
    source_type: "deposit" | "mileage";

    /**
     * UUID reference to the actual source entity used:
     * shopping_mall_deposits.id if source_type is 'deposit', or
     * shopping_mall_mileages.id if source_type is 'mileage'. Not nullable;
     * must reference a valid, active source account for the donor/customer.
     * Validity checks performed at service layer.
     */
    source_entity_id: string & tags.Format<"uuid">;

    /**
     * String business code or key for the destination campaign to which the
     * donation is being applied. Used to join donations to campaigns for
     * analytics, notification, or reporting.
     */
    target_campaign_code: string;

    /**
     * Donation amount (currency units for deposit, point units for
     * mileage). Must be strictly positive and less than or equal to current
     * balance. Enforced by business logic. Zero/negative amounts not
     * accepted.
     */
    amount: number;

    /**
     * Optional reference for audit, compliance, or evidence chainâ€”business
     * meta or snapshot link. Nullable; used in compliance, dispute, or
     * campaign promotions.
     */
    evidence_reference?: string | undefined;
  };

  /**
   * DTO for updating an existing donation record.
   *
   * Only mutable fields (such as status, evidence, notes, or resolution
   * message) are updatable. The operation is subject to business validation
   * (e.g., finalized/refunded donations cannot be updated except by admin)
   * and audit trail requirements.
   *
   * All field changes are snapshotted for evidence. Other fields in
   * shopping_mall_donations (such as donor, amount, or campaign) are
   * immutable after creation and cannot be changed here.
   */
  export type IUpdate = {
    /**
     * Donation status (pending, confirmed, failed, refunded, under_review,
     * etc.).
     *
     * This field tracks the current state of the donation workflow. When
     * the status is updated, appropriate side effects may be triggered,
     * such as notifications or accounting adjustments.
     */
    status: string;

    /**
     * Optional reference to evidence record, snapshot, or compliance
     * document.
     *
     * This can be a document ID, URI, or a string code tying the donation
     * to external audit evidence, regulatory case, fraud review, or refund
     * investigation. May be set to null if not applicable.
     */
    evidence_reference?: string | null | undefined;

    /**
     * Administrative resolution message or compliance note regarding the
     * donation.
     *
     * Used for specifying context for refunds, audit decisions, moderation
     * comments, or customer service notes. Can be empty if not updated.
     */
    resolution_message?: string | null | undefined;
  };

  /**
   * Summary DTO for a donation transaction, referencing the
   * shopping_mall_donations table. Designed for paginated/batch listings,
   * compliance audits, and user transaction history dashboards. Contains
   * essential business and audit fields per compliance/audit requirements.
   */
  export type ISummary = {
    /**
     * Unique identifier of the donation record as stored in the
     * shopping_mall_donations table. Used for audit, referencing, and
     * evidence preservation per compliance requirements.
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID reference to the donating customer (shopping_mall_customers.id).
     * Ensures proper linkage for personalization, notification, and legal
     * audit trails. Exposed for admins, masked or redacted in summary for
     * other roles.
     */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Type of the donation source: 'deposit' or 'mileage', determining if
     * the donation was made from deposit (monetary) or mileage (points)
     * balance. Business enum, critical for finance/scope segmentation.
     */
    source_type: string;

    /**
     * UUID of the deposit or mileage entity that was the origin of
     * funds/points for this donation. Used for audit, fraud detection, and
     * historical traceability.
     */
    source_entity_id: string & tags.Format<"uuid">;

    /**
     * Business code of the donation target campaign/event. Critical for
     * analytic grouping, reporting, or regulatory inquiry. Enables context
     * linking to donation campaigns or events.
     */
    target_campaign_code: string;

    /**
     * Donation amount in currency (for deposit) or points (for mileage).
     * Must be non-negative. Used for user and campaign analytics, and
     * downstream audit trails.
     */
    amount: number;

    /**
     * Current status/state of donation: e.g., 'pending', 'confirmed',
     * 'failed', 'refunded', 'under_review'. Determines display and
     * workflow. Used for analytics and fraud risk review.
     */
    status: string;

    /**
     * Timestamp when the donation was made (UTC ISO8601). Required for
     * compliance, audit, and personal timeline features.
     */
    donated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of logical deletion for audit compliance. Null if active,
     * otherwise ISO8601 string upon soft deletion for evidence retention.
     * Not exposed in customer lists by default.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
