import { tags } from "typia";

/**
 * Represents a product category (business navigation), supporting hierarchy,
 * display, and catalogue analytics. Follows Prisma schema for fields/types.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendProductCategory = {
  /** Unique identifier (UUID) for this category. */
  id: string & tags.Format<"uuid">;

  /** Display name for the category (shown in navigation/search). */
  category_name: string;

  /** Business code/identifier for category lookup and integration. */
  category_code: string;

  /** UUID of parent category for tree navigation (null if root). */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /** Depth of the category in the tree (0 for root). */
  category_depth: number & tags.Type<"int32">;

  /** Whether this category is currently active for business navigation/filter. */
  is_active: boolean;

  /** Order for display/navigation among sibling categories. */
  sort_order: number & tags.Type<"int32">;

  /** Category creation timestamp (ISO8601). */
  created_at: string & tags.Format<"date-time">;

  /** Category last updated timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp. If null, category is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendProductCategory {
  /** Search/filter and pagination request for product categories. */
  export type IRequest = {
    /** Filter for category display name (partial match supported) */
    category_name?: string;

    /** Filter by unique business code for the category. */
    category_code?: string;

    /**
     * Optional: restrict to subcategories of a particular parent (null for
     * top level)
     */
    parent_id?: string | null;

    /**
     * Whether to list only categories that are active for
     * navigation/business use.
     */
    is_active?: boolean;

    /** Page number for pagination (starting from 1). */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Records per page (default: 100, max: 1000). */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<1000>;

    /** Field name for sort ordering (e.g., 'sort_order', 'category_name'). */
    sort?: string;

    /** Sort direction. */
    order?: "asc" | "desc";
  };

  /** Input schema for creating a new product category. */
  export type ICreate = {
    /** Display name to show for this category. */
    category_name: string;

    /** Unique code for the new category for business logic and reference. */
    category_code: string;

    /** Parent category UUID, or null for top level. */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** Order among sibling categories (optional, default at end). */
    sort_order?: number & tags.Type<"int32">;

    /**
     * Whether the new category is immediately active (optional, default
     * true).
     */
    is_active?: boolean;

    /** Optional: depth in hierarchy if calculated externally. */
    category_depth?: number & tags.Type<"int32">;
  };

  /** Update input for a product category; all fields optional, used for PATCH. */
  export type IUpdate = {
    /** (Optional) New display name for the category. */
    category_name?: string;

    /** (Optional) New unique business code for the category. */
    category_code?: string;

    /** (Optional) Change parent category (null for root). */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** (Optional) Change display/sibling order. */
    sort_order?: number & tags.Type<"int32">;

    /** (Optional) Activate or deactivate the category. */
    is_active?: boolean;

    /** (Optional) Adjust the explicit depth value for the tree, if needed. */
    category_depth?: number & tags.Type<"int32">;
  };
}
