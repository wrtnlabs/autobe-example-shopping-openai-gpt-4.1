import { tags } from "typia";

/**
 * Immutable time-based historical snapshots of orders and associated entities
 * (items, fulfillments, disputes). Captures full state upon mutation for
 * legal/forensic recovery. Required for auditability and legal compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceOrderSnapshotLog = {
  /** Primary key: ID of snapshot log */
  id: string & tags.Format<"uuid">;

  /** Original order associated with this snapshot capture. */
  order_id: string & tags.Format<"uuid">;

  /**
   * Nature of state capture: creation, edit, cancel, fulfilment, aftersales,
   * etc.
   */
  capture_type: string;

  /** User/admin id making change when snapshot is taken. */
  actor_id: string & tags.Format<"uuid">;

  /** Time snapshot was taken. */
  captured_at: string & tags.Format<"date-time">;

  /**
   * Full JSON string of captured entity state/content for audit/future
   * analysis.
   */
  entity_json: string;
};
export namespace IAiCommerceOrderSnapshotLog {
  /**
   * Request schema for searching historical order snapshot logs in the
   * ai_commerce_order_snapshot_logs table. Supports filtering by order ID,
   * snapshot type (capture_type), actor, and date ranges. Used for compliance
   * audits, forensic analysis, and troubleshooting historical order state
   * transitions. Optional paging fields are provided for scalable search.
   */
  export type IRequest = {
    /**
     * Filter down to snapshots belonging to the specified order. This is
     * the ai_commerce_orders.id. Optional filter when retrieving logs
     * across multiple orders within the system.
     */
    orderId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Type of snapshot capture event, mapping to capture_type in the
     * schema. E.g. 'creation', 'edit', 'cancel', 'fulfillment',
     * 'aftersales', etc. Used to narrow down logs of interest.
     */
    snapshotType?: string | undefined;

    /**
     * Filter snapshots by the user or system actor performing the event, as
     * stored in actor_id. Enables targeting audit trails by responsible
     * party.
     */
    actorId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional ISO 8601 date string to filter logs created after or at this
     * timestamp. Allows for period-based querying.
     */
    fromDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional ISO 8601 date string to filter logs created before or at
     * this timestamp. Allows for period-based querying.
     */
    toDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Pagination - page number for results. Defaults to 1 if omitted. Used
     * with limit.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Pagination - maximum records per page. Defaults per business policy,
     * recommended 20/50/100.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };
}
