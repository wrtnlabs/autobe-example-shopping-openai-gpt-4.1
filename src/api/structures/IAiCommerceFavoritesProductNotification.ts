import { tags } from "typia";

/**
 * Business entity representing a notification (alert or update) related to a
 * user's favorited product. Contains all metadata for delivery, UX
 * presentation, and compliance/audit tracking.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceFavoritesProductNotification = {
  /**
   * Unique identifier of the notification event as stored in
   * ai_commerce_favorites_notifications. Used for audit, notification
   * deduplication, and action/event routing.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User who received this notification (reference to ai_commerce_buyer.id).
   * Used for dashboard/inbox display and enforcing access control for
   * notification viewing and status updates.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * References the favorited product entity
   * (ai_commerce_favorites_products.id) associated with this notification
   * event.
   */
  favorite_id: string & tags.Format<"uuid">;

  /**
   * Type of notification event (e.g., 'price_drop', 'restocked',
   * 'status_update'). Used to present icon/UX in the user's inbox and
   * simplify filtering by notification category.
   */
  notification_type: string;

  /**
   * ISO 8601 timestamp when this notification was delivered to the user
   * (push, email, in-app, etc). Used for notification sorting, expiration,
   * and display order.
   */
  delivered_at: string & tags.Format<"date-time">;

  /**
   * ISO 8601 timestamp when the user marked this notification as read. Null
   * if still in unread state.
   */
  read_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * UTC timestamp for the notification event (creation time in DB). Used for
   * audit trail, deduplication, and time-based filtering.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAiCommerceFavoritesProductNotification {
  /**
   * Filtering, sorting, and pagination request DTO for searching notification
   * events for a user's favorited product. Used for retrieving a custom,
   * paginated view of recent and historical alerts in notification inbox or
   * user analytics flows.
   */
  export type IRequest = {
    /**
     * Page number for pagination (indexed from 1). Optional; required only
     * for paginated responses.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Maximum number of notification records to return per page. Defaults
     * to business policy-defined limit (e.g., 20 or 50).
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Filter to notifications of a specific event type (eg, 'price_drop',
     * 'status_update', etc). Optional.
     */
    notification_type?: string | undefined;

    /**
     * Filter notifications delivered after (or at) this ISO 8601 datetime.
     * Used to select notification window for searching. Optional.
     */
    delivered_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter notifications delivered before (or at) this ISO 8601 datetime.
     * Used for upper window bound. Optional.
     */
    delivered_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter to only unread or only read notifications on this favorite.
     * Optional; if not present, returns both.
     */
    read_status?: "read" | "unread" | undefined;

    /**
     * Which timestamp field to use for ordering notifications in result
     * set. Defaults to delivered_at if not specified.
     */
    sort_by?: "delivered_at" | "created_at" | undefined;

    /**
     * Sort direction (ascending or descending). Defaults to descending
     * (most recent first).
     */
    sort_order?: "asc" | "desc" | undefined;
  };
}
