import { tags } from "typia";

/**
 * Coupon stacking rule representing business policy constraints for
 * combinability of discounts/coupons: which can or cannot be stacked, exclusion
 * relationships, override exceptions, and applicable types. Required for both
 * business UI (matrix view) and backend enforcement logic, with full evidence
 * fields for audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCouponStackingRule = {
  /**
   * Globally unique identifier for the stacking rule record (PK,
   * evidence-compliant, campaign management).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Coupon UUID for which this stacking rule applies (or null if generic type
   * rule). References main coupon for campaign and audit analytics.
   */
  shopping_mall_ai_backend_coupon_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Nullable foreign key. References exclusion/coupon that this coupon cannot
   * stack with (if applies to a specific coupon, else null for generic
   * rules).
   */
  excluded_coupon_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Type of stacking rule: 'allow','deny','override'. Used for campaign,
   * business logic, and UI for combinability matrix.
   */
  type: string;

  /**
   * Optional: coupon type or category this stacking rule applies to (for
   * type-level stacking rules, not coupon-specific). Used for advanced
   * campaign management, audit filtering, and policy configuration.
   */
  applies_to_type?: string | null;

  /**
   * Timestamp of stacking rule creation, for audit, campaign evidence, and
   * lifecycle management.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallAiBackendCouponStackingRule {
  /**
   * Search/filter request parameters for paginated stacking rule results, for
   * campaign/business management and policy compliance audits.
   */
  export type IRequest = {
    /** Pagination page number (1-based). Defaults to 1. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Maximum number of records per page (default determined by
     * business/configuration).
     */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<1000>;

    /**
     * Optional filter by stacking rule type: 'allow','deny','override'.
     * Enables targeted searches for combinability policies.
     */
    type?: string;

    /**
     * Optional filter for stacking rules applying to a specific coupon
     * type/category. Used for business/policy audits and campaign
     * optimization.
     */
    appliesToType?: string;

    /**
     * Optional UUID filter for rules excluding a specific coupon's
     * stacking. Allows fine-grained policy lookup, evidence review, and
     * troubleshooting.
     */
    excludedCouponId?: string & tags.Format<"uuid">;
  };

  /**
   * Parameters for creating a stacking rule for a coupon. Indicates whether
   * other coupons (by id or type) can/cannot be stacked with this one.
   */
  export type ICreate = {
    /**
     * The UUID of the coupon to which this stacking rule belongs. Optional;
     * rule may be global or specific to a coupon.
     */
    shopping_mall_ai_backend_coupon_id?: string & tags.Format<"uuid">;

    /**
     * Reference to a coupon which should be excluded from stacking with
     * this coupon. Optional.
     */
    excluded_coupon_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Type of stacking rule. Indicates policy: 'allow', 'deny', or
     * 'override'. Enum.
     */
    type: "allow" | "deny" | "override";

    /**
     * Target coupon type/category this rule applies to (e.g. all 'fixed',
     * 'shipping'). Null if only per-coupon.
     */
    applies_to_type?: string | null;
  };

  /**
   * Parameters for updating a stacking rule for a coupon. All fields are
   * optional; only send fields to be patched.
   */
  export type IUpdate = {
    /**
     * The UUID of the coupon to which this stacking rule belongs. Optional;
     * rule may be global or specific to a coupon.
     */
    shopping_mall_ai_backend_coupon_id?: string & tags.Format<"uuid">;

    /**
     * Reference to a coupon which should be excluded from stacking with
     * this coupon. Optional.
     */
    excluded_coupon_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Type of stacking rule. Indicates policy: 'allow', 'deny', or
     * 'override'. Enum.
     */
    type?: "allow" | "deny" | "override";

    /**
     * Target coupon type/category this rule applies to (e.g. all 'fixed',
     * 'shipping'). Null if only per-coupon.
     */
    applies_to_type?: string | null;
  };
}
