import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Customer account entity reflecting shopping_mall_ai_backend_customers schema.
 * **Sensitive fields such as passwords, hashes, or tokens are never included.**
 * Used as root user entity for API, authentication, and compliance workflows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCustomer = {
  /**
   * Unique identifier for the customer. References the 'id' column in
   * shopping_mall_ai_backend_customers.
   */
  id: string & tags.Format<"uuid">;

  /** Customer's email address. Must be unique per customer. */
  email: string & tags.Format<"email">;

  /**
   * Customer's verified mobile phone number. Used for primary contact and
   * regulatory identity check.
   */
  phone_number: string;

  /**
   * Full legal name of the customer as supplied or verified during
   * onboarding.
   */
  name: string;

  /** Optional preferred display nickname. */
  nickname?: string | null;

  /** Whether the customer account is currently active and enabled for login. */
  is_active: boolean;

  /**
   * Whether real-name and/or mobile number identity verification is
   * completed.
   */
  is_verified: boolean;

  /** Timestamp of the customer's most recent valid login. */
  last_login_at?: (string & tags.Format<"date-time">) | null;

  /** Timestamp when the customer account was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the customer account record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp recording logical deletion (withdrawal or admin removal) for
   * compliance.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendCustomer {
  /**
   * Request body for customer registration. Maps to required fields described
   * in shopping_mall_ai_backend_customers. Security note: password is sent
   * raw and NEVER stored directly; use for hash generation only.
   */
  export type IJoin = {
    /**
     * Email address for customer login and notifications. Must be unique
     * per platform business policy. This becomes the primary contact for
     * authentication and validation. (Prisma: 'email')
     */
    email: string & tags.Format<"email">;

    /**
     * Customer's verified mobile phone number (for regulatory and identity
     * check). Must be unique. Must be stored in international format if
     * possible. (Prisma: 'phone_number')
     */
    phone_number: string;

    /**
     * User-chosen password (plain, not hash). Password is never exposed or
     * stored except as hash. (Prisma: hashed in 'password_hash')
     */
    password: string & tags.Format<"password">;

    /**
     * Full legal name of the customer for identification and regulatory
     * compliance. Required. (Prisma: 'name')
     */
    name: string;

    /**
     * Optional display nickname for the customer. Shown in social/community
     * features if provided. (Prisma: 'nickname')
     */
    nickname?: string | null;
  };

  /** Customer login payload. Only used for API login to generate tokens. */
  export type ILogin = {
    /** Customer login email. */
    email: string & tags.Format<"email">;

    /** Plain password to be validated (only supplied at login). */
    password: string & tags.Format<"password">;
  };

  /**
   * Token refresh request for customer. Never accepts customer_id or other
   * owner fields.
   */
  export type IRefresh = {
    /** Refresh token to obtain new session. */
    refresh_token: string;
  };

  /**
   * Response returned after customer registration, login, or refresh.
   * Contains JWT authorization tokens and the authenticated customer entity.
   * **No password or sensitive fields included.**
   */
  export type IAuthorized = {
    /** JWT token information for authentication */
    token: IAuthorizationToken;
    customer: IShoppingMallAiBackendCustomer;
  };

  /**
   * Customer profile entity as per shopping_mall_ai_backend_customers.
   * Sensitive fields (password_hash) are never included in response.
   */
  export type ICustomer = {
    /** Customer's unique ID (UUID). (Prisma: PK) */
    id: string & tags.Format<"uuid">;

    /**
     * Business-verified email address. Unique across members. (Prisma:
     * 'email')
     */
    email: string & tags.Format<"email">;

    /**
     * Customer's registered cellphone number. Unique per regulatory
     * requirements. (Prisma: 'phone_number')
     */
    phone_number: string;

    /** Legal name. (Prisma: 'name') */
    name: string;

    /** Optional nickname for display/social. (Prisma: 'nickname') */
    nickname?: string | null;

    /** Whether account is enabled for login. (Prisma: 'is_active') */
    is_active: boolean;

    /** Whether identity/mobile verification passed. (Prisma: 'is_verified') */
    is_verified: boolean;

    /**
     * Timestamp of last successful login. Can be null if never logged in.
     * (Prisma: 'last_login_at')
     */
    last_login_at?: (string & tags.Format<"date-time">) | null;

    /** Registration date/time of the account. (Prisma: 'created_at') */
    created_at: string & tags.Format<"date-time">;

    /** Last profile update timestamp. (Prisma: 'updated_at') */
    updated_at: string & tags.Format<"date-time">;

    /**
     * If soft-deleted, timestamp of logical deletion. Otherwise null.
     * (Prisma: 'deleted_at')
     */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };

  /** Search/filter and pagination parameters for customer admin search. */
  export type IRequest = {
    email?: string & tags.Format<"email">;
    phone_number?: string;
    name?: string;
    nickname?: string;
    is_active?: boolean;
    is_verified?: boolean;
    last_login_from?: string & tags.Format<"date-time">;
    last_login_to?: string & tags.Format<"date-time">;
    created_from?: string & tags.Format<"date-time">;
    created_to?: string & tags.Format<"date-time">;
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<500>;
  };

  /** Summary of customer account for admin or listing UIs. */
  export type ISummary = {
    id: string & tags.Format<"uuid">;
    email: string & tags.Format<"email">;
    nickname?: string | null;
    is_active: boolean;
    is_verified: boolean;
    last_login_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Admin update for customer record (customer themselves may only update
   * allowed fields). Omits all fields that must never be set/changed by
   * clients (id, created_at, updated_at, deleted_at).
   */
  export type IUpdate = {
    email?: string & tags.Format<"email">;
    phone_number?: string;
    name?: string;
    nickname?: string;
    is_active?: boolean;
    is_verified?: boolean;
  };

  /**
   * Payload to create a new customer account. Used in registration (join)
   * flows. Password is required only at registration, never in responses.
   */
  export type ICreate = {
    /** Customer email (unique per platform). */
    email: string & tags.Format<"email">;

    /** Validated phone number for customer onboarding. */
    phone_number: string;

    /**
     * Plain customer password for registration (backend will hash; never
     * returned to client).
     */
    password: string & tags.Format<"password">;

    /** Legal customer name. */
    name: string;

    /** Optional display nickname for this customer. */
    nickname?: string;
  };
}
