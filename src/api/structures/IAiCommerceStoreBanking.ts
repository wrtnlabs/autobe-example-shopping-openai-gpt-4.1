import { tags } from "typia";

/**
 * Store's banking and payout account information, supporting verification,
 * compliance, and audit. Fields are sensitive and may be masked/redacted in
 * certain outputs. Admins/sellers may configure or review per business rules.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceStoreBanking = {
  /** Primary key for this store banking record. */
  id: string & tags.Format<"uuid">;

  /**
   * The store's unique identifier (ai_commerce_stores.id) this bank info
   * belongs to.
   */
  store_id: string & tags.Format<"uuid">;

  /** Legal name of the banking institution or payment provider. */
  bank_name: string;

  /**
   * Bank or payment account number for payouts; may be masked in outputs for
   * confidentiality.
   */
  account_number: string;

  /** Name on the account for payer verification. */
  account_holder_name: string;

  /**
   * Bank routing/transit/SWIFT code. Optional for international/wire
   * transfers.
   */
  routing_code?: string | null | undefined;

  /** Additional compliance info or bank config, as JSON (nullable). */
  banking_metadata?: string | null | undefined;

  /**
   * Whether the banking info has been verified for payout eligibility
   * (admin/AI process).
   */
  verified: boolean;

  /** Record creation timestamp (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp. If present, record is logically removed, but
   * retained for compliance/audit.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceStoreBanking {
  /**
   * Request DTO for paginated/search queries against
   * ai_commerce_store_banking. Used for banking record discovery, compliance,
   * and dashboards.
   */
  export type IRequest = {
    /**
     * (Optional) Filter records by target store ID (UUID) for precise
     * banking data lookup.
     */
    store_id?: (string & tags.Format<"uuid">) | undefined;

    /** (Optional) Filter by bank or payment provider's business name. */
    bank_name?: string | undefined;

    /**
     * (Optional) Filter records by the name of bank account holder at the
     * bank.
     */
    account_holder_name?: string | undefined;

    /**
     * (Optional) Filter by the bank/payment account number for audit or
     * matching.
     */
    account_number?: string | undefined;

    /**
     * (Optional) Filter for banking records only in a verified/unverified
     * state.
     */
    verified?: boolean | undefined;

    /**
     * (Optional) Lower bound filter for record creation date (ISO 8601
     * format).
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Upper bound for record creation date filter (ISO 8601
     * format).
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Sorting expression for query result ordering. (e.g.,
     * 'created_at:desc', 'bank_name:asc').
     */
    sort?: string | undefined;

    /**
     * (Optional) Pagination start page. Use with 'limit' for paged search
     * results.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /** (Optional) Number of records to return per page. For pagination.) */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Create store banking configuration and payout account information. This
   * type is used when registering or onboarding a store's payout information
   * for the first time. Enforces compliance, verification, and legal
   * requirements, supporting audit and payout workflows.
   */
  export type ICreate = {
    /**
     * ID of the store to register this banking information for.
     *
     * References the specific store entity in the system. Must be a valid
     * UUID corresponding to a store owned by the seller or managed by the
     * admin.
     */
    store_id: string & tags.Format<"uuid">;

    /**
     * Name of the bank where the store's account is held.
     *
     * This must be the legal financial institution's name as required for
     * compliance and payout transfer.
     */
    bank_name: string;

    /**
     * Account number for payouts.
     *
     * Must be the valid bank or payment account number where platform funds
     * will be deposited. This field is checked for format and accuracy by
     * compliance.
     */
    account_number: string;

    /**
     * Name on the bank account (for verification and payout).
     *
     * Must match the legal entity or person entitled to receive payouts
     * from the store. Required for compliance and banking verification.
     */
    account_holder_name: string;

    /**
     * SWIFT/routing code if applicable for international or wire payout
     * transfers.
     *
     * Optional—may be null if not required for bank/country.
     */
    routing_code?: string | null | undefined;

    /**
     * JSON metadata for compliance, additional payout configuration, or
     * bank details. Optional for extensibility. Can include payout
     * preferences, additional banking fields, or compliance snapshots.
     */
    banking_metadata?: string | null | undefined;
  };

  /**
   * Update banking configuration for store payouts. Allows optional mutation
   * of all updatable fields on the banking record, including administrative
   * verification gating. Mutation is fully audited for compliance, with
   * restricted access on 'verified' property.
   */
  export type IUpdate = {
    /**
     * Bank name for the payout account. Optional—can be updated when
     * changing bank affiliation or correcting errors.
     */
    bank_name?: string | undefined;

    /** Account number for payouts. */
    account_number?: string | undefined;

    /** Name on the bank account. */
    account_holder_name?: string | undefined;

    /**
     * SWIFT/routing code or similar for bank identification. Optional for
     * domestic accounts.
     */
    routing_code?: string | null | undefined;

    /**
     * JSON representation of additional compliance/bank details. Optional,
     * used for extensibility or compliance updates.
     */
    banking_metadata?: string | null | undefined;

    /**
     * Whether the bank account has passed platform verification checks.
     * Setting this field is typically a privileged/admin action.
     */
    verified?: boolean | undefined;
  };

  /**
   * Summary object for store banking info, summarizing payment routing,
   * verification, and bank holder/account details. Follows
   * ai_commerce_store_banking table constraints and descriptions.
   */
  export type ISummary = {
    /**
     * Unique identifier for store banking record
     * (ai_commerce_store_banking.id).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Foreign key to the store receiving the payout
     * (ai_commerce_store_banking.store_id).
     */
    store_id: string & tags.Format<"uuid">;

    /**
     * Name of the bank or financial provider as recorded for payouts
     * (ai_commerce_store_banking.bank_name).
     */
    bank_name: string;

    /**
     * Bank or provider account number registered for payout
     * (ai_commerce_store_banking.account_number).
     */
    account_number: string;

    /**
     * Name on the payout account
     * (ai_commerce_store_banking.account_holder_name).
     */
    account_holder_name: string;

    /**
     * Routing, SWIFT, or bank code for international payout; can be null
     * for domestic payouts (ai_commerce_store_banking.routing_code).
     */
    routing_code?: string | null | undefined;

    /**
     * Whether this payout account has passed verification for compliance
     * and fraud checks (ai_commerce_store_banking.verified).
     */
    verified: boolean;
  };
}
