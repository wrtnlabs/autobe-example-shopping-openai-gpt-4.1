import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Platform administrator profiles with role-based privilege separation.
 * Controls all system-level configuration, moderation, and audit features. Core
 * entity for admin authentication, KYC validation, and independent login.
 * Linked to escalation, audit, and admin snapshot tables.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAdmin = {
  /** Primary Key. Unique identifier for the admin entity. */
  id: string & tags.Format<"uuid">;

  /** Admin login email. Unique across all admins (no duplication allowed). */
  email: string;

  /** Full legal name (compliance, logging, and business context). */
  name: string;

  /** Admin account state (active, suspended, pending, withdrawn, etc). */
  status: string;

  /** KYC/identity verification status (pending, verified, denied, etc). */
  kyc_status: string;

  /** Record creation timestamp (UTC ISO-8601). */
  created_at: string & tags.Format<"date-time">;

  /** Record last modification timestamp (auto-update). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp for audit/compliance. Null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallAdmin {
  /**
   * Payload for registering a new admin. Requires email, raw password (to be
   * hashed), and full name. Only accepts fields present in the admin schema
   * and is used for join/registration endpoints.
   */
  export type IJoin = {
    /**
     * Administrator login email. Unique across all admins. Must be a valid
     * business email address and is required for authentication as the
     * primary credential.
     */
    email: string & tags.Format<"email">;

    /**
     * Administrator's raw password to be set on registration. Will be
     * securely hashed and stored as password_hash. Plaintext password is
     * only accepted here for registration and login flows.
     */
    password: string;

    /**
     * Full legal name of the administrator. Used for compliance, logging,
     * and business context. Required field.
     */
    name: string;
  };

  /**
   * Credentials for admin login. Requires email and password. Password is
   * securely checked against the stored hashed value.
   */
  export type ILogin = {
    /**
     * Administrator login email. Must correspond to a registered admin
     * account.
     */
    email: string & tags.Format<"email">;

    /** Raw password for authentication. Compared securely to stored hash. */
    password: string;
  };

  /**
   * Payload to refresh session tokens for an admin using an existing valid
   * refresh token. Used as body for session renewal endpoints.
   */
  export type IRefresh = {
    /**
     * Long-lived JWT refresh token for session renewal. Must be a valid,
     * previously issued token that has not expired or been revoked.
     */
    refreshToken: string;
  };

  /**
   * Authorization result for admin join/login/refresh endpoints. Contains
   * admin identity and tokens following IAuthorized pattern. Token property
   * uses standard IAuthorizationToken.
   */
  export type IAuthorized = {
    /** Unique identifier of the authenticated admin user. */
    id: string & tags.Format<"uuid">;

    /** Administrator's email address linked to the authorized session. */
    email: string & tags.Format<"email">;

    /** Full name of the administrator returned in the authorized session. */
    name: string;

    /** Admin account state (active, suspended, pending, withdrawn, etc). */
    status: string;

    /** KYC/identity verification status (pending, verified, denied, etc). */
    kyc_status: string;

    /** Record creation timestamp (UTC ISO-8601). */
    created_at: string & tags.Format<"date-time">;

    /** Record last modification timestamp (auto-update). */
    updated_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp for audit/compliance. Null if not deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request/query DTO for administration search. Supports advanced filtering,
   * pagination, and search for admin accounts.
   */
  export type IRequest = {
    /** Page number of the results to retrieve (pagination). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of results per page (pagination). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Default<20> & tags.Minimum<1>)
      | undefined;

    /** Filter by admin status (active, suspended, pending, withdrawn, etc). */
    status?: string | undefined;

    /**
     * Filter by KYC/identity verification status (pending, verified,
     * denied, etc).
     */
    kyc_status?: string | undefined;

    /** Search or filter by admin email address. */
    email?: string | undefined;

    /** Search or filter by admin full legal name. */
    name?: string | undefined;

    /** Filter for admins created after this datetime (inclusive). */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter for admins created before this datetime (inclusive). */
    created_to?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Update payload for administrator account fields. Updates to email, name,
   * status, KYC and password_hash are permitted; all changes are fully
   * tracked. Property descriptions reference shopping_mall_admins Prisma
   * columns.
   */
  export type IUpdate = {
    /**
     * Admin login email address. Must be unique across all admins. Used for
     * authentication and system notifications. Referenced in the
     * shopping_mall_admins Prisma model as the primary login identifier.
     *
     * Changing this value updates the admin's primary contact and login
     * credential. Format should match a valid business email pattern.
     * Uniqueness is enforced at the DB level.
     */
    email: string & tags.Format<"email">;

    /**
     * Hashed password for admin authentication (never plain text). All
     * password changes must be securely hashed before updating this field.
     * Must match strong cryptographic password hash standards (e.g.,
     * bcrypt, argon2).
     *
     * This property aligns directly with security requirements and should
     * never expose the actual password value in any request or response.
     */
    password_hash?: string | undefined;

    /**
     * The admin's full legal name, used for identity, compliance, logging,
     * and business context. This field appears on audit trails and in
     * admin-facing UIs. Must follow the naming conventions established by
     * business requirements. See shopping_mall_admins.name in the schema.
     */
    name: string;

    /**
     * Admin account state (active, suspended, pending, withdrawn, etc).
     * Must be one of the business-defined status codes as described in
     * shopping_mall_admins schema. Controls admin's platform privileges and
     * visibility.
     */
    status: string;

    /**
     * KYC (Know Your Customer) / identity verification state: (e.g.,
     * pending, verified, denied). Follows legal/regulatory requirements for
     * compliance tracking and must match the allowed status codes in the
     * schema. See shopping_mall_admins.kyc_status for allowed values.
     */
    kyc_status: string;
  };

  /**
   * Summary DTO for an administrator account. Provides basic metadata and
   * status required for list displays, dashboards, and search results,
   * referencing the shopping_mall_admins schema. Omits authentication fields,
   * audit traces, and role escalation workflows for brevity.
   */
  export type ISummary = {
    /**
     * Unique identifier for the admin account. Corresponds to the @id field
     * in the shopping_mall_admins schema. Must be a valid UUID.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Administrator login email, unique across all admin accounts. Used for
     * identifying and authenticating the administrator. Must be a valid
     * email address.
     */
    email: string & tags.Format<"email">;

    /**
     * Full legal name of the administrator for compliance, logging, and
     * business context. Sourced from the 'name' column of the
     * shopping_mall_admins table.
     */
    name: string;

    /**
     * Admin account state indicating platform access rights: possible
     * values include 'active', 'suspended', 'pending', 'withdrawn', and any
     * other status used in the shopping_mall_admins table. Used for
     * platform and login access control.
     */
    status: string;

    /**
     * KYC (Know Your Customer) or identity verification status for
     * compliance purposes. Typically one of: 'pending', 'verified',
     * 'denied', 'expired', etc. Sourced from the kyc_status field.
     */
    kyc_status: string;

    /**
     * The datetime (ISO 8601 format) when the admin record was created.
     * Used for audit and traceability.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last modification datetime (ISO 8601) of this admin account. Used for
     * recency tracking and audit logging.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp if the admin account has been logically
     * deleted (nullable field). Null indicates the admin is still active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
