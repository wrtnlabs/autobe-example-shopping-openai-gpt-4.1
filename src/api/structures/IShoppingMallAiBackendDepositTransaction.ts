import { tags } from "typia";

/**
 * A single deposit ledger transaction entry, capturing business event,
 * reference, before/after balances and context. Used as a child ledger row for
 * cash-like deposits.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendDepositTransaction = {
  /**
   * Unique identifier for this deposit transaction. Corresponds to primary
   * key.
   */
  id: string & tags.Format<"uuid">;

  /** Associated deposit ledger id. Foreign key. */
  shopping_mall_ai_backend_deposit_id: string & tags.Format<"uuid">;

  /** Reference to customer owner if applicable. */
  shopping_mall_ai_backend_customer_id?: (string & tags.Format<"uuid">) | null;

  /** Reference to seller owner if applicable. */
  shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Nature of transaction (e.g., accrual, usage, withdrawal, expire,
   * reversal, manual_adjustment, incident_lock, incident_unlock, etc.)
   */
  change_type: string;

  /**
   * Amount changed in this transaction (positive for accrual, negative for
   * usage/expire).
   */
  amount: number;

  /**
   * External/internal reference code for audit/correlation (e.g., withdrawal
   * req, order id, etc.).
   */
  transaction_reference?: string | null;

  /** Ledger balance immediately before this transaction. */
  balance_before: number;

  /** Ledger balance after this transaction is applied. */
  balance_after: number;

  /** Business reason or outcome code for analytics/compliance. */
  reason_code?: string | null;

  /**
   * Textual explanation/context for this transaction, for business review or
   * compliance.
   */
  description?: string | null;

  /** Transaction creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendDepositTransaction {
  /**
   * Paginated search/filter/query for deposit transaction log entries, as
   * shown in audit, evidence, compliance, and business reporting UIs.
   */
  export type IRequest = {
    /**
     * Page sequence for paginated query (zero-based or one-based by
     * business convention).
     */
    page?: (number & tags.Type<"int32">) | null;

    /** Page size for pagination. */
    limit?: (number & tags.Type<"int32">) | null;

    /** Filter by associated deposit ledger (UUID). */
    deposit_id?: (string & tags.Format<"uuid">) | null;

    /** Filter by customer owner (UUID, optional). */
    customer_id?: (string & tags.Format<"uuid">) | null;

    /** Filter by seller owner (UUID, optional). */
    seller_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Type of deposit event (accrual, withdrawal, adjustment, freeze,
     * release, admin, etc; see codebook).
     */
    change_type?: string | null;

    /** Full-text search filter for description field (text match, optional). */
    description_query?: string | null;

    /** Start date/time for filtered event list. */
    created_from?: (string & tags.Format<"date-time">) | null;

    /** End date/time for filtered event list. */
    created_to?: (string & tags.Format<"date-time">) | null;
  };

  /** Summary row for a deposit transaction, suitable for paginated lists. */
  export type ISummary = {
    /** Transaction id. */
    id: string & tags.Format<"uuid">;

    /**
     * Nature of deposit change (enum possible, e.g.
     * accrual/usage/expire/etc).
     */
    change_type: string;

    /** Amount of transaction. */
    amount: number;

    /** Timestamp of transaction creation. */
    created_at: string & tags.Format<"date-time">;
  };
}
