import { tags } from "typia";

/**
 * Full DTO for a shopping mall mileage (loyalty point) transaction. Models a
 * single change in mileage/point balance, as found in
 * shopping_mall_mileage_transactions. All fields map directly to schema columns
 * and are evidence/audit grade. This type is not used for mutation, only for
 * retrieval/external representation (GET or aggregate responses).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallMileageTransaction = {
  /** Primary Key: Unique identifier for the transaction record (UUID). */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign Key: Associated mileage account for which this transaction
   * occurred.
   */
  shopping_mall_mileage_id: string & tags.Format<"uuid">;

  /** Foreign Key: The customer/user linked to this mileage transaction. */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Optional Foreign Key: Related shopping mall order. Null if transaction
   * not linked to specific order.
   */
  shopping_mall_order_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Transaction type: 'accrual', 'spend', 'expiration', 'bonus',
   * 'adjustment', 'refund'. May be mapped to business enums for frontend.
   */
  type: string;

  /**
   * Mileage amount for this transaction. Positive for earning, negative for
   * deduction/expiration. Unit determined by system configuration.
   */
  amount: number;

  /**
   * Business status of transaction. Examples: 'applied', 'confirmed',
   * 'failed', 'expired', 'reversed', 'in_review'.
   */
  business_status: string;

  /**
   * Optional business reason/event context for this transaction (promo,
   * adjustment, campaign, manual).
   */
  reason?: string | null | undefined;

  /**
   * Optional evidence, snapshot, or compliance reference for this event (may
   * be file link, audit ID, or internal reference).
   */
  evidence_reference?: string | null | undefined;

  /**
   * Date/time this event was reversed/cancelled, if applicable (ISO 8601
   * UTC). Null if not reversed.
   */
  reversed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Datetime this transaction was created (ISO 8601 UTC). */
  created_at: string & tags.Format<"date-time">;

  /** Datetime this transaction was last updated (ISO 8601 UTC). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp if event was deleted/cancelled. Null otherwise. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallMileageTransaction {
  /**
   * Schema for requesting a search/filter operation on mileage (loyalty
   * points) transactions. Supports filtering by transaction type,
   * business_status, order reference, reason, and date ranges, as well as
   * paging and sorting. All fields are optional; only included criteria are
   * applied.
   */
  export type IRequest = {
    /**
     * Type of mileage transaction. Valid values: 'accrual', 'spend',
     * 'expiration', 'bonus', 'adjustment', 'refund'. Optional filter.
     */
    type?: string | undefined;

    /**
     * Processing/business status to filter (applied, confirmed, failed,
     * expired, reversed, in_review). Optional filter.
     */
    business_status?: string | undefined;

    /**
     * Business reason filter (promo, adjustment, campaign, system grant,
     * manual). Enables LIKE or tag-based search. Optional.
     */
    reason?: string | undefined;

    /**
     * Filter by associated order (UUID) if listing transactions linked to a
     * specific order. Optional.
     */
    shopping_mall_order_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter: start of creation date window (inclusive, ISO 8601). */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter: end of creation date window (inclusive, ISO 8601). */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination (1-based). Optional. Defaults to 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of transactions per page (pagination). Optional. Defaults to
     * business/system setting, e.g., 20 or 50.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Field to sort results by. May include: 'created_at', 'amount',
     * 'type', etc. Optional.
     */
    sort_by?: string | undefined;

    /** Sort order (ascending/descending). Optional. */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Schema for creating a new mileage (loyalty/point) transaction. Required
   * fields: type, amount, business_status. Optional: reason,
   * shopping_mall_order_id, evidence_reference. On transaction creation
   * (earn/spend/expiration/bonus/etc), this record is inserted and the
   * associated mileage account is updated accordingly. All fields must comply
   * with Prisma column constraints and business rules. Amount must always be
   * positive (sign is inferred from type).
   */
  export type ICreate = {
    /**
     * Transaction type. Required. Valid values: 'accrual', 'spend',
     * 'expiration', 'bonus', 'adjustment', 'refund'.
     */
    type: string;

    /**
     * Amount of points for the transaction. Required. Must be positive (>
     * 0). Direction of change (earn/spend) is inferred from type.
     */
    amount: number & tags.Minimum<0>;

    /**
     * Business processing status at event creation. Examples: 'applied',
     * 'confirmed', 'failed', 'expired', 'reversed', 'in_review'. Required.
     */
    business_status: string;

    /**
     * Reason, context, or business event causing the transaction. Optional
     * field. Examples: 'promo', 'adjustment', 'system bonus', 'manual
     * correction'. Null if not provided.
     */
    reason?: string | null | undefined;

    /**
     * UUID of associated order if this transaction is linked to an order
     * event. Optional, null if not applicable.
     */
    shopping_mall_order_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional reference or pointer to associated evidence artifact, audit
     * record, or snapshot for legal or dispute compliance.
     */
    evidence_reference?: string | null | undefined;
  };

  /**
   * Update fields for a user mileage transaction in the
   * shopping_mall_mileage_transactions table. Used to adjust non-core
   * metadata, status, or audit linkages. Does not allow mutation of core
   * transaction amount or parent relationships, only of business/audit
   * metadata per compliance, business, or error-correction scenario. All
   * fields are optional and only the fields to update need to be included;
   * PATCH/PUT semantics as per business rule.
   */
  export type IUpdate = {
    /**
     * Transaction type (accrual, spend, expiration, bonus, refund,
     * adjustment, etc.). Determines the business logic for how the mileage
     * transaction affects the user's mileage balance and audit chain.
     * Acceptable values follow business/enum constraints and must align
     * with business and compliance requirements.
     */
    type?: string | undefined;

    /**
     * Processing and workflow status for the transaction (e.g., applied,
     * confirmed, failed, expired, reversed, in_review). May be advanced or
     * modified by admins for fraud, compliance, or customer support. Valid
     * values depend on current business status and must reflect actual
     * system workflow.
     */
    business_status?: string | undefined;

    /**
     * Free-form or enumerated field providing human/machine-readable reason
     * for the transaction (event, campaign, adjustment, refund, donation,
     * etc.). Used for compliance, analytics, campaign tracking, or error
     * correction. Nullable and optional as per schema.
     */
    reason?: string | undefined;

    /**
     * Optional reference to compliance, audit, or related snapshot/evidence
     * for this transaction. Used to link this transaction to relevant
     * business events for regulatory compliance or fraud/audit
     * investigation. Nullable.
     */
    evidence_reference?: string | undefined;

    /**
     * Timestamp indicating when this transaction was reversed or cancelled,
     * if applicable. Nullable. Used for regulatory compliance, fraud
     * investigation, or business rollback situations.
     */
    reversed_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Timestamp if the transaction is logically deleted (soft delete).
     * Nullable, only set by compliance/audit policy. Not directly settable
     * by clients; managed by administrative workflows.
     */
    deleted_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
