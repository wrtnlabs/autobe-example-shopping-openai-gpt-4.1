import { tags } from "typia";

import { IShoppingMallOrderItem } from "./IShoppingMallOrderItem";
import { IShoppingMallPayment } from "./IShoppingMallPayment";
import { IShoppingMallShipment } from "./IShoppingMallShipment";
import { IShoppingMallDelivery } from "./IShoppingMallDelivery";
import { IShoppingMallAfterSaleService } from "./IShoppingMallAfterSaleService";

/**
 * Main business order entity record. Ties customer, channel/section, and core
 * order context. Supports multi-item, multi-seller, and multi-status (applied,
 * paid, fulfilled, split, cancelled, etc). Legal evidence; all state
 * transitions are snapshotted. Includes arrays for order items, payments,
 * shipments, deliveries, after-sale services. Corresponds to
 * shopping_mall_orders table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrder = {
  /** Primary Key. Order record UUID. */
  id: string & tags.Format<"uuid">;

  /** Order-placing customer {@link shopping_mall_customers.id}. */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /** Target channel's UUID for the order. */
  shopping_mall_channel_id: string & tags.Format<"uuid">;

  /** Target section's UUID for the order. */
  shopping_mall_section_id: string & tags.Format<"uuid">;

  /** Originating cart instance {@link shopping_mall_carts.id}. Nullable. */
  shopping_mall_cart_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Reference to external order/payment systems for events or integrations. */
  external_order_ref?: string | null | undefined;

  /**
   * Order status (applied, payment_required, paid, in_fulfillment, shipping,
   * delivered, completed, cancelled, split, etc).
   */
  status: string;

  /** Type of order (normal, split, group, aftersales, etc). */
  order_type: string;

  /** Total order amount at application time. */
  total_amount: number;

  /** Actual paid amount (may differ due to coupon, error correction, etc). */
  paid_amount?: number | null | undefined;

  /** Order currency. */
  currency: string;

  /** Order creation time. */
  created_at: string & tags.Format<"date-time">;

  /** Last update time. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp (for legal recovery, never physically deleted). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** List of order items. Array of IShoppingMallOrderItem. */
  order_items?: IShoppingMallOrderItem[] | undefined;

  /** List of payment records for this order. */
  payments?: IShoppingMallPayment[] | undefined;

  /** List of shipment batches for this order. */
  shipments?: IShoppingMallShipment[] | undefined;

  /** List of deliveries for this order. */
  deliveries?: IShoppingMallDelivery[] | undefined;

  /** List of after-sales services for this order. */
  after_sale_services?: IShoppingMallAfterSaleService[] | undefined;
};
export namespace IShoppingMallOrder {
  /**
   * Order list/search request DTO. For admin/backofficeâ€”never exposed to
   * public role users.
   */
  export type IRequest = {
    /** Filter by order status. */
    status?: string | undefined;

    /** Filter by type. */
    order_type?: string | undefined;

    /** Lower bound on created_at. */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound on created_at. */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Result count per page. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Request payload structure for creating a new shopping mall order.
   * Corresponds to creation-time columns in shopping_mall_orders and nested
   * entities. Accepts all required keys for order workflow, excludes
   * properties only available post-creation (ID, created_at, etc.). Includes
   * nested create DTOs for items, payments, deliveries, etc.
   */
  export type ICreate = {
    /** ID of the customer placing the order. */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /** Channel where the order is placed (sales channel/storefront UUID). */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /** Section/group within channel. */
    shopping_mall_section_id: string & tags.Format<"uuid">;

    /**
     * Originating cart instance to convert to order. May be null if direct
     * order creation.
     */
    shopping_mall_cart_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Reference to external system for integration, if any. */
    external_order_ref?: string | null | undefined;

    /** Type of order being created: normal, split, group, etc. */
    order_type: string;

    /**
     * Expected total amount of the order. Must match the sum/calculation of
     * items added.
     */
    total_amount: number;

    /** Order currency code, e.g., 'USD', 'KRW'. */
    currency: string;

    /** List of order items to include in the order. */
    order_items: IShoppingMallOrderItem.ICreate[];

    /** List of delivery instructions/recipients for the order. */
    deliveries: IShoppingMallDelivery.ICreate[];

    /** Initial payment attempts or settlement allocation for this order. */
    payments: IShoppingMallPayment.ICreate[];

    /** Related after-sales services to create with order, if any. */
    after_sale_services?: IShoppingMallAfterSaleService.ICreate[] | undefined;
  };

  /**
   * **FIXED**: All properties are now optional, conforming to Partial<T>
   * update DTO policy. This allows PATCH or partial update logic on allowed
   * fields only. Included explicit required: [] to comply with JSON schema
   * object requirements.
   */
  export type IUpdate = {
    /** Order status (can only be updated per workflow). */
    status?: string | undefined;

    /** Order type. */
    order_type?: string | undefined;

    /** Paid amount (may be corrected). */
    paid_amount?: number | undefined;

    /** Order currency code. */
    currency?: string | undefined;
  };
}
