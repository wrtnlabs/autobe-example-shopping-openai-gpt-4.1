import { tags } from "typia";

/**
 * Coupon audit trail record. Immutable evidence for all lifecycle business
 * actions.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceCouponAudit = {
  /** Unique identifier for the coupon audit record. */
  id: string;

  /** ID of the coupon this audit record refers to. */
  coupon_id: string;

  /** Business event: issue, use, validate, expire, revoke, adjust, etc. */
  event_type: string;

  /** Reference entity (order, payment, campaign, etc) for this audit record. */
  event_reference?: string | undefined;

  /** Business note or audit reason for this log entry. */
  note?: string | undefined;

  /** Timestamp when audit event was recorded. */
  event_timestamp: string & tags.Format<"date-time">;
};
export namespace IAiCommerceCouponAudit {
  /** Filtering, search and pagination params for coupon audit logs. */
  export type IRequest = {
    /** Coupon ID to filter audit log entries for a specific coupon. */
    coupon_id?: string | undefined;

    /**
     * Coupon audit event type to filter (issue, use, validate, expire,
     * revoke, adjust).
     */
    event_type?: string | undefined;

    /** ISO 8601 start datetime for filtering audit logs by event_timestamp. */
    event_timestamp_start?: (string & tags.Format<"date-time">) | undefined;

    /** ISO 8601 end datetime for filtering audit logs by event_timestamp. */
    event_timestamp_end?: (string & tags.Format<"date-time">) | undefined;

    /** Reference entity (order, payment, campaign, etc) for filtering. */
    event_reference?: string | undefined;

    /** Page number for pagination (default 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of results per page (default 20-50). */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Sort audit logs by event_timestamp (asc/desc). */
    sort?: "asc" | "desc" | undefined;
  };
}
