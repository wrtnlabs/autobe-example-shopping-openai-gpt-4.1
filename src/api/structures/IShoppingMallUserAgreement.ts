import { tags } from "typia";

/**
 * User agreement record from shopping_mall_user_agreements. Represents a point
 * of acceptance for terms, privacy, marketing, or other policy documents,
 * linked to a specific actor. May support withdrawal/opt-out tracking. Designed
 * for compliance evidence, audit, and privacy.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallUserAgreement = {
  /** Unique identifier for the user agreement record. */
  id: string & tags.Format<"uuid">;

  /**
   * Associated actor's ID (customer, seller, or admin), as per
   * application-layer discriminator.
   */
  actor_id: string & tags.Format<"uuid">;

  /** Discriminator for actor type: 'customer', 'seller', or 'admin'. */
  actor_type: string;

  /**
   * Type of agreement: contract term, privacy, consent, etc. Business-level
   * string.
   */
  agreement_type: string;

  /** Agreement version (e.g., document version '2024-03.1'). */
  version: string;

  /** Timestamp when this agreement/version was accepted. */
  accepted_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of when the user withdrew this agreement (null if not
   * withdrawn).
   */
  withdrawn_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Timestamp the record was created. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallUserAgreement {
  /**
   * Advanced query body for searching and filtering user agreement records
   * (shopping_mall_user_agreements table). All fields are optional and act as
   * filters or pagination/sorting controls when present.
   */
  export type IRequest = {
    /**
     * Filter by associated actor's unique identifier (customer, seller,
     * admin, etc.). Optional: only applies filtering if present.
     */
    actor_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Filter by actor's type (customer, seller, admin, etc.). Optional enum
     * or open string. Only applies filtering if present.
     */
    actor_type?: string | null | undefined;

    /**
     * Filter by agreement category, e.g., 'Terms', 'Privacy', or
     * 'MarketingConsent'. Optional.
     */
    agreement_type?: string | null | undefined;

    /** Search by agreement document version (e.g., '2024-03.1'). Optional. */
    version?: string | null | undefined;

    /**
     * Lower bound filter for acceptance timestamp (inclusive). Optional:
     * only applies filtering if present. Use ISO8601 date-time.
     */
    accepted_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Upper bound filter for acceptance timestamp (inclusive). Optional:
     * only applies filtering if present. Use ISO8601 date-time.
     */
    accepted_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Lower bound filter for withdrawal timestamp (inclusive). Optional:
     * only applies filtering if present. Use ISO8601 date-time.
     */
    withdrawn_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Upper bound filter for withdrawal timestamp (inclusive). Optional:
     * only applies filtering if present. Use ISO8601 date-time.
     */
    withdrawn_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Requested result page (pagination). Optional. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Number of records per page (pagination). Optional, default varies. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<250>)
      | null
      | undefined;

    /**
     * Sort result by a specific column (e.g., 'accepted_at',
     * 'withdrawn_at'). Optional.
     */
    sort_by?: string | null | undefined;

    /** Sort direction for results. Optional. Allowed values: 'asc', 'desc'. */
    sort_direction?: "asc" | "desc" | null | undefined;
  };

  /**
   * Payload for updating a user agreement record
   * (shopping_mall_user_agreements table). Allows changing timestamps or, in
   * rare cases, type/version for error/correction flows. Only specified
   * fields are updated. Set withdrawn_at as ISO8601 or null for consent
   * withdrawal; set accepted_at for acceptance corrections.
   */
  export type IUpdate = {
    /**
     * Update the agreement acceptance timestamp (set/revise). Set to
     * ISO8601 date-time string or null to clear.
     */
    accepted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Update/set the withdrawal timestamp. Set to ISO8601 date-time string.
     * Null means agreement is not withdrawn.
     */
    withdrawn_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Update agreement category (e.g., 'Terms', 'Privacy', or
     * 'MarketingConsent'). Optional/business, only if versioning
     * adjustments are needed.
     */
    agreement_type?: string | null | undefined;

    /**
     * Update agreement document version (e.g., '2024-03.1'). Optional: only
     * update when agreement version changes. Must match document.
     */
    version?: string | null | undefined;
  };

  /**
   * Summary of user agreement acceptance for compliance audit/search based on
   * shopping_mall_user_agreements table.
   */
  export type ISummary = {
    /**
     * Primary Key. Agreement record id. Prisma:
     * shopping_mall_user_agreements.id
     */
    id: string & tags.Format<"uuid">;

    /** Associated actor's id. Prisma: shopping_mall_user_agreements.actor_id */
    actor_id: string & tags.Format<"uuid">;

    /**
     * Discriminator for actor type (customer, seller, admin). Prisma:
     * shopping_mall_user_agreements.actor_type
     */
    actor_type: string;

    /**
     * Agreement typeâ€”'Terms', 'Privacy', etc. Prisma:
     * shopping_mall_user_agreements.agreement_type
     */
    agreement_type: string;

    /**
     * Document version string. Prisma:
     * shopping_mall_user_agreements.version
     */
    version: string;

    /**
     * Datetime when agreement was accepted. Prisma:
     * shopping_mall_user_agreements.accepted_at
     */
    accepted_at: string & tags.Format<"date-time">;

    /** Timestamp if user withdraws agreement. Prisma: withdrawn_at */
    withdrawn_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Record creation timestamp. Prisma: created_at */
    created_at: string & tags.Format<"date-time">;
  };
}
