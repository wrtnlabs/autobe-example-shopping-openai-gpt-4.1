import { tags } from "typia";

/**
 * Full after-sales service entity as persisted in
 * shopping_mall_after_sale_services. Includes order/delivery reference, case
 * details, status, evidence, resolution info, and audit timestamps. Used for
 * detail queries, service process, compliance, and audit/recovery. All fields
 * align directly with Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAfterSaleService = {
  /**
   * Primary Key (UUID). Uniquely identifies this after-sales service record
   * in shopping_mall_after_sale_services table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Referenced order's ID for this after-sales case. Maps to
   * shopping_mall_after_sale_services.shopping_mall_order_id for foreign key
   * relation.
   */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /**
   * Referenced delivery ID if after-sales case is linked to a delivery
   * record. Nullable. See
   * shopping_mall_after_sale_services.shopping_mall_delivery_id.
   */
  shopping_mall_delivery_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of case (return, exchange, refund, repair, etc). Controls
   * after-sales business flow. See
   * shopping_mall_after_sale_services.case_type.
   */
  case_type: string;

  /**
   * Case status (requested, processing, approved, denied, in_delivery,
   * completed, cancelled). See shopping_mall_after_sale_services.status.
   */
  status: string;

  /**
   * Optional user-supplied reason for request. Text field, audit/evidence
   * context. See shopping_mall_after_sale_services.reason.
   */
  reason?: string | null | undefined;

  /**
   * Reference to order/delivery/item snapshots at time of request. Optional;
   * for audit or dispute evidence. See
   * shopping_mall_after_sale_services.evidence_snapshot.
   */
  evidence_snapshot?: string | null | undefined;

  /**
   * Resolution information from platform/seller/support. Null unless
   * resolved. See shopping_mall_after_sale_services.resolution_message.
   */
  resolution_message?: string | null | undefined;

  /**
   * Creation timestamp in ISO8601 UTC time. See
   * shopping_mall_after_sale_services.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update UTC timestamp for this after-sales record. Syncs to
   * shopping_mall_after_sale_services.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp (logical delete). Null if active. See
   * shopping_mall_after_sale_services.deleted_at.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallAfterSaleService {
  /**
   * Search/pagination/filter schema for querying after-sales service records.
   * Applies standard pagination, status/case filtering, and reason/text
   * search for after-sales services. Includes time range filtering for
   * creation date if needed. Used for PATCH after-sale-service search
   * endpoints.
   */
  export type IRequest = {
    /**
     * Type of case (return, exchange, refund, repair, etc). String value
     * matches shopping_mall_after_sale_services.case_type for searching
     * specific types.
     */
    case_type?: string | undefined;

    /**
     * Status (requested, processing, approved, denied, in_delivery,
     * completed, cancelled). See shopping_mall_after_sale_services.status.
     * Used for status filtering.
     */
    status?: string | undefined;

    /**
     * Text for user-provided reason, supports filtering or search. Maps to
     * shopping_mall_after_sale_services.reason.
     */
    reason?: string | undefined;

    /**
     * Optional ISO8601 timestamp to filter query by after-sales service
     * creation timestamp >= this value.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional ISO8601 timestamp to filter query by after-sales service
     * creation timestamp <= this value.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Pagination page number. Optional. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Pagination limit per page. Optional. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Creation schema for an after-sales service record. Used when customer or
   * business files a new after-sales request on order/delivery. Required:
   * case_type (flow), and optionally delivery linkage, free-text reason,
   * snapshot evidence, and pre-supplied resolution message if available (most
   * workflows set this later via update). Referenced by POST after-sales
   * create endpoints and direct prisma insert logic.
   */
  export type ICreate = {
    /**
     * Type of after-sales case (return, exchange, refund, repair, etc).
     * Required at creation; determines workflow. Matches
     * shopping_mall_after_sale_services.case_type.
     */
    case_type: string;

    /**
     * Optional delivery ID if after-sales request is attached to a delivery
     * (split/partial shipments, evidence). Null if not used.
     */
    shopping_mall_delivery_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * User-supplied reason for request (text). Required for most
     * customer-initiated cases; audit/evidence. Maps to
     * shopping_mall_after_sale_services.reason.
     */
    reason?: string | null | undefined;

    /**
     * Reference/evidence snapshot for the after-sales event. Used for
     * compliance/audit disputes. Nullable.
     */
    evidence_snapshot?: string | null | undefined;

    /**
     * Can be provided if resolution info is supplied at creation (rare).
     * Usually set later in admin/seller workflow.
     */
    resolution_message?: string | null | undefined;
  };

  /**
   * DTO for updating an after-sales (return/exchange/refund/etc.) service.
   * Only fields existing in the Prisma schema can be updated. All fields are
   * optional for partial update pattern. Used by after-sales management
   * endpoints to edit case status, evidence, reason, or resolution.
   */
  export type IUpdate = {
    /**
     * Type of after-sales service (e.g., 'return', 'exchange', 'refund',
     * 'repair'). Must match one of the values used in the business context.
     * Not required for all updates.
     */
    case_type?: string | undefined;

    /**
     * Current status of the after-sales case (e.g., 'requested',
     * 'processing', 'approved', 'denied', 'in_delivery', 'completed',
     * 'cancelled').
     */
    status?: string | undefined;

    /**
     * (Optional) User-provided reason for the after-sales request. Used for
     * customer explanation, support review, or compliance evidence
     * purposes.
     */
    reason?: string | undefined;

    /**
     * (Optional) Reference (e.g., snapshot URL or evidence ID) to the
     * snapshot or evidence record related to the after-sales service.
     */
    evidence_snapshot?: string | undefined;

    /**
     * (Optional) Human-readable resolution or update message from platform,
     * seller, or support, giving context for case decision or
     * finalization.
     */
    resolution_message?: string | undefined;
  };

  /**
   * Summary DTO for a given after-sales service case (returns, exchanges,
   * refunds, etc.) linked to a specific order. Used in paginated or
   * filterable result sets, it conveys essential business fields for
   * workflow, audit, and compliance. Each property corresponds with
   * shopping_mall_after_sale_services columns, as required for
   * after-sales/CRM workflow and evidence retention. The full entity is
   * IShoppingMallAfterSaleService, while this summary is for paging/search
   * context.
   */
  export type ISummary = {
    /**
     * Unique identifier for the after-sales service record;
     * shopping_mall_after_sale_services.id.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Related order UUID for this after-sales entry.
     * shopping_mall_after_sale_services.shopping_mall_order_id.
     */
    order_id: string & tags.Format<"uuid">;

    /**
     * Linked delivery record ID, nullable when unassigned.
     * shopping_mall_after_sale_services.shopping_mall_delivery_id.
     */
    delivery_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Business type for the after-sales case: examples include 'return',
     * 'exchange', 'refund', 'repair', as in
     * shopping_mall_after_sale_services.case_type.
     */
    case_type: string;

    /**
     * Workflow state or business status, such as 'requested', 'processing',
     * 'approved', 'denied', 'completed', per
     * shopping_mall_after_sale_services.status.
     */
    status: string;

    /**
     * User-provided or business-generated reason for after-sales request.
     * Nullable; shopping_mall_after_sale_services.reason.
     */
    reason?: string | null | undefined;

    /**
     * Reference to snapshot/evidence related to this after-sales event,
     * nullable, shopping_mall_after_sale_services.evidence_snapshot.
     */
    evidence_snapshot?: string | null | undefined;

    /**
     * Resolution notes, business feedback, or customer notification for
     * case handling; nullable;
     * shopping_mall_after_sale_services.resolution_message.
     */
    resolution_message?: string | null | undefined;

    /**
     * After-sales case creation timestamp;
     * shopping_mall_after_sale_services.created_at.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Latest update time (business audit/change) for this after-sales
     * record; shopping_mall_after_sale_services.updated_at.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft-deletion timestamp for case history, as required for
     * compliance/legal recovery.
     * shopping_mall_after_sale_services.deleted_at, nullable.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
