import { tags } from "typia";

/**
 * Historical state record for one order item version (evidence for audits,
 * after-sales, etc.).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendOrderItemSnapshot = {
  /** Primary key for the order item snapshot (historical version of an item). */
  id: string & tags.Format<"uuid">;

  /** UUID of the referenced, original order item. */
  order_item_id: string & tags.Format<"uuid">;

  /**
   * Reason for snapshot creation (business rule:
   * 'after_sale','return','admin_update', etc.).
   */
  snapshot_reason: string;

  /** Historical snapshot of item quantity at snapshot creation. */
  quantity: number & tags.Type<"int32">;

  /** Unit price at time of this snapshot. */
  unit_price: number;

  /** Discount value as of the snapshot version. */
  discount_amount: number;

  /** Final amount for this item version as of the snapshot. */
  final_amount: number;

  /** Creation timestamp for the snapshot entry. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallAiBackendOrderItemSnapshot {
  /**
   * Search and paginated retrieval for order item snapshots (history of state
   * for a single item). All fields optional.
   */
  export type IRequest = {
    /** Desired result page for paginated snapshot listing. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Maximum snapshots per page. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;

    /** Filter snapshots by order item UUID. */
    order_item_id?: string & tags.Format<"uuid">;

    /**
     * Reason code for snapshot to filter (e.g.,
     * 'manual_update','price_adjust','after_sale').
     */
    snapshot_reason?: string;

    /** Filter by creation date/time of snapshot. */
    created_at?: string & tags.Format<"date-time">;
  };
}
