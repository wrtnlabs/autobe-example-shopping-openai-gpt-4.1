import { tags } from "typia";

/**
 * Business dictionary/codebook record for type/status/option mapping,
 * audit/evidence use.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCodebook = {
  /** Unique identifier for this business codebook (UUID). */
  id: string & tags.Format<"uuid">;

  /** System/business code; unique reference for dictionary/enum. */
  code: string;

  /** Display name/label for UI reference and human context. */
  name: string;

  /** Documentation, admin/business context, notes (optional/nullable). */
  description?: string | null;

  /** Creation timestamp in UTC ISO 8601 format. */
  created_at: string & tags.Format<"date-time">;

  /** Last modification/patch evidence timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp (set if logically removed; null if active). */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendCodebook {
  /** Search, filter, and paginated request structure for codebook listing. */
  export type IRequest = {
    /** Search or filter by codebook business code. */
    code?: string;

    /** Search or filter by codebook display name. */
    name?: string;

    /** Minimum created_at for codebook record. */
    created_from?: string & tags.Format<"date-time">;

    /** Maximum created_at timestamp for codebook record. */
    created_to?: string & tags.Format<"date-time">;

    /**
     * If true, restrict search to deleted codebooks; otherwise only active
     * shown.
     */
    deleted?: boolean;

    /** Pagination: page number (1-based). */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Pagination: page size. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<500>;

    /** Sort field/direction, e.g., 'created_at:desc' or 'name:asc'. */
    sort?: string;
  };

  /** Codebook row summary record for paginated search/lists. */
  export type ISummary = {
    /** Business dictionary unique identifier (UUID). */
    id: string & tags.Format<"uuid">;

    /** Dictionary code (system unique, business reference). */
    code: string;

    /** Display name/label for business use. */
    name: string;

    /** Business notes or context; null for none. */
    description?: string | null;

    /** Created timestamp (business/audit evidence). */
    created_at: string & tags.Format<"date-time">;

    /** Patch/update timestamp for audit/evidence. */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Request to create a new codebook in the dynamic business dictionary. Must
   * provide code and name. Description optional.
   */
  export type ICreate = {
    /**
     * Unique business code for the codebook. Used as a stable identifier
     * for lookups, integration, and business logic referencing. Must be
     * unique for each codebook. Example: 'status', 'region',
     * 'payment_method'. Required for creation.
     */
    code: string;

    /**
     * Human readable name for the codebook. Used in admin UI and
     * documentation. Should clearly represent the domain/purpose of this
     * codebook.
     */
    name: string;

    /**
     * Optional human-readable description or admin memo for the codebook.
     * Used to provide business context or rules. Can be omitted or null for
     * minimal setup.
     */
    description?: string | null;
  };

  /**
   * Update business name and/or description for a codebook. All fields
   * optional, can supply only changed properties.
   */
  export type IUpdate = {
    /** New name for the codebook. Optional for update. */
    name?: string;

    /**
     * Updated description or admin memo for this codebook. Optional, may be
     * set null to clear.
     */
    description?: string | null;
  };
}
