import { tags } from "typia";

/**
 * Full metadata record for uploaded files, referencing binary content in
 * storage (S3, CDN, etc).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendFile = {
  /** Unique identifier for the file metadata record. */
  id: string & tags.Format<"uuid">;

  /** Source/original filename as uploaded. */
  original_filename: string;

  /** File content-type as detected by server or provided by user. */
  mime_type: string;

  /** Reference/location of object in file storage (e.g., S3 URI). */
  storage_uri: string;

  /** File size, in bytes. */
  size_bytes: number & tags.Type<"int32">;

  /** Uploader's UUID. */
  uploaded_by_id: string & tags.Format<"uuid">;

  /** UTC timestamp of upload. */
  uploaded_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp; set on logical deletion, null otherwise. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendFile {
  /**
   * Request for file search, filtering, and pagination. Allows filtering by
   * filename, MIME type, uploader, date range. Includes pagination, sorting,
   * and soft deletion options.
   */
  export type IRequest = {
    /** Filter by original filename (partial match allowed). */
    original_filename?: string;

    /** Filter by MIME type (e.g., image/png). */
    mime_type?: string;

    /** Filter by uploader's user ID (UUID). */
    uploaded_by_id?: string;

    /** Earliest upload timestamp (include from this date). */
    uploaded_at_from?: string & tags.Format<"date-time">;

    /** Latest upload timestamp (include until this date). */
    uploaded_at_to?: string & tags.Format<"date-time">;

    /** If true, include only deleted files. */
    deleted?: boolean;

    /** Page number (1-based). */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Records per page. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<500>;

    /** Sort field and order, e.g. 'uploaded_at:desc'. */
    sort?: string;
  };

  /** Summary of uploaded file metadata for search/list view. */
  export type ISummary = {
    /** Unique identifier for the file metadata record. */
    id: string & tags.Format<"uuid">;

    /** Source/original filename as uploaded. */
    original_filename: string;

    /** File content-type. */
    mime_type: string;

    /** File size in bytes. */
    size_bytes: number & tags.Type<"int32">;

    /** Upload timestamp. */
    uploaded_at: string & tags.Format<"date-time">;

    /** Logical deletion timestamp; null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Creation DTO for file metadata entry registration; used in upload
   * process. Excludes ID and system-generated columns.
   */
  export type ICreate = {
    /** Filename of uploaded content (as supplied by user). */
    original_filename: string;

    /** File type (e.g., image/png, application/pdf). */
    mime_type: string;

    /** Object store URI link to binary file. */
    storage_uri: string;

    /** File size in bytes. */
    size_bytes: number & tags.Type<"int32">;

    /** Uploader's business entity UUID. */
    uploaded_by_id: string & tags.Format<"uuid">;

    /** Upload evidence timestamp, ISO 8601 UTC. */
    uploaded_at: string & tags.Format<"date-time">;
  };

  /**
   * Update DTO for file metadata. All fields optional and independent. Used
   * for correcting metadata or hiding a deleted file.
   */
  export type IUpdate = {
    /** Corrected source filename for evidence. */
    original_filename?: string;

    /** Corrected/updated file type. */
    mime_type?: string;

    /** Updated object storage URI. */
    storage_uri?: string;

    /** Corrected file size in bytes. */
    size_bytes?: number & tags.Type<"int32">;

    /** Timestamp of logical deletion (or null for un-delete). */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}
