import { tags } from "typia";

/**
 * Full after-sales event record as in ai_commerce_order_after_sales table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceOrderAfterSales = {
  /** Primary Key (after-sales record UUID) */
  id: string & tags.Format<"uuid">;

  /** Reference to ai_commerce_orders.id */
  order_id: string & tags.Format<"uuid">;

  /** Optional reference to specific line item affected. */
  order_item_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** Actor (buyer/seller/admin) who triggered after-sales event */
  actor_id: string & tags.Format<"uuid">;

  /** After-sales event type: return, exchange, dispute, warranty, etc. */
  type: string;

  /**
   * Progress state of after-sales case (pending, in_review, approved,
   * rejected, resolved, etc.)
   */
  status: string;

  /** Time when request was created/received. */
  opened_at: string & tags.Format<"date-time">;

  /**
   * Final time after-sales request was resolved/closed (nullable if still
   * active).
   */
  closed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Optional business note/case reason/summary for future analytics/audit. */
  note?: string | null | undefined;
};
export namespace IAiCommerceOrderAfterSales {
  /** Request for searching/filtering order after-sales records. */
  export type IRequest = {
    /** Page number (1-based) */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Number of records per page */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Filter by after-sales type (return/exchange/warranty/dispute) */
    type?: string | undefined;

    /** Filter by after-sales status */
    status?: string | undefined;

    /** Filter by actor (user who initiated) */
    actor_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by order item id */
    order_item_id?: (string & tags.Format<"uuid">) | undefined;

    /** Free-form search (note, fields) */
    search?: string | undefined;

    /** Filter by opened date (start) */
    from_opened_at?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by opened date (end) */
    to_opened_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * DTO for creating an after-sales case (required for after-sales creation
   * operations).
   */
  export type ICreate = {
    /** Optional reference to specific line item affected. */
    order_item_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * After-sales event type: e.g., return, exchange, dispute, warranty,
     * etc.
     */
    type: string;

    /** Optional case note/justification for after-sales creation. */
    note?: string | null | undefined;
  };

  /**
   * Update payload for an after-sales service record, such as return,
   * dispute, or warranty case. Allows changing status, note, event type, etc.
   * for an existing after-sales entity.
   */
  export type IUpdate = {
    /**
     * Status field indicating the progression of the after-sales case (e.g.
     * pending, in_review, approved, resolved, rejected). Aligned with
     * business logic.
     */
    status?: string | undefined;

    /**
     * Human-readable note, explanation, or context, such as reason for
     * escalation, details from buyer, or dispute comment.
     */
    note?: string | undefined;

    /**
     * The after-sales event type, such as 'return', 'exchange', 'dispute',
     * or 'warranty'.
     */
    type?: string | undefined;
  };
}
