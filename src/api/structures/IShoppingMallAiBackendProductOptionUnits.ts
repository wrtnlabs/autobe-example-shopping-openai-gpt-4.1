import { tags } from "typia";

/**
 * A selectable unit (e.g., Red, XL) in a product option group. Represents a
 * unique value for combination and variant SKU purposes. Full audit and
 * compliance fields included.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendProductOptionUnits = {
  /**
   * Unique identifier of the product option unit. Primary key as per
   * shopping_mall_ai_backend_product_option_units table.
   */
  id: string & tags.Format<"uuid">;

  /** Foreign key referencing the belonging product option group. */
  shopping_mall_ai_backend_product_options_id: string & tags.Format<"uuid">;

  /** Display value for this selectable unit (e.g., Red, XL). */
  unit_value: string;

  /**
   * Machine-readable code for business logic, analytics. Must be unique per
   * option group.
   */
  unit_code: string;

  /** Display order for selectable units within the option group. */
  sort_order: number & tags.Type<"int32">;

  /** Creation timestamp (ISO8601). */
  created_at: string & tags.Format<"date-time">;

  /** Last updated timestamp (ISO8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp or null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendProductOptionUnits {
  /**
   * Request for searching/filering product option units (specific values in
   * an option group, e.g., 빨강, XL). Includes filtering by value/code and
   * supports pagination.
   */
  export type IRequest = {
    /** String search for option unit value/label (e.g. 빨강, XL). */
    unit_value?: string;

    /**
     * Unique code for this unit within the option group (may match external
     * system).
     */
    unit_code?: string;

    /** If set, filter results by display order value. */
    sort_order?: number & tags.Type<"int32">;

    /** Page number for pagination (1-based). */
    page?: number & tags.Type<"int32">;

    /** Page size (max records per page). */
    limit?: number & tags.Type<"int32">;
  };
}
