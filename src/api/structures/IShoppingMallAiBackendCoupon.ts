import { tags } from "typia";

/**
 * Coupon policy detail and configuration entity. Contains all business,
 * evidence, and analytics attributes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCoupon = {
  /** Unique coupon identifier (UUID) for this policy. */
  id: string;

  /**
   * Optional channel UUID if the coupon is scoped to a specific sales
   * channel/storefront.
   */
  shopping_mall_ai_backend_channel_id?: string | null;

  /** Optional seller UUID if the coupon is seller-specific. */
  shopping_mall_ai_backend_seller_id?: string | null;

  /** Business/marketing code for this coupon (ex: SPRING2025, XMASGIFT). */
  code: string;

  /** Type indicator, e.g., fixed, percentage, shipping, personal, etc. */
  type: string;

  /** Human-recognizable title for the coupon/promotion. */
  title: string;

  /** Detailed business/policy description for display/audit. */
  description?: string | null;

  /** Coupon value—either fixed amount or percent—according to type. */
  value: number;

  /**
   * Minimum order total for coupon eligibility (may be null/undefined for no
   * minimum).
   */
  min_order_amount?: number | null;

  /**
   * Maximum discount allowed by this coupon per usage (percent coupons only,
   * null if no cap).
   */
  max_discount_amount?: number | null;

  /**
   * Currency code (ISO 4217) for value fields (null/non-monetary for
   * special/percent/off).
   */
  currency?: string | null;

  /** Coupon expiry date/time according to policy. */
  expires_at?: (string & tags.Format<"date-time">) | null;

  /** Whether the coupon may be stacked/combined with other coupons. */
  stackable: boolean;

  /**
   * True if this coupon is issued for a single/personal use; false for
   * mass/public.
   */
  personal: boolean;

  /**
   * Maximum number of coupons allowed to be issued overall (null/unlimited
   * for public campaigns).
   */
  issued_quantity?: (number & tags.Type<"int32">) | null;

  /**
   * Maximum number of times a single user can receive this coupon (null for
   * unlimited/per intended scenario).
   */
  issued_per_user?: (number & tags.Type<"int32">) | null;

  /**
   * Maximum usage count allowed per user (null/unlimited for policy
   * flexibility).
   */
  used_per_user?: (number & tags.Type<"int32">) | null;

  /**
   * Total usage limit for this coupon policy (null=unlimited, else numeric
   * cap for campaign).
   */
  usage_limit_total?: (number & tags.Type<"int32">) | null;

  /** Actual issued coupon count (system counter). */
  issued_count: number & tags.Type<"int32">;

  /** Actual used coupon count (system counter; evidence for analytics). */
  used_count: number & tags.Type<"int32">;

  /** First time coupon is published/visible for acquisition/claiming. */
  published_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Current coupon business status (active, expired, hidden, scheduled,
   * restricted, etc.).
   */
  status: string;

  /** Coupon policy creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Coupon policy last updated timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete deletion time, preserved for audit/evidence. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendCoupon {
  /**
   * Search and filter input for coupon/query endpoints. Used for
   * admin/campaign search and listing.
   */
  export type IRequest = {
    /**
     * (Optional) Business code for the coupon or campaign, filter by
     * like/equals.
     */
    code?: string;

    /** (Optional) Filter by coupon title, partial or fuzzy match supported. */
    title?: string;

    /**
     * (Optional) Coupon type, e.g., fixed, percentage, shipping, event,
     * welcome, etc.
     */
    type?: string;

    /**
     * (Optional) Coupon status (active, expired, scheduled, hidden,
     * restricted).
     */
    status?: string;

    /** (Optional) Channel UUID to filter coupons by. */
    channel_id?: string;

    /** (Optional) Seller UUID to filter coupons by. */
    seller_id?: string;

    /**
     * (Optional) Start expiry time (inclusive, ISO 8601 date/time) filter
     * window.
     */
    expires_from?: string;

    /**
     * (Optional) End expiry time (inclusive, ISO 8601 date/time) filter
     * window.
     */
    expires_to?: string;

    /** Pagination: page number to fetch. */
    page?: number & tags.Type<"int32">;

    /** Pagination: number of records per page. */
    limit?: number & tags.Type<"int32">;
  };

  /** Coupon summary for use in paginated index/search responses. */
  export type ISummary = {
    /** Coupon UUID. */
    id: string;

    /** Business code for the coupon or promotion campaign. */
    code: string;

    /** Coupon display title. */
    title: string;

    /** Coupon type: e.g., fixed, percentage, shipping, etc. */
    type: string;

    /** Coupon status (business logic enumeration). */
    status: string;

    /** When coupon expires. */
    expires_at?: (string & tags.Format<"date-time">) | null;

    /** Running count of coupons issued (aggregate for campaign). */
    issued_count: number & tags.Type<"int32">;

    /**
     * How many times the coupon has been used (across all recipients/issued
     * instances).
     */
    used_count: number & tags.Type<"int32">;

    /** When coupon policy/record was created. */
    created_at: string & tags.Format<"date-time">;

    /** When coupon policy/record was last updated. */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Schema for creating a coupon promotion policy. This type matches the
   * requirements for initiating a new coupon in the system. All fields
   * correspond to the business and regulatory constraints described in the
   * database model.
   */
  export type ICreate = {
    /** Optional reference to the target channel for channel-scoped coupons. */
    shopping_mall_ai_backend_channel_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Optional, indicates the seller issuing the coupon. Null for
     * system/global coupons.
     */
    shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Unique business code for the coupon or promotion campaign. Required
     * and unique.
     */
    code: string;

    /** Coupon type. E.g., fixed, percentage, shipping, event, etc. */
    type: string;

    /** Short display title for recognition. */
    title: string;

    /** Extended business description (display/audit). */
    description?: string | null;

    /** Discount value (amount or percent). */
    value: number;

    /** Minimum order value for eligibility. */
    min_order_amount?: number | null;

    /** Capped discount max value; only for percent coupons, null for none. */
    max_discount_amount?: number | null;

    /**
     * Currency code for fixed amount (ISO 4217, e.g., KRW, USD). Null for
     * percent/non-monetary.
     */
    currency?: string | null;

    /** Expiration datetime (ISO8601), null for unlimited. */
    expires_at?: (string & tags.Format<"date-time">) | null;

    /** Whether this coupon can stack with others. */
    stackable: boolean;

    /** If true, coupon is assigned per-user and never general audience. */
    personal: boolean;

    /** Campaign-level issuance cap. Null for unlimited. */
    issued_quantity?: (number & tags.Type<"int32">) | null;

    /**
     * Max issues per user; e.g., 1 for single-use personal. Null for
     * unlimited.
     */
    issued_per_user?: (number & tags.Type<"int32">) | null;

    /** Usage limit per user, null for unlimited. */
    used_per_user?: (number & tags.Type<"int32">) | null;

    /** Maximum total usages for coupon, null for unlimited. */
    usage_limit_total?: (number & tags.Type<"int32">) | null;

    /** First public visibility, null for immediate. */
    published_at?: (string & tags.Format<"date-time">) | null;

    /** Status of coupon: active, expired, scheduled, hidden, restricted. */
    status: string;
  };

  /**
   * Schema for updating an existing coupon. This type allows mutable fields
   * only. Omitted fields are not changed. All updates ensure regulatory
   * compliance and proper business logic enforcement.
   */
  export type IUpdate = {
    shopping_mall_ai_backend_channel_id?: (string & tags.Format<"uuid">) | null;
    shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;
    type?: string;
    title?: string;
    description?: string | null;
    value?: number;
    min_order_amount?: number | null;
    max_discount_amount?: number | null;
    currency?: string | null;
    expires_at?: (string & tags.Format<"date-time">) | null;
    stackable?: boolean;
    personal?: boolean;
    issued_quantity?: (number & tags.Type<"int32">) | null;
    issued_per_user?: (number & tags.Type<"int32">) | null;
    used_per_user?: (number & tags.Type<"int32">) | null;
    usage_limit_total?: (number & tags.Type<"int32">) | null;
    published_at?: (string & tags.Format<"date-time">) | null;
    status?: string;
  };
}
