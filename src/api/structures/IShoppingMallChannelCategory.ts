import { tags } from "typia";

/**
 * Represents a single hierarchical category (node) in a shopping mall channel
 * category tree. Used for product classification, merchandising, and campaign
 * logic. Fully defined by shopping_mall_channel_categories schema. All fields
 * must correspond exactly to DB columns; verify timestamps per schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallChannelCategory = {
  /** Primary key; unique UUID for the channel category. */
  id: string & tags.Format<"uuid">;

  /** Foreign key to parent channel; UUID of the shopping_mall_channels record. */
  shopping_mall_channel_id: string & tags.Format<"uuid">;

  /**
   * UUID of the parent category for nesting; nullable for root categories.
   * Links recursive hierarchy.
   */
  parent_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Unique business code scoped to channel (and optionally parent). Used in
   * routing, logic, and admin UI.
   */
  code: string;

  /**
   * Human-readable category name for product classification and admin
   * operations.
   */
  name: string;

  /**
   * Optional documentation or display details for the category. Supports
   * Markdown/HTML.
   */
  description?: string | null | undefined;

  /**
   * Integer indicating UI display order within parent/channel. Lower values
   * display first.
   */
  display_order: number & tags.Type<"int32">;

  /** Timestamp (ISO 8601) of creation. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp (ISO 8601) of most recent update. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * If present, marks entity as logically deleted for audit/compliance
   * reasons.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallChannelCategory {
  /**
   * Filtering, sorting, and pagination parameters for channel-specific
   * category list retrieval in shopping_mall_channel_categories. This request
   * DTO enables advanced admin UI, channel editor, or catalog management with
   * support for tree queries, text search, and business code lookup. See
   * shopping_mall_channel_categories schema docs for allowed properties.
   */
  export type IRequest = {
    /**
     * Page number for results pagination. Must be a positive integer.
     * Defaults to first page if omitted.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Max number of records per page in paginated results. Minimum 1;
     * system default 100. For admin requests; may be capped at business
     * policy upper bound.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Sorting column. Allowed: 'created_at', 'name', 'display_order'.
     * Custom implementations may add more fields. Case-sensitive.
     */
    sortBy?: "created_at" | "name" | "display_order" | undefined;

    /** Sorting direction; must be 'asc' or 'desc'. Default 'asc'. */
    sortOrder?: "asc" | "desc" | undefined;

    /**
     * General search keyword for name or description. Enables full-text or
     * fuzzy match on category name/description.
     */
    search?: string | undefined;

    /**
     * UUID of parent category (optional; filters for child categories under
     * this parent). Null for top-level categories.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Exact business code filter (per-schema unique per channel). */
    code?: string | undefined;

    /** Filter for categories by (partial or full) channel-specific name. */
    name?: string | undefined;

    /**
     * Custom status or visibility code filter if supported by business
     * logic or extensions (optional).
     */
    status?: string | undefined;
  };

  /**
   * DTO for registering (creating) a new category node in a channel. All
   * required fields must map to shopping_mall_channel_categories Prisma
   * model, and additional fields must correspond to valid columns. See schema
   * for parent linkage, code uniqueness constraints, and admin UI
   * requirements.
   */
  export type ICreate = {
    /** UUID of the parent channel in which this category is to be created. */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /** Parent category UUID for hierarchical nesting (null for root). */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Unique category code for API, business, and admin identification.
     * Must be unique within channel.
     */
    code: string;

    /**
     * Human-friendly display name for the category. Will be used in admin
     * UI, API, and sometimes end-user display.
     */
    name: string;

    /**
     * (Optional) Extended documentation or display-purpose description.
     * Markdown/HTML accepted.
     */
    description?: string | null | undefined;

    /**
     * Order among sibling categories in the same parent; integerâ€”lower =
     * higher (0,1,2,...). Must be unique per-sibling group.
     */
    display_order: number & tags.Type<"int32">;
  };

  /**
   * DTO for editing existing categories by admin or privileged user. Only
   * mutable properties from shopping_mall_channel_categories are allowed
   * (must exist in schema). Null values may be supplied for nullable fields
   * (e.g., to reparent as root). Required fields per Prisma model are omitted
   * here (partial for update). Cyclic parent assignment must be prevented by
   * service layer. See Prisma schema for details.
   */
  export type IUpdate = {
    /**
     * Change the parent category in category tree (nullable = move to
     * root). Must not create cycles. Optional.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Update business code (must remain unique in channel). Optional. */
    code?: string | undefined;

    /** Update category display name (optional). */
    name?: string | undefined;

    /** Change extended description (Markdown/HTML). Optional. */
    description?: string | null | undefined;

    /** Change UI order within parent; unique among siblings. Optional. */
    display_order?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Summary structure for a category node under a channel. Used for channel
   * category lists, drop-downs, search facets, or management in the UI.
   * Follows shopping_mall_channel_categories table for core fields.
   */
  export type ISummary = {
    /**
     * Unique identifier of this category (primary key in
     * shopping_mall_channel_categories).
     */
    id: string & tags.Format<"uuid">;

    /**
     * ID of the channel this category belongs to (foreign key to
     * shopping_mall_channels.id). Required.
     */
    shopping_mall_channel_id: string & tags.Format<"uuid">;

    /**
     * If present, references another category as the parent for tree
     * hierarchy, otherwise null for root categories.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Unique business code, scoped to the channel (and possibly parent).
     * Used for routing, rule logic, and admin definition. Example:
     * 'menswear', 'sale'.
     */
    code: string;

    /**
     * Display name for category (shown to user, admin, and in search).
     * Example: 'Men's Wear', 'Sale'.
     */
    name: string;

    /**
     * Optional business description for display/categorization. Null if not
     * defined.
     */
    description?: string | null | undefined;

    /**
     * Order for UI/admin display within channel/parent. Used to sequence
     * presentation. Typical examples: 1, 10, 20.
     */
    display_order: number & tags.Type<"int32">;
  };
}
