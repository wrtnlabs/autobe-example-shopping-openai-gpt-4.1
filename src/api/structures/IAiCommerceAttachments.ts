import { tags } from "typia";

/**
 * Represents a file attachment submitted by a user (buyer/seller) to the
 * commerce platform for purposes such as favorites, notifications, evidence, or
 * product gallery display. Fields map directly to ai_commerce_attachments table
 * in the database. Includes metadata required for audit, compliance, and secure
 * asset management.
 *
 * This schema enforces presence of critical business and audit fields, along
 * with support for soft deletion compliance. Each property references its
 * underlying database column and is documented per backend and privacy
 * standards.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceAttachments = {
  /**
   * Unique identifier for the attachment file.
   *
   * Corresponds to the primary key in the ai_commerce_attachments table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the user (buyer or seller) who uploaded the attachment.
   *
   * See ai_commerce_attachments.user_id.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Original file name at upload, as present in the file system or provided
   * by the user.
   *
   * Refer to ai_commerce_attachments.filename.
   */
  filename: string;

  /**
   * Business context for the attachment, such as 'favorite_screenshot',
   * 'notification_attachment', 'product_image', or other purpose.
   *
   * See ai_commerce_attachments.business_type.
   */
  business_type: string;

  /**
   * Current attachment state. Example values: 'active', 'quarantined',
   * 'deleted'.
   *
   * Refer to ai_commerce_attachments.status for business workflow.
   */
  status: string;

  /**
   * Attachment creation timestamp in ISO8601.
   *
   * Maps to ai_commerce_attachments.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for attachment metadata in ISO8601 format.
   *
   * Maps to ai_commerce_attachments.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp for logical removal (ISO8601 format) per
   * ai_commerce_attachments.deleted_at. Use null if not deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceAttachments {
  /**
   * Request filter and pagination criteria for attachment business query
   * (ai_commerce_attachments), supporting advanced search for admin
   * compliance and evidence use cases.
   */
  export type IRequest = {
    /** ID of uploaded file owner (buyer, seller, admin, etc). Optional. */
    user_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Attachment business context/category for filtering (e.g.,
     * product_image, evidence, bulletin_attachment). Optional.
     */
    business_type?: string | undefined;

    /** Case-insensitive partial match on filename for search. Optional. */
    filename_like?: string | undefined;

    /**
     * Attachment status for compliance filtering (e.g., active,
     * quarantined, deleted). Optional.
     */
    status?: string | undefined;

    /** Inclusive start time (ISO8601) for created_at range query. Optional. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Inclusive end time (ISO8601) for created_at range query. Optional. */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Pagination parameter: page number (starting at 1, default 1).
     * Optional.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Pagination parameter: items per page (default 20, optional). */
    limit?: (number & tags.Type<"int32">) | undefined;
  };
}
