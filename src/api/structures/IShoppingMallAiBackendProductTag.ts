import { tags } from "typia";

/**
 * Represents a product tag within the shopping mall backend. Used for
 * classifying, searching and filtering products for catalog management and
 * recommendation analytics. Closely mirrors the model
 * 'shopping_mall_ai_backend_product_tags' from the schema, supporting tag
 * management, analytics, and AI-powered filtering. It captures all relevant
 * business and evidence fields: ID, name, unique code, creation, update, and
 * optional soft-deletion timestamp. This structure is vital for dynamic product
 * discovery and marketing segmentation workflows.
 *
 * Derived from: Prisma model 'shopping_mall_ai_backend_product_tags'.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendProductTag = {
  /**
   * Globally unique identifier (UUID) for this product tag. Generated by the
   * system at creation and referenced in all tag associations.
   */
  id: string;

  /**
   * Display name of the tag. Shown to users in search/filter UIs and used for
   * analytics grouping. Required and must be concise yet descriptive (ex.
   * 'New Arrival', 'Eco-friendly').
   */
  tag_name: string;

  /**
   * Business-unique code or key for tag lookup. Used internally for
   * analytics, search, or business logic. Enforced uniqueness at the DB layer
   * and usually never changes after creation (ex. 'eco_friendly').
   */
  tag_code: string;

  /**
   * Timestamp (ISO 8601) when this tag was created. Automatically set by the
   * backend upon insertion; required for audit trails and system logs.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp (ISO 8601) when this tag was last updated. Changes whenever any
   * property (other than deleted_at) is modified.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp for logical tag deletion. If set, this tag is
   * considered removed from use, but is retained for compliance, evidence, or
   * audit trail purposes.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendProductTag {
  /**
   * Query/search criteria for advanced filtering and pagination over product
   * tags. These parameters are accepted by backoffice product management UIs,
   * tag suggestion interfaces, and AI analytics. Corresponds to search
   * requirements for listing tags with filter/sort/pagination.
   */
  export type IRequest = {
    /**
     * Partial or full match for tag name. Used for searching tags by user
     * intent or substring filtering.
     */
    tag_name?: string | null;

    /**
     * Exact or partial match for tag_code to filter by unique system codes.
     * Used for admin, analytics, and technical search scenarios.
     */
    tag_code?: string | null;

    /**
     * Field to order the result set by (ex. 'tag_name', 'updated_at'). Must
     * map to a property of IShoppingMallAiBackendProductTag.
     */
    order_by?: string | null;

    /**
     * Sort direction for results. Use 'asc' for ascending or 'desc' for
     * descending.
     */
    sort?: "asc" | "desc" | null;

    /** Page number for pagination, > 0. Used for batch result navigation. */
    page?: (number & tags.Type<"int32">) | null;

    /** Page size; limits the number of results per page (ex. 20, 50, 100). */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Whether to include soft-deleted tags in the result set. If null or
     * not specified, only active tags are returned.
     */
    deleted?: boolean | null;
  };

  /**
   * Request body for creating a new product tag. Used by product managers,
   * admins, or automated workflows to introduce new classification tags to
   * the catalog for AI, analytics, or search. Must supply a unique tag_code
   * and user-facing tag_name.
   */
  export type ICreate = {
    /**
     * Display name of the tag to be created. Must be provided and be
     * user-friendly for product search, filter, or recommendation UIs.
     */
    tag_name: string;

    /**
     * Unique business code for tag. Must be globally unique (enforced by
     * DB). Used for technical search and business analytics; must obey
     * organization naming conventions.
     */
    tag_code: string;
  };

  /**
   * Update body for modifying a product tag. Used for correcting tag names,
   * changing codes (rare), or managing tag lifecycles. Only updatable fields
   * (name, code) are included. Only supply the fields that should be updated
   * (PATCH-style).
   */
  export type IUpdate = {
    /** Optional: updated display name for the tag (if renamed). */
    tag_name?: string;

    /**
     * Optional: updated business code for the tag. Should rarely be changed
     * except for error correction or reclassification.
     */
    tag_code?: string;
  };
}
