import { tags } from "typia";

/**
 * Represents an individual store managed by sellers in ai_commerce_stores.
 * Contains store branding, owner linkage, approval status, and business
 * configuration metadata. Tied to seller profiles and used for analytics,
 * compliance, and workflow management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceStores = {
  /** Primary Key. Unique identifier for the store record. */
  id: string & tags.Format<"uuid">;

  /**
   * FK pointing to the user who owns/administers this store
   * (ai_commerce_user_authentications.id).
   */
  owner_user_id: string & tags.Format<"uuid">;

  /**
   * FK reference to associated seller profile
   * (ai_commerce_seller_profiles.id).
   */
  seller_profile_id: string & tags.Format<"uuid">;

  /**
   * Public-facing store name as viewed by customers and on analytics
   * dashboards.
   */
  store_name: string;

  /**
   * Unique business or internal store identifier; must be unique in the
   * system.
   */
  store_code: string;

  /**
   * Business profile, configuration, or additional metadata for the store
   * (JSON blob).
   */
  store_metadata?: string | null | undefined;

  /** Workflow status (e.g., active, pending, suspended, closed, terminated). */
  approval_status: string;

  /**
   * If store is closed/terminated, the main reason or justification
   * (nullable).
   */
  closure_reason?: string | null | undefined;

  /** Datetime when the store was created (ISO 8601 UTC). */
  created_at: string & tags.Format<"date-time">;

  /** Last store update time (ISO 8601 UTC). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp (logical deletion), or null if store is active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceStores {
  /**
   * Request/query schema for searching, filtering, and paginating stores in
   * the ai_commerce_stores model. Supports full-text and direct field
   * queries.
   */
  export type IRequest = {
    /** Store's public-facing name (partial or full) for search filter. */
    store_name?: string | undefined;

    /**
     * Unique business code or internal store identifier. Used for
     * filter/search.
     */
    store_code?: string | undefined;

    /**
     * Filter for approval/workflow status (active, pending, suspended,
     * closed, terminated).
     */
    approval_status?: string | undefined;

    /** Filter for user that owns/administers this store. */
    owner_user_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter for related seller profile. */
    seller_profile_id?: (string & tags.Format<"uuid">) | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of items per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Field name to sort by (store_name, approval_status, created_at,
     * etc.).
     */
    sort?: string | undefined;

    /** Sort order (ascending or descending). */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * DTO for creating a new store entity on the aiCommerce platform. Enforces
   * uniqueness and business workflow for store onboarding.
   */
  export type ICreate = {
    /**
     * The user ID (UUID) of the store owner. Must reference a valid user.
     * Used for store-management authorization and analytics traceability.
     * Cannot be updated after creation.
     */
    owner_user_id: string & tags.Format<"uuid">;

    /**
     * The seller profile ID (UUID) associated with the store. Links to the
     * seller's business context and compliance profile. This relationship
     * is immutable after creation.
     */
    seller_profile_id: string & tags.Format<"uuid">;

    /**
     * The public-facing name of the store. Must be unique per seller and
     * meaningful for buyers.
     */
    store_name: string;

    /**
     * A unique, internal code for the store (SKU, merchant code, etc). Must
     * not conflict with existing codes on the platform. Used for analytics,
     * search, and integration.
     */
    store_code: string;

    /**
     * (Optional) Store business and configuration metadata as a JSON
     * string, for extensibility. Contains items such as branding,
     * operational details, and custom configuration settings.
     */
    store_metadata?: string | null | undefined;

    /**
     * The current approval or workflow status of the store (e.g., active,
     * pending, suspended, closed, terminated). This field determines
     * availability on the platform.
     */
    approval_status: string;

    /**
     * (Optional) If the store is closed or terminated, this field describes
     * the business or compliance reason.
     */
    closure_reason?: string | null | undefined;
  };

  /**
   * DTO for updating modifiable fields of an existing store. Owner/seller and
   * profile ID are immutable after creation.
   */
  export type IUpdate = {
    /** Updated public name for the store. */
    store_name?: string | undefined;

    /**
     * (Optional) Updated JSON-encoded metadata for the store. Used for
     * extensibility and business branding.
     */
    store_metadata?: string | null | undefined;

    /**
     * (Optional) Store's new approval or business status. Changing from
     * 'pending' to 'active' or to 'closed', etc. Requires business workflow
     * compliance.
     */
    approval_status?: string | undefined;

    /**
     * (Optional) Business or compliance reason for closure/termination. Set
     * when status is 'closed' or 'terminated'.
     */
    closure_reason?: string | null | undefined;
  };

  /**
   * Summary object capturing the core identity, approval status, and
   * registration fields for a seller-managed store in the ai_commerce_stores
   * table. Intended for store lists, overview dashboards, and business
   * workflow management. Draws on Prisma schema documentation for constraints
   * and field definitions.
   */
  export type ISummary = {
    /** Unique store identifier (ai_commerce_stores.id, PK). */
    id: string & tags.Format<"uuid">;

    /** Display name of the store (ai_commerce_stores.store_name). */
    store_name: string;

    /** Unique store business/internal code (ai_commerce_stores.store_code). */
    store_code: string;

    /**
     * Workflow approval status for store (e.g., active, pending, suspended,
     * closed, terminated as defined in
     * ai_commerce_stores.approval_status).
     */
    approval_status: string;

    /**
     * Timestamp when the store was first registered
     * (ai_commerce_stores.created_at, ISO8601).
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last timestamp when the store metadata or status was changed
     * (ai_commerce_stores.updated_at, ISO8601).
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft delete timestamp; null if store is currently active.
     * (ai_commerce_stores.deleted_at, ISO8601).
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
