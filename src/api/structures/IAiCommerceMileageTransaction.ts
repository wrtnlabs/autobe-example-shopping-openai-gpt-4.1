import { tags } from "typia";

/**
 * Business entity representing an individual mileage (point) transaction for
 * accrual, redemption, adjustment, or expiration, linked to a user account.
 * Fully aligns with ai_commerce_mileage_transactions database and
 * audit/compliance tracing.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceMileageTransaction = {
  /** Unique identifier for the mileage transaction record. */
  id: string & tags.Format<"uuid">;

  /** Reference to the mileage account this transaction affects. */
  mileage_account_id: string & tags.Format<"uuid">;

  /** Type of mileage transaction. See enum for details. */
  type: "accrual" | "redemption" | "adjustment" | "expiration";

  /**
   * Amount of points/mileage (positive for accrual, negative for redemption
   * or expiration).
   */
  amount: number;

  /**
   * Current status of the transaction: e.g. 'confirmed', 'pending', 'failed',
   * 'expired'.
   */
  status: string;

  /**
   * Reference to a related entity, such as an order, campaign, or
   * administrative event. Optional.
   */
  reference_entity?: string | null | undefined;

  /** Date and time the transaction event occurred (ISO 8601). */
  transacted_at: string & tags.Format<"date-time">;

  /** Record creation timestamp (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when record was last modified (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp if the transaction is erased. Optional. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceMileageTransaction {
  /**
   * Filter/search DTO for mileage transactions. Used to query transactions
   * for an account or in the platform, supporting advanced filtering,
   * sorting, and pagination. All fields are optional for maximal
   * flexibility.
   */
  export type IRequest = {
    /**
     * The unique identifier of the mileage account to filter transactions
     * for. Optional.
     */
    accountId?: string | undefined;

    /**
     * Transaction type.
     *
     * - 'accrual': Points or mileage earned by the user.
     * - 'redemption': Points redeemed or spent.
     * - 'adjustment': Administrative adjustment of balance (positive or
     *   negative).
     * - 'expiration': Points expired from the user's account.
     */
    type?: "accrual" | "redemption" | "adjustment" | "expiration" | undefined;

    /**
     * Status of the transaction, such as 'confirmed', 'pending', 'failed',
     * or 'expired'. Optional.
     */
    status?: string | undefined;

    /** Minimum transaction amount to filter for. */
    minAmount?: number | undefined;

    /** Maximum transaction amount to filter for. */
    maxAmount?: number | undefined;

    /**
     * Filter for transactions occurring after (or on) this ISO 8601
     * date/time. Optional.
     */
    startDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for transactions occurring before (or on) this ISO 8601
     * date/time. Optional.
     */
    endDate?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for paginated results. Optional. */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /** Maximum number of records to return per page. Optional. */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /** Field to sort results by. Optional. */
    sortBy?: string | undefined;

    /**
     * Sort order. Can be 'asc' for ascending or 'desc' for descending.
     * Optional.
     */
    sortOrder?: "asc" | "desc" | undefined;
  };

  /**
   * Request DTO for creating a new mileage/point transaction in the system.
   * Used by admin or automated business processes for accrual, redemption,
   * adjustment, or expiration events.
   */
  export type ICreate = {
    /** The mileage account to which this transaction will be applied. */
    mileage_account_id: string & tags.Format<"uuid">;

    /** Type of mileage transaction. */
    type: "accrual" | "redemption" | "adjustment" | "expiration";

    /**
     * Number of points/mileage units to add (positive) or subtract
     * (negative).
     */
    amount: number;

    /**
     * Initial status for this transaction, such as 'pending', 'confirmed',
     * etc.
     */
    status: string;

    /**
     * Link to the related entity (order, campaign, etc) for context.
     * Optional.
     */
    reference_entity?: string | null | undefined;

    /**
     * Transaction timestamp (ISO 8601). Optionalâ€”omit for now and set
     * server-side.
     */
    transacted_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Request DTO for updating a mileage transaction. Used by admins for
   * correction, cancellation, or account reconciliation. Only fields that are
   * being updated must be included.
   */
  export type IUpdate = {
    /** Type of mileage transaction, if updating. */
    type?: "accrual" | "redemption" | "adjustment" | "expiration" | undefined;

    /** New amount for the transaction (if correction needed). */
    amount?: number | undefined;

    /**
     * Updated status, such as 'confirmed', 'reversed', etc. (if correcting
     * record).
     */
    status?: string | undefined;

    /** Update/change the entity reference for this transaction, if needed. */
    reference_entity?: string | null | undefined;

    /** Modified timestamp for the transaction event (ISO 8601). */
    transacted_at?: (string & tags.Format<"date-time">) | undefined;

    /** Mark as deleted (soft delete) with timestamp, for audit purposes. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
