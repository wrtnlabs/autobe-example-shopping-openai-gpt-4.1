import { tags } from "typia";

/**
 * An event or status checkpoint relating to an order delivery record, such as
 * shipping, exception, or manual event. Contains key attributes for tracking
 * and evidence.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendOrderDeliveryEvent = {
  /**
   * Unique identifier (UUID) for this delivery event, as per the
   * shopping_mall_ai_backend_order_delivery_events model.
   */
  id: string & tags.Format<"uuid">;

  /** UUID linking this event to its parent delivery/shipment record. */
  shopping_mall_ai_backend_order_delivery_id: string & tags.Format<"uuid">;

  /**
   * Event type (status update, exception, checkpoint, manual event, etc.).
   * Business-defined.
   */
  event_type: string;

  /**
   * Detailed free-form business context or note about the event. Optional;
   * null if unused.
   */
  event_context?: string | null;

  /**
   * Timestamp when this event was logged (system business date or carrier
   * event time, UTC ISO 8601).
   */
  logged_at: string & tags.Format<"date-time">;

  /** System creation timestamp for the event record (for audit/evidence). */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallAiBackendOrderDeliveryEvent {
  /**
   * Delivery event log retrieval parameters including event type, date range,
   * and pagination/sorting. All fields are optional.
   */
  export type IRequest = {
    /**
     * Type of delivery event to filter by (e.g., status update, exception,
     * checkpoint, etc.). Optional.
     */
    eventType?: string;

    /**
     * Start date/time range for logged_at filtering (inclusive). ISO 8601.
     * Optional.
     */
    startDate?: string & tags.Format<"date-time">;

    /**
     * End date/time range for logged_at filtering (inclusive). ISO 8601.
     * Optional.
     */
    endDate?: string & tags.Format<"date-time">;

    /**
     * Pagination: page number, starts at 1. Optional, system default used
     * if not supplied.
     */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Limit (page size) for pagination, default is system default when
     * omitted.
     */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Sort by a delivery event field, e.g., logged_at or created_at.
     * Optional.
     */
    sortBy?: string;

    /** Sort order direction ('asc' or 'desc'). Optional. */
    sortDirection?: "asc" | "desc";
  };
}
