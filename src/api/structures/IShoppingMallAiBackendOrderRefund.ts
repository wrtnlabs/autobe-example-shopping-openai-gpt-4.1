import { tags } from "typia";

import { EOrderRefundStatus } from "./EOrderRefundStatus";

/**
 * Refund record for an order. All major business, timing, and compliance fields
 * for audit and evidence.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendOrderRefund = {
  /** Globally unique identifier for this refund transaction. */
  id: string;

  /** Foreign key: ID of the order to which this refund belongs. */
  shopping_mall_ai_backend_order_id: string;

  /**
   * Description or business reason for refund, mapped to
   * customer/admin/incident context.
   */
  refund_reason: string;

  /** Type of refund (e.g., full, partial, item, policy, etc.). */
  refund_type: string;

  /** Refund amount in the specified currency. */
  amount: number;

  /** Currency code (ISO 4217) for the refund. */
  currency: string;

  /** Current status of the refund, e.g., requested, approved, paid, completed. */
  status: string;

  /** Time when refund was requested (ISO 8601 UTC). */
  requested_at: string & tags.Format<"date-time">;

  /** Time when the refund was approved/rejected by admin/operator. */
  processed_at?: (string & tags.Format<"date-time">) | null;

  /** Time when refund process was completed (e.g., payout, payment confirmed). */
  completed_at?: (string & tags.Format<"date-time">) | null;

  /** Record creation timestamp (ISO 8601 UTC). */
  created_at: string & tags.Format<"date-time">;

  /** Last modify timestamp (ISO 8601 UTC). */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp of soft deletion (if any) for compliance/audit evidence. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendOrderRefund {
  /**
   * Paging/search filter for order refunds (see EOrderRefundStatus for
   * validation).
   */
  export type IRequest = {
    /** Current page number. */
    page?: number;

    /** Page record count. */
    limit?: number;

    /** Workflow status filter. */
    status?: EOrderRefundStatus;
  };

  /** Summary refund row for list display and reporting/analytics use. */
  export type ISummary = {
    /** UUID of the refund event record. */
    id: string & tags.Format<"uuid">;

    /** Order ID related to this refund. */
    order_id: string & tags.Format<"uuid">;

    /** Short reason for the refund (customer or admin provided). */
    refund_reason: string;

    /**
     * Business or process type for refund calculation (e.g. full, partial,
     * per-item).
     */
    refund_type: string;

    /** Refund amount in primary order currency. */
    amount: number;

    /** Order/payment currency (ISO 4217). */
    currency: string;

    /** Refund workflow status. */
    status: EOrderRefundStatus;

    /** Time refund was requested. */
    requested_at: string & tags.Format<"date-time">;

    /** Nullable - time refund was completed or paid. */
    completed_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * API body to create a refund request or issue a business/accounting
   * refund.
   */
  export type ICreate = {
    /** ID of the order associated to this refund creation. */
    order_id: string & tags.Format<"uuid">;

    /** Customer/admin stated refund reason. */
    refund_reason: string;

    /** Classification of refund (full/partial/per-item). */
    refund_type: string;

    /** Refund value to credit/pay in primary order currency. */
    amount: number;

    /** ISO 4217 code for refund currency. */
    currency: string;
  };

  /**
   * Update input for refund record. Only mutable fields allowed (business
   * constraints and compliance apply).
   */
  export type IUpdate = {
    /** New or updated reason for the refund. Optional for update. */
    refund_reason?: string;

    /** Type of refund change, e.g., partial addition. Optional. */
    refund_type?: string;

    /**
     * New refund amount if correcting or adjusting (admin/seller only).
     * Optional.
     */
    amount?: number;

    /** New currency if required by financial rules (admin only). Optional. */
    currency?: string;

    /** Updated status for the refund (approval, payout, etc). Optional. */
    status?: string;

    /** Timestamp for processing/approval, ISO 8601 or null. */
    processed_at?: (string & tags.Format<"date-time">) | null;

    /** Timestamp for refund completion, ISO 8601 or null. */
    completed_at?: (string & tags.Format<"date-time">) | null;
  };
}
