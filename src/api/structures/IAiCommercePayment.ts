import { tags } from "typia";

/**
 * Represents a single payment transaction record as stored in
 * ai_commerce_payments table. Includes core business fields, status, reference,
 * monetary values, and audit/compliance timestamps. Returned for
 * payment/search/detail APIs.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommercePayment = {
  /**
   * Unique primary key identifier (ai_commerce_payments.id) for the payment
   * event.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Payment or business reference string assigned by system or gateway.
   * Unique per payment process, e.g., 'ORD-20250313-1001'.
   */
  payment_reference: string;

  /**
   * Current business/payment status. Examples: 'pending', 'paid', 'failed',
   * 'refunded'. Maps directly to status in the schema. Enum values should be
   * analysis-driven.
   */
  status: string;

  /**
   * Total payment amount in currency_code (e.g., monetary units, no
   * formatting).
   */
  amount: number;

  /** Currency code (ISO 4217, e.g., 'KRW', 'USD', 'EUR'). */
  currency_code: string;

  /**
   * Date/time when the payment was initiated/issued, in ISO 8601 datetime
   * format.
   */
  issued_at: string & tags.Format<"date-time">;

  /**
   * If not null, date/time when payment was fully confirmed/settled. Null if
   * pending/failure.
   */
  confirmed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Reason for payment failure if present (nullable). Used for
   * audit/troubleshooting/analytics.
   */
  failure_reason?: string | null | undefined;

  /**
   * Timestamp for when the payment record was created in the DB. Used for
   * audit evidence.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Latest update timestamp for this payment record. Reflects status,
   * reconciliation, or corrections.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp. Null for active payment; non-null indicates
   * logically deleted (for compliance purposes).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommercePayment {
  /**
   * Request schema for searching and querying payment records from
   * ai_commerce_payments. Supports filtering on payment status, method,
   * currency, amount range, and date window. Paging fields are included for
   * scalable analytics and dashboard perspectives.
   */
  export type IRequest = {
    /**
     * Payment status to filter by - e.g., 'pending', 'paid', 'failed',
     * 'refunded'. Directly maps to status column. Enables searching by
     * business/payment state.
     */
    status?: string | undefined;

    /**
     * Payment method to filter by (e.g., 'credit_card', 'virtual_account',
     * etc.). Business field used for reporting or configuration analysis.
     */
    method?: string | undefined;

    /**
     * Filter records by payment currency (ISO 4217 code, e.g., 'KRW',
     * 'USD'). Enables multi-currency reporting and compliance analysis.
     */
    currencyCode?: string | undefined;

    /**
     * Minimum payment amount to include in results. Used for thresholding
     * analytics, fraud detection, or campaign KPIs.
     */
    minAmount?: number | undefined;

    /**
     * Maximum payment amount to include in results. Outlier, fraud, or
     * reporting filter.
     */
    maxAmount?: number | undefined;

    /**
     * Start of creation/issued_at date range for search. ISO 8601 datetime
     * format.
     */
    fromDate?: (string & tags.Format<"date-time">) | undefined;

    /**
     * End of creation/issued_at date range for search. ISO 8601 datetime
     * format.
     */
    toDate?: (string & tags.Format<"date-time">) | undefined;

    /** Result page number for pagination (default: 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of results per page for pagination (default: business limit). */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;
  };

  /**
   * Schema for creating a new payment event in ai_commerce_payments table.
   * Used for admin/system registration of payment events. Required for
   * initial record: payment_reference, status, amount, currency_code,
   * issued_at. Optional: confirmed_at/failure_reason for advanced workflows.
   */
  export type ICreate = {
    /**
     * Unique payment or business reference string to assign for this
     * payment (e.g., 'ORD-20250313-1001'). Must be unique per payment.
     */
    payment_reference: string;

    /** Initial payment status at creation (e.g., 'pending', 'issued'). */
    status: string;

    /** Total payment amount at time of creation (currency_code applies). */
    amount: number;

    /**
     * Currency code consistent with platform reporting and funds flow (ISO
     * 4217, e.g., 'KRW', 'USD').
     */
    currency_code: string;

    /** Payment issuance datetime (ISO 8601 format). */
    issued_at: string & tags.Format<"date-time">;

    /**
     * Datetime at which payment is confirmed/settled. Optional - null if
     * not yet confirmed.
     */
    confirmed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Failure reason (if preset at creation time); nullable. For
     * non-pending statuses.
     */
    failure_reason?: string | null | undefined;
  };

  /**
   * IAiCommercePayment.IUpdate: There is not enough information to define
   * fields. Please clarify requirements.
   */
  export type IUpdate = {};
}
