import { tags } from "typia";

/**
 * Main entity DTO for order item in the shopping mall order system. Represents
 * one product or bundled component within an order. Contains all essential
 * business fields, references, pricing and quantity, discount/evidence
 * snapshot, status, and standard audit metadata. Directly matches the
 * shopping_mall_order_items table in the database.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallOrderItem = {
  /** Unique identifier of this order item. */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the parent order's unique identifier. Indicates which order
   * this order item belongs to.
   */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /** Reference to the product being ordered. */
  shopping_mall_product_id: string & tags.Format<"uuid">;

  /**
   * Optional reference to the specific product variant/option being ordered,
   * if any.
   */
  shopping_mall_product_variant_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /** Seller responsible for fulfilling this order item. */
  shopping_mall_seller_id: string & tags.Format<"uuid">;

  /** The number of units for this order item. */
  quantity: number & tags.Type<"int32">;

  /**
   * Unit price of the item at the time of order (before discounts are
   * applied).
   */
  unit_price: number;

  /** Final price (per unit) after all discounts, coupons, and adjustments. */
  final_price: number;

  /**
   * Serialized snapshot of discounts/coupons applied to this order item at
   * the time of order. Used for evidence, dispute, and rollback.
   */
  discount_snapshot?: string | null | undefined;

  /**
   * Current status of the order item, e.g., 'ordered', 'paid', 'fulfilled',
   * 'cancelled', 'returned', etc.
   */
  status: string;

  /** Datetime this order item was created. */
  created_at: string & tags.Format<"date-time">;

  /** Datetime this order item was most recently updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp for historical tracking. Null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallOrderItem {
  /** Order item search/list request DTO. */
  export type IRequest = {
    /** Filter by status. */
    status?: string | undefined;

    /** Filter by product. */
    product_id?: (string & tags.Format<"uuid">) | undefined;

    /** Page number. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Items per page. */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * DTO for creating a new order item under an order. Used in POST order item
   * operations, this includes all required business fields and references
   * (order, product, seller), quantity, pricing, discount snapshot,
   * variant/option reference, and initial status. All required fields must be
   * supplied in create requests and validated against the current
   * product/order/seller status. Based on shopping_mall_order_items schema.
   */
  export type ICreate = {
    /**
     * Required. The unique identifier of the order to which this item will
     * belong. Must match an existing order.
     */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /**
     * Required. The product that is being added to this order item. Must
     * match a valid product.
     */
    shopping_mall_product_id: string & tags.Format<"uuid">;

    /**
     * Optional. The specific variant (option combination) of the product
     * being ordered. Nullable if no variant.
     */
    shopping_mall_product_variant_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Required. The seller responsible for this product. Must be assigned
     * at create.
     */
    shopping_mall_seller_id: string & tags.Format<"uuid">;

    /**
     * Required. Number of units of the product being ordered. Must be
     * positive.
     */
    quantity: number & tags.Type<"int32">;

    /** Required. Unit price at order time before discounting. */
    unit_price: number;

    /**
     * Required. Final price per unit after all discounts/coupons applied
     * (may be equal to unit_price if no discounts).
     */
    final_price: number;

    /**
     * Optional. Serialized representation (e.g., JSON) of all
     * discounts/coupons applied when this item was added to the order.
     */
    discount_snapshot?: string | null | undefined;

    /**
     * Initial status for this order item after creation, e.g. 'ordered',
     * 'paid', etc.
     */
    status: string;
  };

  /** Patch update to order item; any field optional. */
  export type IUpdate = {
    /** New status. */
    status?: string | undefined;

    /** Update/correct final price. */
    final_price?: number | undefined;
  };
}
