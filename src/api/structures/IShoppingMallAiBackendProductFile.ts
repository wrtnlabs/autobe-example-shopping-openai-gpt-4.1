import { tags } from "typia";

/**
 * Represents a file, image, or attachment object associated with a product.
 * Models product media asset metadata for display, content management, and
 * evidence in the AI shopping mall backend. See Prisma schema
 * shopping_mall_ai_backend_product_files.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendProductFile = {
  /**
   * Unique identifier for the product file entity. Maps to the PK in
   * shopping_mall_ai_backend_product_files.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique identifier for the product to which the file is attached.
   * References shopping_mall_ai_backend_products.id.
   */
  shopping_mall_ai_backend_products_id: string & tags.Format<"uuid">;

  /**
   * Storage URI, CDN link, or path to the file/object in underlying storage
   * (e.g. S3, Blob Storage).
   */
  file_uri: string;

  /** Content type of the file (e.g. 'image/jpeg', 'application/pdf'). */
  file_type: string;

  /**
   * Display order for file rendering purposes. Controls order in UI and
   * navigation.
   */
  display_order: number & tags.Type<"int32">;

  /**
   * If true, indicates primary/main image/file of the product. Only one per
   * product should be marked primary.
   */
  is_primary: boolean;

  /**
   * Timestamp of when the file attachment was created and stored, in ISO 8601
   * date-time format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp. If present, file is logically deleted but
   * retained for evidence/audit. Null if active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendProductFile {
  /**
   * Search and filter parameters for retrieving product files. Used for
   * advanced queries on files/images attached to products. Accepts pagination
   * and filtering fields.
   */
  export type IRequest = {
    /**
     * Optional filter specifying the product to which the files are
     * attached. Used for scoping product-level file searches.
     */
    productId?: string & tags.Format<"uuid">;

    /**
     * Optional filter for the uploaded file's content type (e.g.
     * 'image/jpeg', 'application/pdf').
     */
    file_type?: string;

    /**
     * Optional filter for file's display order. Enables UI sort or
     * position-based filtering.
     */
    display_order?: number & tags.Type<"int32">;

    /**
     * Optional filter for whether the file is the primary image/file for
     * the product.
     */
    is_primary?: boolean;

    /** Page number for paginated queries. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Number of items to return per page. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Sort criteria expressed as a field or field:direction string (e.g.,
     * 'display_order:asc').
     */
    sort?: string;
  };

  /**
   * Payload for creating a new product file/image attachment. Used to
   * register/upload a new media asset. All business-critical fields must be
   * supplied.
   */
  export type ICreate = {
    /** The product id to which this file will be attached. */
    shopping_mall_ai_backend_products_id: string & tags.Format<"uuid">;

    /** Storage URI, CDN link, or upload path for the file/image. */
    file_uri: string;

    /** The content-type for the file (e.g. 'image/png', 'application/pdf'). */
    file_type: string;

    /** Order for the file among all product files, for UI sorting. */
    display_order: number & tags.Type<"int32">;

    /**
     * Whether the file is the main/primary image or content for this
     * product. Only one should be set true per product.
     */
    is_primary: boolean;
  };

  /**
   * Payload for updating an existing product file or image attachment. Allows
   * updating metadata fields and handling soft deletion via deleted_at.
   */
  export type IUpdate = {
    /** New storage URI, CDN path, or upload target for the file if updated. */
    file_uri?: string;

    /** New content type for the file. */
    file_type?: string;

    /** Updated sort/display order for UI or business analytics. */
    display_order?: number & tags.Type<"int32">;

    /** Updated state for whether this is the main product image/content. */
    is_primary?: boolean;

    /**
     * If set, marks the file attachment as logically deleted with a
     * timestamp for audit and compliance. Null for active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Summary data for product files/images, suitable for fast list/browse
   * display. Does not expose detailed internal fields or soft-deletion
   * markers.
   */
  export type ISummary = {
    /** Unique identifier for the product file. */
    id: string & tags.Format<"uuid">;

    /** Storage URI or CDN path for the file. */
    file_uri: string;

    /** Content type for file (image, pdf, etc). */
    file_type: string;

    /** Whether this file is the main/primary image or file for the product. */
    is_primary: boolean;

    /** Display order among product's files for UI sorting. */
    display_order: number & tags.Type<"int32">;
  };
}
