import { tags } from "typia";

/**
 * Complete shopping cart record as stored in ai_commerce_carts; includes all
 * persistent fields and main audit columns.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceCart = {
  /** System unique identifier of the cart. */
  id: string & tags.Format<"uuid">;

  /** Buyer user id, if this is a persistent cart. */
  buyer_id?: string | undefined;

  /** Store the cart is associated with (if applicable). */
  store_id?: string | undefined;

  /**
   * Cart's workflow/business status (draft, active, checked_out, expired,
   * etc.).
   */
  status: string;

  /** Total items (quantity sum) in cart. */
  total_quantity: number & tags.Type<"int32">;

  /** Cart creation timestamp (ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp the cart was last modified (ISO 8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete logical removal timestamp; null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceCart {
  /**
   * Full-featured search/filter request for shopping carts, supporting buyer,
   * store, status, date filtering, and pagination.
   */
  export type IRequest = {
    /** Buyer user ID to filter carts by. */
    buyer_id?: string | undefined;

    /** Store ID to filter carts by. */
    store_id?: string | undefined;

    /** Status of shopping cart (active, draft, checked_out, etc.). */
    status?: string | undefined;

    /** Minimum total quantity of items in cart. */
    min_quantity?: (number & tags.Type<"int32">) | undefined;

    /** Maximum total quantity of items in cart. */
    max_quantity?: (number & tags.Type<"int32">) | undefined;

    /** Earliest creation timestamp for filtering. */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Latest creation timestamp for filtering. */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records to return per page. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Sort key (e.g., created_at, status, quantity, etc.). */
    sort?: string | undefined;

    /** Ordering direction for results. */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Shopping cart creation request body: buyer/store association, status, and
   * optionally initial total quantity.
   */
  export type ICreate = {
    /**
     * Buyer user id, linking cart for persistence (nullable for guest
     * sessions).
     */
    buyer_id?: string | undefined;

    /**
     * Store ID the cart is being created for (optional for store-centric
     * logic).
     */
    store_id?: string | undefined;

    /** Business status for cart upon creation (default: 'active'). */
    status?: string | undefined;

    /** Initial total quantity if known on creation; otherwise defaults to 0. */
    total_quantity?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Request to update a shopping cart, allowing changes to status, store
   * reference, or business metadata. Properties are optional and only
   * supplied when a change is intended. Business logic must enforce allowed
   * status/field transitions. This type maps to non-item-level attributes of
   * ai_commerce_carts.
   */
  export type IUpdate = {
    /**
     * Status of the cart. Should match business logic constraints; common
     * values include 'draft', 'active', 'checked_out', etc.
     */
    status?: string | undefined;

    /** Associated store UUID if changing the store for the cart. */
    store_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional business logic or custom user note for the cart (if
     * supported by implementation).
     */
    note?: string | undefined;
  };

  /**
   * Summary of a shopping cart entity for list, analytics, and cart selection
   * UIs. Contains only those fields required for identifying and selecting a
   * cart.
   */
  export type ISummary = {
    /** Globally unique cart identifier (UUID). */
    id: string & tags.Format<"uuid">;

    /**
     * Current cart status, such as draft, active, checked_out, expired,
     * merged, deleted.
     */
    status: string;

    /** Total number of items in the cart. */
    total_quantity: number & tags.Type<"int32">;

    /** Last updated timestamp for cart activity. */
    updated_at: string & tags.Format<"date-time">;

    /** Optional linkage to a store; null if not store-centric. */
    store_id: (string & tags.Format<"uuid">) | null;
  };
}
