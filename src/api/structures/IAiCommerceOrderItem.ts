import { tags } from "typia";

/**
 * Schema for a single order item as defined by ai_commerce_order_items.
 * Includes business and FK context fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceOrderItem = {
  /** Unique identifier for the order item. */
  id: string & tags.Format<"uuid">;

  /** Parent order's unique identifier. */
  order_id: string & tags.Format<"uuid">;

  /** Product variant identifier (FK to ai_commerce_product_variants.id). */
  product_variant_id: string & tags.Format<"uuid">;

  /** (Optional) Seller ID associated with order item (nullable). */
  seller_id?: (string & tags.Format<"uuid">) | undefined;

  /** Human-readable code for logistics or buyer UX. */
  item_code: string;

  /** Display name shown to the buyer at purchase. */
  name: string;

  /** Quantity purchased for this order item. */
  quantity: number & tags.Type<"int32">;

  /** Unit price at the time of checkout. */
  unit_price: number;

  /** Total price for this line item. */
  total_price: number;

  /** Current delivery lifecycle status for this item. */
  delivery_status: string;

  /** Timestamp when the order item was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the order item was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete marker if the item is canceled/removed (nullable). */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace IAiCommerceOrderItem {
  /**
   * Order item search/index request fields for advanced querying or filtering
   * order items.
   */
  export type IRequest = {
    /** Search filter for product name, supports partial match. */
    product_name?: string | undefined;

    /** Filter by delivery status of order item. */
    delivery_status?: string | undefined;

    /** Restrict results to order items associated with specific seller. */
    seller_id?: (string & tags.Format<"uuid">) | undefined;

    /** Minimum purchased quantity filter. */
    min_quantity?: (number & tags.Type<"int32">) | undefined;

    /** Maximum purchased quantity filter. */
    max_quantity?: (number & tags.Type<"int32">) | undefined;

    /** Filter order items created after this time. */
    created_start?: (string & tags.Format<"date-time">) | undefined;

    /** Filter order items created before this time. */
    created_end?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Payload for creating a single order item row under
   * ai_commerce_order_items. Maps directly to schema fields on order
   * creation. Seller ID is optional (when multi-seller).
   */
  export type ICreate = {
    /** FK for product variant purchased (ai_commerce_product_variants.id). */
    product_variant_id: string & tags.Format<"uuid">;

    /**
     * (Optional) Seller ID responsible for this order item if multi-seller.
     * Nullable.
     */
    seller_id?: (string & tags.Format<"uuid">) | undefined;

    /** Human-readable item code for logistics/business use. */
    item_code: string;

    /** Product/item name shown to buyer at purchase. */
    name: string;

    /** Quantity purchased for this order item (required). */
    quantity: number & tags.Type<"int32">;

    /** Unit price at checkout for this item (required). */
    unit_price: number;

    /** Total price = unit_price Ã— quantity at checkout snapshot. */
    total_price: number;
  };

  /**
   * Object for updating order item fields in ai_commerce_order_items, used
   * for administrative corrections or fulfillment/after-sales updates. Only
   * allowed fields per business logic are updatable. All changes are strictly
   * audited.
   */
  export type IUpdate = {
    /**
     * The delivery lifecycle status for the order item (e.g., 'pending',
     * 'shipped', 'delivered').
     */
    delivery_status?: string | undefined;

    /** Updated quantity for the order item. Must be a non-negative integer. */
    quantity?: (number & tags.Type<"int32">) | undefined;

    /**
     * Updated per-unit price for the order item if allowed. Should be
     * non-negative.
     */
    unit_price?: number | undefined;

    /**
     * Updated total price for the order item. Should be the product of
     * quantity and unit_price.
     */
    total_price?: number | undefined;
  };
}
