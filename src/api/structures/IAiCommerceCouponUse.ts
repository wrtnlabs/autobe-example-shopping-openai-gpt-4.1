import { tags } from "typia";

/**
 * Represents a coupon redemption event; includes coupon issue, redeemed user,
 * status, timestamp, and optional order link.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceCouponUse = {
  /** Unique identifier for the coupon use event (redemption record). */
  id: string & tags.Format<"uuid">;

  /** Reference to the issued coupon instance (ai_commerce_coupon_issues.id). */
  coupon_issue_id: string & tags.Format<"uuid">;

  /** User who redeemed the coupon. */
  user_id: string & tags.Format<"uuid">;

  /** Status of the coupon use event, e.g. 'redeemed', 'revoked', 'failed'. */
  status: string;

  /** Timestamp that coupon was redeemed (ISO 8601). */
  redeemed_at: string & tags.Format<"date-time">;

  /**
   * Order associated with this coupon use (if any). Null if not linked to
   * order.
   */
  order_id?: (string & tags.Format<"uuid">) | null | undefined;
};
export namespace IAiCommerceCouponUse {
  /**
   * Filter and pagination for searching coupon use events. All properties are
   * optional.
   */
  export type IRequest = {
    /**
     * Filter by coupon use status, e.g., 'redeemed', 'failed', 'revoked',
     * etc.
     */
    status?: string | undefined;

    /** Filter by user uuid. */
    user_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by issued coupon reference (uuid). */
    coupon_issue_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by redemption/usage period: start (ISO 8601). */
    from?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by redemption/usage period: end (ISO 8601). */
    to?: (string & tags.Format<"date-time">) | undefined;

    /** Filter by order id (uuid). */
    order_id?: (string & tags.Format<"uuid">) | undefined;

    /** Paging: page number. Optional, default 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Paging: max entries to return (default 20, max 500). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<500>)
      | undefined;
  };

  /**
   * Request body for creating a coupon use record. Required: issued coupon
   * id, user id, status, redeemed_at. Optional: order_id.
   */
  export type ICreate = {
    /**
     * Required. Unique identifier of the issued coupon
     * (ai_commerce_coupon_issues.id).
     */
    coupon_issue_id: string & tags.Format<"uuid">;

    /** Required. The user who is redeeming the coupon. */
    user_id: string & tags.Format<"uuid">;

    /**
     * Optional. The order the coupon was used for, or omitted if not
     * applicable.
     */
    order_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Required. Status at creation. Usually 'redeemed', but may be 'failed'
     * or as allowed by business rules.
     */
    status: string;

    /** Required. ISO 8601 timestamp when the coupon was redeemed. */
    redeemed_at: string & tags.Format<"date-time">;
  };

  /** Request DTO for updating an existing coupon use/redemption record. */
  export type IUpdate = {
    /**
     * Coupon issue ID this usage is tied to. References the base coupon
     * issue entry.
     */
    coupon_issue_id?: string | undefined;

    /** User or account who redeemed the coupon. */
    redeemed_by?: string | undefined;

    /** Order ID where the coupon was used. Null if not linked to an order. */
    order_id?: string | null | undefined;

    /** Redemption timestamp (ISO 8601). Null if not yet redeemed. */
    redeemed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Redemption status: valid values depend on business rules (success,
     * rejected, failed, revoked, etc).
     */
    status?: string | undefined;
  };
}
