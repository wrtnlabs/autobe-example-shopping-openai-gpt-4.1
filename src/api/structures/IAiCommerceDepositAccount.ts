import { tags } from "typia";

/**
 * Deposit/e-wallet account for user, supporting top-up (recharge), withdrawal,
 * payment, and refund, with audit/compliance fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAiCommerceDepositAccount = {
  /**
   * Unique identifier for the deposit account record
   * (ai_commerce_deposit_accounts.id)
   */
  id: string & tags.Format<"uuid">;

  /**
   * System/business identifier for account (unique, tracks user association,
   * may be displayed or internal).
   */
  account_code: string;

  /**
   * UUID of the user associated with this account (references buyer/seller as
   * per platform role), ai_commerce_buyer.id or seller id.
   */
  user_id: string & tags.Format<"uuid">;

  /** Current deposit balance in this account for user (must be non-negative). */
  balance: number;

  /** ISO 4217 currency code for the deposit account (e.g., 'KRW', 'USD'). */
  currency_code: string;

  /** Current status of account ('active', 'suspended', 'closed', etc). */
  status: string;

  /** Timestamp/account creation time. */
  created_at: string & tags.Format<"date-time">;

  /** Last updated/account modification time. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp for logical removal; null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IAiCommerceDepositAccount {
  /**
   * Request/filters for searching/listing deposit accounts for admin review
   * and analytics. All properties are optional; only supplied filters are
   * applied.
   */
  export type IRequest = {
    /** Filter deposit accounts belonging to this user. */
    user_id?: (string & tags.Format<"uuid">) | undefined;

    /** Optional filter for account status (active/suspended/closed, etc). */
    status?: string | undefined;

    /** Optional currency filter (ISO 4217, e.g., 'KRW'). */
    currency_code?: string | undefined;

    /** Page of results (pagination, default 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Max results per page (pagination, default 20, max 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /** Sort order (e.g., 'created_at desc', 'balance asc'). */
    sort?: string | undefined;
  };

  /**
   * Create a new deposit account for a user/seller. All fields are required
   * and correspond directly to database columns (see
   * ai_commerce_deposit_accounts schema).
   */
  export type ICreate = {
    /**
     * User's unique identifier (UUID) owning the deposit account. This
     * field is required and must refer to a valid ai_commerce_buyer or
     * seller as described in the schema. Example:
     * '15de455e-385f-4c99-ba2a-eab44c7e13ce'.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * Account code uniquely identifying the deposit account for the user.
     * This is a business-assigned code and must be unique (see @@unique
     * constraint in schema). Example: 'DA-20231101-001'.
     */
    account_code: string;

    /**
     * Initial numeric balance for the deposit account at creation. This is
     * a float value, typically set to 0.0 as most accounts start empty but
     * may be non-zero for administrative adjustment. Example: 0.0.
     */
    balance: number;

    /**
     * Currency code in ISO 4217 format representing the currency for the
     * deposit balance. Example: 'KRW' or 'USD'.
     */
    currency_code: string;

    /**
     * Account status. Allowed values are 'active' or 'suspended'. Use only
     * these exact values due to business requirements. Example: 'active'.
     */
    status: string;
  };

  /**
   * Updates for deposit account. All fields are optional and only updatable
   * per business rules. See ai_commerce_deposit_accounts schema
   * documentation.
   */
  export type IUpdate = {
    /**
     * Account status update. Only allowed values are 'active' or
     * 'suspended' (must match allowed enum values in business logic).
     */
    status?: string | undefined;

    /** Update the deposit account's currency code (ISO 4217 string). */
    currency_code?: string | undefined;
  };
}
