import { tags } from "typia";

/**
 * A payment record associated with a shopping mall order. Tracks each payment,
 * refund, or settlement method flow. Includes support for asynchronous payment,
 * multiple partial payments, per-channel payment configuration. Indexed for
 * audit/tracing.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallPayment = {
  /** Primary key. Unique identifier of the payment record. */
  id: string & tags.Format<"uuid">;

  /**
   * Linked order id from shopping_mall_orders. Identifies which order this
   * payment is for.
   */
  shopping_mall_order_id: string & tags.Format<"uuid">;

  /** Paying customer id from shopping_mall_customers. */
  shopping_mall_customer_id: string & tags.Format<"uuid">;

  /**
   * Type of payment. E.g.: 'card', 'virtual_account', 'deposit', 'mileage',
   * 'split', etc.
   */
  payment_type: string;

  /**
   * External system payment reference string, such as a PSP transaction ID,
   * virtual account number, or payment gateway reference. Nullable for
   * payment types that do not use an external payment system (e.g., internal
   * deposit, mileage, etc.).
   */
  external_payment_ref?: string | null | undefined;

  /**
   * Payment status. E.g.: 'pending', 'paid', 'cancelled', 'failed',
   * 'refunded', etc.
   */
  status: string;

  /** Amount covered by this payment. */
  amount: number;

  /** Currency of transaction (system supports multi-currency). */
  currency: string;

  /** Time payment was initiated (ISO-8601 UTC format). */
  requested_at: string & tags.Format<"date-time">;

  /**
   * Timestamp (ISO 8601) when this payment was confirmed by the business
   * logic, payment processor, or settlement module. Null if not yet
   * confirmed.
   */
  confirmed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp (ISO 8601) when payment was cancelled/refunded. Null if not
   * cancelled/refunded.
   */
  cancelled_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Row creation time (for audit trail). */
  created_at: string & tags.Format<"date-time">;

  /** Row last update time (for audit trail). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp if the payment has been logically deleted for
   * compliance/evidence. Null if not logically deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallPayment {
  /**
   * Search filter and pagination request schema for listing and retrieving
   * payment records tied to shopping_mall_orders via shopping_mall_payments.
   * All fields are optional, supporting complex business filter logic for
   * audit, reconciliation, analytics, or support/CS scenarios. Pagination
   * fields follow system conventions. The schema aligns with business
   * requirements for robust payment analytics, fraud review, and
   * refund/investigation workflows. Do not include fields that do not exist
   * in the shopping_mall_payments table.
   */
  export type IRequest = {
    /** Specific payment record (UUID) to retrieve or operate on (optional). */
    payment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Order UUID for which to list or search payment records (optional; if
     * not provided, returns all matching payments accessible in scope).
     */
    shopping_mall_order_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Type of payment to filter for (e.g., 'card', 'virtual_account',
     * 'deposit', 'mileage', 'split', etc). Enum defined by business logic;
     * optional.
     */
    payment_type?: string | undefined;

    /**
     * Payment status to filter for (e.g., 'pending', 'paid', 'cancelled',
     * 'failed', 'refunded', etc). Enum defined by business logic.
     * Optional.
     */
    status?: string | undefined;

    /**
     * ISO 8601 starting timestamp filter—include only payments on or after
     * this date (optional).
     */
    date_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO 8601 ending timestamp filter—include only payments on or before
     * this date (optional).
     */
    date_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Currency code filter (optional)—search only payments matching a given
     * currency, e.g., 'USD', 'KRW', etc.
     */
    currency?: string | undefined;

    /**
     * External payment reference string (optional) for searching on a
     * specific gateway/provider/payment system's reference field.
     */
    external_payment_ref?: string | undefined;

    /**
     * Pagination control: page number (starts at 1). Optional; default is
     * 1.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Pagination control: number of payments per page. Optional; default is
     * 20, maximum is 100.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Information required to create a new payment record for an order.
   * Includes payment type, status, order/customer linkage, amount, currency,
   * external ref, and timestamp. Follows shopping_mall_payments schema.
   */
  export type ICreate = {
    /** Linked order {@link shopping_mall_orders.id}. */
    shopping_mall_order_id: string & tags.Format<"uuid">;

    /** Paying customer {@link shopping_mall_customers.id}. */
    shopping_mall_customer_id: string & tags.Format<"uuid">;

    /**
     * Payment type (e.g., 'card', 'virtual_account', 'deposit', 'mileage',
     * 'split').
     */
    payment_type: string;

    /**
     * External system payment reference string such as third-party
     * transaction id, PSP ref, or virtual account number. Nullable for
     * payment types that do not use an external ref (e.g., internal
     * deposit, mileage, etc.).
     */
    external_payment_ref?: string | null | undefined;

    /** Initial payment status (e.g., 'pending'). */
    status: string;

    /** Amount covered by this payment. */
    amount: number;

    /** Currency of transaction (system supports multi-currency). */
    currency: string;

    /** Time payment was requested/initiated (ISO-8601 UTC format). */
    requested_at: string & tags.Format<"date-time">;
  };

  /**
   * Fields that can be updated on a payment record. All fields are optional;
   * use only to update payment type, status, external ref, amount, times, or
   * currency as per payment update API.
   */
  export type IUpdate = {
    /** Payment type to update (e.g., 'card', 'virtual_account', etc.). */
    payment_type?: string | undefined;

    /**
     * External payment system reference to update to (e.g., PSP ref,
     * virtual account id, etc.). May be set to null to clear existing ref.
     */
    external_payment_ref?: string | null | undefined;

    /**
     * Update the status of the payment record (e.g., 'paid', 'cancelled',
     * etc.).
     */
    status?: string | undefined;

    /** Update the amount, if correction/adjustment is required. */
    amount?: number | undefined;

    /**
     * Currency of the payment after update (if adjustment/spillover
     * occurs).
     */
    currency?: string | undefined;

    /** Updated ISO8601 time (UTC) payment request was sent, if changed. */
    requested_at?: (string & tags.Format<"date-time">) | undefined;

    /** Updated confirmation time (ISO8601, UTC). Null if not applicable. */
    confirmed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Updated cancellation/refund time (ISO8601, UTC). Null if not
     * cancelled/refunded.
     */
    cancelled_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Update timestamp (should be set to the request/audit event time if
     * provided, otherwise handled by backend).
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Summary DTO for a payment record in the AI-driven shopping mall platform,
   * representing key payment attributes for list/render contexts. This
   * summary includes essential reference, status, amount, and audit metadata.
   * Suitable for list/pagination operations as returned from
   * /orders/{orderId}/payments, and aligns with shopping_mall_payments schema
   * documentation.
   *
   * Properties are derived from actual columns in shopping_mall_payments. For
   * complete details, use the full IShoppingMallPayment definition.
   */
  export type ISummary = {
    /**
     * Unique identifier for this payment entry within the platform,
     * corresponding to shopping_mall_payments.id.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Type of payment: e.g., 'card', 'virtual_account', 'deposit',
     * 'mileage', 'split', as specifically recorded in
     * shopping_mall_payments.payment_type.
     */
    payment_type: string;

    /**
     * Payment status: possible values include 'pending', 'paid',
     * 'cancelled', 'failed', 'refunded', etc. From
     * shopping_mall_payments.status.
     */
    status: string;

    /**
     * Amount covered by this payment. Always a non-negative value, drawn
     * from shopping_mall_payments.amount.
     */
    amount: number;

    /**
     * Currency code for this payment. From shopping_mall_payments.currency.
     * Should be an ISO currency code.
     */
    currency: string;

    /**
     * UUID of the shopping mall customer making or consuming this payment.
     * Schema: shopping_mall_payments.shopping_mall_customer_id.
     */
    customer_id: string & tags.Format<"uuid">;

    /**
     * UUID of the related order. Schema:
     * shopping_mall_payments.shopping_mall_order_id.
     */
    order_id: string & tags.Format<"uuid">;

    /**
     * Timestamp when payment was requested/initiated. From
     * shopping_mall_payments.requested_at.
     */
    requested_at: string & tags.Format<"date-time">;

    /**
     * Timestamp the payment was successfully confirmed. Nullable; from
     * shopping_mall_payments.confirmed_at.
     */
    confirmed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Timestamp for payment cancellation/refund event, if this ever
     * occurred. Nullable field from shopping_mall_payments.cancelled_at.
     */
    cancelled_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
