import { tags } from "typia";

/**
 * System audit trail/log entry. Each entry is immutable and append-only. Used
 * for regulatory and business evidence. Prisma:
 * shopping_mall_ai_backend_system_audit_trails. Includes event type, actor,
 * context details, and optional machine-readable metadata.
 *
 * Entries are indexed for event type, actor, and business description.
 * 'metadata' field is free-form JSON or text, derived from evidence source.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendSystemAuditTrail = {
  /** Audit trail primary key. */
  id: string & tags.Format<"uuid">;

  /**
   * Type of event (enum: config_change, access, permission, error, etc.).
   * Schema may document exact enums elsewhere.
   */
  event_type: string;

  /** Reference to user/admin/actor who triggered the event. */
  actor_id: string & tags.Format<"uuid">;

  /** Human-readable business context/event details. */
  description: string;

  /** Optional serialized metadata for extra event context or evidence. */
  metadata?: string | null;

  /** Timestamp of event occurrence, used for chronological evidence. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IShoppingMallAiBackendSystemAuditTrail {
  /**
   * Search, filter, and pagination for audit trail records. Supports
   * event_type filtering, actor lookup, date bounds, and description keyword
   * search. Used for compliance dashboards, operational audit, and ad-hoc
   * investigation queries.
   */
  export type IRequest = {
    /** Filter for specific event_type (match or partial). */
    event_type?: string;

    /** Actor ID (UUID). Filter for only events by this actor. */
    actor_id?: string;

    /** Partial or full search within business context field. */
    description?: string | null;

    /** Filter for events created on or after this ISO 8601 time. */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** Filter for events created on or before this time. */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /** Field to sort results (e.g., 'created_at', 'event_type'). */
    sort_by?: string;

    /** Sort order. */
    order?: "asc" | "desc";

    /** Page number for results. */
    page?: number;

    /** Results per page. */
    limit?: number;
  };
}
