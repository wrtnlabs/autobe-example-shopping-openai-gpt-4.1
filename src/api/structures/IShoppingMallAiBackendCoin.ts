import { tags } from "typia";

/**
 * Coin wallet ledger for customer/seller promotional/event value accounting.
 * Used for wallet-based promotions, campaign distribution, and compliance
 * evidence. References customer or seller as owner. Used for analytics and
 * regulatory reconciliation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendCoin = {
  /**
   * Globally unique identifier for this coin wallet entity, as a UUID. Used
   * for all business lookup, update, and evidence referencing throughout the
   * system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique identifier for the customer who owns this coin wallet. Nullable if
   * this wallet is owned by a seller, not a customer. Used to link wallet to
   * customer context for loyalty, refund, campaign, or transaction
   * workflows.
   */
  shopping_mall_ai_backend_customer_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Unique identifier for the seller who owns this coin wallet. Nullable if
   * wallet is customer-owned. Used to connect wallet with marketplace sellers
   * for business analytics, settlement, and promotional credits.
   */
  shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Total value of all coins ever granted or accrued (including
   * expired/lost/used). Used for analytics and regulatory audit.
   */
  total_accrued: number;

  /**
   * Current usable balance of coins available to the account holder. Subset
   * of total accrued less used, expired, or on hold coins.
   */
  usable_coin: number;

  /**
   * Total value of coins in this wallet that have expired and are thus no
   * longer usable.
   */
  expired_coin: number;

  /**
   * Total value of coins temporarily on hold for review, withdrawal, or
   * compliance issues. These coins cannot be used until released.
   */
  on_hold_coin: number;

  /**
   * Timestamp of coin wallet creation as ISO date-time. Used in audit log,
   * history, and reporting.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update to this coin wallet. Used for audit trails and
   * evidence tracking.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Logical deletion timestamp (ISO date-time) for regulatory evidence and
   * compliance. Null if coin wallet is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendCoin {
  /**
   * Request body structure for creating a coin wallet ledger for
   * customer/seller. Includes required balances and optional owner
   * identification.
   */
  export type ICreate = {
    /**
     * Optional: UUID of customer to own this new coin wallet. Nullable if
     * this is a seller wallet.
     */
    shopping_mall_ai_backend_customer_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /**
     * Optional: UUID of seller to own this new coin wallet. Nullable if
     * this is a customer wallet.
     */
    shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Initial value for total coins ever granted (must be 0 or greater; use
     * 0 when first created).
     */
    total_accrued: number;

    /**
     * Initial balance of usable coins in this wallet (must be 0 or
     * greater).
     */
    usable_coin: number;

    /** Initial expired coins value (usually 0 on creation). */
    expired_coin: number;

    /** Amount of coins to place on hold at creation (typically 0). */
    on_hold_coin: number;
  };

  /**
   * Request structure for advanced search, pagination, or filtering when
   * querying coin wallet ledgers. Fields are all optional. Used for admin and
   * analytical tools.
   */
  export type IRequest = {
    /** Optional filter for owner customer ID. */
    shopping_mall_ai_backend_customer_id?:
      | (string & tags.Format<"uuid">)
      | null;

    /** Optional filter for owner seller ID. */
    shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

    /** Minimum usable coin balance filter. */
    min_usable_coin?: number;

    /** Maximum usable coin balance filter. */
    max_usable_coin?: number;

    /**
     * Lower bound (inclusive) timestamp (ISO date-time) for coin wallet
     * creation.
     */
    created_from?: string & tags.Format<"date-time">;

    /**
     * Upper bound (inclusive) timestamp (ISO date-time) for coin wallet
     * creation.
     */
    created_to?: string & tags.Format<"date-time">;

    /** Result page number (default 1). */
    page?: number & tags.Type<"int32">;

    /** Maximum number of results per page (default 100). */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Fields available for updating a coin wallet ledger via admin or system
   * API call. All properties optional; system determines audit/consistency.
   * Used for business correction, incident handling, or reconciliation.
   * Normal users may not arbitrarily change balances.
   */
  export type IUpdate = {
    /**
     * If set, new total coin value (must reflect true issued/used/expired
     * sum for audit purposes, admin/system only).
     */
    total_accrued?: number;

    /** If set, adjusted usable coin balance for this wallet. */
    usable_coin?: number;

    /** If set, replacement value for expired coins. */
    expired_coin?: number;

    /**
     * If set, new value for coin balance held (typically for
     * incident/compliance reasons).
     */
    on_hold_coin?: number;
  };
}
