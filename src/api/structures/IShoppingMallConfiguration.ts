import { tags } from "typia";

/**
 * Represents a configurable business or platform setting, scoped globally or to
 * a particular channel. Supports versioning/auditing, soft delete, and
 * descriptive business/explanation metadata. Matches
 * shopping_mall_configurations Prisma schema columns.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallConfiguration = {
  /**
   * Primary key for configuration record. Universally unique and references a
   * single versioned configuration entity.
   */
  id: string & tags.Format<"uuid">;

  /**
   * If present, indicates which shopping mall channel this configuration is
   * scoped to. Null indicates a global configuration entry. Foreign key to
   * shopping_mall_channels table.
   */
  shopping_mall_channel_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Business-level key or identifier for this configuration. Example:
   * 'feature_flag_shipping', 'legal_policy_en', 'default_currency'.
   */
  key: string;

  /**
   * The configuration's value as a text/blob. May be JSON, plain text, or
   * rendered HTML. The format depends on the configuration key and is
   * determined by business logic or frontend expectation.
   */
  value: string;

  /**
   * Sequential revision/version number for this configuration entry.
   * Incremented on every value update, allowing for snapshot history and
   * rollback.
   */
  revision: number & tags.Type<"int32">;

  /**
   * Optional explanation or business context of the configuration value. Used
   * for documentation, business audit, or admin UI display.
   */
  description?: string | null | undefined;

  /** Timestamp (ISO-8601, UTC) when this configuration record was created. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp (ISO-8601, UTC) when this configuration record was last
   * modified.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp. If set, this record is logically deleted,
   * retained for audit and compliance, but omitted from active business
   * operations.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IShoppingMallConfiguration {
  /**
   * Request structure for filtering, searching, and paginating configuration
   * records in shopping_mall_configurations. Used by admin users or system
   * UIs to efficiently query global and channel-specific config with
   * fine-grained search and sorting.
   */
  export type IRequest = {
    /**
     * Optional filter to retrieve only configuration records scoped to a
     * specific channel. References the shopping_mall_channels table primary
     * key. If omitted, results may include both global and channel-specific
     * records.
     */
    shopping_mall_channel_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Filter for configuration records matching this business-level key
     * (e.g., 'feature_flag_shipping', 'legal_policy_en'). Partial matches
     * supported for search. Used to narrow down results to relevant
     * configuration categories.
     */
    key?: string | undefined;

    /**
     * Optional filter for configuration records with a specific
     * revision/version number. Used to audit or retrieve a particular
     * snapshot in time for configuration records.
     */
    revision?: (number & tags.Type<"int32">) | undefined;

    /**
     * Filter on the description field for full-text search across
     * configuration explanations or business context annotations.
     */
    description?: string | undefined;

    /**
     * Filter to return only configuration records created after this
     * ISO-8601 UTC timestamp.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter to return only configuration records created before this
     * ISO-8601 UTC timestamp.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter to return only configuration records updated after this
     * ISO-8601 UTC timestamp.
     */
    updated_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter to return only configuration records updated before this
     * ISO-8601 UTC timestamp.
     */
    updated_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * If true, include logically deleted (soft-deleted) configuration
     * records (where deleted_at is set). If false or omitted, only return
     * active/non-deleted records.
     */
    deleted?: boolean | undefined;

    /**
     * Pagination: The page number of results to return. Must be a positive
     * integer.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Pagination: Maximum number of results per page. Typical default is
     * 50-100; higher values may be restricted for performance.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sort field for result ordering. Enum: 'created_at', 'updated_at',
     * 'revision', 'key'.
     */
    sort_by?: "created_at" | "updated_at" | "revision" | "key" | undefined;

    /**
     * Sort direction for ordering by sort_by field. Enum: 'asc', 'desc',
     * default is 'desc' (most recent first).
     */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * DTO for creating (inserting) a new configuration record in
   * shopping_mall_configurations. Must populate required columns and
   * optionally provide channel association and business description.
   */
  export type ICreate = {
    /**
     * (Optional/nullable) Channel ID for channel-scoped configuration
     * (foreign key to shopping_mall_channels.id). If omitted or null,
     * configuration is global.
     */
    shopping_mall_channel_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Unique business-level identifier for the configuration record. Must
     * not duplicate an existing key within the same channel (if present).
     */
    key: string;

    /**
     * The configuration's initial value. Accepts string, JSON, or text as
     * determined by business logic.
     */
    value: string;

    /**
     * Initial revision number for the configuration. Usually set to 1 on
     * creation.
     */
    revision: number & tags.Type<"int32">;

    /**
     * Optional business/administrative explanation of the configuration's
     * business meaning.
     */
    description?: string | null | undefined;
  };

  /**
   * DTO for updating an existing configuration record in
   * shopping_mall_configurations. All properties optional, only present
   * fields will be applied. Immutable fields (id, created_at) cannot be
   * updated from this DTO.
   */
  export type IUpdate = {
    /**
     * (Optional/nullable) If present, updates the channel-scope of this
     * configuration record.
     */
    shopping_mall_channel_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * (Optional) If provided, updates the configuration's key/identifier.
     * Must maintain overall key uniqueness within channel/business scope.
     */
    key?: string | undefined;

    /**
     * (Optional) If provided, updates the configuration value. Allows
     * changes to arbitrary text/JSON content, depending on business
     * policy.
     */
    value?: string | undefined;

    /**
     * (Optional) If provided, sets the new revision/version number for this
     * configuration entry. Should be incremented in business logic.
     */
    revision?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional admin/business explanation of the configuration value or its
     * change.
     */
    description?: string | null | undefined;

    /**
     * (Optional for admin/Audit use) If present, marks the configuration as
     * logically deleted with a UTC timestamp. Null value can un-delete.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
