import { tags } from "typia";

/**
 * Mileage points transaction record for accrual, usage, or compliance
 * adjustments. Logs one event for a mileage (points) ledger; used for
 * rewards/loyalty evidence. Immutable by business rule. Supports customer and
 * seller.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IShoppingMallAiBackendMileageTransaction = {
  /** Event UUID primary key. */
  id: string & tags.Format<"uuid">;

  /** Target mileage ledger UUID. */
  shopping_mall_ai_backend_mileage_id: string & tags.Format<"uuid">;

  /** Customer UUID if applicable. */
  shopping_mall_ai_backend_customer_id?: (string & tags.Format<"uuid">) | null;

  /** Seller UUID if applicable. */
  shopping_mall_ai_backend_seller_id?: (string & tags.Format<"uuid">) | null;

  /** Transaction type: accrual, use, expire, admin_adjust, etc. */
  change_type: string;

  /** Amount (positive or negative based on event context). */
  amount: number;

  /** Source event reference (order, promo, campaign, etc). */
  transaction_reference?: string | null;

  /** Ledger state before event. */
  mileage_before: number;

  /** Ledger state after event. */
  mileage_after: number;

  /** Code describing business/process reason. */
  reason_code?: string | null;

  /** Free-text for audit, compliance, fraud flag, etc. */
  description?: string | null;

  /** Datetime of transaction (ISO8601+TZ). */
  created_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp if record is logically deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IShoppingMallAiBackendMileageTransaction {
  /**
   * Request model for paginating and searching a mileage transaction log
   * (history).
   */
  export type IRequest = {
    /** Page number to retrieve. */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /** Records per page. */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;
  };

  /**
   * Summary view item for a single mileage point transaction, providing
   * reference linkage and main evidence for dashboards or reporting needs.
   */
  export type ISummaryItem = {
    /**
     * Unique summary record identifier for the transaction event, globally
     * unique UUID.
     */
    id: string & tags.Format<"uuid">;

    /** Parent mileage ledger UUID for tracing event in user/seller context. */
    shopping_mall_ai_backend_mileage_id: string & tags.Format<"uuid">;

    /**
     * Type of business event for this transaction, business/loyalty
     * defined.
     */
    change_type: string;

    /**
     * Transaction value added (accrual), used, or expired (negative sign
     * for use or loss).
     */
    amount: number;

    /**
     * External or system reference, such as order code or incident
     * reference.
     */
    transaction_reference?: string | null;

    /** Ledger balance before this transaction was posted. */
    mileage_before: number;

    /** Ledger balance after transaction posts. */
    mileage_after: number;

    /** Audit/business reason code. */
    reason_code?: string | null;

    /**
     * Business narrative/notes for this transaction (for audit, evidence,
     * or analytics).
     */
    description?: string | null;

    /** Ledger event timestamp (ISO date-time) for this summary. */
    created_at: string & tags.Format<"date-time">;

    /** Soft deletion timestamp or null if active, used for compliance. */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}
