import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendArticleComment } from "../../../../structures/IShoppingMallAiBackendArticleComment";
import { IPageIShoppingMallAiBackendArticleComment } from "../../../../structures/IPageIShoppingMallAiBackendArticleComment";

/**
 * Search and retrieve comments for a specific article, with pagination and
 * filtering.
 *
 * Retrieves a paginated, filterable list of comments belonging to a specific
 * article. Supports filtering by author, status, secret flag, date, or
 * full-text comment body search. Results are summarized for efficient display
 * in lists, feeds, or moderation dashboards. This endpoint is public for
 * viewing comments, but business logic may restrict access to private comments
 * or certain statuses depending on user role.
 *
 * Pagination and sort parameters optimize comment navigation for large
 * articles. Only comments not marked as deleted are returned, and visibility
 * follows business logic for author, reader, and moderator roles.
 *
 * @param props.connection
 * @param props.articleId Unique identifier of the parent article for the
 *   comments.
 * @param props.body Search/filter/pagination/sort parameters for comments on
 *   the article.
 * @path /shoppingMallAiBackend/articles/:articleId/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the parent article for the comments. */
    articleId: string & tags.Format<"uuid">;

    /** Search/filter/pagination/sort parameters for comments on the article. */
    body: IShoppingMallAiBackendArticleComment.IRequest;
  };
  export type Body = IShoppingMallAiBackendArticleComment.IRequest;
  export type Response = IPageIShoppingMallAiBackendArticleComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/articles/:articleId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/articles/${encodeURIComponent(props.articleId ?? "null")}/comments`;
  export const random =
    (): IPageIShoppingMallAiBackendArticleComment.ISummary =>
      typia.random<IPageIShoppingMallAiBackendArticleComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("articleId")(() => typia.assert(props.articleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
