import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendArticle } from "../../../structures/IShoppingMallAiBackendArticle";
import { IPageIShoppingMallAiBackendArticle } from "../../../structures/IPageIShoppingMallAiBackendArticle";
export * as comments from "./comments";

/**
 * Search and retrieve a paginated list of articles, supporting filtering and
 * sorting.
 *
 * Retrieves a paginated, filterable list of articles with support for full-text
 * search, filtering by channel, author, status (draft, published, archived,
 * hidden), date range, title, and content. Suitable for use in browsing feeds,
 * management dashboards, or advanced search UI.
 *
 * This endpoint is public, allowing both authenticated and unauthenticated
 * users to search articles, but certain fields such as drafts or archived posts
 * may be restricted based on user role (filtered in business logic). The
 * operation employs efficient pagination and returns summarized article data,
 * enabling scalable UI rendering and rapid navigation through large article
 * sets.
 *
 * Request body parameters include pagination settings, filters, and sort
 * criteria. Responses provide the total count and detailed page of article
 * summaries with essential metadata for UI rendering.
 *
 * @param props.connection
 * @param props.body Search, filter, pagination, and sort parameters for
 *   retrieving a list of articles.
 * @path /shoppingMallAiBackend/articles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, pagination, and sort parameters for retrieving a list
     * of articles.
     */
    body: IShoppingMallAiBackendArticle.IRequest;
  };
  export type Body = IShoppingMallAiBackendArticle.IRequest;
  export type Response = IPageIShoppingMallAiBackendArticle.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/articles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/articles";
  export const random = (): IPageIShoppingMallAiBackendArticle.ISummary =>
    typia.random<IPageIShoppingMallAiBackendArticle.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific article by ID.
 *
 * Fetches the full detail for a single article specified by its UUID. Returns
 * all business-relevant data including title, content body, meta fields, and
 * evidence fields. The operation ensures hidden, archived, or deleted articles
 * are not displayed to unauthorized users, following business logic. Articles
 * tied to compliance or audit evidence are preserved per data retention
 * policy.
 *
 * Clients use this endpoint for reading the full article, supporting content
 * pages, content previews, or compliance display. Authorization is handled so
 * drafts/hidden/archived articles are only available to users with the correct
 * role or during content creation flows. Attempts to fetch deleted or
 * restricted articles return appropriate errors or a not found status.
 *
 * @param props.connection
 * @param props.articleId Unique identifier of the article to retrieve.
 * @path /shoppingMallAiBackend/articles/:articleId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the article to retrieve. */
    articleId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendArticle;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/articles/:articleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/articles/${encodeURIComponent(props.articleId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendArticle =>
    typia.random<IShoppingMallAiBackendArticle>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("articleId")(() => typia.assert(props.articleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
