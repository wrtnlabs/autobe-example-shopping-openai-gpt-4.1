import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCartItem } from "../../../../../structures/IShoppingMallAiBackendCartItem";
import { IPageIShoppingMallAiBackendCartItem } from "../../../../../structures/IPageIShoppingMallAiBackendCartItem";

/**
 * Adds an item to a user's cart by cartId, specifying product snapshot and
 * quantity. (shopping_mall_ai_backend_cart_items).
 *
 * Add a new item to an existing shopping cart identified by cartId. The
 * operation allows specifying a product snapshot and quantity, along with
 * applicable product options and variant/bundle selection if available. The
 * function validates product eligibility, inventory, and enforces cart-level
 * constraints (e.g., only one entry per product option combination, maximum
 * cart size, business policies). All relevant evidence and audit details are
 * attached as required for traceability and rollback in pre-checkout workflow.
 * Security checks ensure that only the cart owner (or session-bound guest) may
 * perform this action, and failures (inventory constraint or invalid request)
 * result in descriptive error codes.
 *
 * @param props.connection
 * @param props.cartId Target cart's unique identifier (UUID).
 * @param props.body Details for the new cart item to be created, including
 *   product snapshot, quantity, options, and bundle selection if applicable.
 * @path /shoppingMallAiBackend/customer/carts/:cartId/items
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target cart's unique identifier (UUID). */
    cartId: string & tags.Format<"uuid">;

    /**
     * Details for the new cart item to be created, including product
     * snapshot, quantity, options, and bundle selection if applicable.
     */
    body: IShoppingMallAiBackendCartItem.ICreate;
  };
  export type Body = IShoppingMallAiBackendCartItem.ICreate;
  export type Response = IShoppingMallAiBackendCartItem;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/customer/carts/:cartId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items`;
  export const random = (): IShoppingMallAiBackendCartItem =>
    typia.random<IShoppingMallAiBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginate and filter items inside a shopping cart by cartId.
 *
 * Search and paginate items within a specific shopping cart.
 *
 * This API call enables a detailed review of all items currently present in a
 * single cart, allows for filtering by item attributes (quantity, bundle_code,
 * note, etc.), and supports paginated result navigation. Its primary use is
 * during checkout, customer review, or for administrative support. All access
 * is permission checked to ensure only cart owners or authorized personnel may
 * view the item list. Attempts to view unauthorized or deleted carts will yield
 * an error.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the cart whose items are being
 *   listed (UUID).
 * @param props.body Query and pagination configuration for cart items listing
 * @path /shoppingMallAiBackend/customer/carts/:cartId/items
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the cart whose items are being listed (UUID). */
    cartId: string & tags.Format<"uuid">;

    /** Query and pagination configuration for cart items listing */
    body: IShoppingMallAiBackendCartItem.IRequest;
  };
  export type Body = IShoppingMallAiBackendCartItem.IRequest;
  export type Response = IPageIShoppingMallAiBackendCartItem;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/customer/carts/:cartId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items`;
  export const random = (): IPageIShoppingMallAiBackendCartItem =>
    typia.random<IPageIShoppingMallAiBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * View a single cart item and its full attributes by itemId and cartId.
 *
 * Get the full details of a specific item in a shopping cart, including
 * quantity, bundle selection, option codes, and note. The operation is critical
 * for customers to verify, edit, or delete cart items before checkout. All item
 * details, including references to the snapshot of the product at the
 * add-to-cart time, are provided. Unauthorized access to items in another
 * user's cart returns an error.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the cart holding the item (UUID).
 * @param props.itemId Unique identifier of the item to view inside the cart
 *   (UUID).
 * @path /shoppingMallAiBackend/customer/carts/:cartId/items/:itemId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the cart holding the item (UUID). */
    cartId: string & tags.Format<"uuid">;

    /** Unique identifier of the item to view inside the cart (UUID). */
    itemId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCartItem;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/customer/carts/:cartId/items/:itemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCartItem =>
    typia.random<IShoppingMallAiBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("itemId")(() => typia.assert(props.itemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Updates fields of a cart item by itemId within cartId.
 * (shopping_mall_ai_backend_cart_items).
 *
 * Update an existing item in a shopping cart. The endpoint allows the client to
 * change details like quantity, selected options, bundle, and associated notes
 * for the item identified by itemId within cartId. Item update logic enforces
 * all business rules for cart consistency, product eligibility, and inventory.
 * On success, a new evidence snapshot is created. The user must have permission
 * to modify the cart (either owner/member or a linked guest session). Errors
 * are clearly described if constraints are violated (e.g., quantity exceeds
 * stock, unauthorized action).
 *
 * @param props.connection
 * @param props.cartId Target cart's unique identifier (UUID).
 * @param props.itemId Target cart item's identifier (UUID).
 * @param props.body Fields to update for the cart item, such as quantity,
 *   option selection, bundle, or note.
 * @path /shoppingMallAiBackend/customer/carts/:cartId/items/:itemId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target cart's unique identifier (UUID). */
    cartId: string & tags.Format<"uuid">;

    /** Target cart item's identifier (UUID). */
    itemId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the cart item, such as quantity, option
     * selection, bundle, or note.
     */
    body: IShoppingMallAiBackendCartItem.IUpdate;
  };
  export type Body = IShoppingMallAiBackendCartItem.IUpdate;
  export type Response = IShoppingMallAiBackendCartItem;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/customer/carts/:cartId/items/:itemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCartItem =>
    typia.random<IShoppingMallAiBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("itemId")(() => typia.assert(props.itemId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft deletes a specific item from a user's cart using cartId and itemId.
 * (shopping_mall_ai_backend_cart_items).
 *
 * Delete a cart item from the user's cart. This endpoint performs a soft
 * deletion of the item (setting deleted_at timestamp) to maintain evidence and
 * enable compliance with business and legal data retention policies. Only the
 * cart owner or session-linked guest has permission to delete items. The
 * endpoint will fail with a clear error if attempting to delete an item that is
 * locked or referenced by an in-progress order. Evidence and audit detail are
 * also preserved for rollback and review.
 *
 * @param props.connection
 * @param props.cartId Target cart's unique identifier (UUID).
 * @param props.itemId Target cart item's identifier (UUID).
 * @path /shoppingMallAiBackend/customer/carts/:cartId/items/:itemId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target cart's unique identifier (UUID). */
    cartId: string & tags.Format<"uuid">;

    /** Target cart item's identifier (UUID). */
    itemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/customer/carts/:cartId/items/:itemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("itemId")(() => typia.assert(props.itemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
