import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendFavoriteAddress } from "../../../../../structures/IShoppingMallAiBackendFavoriteAddress";
import { IPageIShoppingMallAiBackendFavoriteAddress } from "../../../../../structures/IPageIShoppingMallAiBackendFavoriteAddress";

/**
 * Add an address as a favorite for the customer in the specified group/folder.
 *
 * Allows the customer to favorite a new address in the given group/folder,
 * establishing a link and storing an address snapshot. If the mapping already
 * exists, returns the existing record. All audit fields such as creation time
 * are included. Only authorized customers may insert into their own favorite
 * sets.
 *
 * @param props.connection
 * @param props.favoriteId Globally unique identifier of the favorite
 *   group/folder where the address will be favored.
 * @param props.body Creation info for favorite address link (must include
 *   address reference).
 * @path /shoppingMallAiBackend/customer/favorites/:favoriteId/addresses
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Globally unique identifier of the favorite group/folder where the
     * address will be favored.
     */
    favoriteId: string & tags.Format<"uuid">;

    /**
     * Creation info for favorite address link (must include address
     * reference).
     */
    body: IShoppingMallAiBackendFavoriteAddress.ICreate;
  };
  export type Body = IShoppingMallAiBackendFavoriteAddress.ICreate;
  export type Response = IShoppingMallAiBackendFavoriteAddress;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/customer/favorites/:favoriteId/addresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/favorites/${encodeURIComponent(props.favoriteId ?? "null")}/addresses`;
  export const random = (): IShoppingMallAiBackendFavoriteAddress =>
    typia.random<IShoppingMallAiBackendFavoriteAddress>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteId")(() => typia.assert(props.favoriteId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List paginated favorited addresses for the authenticated customer in the
 * specified favorite group.
 *
 * Lists customer-favorited addresses under a given favorite group/folder by
 * favoriteId. Returns a paginated list of address snapshot records as stored at
 * the time of favoriting, supporting legacy business requirement for snapshot
 * integrity regardless of later address changes. Only covers addresses
 * favorited by the customer, not other customers. Ownership and access to the
 * favorite group are enforced for security.
 *
 * @param props.connection
 * @param props.favoriteId Globally unique identifier of the favorite
 *   folder/group being queried.
 * @param props.body Parameter object for searching and paginating favorite
 *   address entries.
 * @path /shoppingMallAiBackend/customer/favorites/:favoriteId/addresses
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Globally unique identifier of the favorite folder/group being
     * queried.
     */
    favoriteId: string & tags.Format<"uuid">;

    /**
     * Parameter object for searching and paginating favorite address
     * entries.
     */
    body: IShoppingMallAiBackendFavoriteAddress.IRequest;
  };
  export type Body = IShoppingMallAiBackendFavoriteAddress.IRequest;
  export type Response = IPageIShoppingMallAiBackendFavoriteAddress.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/customer/favorites/:favoriteId/addresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/favorites/${encodeURIComponent(props.favoriteId ?? "null")}/addresses`;
  export const random =
    (): IPageIShoppingMallAiBackendFavoriteAddress.ISummary =>
      typia.random<IPageIShoppingMallAiBackendFavoriteAddress.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteId")(() => typia.assert(props.favoriteId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed snapshot info for a specific favorited address.
 *
 * Returns details of a favorited address from within a given favorite
 * group/folder for the authenticated customer. The endpoint validates both
 * favorite and address association. Returns all snapshot data about the address
 * as it was at the time the customer favorited it. If either mapping is missing
 * or the customer is not the owner, returns access denied or not found.
 *
 * @param props.connection
 * @param props.favoriteId Globally unique identifier of the parent favorite
 *   group or folder.
 * @param props.addressId Globally unique identifier of the favorited address
 *   entry.
 * @path /shoppingMallAiBackend/customer/favorites/:favoriteId/addresses/:addressId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Globally unique identifier of the parent favorite group or folder. */
    favoriteId: string & tags.Format<"uuid">;

    /** Globally unique identifier of the favorited address entry. */
    addressId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendFavoriteAddress;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/customer/favorites/:favoriteId/addresses/:addressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/favorites/${encodeURIComponent(props.favoriteId ?? "null")}/addresses/${encodeURIComponent(props.addressId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendFavoriteAddress =>
    typia.random<IShoppingMallAiBackendFavoriteAddress>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteId")(() => typia.assert(props.favoriteId));
      assert.param("addressId")(() => typia.assert(props.addressId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a customer's favorited address from their favorites list.
 *
 * Removes a specific address from the user's favorites, targeting the favorite
 * address entity by both favoriteId (favorite bookmark) and addressId (delivery
 * address) identifiers.
 *
 * This operation permanently deletes the favorite address record, ensuring user
 * autonomy over address management and keeping the favorites list up to date.
 * Only authenticated customers may delete their own favorited addresses. The
 * operation references the 'shopping_mall_ai_backend_favorite_addresses' table,
 * which stores evidence of when an address was favorited for personalized
 * checkout flows and notification triggers.
 *
 * Additional security checks ensure that attempting to delete addresses not
 * belonging to the authenticated customer results in a permission error. The
 * business logic includes audit trail preservation for evidence requirements,
 * as mandated by compliance guidelines.
 *
 * No response body is returned for successful deletion to keep the API
 * lightweight; success may be indicated by an HTTP 204 status code. Attempting
 * to delete a non-existent favorite or address yields a suitable error
 * message.
 *
 * @param props.connection
 * @param props.favoriteId The unique identifier (UUID) of the favorite entity
 *   associated with the address to delete.
 * @param props.addressId The unique identifier (UUID) of the address to be
 *   removed from favorites.
 * @path /shoppingMallAiBackend/customer/favorites/:favoriteId/addresses/:addressId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseFavoriteAddress(
  connection: IConnection,
  props: eraseFavoriteAddress.Props,
): Promise<void> {
  return true === connection.simulate
    ? eraseFavoriteAddress.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseFavoriteAddress.METADATA,
          path: eraseFavoriteAddress.path(props),
          status: null,
        },
      );
}
export namespace eraseFavoriteAddress {
  export type Props = {
    /**
     * The unique identifier (UUID) of the favorite entity associated with
     * the address to delete.
     */
    favoriteId: string & tags.Format<"uuid">;

    /**
     * The unique identifier (UUID) of the address to be removed from
     * favorites.
     */
    addressId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/customer/favorites/:favoriteId/addresses/:addressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/favorites/${encodeURIComponent(props.favoriteId ?? "null")}/addresses/${encodeURIComponent(props.addressId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: eraseFavoriteAddress.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseFavoriteAddress.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteId")(() => typia.assert(props.favoriteId));
      assert.param("addressId")(() => typia.assert(props.addressId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
