import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendOrderRefund } from "../../../../../structures/IShoppingMallAiBackendOrderRefund";
import { IPageIShoppingMallAiBackendOrderRefund } from "../../../../../structures/IPageIShoppingMallAiBackendOrderRefund";

/**
 * List and search all refunds for a specific order, with support for
 * pagination.
 *
 * Retrieves all refund requests and completed refunds for a given order, with
 * support for filtering, pagination, and sorting. Returns detailed status,
 * reason, amount, currency, and progress evidence for each refund. Users may
 * view only their own orders, while admins may view any order. Records are
 * filtered for compliance (exclude soft-deleted unless specified in query).
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose refunds are being
 *   queried.
 * @param props.body Search, filter, and pagination criteria for order refunds.
 * @path /shoppingMallAiBackend/customer/orders/:orderId/refunds
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the order whose refunds are being queried. */
    orderId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination criteria for order refunds. */
    body: IShoppingMallAiBackendOrderRefund.IRequest;
  };
  export type Body = IShoppingMallAiBackendOrderRefund.IRequest;
  export type Response = IPageIShoppingMallAiBackendOrderRefund;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/refunds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds`;
  export const random = (): IPageIShoppingMallAiBackendOrderRefund =>
    typia.random<IPageIShoppingMallAiBackendOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific order refund record by order and refund ID.
 *
 * Fetches an individual refund record for a specific order using orderId and
 * refundId as composite keys. Includes complete information such as refund
 * reason, status, amounts, currency, completion dates, and any business process
 * notes or evidence. This is vital for tracking refund resolution and
 * compliance, as well as providing status transparency to customers. Security
 * ensures only owners, admins, or authorized staff access the record.
 *
 * @param props.connection
 * @param props.orderId ID for the parent order.
 * @param props.refundId ID for the specific refund record to retrieve.
 * @path /shoppingMallAiBackend/customer/orders/:orderId/refunds/:refundId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID for the parent order. */
    orderId: string & tags.Format<"uuid">;

    /** ID for the specific refund record to retrieve. */
    refundId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendOrderRefund;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/refunds/:refundId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderRefund =>
    typia.random<IShoppingMallAiBackendOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific order refund (reason, amount, status, business decision).
 *
 * Updates an existing refund record related to an order, updating fields such
 * as refund type, status, reason, or business notes. Enables both the customer
 * and an administrator to process additional information, provide status
 * updates, or correct earlier requests. Security and validation logic ensure
 * only authorized users may update the record and that all changes are
 * auditable. State transitions must follow business rules and compliance
 * policies.
 *
 * @param props.connection
 * @param props.orderId Order ID linked to the refund record.
 * @param props.refundId Target refund ID to be updated.
 * @param props.body Refund information or status update for the order refund
 *   record.
 * @path /shoppingMallAiBackend/customer/orders/:orderId/refunds/:refundId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Order ID linked to the refund record. */
    orderId: string & tags.Format<"uuid">;

    /** Target refund ID to be updated. */
    refundId: string & tags.Format<"uuid">;

    /** Refund information or status update for the order refund record. */
    body: IShoppingMallAiBackendOrderRefund.IUpdate;
  };
  export type Body = IShoppingMallAiBackendOrderRefund.IUpdate;
  export type Response = IShoppingMallAiBackendOrderRefund;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/refunds/:refundId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderRefund =>
    typia.random<IShoppingMallAiBackendOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a refund record for an order, retaining audit evidence.
 *
 * Logically deletes (soft deletes) a refund record associated with an order.
 * This allows for evidence retention and regulatory compliance by preserving
 * the record without exposing it to regular queries. Only the involved customer
 * or an admin may execute this operation. Acts by setting the deleted_at
 * timestamp and is fully tracked in audit logs.
 *
 * @param props.connection
 * @param props.orderId Order ID linked to the refund record.
 * @param props.refundId Target refund ID to be soft deleted.
 * @path /shoppingMallAiBackend/customer/orders/:orderId/refunds/:refundId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Order ID linked to the refund record. */
    orderId: string & tags.Format<"uuid">;

    /** Target refund ID to be soft deleted. */
    refundId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/refunds/:refundId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
