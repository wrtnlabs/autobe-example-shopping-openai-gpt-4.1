import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendOrderPaymentAttempt } from "../../../../../../structures/IShoppingMallAiBackendOrderPaymentAttempt";
import { IPageIShoppingMallAiBackendOrderPaymentAttempt } from "../../../../../../structures/IPageIShoppingMallAiBackendOrderPaymentAttempt";

/**
 * Search and list payment attempts for an order payment.
 * (shopping_mall_ai_backend_order_payment_attempts).
 *
 * Retrieve a paginated, filtered, and searchable list of all payment attempts
 * for a specific payment attached to an order. The endpoint allows filtering by
 * attempt state, provider, result, dates, etc., and supports pagination for
 * efficiency. Each record includes attempt state, errors, provider code, and
 * timestamps. The operation facilitates audit, support, and fraud monitoring.
 * Only authorized actors can access this endpoint. Errors are reported for not
 * found or insufficient permissions.
 *
 * @param props.connection
 * @param props.orderId Order's unique identifier (UUID).
 * @param props.paymentId Payment's unique identifier (UUID).
 * @param props.body Search and filter parameters for payment attempt listing.
 * @path /shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId/attempts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Order's unique identifier (UUID). */
    orderId: string & tags.Format<"uuid">;

    /** Payment's unique identifier (UUID). */
    paymentId: string & tags.Format<"uuid">;

    /** Search and filter parameters for payment attempt listing. */
    body: IShoppingMallAiBackendOrderPaymentAttempt.IRequest;
  };
  export type Body = IShoppingMallAiBackendOrderPaymentAttempt.IRequest;
  export type Response = IPageIShoppingMallAiBackendOrderPaymentAttempt;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId/attempts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}/attempts`;
  export const random = (): IPageIShoppingMallAiBackendOrderPaymentAttempt =>
    typia.random<IPageIShoppingMallAiBackendOrderPaymentAttempt>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific payment attempt for an order payment.
 * (shopping_mall_ai_backend_order_payment_attempts).
 *
 * Retrieve details of a specific payment attempt for a payment attached to an
 * order. This operation provides the full record including all fields stored
 * for the attemptâ€”result state, errors, provider code, request/completion
 * timestamps. Used for compliance, audit, and support troubleshooting by
 * authorized actors. Only attempts owned by the referenced payment on the order
 * are accessible. Returns an error status if not found or unauthorized.
 *
 * @param props.connection
 * @param props.orderId Order's unique identifier (UUID).
 * @param props.paymentId Payment's unique identifier (UUID).
 * @param props.attemptId Payment attempt's unique identifier (UUID).
 * @path /shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId/attempts/:attemptId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Order's unique identifier (UUID). */
    orderId: string & tags.Format<"uuid">;

    /** Payment's unique identifier (UUID). */
    paymentId: string & tags.Format<"uuid">;

    /** Payment attempt's unique identifier (UUID). */
    attemptId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendOrderPaymentAttempt;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId/attempts/:attemptId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}/attempts/${encodeURIComponent(props.attemptId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderPaymentAttempt =>
    typia.random<IShoppingMallAiBackendOrderPaymentAttempt>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.param("attemptId")(() => typia.assert(props.attemptId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
