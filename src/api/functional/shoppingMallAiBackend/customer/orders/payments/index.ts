import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendOrderPayment } from "../../../../../structures/IShoppingMallAiBackendOrderPayment";
import { IPageIShoppingMallAiBackendOrderPayment } from "../../../../../structures/IPageIShoppingMallAiBackendOrderPayment";
export * as attempts from "./attempts";

/**
 * Create a payment for a specific order.
 * (shopping_mall_ai_backend_order_payments).
 *
 * Creates a new payment entry for an order by specifying the payment method,
 * amount, currency, and optional external reference. This operation validates
 * the orderâ€™s eligibility for new payment (e.g., not already fully
 * paid/cancelled), and enforces business rules around status, duplicate
 * prevention, and required information. The payment is initialized with a
 * status such as 'pending' and tracks details such as creation time and
 * currency. The system supports multiple payment methods, split payments, and
 * currency validation. Auditing and regulatory compliance for payment creation
 * are maintained through the shopping_mall_ai_backend_order_payments table. The
 * action accepts a structured request body and returns the complete payment
 * record upon success. Error scenarios include invalid order status,
 * insufficient data, and validation failures.
 *
 * @param props.connection
 * @param props.orderId Order's unique identifier (UUID).
 * @param props.body Payment creation payload including method, amount,
 *   currency, and provider references.
 * @path /shoppingMallAiBackend/customer/orders/:orderId/payments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Order's unique identifier (UUID). */
    orderId: string & tags.Format<"uuid">;

    /**
     * Payment creation payload including method, amount, currency, and
     * provider references.
     */
    body: IShoppingMallAiBackendOrderPayment.ICreate;
  };
  export type Body = IShoppingMallAiBackendOrderPayment.ICreate;
  export type Response = IShoppingMallAiBackendOrderPayment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IShoppingMallAiBackendOrderPayment =>
    typia.random<IShoppingMallAiBackendOrderPayment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve paginated payment records for the given order from
 * shopping_mall_ai_backend_order_payments.
 *
 * Enables search and retrieval of all payments (including multiple
 * methods/splits) for a specific order, supporting advanced filtering, business
 * review, and audit scenarios. Pagination and filtering help manage large order
 * payment histories. Authorization logic ensures that only eligible users
 * (order owner, seller, admin) can view payment data. Helpful for resolving
 * payment issues, refund tracking, or operational analytics. Errors include
 * access denial for unauthorized users or missing records.
 *
 * @param props.connection
 * @param props.orderId Order identifier for payment search (UUID format).
 * @param props.body Filter/search parameters for order payments query.
 * @path /shoppingMallAiBackend/customer/orders/:orderId/payments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Order identifier for payment search (UUID format). */
    orderId: string & tags.Format<"uuid">;

    /** Filter/search parameters for order payments query. */
    body: IShoppingMallAiBackendOrderPayment.IRequest;
  };
  export type Body = IShoppingMallAiBackendOrderPayment.IRequest;
  export type Response = IPageIShoppingMallAiBackendOrderPayment;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments`;
  export const random = (): IPageIShoppingMallAiBackendOrderPayment =>
    typia.random<IPageIShoppingMallAiBackendOrderPayment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch full business/payment details for a specific payment within an order.
 * Referenced table: shopping_mall_ai_backend_order_payments.
 *
 * Provides in-depth status and audit information for a single payment record in
 * the specified order. Returns all business and operational fields, including
 * payment method, status, external references, and timestamps. Security checks
 * ensure only authorized users with order or management responsibility may view
 * payment details. Used primarily for support scenarios (failed payments,
 * chargebacks, refund problems), regulatory audit, or general payment history
 * review.
 *
 * @param props.connection
 * @param props.orderId Order identifier (UUID format) for scoping payment data.
 * @param props.paymentId Specific payment record ID within order (UUID format).
 * @path /shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Order identifier (UUID format) for scoping payment data. */
    orderId: string & tags.Format<"uuid">;

    /** Specific payment record ID within order (UUID format). */
    paymentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendOrderPayment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderPayment =>
    typia.random<IShoppingMallAiBackendOrderPayment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a payment for a specific order.
 * (shopping_mall_ai_backend_order_payments).
 *
 * Updates a payment record for an order, such as changing the payment method,
 * amount, currency, or updating status (pending, failed, etc.) provided that
 * the payment is not settled or locked. Enforces rigorous validation for
 * integrity of payment flows, handling all rules as per business and regulatory
 * requirements. Supports audit-logging of the change and allows only authorized
 * actors. Modifiable only when in allowed status. The operation returns the
 * updated payment record. Errors are returned for invalid payment status,
 * missing required fields, or business rule violation.
 *
 * @param props.connection
 * @param props.orderId Order's unique identifier (UUID).
 * @param props.paymentId Payment's unique identifier (UUID).
 * @param props.body Fields to update for the payment record (method, amount,
 *   status, etc).
 * @path /shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Order's unique identifier (UUID). */
    orderId: string & tags.Format<"uuid">;

    /** Payment's unique identifier (UUID). */
    paymentId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the payment record (method, amount, status,
     * etc).
     */
    body: IShoppingMallAiBackendOrderPayment.IUpdate;
  };
  export type Body = IShoppingMallAiBackendOrderPayment.IUpdate;
  export type Response = IShoppingMallAiBackendOrderPayment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderPayment =>
    typia.random<IShoppingMallAiBackendOrderPayment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a payment for a specific order.
 * (shopping_mall_ai_backend_order_payments).
 *
 * Soft delete a payment record for a specific order by marking the payment as
 * deleted. This operation sets the deleted_at timestamp, preserving the record
 * for audit and compliance purposes, and excludes it from normal queries.
 * Deletion is only allowed if the payment is in a non-settled state (e.g.,
 * pending, failed, not completed). The action cannot be reversed and removes
 * the payment record from active use, but preserves it in the database for
 * legal and business review. If the payment record has already been completed,
 * cancelled or otherwise locked, the operation will return an error and take no
 * action.
 *
 * @param props.connection
 * @param props.orderId Order's unique identifier (UUID).
 * @param props.paymentId Payment's unique identifier (UUID).
 * @path /shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Order's unique identifier (UUID). */
    orderId: string & tags.Format<"uuid">;

    /** Payment's unique identifier (UUID). */
    paymentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
