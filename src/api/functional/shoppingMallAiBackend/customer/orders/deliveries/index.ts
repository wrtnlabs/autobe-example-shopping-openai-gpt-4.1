import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendOrderDelivery } from "../../../../../structures/IShoppingMallAiBackendOrderDelivery";
import { IPageIShoppingMallAiBackendOrderDelivery } from "../../../../../structures/IPageIShoppingMallAiBackendOrderDelivery";

/**
 * Search and list deliveries for a specific order.
 * (shopping_mall_ai_backend_order_deliveries).
 *
 * Retrieves a filtered and paginated list of delivery/shipment records for a
 * specific order, supporting business logic for multi-shipment, split
 * shipments, international logistics, and real-time tracking. Only deliveries
 * linked to the target order are returned. Each result includes shipment
 * status, tracking, provider, shipping/delivery timestamps, and can be filtered
 * by delivery status or time windows. Security controls ensure only
 * order-linked actors may access detailed status and tracking. Used for
 * fulfillment tracking, support, and compliance checks.
 *
 * @param props.connection
 * @param props.orderId Order's unique identifier (UUID).
 * @param props.body Filtering and pagination parameters for delivery search.
 * @path /shoppingMallAiBackend/customer/orders/:orderId/deliveries
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Order's unique identifier (UUID). */
    orderId: string & tags.Format<"uuid">;

    /** Filtering and pagination parameters for delivery search. */
    body: IShoppingMallAiBackendOrderDelivery.IRequest;
  };
  export type Body = IShoppingMallAiBackendOrderDelivery.IRequest;
  export type Response = IPageIShoppingMallAiBackendOrderDelivery;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/deliveries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries`;
  export const random = (): IPageIShoppingMallAiBackendOrderDelivery =>
    typia.random<IPageIShoppingMallAiBackendOrderDelivery>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific delivery for an order.
 * (shopping_mall_ai_backend_order_deliveries).
 *
 * Retrieve detailed shipment/delivery information for a given delivery
 * associated with a specific order. The endpoint details shipping status,
 * tracking, provider, timestamps, and business context. Used by authorized
 * actors—customers, sellers, or admins—to audit delivery status, view
 * fulfillment progress, or support issue resolution. Ensures proper access
 * control and business rule compliance for shipment record access. Errors
 * include record not found, insufficient permissions, or business rule
 * violations.
 *
 * @param props.connection
 * @param props.orderId Order's unique identifier (UUID).
 * @param props.deliveryId Delivery's unique identifier (UUID).
 * @path /shoppingMallAiBackend/customer/orders/:orderId/deliveries/:deliveryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Order's unique identifier (UUID). */
    orderId: string & tags.Format<"uuid">;

    /** Delivery's unique identifier (UUID). */
    deliveryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendOrderDelivery;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/deliveries/:deliveryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderDelivery =>
    typia.random<IShoppingMallAiBackendOrderDelivery>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
