import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendOrderIncident } from "../../../../../structures/IShoppingMallAiBackendOrderIncident";
import { IPageIShoppingMallAiBackendOrderIncident } from "../../../../../structures/IPageIShoppingMallAiBackendOrderIncident";

/**
 * List incidents (fraud, dispute, compliance) for an order, including current
 * and historical events.
 *
 * Retrieves all incidents and compliance records related to an order, for
 * review by compliance staff, admins, or the record owner. Includes fraud
 * incidents, disputes, customer escalations, and other exceptional events
 * linked to the order. All records are returned with business context,
 * severity, event time, resolution details, and supporting metadata. Proper
 * authorization is enforced to ensure data privacy and role-based access.
 *
 * @param props.connection
 * @param props.orderId Order ID whose incidents are being listed.
 * @param props.body Incident search/filter parameters, supports pagination and
 *   sorting.
 * @path /shoppingMallAiBackend/customer/orders/:orderId/incidents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Order ID whose incidents are being listed. */
    orderId: string & tags.Format<"uuid">;

    /** Incident search/filter parameters, supports pagination and sorting. */
    body: IShoppingMallAiBackendOrderIncident.IRequest;
  };
  export type Body = IShoppingMallAiBackendOrderIncident.IRequest;
  export type Response = IPageIShoppingMallAiBackendOrderIncident;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/customer/orders/:orderId/incidents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/incidents`;
  export const random = (): IPageIShoppingMallAiBackendOrderIncident =>
    typia.random<IPageIShoppingMallAiBackendOrderIncident>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
