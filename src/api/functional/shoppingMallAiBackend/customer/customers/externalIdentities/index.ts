import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCustomerExternalIdentity } from "../../../../../structures/IShoppingMallAiBackendCustomerExternalIdentity";
import { IPageIShoppingMallAiBackendCustomerExternalIdentity } from "../../../../../structures/IPageIShoppingMallAiBackendCustomerExternalIdentity";

/**
 * List/search all external identity providers linked to a customer account.
 *
 * This operation provides a paginated list and search of all external identity
 * connections (social login providers, OAuth links, SSO) for a particular
 * customer account. It is essential for account and security management,
 * enabling users or admins to review, link, or decouple external authentication
 * providers.
 *
 * Each result contains provider information, identity key, time of linkage, and
 * last verified timestamp. The request can filter by provider, link status, or
 * search by provider_key. Pagination enables scalable query for customers with
 * many external logins.
 *
 * The API only returns external identities for the requested customerId.
 * Unauthorized requests or attempts to view another user's data are forbidden
 * and logged for audit.
 *
 * @param props.connection
 * @param props.customerId Unique identifier (UUID) of the target customer owner
 *   of the external identities.
 * @param props.body Search, filter, and pagination criteria for external
 *   identities.
 * @path /shoppingMallAiBackend/customer/customers/:customerId/externalIdentities
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) of the target customer owner of the external
     * identities.
     */
    customerId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination criteria for external identities. */
    body: IShoppingMallAiBackendCustomerExternalIdentity.IRequest;
  };
  export type Body = IShoppingMallAiBackendCustomerExternalIdentity.IRequest;
  export type Response =
    IPageIShoppingMallAiBackendCustomerExternalIdentity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/customer/customers/:customerId/externalIdentities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/customers/${encodeURIComponent(props.customerId ?? "null")}/externalIdentities`;
  export const random =
    (): IPageIShoppingMallAiBackendCustomerExternalIdentity.ISummary =>
      typia.random<IPageIShoppingMallAiBackendCustomerExternalIdentity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get specific external identity provider info for a customer.
 *
 * This API enables users or admins to retrieve details about a specific
 * external identity provider account (such as Google, Apple, Naver, etc) linked
 * to a user's account. The operation is secured so only the account owner or
 * platform admin can query this linked identity.
 *
 * It returns provider, provider key, linkage time, and last verified timestamp.
 * If the target external identity does not belong to the customer, an error is
 * returned.
 *
 * This API is essential for profile review, account linking history display,
 * and security troubleshooting. Actions are audit-logged for compliance where
 * required.
 *
 * @param props.connection
 * @param props.customerId Unique identifier (UUID) of the target customer owner
 *   of the external identity.
 * @param props.externalIdentityId Unique identifier (UUID) of the external
 *   identity record.
 * @path /shoppingMallAiBackend/customer/customers/:customerId/externalIdentities/:externalIdentityId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier (UUID) of the target customer owner of the external
     * identity.
     */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the external identity record. */
    externalIdentityId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCustomerExternalIdentity;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/customer/customers/:customerId/externalIdentities/:externalIdentityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/customers/${encodeURIComponent(props.customerId ?? "null")}/externalIdentities/${encodeURIComponent(props.externalIdentityId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCustomerExternalIdentity =>
    typia.random<IShoppingMallAiBackendCustomerExternalIdentity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("externalIdentityId")(() =>
        typia.assert(props.externalIdentityId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the mapping/properties for a customer's external identity record.
 *
 * This endpoint enables update of properties for a linked external identity,
 * such as last verification time, provider key, or correction of external
 * account linkage problems. Common use cases include reconnection after an
 * external provider updates keys, or admin-driven correction or audit of social
 * account links.
 *
 * Operation is restricted to the customer who owns the external identity or
 * platform administrators. The path ensures both customerId and
 * externalIdentityId match. Attempts to update identities not owned by the
 * customer are forbidden and trigger audit logging.
 *
 * The request payload must follow the update DTO structure; successful update
 * returns the revised identity info.
 *
 * @param props.connection
 * @param props.customerId Unique identifier (UUID) of customer owner of the
 *   external identity.
 * @param props.externalIdentityId Unique identifier (UUID) of the target
 *   external identity record.
 * @param props.body Payload describing fields to update in linked external
 *   identity.
 * @path /shoppingMallAiBackend/customer/customers/:customerId/externalIdentities/:externalIdentityId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of customer owner of the external identity. */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the target external identity record. */
    externalIdentityId: string & tags.Format<"uuid">;

    /** Payload describing fields to update in linked external identity. */
    body: IShoppingMallAiBackendCustomerExternalIdentity.IUpdate;
  };
  export type Body = IShoppingMallAiBackendCustomerExternalIdentity.IUpdate;
  export type Response = IShoppingMallAiBackendCustomerExternalIdentity;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/customer/customers/:customerId/externalIdentities/:externalIdentityId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/customers/${encodeURIComponent(props.customerId ?? "null")}/externalIdentities/${encodeURIComponent(props.externalIdentityId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCustomerExternalIdentity =>
    typia.random<IShoppingMallAiBackendCustomerExternalIdentity>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("externalIdentityId")(() =>
        typia.assert(props.externalIdentityId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove/unlink a specific external identity from a customer profile. (Hard
 * delete).
 *
 * This operation removes a linked external identity (social sign-in, OAuth,
 * etc.) from a user's profile. Used on user request (unlink a social account)
 * or by admin for identity/data management and privacy compliance. The schema
 * has no soft delete field, so the linked identity is physically removed from
 * the database.
 *
 * Only the customer owner or authorized platform admins may perform this
 * deletion. Actions are audit-logged. Attempting to delete a non-owned or
 * already-deleted mapping will result in error.
 *
 * @param props.connection
 * @param props.customerId Unique identifier (UUID) of target customer.
 * @param props.externalIdentityId Unique identifier (UUID) of external identity
 *   to delete.
 * @path /shoppingMallAiBackend/customer/customers/:customerId/externalIdentities/:externalIdentityId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of target customer. */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of external identity to delete. */
    externalIdentityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/customer/customers/:customerId/externalIdentities/:externalIdentityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/customers/${encodeURIComponent(props.customerId ?? "null")}/externalIdentities/${encodeURIComponent(props.externalIdentityId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("externalIdentityId")(() =>
        typia.assert(props.externalIdentityId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
