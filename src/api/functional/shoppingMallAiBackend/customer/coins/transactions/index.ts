import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCoinTransaction } from "../../../../../structures/IShoppingMallAiBackendCoinTransaction";
import { IPageIShoppingMallAiBackendCoinTransaction } from "../../../../../structures/IPageIShoppingMallAiBackendCoinTransaction";

/**
 * Search and retrieve paginated coin ledger transactions for a wallet by
 * coinId.
 *
 * The endpoint provides authenticated users (or admins) access to the full
 * ledger of coin transactions for a specific coin wallet, referenced by coinId.
 * The shopping_mall_ai_backend_coin_transactions table stores immutable records
 * for accrual, usage, adjustment, or administrative actions affecting the coin
 * balance.
 *
 * The endpoint supports advanced filters such as activity range, transaction
 * type, amount thresholds, and full pagination for use in UI dashboards or
 * transaction histories. Users may only access their own transactions unless
 * provided administrative oversight per business and compliance rules.
 *
 * The paged response returns relevant business and evidence fields to support
 * review, dispute handling, or transaction investigation. All access is tracked
 * for audit compliance.
 *
 * @param props.connection
 * @param props.coinId Unique identifier of the coin ledger whose transactions
 *   are retrieved.
 * @param props.body Optional filter parameters (type, range, amount,
 *   pagination, etc.) for transaction search.
 * @path /shoppingMallAiBackend/customer/coins/:coinId/transactions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the coin ledger whose transactions are
     * retrieved.
     */
    coinId: string & tags.Format<"uuid">;

    /**
     * Optional filter parameters (type, range, amount, pagination, etc.)
     * for transaction search.
     */
    body: IShoppingMallAiBackendCoinTransaction.IRequest;
  };
  export type Body = IShoppingMallAiBackendCoinTransaction.IRequest;
  export type Response = IPageIShoppingMallAiBackendCoinTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/customer/coins/:coinId/transactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/coins/${encodeURIComponent(props.coinId ?? "null")}/transactions`;
  export const random = (): IPageIShoppingMallAiBackendCoinTransaction =>
    typia.random<IPageIShoppingMallAiBackendCoinTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("coinId")(() => typia.assert(props.coinId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific coin transaction within a coin ledger by coinId and
 * transactionId.
 *
 * This endpoint retrieves a specific coin transaction associated with a given
 * coinId and transactionId. Each transaction in the
 * shopping_mall_ai_backend_coin_transactions table reflects a change (usage,
 * accrual, expiry, adjustment, admin action) on the coin ledger for a customer
 * or seller.
 *
 * Users are only able to access their own transactions; admins may retrieve
 * records for compliance and business reasons. Data includes all audit
 * metadata, balances, type, reason, and contextual description, supporting
 * evidence needs or transaction troubleshooting.
 *
 * Responses are comprehensive and meet all audit/compliance requirements.
 * Errors are returned for missing, restricted, or non-existent records.
 *
 * @param props.connection
 * @param props.coinId Identifier of the coin ledger associated with the
 *   transaction record.
 * @param props.transactionId Unique transaction record identifier within the
 *   coin ledger.
 * @path /shoppingMallAiBackend/customer/coins/:coinId/transactions/:transactionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the coin ledger associated with the transaction record. */
    coinId: string & tags.Format<"uuid">;

    /** Unique transaction record identifier within the coin ledger. */
    transactionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCoinTransaction;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/customer/coins/:coinId/transactions/:transactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/coins/${encodeURIComponent(props.coinId ?? "null")}/transactions/${encodeURIComponent(props.transactionId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCoinTransaction =>
    typia.random<IShoppingMallAiBackendCoinTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("coinId")(() => typia.assert(props.coinId));
      assert.param("transactionId")(() => typia.assert(props.transactionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
