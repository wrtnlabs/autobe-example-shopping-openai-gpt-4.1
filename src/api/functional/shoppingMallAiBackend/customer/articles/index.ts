import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendArticle } from "../../../../structures/IShoppingMallAiBackendArticle";
export * as comments from "./comments";

/**
 * Create a new article by an authorized customer (admin, seller, or customer
 * with permission).
 *
 * Allows an authenticated and authorized customer (admin, seller, or customer
 * with permission) to create a new article and publish it to a selected
 * channel. Validates fields such as title, content body, and channel ID.
 * Ensures that the title is unique within the channel, status is valid (draft,
 * published, etc.), and a proper audit trail is established.
 *
 * The newly created article includes timestamps, author identification, and is
 * available for public or restricted display according to the status.
 * Administrators may use this endpoint for publishing notices or formal
 * communications. All creation actions are logged for compliance, evidence, and
 * business analytics.
 *
 * @param props.connection
 * @param props.body The required data to create a new article, including title,
 *   body, channel, and author information.
 * @path /shoppingMallAiBackend/customer/articles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The required data to create a new article, including title, body,
     * channel, and author information.
     */
    body: IShoppingMallAiBackendArticle.ICreate;
  };
  export type Body = IShoppingMallAiBackendArticle.ICreate;
  export type Response = IShoppingMallAiBackendArticle;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/customer/articles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/customer/articles";
  export const random = (): IShoppingMallAiBackendArticle =>
    typia.random<IShoppingMallAiBackendArticle>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing article's content, title, status, or business fields by
 * ID.
 *
 * Enables an authenticated and authorized customer to update an existing
 * article specified by its UUID. Permitted fields for update include title,
 * body, status, pin flag, and is_notice. The endpoint ensures the caller is
 * either the article's author or has the required administrative privileges. On
 * each update, the system generates a versioned snapshot for compliance and
 * evidence retention, and validates that the new title does not collide with
 * existing articles in the channel.
 *
 * Article status transitions and content edits are governed by business rules.
 * Unauthorized edits, attempts to update deleted articles, or violations of
 * business logic are denied with error messages. All changes are timestamped
 * and contribute to the evidence chain for the article.
 *
 * @param props.connection
 * @param props.articleId Unique identifier of the article to update.
 * @param props.body Updated article data (title, content, status, etc.) for the
 *   article.
 * @path /shoppingMallAiBackend/customer/articles/:articleId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the article to update. */
    articleId: string & tags.Format<"uuid">;

    /** Updated article data (title, content, status, etc.) for the article. */
    body: IShoppingMallAiBackendArticle.IUpdate;
  };
  export type Body = IShoppingMallAiBackendArticle.IUpdate;
  export type Response = IShoppingMallAiBackendArticle;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/customer/articles/:articleId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/articles/${encodeURIComponent(props.articleId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendArticle =>
    typia.random<IShoppingMallAiBackendArticle>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("articleId")(() => typia.assert(props.articleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete an article (mark deleted_at for audit and compliance, not
 * removal).
 *
 * Allows an authenticated customer (author or admin) to mark an article as
 * deleted, setting deleted_at for compliance and evidence. The operation blocks
 * further edits or display for articles that are soft-deleted. The endpoint
 * strictly validates that only authors or privileged customers may mark an
 * article as deleted, and logs every deletion event in the compliance chain. If
 * the article is already deleted or not owned by the customer/role, the
 * operation will fail with descriptive errors.
 *
 * Soft deletion is required for audit traceability, legal defense, and
 * potential recovery. The action does not remove comments, files, or evidence
 * history; all associated data is retained per business retention policy.
 *
 * @param props.connection
 * @param props.articleId Unique identifier of the article to delete.
 * @path /shoppingMallAiBackend/customer/articles/:articleId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the article to delete. */
    articleId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/customer/articles/:articleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/articles/${encodeURIComponent(props.articleId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("articleId")(() => typia.assert(props.articleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
