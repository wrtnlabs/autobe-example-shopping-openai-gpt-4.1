import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendArticleComment } from "../../../../../structures/IShoppingMallAiBackendArticleComment";

/**
 * Retrieve a specific comment for an article by comment ID and article ID.
 *
 * This endpoint retrieves a particular comment for a given article based on
 * both the article's ID and the comment's ID. It ensures that only the specific
 * comment matching both identifiers is returned, along with all its metadata
 * (author, content, timestamps, status, and privacy setting).
 *
 * Comments are stored in the shopping_mall_ai_backend_article_comments table,
 * which holds each comment's relation to its parent article (and potentially
 * its parent comment for threads), author reference, content, and moderation
 * state. When requesting a comment, permissions are enforced such that only
 * allowed users can see secret or administratively restricted comments,
 * according to is_secret and status fields. If the comment does not exist or
 * the user lacks sufficient privileges, an appropriate error response is
 * returned.
 *
 * Typical uses include displaying an individual comment thread in a UI,
 * moderation lookup by an admin or seller, or user self-service comment review.
 * Related operations include retrieving all comments for an article or
 * updating/deleting a particular comment by its author or privileged user.
 *
 * @param props.connection
 * @param props.articleId Unique identifier for the article to which the comment
 *   belongs.
 * @param props.commentId Unique identifier of the comment within the article.
 * @path /shoppingMallAiBackend/customer/articles/:articleId/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the article to which the comment belongs. */
    articleId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment within the article. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendArticleComment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/customer/articles/:articleId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/articles/${encodeURIComponent(props.articleId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendArticleComment =>
    typia.random<IShoppingMallAiBackendArticleComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("articleId")(() => typia.assert(props.articleId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a comment on an article by comment ID and article ID.
 *
 * This endpoint allows editing an existing comment for a specific article,
 * identified by the articleId and commentId. Only the comment's author or users
 * with moderator-level privileges may perform this action.
 *
 * The shopping_mall_ai_backend_article_comments entity is referenced to ensure
 * that only valid fields (body, is_secret, and applicable status) are updated.
 * The operation enforces moderation and edit workflow, creates an audit trail
 * or snapshot of the previous state, and ensures both input validation (e.g.,
 * no empty content) and correct comment linkage.
 *
 * Business logic enforces update constraints: only editable comments, valid
 * states, and permissible user actions. Errors result if the comment or article
 * does not exist, the user lacks authorization, or validation fails on the
 * updated content.
 *
 * @param props.connection
 * @param props.articleId Unique article identifier to which the comment
 *   belongs.
 * @param props.commentId Unique comment identifier within the article.
 * @param props.body Updated comment details and fields allowed for change.
 * @path /shoppingMallAiBackend/customer/articles/:articleId/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique article identifier to which the comment belongs. */
    articleId: string & tags.Format<"uuid">;

    /** Unique comment identifier within the article. */
    commentId: string & tags.Format<"uuid">;

    /** Updated comment details and fields allowed for change. */
    body: IShoppingMallAiBackendArticleComment.IUpdate;
  };
  export type Body = IShoppingMallAiBackendArticleComment.IUpdate;
  export type Response = IShoppingMallAiBackendArticleComment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/customer/articles/:articleId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/articles/${encodeURIComponent(props.articleId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendArticleComment =>
    typia.random<IShoppingMallAiBackendArticleComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("articleId")(() => typia.assert(props.articleId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a comment on an article by article ID and comment ID.
 *
 * This endpoint marks a specific comment on an article as deleted for
 * compliance and evidence requirements. Instead of hard deletion, the operation
 * sets the deleted_at field, preserving the record for audit and recovery
 * workflows. The action may only be performed by the comment's author, an
 * admin, or other privileged roles according to business policy.
 *
 * Upon deletion, moderation status may be changed and an audit or snapshot
 * event logged. Soft deletion ensures that historic comment information remains
 * available for dispute resolution, compliance checks, and business evidence.
 * If the article or comment does not exist, or the user is not authorized, an
 * error is returned.
 *
 * It is important to note that the deleted comment will no longer be visible in
 * standard article comment queries but remains accessible for audit and
 * administrative review.
 *
 * @param props.connection
 * @param props.articleId Unique identifier of the article containing the
 *   comment.
 * @param props.commentId Unique identifier of the comment to be soft deleted.
 * @path /shoppingMallAiBackend/customer/articles/:articleId/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the article containing the comment. */
    articleId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment to be soft deleted. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/customer/articles/:articleId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/customer/articles/${encodeURIComponent(props.articleId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("articleId")(() => typia.assert(props.articleId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new comment on an article by article ID.
 *
 * This endpoint enables the creation of a new comment for a designated article,
 * specified by its article ID. To create a comment, the user provides the
 * comment contents and sets whether it is a secret (private) comment via the
 * is_secret field. Optionally, a comment may reference a parent_id to support
 * threaded discussions or replies.
 *
 * The operation references the shopping_mall_ai_backend_article_comments
 * entity, enforcing content validation (e.g., minimum length, content
 * guidelines) and permission control (e.g., only authenticated users may create
 * comments). The author_id is typically inferred from the session or
 * authentication token of the user.
 *
 * Business logic includes associating the new comment with the correct article,
 * assigning status according to moderation policy (e.g., 'pending', 'visible'),
 * and ensuring that only permissible comment types are created in the context
 * of the article's status. Error handling applies if the article ID is invalid,
 * the user is not authenticated, or the comment body does not meet
 * server-defined constraints.
 *
 * @param props.connection
 * @param props.articleId Identifier of the target article to which the comment
 *   will be added.
 * @param props.body Comment body, privacy flag, and optional parent comment ID
 *   for threading.
 * @path /shoppingMallAiBackend/customer/articles/:articleId/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Identifier of the target article to which the comment will be added. */
    articleId: string & tags.Format<"uuid">;

    /**
     * Comment body, privacy flag, and optional parent comment ID for
     * threading.
     */
    body: IShoppingMallAiBackendArticleComment.ICreate;
  };
  export type Body = IShoppingMallAiBackendArticleComment.ICreate;
  export type Response = IShoppingMallAiBackendArticleComment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/customer/articles/:articleId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/customer/articles/${encodeURIComponent(props.articleId ?? "null")}/comments`;
  export const random = (): IShoppingMallAiBackendArticleComment =>
    typia.random<IShoppingMallAiBackendArticleComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("articleId")(() => typia.assert(props.articleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
