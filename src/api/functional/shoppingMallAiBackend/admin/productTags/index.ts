import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendProductTag } from "../../../../structures/IShoppingMallAiBackendProductTag";
import { IPageIShoppingMallAiBackendProductTag } from "../../../../structures/IPageIShoppingMallAiBackendProductTag";

/**
 * Create a new product tag for catalog classification and filtering.
 *
 * This API allows administrators to create new product tags which are used for
 * classifying, filtering, and searching products in the catalog. Mandatory
 * fields include tag_name and tag_code, where tag_code must be globally unique.
 * Tag creation automatically sets the required audit timestamps.
 *
 * The operation validates for unique tag_code before insertion. Failure to meet
 * constraints results in meaningful error messages. Only authenticated users
 * with administrative privileges are allowed to invoke this endpoint.
 *
 * Tags are critical for catalog navigation, analytics, and AI-driven
 * recommendations, making this endpoint a key part of catalog management
 * workflows. Related endpoints exist for listing, updating, and deleting tags.
 *
 * @param props.connection
 * @param props.body Product tag creation payload including tag name and code.
 * @path /shoppingMallAiBackend/admin/productTags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Product tag creation payload including tag name and code. */
    body: IShoppingMallAiBackendProductTag.ICreate;
  };
  export type Body = IShoppingMallAiBackendProductTag.ICreate;
  export type Response = IShoppingMallAiBackendProductTag;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/productTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/productTags";
  export const random = (): IShoppingMallAiBackendProductTag =>
    typia.random<IShoppingMallAiBackendProductTag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list product tags with advanced filtering and pagination.
 *
 * Retrieves a filtered, sorted, and paginated list of product tags for
 * monitoring, management, and analytics purposes. This endpoint allows sellers
 * and admins to search by tag name, filter by tag code or status, and apply
 * pagination for large datasets. It is critical for managing product
 * discoverability, recommendation systems, and business analytics, providing
 * support for AI augmentation or compliance-driven tag regulations. Errors
 * include invalid search queries or insufficient permission to view all tags.
 * This API is commonly used with tag creation and update workflows.
 *
 * @param props.connection
 * @param props.body Search filters, sort options, and pagination for querying
 *   product tags.
 * @path /shoppingMallAiBackend/admin/productTags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search filters, sort options, and pagination for querying product
     * tags.
     */
    body: IShoppingMallAiBackendProductTag.IRequest;
  };
  export type Body = IShoppingMallAiBackendProductTag.IRequest;
  export type Response = IPageIShoppingMallAiBackendProductTag;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/productTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/productTags";
  export const random = (): IPageIShoppingMallAiBackendProductTag =>
    typia.random<IPageIShoppingMallAiBackendProductTag>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a product tag by its unique identifier.
 *
 * This API retrieves the details of a specific product tag using its unique ID.
 * Product tags are used to facilitate classification, search, and filtering
 * within the product catalog, and are essential for analytics, navigation, and
 * merchandising features. Only fields present in the product tag schema are
 * returned.
 *
 * Authentication is required and typically restricted to users with catalog
 * management permissions (e.g., admin). The endpoint ensures that only undelted
 * (active) tags are returned; logically deleted tags (deleted_at set) are
 * omitted.
 *
 * This operation supports integration with catalog management flows and is
 * often used in conjunction with creation, update, and deletion endpoints to
 * facilitate the full lifecycle of product tags. Error cases for non-existent
 * or deleted tags are handled with appropriate client-visible errors.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the product tag to retrieve.
 * @path /shoppingMallAiBackend/admin/productTags/:tagId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the product tag to retrieve. */
    tagId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendProductTag;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/productTags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/productTags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendProductTag =>
    typia.random<IShoppingMallAiBackendProductTag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing product tag by ID.
 *
 * This endpoint updates the details of a product tag. Editable fields include
 * tag_name and tag_code. Both fields must satisfy schema constraints, including
 * the uniqueness of tag_code. The endpoint also updates the updated_at
 * timestamp to reflect when the change was made.
 *
 * Only administrators are permitted to update product tags. The API performs
 * validation to avoid duplicate tag_codes and ensures that logically deleted
 * tags are not updated. Failure cases return informative error messages for
 * remediation. This operation is typically used together with tag creation,
 * retrieval, and deletion for comprehensive catalog management workflows.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the product tag to update.
 * @param props.body Fields for updating a product tag (name, code).
 * @path /shoppingMallAiBackend/admin/productTags/:tagId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the product tag to update. */
    tagId: string & tags.Format<"uuid">;

    /** Fields for updating a product tag (name, code). */
    body: IShoppingMallAiBackendProductTag.IUpdate;
  };
  export type Body = IShoppingMallAiBackendProductTag.IUpdate;
  export type Response = IShoppingMallAiBackendProductTag;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/productTags/:tagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/productTags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendProductTag =>
    typia.random<IShoppingMallAiBackendProductTag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a product tag by its unique identifier.
 *
 * This API performs a soft delete of a product tag based on its unique ID. The
 * deleted_at field is set to mark the record as logically deleted, preserving
 * data for audit, compliance, and potential restoration. Only non-deleted tags
 * can be soft deleted.
 *
 * The operation is restricted to admin users with catalog management
 * privileges. Once a tag is soft deleted, it will be excluded from standard
 * catalog listings and analytics, but its evidence remains for future reference
 * or compliance checks. Error states, such as trying to delete a non-existent
 * or already deleted tag, are handled with clear responses.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the product tag to delete.
 * @path /shoppingMallAiBackend/admin/productTags/:tagId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the product tag to delete. */
    tagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/productTags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/productTags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
