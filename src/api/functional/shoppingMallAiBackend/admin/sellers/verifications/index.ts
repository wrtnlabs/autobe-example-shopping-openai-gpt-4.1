import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendSellerVerification } from "../../../../../structures/IShoppingMallAiBackendSellerVerification";
import { IPageIShoppingMallAiBackendSellerVerification } from "../../../../../structures/IPageIShoppingMallAiBackendSellerVerification";

/**
 * List and search verification records for a seller (admin-only).
 *
 * Retrieve a paginated, filtered list of all verification records linked to a
 * specified seller by sellerId. Response includes evidence types, status,
 * document URIs, and timestamps, supporting regulatory or onboarding
 * workflows.
 *
 * This endpoint is exclusively for administrators who need to review or audit a
 * seller's compliance status. Filtering is supported on type and status fields.
 * Attempts to access with invalid seller reference or insufficient permissions
 * are rejected with descriptive error codes.
 *
 * Integration with seller management flows, including onboarding, compliance
 * reviews, and periodic audits. Results can be used for deeper evidence review
 * in case of disputes.
 *
 * @param props.connection
 * @param props.sellerId UUID of the seller to filter verifications by.
 * @param props.body Filter, pagination, and search criteria for seller's
 *   verification records.
 * @path /shoppingMallAiBackend/admin/sellers/:sellerId/verifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the seller to filter verifications by. */
    sellerId: string & tags.Format<"uuid">;

    /**
     * Filter, pagination, and search criteria for seller's verification
     * records.
     */
    body: IShoppingMallAiBackendSellerVerification.IRequest;
  };
  export type Body = IShoppingMallAiBackendSellerVerification.IRequest;
  export type Response = IPageIShoppingMallAiBackendSellerVerification;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/sellers/:sellerId/verifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}/verifications`;
  export const random = (): IPageIShoppingMallAiBackendSellerVerification =>
    typia.random<IPageIShoppingMallAiBackendSellerVerification>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific seller verification record (admin-only).
 *
 * Retrieve all details about a single verification record for a given seller,
 * identified by sellerId and verificationId. Returns verification type, status,
 * document URI, submission, and approval timestamps for onboarding and
 * compliance.
 *
 * Exclusively for use by admins for evidentiary and regulatory workflows.
 * Unauthorized access is blocked with a policy violation error. Existence of
 * both seller and verification records is checked, with 404 for invalid
 * identifiers.
 *
 * Facilitates onboarding workflow, compliance deep-dive, and audit trails for
 * seller eligibility or investigation.
 *
 * @param props.connection
 * @param props.sellerId UUID of the seller account.
 * @param props.verificationId UUID of the verification record to retrieve.
 * @path /shoppingMallAiBackend/admin/sellers/:sellerId/verifications/:verificationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the seller account. */
    sellerId: string & tags.Format<"uuid">;

    /** UUID of the verification record to retrieve. */
    verificationId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendSellerVerification;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/sellers/:sellerId/verifications/:verificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}/verifications/${encodeURIComponent(props.verificationId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendSellerVerification =>
    typia.random<IShoppingMallAiBackendSellerVerification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.param("verificationId")(() => typia.assert(props.verificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a seller's verification record (admin-only).
 *
 * Update the type, status, or reference document_uri for an existing seller
 * verification record. Enables onboarding workflow, status transition (e.g.,
 * submitted, approved, rejected), or correction of compliance documentation.
 * Admin-only.
 *
 * All changes are logged for audit purposes. Supports only editable
 * fieldsâ€”modifying immutable audit fields or history is not permitted.
 * Validation errors occur if attempting to update non-editable or nonexistent
 * records.
 *
 * Links directly to seller onboarding, periodic compliance, and evidence
 * workflows. All changes update verification's updated timestamp.
 *
 * @param props.connection
 * @param props.sellerId UUID of the seller for whom the verification is being
 *   updated.
 * @param props.verificationId UUID of the verification record to update.
 * @param props.body New values for verification record (type, status, URI,
 *   etc.)
 * @path /shoppingMallAiBackend/admin/sellers/:sellerId/verifications/:verificationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the seller for whom the verification is being updated. */
    sellerId: string & tags.Format<"uuid">;

    /** UUID of the verification record to update. */
    verificationId: string & tags.Format<"uuid">;

    /** New values for verification record (type, status, URI, etc.) */
    body: IShoppingMallAiBackendSellerVerification.IUpdate;
  };
  export type Body = IShoppingMallAiBackendSellerVerification.IUpdate;
  export type Response = IShoppingMallAiBackendSellerVerification;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/sellers/:sellerId/verifications/:verificationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}/verifications/${encodeURIComponent(props.verificationId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendSellerVerification =>
    typia.random<IShoppingMallAiBackendSellerVerification>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.param("verificationId")(() => typia.assert(props.verificationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a seller verification record (admin-only).
 *
 * Permanently remove a specific seller verification record, targeted by
 * sellerId and verificationId. All deletions are executed by admin and logged
 * in audit trail for future evidence needs. Operation is not reversible and
 * must comply with regulatory and business policy.
 *
 * Attempting to delete non-existent or already removed verification records
 * returns an error. This is critical for compliance, KYC/KYB evidence
 * management, and onboarding workflows.
 *
 * @param props.connection
 * @param props.sellerId UUID of the seller account.
 * @param props.verificationId UUID of the verification record to remove.
 * @path /shoppingMallAiBackend/admin/sellers/:sellerId/verifications/:verificationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the seller account. */
    sellerId: string & tags.Format<"uuid">;

    /** UUID of the verification record to remove. */
    verificationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/sellers/:sellerId/verifications/:verificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}/verifications/${encodeURIComponent(props.verificationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.param("verificationId")(() => typia.assert(props.verificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
