import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCouponNotification } from "../../../../../structures/IShoppingMallAiBackendCouponNotification";
import { IPageIShoppingMallAiBackendCouponNotification } from "../../../../../structures/IPageIShoppingMallAiBackendCouponNotification";

/**
 * Search and retrieve paginated coupon notifications for a specific coupon.
 *
 * Search and retrieve a paginated list of coupon notification events for a
 * particular coupon. This endpoint enables operational users to monitor, audit,
 * and analyze all notifications linked to a coupon, such as issuance messages,
 * expiry warnings, redemption confirmations, or error alerts. The search can be
 * filtered by notification type, status, recipient, or timeframe, and returns
 * results in a paginated format with summary fields for each notification
 * event.
 *
 * Notifications are used in compliance reporting, customer notification
 * history, and marketing campaign analytics, with robust search and access
 * controls for authorized users. Each entry in the response includes details
 * like notification type, delivery status, send attempts, and any error or
 * result messages. Data retrieval is subject to access rights with audit
 * logging for each query.
 *
 * Related operations: notification detail retrieval, notification
 * download/export, campaign management endpoints.
 *
 * @param props.connection
 * @param props.couponId Unique identifier of the coupon for which to retrieve
 *   notifications.
 * @param props.body Search and pagination parameters for filtering coupon
 *   notifications. May include filters for notification type, status,
 *   recipient, or time window.
 * @path /shoppingMallAiBackend/admin/coupons/:couponId/notifications
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the coupon for which to retrieve notifications. */
    couponId: string & tags.Format<"uuid">;

    /**
     * Search and pagination parameters for filtering coupon notifications.
     * May include filters for notification type, status, recipient, or time
     * window.
     */
    body: IShoppingMallAiBackendCouponNotification.IRequest;
  };
  export type Body = IShoppingMallAiBackendCouponNotification.IRequest;
  export type Response = IPageIShoppingMallAiBackendCouponNotification.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/coupons/:couponId/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/notifications`;
  export const random =
    (): IPageIShoppingMallAiBackendCouponNotification.ISummary =>
      typia.random<IPageIShoppingMallAiBackendCouponNotification.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full notification details for a specific coupon notification event.
 *
 * Retrieve full details of a specific coupon notification by notification ID
 * for a given coupon. This operation provides all business, delivery, and audit
 * metadata linked to a single notification eventâ€”such as notification type,
 * delivery status, send attempts, recipient, attempt timestamps, and any
 * associated error or result information. It enables advanced business
 * auditing, compliance verification, or notification delivery troubleshooting.
 *
 * Access is limited to authorized administrators due to the sensitive nature of
 * notification and delivery evidence. If the notification does not exist, an
 * error is returned. This endpoint is commonly used following a search or list
 * operation for notification audits and is essential during compliance reviews
 * or delivery investigations.
 *
 * @param props.connection
 * @param props.couponId Unique identifier of the coupon associated with the
 *   notification.
 * @param props.notificationId Unique identifier for the specific coupon
 *   notification event.
 * @path /shoppingMallAiBackend/admin/coupons/:couponId/notifications/:notificationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the coupon associated with the notification. */
    couponId: string & tags.Format<"uuid">;

    /** Unique identifier for the specific coupon notification event. */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCouponNotification;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/coupons/:couponId/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCouponNotification =>
    typia.random<IShoppingMallAiBackendCouponNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
