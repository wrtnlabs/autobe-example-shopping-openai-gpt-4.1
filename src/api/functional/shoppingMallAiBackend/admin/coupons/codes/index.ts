import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCouponCode } from "../../../../../structures/IShoppingMallAiBackendCouponCode";
import { IPageIShoppingMallAiBackendCouponCode } from "../../../../../structures/IPageIShoppingMallAiBackendCouponCode";

/**
 * Paginated search on coupon codes for campaign or compliance analysis.
 *
 * Search and retrieve coupon codes for a specific coupon, including details,
 * status, audit, and campaign assignment. Enables business visibility for event
 * distribution, bulk code management, or identification of fraud. Filters by
 * code, status (issued, redeemed, available, revoked), and supports
 * evidence-grade traceability. Only available to roles with campaign/compliance
 * authority.
 *
 * @param props.connection
 * @param props.couponId Coupon ID for which codes are being searched/audited.
 * @param props.body Search, filter criteria, and pagination for coupon codes
 *   (code, status, date, etc.).
 * @path /shoppingMallAiBackend/admin/coupons/:couponId/codes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function indexCouponCodes(
  connection: IConnection,
  props: indexCouponCodes.Props,
): Promise<indexCouponCodes.Response> {
  return true === connection.simulate
    ? indexCouponCodes.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...indexCouponCodes.METADATA,
          path: indexCouponCodes.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace indexCouponCodes {
  export type Props = {
    /** Coupon ID for which codes are being searched/audited. */
    couponId: string & tags.Format<"uuid">;

    /**
     * Search, filter criteria, and pagination for coupon codes (code,
     * status, date, etc.).
     */
    body: IShoppingMallAiBackendCouponCode.IRequest;
  };
  export type Body = IShoppingMallAiBackendCouponCode.IRequest;
  export type Response = IPageIShoppingMallAiBackendCouponCode;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/coupons/:couponId/codes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/codes`;
  export const random = (): IPageIShoppingMallAiBackendCouponCode =>
    typia.random<IPageIShoppingMallAiBackendCouponCode>();
  export const simulate = (
    connection: IConnection,
    props: indexCouponCodes.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: indexCouponCodes.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get audit-grade details for a campaign/bulk coupon code by ID.
 *
 * Get all business details, status, issuance, and audit history for a specific
 * coupon code for a campaign, event, or fraud analysis. Enables compliance,
 * tracking, and campaign quality controls, and links each code to relevant
 * policy and recipient as possible. Only available to business/compliance
 * users, never directly modifiable by end user.
 *
 * @param props.connection
 * @param props.couponId Coupon ID for lookup context.
 * @param props.codeId Target coupon code identifier to retrieve in full detail.
 * @path /shoppingMallAiBackend/admin/coupons/:couponId/codes/:codeId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function atCouponCode(
  connection: IConnection,
  props: atCouponCode.Props,
): Promise<atCouponCode.Response> {
  return true === connection.simulate
    ? atCouponCode.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...atCouponCode.METADATA,
          path: atCouponCode.path(props),
          status: null,
        },
      );
}
export namespace atCouponCode {
  export type Props = {
    /** Coupon ID for lookup context. */
    couponId: string & tags.Format<"uuid">;

    /** Target coupon code identifier to retrieve in full detail. */
    codeId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCouponCode;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/coupons/:couponId/codes/:codeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/codes/${encodeURIComponent(props.codeId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCouponCode =>
    typia.random<IShoppingMallAiBackendCouponCode>();
  export const simulate = (
    connection: IConnection,
    props: atCouponCode.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: atCouponCode.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("codeId")(() => typia.assert(props.codeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
