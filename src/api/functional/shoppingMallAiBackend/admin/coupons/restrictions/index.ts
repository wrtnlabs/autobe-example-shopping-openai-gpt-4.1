import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCouponRestriction } from "../../../../../structures/IShoppingMallAiBackendCouponRestriction";
import { IPageIShoppingMallAiBackendCouponRestriction } from "../../../../../structures/IPageIShoppingMallAiBackendCouponRestriction";

/**
 * Create a restriction on a coupon (limit scope, time, target, etc).
 *
 * Create a new coupon restriction. Each restriction limits the scope or
 * applicability of the coupon and can cover one or more business entities
 * (product, user, section, category, etc.) or define period-based or
 * policy-scenario limits.
 *
 * This operation guarantees that the provided criteria are both unique and
 * business-legal for the coupon, preventing dangerous or illogical
 * configuration that could yield lost revenue or customer friction. All
 * creations are logged for compliance and evidence.
 *
 * Strictly restricted to admin-level operators to protect promotional policy
 * and business outcomes.
 *
 * @param props.connection
 * @param props.couponId Unique identifier for the coupon to add the restriction
 *   under
 * @param props.body Restriction specification and business logic for the new
 *   restriction.
 * @path /shoppingMallAiBackend/admin/coupons/:couponId/restrictions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier for the coupon to add the restriction under */
    couponId: string & tags.Format<"uuid">;

    /** Restriction specification and business logic for the new restriction. */
    body: IShoppingMallAiBackendCouponRestriction.ICreate;
  };
  export type Body = IShoppingMallAiBackendCouponRestriction.ICreate;
  export type Response = IShoppingMallAiBackendCouponRestriction;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/coupons/:couponId/restrictions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/restrictions`;
  export const random = (): IShoppingMallAiBackendCouponRestriction =>
    typia.random<IShoppingMallAiBackendCouponRestriction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List restrictions for a given coupon with filtering and pagination.
 *
 * Query and list coupon restriction records on a coupon, with support for
 * pagination, search, and filter options. Each restriction defines a limitation
 * on coupon usage, enforced during customer shopping, checkout, or campaign
 * redemption.
 *
 * Administrators can filter restrictions by business context (e.g., product,
 * section, category, user, date/time), and sorting is supported by created_at
 * or business field. The endpoint is essential for promotion audit, business
 * rule management, and timely troubleshooting of discount eligibility issues.
 *
 * Response includes a summary view for each restriction, showing type, target,
 * and active periods, for fast reference and evidence compliance.
 *
 * @param props.connection
 * @param props.couponId Unique identifier for the coupon whose restrictions to
 *   list
 * @param props.body Search and filter criteria for coupon restrictions.
 * @path /shoppingMallAiBackend/admin/coupons/:couponId/restrictions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the coupon whose restrictions to list */
    couponId: string & tags.Format<"uuid">;

    /** Search and filter criteria for coupon restrictions. */
    body: IShoppingMallAiBackendCouponRestriction.IRequest;
  };
  export type Body = IShoppingMallAiBackendCouponRestriction.IRequest;
  export type Response = IPageIShoppingMallAiBackendCouponRestriction.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/coupons/:couponId/restrictions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/restrictions`;
  export const random =
    (): IPageIShoppingMallAiBackendCouponRestriction.ISummary =>
      typia.random<IPageIShoppingMallAiBackendCouponRestriction.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get the details of a coupon restriction by restrictionId.
 *
 * Retrieve detailed information on an individual coupon restriction, including
 * its type, conditions, target entity, active period, and enforcement status.
 *
 * The restriction data allows administrators and compliance reviewers to
 * understand why a coupon is not applicable or is blocked in specific business
 * scenarios. Use is restricted to business analysts and operational leads for
 * compliance and audit.
 *
 * Historical access logs are typically maintained to track who reviewed which
 * restrictions, in line with regulatory and business policy standards.
 *
 * @param props.connection
 * @param props.couponId Unique identifier of the coupon to which the
 *   restriction belongs
 * @param props.restrictionId Unique identifier of the restriction to retrieve
 * @path /shoppingMallAiBackend/admin/coupons/:couponId/restrictions/:restrictionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the coupon to which the restriction belongs */
    couponId: string & tags.Format<"uuid">;

    /** Unique identifier of the restriction to retrieve */
    restrictionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCouponRestriction;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/coupons/:couponId/restrictions/:restrictionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/restrictions/${encodeURIComponent(props.restrictionId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCouponRestriction =>
    typia.random<IShoppingMallAiBackendCouponRestriction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("restrictionId")(() => typia.assert(props.restrictionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a coupon restriction by restrictionId (target, time, user, etc).
 *
 * Update a coupon restriction. This enables dynamic adjustment of eligibility,
 * timeframes, targets, and policy. Only business administrators with specialist
 * knowledge should invoke this operation, as flawed configuration could cause
 * system-wide promotion or compliance failures.
 *
 * All changes are audited, with rollback and evidence recovery processes in
 * place. Business validation and system integrity checks are performed prior to
 * update, and the operation is atomic: success or full rollback.
 *
 * Afterward, the new restriction parameters govern coupon use in all active
 * transactions and eligibility checks.
 *
 * @param props.connection
 * @param props.couponId Unique identifier for coupon assigned to the
 *   restriction
 * @param props.restrictionId Unique identifier for the restriction to update
 * @param props.body Updated restriction details (target, logic, reason, etc).
 * @path /shoppingMallAiBackend/admin/coupons/:couponId/restrictions/:restrictionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for coupon assigned to the restriction */
    couponId: string & tags.Format<"uuid">;

    /** Unique identifier for the restriction to update */
    restrictionId: string & tags.Format<"uuid">;

    /** Updated restriction details (target, logic, reason, etc). */
    body: IShoppingMallAiBackendCouponRestriction.IUpdate;
  };
  export type Body = IShoppingMallAiBackendCouponRestriction.IUpdate;
  export type Response = IShoppingMallAiBackendCouponRestriction;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/coupons/:couponId/restrictions/:restrictionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/restrictions/${encodeURIComponent(props.restrictionId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCouponRestriction =>
    typia.random<IShoppingMallAiBackendCouponRestriction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("restrictionId")(() => typia.assert(props.restrictionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a coupon restriction from the system.
 *
 * Permanently delete a specific coupon restriction from the system. This
 * operation is used by administrators or coupon managers to remove a business
 * rule that limits the applicability of a coupon. The operation affects the
 * eligibility logic for coupon redemption, enabling dynamic policy updates for
 * active marketing campaigns or compliance changes.
 *
 * Security controls ensure that only authorized users may delete restrictions.
 * All delete actions are logged for compliance with regulatory and business
 * policy standards. The deletion is irreversible, and will remove the
 * corresponding record entirely from the
 * shopping_mall_ai_backend_coupon_restrictions table. If the restriction does
 * not exist, a not found or already deleted error is returned. Use this
 * operation carefully, as changes may allow broader coupon usage than
 * originally intended, impacting both customers and sellers.
 *
 * Related endpoints include the search (index), add (post), and update (put)
 * operations on coupon restrictions. This endpoint is typically used in
 * advanced coupon management scenarios by business operations teams.
 *
 * @param props.connection
 * @param props.couponId Unique identifier of the target coupon to which the
 *   restriction belongs.
 * @param props.restrictionId Unique identifier for the coupon restriction to
 *   delete.
 * @path /shoppingMallAiBackend/admin/coupons/:couponId/restrictions/:restrictionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the target coupon to which the restriction
     * belongs.
     */
    couponId: string & tags.Format<"uuid">;

    /** Unique identifier for the coupon restriction to delete. */
    restrictionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/coupons/:couponId/restrictions/:restrictionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/restrictions/${encodeURIComponent(props.restrictionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("restrictionId")(() => typia.assert(props.restrictionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
