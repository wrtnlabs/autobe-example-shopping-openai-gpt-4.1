import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendProductCategory } from "../../../../structures/IShoppingMallAiBackendProductCategory";
import { IPageIShoppingMallAiBackendProductCategory } from "../../../../structures/IPageIShoppingMallAiBackendProductCategory";

/**
 * Create a new product category.
 *
 * This API registers a new product category, populating all mandatory business
 * fields as defined in the schema. The operation enforces uniqueness for
 * 'category_code' and, optionally, for name within its channel. Supports
 * definition of parent category (for nested/hierarchical taxonomies), sorting
 * order, and activation state (for listing/navigation).
 *
 * Authorization is enforced for admin and category managers only, per platform
 * policy. Successful calls return the complete new product category record;
 * errors for duplicate codes, invalid parameters, or missing parents (in
 * hierarchy) are clearly reported. Integrates with category retrieval and
 * management workflows for seamless catalog operation.
 *
 * @param props.connection
 * @param props.body Required and optional attributes for the new product
 *   category, including hierarchical placement, sort order, and display
 *   properties.
 * @path /shoppingMallAiBackend/admin/productCategories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Required and optional attributes for the new product category,
     * including hierarchical placement, sort order, and display
     * properties.
     */
    body: IShoppingMallAiBackendProductCategory.ICreate;
  };
  export type Body = IShoppingMallAiBackendProductCategory.ICreate;
  export type Response = IShoppingMallAiBackendProductCategory;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/productCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/productCategories";
  export const random = (): IShoppingMallAiBackendProductCategory =>
    typia.random<IShoppingMallAiBackendProductCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and retrieve a paginated list of product categories.
 *
 * This API operation provides a sophisticated way to search, filter, and
 * retrieve product categories within the shopping mall backend. It utilizes
 * advanced query parameters for sorting, paging, and hierarchical filtering
 * based on the actual fields in the Prisma schema (such as 'category_name',
 * 'category_code', 'parent_id', 'is_active', and 'sort_order').
 *
 * Administrators and seller managers can use this endpoint to analyze and
 * manage categories across channels and for various business analytics needs.
 * Role-based access ensures that only authorized personnel can execute such
 * broad queries, and sensitive hierarchical category data is protected from
 * public exposure.
 *
 * Related category creation and update operations allow for lifecycle
 * management, while this operation focuses on read access with filtering and
 * search. Error handling includes validation feedback for invalid filters or
 * missing required parameters. Only product category data is included, and
 * response fields adhere strictly to business logic and regulatory audit
 * requirements.
 *
 * @param props.connection
 * @param props.body Complex query and filter parameters for searching product
 *   categories (e.g., name, code, parent-child, is_active) with paging and sort
 *   options.
 * @path /shoppingMallAiBackend/admin/productCategories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Complex query and filter parameters for searching product categories
     * (e.g., name, code, parent-child, is_active) with paging and sort
     * options.
     */
    body: IShoppingMallAiBackendProductCategory.IRequest;
  };
  export type Body = IShoppingMallAiBackendProductCategory.IRequest;
  export type Response = IPageIShoppingMallAiBackendProductCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/productCategories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/productCategories";
  export const random =
    (): IPageIShoppingMallAiBackendProductCategory.ISummary =>
      typia.random<IPageIShoppingMallAiBackendProductCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a single product category by ID.
 *
 * This operation fetches the complete details for a specific product category
 * by ID. All business-relevant fields from the category model, such as
 * 'category_name', 'category_code', 'parent_id', 'is_active', and descriptive
 * metadata, are made available for display or editing purposes.
 *
 * Authorized users (such as admin or category managers) can use this endpoint
 * to view or pre-fill category editing dialogs, or to present users with
 * category attributes in business dashboards. The operation secures access to
 * only the requested category, ensuring privacy and correctness. Related
 * operations may use this as a precursor to category update or deletion
 * workflows.
 *
 * Errors are raised in case the category does not exist or access is
 * unauthorized, with meaningful business error codes and descriptions.
 *
 * @param props.connection
 * @param props.categoryId The unique identifier (UUID) of the product category
 *   to retrieve.
 * @path /shoppingMallAiBackend/admin/productCategories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the product category to retrieve. */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendProductCategory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/productCategories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/productCategories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendProductCategory =>
    typia.random<IShoppingMallAiBackendProductCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing product category by ID.
 *
 * Allows updating of an existing product category. Authorized administrators
 * can modify essential attributes such as category name, code, description,
 * parent_id (to reorganize hierarchy), sort order, and activation status.
 * Underlying logic in the model enforces uniqueness and business constraints.
 *
 * All changes are logged or snapshotted for audit trail and rollback per
 * compliance rules. Errors are returned if the category is missing, locked, or
 * if updates would violate parent-child or uniqueness constraints. The endpoint
 * is designed for efficient bulk catalog management as well as individual
 * editing use cases.
 *
 * Only authorized 'admin' or designated category managers may perform this
 * update.
 *
 * @param props.connection
 * @param props.categoryId The unique identifier (UUID) of the product category
 *   to modify.
 * @param props.body Fields to update the product category, permitting partial
 *   updates to code, name, parent, activation, or sort order.
 * @path /shoppingMallAiBackend/admin/productCategories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the product category to modify. */
    categoryId: string & tags.Format<"uuid">;

    /**
     * Fields to update the product category, permitting partial updates to
     * code, name, parent, activation, or sort order.
     */
    body: IShoppingMallAiBackendProductCategory.IUpdate;
  };
  export type Body = IShoppingMallAiBackendProductCategory.IUpdate;
  export type Response = IShoppingMallAiBackendProductCategory;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/productCategories/:categoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/productCategories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendProductCategory =>
    typia.random<IShoppingMallAiBackendProductCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a product category by ID, retaining evidence for audit.
 *
 * This API operation performs a soft deletion of the product category
 * identified by the supplied UUID. It sets the 'deleted_at' field, making the
 * category unavailable for further business use or assignment to new products,
 * but retains it for evidence, audit, and regulatory review. Cascading removal
 * of product-category mappings is not automatic; associated products remain
 * immutable to avoid orphaning data.
 *
 * Only authorized personnel (admins) may execute this call. Error responses
 * occur if the category does not exist, is already deleted, or is locked/in use
 * in a way that prohibits removal. Related operations include category listing,
 * retrieval, and restoration for compliance workflows.
 *
 * @param props.connection
 * @param props.categoryId The unique identifier (UUID) of the product category
 *   to soft delete.
 * @path /shoppingMallAiBackend/admin/productCategories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier (UUID) of the product category to soft delete. */
    categoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/productCategories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/productCategories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
