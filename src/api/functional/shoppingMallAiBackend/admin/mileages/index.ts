import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendMileage } from "../../../../structures/IShoppingMallAiBackendMileage";

/**
 * Update (admin/system) attributes of mileage ledger.
 *
 * Modifies a specific mileage ledger identified by mileageId. Allows system or
 * administrator-driven updates to balances, status, rationale, or ownership.
 * For use in correcting errors, handling operational incidents, or applying
 * business policy (e.g., manual balance adjustment after dispute resolution).
 *
 * Validation ensures only authorized role or automated system logic invokes
 * this. Audits all changes for compliance. Typical errors: not found,
 * forbidden, bad request due to invalid updates, or business rules violations.
 * Returns updated mileage ledger in response.
 *
 * @param props.connection
 * @param props.mileageId UUID of the mileage ledger to update.
 * @param props.body Fields and values for updating the targeted mileage ledger
 *   (status, balances, etc).
 * @path /shoppingMallAiBackend/admin/mileages/:mileageId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the mileage ledger to update. */
    mileageId: string & tags.Format<"uuid">;

    /**
     * Fields and values for updating the targeted mileage ledger (status,
     * balances, etc).
     */
    body: IShoppingMallAiBackendMileage.IUpdate;
  };
  export type Body = IShoppingMallAiBackendMileage.IUpdate;
  export type Response = IShoppingMallAiBackendMileage;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/mileages/:mileageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/mileages/${encodeURIComponent(props.mileageId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendMileage =>
    typia.random<IShoppingMallAiBackendMileage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a mileage ledger for compliance/evidence purposes.
 *
 * Marks a mileage/point ledger as deleted (logical deletion) for
 * business/institutional compliance. Only authorized platform admins or
 * automated back-office processes can perform this action. Sets deleted_at;
 * does not physically erase record, supporting audit and compliance evidence.
 *
 * Ensures no further accrual/use events are permitted; all history remains
 * queryable for authorized review, but invisible in normal user queries. Errors
 * may occur if mileageId does not exist or is already deleted. Susceptible to
 * audit logging and security review.
 *
 * @param props.connection
 * @param props.mileageId UUID of the mileage ledger to be soft-deleted.
 * @path /shoppingMallAiBackend/admin/mileages/:mileageId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the mileage ledger to be soft-deleted. */
    mileageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/mileages/:mileageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/mileages/${encodeURIComponent(props.mileageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
