import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendChannelCategory } from "../../../../../structures/IShoppingMallAiBackendChannelCategory";
import { IPageIShoppingMallAiBackendChannelCategory } from "../../../../../structures/IPageIShoppingMallAiBackendChannelCategory";

/**
 * Create a new business category under a sales channel, scoping code, name, and
 * navigation properties.
 *
 * Create a new category under a specific channel, defining code, name, order,
 * parent (for hierarchical navigation), and optional business description.
 * Validates that category code is unique within the channel and attaches to an
 * existing parent if provided.
 *
 * Security: Restricted to admin; improper parent assignment or code collision
 * will return a validation error. New categories support business content
 * taxonomy, navigation experiences, and analytics segmentation.
 *
 * Each created category is tracked for audit and possible future modification
 * or soft delete.
 *
 * @param props.connection
 * @param props.channelId The unique channel identifier (UUID) under which the
 *   category is created.
 * @param props.body Data for new channel category including code, name, order,
 *   parent, and (optional) description.
 * @path /shoppingMallAiBackend/admin/channels/:channelId/categories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The unique channel identifier (UUID) under which the category is
     * created.
     */
    channelId: string & tags.Format<"uuid">;

    /**
     * Data for new channel category including code, name, order, parent,
     * and (optional) description.
     */
    body: IShoppingMallAiBackendChannelCategory.ICreate;
  };
  export type Body = IShoppingMallAiBackendChannelCategory.ICreate;
  export type Response = IShoppingMallAiBackendChannelCategory;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories`;
  export const random = (): IShoppingMallAiBackendChannelCategory =>
    typia.random<IShoppingMallAiBackendChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/search categories within a channel with filters, sorting, and
 * pagination.
 *
 * Search and list all business categories within the given channel, supporting
 * query by code, name, ordering, parent, and is_active status. Pagination and
 * sorting provides efficient handling of large taxonomies, supporting admin UI
 * and business analytics scenarios.
 *
 * Security: Only accessible to admin roles. Filters applied for code, name,
 * order, and navigation hierarchy help manage business content and validate
 * structure integrity.
 *
 * This operation supports complex business context for hierarchical category
 * structures, personalized navigation, and channel-specific taxonomy
 * maintenance.
 *
 * Related: GET operation retrieves individual category. POST creates a new
 * category under the channel.
 *
 * @param props.connection
 * @param props.channelId The parent channel unique identifier (UUID) for which
 *   categories are managed.
 * @param props.body Search and filter parameters for categories, including
 *   paging, sorting, code/name, parent, and status.
 * @path /shoppingMallAiBackend/admin/channels/:channelId/categories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The parent channel unique identifier (UUID) for which categories are
     * managed.
     */
    channelId: string & tags.Format<"uuid">;

    /**
     * Search and filter parameters for categories, including paging,
     * sorting, code/name, parent, and status.
     */
    body: IShoppingMallAiBackendChannelCategory.IRequest;
  };
  export type Body = IShoppingMallAiBackendChannelCategory.IRequest;
  export type Response = IPageIShoppingMallAiBackendChannelCategory;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories`;
  export const random = (): IPageIShoppingMallAiBackendChannelCategory =>
    typia.random<IPageIShoppingMallAiBackendChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full details of a channel category for edit, review, or analytics.
 *
 * Retrieve all key business attributes for a specific category within the given
 * channel, including name, code, parent, order, and description. Used for edit
 * flows, validation, and business analytics. Only accessible to admins
 * responsible for channel management.
 *
 * The response provides a complete category object, supporting integrations and
 * hierarchical taxonomy awareness for UI, navigation logic, or audit
 * workflows.
 *
 * Related: PATCH endpoint lists/filter categories; PUT updates details; DELETE
 * performs soft delete.
 *
 * @param props.connection
 * @param props.channelId Unique channel identifier (UUID) scoping the category.
 * @param props.categoryId Unique identifier for the category within the channel
 *   (UUID).
 * @path /shoppingMallAiBackend/admin/channels/:channelId/categories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique channel identifier (UUID) scoping the category. */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier for the category within the channel (UUID). */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendChannelCategory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendChannelCategory =>
    typia.random<IShoppingMallAiBackendChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update properties of a channel category, including name, code, order, and
 * parent.
 *
 * Update details of a channel category, such as code, name, parent, sort order,
 * and description. All changes are reflected in the updated_at timestamp for
 * audit. Operation checks for uniqueness of code within the channel and ensures
 * consistency for navigational structure by validation against parent
 * assignment and relation constraints.
 *
 * Admin access required; database-level constraints prevent code duplications
 * or parent/child loops. Used in business taxonomy management, analytics, and
 * UI navigation flows.
 *
 * @param props.connection
 * @param props.channelId Channel unique identifier (UUID) for the category's
 *   parent channel.
 * @param props.categoryId Unique identifier of the category to update (UUID).
 * @param props.body Fields for patching channel category fields, e.g., code,
 *   name, order, description, parent.
 * @path /shoppingMallAiBackend/admin/channels/:channelId/categories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Channel unique identifier (UUID) for the category's parent channel. */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier of the category to update (UUID). */
    categoryId: string & tags.Format<"uuid">;

    /**
     * Fields for patching channel category fields, e.g., code, name, order,
     * description, parent.
     */
    body: IShoppingMallAiBackendChannelCategory.IUpdate;
  };
  export type Body = IShoppingMallAiBackendChannelCategory.IUpdate;
  export type Response = IShoppingMallAiBackendChannelCategory;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/categories/:categoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendChannelCategory =>
    typia.random<IShoppingMallAiBackendChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a category in the navigation taxonomy, preserving evidence and
 * audit trail.
 *
 * Mark a channel category as deleted-at (soft delete). This prevents visibility
 * in end-user navigation and disables as a parent for hierarchy, but retains
 * the record and its full audit evidence. Only admin can soft delete; business
 * logic must prevent deletion if used as active parent of another category.
 *
 * Deletion preserves information for regulatory, audit, and business evidence.
 * Use PATCH for recovery if reinstatement is required.
 *
 * @param props.connection
 * @param props.channelId Channel unique identifier (UUID) for the parent of the
 *   category.
 * @param props.categoryId Unique identifier of the category to be soft deleted
 *   (UUID).
 * @path /shoppingMallAiBackend/admin/channels/:channelId/categories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Channel unique identifier (UUID) for the parent of the category. */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier of the category to be soft deleted (UUID). */
    categoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
