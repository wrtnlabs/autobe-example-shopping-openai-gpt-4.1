import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendChannel } from "../../../../structures/IShoppingMallAiBackendChannel";
import { IPageIShoppingMallAiBackendChannel } from "../../../../structures/IPageIShoppingMallAiBackendChannel";
export * as sections from "./sections";
export * as categories from "./categories";

/**
 * Create a new sales channel for a web, app, or affiliate storefront.
 *
 * Create a new sales channel representing a separate business storefront,
 * localized entity, or operational domain. The request must provide a unique
 * code, name, region configuration, language, and legal compliance data. This
 * operation is restricted to authorized administrators to ensure compliance and
 * consistent business logic enforcement.
 *
 * Upon successful channel creation, returns the full entity as stored in the
 * shopping_mall_ai_backend_channels table. Enforces business validation such as
 * unique code per channel, region compliance, and configuration completeness.
 * Handles error scenarios including duplicate codes, validation failures, or
 * lack of authorization.
 *
 * @param props.connection
 * @param props.body Information and configuration for the new sales channel.
 * @path /shoppingMallAiBackend/admin/channels
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information and configuration for the new sales channel. */
    body: IShoppingMallAiBackendChannel.ICreate;
  };
  export type Body = IShoppingMallAiBackendChannel.ICreate;
  export type Response = IShoppingMallAiBackendChannel;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/channels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/channels";
  export const random = (): IShoppingMallAiBackendChannel =>
    typia.random<IShoppingMallAiBackendChannel>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated, filterable list of sales channels.
 *
 * Retrieve a paginated and filterable list of all sales channels defined in the
 * shopping mall backend. Allows filtering by channel code, name, country,
 * currency, and active status. The operation leverages the
 * shopping_mall_ai_backend_channels table and exposes channel metadata needed
 * for administrative management, reporting, and customer-facing selection.
 *
 * Supports advanced queries, pagination, and sorting for business use across
 * regions. Only channels not marked as soft-deleted (deleted_at is null) are
 * included by default, unless otherwise specified. Access may be restricted to
 * administrative or authorized roles based on compliance policy.
 *
 * This API is essential for global and multichannel management in the platform
 * and is frequently called for operational dashboards, onboarding flows, and
 * system-wide configuration scenarios. Error handling includes invalid filter
 * parameters and authorization errors.
 *
 * @param props.connection
 * @param props.body Filter, pagination, and query options for searching
 *   channels.
 * @path /shoppingMallAiBackend/admin/channels
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, pagination, and query options for searching channels. */
    body: IShoppingMallAiBackendChannel.IRequest;
  };
  export type Body = IShoppingMallAiBackendChannel.IRequest;
  export type Response = IPageIShoppingMallAiBackendChannel.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/channels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/channels";
  export const random = (): IPageIShoppingMallAiBackendChannel.ISummary =>
    typia.random<IPageIShoppingMallAiBackendChannel.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific sales channel by ID.
 *
 * Retrieve detailed information about a single sales channel by its unique
 * identifier. The endpoint returns the entire record as present in the
 * shopping_mall_ai_backend_channels table, exposing all relevant business
 * configuration fields for the channel, such as branding assets, regulatory
 * information, and operational settings.
 *
 * Used for administrative channel management, compliance review, and detailed
 * operational dashboards. This API is essential when viewing or configuring a
 * single channel in system interfaces. Returns null if the channel does not
 * exist or is soft deleted, unless otherwise configured by business logic.
 *
 * @param props.connection
 * @param props.channelId Unique identifier of the target channel.
 * @path /shoppingMallAiBackend/admin/channels/:channelId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target channel. */
    channelId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendChannel;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/channels/:channelId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendChannel =>
    typia.random<IShoppingMallAiBackendChannel>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update configuration or details of a specific sales channel.
 *
 * Update details for an existing sales channel identified by its ID. Allows
 * changing displays, legal compliance, currency, or other configuration
 * properties. The operation validates business rules, including unique code,
 * region suitability, and non-deleted status. Restricted to administrative
 * roles for proper change management and compliance tracking.
 *
 * Returns the updated channel record on success. Failure scenarios include
 * attempting to update a deleted channel, validation failures, or lack of
 * authorization. The channel's last updated timestamp is amended upon a
 * successful update.
 *
 * @param props.connection
 * @param props.channelId Unique identifier of the channel to update.
 * @param props.body New configuration or business information to update the
 *   channel.
 * @path /shoppingMallAiBackend/admin/channels/:channelId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the channel to update. */
    channelId: string & tags.Format<"uuid">;

    /** New configuration or business information to update the channel. */
    body: IShoppingMallAiBackendChannel.IUpdate;
  };
  export type Body = IShoppingMallAiBackendChannel.IUpdate;
  export type Response = IShoppingMallAiBackendChannel;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/channels/:channelId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendChannel =>
    typia.random<IShoppingMallAiBackendChannel>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a sales channel by marking the deleted_at field.
 *
 * Logically delete (soft delete) a sales channel record, marking it as deleted
 * by setting the deleted_at column. The operation retains the record for audit
 * and compliance purposes, ensuring no data is actually physically removed.
 *
 * Available only to authorized administrator users. Provides compliance with
 * regulatory and business policy about data preservation. If a channel has
 * already been deleted, the operation is idempotent. Attempts to delete
 * non-existent records result in no operation or an error, depending on system
 * policy.
 *
 * @param props.connection
 * @param props.channelId Unique identifier of the channel to delete.
 * @path /shoppingMallAiBackend/admin/channels/:channelId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the channel to delete. */
    channelId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/channels/:channelId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
