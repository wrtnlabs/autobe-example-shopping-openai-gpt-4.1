import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendChannelSection } from "../../../../../structures/IShoppingMallAiBackendChannelSection";
import { IPageIShoppingMallAiBackendChannelSection } from "../../../../../structures/IPageIShoppingMallAiBackendChannelSection";

/**
 * Add a new nested or root section to a sales channel.
 *
 * Add a new section node within a given channel, configuring new navigation,
 * homepage, featured area, or other conceptual area in the storefront. Supports
 * nesting under existing sections. Administration privileges are required. All
 * section business properties (code, name, order, description) must comply with
 * unique and validation constraints.
 *
 * Returns the full new section record as stored. Failure scenarios include
 * duplicate section codes, invalid parent section, or insufficient permissions.
 * This operation is critical for enterprise business operations or new sales
 * rollout.
 *
 * @param props.connection
 * @param props.channelId Parent channel's unique identifier.
 * @param props.body New section's business and configuration parameters.
 * @path /shoppingMallAiBackend/admin/channels/:channelId/sections
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Parent channel's unique identifier. */
    channelId: string & tags.Format<"uuid">;

    /** New section's business and configuration parameters. */
    body: IShoppingMallAiBackendChannelSection.ICreate;
  };
  export type Body = IShoppingMallAiBackendChannelSection.ICreate;
  export type Response = IShoppingMallAiBackendChannelSection;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections`;
  export const random = (): IShoppingMallAiBackendChannelSection =>
    typia.random<IShoppingMallAiBackendChannelSection>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginated, filterable list of channel sections by channel ID.
 *
 * Obtain a list of sections configured for a specified channel, supporting
 * pagination, section code/name filtering, and tree structure organization.
 * This operation returns section information relevant for storefront setup,
 * hierarchical layout, and navigation placement.
 *
 * Only sections not logically deleted (deleted_at is null) are returned by
 * default. Used in administrative interfaces and storefront configuration
 * workflows. Error handling includes invalid channel IDs, filter parameters,
 * and unauthorized access attempts.
 *
 * @param props.connection
 * @param props.channelId Unique identifier of the channel whose sections to
 *   query.
 * @param props.body Filtering, tree depth, and pagination parameters for
 *   querying channel sections.
 * @path /shoppingMallAiBackend/admin/channels/:channelId/sections
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the channel whose sections to query. */
    channelId: string & tags.Format<"uuid">;

    /**
     * Filtering, tree depth, and pagination parameters for querying channel
     * sections.
     */
    body: IShoppingMallAiBackendChannelSection.IRequest;
  };
  export type Body = IShoppingMallAiBackendChannelSection.IRequest;
  export type Response = IPageIShoppingMallAiBackendChannelSection.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections`;
  export const random =
    (): IPageIShoppingMallAiBackendChannelSection.ISummary =>
      typia.random<IPageIShoppingMallAiBackendChannelSection.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific channel section.
 *
 * Fetch the full details for a specific section within a channel. Details
 * include section code, name, description, order, hierarchical structure, and
 * configuration for business and navigation purposes. Returns all section
 * fields as defined in the Prisma schema. Only accessible to administrators.
 *
 * If the section is missing or has been soft-deleted, the response will be null
 * or an error depending on implementation. Input validation ensures both
 * channelId and sectionId are valid UUIDs with existing references.
 *
 * @param props.connection
 * @param props.channelId ID of the parent channel.
 * @param props.sectionId ID of the target section to retrieve.
 * @path /shoppingMallAiBackend/admin/channels/:channelId/sections/:sectionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the parent channel. */
    channelId: string & tags.Format<"uuid">;

    /** ID of the target section to retrieve. */
    sectionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendChannelSection;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/sections/:sectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections/${encodeURIComponent(props.sectionId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendChannelSection =>
    typia.random<IShoppingMallAiBackendChannelSection>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("sectionId")(() => typia.assert(props.sectionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a sales channel section's business details (name, code, parent, order,
 * description).
 *
 * Update details of a specific channel section, such as its display name, code,
 * ordering for navigation, parent/child relationships, and business-use
 * description. Sections are used to organize content and navigation structure
 * in sales channels, and updates may affect business analytics, UI, and
 * personalized experiences.
 *
 * Security: This operation should be restricted to admin roles as section
 * changes can impact core navigation and end-user experience across channels.
 * The request will validate for code uniqueness within the channel, check for
 * valid parent section if provided, and update timestamps accordingly.
 *
 * All fields except id and channelId are updatable except relations; usage of a
 * deleted parent section or code collision is forbidden. The updated timestamp
 * will record this change for audit.
 *
 * Related: The GET endpoint retrieves individual section details, while PATCH
 * lists/searches sections within a channel.
 *
 * @param props.connection
 * @param props.channelId Channel unique identifier (UUID) for the section's
 *   parent channel.
 * @param props.sectionId Unique identifier of the section to update (UUID).
 * @param props.body Fields for updating the channel section. Includes name,
 *   code, order, parent_id, description.
 * @path /shoppingMallAiBackend/admin/channels/:channelId/sections/:sectionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Channel unique identifier (UUID) for the section's parent channel. */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier of the section to update (UUID). */
    sectionId: string & tags.Format<"uuid">;

    /**
     * Fields for updating the channel section. Includes name, code, order,
     * parent_id, description.
     */
    body: IShoppingMallAiBackendChannelSection.IUpdate;
  };
  export type Body = IShoppingMallAiBackendChannelSection.IUpdate;
  export type Response = IShoppingMallAiBackendChannelSection;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/sections/:sectionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections/${encodeURIComponent(props.sectionId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendChannelSection =>
    typia.random<IShoppingMallAiBackendChannelSection>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("sectionId")(() => typia.assert(props.sectionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a channel section while preserving audit history and evidence.
 *
 * Soft delete a channel section by marking its deleted_at field with the
 * current timestamp. This operation preserves the section for audit and
 * evidence purposes while removing it from regular navigation and business
 * flows.
 *
 * Security: Restricted to admin roles as it affects navigation and structural
 * integrity. Attempting to delete a section with dependent active relations
 * must raise a validation error. Audit history and compliance requirements are
 * met through logical (soft) deletion rather than hard removal.
 *
 * This operation is commonly used to temporarily or permanently hide sections,
 * supporting rollback if needed by retaining the data.
 *
 * @param props.connection
 * @param props.channelId Channel unique identifier (UUID) for the section's
 *   parent channel.
 * @param props.sectionId Unique identifier of the section to delete (UUID).
 * @path /shoppingMallAiBackend/admin/channels/:channelId/sections/:sectionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Channel unique identifier (UUID) for the section's parent channel. */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier of the section to delete (UUID). */
    sectionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/channels/:channelId/sections/:sectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections/${encodeURIComponent(props.sectionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("sectionId")(() => typia.assert(props.sectionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
