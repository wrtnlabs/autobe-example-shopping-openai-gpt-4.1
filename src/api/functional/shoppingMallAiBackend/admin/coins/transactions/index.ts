import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCoinTransaction } from "../../../../../structures/IShoppingMallAiBackendCoinTransaction";
import { IPageIShoppingMallAiBackendCoinTransaction } from "../../../../../structures/IPageIShoppingMallAiBackendCoinTransaction";

/**
 * Search transaction history for a specific coin wallet ledger.
 *
 * Search and retrieve transaction (event) logs for a specified digital coin
 * wallet, supporting advanced filtering by event type, amount, date range, or
 * actor type. The operation is commonly used for audit, campaign analysis, or
 * compliance reporting. Business permissions ensure that only authorized admins
 * or wallet owners can query transaction histories. Results are returned in
 * pageable groups with event metadata for each entry. Related endpoints allow
 * access to transaction detail or trigger business incident reviews.
 *
 * @param props.connection
 * @param props.coinId Coin wallet ledger ID for which to retrieve transactions.
 * @param props.body Query, filter, and pagination options for finding wallet
 *   transactions.
 * @path /shoppingMallAiBackend/admin/coins/:coinId/transactions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Coin wallet ledger ID for which to retrieve transactions. */
    coinId: string & tags.Format<"uuid">;

    /**
     * Query, filter, and pagination options for finding wallet
     * transactions.
     */
    body: IShoppingMallAiBackendCoinTransaction.IRequest;
  };
  export type Body = IShoppingMallAiBackendCoinTransaction.IRequest;
  export type Response = IPageIShoppingMallAiBackendCoinTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/coins/:coinId/transactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/coins/${encodeURIComponent(props.coinId ?? "null")}/transactions`;
  export const random = (): IPageIShoppingMallAiBackendCoinTransaction =>
    typia.random<IPageIShoppingMallAiBackendCoinTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("coinId")(() => typia.assert(props.coinId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of an individual coin wallet transaction event.
 *
 * Retrieve the full details of a single transaction event within a digital coin
 * wallet, including the before/after balances, actor type, transaction type,
 * origin, and timestamps. The operation requires both coinId (parent wallet)
 * and transactionId (event). Detailed audit metadata is included for compliance
 * review, evidence record production, or incident resolution. Access is
 * enforced by business permissions for financial event traceability. Errors are
 * returned if unauthorized or if the record does not exist.
 *
 * @param props.connection
 * @param props.coinId Parent coin wallet ID to which the transaction belongs.
 * @param props.transactionId Unique transaction event ID within the coin
 *   wallet.
 * @path /shoppingMallAiBackend/admin/coins/:coinId/transactions/:transactionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Parent coin wallet ID to which the transaction belongs. */
    coinId: string & tags.Format<"uuid">;

    /** Unique transaction event ID within the coin wallet. */
    transactionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCoinTransaction;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/coins/:coinId/transactions/:transactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/coins/${encodeURIComponent(props.coinId ?? "null")}/transactions/${encodeURIComponent(props.transactionId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCoinTransaction =>
    typia.random<IShoppingMallAiBackendCoinTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("coinId")(() => typia.assert(props.coinId));
      assert.param("transactionId")(() => typia.assert(props.transactionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
