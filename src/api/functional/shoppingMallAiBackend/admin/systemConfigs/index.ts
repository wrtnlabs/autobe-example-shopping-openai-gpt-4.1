import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendSystemConfig } from "../../../../structures/IShoppingMallAiBackendSystemConfig";
import { IPageIShoppingMallAiBackendSystemConfig } from "../../../../structures/IPageIShoppingMallAiBackendSystemConfig";

/**
 * Create a new global system configuration entry.
 *
 * Add a new configuration entry to the system configs table, defining the key,
 * value, and optional attributes such as description and time bounds. New
 * configuration enables admins to control platform features and policies in a
 * dynamic and auditable manner. Only users with config/admin privileges may
 * call this endpoint.
 *
 * @param props.connection
 * @param props.body Configuration parameters to create the new system config.
 * @path /shoppingMallAiBackend/admin/systemConfigs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Configuration parameters to create the new system config. */
    body: IShoppingMallAiBackendSystemConfig.ICreate;
  };
  export type Body = IShoppingMallAiBackendSystemConfig.ICreate;
  export type Response = IShoppingMallAiBackendSystemConfig;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/systemConfigs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/systemConfigs";
  export const random = (): IShoppingMallAiBackendSystemConfig =>
    typia.random<IShoppingMallAiBackendSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and retrieve paginated global system configurations.
 *
 * Search and retrieve system-level configuration definitions with flexible
 * filtering by config key, time ranges, description, or status. Results are
 * paginated to handle potentially large config sets. Security restrictions
 * require admin/system operator authorization. This endpoint is essential for
 * platform management, policy review, and troubleshooting global feature
 * settings.
 *
 * @param props.connection
 * @param props.body Search, filter and pagination criteria for configs.
 * @path /shoppingMallAiBackend/admin/systemConfigs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter and pagination criteria for configs. */
    body: IShoppingMallAiBackendSystemConfig.IRequest;
  };
  export type Body = IShoppingMallAiBackendSystemConfig.IRequest;
  export type Response = IPageIShoppingMallAiBackendSystemConfig;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/systemConfigs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/systemConfigs";
  export const random = (): IPageIShoppingMallAiBackendSystemConfig =>
    typia.random<IPageIShoppingMallAiBackendSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single global system configuration by configId.
 *
 * Retrieve all properties of a single system/global configuration from its
 * unique configId. Used for viewing current, scheduled, or archived config
 * entries and their details. Security restrictions applyâ€”admin/DevOps only. If
 * config does not exist, endpoint returns 404.
 *
 * @param props.connection
 * @param props.configId Unique identifier of the configuration record (UUID).
 * @path /shoppingMallAiBackend/admin/systemConfigs/:configId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the configuration record (UUID). */
    configId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendSystemConfig;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/systemConfigs/:configId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/systemConfigs/${encodeURIComponent(props.configId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendSystemConfig =>
    typia.random<IShoppingMallAiBackendSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configId")(() => typia.assert(props.configId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing global system configuration by configId.
 *
 * Update an existing global system configuration entry using its configId. The
 * update can modify key, value, description, or scheduling time bounds. Used by
 * authorized administrators to dynamically adjust business rules and system
 * properties with full audit and rollback support. Only users with
 * system/config privileges allowed. Changes are reflected in system operations
 * immediately.
 *
 * @param props.connection
 * @param props.configId Unique identifier for the configuration entry (UUID).
 * @param props.body Fields to update for this system configuration record.
 * @path /shoppingMallAiBackend/admin/systemConfigs/:configId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the configuration entry (UUID). */
    configId: string & tags.Format<"uuid">;

    /** Fields to update for this system configuration record. */
    body: IShoppingMallAiBackendSystemConfig.IUpdate;
  };
  export type Body = IShoppingMallAiBackendSystemConfig.IUpdate;
  export type Response = IShoppingMallAiBackendSystemConfig;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/systemConfigs/:configId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/systemConfigs/${encodeURIComponent(props.configId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendSystemConfig =>
    typia.random<IShoppingMallAiBackendSystemConfig>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configId")(() => typia.assert(props.configId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a system configuration entry by its configId from
 * shopping_mall_ai_backend_system_configs.
 *
 * Permanently remove a system configuration entry from the platform using its
 * configId. This action is irreversible and eliminates the specified
 * configuration record from the database, so it is no longer available or
 * considered by the system. Strict administrative privileges are required due
 * to the potential risk of system functionality loss when deleting
 * configuration keys that impact operational flags, global settings, or feature
 * toggles.
 *
 * Deleted configurations are not recoverable through this endpoint, and
 * consistency with corresponding audit or compliance requirements must be
 * maintained by the system separately (e.g., via audit trails in other
 * tables).
 *
 * Attempting to remove a configuration that is referenced elsewhere or
 * protected by policy will result in appropriate error handling and business
 * messaging.
 *
 * Only users with explicit admin role can invoke this endpoint. The endpoint is
 * mapped directly to the shopping_mall_ai_backend_system_configs Prisma model
 * and operates on a hard delete basis (deleted_at is not used, the row is truly
 * removed).
 *
 * @param props.connection
 * @param props.configId Unique identifier of the system configuration to delete
 * @path /shoppingMallAiBackend/admin/systemConfigs/:configId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the system configuration to delete */
    configId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/systemConfigs/:configId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/systemConfigs/${encodeURIComponent(props.configId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("configId")(() => typia.assert(props.configId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
