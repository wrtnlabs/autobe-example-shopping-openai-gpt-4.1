import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendAdmin } from "../../../../structures/IShoppingMallAiBackendAdmin";
import { IPageIShoppingMallAiBackendAdmin } from "../../../../structures/IPageIShoppingMallAiBackendAdmin";
export * as auditLogs from "./auditLogs";

/**
 * List admin accounts with advanced search, filtering, and pagination.
 *
 * Returns a paginated result set of administrators (admins) matching optional
 * search filters such as name, username, account active status, and creation
 * date. This list operation is available only to other super-admin users for
 * audit and user management purposes. Includes key profile details such as real
 * name, admin username, contact information, status (active), last login, and
 * audit creation timestamps. Results may be sorted and paginated according to
 * request parameters. Sensitive data (like password hashes) are never exposed.
 * Intended for admin UI search/list dashboards.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for admin list
 *   retrieval.
 * @path /shoppingMallAiBackend/admin/admins
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, and pagination parameters for admin list retrieval. */
    body: IShoppingMallAiBackendAdmin.IRequest;
  };
  export type Body = IShoppingMallAiBackendAdmin.IRequest;
  export type Response = IPageIShoppingMallAiBackendAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/admins";
  export const random = (): IPageIShoppingMallAiBackendAdmin.ISummary =>
    typia.random<IPageIShoppingMallAiBackendAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get admin account details for a given adminId.
 *
 * Get a specific administrator account's details by their unique adminId
 * (UUID). Returns all profile fields except sensitive authentication secrets
 * (such as password hashes), suitable for admin and audit views. Includes
 * deeply linked audit log, creation/update times, contact info, and historical
 * account metadata. Can only be used by super-admins or privileged admin roles
 * in the management UI. Access is strictly checked, and attempts to access
 * other admins' details are logged and restricted.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the admin account to retrieve.
 * @path /shoppingMallAiBackend/admin/admins/:adminId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the admin account to retrieve. */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendAdmin;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendAdmin =>
    typia.random<IShoppingMallAiBackendAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update admin public profile or status for a given adminId.
 *
 * Update profile or status fields for an admin account by their adminId. Only
 * available to privileged admin roles and never exposes or modifies
 * authentication secrets (such as password). Allows updates to public-facing or
 * business fields, such as real name, email, phone, status, etc. Operations are
 * traced in admin audit logs with before/after details. Violates business rules
 * to allow self-privilege escalation or editing higher-permission accounts.
 * Strict compliance checking is handled in the provider logic. Returns updated
 * admin record for UI or management interface purposes.
 *
 * @param props.connection
 * @param props.adminId Unique identifier for the admin account being updated.
 * @param props.body Update fields allowed for admin non-auth fields, such as
 *   profile and status.
 * @path /shoppingMallAiBackend/admin/admins/:adminId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the admin account being updated. */
    adminId: string & tags.Format<"uuid">;

    /**
     * Update fields allowed for admin non-auth fields, such as profile and
     * status.
     */
    body: IShoppingMallAiBackendAdmin.IUpdate;
  };
  export type Body = IShoppingMallAiBackendAdmin.IUpdate;
  export type Response = IShoppingMallAiBackendAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/admins/:adminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendAdmin =>
    typia.random<IShoppingMallAiBackendAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete an admin account by adminId, preserving historical records for
 * audit.
 *
 * Soft delete (logically remove) an administrator account using their unique
 * adminId. This sets the deleted_at field, making the account inaccessible for
 * authentication or business functions while preserving full data for
 * compliance and audit review. Only a privileged super-admin or compliance
 * admin can perform a soft delete. Regulatory controls prevent irrecoverable
 * loss of admin data. Attempts to remove higher-privilege or system admin
 * accounts are rejected and audited. No data is physically erased, ensuring
 * compliance traceability.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the admin account to erase.
 * @path /shoppingMallAiBackend/admin/admins/:adminId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the admin account to erase. */
    adminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
