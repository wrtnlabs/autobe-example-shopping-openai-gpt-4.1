import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendAdminAuditLog } from "../../../../../structures/IShoppingMallAiBackendAdminAuditLog";
import { IPageIShoppingMallAiBackendAdminAuditLog } from "../../../../../structures/IPageIShoppingMallAiBackendAdminAuditLog";

/**
 * Search and retrieve a paginated list of admin audit logs for a specific
 * administrator.
 *
 * This API allows administrators to retrieve a filtered and paginated view of
 * their own audit trails documenting privileged actions undertaken on the
 * platform. The endpoint supports complex queries, including searching by
 * operation type, date range, and affected entity. Results can be ordered by
 * most recent, oldest, or specific business attributes, with access restricted
 * to admin users for compliance and traceability.
 *
 * The operation returns a paginated list of audit entries, each including
 * operation type, description, the affected entity (target_id, target_type),
 * optional rationale, and timestamp. Only privileged admin users may access or
 * query this data, and sensitive entries may be further filtered based on
 * business logic or regulatory policy.
 *
 * This endpoint is useful for personal activity review, compliance reporting,
 * anomaly detection, or post-hoc audit/self-assessment, and is a key feature
 * for enforcing platform integrity and regulatory accountability.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the administrator whose audit logs
 *   are being queried.
 * @param props.body Search, filter, and pagination criteria for admin audit
 *   logs.
 * @path /shoppingMallAiBackend/admin/admins/:adminId/auditLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the administrator whose audit logs are being
     * queried.
     */
    adminId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination criteria for admin audit logs. */
    body: IShoppingMallAiBackendAdminAuditLog.IRequest;
  };
  export type Body = IShoppingMallAiBackendAdminAuditLog.IRequest;
  export type Response = IPageIShoppingMallAiBackendAdminAuditLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/admins/:adminId/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/admins/${encodeURIComponent(props.adminId ?? "null")}/auditLogs`;
  export const random = (): IPageIShoppingMallAiBackendAdminAuditLog.ISummary =>
    typia.random<IPageIShoppingMallAiBackendAdminAuditLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific admin audit log entry for a given
 * administrator.
 *
 * This API allows privileged administrator users to fetch detailed information
 * for a single admin audit log entry, identified by auditLogId, for precise
 * compliance or forensic trace. This operation is essential for reviewing the
 * context of specific high-privilege operations, tracking who performed
 * sensitive actions, and supporting regulatory or business evidence
 * requirements.
 *
 * Each returned audit log details the operation performed, the entity affected,
 * timestamps, rationale (description), and contextual metadata if present. Only
 * authorized admin users may access these details, ensuring platform
 * governance, accountability, and evidence preservation for all privileged
 * administrative actions.
 *
 * This endpoint is typically used by admins reviewing system incidents,
 * compliance cases, security investigations, or upon legal/business request,
 * and is a core component for trust and transparency in operations.
 *
 * @param props.connection
 * @param props.adminId Unique identifier of the administrator whose audit log
 *   is to be retrieved.
 * @param props.auditLogId Unique identifier of the audit log entry to retrieve.
 * @path /shoppingMallAiBackend/admin/admins/:adminId/auditLogs/:auditLogId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the administrator whose audit log is to be
     * retrieved.
     */
    adminId: string & tags.Format<"uuid">;

    /** Unique identifier of the audit log entry to retrieve. */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendAdminAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/admins/:adminId/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/admins/${encodeURIComponent(props.adminId ?? "null")}/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendAdminAuditLog =>
    typia.random<IShoppingMallAiBackendAdminAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
