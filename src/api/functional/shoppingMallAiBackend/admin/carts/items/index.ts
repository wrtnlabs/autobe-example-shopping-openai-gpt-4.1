import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCartItem } from "../../../../../structures/IShoppingMallAiBackendCartItem";
import { IPageIShoppingMallAiBackendCartItem } from "../../../../../structures/IPageIShoppingMallAiBackendCartItem";

/**
 * Paginate and filter items inside a shopping cart by cartId.
 *
 * Search and paginate items within a specific shopping cart.
 *
 * This API call enables a detailed review of all items currently present in a
 * single cart, allows for filtering by item attributes (quantity, bundle_code,
 * note, etc.), and supports paginated result navigation. Its primary use is
 * during checkout, customer review, or for administrative support. All access
 * is permission checked to ensure only cart owners or authorized personnel may
 * view the item list. Attempts to view unauthorized or deleted carts will yield
 * an error.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the cart whose items are being
 *   listed (UUID).
 * @param props.body Query and pagination configuration for cart items listing
 * @path /shoppingMallAiBackend/admin/carts/:cartId/items
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the cart whose items are being listed (UUID). */
    cartId: string & tags.Format<"uuid">;

    /** Query and pagination configuration for cart items listing */
    body: IShoppingMallAiBackendCartItem.IRequest;
  };
  export type Body = IShoppingMallAiBackendCartItem.IRequest;
  export type Response = IPageIShoppingMallAiBackendCartItem;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/carts/:cartId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/carts/${encodeURIComponent(props.cartId ?? "null")}/items`;
  export const random = (): IPageIShoppingMallAiBackendCartItem =>
    typia.random<IPageIShoppingMallAiBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * View a single cart item and its full attributes by itemId and cartId.
 *
 * Get the full details of a specific item in a shopping cart, including
 * quantity, bundle selection, option codes, and note. The operation is critical
 * for customers to verify, edit, or delete cart items before checkout. All item
 * details, including references to the snapshot of the product at the
 * add-to-cart time, are provided. Unauthorized access to items in another
 * user's cart returns an error.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the cart holding the item (UUID).
 * @param props.itemId Unique identifier of the item to view inside the cart
 *   (UUID).
 * @path /shoppingMallAiBackend/admin/carts/:cartId/items/:itemId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the cart holding the item (UUID). */
    cartId: string & tags.Format<"uuid">;

    /** Unique identifier of the item to view inside the cart (UUID). */
    itemId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCartItem;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/carts/:cartId/items/:itemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/carts/${encodeURIComponent(props.cartId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCartItem =>
    typia.random<IShoppingMallAiBackendCartItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("itemId")(() => typia.assert(props.itemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
