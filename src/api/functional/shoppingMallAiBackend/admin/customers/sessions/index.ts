import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCustomerSession } from "../../../../../structures/IShoppingMallAiBackendCustomerSession";
import { IPageIShoppingMallAiBackendCustomerSession } from "../../../../../structures/IPageIShoppingMallAiBackendCustomerSession";

/**
 * Retrieve all sessions for a customer with pagination and filtering.
 *
 * List all current and historical session records associated with a particular
 * customer, for administrative auditing or support. This includes login details
 * such as device, IP address, session creation and expiry times, and
 * termination events. Sessions reflect both API and UI authentications and are
 * used to trace user activity or support account recovery in case of security
 * incidents.
 *
 * Access to session details is strictly limited to admin roles due to
 * sensitivity of access tokens and personal device identifiers. Not intended
 * for customer self-service. Sessions may be further filtered or scoped in
 * business logic, and results are paginated for performance.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the customer whose sessions are
 *   being listed.
 * @param props.body Session search parameters, such as date ranges, status, or
 *   pagination settings.
 * @path /shoppingMallAiBackend/admin/customers/:customerId/sessions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the customer whose sessions are being listed. */
    customerId: string & tags.Format<"uuid">;

    /**
     * Session search parameters, such as date ranges, status, or pagination
     * settings.
     */
    body: IShoppingMallAiBackendCustomerSession.IRequest;
  };
  export type Body = IShoppingMallAiBackendCustomerSession.IRequest;
  export type Response = IPageIShoppingMallAiBackendCustomerSession;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/customers/:customerId/sessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/customers/${encodeURIComponent(props.customerId ?? "null")}/sessions`;
  export const random = (): IPageIShoppingMallAiBackendCustomerSession =>
    typia.random<IPageIShoppingMallAiBackendCustomerSession>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get single session detail for a customer for audit/forensics.
 *
 * Retrieve details and audit information for a single session belonging to a
 * customer. This includes origin IP/device/user-agent, session creation and
 * expiry times, and (cautiously) access and refresh tokens for forensic or
 * support evaluation. Session status is determined from expiry and termination
 * fields.
 *
 * Strictly for administrative use in compliance, audit, or security scenarios.
 * Attempting to access a non-existent or unauthorized session returns an
 * appropriate error. Data returned is sensitive and should be displayed only in
 * secure backoffice/admin UI.
 *
 * @param props.connection
 * @param props.customerId Unique identifier of the customer who owns the
 *   session.
 * @param props.sessionId Unique identifier of the session record to be
 *   retrieved.
 * @path /shoppingMallAiBackend/admin/customers/:customerId/sessions/:sessionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the customer who owns the session. */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier of the session record to be retrieved. */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCustomerSession;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/customers/:customerId/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/customers/${encodeURIComponent(props.customerId ?? "null")}/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCustomerSession =>
    typia.random<IShoppingMallAiBackendCustomerSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific customer session for security, device, or lifecycle
 * management.
 *
 * This API updates attributes of a customer session, such as session tokens,
 * expiration, IP address, or termination status. It ensures session state and
 * security can be managed efficiently for scenarios like forced logout (by
 * admin or self), session renewal, or device deactivation. Only the session
 * owner (customer) or administrators can perform this update, aligning with
 * platform security policies and audit requirements.
 *
 * The session is identified by its sessionId and cross-verified with the
 * customerId for ownership and integrity. All modifications are logged for
 * compliance. If the session is expired or belongs to a different customer, an
 * error will be returned.
 *
 * Typical use cases include user-initiated device management, admin security
 * operations, or incident response that require explicit update of session
 * information. All updates conform with business logic for audit, evidence, and
 * regulatory compliance.
 *
 * @param props.connection
 * @param props.customerId Unique identifier (UUID) of the target customer.
 * @param props.sessionId Unique identifier (UUID) of the customer session to
 *   update.
 * @param props.body Session update payload (e.g., to terminate session, rotate
 *   token, or extend expiry).
 * @path /shoppingMallAiBackend/admin/customers/:customerId/sessions/:sessionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the target customer. */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the customer session to update. */
    sessionId: string & tags.Format<"uuid">;

    /**
     * Session update payload (e.g., to terminate session, rotate token, or
     * extend expiry).
     */
    body: IShoppingMallAiBackendCustomerSession.IUpdate;
  };
  export type Body = IShoppingMallAiBackendCustomerSession.IUpdate;
  export type Response = IShoppingMallAiBackendCustomerSession;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/customers/:customerId/sessions/:sessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/customers/${encodeURIComponent(props.customerId ?? "null")}/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCustomerSession =>
    typia.random<IShoppingMallAiBackendCustomerSession>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("sessionId")(() => typia.assert(props.sessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically terminate (logout) a specific customer session for security/audit
 * purposes.
 *
 * This API performs logical deletion (termination) of a user session identified
 * by sessionId for a specific customer. It is used for explicit log-out, forced
 * device deactivation, or security event-driven session termination.
 *
 * By setting terminated_at instead of removing the record, auditability and
 * session traceability are preserved for business compliance. The operation
 * ensures only the session owner (customer) or authorized administrators can
 * destroy the session, and all actions are logged for regulatory requirements.
 *
 * After successful termination, the session cannot be reused for API
 * authentication. Error responses are provided if the session or customer does
 * not exist or is already terminated.
 *
 * @param props.connection
 * @param props.customerId Unique identifier (UUID) of the target customer.
 * @param props.sessionId Unique identifier (UUID) for the customer session
 *   being terminated.
 * @path /shoppingMallAiBackend/admin/customers/:customerId/sessions/:sessionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the target customer. */
    customerId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) for the customer session being terminated. */
    sessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/customers/:customerId/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/customers/${encodeURIComponent(props.customerId ?? "null")}/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("customerId")(() => typia.assert(props.customerId));
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
