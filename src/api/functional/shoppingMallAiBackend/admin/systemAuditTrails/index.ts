import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendSystemAuditTrail } from "../../../../structures/IShoppingMallAiBackendSystemAuditTrail";
import { IPageIShoppingMallAiBackendSystemAuditTrail } from "../../../../structures/IPageIShoppingMallAiBackendSystemAuditTrail";

/**
 * Search and retrieve a filtered, paginated list of system audit trails from
 * shopping_mall_ai_backend_system_audit_trails.
 *
 * Retrieve a filtered and paginated list of system-level audit trail entries.
 * This operation is used for compliance reviews, incident investigations, and
 * administrative monitoring. It supports complex query capabilities including
 * filtering by event types, actors, time ranges, and full-text search of event
 * descriptions.
 *
 * The audit trail records are append-only and immutableâ€”each record captures
 * the event type (such as config_change, access, permission changes, or
 * errors), the actor responsible, a textual business description, optional
 * machine-readable metadata, and the timestamp of occurrence.
 *
 * Only privileged admin users may invoke this operation, and all access is
 * itself auditable. Large result sets are paginated for efficiency and
 * security. If no records match the query parameters, an empty result page is
 * returned. This endpoint does not allow modification or deletion of audit
 * trail data. The results help fulfill regulatory, security, and forensic
 * requirements for the shopping mall backend.
 *
 * @param props.connection
 * @param props.body Query parameters for filtering, searching, and paginating
 *   system audit trail entries
 * @path /shoppingMallAiBackend/admin/systemAuditTrails
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Query parameters for filtering, searching, and paginating system
     * audit trail entries
     */
    body: IShoppingMallAiBackendSystemAuditTrail.IRequest;
  };
  export type Body = IShoppingMallAiBackendSystemAuditTrail.IRequest;
  export type Response = IPageIShoppingMallAiBackendSystemAuditTrail.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/systemAuditTrails",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/systemAuditTrails";
  export const random =
    (): IPageIShoppingMallAiBackendSystemAuditTrail.ISummary =>
      typia.random<IPageIShoppingMallAiBackendSystemAuditTrail.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific system audit trail entry from
 * shopping_mall_ai_backend_system_audit_trails by auditTrailId.
 *
 * Retrieve the details of an individual system audit trail entry specified by
 * auditTrailId. Used for legal, compliance, and security reviews, this endpoint
 * allows administrators to view comprehensive information including event type,
 * responsible actor, description, metadata, and precise timestamp for critical
 * actions in the shopping mall platform.
 *
 * Audit trail entries serve as immutable, tamper-evident evidence. Access is
 * tightly restricted to authorized administrators, and every access may itself
 * be logged for further traceability. If the specified auditTrailId does not
 * exist, an appropriate error is returned.
 *
 * This operation maps directly to the
 * shopping_mall_ai_backend_system_audit_trails Prisma model and provides
 * granular visibility into platform history.
 *
 * @param props.connection
 * @param props.auditTrailId Unique identifier of the audit trail record to
 *   retrieve
 * @path /shoppingMallAiBackend/admin/systemAuditTrails/:auditTrailId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the audit trail record to retrieve */
    auditTrailId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendSystemAuditTrail;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/systemAuditTrails/:auditTrailId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/systemAuditTrails/${encodeURIComponent(props.auditTrailId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendSystemAuditTrail =>
    typia.random<IShoppingMallAiBackendSystemAuditTrail>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditTrailId")(() => typia.assert(props.auditTrailId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
