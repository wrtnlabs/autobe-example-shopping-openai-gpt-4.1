import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendDeposit } from "../../../../structures/IShoppingMallAiBackendDeposit";
import { IPageIShoppingMallAiBackendDeposit } from "../../../../structures/IPageIShoppingMallAiBackendDeposit";

/**
 * Create a new deposit ledger for a customer or seller account.
 *
 * Create a new deposit ledger for a specified customer or seller. Used
 * primarily in onboarding flows, high-level finance operations, or account
 * recovery processesâ€”for cases where a separate deposit ledger must be
 * explicitly created. The request body must provide either a customer or seller
 * reference and may specify initial balances. Business logic validates for
 * required fields and ensures duplicate ledgers cannot be created for the same
 * account holder. On success, returns the created ledger object including all
 * system-populated audit fields.
 *
 * This is an admin-only, high-privilege operation with comprehensive audit
 * requirements. Subsequent actions (accrual, withdrawal, freeze) are managed
 * via related endpoints.
 *
 * @param props.connection
 * @param props.body Deposit creation information, including owner (customer or
 *   seller) and any initial balances or account metadata.
 * @path /shoppingMallAiBackend/admin/deposits
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Deposit creation information, including owner (customer or seller)
     * and any initial balances or account metadata.
     */
    body: IShoppingMallAiBackendDeposit.ICreate;
  };
  export type Body = IShoppingMallAiBackendDeposit.ICreate;
  export type Response = IShoppingMallAiBackendDeposit;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/deposits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/deposits";
  export const random = (): IShoppingMallAiBackendDeposit =>
    typia.random<IShoppingMallAiBackendDeposit>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and paginate deposit ledger balances.
 *
 * Search, filter, and paginate through all deposit ledgers in the system,
 * returning a paginated list of deposit summaries matching specified criteria.
 * This is used by finance, admin, or compliance teams to monitor cash balances
 * across all account holders, conduct audits, or support business analysis.
 * Search and pagination parameters allow for complex queries based on holder
 * type, balances, date ranges, or other business logic fields. Only authorized
 * users may perform this operation, which is fully audited for evidence and
 * compliance.
 *
 * Related endpoints: single deposit detail retrieval, deposit ledger
 * download/export, and incident review (for anomalies or freeze actions).
 *
 * @param props.connection
 * @param props.body Search and pagination parameters for filtering deposit
 *   ledgers. Supports advanced queries across holder type, balances, and date
 *   range.
 * @path /shoppingMallAiBackend/admin/deposits
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and pagination parameters for filtering deposit ledgers.
     * Supports advanced queries across holder type, balances, and date
     * range.
     */
    body: IShoppingMallAiBackendDeposit.IRequest;
  };
  export type Body = IShoppingMallAiBackendDeposit.IRequest;
  export type Response = IPageIShoppingMallAiBackendDeposit.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/deposits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/deposits";
  export const random = (): IPageIShoppingMallAiBackendDeposit.ISummary =>
    typia.random<IPageIShoppingMallAiBackendDeposit.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full detail of a specific deposit ledger by its unique ID.
 *
 * Retrieve full details and audit snapshot of a specific deposit ledger by
 * deposit ID. This operation is used for business and compliance audits,
 * incident responses, or account investigations. The response includes all
 * financial, balance, status, and timestamp fields for the single target
 * ledger. Only authorized finance or admin users may perform this operation,
 * and each query is logged for audit and evidence compliance.
 *
 * Related operations include searching deposit ledgers (PATCH), exporting
 * deposit books, or accessing associated transaction journals or anomaly
 * incident logs.
 *
 * @param props.connection
 * @param props.depositId Unique identifier of the deposit ledger to retrieve.
 * @path /shoppingMallAiBackend/admin/deposits/:depositId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the deposit ledger to retrieve. */
    depositId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendDeposit;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/deposits/:depositId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/deposits/${encodeURIComponent(props.depositId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendDeposit =>
    typia.random<IShoppingMallAiBackendDeposit>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update business or status information for a specific deposit ledger.
 *
 * Update an existing deposit ledger for a customer or seller identified by
 * deposit ID. This is used by authorized finance or admin staff to correct
 * balances, freeze/release accounts, or change ownership/account linkage in
 * complex business cases. All update events are recorded for compliance.
 * Business logic ensures consistent financial state and controls for duplicate
 * ledgers or compliance incidents. The updated ledger object is returned after
 * successful changes are applied. Only privileged roles may access this
 * function, which is subject to audit logging.
 *
 * Related endpoints: ledger search/query, individual ledger detail, transaction
 * journal access for the ledger, audit history retrieval for compliance
 * processes.
 *
 * @param props.connection
 * @param props.depositId Unique identifier of the deposit ledger to update.
 * @param props.body Fields to update on the deposit ledger, such as adjusted
 *   balances or ownership/account details.
 * @path /shoppingMallAiBackend/admin/deposits/:depositId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the deposit ledger to update. */
    depositId: string & tags.Format<"uuid">;

    /**
     * Fields to update on the deposit ledger, such as adjusted balances or
     * ownership/account details.
     */
    body: IShoppingMallAiBackendDeposit.IUpdate;
  };
  export type Body = IShoppingMallAiBackendDeposit.IUpdate;
  export type Response = IShoppingMallAiBackendDeposit;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/deposits/:depositId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/deposits/${encodeURIComponent(props.depositId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendDeposit =>
    typia.random<IShoppingMallAiBackendDeposit>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a deposit ledger by setting deleted_at, preserving audit
 * evidence.
 *
 * Soft delete (logical deletion) of a deposit ledger by deposit ID. This
 * privileged operation sets the deleted_at timestamp on the record, excluding
 * it from active business operations but keeping it available for internal
 * audit, compliance evidence, and regulatory review. Soft-deleted deposit
 * ledgers are not permanently removed and can be recovered for investigation or
 * reporting as necessary. Application logic and business processes respect the
 * deleted_at field to ignore soft-deleted records except when accessing audit
 * logs or legal evidence.
 *
 * This operation is typically performed by admin or finance teams for data
 * governance, fraud investigation, business need, or regulatory requirements,
 * with every action strictly logged. Use this endpoint instead of permanent
 * delete except where explicit irrecoverable data removal is necessary under
 * compliance direction.
 *
 * Any attempt to delete a already soft-deleted or non-existent ledger returns a
 * business error. Related endpoints include search (PATCH), update (PUT), and
 * detail retrieval (GET) operations for deposit ledgers.
 *
 * @param props.connection
 * @param props.depositId Unique identifier of the deposit ledger to soft
 *   delete.
 * @path /shoppingMallAiBackend/admin/deposits/:depositId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the deposit ledger to soft delete. */
    depositId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/deposits/:depositId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/deposits/${encodeURIComponent(props.depositId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
