import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendChannelCategoryMapping } from "../../../../../structures/IShoppingMallAiBackendChannelCategoryMapping";
import { IPageIShoppingMallAiBackendChannelCategoryMapping } from "../../../../../structures/IPageIShoppingMallAiBackendChannelCategoryMapping";

/**
 * Create a new channel section-category mapping.
 *
 * Create a new mapping between the channel section identified by sectionId and
 * a target channel category or business entity. Used by administrators to
 * extend navigation, enable analytics-specific taxonomies, or create
 * channel-specific category overlays. Authorization required (admin only). If
 * mapping with the same composite keys exists, an error is returned.
 *
 * @param props.connection
 * @param props.sectionId Unique identifier of the parent channel section
 *   (UUID).
 * @param props.body Information needed to create a new mapping between the
 *   channel section and the target category.
 * @path /shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the parent channel section (UUID). */
    sectionId: string & tags.Format<"uuid">;

    /**
     * Information needed to create a new mapping between the channel
     * section and the target category.
     */
    body: IShoppingMallAiBackendChannelCategoryMapping.ICreate;
  };
  export type Body = IShoppingMallAiBackendChannelCategoryMapping.ICreate;
  export type Response = IShoppingMallAiBackendChannelCategoryMapping;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/sections/${encodeURIComponent(props.sectionId ?? "null")}/categoryMappings`;
  export const random = (): IShoppingMallAiBackendChannelCategoryMapping =>
    typia.random<IShoppingMallAiBackendChannelCategoryMapping>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sectionId")(() => typia.assert(props.sectionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate section's category mappings for management and audit.
 *
 * List and search all category mappings for a section, supporting admin audit
 * of navigation configuration, content relationships, and UI organization. This
 * enables cross-linking or assignment between sections and categories, which
 * drives content discovery and personalization.
 *
 * Only accessible by admin roles; supports filtering by related category
 * code/name, mapping created_at, and pagination for managing large taxonomies.
 * Mappings cannot be updated or created via this endpoint, only listed.
 *
 * @param props.connection
 * @param props.sectionId Unique identifier of the section for category mapping
 *   listing (UUID).
 * @param props.body Pagination, sorting, and filter criteria for searching
 *   section's category mappings.
 * @path /shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the section for category mapping listing (UUID). */
    sectionId: string & tags.Format<"uuid">;

    /**
     * Pagination, sorting, and filter criteria for searching section's
     * category mappings.
     */
    body: IShoppingMallAiBackendChannelCategoryMapping.IRequest;
  };
  export type Body = IShoppingMallAiBackendChannelCategoryMapping.IRequest;
  export type Response = IPageIShoppingMallAiBackendChannelCategoryMapping;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/sections/${encodeURIComponent(props.sectionId ?? "null")}/categoryMappings`;
  export const random = (): IPageIShoppingMallAiBackendChannelCategoryMapping =>
    typia.random<IPageIShoppingMallAiBackendChannelCategoryMapping>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sectionId")(() => typia.assert(props.sectionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed channel section-category mapping by mappingId.
 *
 * Retrieve all details pertaining to a specific section-to-category mapping,
 * identified by mappingId, under a given sectionId. This API is instrumental
 * for admins or operators managing channel navigation structures, analytics
 * configurations, or synchronizations. Security considerations require
 * authorization as an admin or system operator. If mapping does not exist, a
 * 404 is returned.
 *
 * @param props.connection
 * @param props.sectionId Unique identifier for the channel section (UUID).
 * @param props.mappingId Unique identifier for the section/category mapping
 *   (UUID).
 * @path /shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings/:mappingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the channel section (UUID). */
    sectionId: string & tags.Format<"uuid">;

    /** Unique identifier for the section/category mapping (UUID). */
    mappingId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendChannelCategoryMapping;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings/:mappingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/sections/${encodeURIComponent(props.sectionId ?? "null")}/categoryMappings/${encodeURIComponent(props.mappingId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendChannelCategoryMapping =>
    typia.random<IShoppingMallAiBackendChannelCategoryMapping>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sectionId")(() => typia.assert(props.sectionId));
      assert.param("mappingId")(() => typia.assert(props.mappingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a channel section-category mapping by mappingId.
 *
 * Update details of a specific section-to-category mapping identified by
 * mappingId within a given sectionId. This operation permits modification of
 * mapping keys or associated properties to reflect evolving business rules.
 * Authorization by admin required. Changes are audited for evidence and
 * compliance. Not available for public users.
 *
 * @param props.connection
 * @param props.sectionId Unique identifier for the channel section (UUID).
 * @param props.mappingId Unique identifier for the section-category mapping
 *   (UUID).
 * @param props.body Data to update the mapping between section and category.
 * @path /shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings/:mappingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the channel section (UUID). */
    sectionId: string & tags.Format<"uuid">;

    /** Unique identifier for the section-category mapping (UUID). */
    mappingId: string & tags.Format<"uuid">;

    /** Data to update the mapping between section and category. */
    body: IShoppingMallAiBackendChannelCategoryMapping.IUpdate;
  };
  export type Body = IShoppingMallAiBackendChannelCategoryMapping.IUpdate;
  export type Response = IShoppingMallAiBackendChannelCategoryMapping;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings/:mappingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/sections/${encodeURIComponent(props.sectionId ?? "null")}/categoryMappings/${encodeURIComponent(props.mappingId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendChannelCategoryMapping =>
    typia.random<IShoppingMallAiBackendChannelCategoryMapping>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sectionId")(() => typia.assert(props.sectionId));
      assert.param("mappingId")(() => typia.assert(props.mappingId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a channel section-category mapping by mappingId.
 *
 * Delete an existing channel section-category mapping by mappingId and
 * sectionId. This implements soft deletion by setting the deleted_at timestamp,
 * preserving evidence for compliance and rollback. Only accessible by admin
 * authorization. If mapping doesn't exist, a 404 error is returned.
 *
 * @param props.connection
 * @param props.sectionId Unique identifier for the channel section (UUID).
 * @param props.mappingId Unique identifier for the mapping to delete (UUID).
 * @path /shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings/:mappingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the channel section (UUID). */
    sectionId: string & tags.Format<"uuid">;

    /** Unique identifier for the mapping to delete (UUID). */
    mappingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings/:mappingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/sections/${encodeURIComponent(props.sectionId ?? "null")}/categoryMappings/${encodeURIComponent(props.mappingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sectionId")(() => typia.assert(props.sectionId));
      assert.param("mappingId")(() => typia.assert(props.mappingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
