import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendFile } from "../../../../structures/IShoppingMallAiBackendFile";
import { IPageIShoppingMallAiBackendFile } from "../../../../structures/IPageIShoppingMallAiBackendFile";

/**
 * Register a new file metadata entry in shopping_mall_ai_backend_files.
 *
 * Register a new file metadata record in the shopping mall backend, capturing
 * essential details about the uploaded resource. This does not handle binary
 * data; instead, the file is expected to be uploaded separately (such as to S3,
 * Blob, or CDN) and the storage URI referenced here. Recorded fields include
 * the original filename, content type, unique storage URI, total file size in
 * bytes, uploader’s UUID, and upload timestamp.
 *
 * All writes to this endpoint require strict permissions due to security,
 * privacy, and governance concerns (e.g., evidence files, legal documents). The
 * created record enables subsequent access, auditing, or business
 * notification.
 *
 * On success, the created record is returned. Attempts to register duplicate
 * file URIs or forbidden metadata will result in business errors, following
 * unique constraints.
 *
 * @param props.connection
 * @param props.body New file metadata to register (not file content itself, but
 *   reference to storage and metadata)
 * @path /shoppingMallAiBackend/admin/files
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * New file metadata to register (not file content itself, but reference
     * to storage and metadata)
     */
    body: IShoppingMallAiBackendFile.ICreate;
  };
  export type Body = IShoppingMallAiBackendFile.ICreate;
  export type Response = IShoppingMallAiBackendFile;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/files",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/files";
  export const random = (): IShoppingMallAiBackendFile =>
    typia.random<IShoppingMallAiBackendFile>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate file metadata records on shopping_mall_ai_backend_files.
 *
 * Retrieve a paginated and filtered list of uploaded file metadata from across
 * the platform. This operation allows administrators to search files based on
 * file type, uploader, unique storage URI, file name patterns, or upload date
 * ranges. The search results are used for compliance reviews, evidence
 * management, and platform-wide content governance.
 *
 * Only admin users may use this endpoint due to sensitivity of file access and
 * potential privacy concerns. The operation respects logical deletion
 * (deleted_at); by default, it only returns active files unless filters for
 * deleted items are included. Bulk export or legal production workflows may
 * require this API.
 *
 * Results include file URI, original filename, uploader, content type, file
 * size, and upload timestamp for each record, supporting traceability and
 * operational maintenance.
 *
 * @param props.connection
 * @param props.body Complex criteria for searching or paginating file metadata
 * @path /shoppingMallAiBackend/admin/files
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Complex criteria for searching or paginating file metadata */
    body: IShoppingMallAiBackendFile.IRequest;
  };
  export type Body = IShoppingMallAiBackendFile.IRequest;
  export type Response = IPageIShoppingMallAiBackendFile.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/files",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/files";
  export const random = (): IPageIShoppingMallAiBackendFile.ISummary =>
    typia.random<IPageIShoppingMallAiBackendFile.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get file metadata by fileId from shopping_mall_ai_backend_files.
 *
 * Fetch the metadata of an individual file, such as is required for evidence,
 * admin review, legal production, or managing file content in enterprise
 * systems. This operation allows retrieval of the file’s unique storage URI,
 * original filename, mime type, file size in bytes, who uploaded it, and the
 * upload datetime. If the file is logically deleted, metadata including the
 * deleted_at timestamp is also returned.
 *
 * This endpoint helps power administrative dashboards, secure resource fetches,
 * and audit queries. Only admins may access this information, protecting
 * sensitive or private files. Attempts to access a non-existent file or without
 * permission return appropriate errors.
 *
 * @param props.connection
 * @param props.fileId Unique identifier of the file to fetch metadata for
 * @path /shoppingMallAiBackend/admin/files/:fileId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the file to fetch metadata for */
    fileId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendFile;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/files/:fileId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/files/${encodeURIComponent(props.fileId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendFile =>
    typia.random<IShoppingMallAiBackendFile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("fileId")(() => typia.assert(props.fileId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update file metadata for a file in shopping_mall_ai_backend_files by fileId.
 *
 * Update the file metadata record for a specific fileId. This operation covers
 * modifications to fields such as the file name, mime type, storage URI, or
 * even uploader metadata, but not the file content itself. Used when a file’s
 * metadata needs correction (such as if migrated to a new CDN or new
 * content-type is detected).
 *
 * The endpoint mandates strict administrative access as incorrect file metadata
 * could impact business evidence, system resources, or violate security policy.
 * All such changes should be auditable. Attempts to update a non-existent file
 * or forbidden fields return business or permission errors.
 *
 * @param props.connection
 * @param props.fileId Unique identifier of file to update
 * @param props.body File metadata updates (does not change file content, only
 *   metadata)
 * @path /shoppingMallAiBackend/admin/files/:fileId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of file to update */
    fileId: string & tags.Format<"uuid">;

    /** File metadata updates (does not change file content, only metadata) */
    body: IShoppingMallAiBackendFile.IUpdate;
  };
  export type Body = IShoppingMallAiBackendFile.IUpdate;
  export type Response = IShoppingMallAiBackendFile;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/files/:fileId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/files/${encodeURIComponent(props.fileId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendFile =>
    typia.random<IShoppingMallAiBackendFile>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("fileId")(() => typia.assert(props.fileId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a file metadata entry by fileId in
 * shopping_mall_ai_backend_files.
 *
 * Mark a file metadata record as deleted by setting its deleted_at timestamp,
 * effectively hiding it from standard platform queries but retaining the audit
 * trail. This is a soft delete. Such logical deletion preserves file history
 * for business evidence and compliance cases. Only admin users can invoke this
 * action, and any actual file content removal is outside the scope.
 *
 * If the file does not exist or is already deleted, a suitable business error
 * is returned. All operations must be auditable for compliance. The operation
 * follows the Prisma model’s typical logical deletion pattern using the
 * deleted_at nullable DateTime field.
 *
 * @param props.connection
 * @param props.fileId Unique identifier of the file to logically delete
 * @path /shoppingMallAiBackend/admin/files/:fileId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the file to logically delete */
    fileId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/files/:fileId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/files/${encodeURIComponent(props.fileId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("fileId")(() => typia.assert(props.fileId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
