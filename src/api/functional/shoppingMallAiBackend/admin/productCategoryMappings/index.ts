import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendProductCategoryMapping } from "../../../../structures/IShoppingMallAiBackendProductCategoryMapping";
import { IPageIShoppingMallAiBackendProductCategoryMapping } from "../../../../structures/IPageIShoppingMallAiBackendProductCategoryMapping";

/**
 * Create a new mapping between a product and category.
 *
 * Creates a product-category mapping, associating a specific product with a
 * specific category for catalog structure and business search use. On success,
 * the mapping entry is persisted with assignment timestamp and available for
 * subsequent product or catalog navigation.
 *
 * Admin and catalog manager authorization are mandatory to execute this
 * request. Duplicates or invalid assignments return business error responses.
 * Related endpoints allow for listing and auditing all mapping relationships.
 *
 * @param props.connection
 * @param props.body IDs and metadata necessary to assign a product to a catalog
 *   category, including product and category UUIDs, plus any relevant
 *   assignment properties.
 * @path /shoppingMallAiBackend/admin/productCategoryMappings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * IDs and metadata necessary to assign a product to a catalog category,
     * including product and category UUIDs, plus any relevant assignment
     * properties.
     */
    body: IShoppingMallAiBackendProductCategoryMapping.ICreate;
  };
  export type Body = IShoppingMallAiBackendProductCategoryMapping.ICreate;
  export type Response = IShoppingMallAiBackendProductCategoryMapping;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/productCategoryMappings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/shoppingMallAiBackend/admin/productCategoryMappings";
  export const random = (): IShoppingMallAiBackendProductCategoryMapping =>
    typia.random<IShoppingMallAiBackendProductCategoryMapping>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search product-to-category mappings with advanced filtering.
 *
 * Returns a list of product-to-category mapping records, supporting complex
 * queries such as filtering by category, product, assignment date, or business
 * relations. The endpoint is especially useful for taxonomy audits, catalog
 * restructuring, or validation of business rule compliance regarding product
 * classification.
 *
 * Bulk or advanced queries may be limited to admin and catalog management
 * roles. Appropriate pagination and sorting are supported, allows efficient
 * navigation of large catalog datasets. Errors are returned for malformed
 * queries or access control failures. Related endpoints allow creation,
 * updating, and deletion of mappings.
 *
 * @param props.connection
 * @param props.body Paging, sorting, and filtering parameters for map
 *   retrieval, such as product, category, assignment date range, or catalog
 *   focus.
 * @path /shoppingMallAiBackend/admin/productCategoryMappings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Paging, sorting, and filtering parameters for map retrieval, such as
     * product, category, assignment date range, or catalog focus.
     */
    body: IShoppingMallAiBackendProductCategoryMapping.IRequest;
  };
  export type Body = IShoppingMallAiBackendProductCategoryMapping.IRequest;
  export type Response = IPageIShoppingMallAiBackendProductCategoryMapping;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/productCategoryMappings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () =>
    "/shoppingMallAiBackend/admin/productCategoryMappings";
  export const random = (): IPageIShoppingMallAiBackendProductCategoryMapping =>
    typia.random<IPageIShoppingMallAiBackendProductCategoryMapping>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a specific product-category mapping by UUID.
 *
 * Fetch a specific product-category mapping with full resolution of both mapped
 * product and category. This endpoint allows admin or catalog managers to
 * review the placement or assignment status of a given product in the hierarchy
 * or product catalog structure. All fields of the mapping record, including
 * both product and category references, are returned.
 *
 * Authorization is required to access mapping details. This operation is useful
 * for catalog editing/validation, evidence preservation, or structural catalog
 * diagnostics. Errors are raised for nonexistent or unauthorized access.
 *
 * @param props.connection
 * @param props.mappingId The UUID assigned to this product-category mapping
 *   record.
 * @path /shoppingMallAiBackend/admin/productCategoryMappings/:mappingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The UUID assigned to this product-category mapping record. */
    mappingId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendProductCategoryMapping;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/productCategoryMappings/:mappingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/productCategoryMappings/${encodeURIComponent(props.mappingId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendProductCategoryMapping =>
    typia.random<IShoppingMallAiBackendProductCategoryMapping>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mappingId")(() => typia.assert(props.mappingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing product-category mapping for a product.
 *
 * This API operation allows an authorized seller or administrator to update a
 * product-category mapping in the system. Typical use cases include
 * reorganizing product catalog structures, correcting misclassifications, or
 * reflecting new business priorities. The operation strictly enforces
 * validation to ensure that the referenced product and category are valid and
 * that no duplicate mappings exist. Security and auditability are ensured by
 * allowing only those with the correct permissions to make such updates, and
 * every change may be logged for compliance evidence. Related APIs include
 * creation and deletion of mappings, catalog browsing, and category management
 * endpoints. Errors will be reported if the referenced entities are not found
 * or if the update would result in a duplicate mapping.
 *
 * @param props.connection
 * @param props.mappingId Unique identifier of the product-category mapping to
 *   update.
 * @param props.body Payload specifying the new product and category association
 *   details to update the mapping.
 * @path /shoppingMallAiBackend/admin/productCategoryMappings/:mappingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the product-category mapping to update. */
    mappingId: string & tags.Format<"uuid">;

    /**
     * Payload specifying the new product and category association details
     * to update the mapping.
     */
    body: IShoppingMallAiBackendProductCategoryMapping.IUpdate;
  };
  export type Body = IShoppingMallAiBackendProductCategoryMapping.IUpdate;
  export type Response = IShoppingMallAiBackendProductCategoryMapping;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/productCategoryMappings/:mappingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/productCategoryMappings/${encodeURIComponent(props.mappingId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendProductCategoryMapping =>
    typia.random<IShoppingMallAiBackendProductCategoryMapping>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mappingId")(() => typia.assert(props.mappingId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a product-category mapping entry.
 *
 * This operation enables authorized administrators to permanently remove a
 * product-category mapping from the system. It is used for correcting catalog
 * structure, compliance with evolving business needs, or removing outdated
 * associations. The deletion action completely erases the record from the
 * database, and cannot be undone. Errors include attempts to delete
 * non-existent mappings. Related operations include mapping creation and
 * update.
 *
 * @param props.connection
 * @param props.mappingId Unique identifier for the product-category mapping to
 *   be deleted.
 * @path /shoppingMallAiBackend/admin/productCategoryMappings/:mappingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the product-category mapping to be deleted. */
    mappingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/productCategoryMappings/:mappingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/productCategoryMappings/${encodeURIComponent(props.mappingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mappingId")(() => typia.assert(props.mappingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
