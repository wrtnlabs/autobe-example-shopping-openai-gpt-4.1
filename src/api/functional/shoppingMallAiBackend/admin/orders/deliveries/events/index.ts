import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendOrderDeliveryEvent } from "../../../../../../structures/IShoppingMallAiBackendOrderDeliveryEvent";
import { IPageIShoppingMallAiBackendOrderDeliveryEvent } from "../../../../../../structures/IPageIShoppingMallAiBackendOrderDeliveryEvent";

/**
 * Retrieve delivery event logs for a specific shipment of an order (paginated).
 *
 * Retrieve a paginated list of status update events, checkpoints, and exception
 * logs for a given delivery event within a specific order. This operation
 * allows logistics managers, administrators, or authorized customer service
 * agents to monitor and audit the full timeline of delivery for compliance,
 * performance analysis, or dispute resolution purposes.
 *
 * Filtering and sorting can be applied based on event type, logged_at, or
 * keyword within event_context. The operation supports business and regulatory
 * requirements, ensuring immutable delivery evidence records. Security is
 * enforced to ensure only authorized users can access complete event logs. Each
 * response includes full event metadata, including creation and logged_at
 * timestamps, event_type codes, and detailed event_context (if any).
 *
 * Expected errors include not found (if order or delivery is missing),
 * forbidden (if user lacks privileges), and validation errors for invalid IDs.
 * Operation may be linked from shipment tracking UIs or administrative
 * dashboards.
 *
 * @param props.connection
 * @param props.orderId Order ID containing the delivery.
 * @param props.deliveryId Delivery ID for which events are being queried.
 * @param props.body Optional filters and pagination options to constrain the
 *   result set for delivery events.
 * @path /shoppingMallAiBackend/admin/orders/:orderId/deliveries/:deliveryId/events
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Order ID containing the delivery. */
    orderId: string & tags.Format<"uuid">;

    /** Delivery ID for which events are being queried. */
    deliveryId: string & tags.Format<"uuid">;

    /**
     * Optional filters and pagination options to constrain the result set
     * for delivery events.
     */
    body: IShoppingMallAiBackendOrderDeliveryEvent.IRequest;
  };
  export type Body = IShoppingMallAiBackendOrderDeliveryEvent.IRequest;
  export type Response = IPageIShoppingMallAiBackendOrderDeliveryEvent;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/deliveries/:deliveryId/events",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}/events`;
  export const random = (): IPageIShoppingMallAiBackendOrderDeliveryEvent =>
    typia.random<IPageIShoppingMallAiBackendOrderDeliveryEvent>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * View the details of a specific delivery event in an order's shipment
 * timeline.
 *
 * Retrieve detailed information of a particular delivery event from the
 * delivery timeline of a given order. This operation is used for compliance,
 * tracking, or customer support investigations and returns the full event
 * record with metadata including event_type (status update, exception, etc),
 * event_context (description), logged_at, and creation timestamp.
 *
 * Security requires proper authorization (admin, logistic manager, or
 * designated operator). Errors include not found (invalid orderId, deliveryId,
 * or eventId), or forbidden in case of insufficient privileges. Use case
 * scenarios include logistics dispute resolution, performance audits, and
 * chain-of-custody evidencing.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order containing the delivery.
 * @param props.deliveryId Unique identifier of the delivery being audited.
 * @param props.eventId Unique identifier of the delivery event.
 * @path /shoppingMallAiBackend/admin/orders/:orderId/deliveries/:deliveryId/events/:eventId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the order containing the delivery. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the delivery being audited. */
    deliveryId: string & tags.Format<"uuid">;

    /** Unique identifier of the delivery event. */
    eventId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendOrderDeliveryEvent;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/deliveries/:deliveryId/events/:eventId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}/events/${encodeURIComponent(props.eventId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderDeliveryEvent =>
    typia.random<IShoppingMallAiBackendOrderDeliveryEvent>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
      assert.param("eventId")(() => typia.assert(props.eventId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
