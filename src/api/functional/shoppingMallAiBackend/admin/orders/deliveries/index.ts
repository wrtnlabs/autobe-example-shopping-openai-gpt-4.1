import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as events from "./events";

/**
 * Soft delete a specific delivery record of an order by marking it as deleted.
 *
 * Delete a specific delivery record for a given order. This operation performs
 * a logical deletion (soft delete) of the
 * shopping_mall_ai_backend_order_deliveries record, setting the deleted_at
 * timestamp. Only authorized administrative users are permitted to perform this
 * action, and all operations are logged for audit and compliance. Related
 * delivery events remain in the database according to business rules for
 * evidence retention. This operation is critical for correcting erroneous
 * delivery records or removing incorrect tracking events post-creation.
 *
 * Security is enforced according to administrative privilege; attempts by
 * unauthorized users will return a forbidden error. The operation does not
 * cascade delete associated delivery event logs, as evidence and business
 * compliance require those to remain unless independently removed by policy.
 *
 * Error handling includes not-found responses for invalid orderId or
 * deliveryId, and compliance event recording for all hard or logical deletions.
 * Usage is limited to administrative interfaces, not available for customers or
 * sellers.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order containing the delivery.
 * @param props.deliveryId Unique identifier of the delivery to be deleted.
 * @path /shoppingMallAiBackend/admin/orders/:orderId/deliveries/:deliveryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the order containing the delivery. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the delivery to be deleted. */
    deliveryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/deliveries/:deliveryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
