import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendOrderReturn } from "../../../../../structures/IShoppingMallAiBackendOrderReturn";
import { IPageIShoppingMallAiBackendOrderReturn } from "../../../../../structures/IPageIShoppingMallAiBackendOrderReturn";

/**
 * List returns (after-sales requests) for an order with filter and pagination.
 *
 * Retrieve a paginated list of all return requests associated with a particular
 * order. This endpoint allows authorized customer service agents, sellers, or
 * admins to review and audit the after-sales return history for any order,
 * supporting batch workflows, compliance audits, and quality analysis.
 *
 * Filtering can be performed by status (requested, approved, rejected,
 * completed), request time, or business reason. Returned records provide full
 * details: order_item, status, return reason, processing/completion timestamps,
 * and evidence attributes. Security policy restricts access to authorized users
 * according to organizational role, ensuring privacy of after-sales actions and
 * sensitive customer requests. Output can be integrated into administrative
 * portals and after-sales dashboards.
 *
 * @param props.connection
 * @param props.orderId Unique order ID for which returns are being queried.
 * @param props.body Optional filters and pagination parameters for order
 *   returns.
 * @path /shoppingMallAiBackend/admin/orders/:orderId/returns
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique order ID for which returns are being queried. */
    orderId: string & tags.Format<"uuid">;

    /** Optional filters and pagination parameters for order returns. */
    body: IShoppingMallAiBackendOrderReturn.IRequest;
  };
  export type Body = IShoppingMallAiBackendOrderReturn.IRequest;
  export type Response = IPageIShoppingMallAiBackendOrderReturn;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/returns",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/returns`;
  export const random = (): IPageIShoppingMallAiBackendOrderReturn =>
    typia.random<IPageIShoppingMallAiBackendOrderReturn>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a single return action for a specific order item.
 *
 * Retrieve the full details, status timeline, and audits of an individual
 * return request for an item within an order. Authorized administrative or
 * after-sales personnel can see all attributes, including order linkage, return
 * reason, request, process, and completion dates, and audit trace for
 * compliance reporting.
 *
 * Error responses include not-found for invalid orderId/returnId, or forbidden
 * for insufficient privileges. Security logic ensures only privileged users may
 * access confidential or personally-identifiable return records. Output is
 * usable in customer service consoles and compliance audit workflows.
 *
 * @param props.connection
 * @param props.orderId ID of the order for which the return was requested.
 * @param props.returnId ID of the return request within this order.
 * @path /shoppingMallAiBackend/admin/orders/:orderId/returns/:returnId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the order for which the return was requested. */
    orderId: string & tags.Format<"uuid">;

    /** ID of the return request within this order. */
    returnId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendOrderReturn;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/returns/:returnId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/returns/${encodeURIComponent(props.returnId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderReturn =>
    typia.random<IShoppingMallAiBackendOrderReturn>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("returnId")(() => typia.assert(props.returnId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update return request details or status for an order item after creation.
 *
 * Update a return request for a specific order item. Permitted fields for
 * update include return_reason, status, and critical process timestamps. All
 * updates generate historical snapshots for audit evidence. This endpoint is
 * restricted to after-sales support, returns managers, and authorized admin
 * users; attempts by unauthorized users are denied.
 *
 * Common business use includes status transition (e.g., requested→approved,
 * approved→completed), reason correction, or adjustment of process dates. The
 * endpoint supports compliance workflow, escalation, and evidence capture.
 * Error handling includes validation failure (if data violates business logic
 * or state transitions), forbidden (insufficient privilege), and not-found
 * (invalid IDs).
 *
 * @param props.connection
 * @param props.orderId Order ID linked to the return request.
 * @param props.returnId Unique return request ID to update.
 * @param props.body Fields to update on the return, including status or reason
 *   changes.
 * @path /shoppingMallAiBackend/admin/orders/:orderId/returns/:returnId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Order ID linked to the return request. */
    orderId: string & tags.Format<"uuid">;

    /** Unique return request ID to update. */
    returnId: string & tags.Format<"uuid">;

    /** Fields to update on the return, including status or reason changes. */
    body: IShoppingMallAiBackendOrderReturn.IUpdate;
  };
  export type Body = IShoppingMallAiBackendOrderReturn.IUpdate;
  export type Response = IShoppingMallAiBackendOrderReturn;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/returns/:returnId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/returns/${encodeURIComponent(props.returnId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderReturn =>
    typia.random<IShoppingMallAiBackendOrderReturn>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("returnId")(() => typia.assert(props.returnId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a return request for an order item (admin/compliance only).
 *
 * Perform a soft delete of a return request record for a specific order item.
 * This sets the deleted_at timestamp on the record instead of removing it from
 * the database, preserving full business and compliance evidence. Used for
 * error correction, compliance, or operational cleanup by privileged users
 * only; all deletions are logged for regulatory oversight and audit analysis.
 *
 * Unauthorized delete attempts or attempts outside compliance scope are
 * forbidden. The operation does not remove related evidence records (order
 * history, item data, etc.), which must be preserved for audit by business
 * rule. Errors include not found (invalid IDs) and forbidden (insufficient
 * privilege).
 *
 * @param props.connection
 * @param props.orderId Order ID associated with the return request to delete.
 * @param props.returnId Return request ID to delete (soft delete).
 * @path /shoppingMallAiBackend/admin/orders/:orderId/returns/:returnId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Order ID associated with the return request to delete. */
    orderId: string & tags.Format<"uuid">;

    /** Return request ID to delete (soft delete). */
    returnId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/returns/:returnId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/returns/${encodeURIComponent(props.returnId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("returnId")(() => typia.assert(props.returnId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
