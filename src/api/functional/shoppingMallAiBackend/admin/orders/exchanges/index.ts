import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendOrderExchange } from "../../../../../structures/IShoppingMallAiBackendOrderExchange";
import { IPageIShoppingMallAiBackendOrderExchange } from "../../../../../structures/IPageIShoppingMallAiBackendOrderExchange";

/**
 * List all exchanges for a given order with filters and pagination.
 *
 * Retrieve a paginated list of all exchange requests for a specific order. This
 * operation allows admins, after-sales support, and sellers to review, search,
 * and filter all exchanges, which represent requests for item replacement or
 * attribute swap within the order. Filtering by status or rationale is
 * supported; results are paginated for dashboard and operational efficiency.
 *
 * Authorization is required for access; only privileged users (admin, seller,
 * after-sales support) may retrieve full exchange audit history. The response
 * includes exchange metadata, linked order/item/return associations, full
 * status/rationale trail, and compliance timestamps. Used for business
 * analytics, dispute resolution, and regulatory audit. Integrates with customer
 * service and after-sales management workflows.
 *
 * @param props.connection
 * @param props.orderId Order ID for which exchange requests are queried.
 * @param props.body Optional filters and pagination parameters for order
 *   exchanges.
 * @path /shoppingMallAiBackend/admin/orders/:orderId/exchanges
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Order ID for which exchange requests are queried. */
    orderId: string & tags.Format<"uuid">;

    /** Optional filters and pagination parameters for order exchanges. */
    body: IShoppingMallAiBackendOrderExchange.IRequest;
  };
  export type Body = IShoppingMallAiBackendOrderExchange.IRequest;
  export type Response = IPageIShoppingMallAiBackendOrderExchange;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/exchanges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/exchanges`;
  export const random = (): IPageIShoppingMallAiBackendOrderExchange =>
    typia.random<IPageIShoppingMallAiBackendOrderExchange>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific order item exchange record by order and exchange ID.
 *
 * This operation fetches a single after-sales exchange record associated with a
 * specific order and order item. It provides detailed information necessary for
 * a customer or admin to understand the current state or resolution history of
 * the exchange, including status transitions, request and completion times,
 * reason, and evidence. Security considerations ensure only the owner
 * (customer) or authorized admin can access the record, as sensitive customer
 * service details are returned. The operation references both the Orders and
 * OrderExchanges tables with all relevant exchange fields and their business
 * context.
 *
 * @param props.connection
 * @param props.orderId Unique identifier for the target order (UUID).
 * @param props.exchangeId Unique identifier for the target exchange (UUID).
 * @path /shoppingMallAiBackend/admin/orders/:orderId/exchanges/:exchangeId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target order (UUID). */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier for the target exchange (UUID). */
    exchangeId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendOrderExchange;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/exchanges/:exchangeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/exchanges/${encodeURIComponent(props.exchangeId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderExchange =>
    typia.random<IShoppingMallAiBackendOrderExchange>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("exchangeId")(() => typia.assert(props.exchangeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an order item exchange, such as status, reasons, or admin decision.
 *
 * Enables updating the details or status of an exchange request for an order
 * item. Permits actions such as providing extra information, escalating an
 * exchange, or updating the business decision and processing notes. All state
 * changes are validated against business workflow and eligibility rules, and
 * changes are logged for compliance and dispute auditing. Only the involved
 * customer, assigned seller, or an admin may update the record, with access
 * checks enforced.
 *
 * @param props.connection
 * @param props.orderId Unique identifier for the order to which the exchange
 *   belongs.
 * @param props.exchangeId Unique identifier for the specific exchange being
 *   updated.
 * @param props.body Updated exchange information or process decision for the
 *   exchange case.
 * @path /shoppingMallAiBackend/admin/orders/:orderId/exchanges/:exchangeId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the order to which the exchange belongs. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier for the specific exchange being updated. */
    exchangeId: string & tags.Format<"uuid">;

    /**
     * Updated exchange information or process decision for the exchange
     * case.
     */
    body: IShoppingMallAiBackendOrderExchange.IUpdate;
  };
  export type Body = IShoppingMallAiBackendOrderExchange.IUpdate;
  export type Response = IShoppingMallAiBackendOrderExchange;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/exchanges/:exchangeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/exchanges/${encodeURIComponent(props.exchangeId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderExchange =>
    typia.random<IShoppingMallAiBackendOrderExchange>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("exchangeId")(() => typia.assert(props.exchangeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete an order item exchange for evidence retention and compliance.
 *
 * Marks an exchange as deleted in the system using a soft delete (sets the
 * deleted_at timestamp), preserving the full history and evidence for future
 * compliance and audit requests. Returns no body on success. Only the involved
 * customer or an administrator may execute this operation, and all actions are
 * recorded in the audit trail. The exchange remains in the database but is
 * excluded from normal queries and user access except for authorized purposes.
 *
 * @param props.connection
 * @param props.orderId Order ID the exchange belongs to.
 * @param props.exchangeId Target exchange ID to be deleted.
 * @path /shoppingMallAiBackend/admin/orders/:orderId/exchanges/:exchangeId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Order ID the exchange belongs to. */
    orderId: string & tags.Format<"uuid">;

    /** Target exchange ID to be deleted. */
    exchangeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/orders/:orderId/exchanges/:exchangeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/exchanges/${encodeURIComponent(props.exchangeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("exchangeId")(() => typia.assert(props.exchangeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
