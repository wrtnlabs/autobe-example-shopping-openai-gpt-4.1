import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCodebook } from "../../../../structures/IShoppingMallAiBackendCodebook";
import { IPageIShoppingMallAiBackendCodebook } from "../../../../structures/IPageIShoppingMallAiBackendCodebook";
export * as entries from "./entries";

/**
 * Create a new codebook for business dictionary/enum management.
 *
 * Create a new codebook for structuring a business dictionary or lookup values.
 * Admin users provide code, name, and optional description/details. System
 * validates uniqueness of code and stores the entity with full timestamps. This
 * enables dynamic, admin-managed extension of business logic dictionaries.
 *
 * @param props.connection
 * @param props.body The details of the new codebook to be created.
 * @path /shoppingMallAiBackend/admin/codebooks
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** The details of the new codebook to be created. */
    body: IShoppingMallAiBackendCodebook.ICreate;
  };
  export type Body = IShoppingMallAiBackendCodebook.ICreate;
  export type Response = IShoppingMallAiBackendCodebook;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/codebooks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/codebooks";
  export const random = (): IShoppingMallAiBackendCodebook =>
    typia.random<IShoppingMallAiBackendCodebook>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search codebooks with pagination for business configuration.
 *
 * Retrieve a structured, paginated list of all available codebooks configured
 * in the system. This supports dynamic dictionary management for business
 * logic, lookup values, and admin configuration. The response includes
 * meta-information such as code, name, description, and timestamps. Only users
 * with admin privileges can access the complete codebook list for configuration
 * or integration purposes.
 *
 * @param props.connection
 * @param props.body Filter, search, and pagination criteria for codebooks.
 * @path /shoppingMallAiBackend/admin/codebooks
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, search, and pagination criteria for codebooks. */
    body: IShoppingMallAiBackendCodebook.IRequest;
  };
  export type Body = IShoppingMallAiBackendCodebook.IRequest;
  export type Response = IPageIShoppingMallAiBackendCodebook.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/codebooks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/codebooks";
  export const random = (): IPageIShoppingMallAiBackendCodebook.ISummary =>
    typia.random<IPageIShoppingMallAiBackendCodebook.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get codebook details by its unique identifier.
 *
 * Retrieve the full detail of a single codebook given its unique codebookId.
 * The result contains all business and administrative information needed to
 * present, configure, or integrate with this codebook. Suitable for system
 * admins or integration services referencing business dictionaries.
 *
 * @param props.connection
 * @param props.codebookId The unique identifier (UUID) of the target codebook.
 * @path /shoppingMallAiBackend/admin/codebooks/:codebookId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the target codebook. */
    codebookId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCodebook;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/codebooks/:codebookId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/codebooks/${encodeURIComponent(props.codebookId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCodebook =>
    typia.random<IShoppingMallAiBackendCodebook>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codebookId")(() => typia.assert(props.codebookId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the metadata of an existing codebook entity by codebookId.
 *
 * Update certain properties of a specified codebook using its codebookId. Only
 * mutable fields such as name and description may be edited; the business code
 * remains immutable for consistency and audit compliance. This API enforces
 * strict permissions for admin/operators.
 *
 * @param props.connection
 * @param props.codebookId The unique identifier (UUID) of the codebook to
 *   update.
 * @param props.body Updated fields for the codebook (excluding code field).
 * @path /shoppingMallAiBackend/admin/codebooks/:codebookId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the codebook to update. */
    codebookId: string & tags.Format<"uuid">;

    /** Updated fields for the codebook (excluding code field). */
    body: IShoppingMallAiBackendCodebook.IUpdate;
  };
  export type Body = IShoppingMallAiBackendCodebook.IUpdate;
  export type Response = IShoppingMallAiBackendCodebook;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/admin/codebooks/:codebookId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/codebooks/${encodeURIComponent(props.codebookId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCodebook =>
    typia.random<IShoppingMallAiBackendCodebook>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codebookId")(() => typia.assert(props.codebookId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a codebook by its UUID, retaining for audit/evidence.
 *
 * Permanently deactivate (soft delete) a codebook in the system by marking the
 * deleted_at timestamp. This operation prevents further use in business logic,
 * but retains the record for audit, history, and compliance evidence. This is
 * an admin-only operation as it can impact running business rules or
 * integrations.
 *
 * @param props.connection
 * @param props.codebookId The unique identifier (UUID) of the codebook to be
 *   deleted.
 * @path /shoppingMallAiBackend/admin/codebooks/:codebookId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier (UUID) of the codebook to be deleted. */
    codebookId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/admin/codebooks/:codebookId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/codebooks/${encodeURIComponent(props.codebookId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codebookId")(() => typia.assert(props.codebookId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
