import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCodebookEntry } from "../../../../../structures/IShoppingMallAiBackendCodebookEntry";
import { IPageIShoppingMallAiBackendCodebookEntry } from "../../../../../structures/IPageIShoppingMallAiBackendCodebookEntry";

/**
 * Add a new entry to a codebook by its codebookId.
 *
 * Create a new entry (option, status, tag, etc.) within the given codebook.
 * Accepts code, label, and business metadata, storing it as a new entity in the
 * codebook_entries table. Only admin users can create new entries, with strict
 * duplicate code checks. Supports structured expansion of lookup dictionaries
 * to accommodate business evolution.
 *
 * @param props.connection
 * @param props.codebookId UUID of the parent codebook to which this entry will
 *   be added.
 * @param props.body Entry details (code, label, order, etc.) for the new
 *   codebook entry.
 * @path /shoppingMallAiBackend/admin/codebooks/:codebookId/entries
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the parent codebook to which this entry will be added. */
    codebookId: string & tags.Format<"uuid">;

    /** Entry details (code, label, order, etc.) for the new codebook entry. */
    body: IShoppingMallAiBackendCodebookEntry.ICreate;
  };
  export type Body = IShoppingMallAiBackendCodebookEntry.ICreate;
  export type Response = IShoppingMallAiBackendCodebookEntry;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/admin/codebooks/:codebookId/entries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/codebooks/${encodeURIComponent(props.codebookId ?? "null")}/entries`;
  export const random = (): IShoppingMallAiBackendCodebookEntry =>
    typia.random<IShoppingMallAiBackendCodebookEntry>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codebookId")(() => typia.assert(props.codebookId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List codebook entries for a specific codebook, supporting filtering and
 * pagination.
 *
 * Retrieve all codebook entries (options/values) belonging to a specified
 * codebook. Results include code, label, description, sort order, and
 * visibility. Supports advanced search, filtering, and sorted pagination for
 * use in business logic, admin dashboard, and integration scenarios. Access
 * restricted to administrators.
 *
 * @param props.connection
 * @param props.codebookId The UUID of the codebook whose entries are to be
 *   listed.
 * @param props.body Filter and pagination info for codebook entries.
 * @path /shoppingMallAiBackend/admin/codebooks/:codebookId/entries
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** The UUID of the codebook whose entries are to be listed. */
    codebookId: string & tags.Format<"uuid">;

    /** Filter and pagination info for codebook entries. */
    body: IShoppingMallAiBackendCodebookEntry.IRequest;
  };
  export type Body = IShoppingMallAiBackendCodebookEntry.IRequest;
  export type Response = IPageIShoppingMallAiBackendCodebookEntry.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/codebooks/:codebookId/entries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/admin/codebooks/${encodeURIComponent(props.codebookId ?? "null")}/entries`;
  export const random = (): IPageIShoppingMallAiBackendCodebookEntry.ISummary =>
    typia.random<IPageIShoppingMallAiBackendCodebookEntry.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codebookId")(() => typia.assert(props.codebookId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific codebook entry by IDs.
 *
 * Retrieve complete detail for a specific codebook entry, referenced by both
 * codebookId and entryId. Returns all business/context metadata, supporting
 * admin workflows to inspect or configure business dictionaries and lookup
 * sets. Access is limited to admin or system-level users.
 *
 * @param props.connection
 * @param props.codebookId UUID of the codebook containing the entry.
 * @param props.entryId UUID of the entry to lookup within the codebook.
 * @path /shoppingMallAiBackend/admin/codebooks/:codebookId/entries/:entryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the codebook containing the entry. */
    codebookId: string & tags.Format<"uuid">;

    /** UUID of the entry to lookup within the codebook. */
    entryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCodebookEntry;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/codebooks/:codebookId/entries/:entryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/codebooks/${encodeURIComponent(props.codebookId ?? "null")}/entries/${encodeURIComponent(props.entryId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCodebookEntry =>
    typia.random<IShoppingMallAiBackendCodebookEntry>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("codebookId")(() => typia.assert(props.codebookId));
      assert.param("entryId")(() => typia.assert(props.entryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
