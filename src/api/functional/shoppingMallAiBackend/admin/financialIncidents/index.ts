import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendFinancialIncident } from "../../../../structures/IShoppingMallAiBackendFinancialIncident";
import { IPageIShoppingMallAiBackendFinancialIncident } from "../../../../structures/IPageIShoppingMallAiBackendFinancialIncident";

/**
 * Search and paginate financial incident records for compliance and audit
 * purposes.
 *
 * Retrieve a paginated, filtered list of financial incident and anomaly records
 * for deposits, mileage, or coin ledgers. This API empowers administrators to
 * efficiently audit, investigate, and review incident logs, supporting
 * compliance, fraud detection, and root cause analysis for financial operations
 * within the mall.
 *
 * Access is restricted to administrators due to the sensitive compliance and
 * personal data involved. The operation implements advanced filtering by
 * incident type (e.g., fraud, compliance_audit, withdrawal_dispute), status
 * (open, closed, investigating, resolved), business entities (deposit, mileage,
 * coin, customer, seller), and date ranges. Business search scenarios include
 * identifying unresolved compliance incidents, reviewing root causes, or
 * monitoring fraud clusters.
 *
 * Pagination and sorting are configurable for business monitoring dashboards.
 * Errors are handled with compliance-focused messages and detailed audit logs
 * for investigative traceability. Related APIs include detailed incident GET,
 * as well as list/search APIs for deposit, mileage, and coin transactions.
 *
 * @param props.connection
 * @param props.body Search filters and pagination/sort criteria for financial
 *   incidents.
 * @path /shoppingMallAiBackend/admin/financialIncidents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination/sort criteria for financial incidents. */
    body: IShoppingMallAiBackendFinancialIncident.IRequest;
  };
  export type Body = IShoppingMallAiBackendFinancialIncident.IRequest;
  export type Response = IPageIShoppingMallAiBackendFinancialIncident.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/financialIncidents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/financialIncidents";
  export const random =
    (): IPageIShoppingMallAiBackendFinancialIncident.ISummary =>
      typia.random<IPageIShoppingMallAiBackendFinancialIncident.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific financial incident by ID.
 *
 * Allows a system administrator or compliance auditor to retrieve a complete
 * financial incident record by its ID. The operation exposes all stored
 * incident details, including affected entities (deposit, mileage, coin,
 * customer, seller), incident type, current status, descriptive details,
 * associated external references, timestamps, and resolution data.
 *
 * This endpoint is essential for supporting legal investigations, in-depth root
 * cause analysis, and regulatory or audit evidence traceability. Data exposure
 * is restricted to admins due to the sensitivity of compliance and personal
 * information. If the incident is not found or is no longer accessible due to
 * deletion or retention expiry, a clear API error is returned with audit log.
 *
 * Related endpoints include the financial incidents search/index API.
 *
 * @param props.connection
 * @param props.incidentId Unique identifier (UUID) of the financial incident to
 *   retrieve.
 * @path /shoppingMallAiBackend/admin/financialIncidents/:incidentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the financial incident to retrieve. */
    incidentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendFinancialIncident;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/financialIncidents/:incidentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/financialIncidents/${encodeURIComponent(props.incidentId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendFinancialIncident =>
    typia.random<IShoppingMallAiBackendFinancialIncident>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("incidentId")(() => typia.assert(props.incidentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
