import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendRoleEscalation } from "../../../../structures/IShoppingMallAiBackendRoleEscalation";
import { IPageIShoppingMallAiBackendRoleEscalation } from "../../../../structures/IPageIShoppingMallAiBackendRoleEscalation";

/**
 * Search and retrieve all role escalation snapshots/events in the system.
 *
 * This endpoint allows administrators to retrieve a paginated and filterable
 * list of all role escalation snapshots/events in the system. Entries detail
 * transitions such as customer-to-seller, temporary promotions, demotions, and
 * approval/rejection rationales.
 *
 * Advanced search and filtering by previous role, resulting role, escalation
 * type, timestamp, performing admin, or affected user is supported. This is
 * vital for compliance, lifecycle traceability, and platform governance,
 * ensuring transparency and accountability for all business-critical role
 * changes.
 *
 * Access is restricted to admin users, with strict audit trails for evidence
 * and compliance reviews. The results can be used for reporting management,
 * trend analysis, and incident investigation involving privileged account
 * access or modification.
 *
 * @param props.connection
 * @param props.body Filter, search and pagination criteria for listing role
 *   escalation events.
 * @path /shoppingMallAiBackend/admin/roleEscalations
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter, search and pagination criteria for listing role escalation
     * events.
     */
    body: IShoppingMallAiBackendRoleEscalation.IRequest;
  };
  export type Body = IShoppingMallAiBackendRoleEscalation.IRequest;
  export type Response = IPageIShoppingMallAiBackendRoleEscalation.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/admin/roleEscalations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/admin/roleEscalations";
  export const random =
    (): IPageIShoppingMallAiBackendRoleEscalation.ISummary =>
      typia.random<IPageIShoppingMallAiBackendRoleEscalation.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific role escalation event.
 *
 * This API operation enables administrators to fetch comprehensive details for
 * a given role escalation event identified by roleEscalationId. Includes
 * context of role change, admin responsible, event type (promotion, demotion,
 * etc.), and explicit rationale.
 *
 * Essential for regulatory audits, compliance investigations, and management of
 * business-critical privilege changes. It provides historical transparency,
 * evidence for dispute resolution, and traces original intent/policy for
 * lifecycle management.
 *
 * Results are strictly limited to admin users and may trigger audit log events
 * or evidence snapshot reviews in response.
 *
 * @param props.connection
 * @param props.roleEscalationId Unique identifier of the role escalation event
 *   to retrieve.
 * @path /shoppingMallAiBackend/admin/roleEscalations/:roleEscalationId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the role escalation event to retrieve. */
    roleEscalationId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendRoleEscalation;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/admin/roleEscalations/:roleEscalationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/admin/roleEscalations/${encodeURIComponent(props.roleEscalationId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendRoleEscalation =>
    typia.random<IShoppingMallAiBackendRoleEscalation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("roleEscalationId")(() =>
        typia.assert(props.roleEscalationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
