import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendProduct } from "../../../structures/IShoppingMallAiBackendProduct";
import { IPageIShoppingMallAiBackendProduct } from "../../../structures/IPageIShoppingMallAiBackendProduct";

/**
 * Search and paginate products in the AI-powered shopping mall backend.
 *
 * Retrieve a paginated and filterable list of products, supporting multi-field
 * search, advanced sorting, and customizable filters on business status, type,
 * and other properties as required by shopping_mall_ai_backend_products. This
 * operation is fundamental for customer-facing catalog exploration, seller
 * product management, and administrator moderation or analytics workflows.
 *
 * Security is managed via role-based access; customers, sellers, or admins may
 * have different default result sets. The search supports partial and full-text
 * matching, as well as filtering on the product's core and extended attributes
 * defined in the schema. This endpoint integrates deeply with inventory,
 * options, and category relations for dynamic product catalog rendering.
 *
 * Validation enforces pagination and allowed filter formats, and handles error
 * cases such as invalid filter parameters or excessive page size requests.
 * Related endpoints include single-product detail fetch, product creation, and
 * update.
 *
 * @param props.connection
 * @param props.body Search/filter parameters for paginated product requests
 *   (fields, query, sort, pagination).
 * @path /shoppingMallAiBackend/products
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search/filter parameters for paginated product requests (fields,
     * query, sort, pagination).
     */
    body: IShoppingMallAiBackendProduct.IRequest;
  };
  export type Body = IShoppingMallAiBackendProduct.IRequest;
  export type Response = IPageIShoppingMallAiBackendProduct;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/products";
  export const random = (): IPageIShoppingMallAiBackendProduct =>
    typia.random<IPageIShoppingMallAiBackendProduct>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single product's detailed information by ID.
 *
 * Retrieve detailed information for a single product identified by the given
 * productId. Provides all business and commerce attributes defined in
 * shopping_mall_ai_backend_products, plus related options, bundles, categories,
 * images, and linked analytics as required for rich product detail and
 * management.
 *
 * This endpoint supports customer product pages (for purchase or information),
 * seller product dashboards, and administrator audit or moderation. Data is
 * secured by role; customers may see only published/active products, while
 * admins and sellers may see hidden, paused, or draft items depending on their
 * access.
 *
 * Parameter validation ensures the productId is a valid UUID. If the product is
 * logically deleted (soft-deleted), results depend on access rights and
 * business rules.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product to retrieve.
 * @path /shoppingMallAiBackend/products/:productId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target product to retrieve. */
    productId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendProduct;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/products/:productId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendProduct =>
    typia.random<IShoppingMallAiBackendProduct>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
