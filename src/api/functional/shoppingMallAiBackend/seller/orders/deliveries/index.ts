import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendOrderDelivery } from "../../../../../structures/IShoppingMallAiBackendOrderDelivery";

/**
 * Update a specific delivery for an order.
 * (shopping_mall_ai_backend_order_deliveries).
 *
 * Update information for a specific delivery record of a given order. Fields
 * that can be updated include delivery status, tracking number, logistics
 * provider, shipped/delivered timestamps, and delivery notes. Strict validation
 * logic applies for allowable status transitions, authenticating only actors
 * with fulfillment responsibility. All updates are logged for compliance and
 * audit. Returns the updated delivery record. Forbidden if delivery status is
 * locked/final or requesting user is unauthorized.
 *
 * @param props.connection
 * @param props.orderId Order's unique identifier (UUID).
 * @param props.deliveryId Delivery's unique identifier (UUID).
 * @param props.body Fields to update for the delivery record (status, tracking,
 *   provider, notes).
 * @path /shoppingMallAiBackend/seller/orders/:orderId/deliveries/:deliveryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Order's unique identifier (UUID). */
    orderId: string & tags.Format<"uuid">;

    /** Delivery's unique identifier (UUID). */
    deliveryId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the delivery record (status, tracking, provider,
     * notes).
     */
    body: IShoppingMallAiBackendOrderDelivery.IUpdate;
  };
  export type Body = IShoppingMallAiBackendOrderDelivery.IUpdate;
  export type Response = IShoppingMallAiBackendOrderDelivery;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/seller/orders/:orderId/deliveries/:deliveryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendOrderDelivery =>
    typia.random<IShoppingMallAiBackendOrderDelivery>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
