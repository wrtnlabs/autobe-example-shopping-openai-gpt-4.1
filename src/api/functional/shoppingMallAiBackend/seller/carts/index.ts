import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendCart } from "../../../../structures/IShoppingMallAiBackendCart";
import { IPageIShoppingMallAiBackendCart } from "../../../../structures/IPageIShoppingMallAiBackendCart";
export * as items from "./items";

/**
 * Create a new shopping cart for a customer or guest session.
 *
 * Add a new shopping cart to the ShoppingMallAiBackend system for a customer or
 * guest session.
 *
 * This endpoint is used when a new cart is to be createdâ€”for example, on guest
 * checkout, first login, or when a new customer begins a session. The API
 * accepts cart metadata (including customer or session IDs, cart_token, and
 * initial status) as described by the ShoppingMallAiBackendCart.ICreate schema.
 * All business rules for cart uniqueness, customer binding, and session
 * management are enforced. The returned response gives full details of the
 * created cart, including generated IDs and initial values set by the system.
 * All creation events are logged for audit and compliance.
 *
 * @param props.connection
 * @param props.body Fields required to create a new shopping cart
 *   (customer/session, tokens, etc.)
 * @path /shoppingMallAiBackend/seller/carts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Fields required to create a new shopping cart (customer/session,
     * tokens, etc.)
     */
    body: IShoppingMallAiBackendCart.ICreate;
  };
  export type Body = IShoppingMallAiBackendCart.ICreate;
  export type Response = IShoppingMallAiBackendCart;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMallAiBackend/seller/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/seller/carts";
  export const random = (): IShoppingMallAiBackendCart =>
    typia.random<IShoppingMallAiBackendCart>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and paginate shopping carts with flexible query options.
 *
 * Search for shopping cart records across the system, with support for
 * filtering on status, date range, customer association, and customizable
 * pagination.
 *
 * This API operation is designed for customer service, account management, and
 * operational analytics use-cases where a filtered view of shopping carts is
 * required. It consumes a ShoppingMallAiBackendCart.IRequest object, which
 * allows clients to submit flexible queries with filters on key cart properties
 * and control the number of results and sort ordering. The response returns a
 * paginated set of summary shopping cart objects optimized for list displays.
 * Users must have permission to view cart information, with more sensitive
 * views available to admins. All personal information is returned according to
 * the role of the requesting user.
 *
 * @param props.connection
 * @param props.body Query and filter options for carts search/pagination
 * @path /shoppingMallAiBackend/seller/carts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Query and filter options for carts search/pagination */
    body: IShoppingMallAiBackendCart.IRequest;
  };
  export type Body = IShoppingMallAiBackendCart.IRequest;
  export type Response = IPageIShoppingMallAiBackendCart.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMallAiBackend/seller/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMallAiBackend/seller/carts";
  export const random = (): IPageIShoppingMallAiBackendCart.ISummary =>
    typia.random<IPageIShoppingMallAiBackendCart.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a single shopping cart by cartId.
 *
 * Get the complete details of a shopping cart by unique cartId.
 *
 * This operation allows a customer, support agent, or admin to view all
 * properties and contents of a particular shopping cart. The result includes
 * metadata, customer/session ownership, cart status, and any advanced business
 * fields associated with the cart. Sensitive fields such as customer_id are
 * shown only to owners and authorized admin roles. All access is logged for
 * evidence and security compliance. Attempting to view a cart not owned or
 * authorized will yield an appropriate permissions error.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the requested cart (UUID).
 * @path /shoppingMallAiBackend/seller/carts/:cartId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the requested cart (UUID). */
    cartId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendCart;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/seller/carts/:cartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/seller/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCart =>
    typia.random<IShoppingMallAiBackendCart>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update shopping cart metadata or status for a given cartId.
 *
 * Update an existing cart's metadata or status by specifying the cartId and
 * supplying the update fields in the request body.
 *
 * Common use-cases include merging guest and member carts, associating a
 * customer account, or changing cart status. Authorization ensures only the
 * right user or admin may apply changes. Requests are validated for data
 * consistency and business rules. Results in a returned updated cart object
 * reflecting all changes.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the cart to update (UUID).
 * @param props.body Fields to update in the shopping cart (status,
 *   associations, metadata)
 * @path /shoppingMallAiBackend/seller/carts/:cartId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the cart to update (UUID). */
    cartId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the shopping cart (status, associations,
     * metadata)
     */
    body: IShoppingMallAiBackendCart.IUpdate;
  };
  export type Body = IShoppingMallAiBackendCart.IUpdate;
  export type Response = IShoppingMallAiBackendCart;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/seller/carts/:cartId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/seller/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): IShoppingMallAiBackendCart =>
    typia.random<IShoppingMallAiBackendCart>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (logical deletion) a shopping cart by marking deleted_at for
 * compliance retention.
 *
 * Soft delete (logical deletion) a shopping cart specified by cartId by setting
 * its deleted_at timestamp. This operation marks the cart as logically deleted,
 * preserving its data for audit and regulatory evidence while making it
 * unavailable for future commerce events. Associated items or coupon usages are
 * retained for compliance purposes. Only the cart owner or privileged admin
 * roles may perform this action. Any attempt to soft delete a cart not owned by
 * the user, or a cart in a prohibited status, will result in a permission or
 * business logic error. All soft deletions are logged for regulatory compliance
 * and evidence preservation.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the cart to logically delete (UUID).
 * @path /shoppingMallAiBackend/seller/carts/:cartId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the cart to logically delete (UUID). */
    cartId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMallAiBackend/seller/carts/:cartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/seller/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
