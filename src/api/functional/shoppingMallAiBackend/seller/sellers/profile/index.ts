import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendSellerProfile } from "../../../../../structures/IShoppingMallAiBackendSellerProfile";

/**
 * Retrieve a detailed seller profile for a given sellerId.
 *
 * Get the seller's profile by their unique identifier. Returns all
 * profile-related fields, including display name, contact details, address,
 * business introduction, and audit timestamps. Only authorized sellers or
 * administrators may view or manage this information. Sensitive contact and
 * business data is not public and requires authentication for access. Linked
 * one-to-one with the seller account and immutable except through update
 * operations. Errors are returned if the seller profile does not exist or if
 * access is not allowed.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller whose profile is
 *   requested.
 * @path /shoppingMallAiBackend/seller/sellers/:sellerId/profile
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller whose profile is requested. */
    sellerId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendSellerProfile;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/seller/sellers/:sellerId/profile",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}/profile`;
  export const random = (): IShoppingMallAiBackendSellerProfile =>
    typia.random<IShoppingMallAiBackendSellerProfile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update seller profile information for a given sellerId.
 *
 * Update a seller's profile using their unique sellerId. The profile includes
 * display name, contact phone/email, address, and business description. On
 * sensitive changes (such as contact details), re-verification steps may be
 * enforced by business policies. The update is permitted only for the owner
 * seller or admins with appropriate privileges. All changes are transparently
 * logged for audit and evidence. Returns the revised seller profile. If update
 * involves contact info, ensure compliance with verification and communication
 * policies.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller whose profile is being
 *   updated.
 * @param props.body Profile fields to update for the seller.
 * @path /shoppingMallAiBackend/seller/sellers/:sellerId/profile
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller whose profile is being updated. */
    sellerId: string & tags.Format<"uuid">;

    /** Profile fields to update for the seller. */
    body: IShoppingMallAiBackendSellerProfile.IUpdate;
  };
  export type Body = IShoppingMallAiBackendSellerProfile.IUpdate;
  export type Response = IShoppingMallAiBackendSellerProfile;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/seller/sellers/:sellerId/profile",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}/profile`;
  export const random = (): IShoppingMallAiBackendSellerProfile =>
    typia.random<IShoppingMallAiBackendSellerProfile>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
