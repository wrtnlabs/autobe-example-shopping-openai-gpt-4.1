import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAiBackendSellerSettlement } from "../../../../../structures/IShoppingMallAiBackendSellerSettlement";

/**
 * Retrieve settlement and payout details for a given sellerId.
 *
 * Get the settlement configuration for a specific seller by their sellerId.
 * Returns current payout destination details (bank name, account number,
 * account holder) and related memo if present. Only accessible to the seller
 * owner and admin roles due to the financial sensitivity of the data. Used in
 * seller dashboards or admin financial modules to view, audit, or update seller
 * banking/payout settings. Strictly enforce role and privacy policies when
 * exposing this data. If no settlement info exists, an error is returned.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller whose settlement
 *   information is requested.
 * @path /shoppingMallAiBackend/seller/sellers/:sellerId/settlement
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the seller whose settlement information is
     * requested.
     */
    sellerId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAiBackendSellerSettlement;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMallAiBackend/seller/sellers/:sellerId/settlement",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMallAiBackend/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}/settlement`;
  export const random = (): IShoppingMallAiBackendSellerSettlement =>
    typia.random<IShoppingMallAiBackendSellerSettlement>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update settlement/payout information for a given sellerId.
 *
 * Update seller settlement and bank account configuration for a specific
 * seller. May be called by authenticated sellers or platform admins. All payout
 * details—including bank name, bank account number, account holder, and
 * memo—can be edited with appropriate business validation and regulatory
 * controls. Updates are fully audited and often require compliance
 * re-verification for sensitive changes such as account number or account
 * holder. Returns the updated settlement record. Errors are returned on invalid
 * input or policy violations.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller whose settlement
 *   configuration will be updated.
 * @param props.body Fields defining updated settlement configuration, such as
 *   banking details and memo.
 * @path /shoppingMallAiBackend/seller/sellers/:sellerId/settlement
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the seller whose settlement configuration will
     * be updated.
     */
    sellerId: string & tags.Format<"uuid">;

    /**
     * Fields defining updated settlement configuration, such as banking
     * details and memo.
     */
    body: IShoppingMallAiBackendSellerSettlement.IUpdate;
  };
  export type Body = IShoppingMallAiBackendSellerSettlement.IUpdate;
  export type Response = IShoppingMallAiBackendSellerSettlement;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMallAiBackend/seller/sellers/:sellerId/settlement",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMallAiBackend/seller/sellers/${encodeURIComponent(props.sellerId ?? "null")}/settlement`;
  export const random = (): IShoppingMallAiBackendSellerSettlement =>
    typia.random<IShoppingMallAiBackendSellerSettlement>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
