import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallEntityAttachmentLink } from "../../../structures/IShoppingMallEntityAttachmentLink";

/**
 * Retrieve entity-attachment link details by ID
 * (shopping_mall_entity_attachment_links table).
 *
 * This operation fetches the details of a specific entity-attachment link from
 * the shopping_mall_entity_attachment_links table. It is used to retrieve all
 * association metadata, including the business entity (e.g., product, order,
 * review) related to the attachment, as well as permission details and context
 * of linkage. The entity-attachment link contains references to the target
 * entity (with entity type and ID), linked attachment ID, the user who
 * performed the linking, the purpose of the attachment (such as evidence,
 * thumbnail, document), business context, and audit-compliance fields.
 * Sensitive attributes such as createdAt, deletedAt, and permission scope are
 * also returned if the requesting user has appropriate permissions.
 *
 * This endpoint is read-only and does not require authentication for public
 * attachments, but restricted resources enforce permission checks. The
 * operation will return all non-deleted, logically active entity-attachment
 * links, and fail if the link is not found or access is denied. All responses
 * are formatted according to the IShoppingMallEntityAttachmentLink schema and
 * include error handling for missing IDs, permission violations, or deleted
 * entities.
 *
 * @param props.connection
 * @param props.entityAttachmentLinkId Unique identifier of the
 *   entity-attachment link (UUID).
 * @path /shoppingMall/entityAttachmentLinks/:entityAttachmentLinkId
 * @accessor api.functional.shoppingMall.entityAttachmentLinks.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the entity-attachment link (UUID). */
    entityAttachmentLinkId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallEntityAttachmentLink;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/entityAttachmentLinks/:entityAttachmentLinkId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/entityAttachmentLinks/${encodeURIComponent(props.entityAttachmentLinkId ?? "null")}`;
  export const random = (): IShoppingMallEntityAttachmentLink =>
    typia.random<IShoppingMallEntityAttachmentLink>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("entityAttachmentLinkId")(() =>
        typia.assert(props.entityAttachmentLinkId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
