import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductBundle } from "../../../../structures/IShoppingMallProductBundle";

/**
 * Retrieve details of a specific product bundle under a product
 * (shopping_mall_product_bundles table).
 *
 * This API operation fetches the full details of a single product bundle
 * belonging to a specific product. The operation utilizes the
 * shopping_mall_product_bundles table in the Prisma schema, referencing the
 * parent product's unique productId and the bundle's bundleId as URL path
 * parameters.
 *
 * The response includes all business-critical metadata for the bundle, such as
 * its display name, type (fixed or optional), description, and the bundle's
 * configured position within the product's bundle sequence. Additionally,
 * related bundle items (composition) and their ordering are typically included
 * in the response object for comprehensive viewing or editing scenarios.
 *
 * Authorization is based on requester roles: customers can generally view
 * bundle information for browsing and purchase; sellers may access their own
 * bundles for management; and admins have global read access. Proper permission
 * enforcement ensures that only authorized users can access restricted or draft
 * bundles where business rules apply.
 *
 * Business logic ensures bundles returned by this operation are active and
 * viewable per product status and channel/section scoping. Any error in
 * locating the product or bundle results in a 404 with a clear error message.
 *
 * This operation is closely related to bundle creation, update, and deletion
 * endpoints, which manage the lifecycle of bundles under the same product
 * context.
 *
 * @param props.connection
 * @param props.productId ID of the product to which the bundle belongs (UUID,
 *   shopping_mall_products.id).
 * @param props.bundleId Unique identifier of the product bundle (UUID,
 *   shopping_mall_product_bundles.id).
 * @path /shoppingMall/products/:productId/bundles/:bundleId
 * @accessor api.functional.shoppingMall.products.bundles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * ID of the product to which the bundle belongs (UUID,
     * shopping_mall_products.id).
     */
    productId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the product bundle (UUID,
     * shopping_mall_product_bundles.id).
     */
    bundleId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProductBundle;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId/bundles/:bundleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/bundles/${encodeURIComponent(props.bundleId ?? "null")}`;
  export const random = (): IShoppingMallProductBundle =>
    typia.random<IShoppingMallProductBundle>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("bundleId")(() => typia.assert(props.bundleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
