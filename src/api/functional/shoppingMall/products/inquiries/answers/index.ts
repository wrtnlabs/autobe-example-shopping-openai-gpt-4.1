import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallInquiryAnswer } from "../../../../../structures/IShoppingMallInquiryAnswer";
import { IPageIShoppingMallInquiryAnswer } from "../../../../../structures/IPageIShoppingMallInquiryAnswer";

/**
 * Retrieve paginated, filtered answers for a product inquiry
 * (shopping_mall_inquiry_answers).
 *
 * This endpoint retrieves paginated, filtered, and sorted answers for a
 * specified product's inquiry. It supports advanced search and list options,
 * including author type (seller/admin), moderation status, official answer
 * flag, and full audit compliance.
 *
 * Role-specific responses are enabled, showing full detail for sellers/admins
 * and privacy-protected fields for ordinary users. Pagination, query, and
 * sorting enhance usability for large boards. Only authorized users can view
 * private or restricted answers, and related moderation states are considered.
 *
 * This leverages the shopping_mall_inquiry_answers schema—each answer includes
 * references to seller/admin authorship, main body, moderation state,
 * timestamps, and official-answer flag. Filtering supports status, author, and
 * meta-search (such as pending moderation or official answers only).
 *
 * @param props.connection
 * @param props.productId Target product's unique identifier (UUID)
 * @param props.inquiryId Target inquiry's unique identifier (UUID)
 * @param props.body Search and pagination/filtering criteria for inquiry
 *   answers
 * @path /shoppingMall/products/:productId/inquiries/:inquiryId/answers
 * @accessor api.functional.shoppingMall.products.inquiries.answers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Target product's unique identifier (UUID) */
    productId: string & tags.Format<"uuid">;

    /** Target inquiry's unique identifier (UUID) */
    inquiryId: string & tags.Format<"uuid">;

    /** Search and pagination/filtering criteria for inquiry answers */
    body: IShoppingMallInquiryAnswer.IRequest;
  };
  export type Body = IShoppingMallInquiryAnswer.IRequest;
  export type Response = IPageIShoppingMallInquiryAnswer;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/products/:productId/inquiries/:inquiryId/answers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/answers`;
  export const random = (): IPageIShoppingMallInquiryAnswer =>
    typia.random<IPageIShoppingMallInquiryAnswer>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific product inquiry answer
 * (shopping_mall_inquiry_answers).
 *
 * Fetch the full answer detail for a single product inquiry's answer. Requires
 * authorization—ordinary users may only view public or their own answers, while
 * sellers and admins may access additional metadata such as moderation status
 * or reviewer information.
 *
 * The schema supports threading (parent/child linkage), official-answer flags,
 * author (seller or admin), moderation and notification information. The
 * response provides all answer content and meta except for internal moderation
 * data if requester lacks privilege. Used in moderation, thread display, or
 * evidence presentation workflows.
 *
 * This references the shopping_mall_inquiry_answers schema: answerId uniquely
 * selects the answer row for the target inquiry/product.
 *
 * @param props.connection
 * @param props.productId Target product's unique identifier (UUID)
 * @param props.inquiryId Target inquiry's unique identifier (UUID)
 * @param props.answerId Target answer's unique identifier (UUID)
 * @path /shoppingMall/products/:productId/inquiries/:inquiryId/answers/:answerId
 * @accessor api.functional.shoppingMall.products.inquiries.answers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target product's unique identifier (UUID) */
    productId: string & tags.Format<"uuid">;

    /** Target inquiry's unique identifier (UUID) */
    inquiryId: string & tags.Format<"uuid">;

    /** Target answer's unique identifier (UUID) */
    answerId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallInquiryAnswer;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId/inquiries/:inquiryId/answers/:answerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/answers/${encodeURIComponent(props.answerId ?? "null")}`;
  export const random = (): IShoppingMallInquiryAnswer =>
    typia.random<IShoppingMallInquiryAnswer>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.param("answerId")(() => typia.assert(props.answerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
