import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductInquiry } from "../../../../structures/IShoppingMallProductInquiry";
import { IPageIShoppingMallProductInquiry } from "../../../../structures/IPageIShoppingMallProductInquiry";
export * as answers from "./answers/index";

/**
 * List and search product inquiries (shopping_mall_product_inquiries) for a
 * specific product with advanced filtering.
 *
 * This endpoint returns a searched and paginated list of inquiries attached to
 * a particular product, enabling features such as advanced filtering (e.g.,
 * only show unanswered questions, author role filtering, date-based ranges, or
 * visibility-level selection). The operation optimizes frontend rendering by
 * returning summary records rather than full inquiry objects and supports
 * efficient search/list experience for customers, sellers, and admins.
 *
 * The operation enforces access and privacy restrictions based on author and
 * viewer roles. For example, private inquiries are only listable by authors,
 * responders, or admins, while public inquiries are visible according to
 * product and site business rules. The filter request body supports specifying
 * page size, sort, author, status, and additional inquiry properties. This
 * operation is designed to integrate with inquiry creation, detail retrieval,
 * and answer submission endpoints as part of the full Q&A board feature set.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product whose inquiries are
 *   being retrieved.
 * @param props.body Criteria for filtering, sorting, and paginating product
 *   inquiries associated with a product.
 * @path /shoppingMall/products/:productId/inquiries
 * @accessor api.functional.shoppingMall.products.inquiries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the product whose inquiries are being retrieved. */
    productId: string & tags.Format<"uuid">;

    /**
     * Criteria for filtering, sorting, and paginating product inquiries
     * associated with a product.
     */
    body: IShoppingMallProductInquiry.IRequest;
  };
  export type Body = IShoppingMallProductInquiry.IRequest;
  export type Response = IPageIShoppingMallProductInquiry.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/products/:productId/inquiries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}/inquiries`;
  export const random = (): IPageIShoppingMallProductInquiry.ISummary =>
    typia.random<IPageIShoppingMallProductInquiry.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
