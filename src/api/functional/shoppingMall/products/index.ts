import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProduct } from "../../../structures/IShoppingMallProduct";
import { IPageIShoppingMallProduct } from "../../../structures/IPageIShoppingMallProduct";
export * as bundles from "./bundles/index";
export * as inquiries from "./inquiries/index";

/**
 * Search and retrieve products from the shopping mall catalog with advanced
 * filtering, pagination, and sorting. (shopping_mall_products).
 *
 * Retrieve a filtered and paginated list of products from the system catalog.
 * This operation allows advanced searching, sorting, and filtering by multiple
 * criteria including seller, channel, section, category, product code, status,
 * and textual search on product names. Supports pagination (page/size), sorting
 * by creation/update time, name, or status, and optional fuzzy matching for
 * enhanced discovery experiences.
 *
 * Security and permission logic requires that results respect channel and
 * seller access rights, with potential masking of restricted fields dependent
 * on caller role (customer, seller, admin). Only products marked as Active (or
 * other visible statuses) are shown to customers; sellers and admins may search
 * broader sets, including paused/discontinued products for operational
 * workflows.
 *
 * Integrates directly with the shopping_mall_products table described in the
 * Prisma schema—leveraging all search-relevant fields and associated
 * relationships for filter enrichment. Robust error handling returns detailed
 * feedback on invalid query parameters or permission denials. Designed to be
 * audited and extensible for future field expansions or integration with
 * analytics/personalization engines.
 *
 * @param props.connection
 * @param props.body Search, filter, sort, and pagination parameters for product
 *   catalog queries.
 * @path /shoppingMall/products
 * @accessor api.functional.shoppingMall.products.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, sort, and pagination parameters for product catalog
     * queries.
     */
    body: IShoppingMallProduct.IRequest;
  };
  export type Body = IShoppingMallProduct.IRequest;
  export type Response = IPageIShoppingMallProduct.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/products";
  export const random = (): IPageIShoppingMallProduct.ISummary =>
    typia.random<IPageIShoppingMallProduct.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific product by productId.
 * (shopping_mall_products).
 *
 * Fetch detailed information for a specific product identified by productId,
 * including all main attributes—name, code, status, business workflow state,
 * price, seller and channel association, section/category membership, and
 * creation/update timestamps. Optionally include linked product content,
 * variants/options, bundles, tags, SEO metadata, and attachments for
 * comprehensive data.
 *
 * Permission and visibility are determined by product status, workflow state,
 * and role; only appropriately authorized users (customers for public items,
 * sellers for their own listings, admins for global view) may access certain
 * sensitive or operational fields. Handles cases where the product is paused,
 * discontinued, or deleted (soft delete), providing appropriate error or masked
 * response where business rules require. Fully aligns with the
 * shopping_mall_products and its related Prisma schema definitions to ensure
 * all entity fields and relationships are reflected accurately.
 *
 * Complementary to product list or search endpoints, this API enables direct
 * navigation to individual product detail pages for purchase, review,
 * management, or review. Returns error if productId does not exist or the
 * resource is not visible to the caller.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the product to retrieve from the
 *   shopping mall catalog.
 * @path /shoppingMall/products/:productId
 * @accessor api.functional.shoppingMall.products.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier for the product to retrieve from the shopping mall
     * catalog.
     */
    productId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProduct;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/products/:productId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): IShoppingMallProduct =>
    typia.random<IShoppingMallProduct>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
