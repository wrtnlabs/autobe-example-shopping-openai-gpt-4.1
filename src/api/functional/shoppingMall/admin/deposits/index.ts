import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallDeposit } from "../../../../structures/IShoppingMallDeposit";
import { IPageIShoppingMallDeposit } from "../../../../structures/IPageIShoppingMallDeposit";
export * as transactions from "./transactions/index";

/**
 * Admin search/list of all user deposit accounts (shopping_mall_deposits table)
 * with filtering and pagination.
 *
 * This endpoint retrieves a paginated and filtered list of deposit accounts
 * (electronic wallet balances) stored in the shopping_mall_deposits table.
 * Administrators may use flexible search criteria (status, minimum/maximum
 * balance, customer association, time windows) bundled in the request body. The
 * response contains an array of deposit summaries and pagination metadata,
 * providing an overview and drill-down capability for finance and audit
 * operations.
 *
 * Strict access controls ensure only admin roles can enumerate, review, or
 * audit all deposit accounts. Regular users may only access their own balance
 * via a tailored endpoint, not this administrative overview. Error scenarios
 * include invalid filters, excessive result windows, or internal errors.
 * Related APIs exist for deposit transaction history and user-specific balance
 * viewing.
 *
 * @param props.connection
 * @param props.body Filter and search parameters for finding deposit accounts
 *   (status, balance window, customer, etc) with pagination and sort options
 * @path /shoppingMall/admin/deposits
 * @accessor api.functional.shoppingMall.admin.deposits.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and search parameters for finding deposit accounts (status,
     * balance window, customer, etc) with pagination and sort options
     */
    body: IShoppingMallDeposit.IRequest;
  };
  export type Body = IShoppingMallDeposit.IRequest;
  export type Response = IPageIShoppingMallDeposit.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/deposits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/deposits";
  export const random = (): IPageIShoppingMallDeposit.ISummary =>
    typia.random<IPageIShoppingMallDeposit.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
