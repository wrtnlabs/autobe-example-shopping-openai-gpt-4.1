import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallFavoriteProduct } from "../../../../structures/IShoppingMallFavoriteProduct";

/**
 * Retrieve a detailed favorited product by ID (shopping_mall_favorite_products
 * table).
 *
 * This endpoint retrieves detailed information about a single product favorited
 * by a user, identified by favoriteProductId. The result includes the full
 * favorite record, all meta fields (such as notification_enabled and
 * batch_label), links to the preserved product snapshot, and the original
 * product entity, if present. Security is enforced so that only the favoriting
 * user may access their own favorite records; admin access is granted for
 * support or compliance audit. The result supports review for personalization,
 * notification settings, batch labels, and export or evidence operations.
 *
 * Attempts to retrieve a favorite that does not exist, is deleted, or is not
 * owned by the user will return an error according to platform business rules.
 * The operation also integrates with downstream personalization, notification,
 * and snapshot export logic, and is part of the broader user-facing favorites
 * management suite.
 *
 * @param props.connection
 * @param props.favoriteProductId Unique identifier of the favorited product
 *   entry to retrieve
 * @path /shoppingMall/admin/favoriteProducts/:favoriteProductId
 * @accessor api.functional.shoppingMall.admin.favoriteProducts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the favorited product entry to retrieve */
    favoriteProductId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallFavoriteProduct;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/favoriteProducts/:favoriteProductId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/favoriteProducts/${encodeURIComponent(props.favoriteProductId ?? "null")}`;
  export const random = (): IShoppingMallFavoriteProduct =>
    typia.random<IShoppingMallFavoriteProduct>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteProductId")(() =>
        typia.assert(props.favoriteProductId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
