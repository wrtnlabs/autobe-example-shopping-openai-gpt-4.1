import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSeller } from "../../../../structures/IShoppingMallSeller";
import { IPageIShoppingMallSeller } from "../../../../structures/IPageIShoppingMallSeller";

/**
 * Paginated search and retrieval of shopping mall sellers (admin only,
 * shopping_mall_sellers table).
 *
 * Retrieve a paginated, filtered list of sellers registered on the shopping
 * mall platform. Sellers are vendor accounts inheriting from customers, with
 * extended fields such as approval status, profile name, section, and KYC
 * state. This endpoint is intended for use by administrators to find, audit, or
 * moderate sellers, supporting advanced business workflows, onboarding
 * approval, and compliance review.
 *
 * Security consideration: Only users with the 'admin' role can access this
 * endpoint due to the sensitivity of seller data and the need for auditability.
 * All queries are logged for compliance.
 *
 * The request structure supports flexible search—by profile name, status
 * (pending, active, suspended), KYC status, approval date range, or section
 * assignment. The response body delivers a paginated summary of all found
 * sellers, with essential metadata for list displays. Related endpoints include
 * seller detail, status change, and audit history retrieval APIs.
 *
 * Error handling ensures inappropriate access is blocked, and invalid filter
 * criteria result in structured, actionable errors.
 *
 * @param props.connection
 * @param props.body Filter, sort, and pagination options for searching sellers.
 * @path /shoppingMall/admin/sellers
 * @accessor api.functional.shoppingMall.admin.sellers.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, sort, and pagination options for searching sellers. */
    body: IShoppingMallSeller.IRequest;
  };
  export type Body = IShoppingMallSeller.IRequest;
  export type Response = IPageIShoppingMallSeller.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/sellers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/sellers";
  export const random = (): IPageIShoppingMallSeller.ISummary =>
    typia.random<IPageIShoppingMallSeller.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a given seller by ID (admin only,
 * shopping_mall_sellers table).
 *
 * Fetch detailed information for a seller account by its unique ID. The seller
 * entity extends from the base customer and contains additional fields for
 * section assignment, profile information, seller approval and status, and KYC
 * verification metadata.
 *
 * Accessible to administrators for tasks such as onboarding, suspension, audit,
 * or advanced analytics. When a seller is selected for moderation, compliance,
 * or dispute cases, this endpoint provides a point-in-time snapshot of full
 * seller state—including approval details, customer linkage, and historical
 * status tracking.
 *
 * Strict role restriction is enforced, and every access event is logged for
 * compliance. If the seller does not exist or has been removed (soft deleted),
 * an appropriate not-found or access-denied error is returned.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the target seller account.
 * @path /shoppingMall/admin/sellers/:sellerId
 * @accessor api.functional.shoppingMall.admin.sellers.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target seller account. */
    sellerId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSeller;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/sellers/:sellerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IShoppingMallSeller =>
    typia.random<IShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update seller account details, status, or section (admin only,
 * shopping_mall_sellers table).
 *
 * Update details of a seller account, identified by sellerId, with new profile
 * information, status changes, section assignment, or KYC verification
 * metadata. This operation is intended for use by administrators to perform
 * moderation, onboarding flows, suspensions, compliance review, or dispute
 * resolution on seller accounts.
 *
 * All updates are strictly audited; operation may trigger a seller snapshot for
 * rollback or legal record. Input validation ensures that status changes, KYC
 * results, and section assignments adhere to business rules, with errors
 * clearly reported for invalid attempts.
 *
 * If the seller is not found or the update is not permitted (e.g., due to
 * business constraints or entity state), the API returns a structured error
 * message with context. Related operations include seller detail retrieval and
 * index/search endpoints.
 *
 * Strict role authorization is enforced for this update path.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller to update.
 * @param props.body Updated seller profile, status, KYC, or section assignment
 *   info.
 * @path /shoppingMall/admin/sellers/:sellerId
 * @accessor api.functional.shoppingMall.admin.sellers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller to update. */
    sellerId: string & tags.Format<"uuid">;

    /** Updated seller profile, status, KYC, or section assignment info. */
    body: IShoppingMallSeller.IUpdate;
  };
  export type Body = IShoppingMallSeller.IUpdate;
  export type Response = IShoppingMallSeller;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/sellers/:sellerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): IShoppingMallSeller =>
    typia.random<IShoppingMallSeller>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (deactivate) a seller account by ID (admin only,
 * shopping_mall_sellers table).
 *
 * Permanently deactivate and logically delete a seller account specified by
 * sellerId, marking it as deleted without physical removal from the database.
 * This enforces soft deletion by setting the deleted_at field in the
 * shopping_mall_sellers table, supporting legal audit, evidence retention, and
 * later possible restoration by administrators.
 *
 * This API is reserved for administrative role actions, and all executions are
 * logged for compliance. The operation will fail if the seller does not exist
 * or has already been deleted. If related resources must be unlinked or
 * deactivated for legal reasons, this operation ensures upstream workflows are
 * triggered.
 *
 * Associated endpoints include seller retrieval, update, and search. Users with
 * insufficient permission are denied access, and every action is appended to
 * the audit and deletion event logs.
 *
 * @param props.connection
 * @param props.sellerId Unique identifier of the seller to soft-delete
 *   (deactivate).
 * @path /shoppingMall/admin/sellers/:sellerId
 * @accessor api.functional.shoppingMall.admin.sellers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the seller to soft-delete (deactivate). */
    sellerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/sellers/:sellerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/sellers/${encodeURIComponent(props.sellerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerId")(() => typia.assert(props.sellerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
