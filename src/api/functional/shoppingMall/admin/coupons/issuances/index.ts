import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCouponIssuance } from "../../../../../structures/IShoppingMallCouponIssuance";
import { IPageIShoppingMallCouponIssuance } from "../../../../../structures/IPageIShoppingMallCouponIssuance";

/**
 * Create a new issuance (assignment) for a coupon identified by couponId.
 *
 * Generates a new coupon issuance linked to the specified coupon ID. The
 * request body contains all required details about the recipient (if any),
 * issuance mode (bulk, public, one-time), validity period, and optional custom
 * meta. All business rule validations—such as per-coupon issuance caps,
 * per-user limits, eligible segmentation, and duplication checks—are enforced
 * at this step.
 *
 * The endpoint is accessed by admin roles or campaign managers who require
 * granular control over coupon distribution for marketing or customer service.
 * Side effects include notification delivery (if recipient is a customer),
 * update of analytic counters, and audit trail creation for regulatory
 * compliance.
 *
 * On error (e.g., exceeding issuance limits or failing validation), the
 * operation must return actionable business error codes. All creation attempts
 * are tracked for fraud, abuse prevention, and reporting.
 *
 * @param props.connection
 * @param props.couponId ID of the coupon to which this new issuance will be
 *   linked.
 * @param props.body Coupon issuance creation information—recipient (customerId,
 *   optional), mode, validity window, and any meta required for business
 *   rules.
 * @path /shoppingMall/admin/coupons/:couponId/issuances
 * @accessor api.functional.shoppingMall.admin.coupons.issuances.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the coupon to which this new issuance will be linked. */
    couponId: string & tags.Format<"uuid">;

    /**
     * Coupon issuance creation information—recipient (customerId,
     * optional), mode, validity window, and any meta required for business
     * rules.
     */
    body: IShoppingMallCouponIssuance.ICreate;
  };
  export type Body = IShoppingMallCouponIssuance.ICreate;
  export type Response = IShoppingMallCouponIssuance;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/coupons/:couponId/issuances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/issuances`;
  export const random = (): IShoppingMallCouponIssuance =>
    typia.random<IShoppingMallCouponIssuance>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate coupon issuances for a specified coupon.
 *
 * This operation lists all issuances of a particular coupon, providing advanced
 * filtering by issuance status, recipient (customer), time range, and other
 * relevant meta fields. It supports pagination and sorting for administrative
 * review and high-volume campaign scenarios.
 *
 * Typical users include platform administrators or campaign managers, who
 * require comprehensive tools to audit coupon allocation, monitor usage trends,
 * or investigate fraud/abuse. The operation includes security mechanisms in
 * implementation to prevent leakage of customer PII and enforces strict access
 * controls. Large-scale queries may be rate-limited for operational
 * resilience.
 *
 * Error conditions include the invalid or non-existent couponId, improper
 * search criteria, or exceeding allowable result page sizes. All access to this
 * listing is logged for platform analytics and compliance.
 *
 * @param props.connection
 * @param props.couponId The UUID of the coupon whose issuances are being
 *   listed.
 * @param props.body Complex search, filter, pagination, and sort criteria for
 *   coupon issuances linked to the specified coupon.
 * @path /shoppingMall/admin/coupons/:couponId/issuances
 * @accessor api.functional.shoppingMall.admin.coupons.issuances.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** The UUID of the coupon whose issuances are being listed. */
    couponId: string & tags.Format<"uuid">;

    /**
     * Complex search, filter, pagination, and sort criteria for coupon
     * issuances linked to the specified coupon.
     */
    body: IShoppingMallCouponIssuance.IRequest;
  };
  export type Body = IShoppingMallCouponIssuance.IRequest;
  export type Response = IPageIShoppingMallCouponIssuance;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/coupons/:couponId/issuances",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/issuances`;
  export const random = (): IPageIShoppingMallCouponIssuance =>
    typia.random<IPageIShoppingMallCouponIssuance>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific coupon issuance by coupon and issuance ID.
 *
 * Retrieve comprehensive details about a particular coupon issuance, identified
 * by issuanceId within the context of a couponId. The response includes
 * recipient customer (if present), issuance and expiration timestamps, usage
 * status, linked coupon detail, and all relevant business meta.
 *
 * This API is primarily for administrative users who need to review or manage
 * individual coupon issuance records for campaign management, dispute
 * resolution, or compliance checks. Implementation enforces robust permission
 * checks and may redact or mask sensitive customer fields for privacy.
 *
 * Common error cases include invalid or missing couponId or issuanceId, or
 * access attempts by unauthorized users. Extensive audit logging is recommended
 * for all read events to align with best practices in financial coupon
 * operations.
 *
 * @param props.connection
 * @param props.couponId The UUID of the coupon to which this issuance belongs.
 * @param props.issuanceId The UUID of the specific issuance to be retrieved.
 * @path /shoppingMall/admin/coupons/:couponId/issuances/:issuanceId
 * @accessor api.functional.shoppingMall.admin.coupons.issuances.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The UUID of the coupon to which this issuance belongs. */
    couponId: string & tags.Format<"uuid">;

    /** The UUID of the specific issuance to be retrieved. */
    issuanceId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCouponIssuance;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/coupons/:couponId/issuances/:issuanceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/issuances/${encodeURIComponent(props.issuanceId ?? "null")}`;
  export const random = (): IShoppingMallCouponIssuance =>
    typia.random<IShoppingMallCouponIssuance>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("issuanceId")(() => typia.assert(props.issuanceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing coupon issuance by coupon and issuance ID in the
 * shopping_mall_coupon_issuances table.
 *
 * This API operation allows an authorized admin or business user to update the
 * details of a coupon issuance identified by both the parent coupon ID and
 * specific issuance ID. According to the shopping_mall_coupon_issuances table,
 * this is used to correct issuance parameters such as expiration date, usage
 * cap, or issuance status after the initial assignment.
 *
 * Security is paramount, so only users with administrative or advanced business
 * privileges should be permitted to update coupon issuances, especially because
 * these changes can have direct financial or promotional impact. Request
 * payloads must be validated to ensure no duplication or invalid status
 * transitions occur, and business rules about maximum allowable changes or
 * retroactive modifications must be enforced.
 *
 * Issuance records are linked to shopping_mall_coupons (for definition),
 * shopping_mall_customers (assignment), and downstream coupon usages. The API
 * must ensure referential integrity and consistency with the coupon's business
 * logic. Auditing must be implemented to track all changes for regulatory and
 * promotional compliance.
 *
 * Related operations may include creating new coupon issuances (POST), reading
 * details (GET), or revoking an issuance (DELETE). Error handling must address
 * missing or invalid IDs, conflicts with coupon constraints, and authorization
 * issues.
 *
 * @param props.connection
 * @param props.couponId The unique identifier of the parent coupon to which
 *   this issuance belongs.
 * @param props.issuanceId The unique identifier for the specific coupon
 *   issuance record to be updated.
 * @param props.body Fields to update for the coupon issuance, such as
 *   expires_at, usage_limit, and status. Structure must match
 *   IShoppingMallCouponIssuance.IUpdate DTO.
 * @path /shoppingMall/admin/coupons/:couponId/issuances/:issuanceId
 * @accessor api.functional.shoppingMall.admin.coupons.issuances.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the parent coupon to which this issuance
     * belongs.
     */
    couponId: string & tags.Format<"uuid">;

    /**
     * The unique identifier for the specific coupon issuance record to be
     * updated.
     */
    issuanceId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the coupon issuance, such as expires_at,
     * usage_limit, and status. Structure must match
     * IShoppingMallCouponIssuance.IUpdate DTO.
     */
    body: IShoppingMallCouponIssuance.IUpdate;
  };
  export type Body = IShoppingMallCouponIssuance.IUpdate;
  export type Response = IShoppingMallCouponIssuance;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/coupons/:couponId/issuances/:issuanceId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/issuances/${encodeURIComponent(props.issuanceId ?? "null")}`;
  export const random = (): IShoppingMallCouponIssuance =>
    typia.random<IShoppingMallCouponIssuance>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("issuanceId")(() => typia.assert(props.issuanceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically delete (revoke) a coupon issuance by coupon and issuance ID from
 * the shopping_mall_coupon_issuances table.
 *
 * Through this API, an authorized admin can logically delete a specific coupon
 * issuance entity from the platform. According to the Prisma schema comments on
 * shopping_mall_coupon_issuances, the delete operation will typically set the
 * deleted_at timestamp, ensuring the record remains available for audit and
 * compliance review. Actual removal should not physically erase the row to
 * maintain evidence of all coupon activities.
 *
 * This is essential for cases such as mistakenly issued coupons, revoked
 * promotions, or correcting business errors. The system must enforce
 * referential integrity, preventing the deletion of issuances that have already
 * been redeemed or are linked to ongoing promotional analytics where deletion
 * could affect reporting.
 *
 * Error handling must address missing or invalid coupon IDs, non-existent or
 * already-deleted issuance records, and attempts to delete issuances that do
 * not satisfy business rules for revocation. Proper audit logs are to be
 * generated for each execution of this operation.
 *
 * Authorization is restricted to admin users, and related operations include
 * reading (GET), updating (PUT), and creating (POST) coupon issuances.
 * Soft-delete strategy is enforced for audit integrity.
 *
 * @param props.connection
 * @param props.couponId The unique identifier of the coupon to which the
 *   issuance belongs.
 * @param props.issuanceId The unique identifier for the specific coupon
 *   issuance record to be deleted.
 * @path /shoppingMall/admin/coupons/:couponId/issuances/:issuanceId
 * @accessor api.functional.shoppingMall.admin.coupons.issuances.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the coupon to which the issuance belongs. */
    couponId: string & tags.Format<"uuid">;

    /**
     * The unique identifier for the specific coupon issuance record to be
     * deleted.
     */
    issuanceId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/coupons/:couponId/issuances/:issuanceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}/issuances/${encodeURIComponent(props.issuanceId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.param("issuanceId")(() => typia.assert(props.issuanceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
