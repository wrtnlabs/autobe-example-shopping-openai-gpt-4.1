import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCoupon } from "../../../../structures/IShoppingMallCoupon";
import { IPageIShoppingMallCoupon } from "../../../../structures/IPageIShoppingMallCoupon";
export * as issuances from "./issuances/index";

/**
 * Create a new coupon definition (Post, shopping_mall_coupons).
 *
 * Insert a new coupon into the shopping mall's coupon system. The request body
 * follows the IShoppingMallCoupon.ICreate DTO matching the
 * shopping_mall_coupons table structure, including all policy configuration,
 * targeting, stackable/exclusive logic, usage caps, validity period, and
 * descriptive meta fields for campaign or individual usage.
 *
 * Business rules enforce unique code, proper stack/exclusive flags, and all
 * validation on required fields and discount configuration. The operation is
 * available only to admin or seller accounts with appropriate privileges. Upon
 * success, the API returns the complete coupon resource as created. Errors are
 * returned for invalid input, code collisions, or insufficient permissions. An
 * audit snapshot is created for legal/compliance traceability.
 *
 * @param props.connection
 * @param props.body Information for new coupon creation, including code,
 *   discount properties, targeting, stack/exclusivity, issuance limits, and
 *   validity period.
 * @path /shoppingMall/admin/coupons
 * @accessor api.functional.shoppingMall.admin.coupons.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information for new coupon creation, including code, discount
     * properties, targeting, stack/exclusivity, issuance limits, and
     * validity period.
     */
    body: IShoppingMallCoupon.ICreate;
  };
  export type Body = IShoppingMallCoupon.ICreate;
  export type Response = IShoppingMallCoupon;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/coupons";
  export const random = (): IShoppingMallCoupon =>
    typia.random<IShoppingMallCoupon>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and filter shopping mall coupons with advanced criteria (Patch,
 * shopping_mall_coupons).
 *
 * Retrieve a paginated and filterable list of coupons defined in the shopping
 * mall system. This operation references the shopping_mall_coupons table,
 * supporting selection by code, type (public, private, one-time), discount
 * type, stackability, exclusivity, min/max order amounts, status (active,
 * expired, draft), and issuance/usage statistics.
 *
 * Intended for administrative and seller roles managing promotions, targeting,
 * audit, or campaign effectiveness. Highly granular search enables easy
 * analysis and monitoring of promotional campaigns across all or segmented
 * business contexts.
 *
 * Security requires the requesting user to have admin or seller privileges in
 * the platform. Pagination and sorting supported for efficient UI and analytics
 * display. Response delivers a page encapsulating summary data for matching
 * coupons, including key identifiers and basic promotional characteristics.
 * Error handling covers invalid filter parameters, overbroad searches, and
 * permission issues.
 *
 * @param props.connection
 * @param props.body Advanced search/request parameters for coupon retrieval,
 *   including filters, pagination, and sort options.
 * @path /shoppingMall/admin/coupons
 * @accessor api.functional.shoppingMall.admin.coupons.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Advanced search/request parameters for coupon retrieval, including
     * filters, pagination, and sort options.
     */
    body: IShoppingMallCoupon.IRequest;
  };
  export type Body = IShoppingMallCoupon.IRequest;
  export type Response = IPageIShoppingMallCoupon.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/coupons";
  export const random = (): IPageIShoppingMallCoupon.ISummary =>
    typia.random<IPageIShoppingMallCoupon.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a single coupon by ID (Get,
 * shopping_mall_coupons).
 *
 * Return the full set of attributes and configuration details for a single
 * coupon in the shopping mall backend. References the shopping_mall_coupons
 * table, allowing authorized admin or seller roles to inspect code, title,
 * description, coupon type, discount logic, eligibility, stack/exclusive flags,
 * usage and issuance caps, dates, business status, targeting, and analytics
 * fields.
 *
 * Security requires the user to be an admin or seller with appropriate
 * permissions. Used for campaign effectiveness review, business rule
 * validation, or auditing promotional logic. Returns rich detail, supporting
 * both operational and compliance needs.
 *
 * If the couponId does not exist, or access is not permitted for the current
 * user/role, an error indicating 'not found' or 'forbidden' will be returned.
 *
 * @param props.connection
 * @param props.couponId Unique identifier of the coupon to retrieve.
 * @path /shoppingMall/admin/coupons/:couponId
 * @accessor api.functional.shoppingMall.admin.coupons.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the coupon to retrieve. */
    couponId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCoupon;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IShoppingMallCoupon =>
    typia.random<IShoppingMallCoupon>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing coupon definition by ID (Put, shopping_mall_coupons).
 *
 * Modify a coupon resource by its unique ID, providing all fields allowed for
 * update on the shopping_mall_coupons table according to business and campaign
 * rules. The IShoppingMallCoupon.IUpdate request body provides the full
 * configuration scope, including stackable/exclusive, targeting, discount
 * logic, usage/issuance settings, status, and descriptive/campaign meta.
 *
 * Intended exclusively for admin or seller roles with sufficient privileges.
 * Any changes are validated for correctness and business logic adherence,
 * including uniqueness for code and proper numerical bounds. Operation ensures
 * audit record and compliance chain for all mutations.
 *
 * If the couponId does not match any existing record, a not found error is
 * returned. Permission denial triggers forbidden errors. Validation failures
 * (e.g., invalid stack/exclusive conflict, illegal discount type, out-of-bound
 * parameters) result in error responses with field-level feedback. On success,
 * returns the fully updated coupon resource.
 *
 * @param props.connection
 * @param props.couponId ID of the coupon to update.
 * @param props.body Update fields for target coupon definition (discount
 *   policy, duration, stack/exclusive, campaign meta, etc).
 * @path /shoppingMall/admin/coupons/:couponId
 * @accessor api.functional.shoppingMall.admin.coupons.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the coupon to update. */
    couponId: string & tags.Format<"uuid">;

    /**
     * Update fields for target coupon definition (discount policy,
     * duration, stack/exclusive, campaign meta, etc).
     */
    body: IShoppingMallCoupon.IUpdate;
  };
  export type Body = IShoppingMallCoupon.IUpdate;
  export type Response = IShoppingMallCoupon;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/coupons/:couponId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IShoppingMallCoupon =>
    typia.random<IShoppingMallCoupon>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically delete a coupon, preserving it for compliance and audit purposes.
 *
 * Delete (logically, via soft-delete) a coupon record identified by its unique
 * couponId. This operation updates the deleted_at timestamp to preserve the
 * coupon for compliance and audit, while making it inactive and unavailable for
 * issuance or redemption in business logic.
 *
 * Permission to erase a coupon is strictly limited to administrator roles, as
 * deleting a coupon can impact active campaign integrity, user analytics, and
 * ongoing orders referencing the coupon. Attempts to delete a coupon in use or
 * participating in an active campaign should be validated in provider logic,
 * with business rules enforcing safe removal protocols.
 *
 * Errors in this operation may occur if the specified coupon does not exist, is
 * already deleted, or business rules preclude its deletion (e.g., active usage,
 * campaign dependency). All such attempts are logged with detailed rejection
 * reasons for compliance tracking.
 *
 * @param props.connection
 * @param props.couponId Unique identifier of the coupon to delete.
 * @path /shoppingMall/admin/coupons/:couponId
 * @accessor api.functional.shoppingMall.admin.coupons.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the coupon to delete. */
    couponId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
