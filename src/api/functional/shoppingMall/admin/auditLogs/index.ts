import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAuditLog } from "../../../../structures/IShoppingMallAuditLog";
import { IPageIShoppingMallAuditLog } from "../../../../structures/IPageIShoppingMallAuditLog";

/**
 * Search system audit logs (shopping_mall_audit_logs) with advanced, paginated
 * filters for compliance tracing.
 *
 * Retrieve a filtered, paginated view of all business event and system audit
 * logs for the shopping mall backend. This operation leverages advanced
 * filters, allowing for queries by entity_type (such as order, product,
 * customer, etc.), entity_id, event_type (create, update, delete,
 * permission_granted, etc.), actor_id (who performed the action), event result,
 * and reference to associated snapshot records.
 *
 * The endpoint supports audit, compliance, and operational tracing – essential
 * for legal evidence, security monitoring, and business workflow validation.
 * Access to audit logs is restricted to administrators, as logs may reference
 * sensitive operational or user data. Large result volumes are returned via a
 * standard pagination pattern for performance and scalability.
 *
 * This operation works over the 'shopping_mall_audit_logs' table as defined in
 * the Snapshots schema. It is closely related to entity snapshot operations
 * (PATCH /entitySnapshots) and provides event-level traceability across the
 * platform. Error handling includes permission checks, invalid filter criteria,
 * and malformed queries.
 *
 * @param props.connection
 * @param props.body Audit log search and pagination criteria.
 * @path /shoppingMall/admin/auditLogs
 * @accessor api.functional.shoppingMall.admin.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Audit log search and pagination criteria. */
    body: IShoppingMallAuditLog.IRequest;
  };
  export type Body = IShoppingMallAuditLog.IRequest;
  export type Response = IPageIShoppingMallAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/auditLogs";
  export const random = (): IPageIShoppingMallAuditLog =>
    typia.random<IPageIShoppingMallAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full detailed context for a system audit log record
 * (shopping_mall_audit_logs).
 *
 * Retrieve complete event detail for a specific audit log entry in the shopping
 * mall platform’s system. This operation queries the shopping_mall_audit_logs
 * Prisma schema table, covering all aspects of the target event: linked entity
 * (entity_type, entity_id), actor_id, event_type, event_result, event_message,
 * associated snapshot reference, and time/event audit metadata.
 *
 * This endpoint is secured for administrative use only, as audit log data may
 * reveal sensitive operational or security-related information. It is essential
 * for incident investigation, legal compliance requests, and thorough
 * validation of system integrity or business rule enforcement.
 *
 * The endpoint is intended for use alongside the general audit log search
 * endpoint, enabling system administrators or compliance officers to drill down
 * to the root cause or context of significant business system events. Error
 * responses include not found, forbidden access, or invalid auditLogId.
 *
 * @param props.connection
 * @param props.auditLogId Unique identifier for the desired audit log event.
 * @path /shoppingMall/admin/auditLogs/:auditLogId
 * @accessor api.functional.shoppingMall.admin.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the desired audit log event. */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): IShoppingMallAuditLog =>
    typia.random<IShoppingMallAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
