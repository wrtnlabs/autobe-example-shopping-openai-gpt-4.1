import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallMileageTransaction } from "../../../../../structures/IShoppingMallMileageTransaction";
import { IPageIShoppingMallMileageTransaction } from "../../../../../structures/IPageIShoppingMallMileageTransaction";

/**
 * Create a new mileage transaction for a given mileage account
 * (shopping_mall_mileages).
 *
 * Create a new transaction for an existing mileage account
 * (shopping_mall_mileages) belonging to a customer. This API writes a row in
 * shopping_mall_mileage_transactions and is used when users accrue, spend,
 * receive bonuses, or have miles expire. The API validates sufficient balance
 * for spending/expiration, enforces constraints for transaction type (e.g., no
 * accrual for frozen accounts), and records the business reason (campaign,
 * purchase, refund, manual, etc.). The action is fully auditable, with a new
 * transaction created for every mutation, never overwriting previous
 * transactions. If the operation is successful, updated mileage and a reference
 * to the transaction are returned. The API enforces role-based permissions:
 * only the account owner or an admin may create a transaction, and audit logs
 * are generated for compliance. Edge cases, such as attempts to spend more than
 * the available balance, are rejected with descriptive errors. Related APIs
 * include PUT for transaction update and DELETE for transaction
 * cancellation/reversal. All values respect regulatory and promotional rules
 * linked to the account type.
 *
 * @param props.connection
 * @param props.mileageId The unique identifier of the target mileage account
 *   for which the transaction is being created.
 * @param props.body Payload describing the type, amount, business context, and
 *   reference IDs for the new mileage transaction. Follows the
 *   IShoppingMallMileageTransaction.ICreate DTO specification.
 * @path /shoppingMall/admin/mileages/:mileageId/transactions
 * @accessor api.functional.shoppingMall.admin.mileages.transactions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The unique identifier of the target mileage account for which the
     * transaction is being created.
     */
    mileageId: string & tags.Format<"uuid">;

    /**
     * Payload describing the type, amount, business context, and reference
     * IDs for the new mileage transaction. Follows the
     * IShoppingMallMileageTransaction.ICreate DTO specification.
     */
    body: IShoppingMallMileageTransaction.ICreate;
  };
  export type Body = IShoppingMallMileageTransaction.ICreate;
  export type Response = IShoppingMallMileageTransaction;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/mileages/:mileageId/transactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/mileages/${encodeURIComponent(props.mileageId ?? "null")}/transactions`;
  export const random = (): IShoppingMallMileageTransaction =>
    typia.random<IShoppingMallMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and filter all transactions for a specific mileage (loyalty/point)
 * account using shopping_mall_mileage_transactions table.
 *
 * Retrieve the full or filtered transaction history for a given mileage account
 * (UUID), as recorded in the shopping_mall_mileage_transactions table. This
 * includes accrual, redemption, expiry, adjustments, and donation/bonus
 * transactions, all tied to the mileage account as per the schema.
 *
 * The operation supports complex filtering (e.g., transaction type, status,
 * date ranges), sorting (by date or amount), and standard pagination (page/size
 * parameters) to allow users or administrators to browse both recent and
 * historic transactions. Security and authorization ensure only account owners
 * or authorized admins may view the data, which may contain sensitive financial
 * or loyalty information.
 *
 * Business logic in this operation enforces strict visibility: customers can
 * only see their own mileage transactions, while admins may access broader
 * histories for support, audit, or compliance. Transactions are immutable and
 * provide evidence-grade history for audit trails, dispute resolution, or bonus
 * calculation. All responses comply with data privacy and retention rules.
 *
 * @param props.connection
 * @param props.mileageId UUID of the mileage account for which transactions are
 *   listed.
 * @param props.body Filtering, pagination, and sorting criteria for listing
 *   mileage transactions.
 * @path /shoppingMall/admin/mileages/:mileageId/transactions
 * @accessor api.functional.shoppingMall.admin.mileages.transactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the mileage account for which transactions are listed. */
    mileageId: string & tags.Format<"uuid">;

    /**
     * Filtering, pagination, and sorting criteria for listing mileage
     * transactions.
     */
    body: IShoppingMallMileageTransaction.IRequest;
  };
  export type Body = IShoppingMallMileageTransaction.IRequest;
  export type Response = IPageIShoppingMallMileageTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/mileages/:mileageId/transactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/mileages/${encodeURIComponent(props.mileageId ?? "null")}/transactions`;
  export const random = (): IPageIShoppingMallMileageTransaction =>
    typia.random<IPageIShoppingMallMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a single mileage transaction record from
 * shopping_mall_mileage_transactions table.
 *
 * Get the complete details of a single mileage (loyalty/point) transaction for
 * a specific mileage account, using both the account UUID and transaction UUID.
 * The operation pulls from the shopping_mall_mileage_transactions table and
 * ensures that access is restricted to only account owners or authorized
 * administrators.
 *
 * Business rules strictly enforce that a user cannot access transactions
 * outside their own account, while administrators can retrieve any transaction
 * for support/audit. Standard validation is applied to confirm both IDs are
 * valid and related. This endpoint is useful for customers reviewing their
 * point activity or for support/finance resolving disputes.
 *
 * Information returned includes the full transaction record: transaction type
 * (accrual, spend, adjustment, etc.), amount, status, timestamps, business
 * reason, evidence_reference, and any related order. All access is logged for
 * privacy and compliance.
 *
 * @param props.connection
 * @param props.mileageId UUID of the parent mileage account.
 * @param props.transactionId UUID of the specific transaction to retrieve.
 * @path /shoppingMall/admin/mileages/:mileageId/transactions/:transactionId
 * @accessor api.functional.shoppingMall.admin.mileages.transactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the parent mileage account. */
    mileageId: string & tags.Format<"uuid">;

    /** UUID of the specific transaction to retrieve. */
    transactionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallMileageTransaction;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/mileages/:mileageId/transactions/:transactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/mileages/${encodeURIComponent(props.mileageId ?? "null")}/transactions/${encodeURIComponent(props.transactionId ?? "null")}`;
  export const random = (): IShoppingMallMileageTransaction =>
    typia.random<IShoppingMallMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
      assert.param("transactionId")(() => typia.assert(props.transactionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing mileage transaction record by transactionId.
 *
 * Update an existing transaction for a user's mileage account
 * (shopping_mall_mileages and shopping_mall_mileage_transactions). This API is
 * typically used for administrative or error-correction purposes—updating
 * status, reason, or evidence—but does not allow changing core event amounts or
 * types after finalization. Validations prevent update of finalized or expired
 * transactions. When a transaction is updated, a snapshot of the previous state
 * is kept for compliance, traceability, and rollback. The operation provides
 * descriptive error messages if the transaction is locked or if fields are
 * immutable. Success returns the updated transaction. The action is permitted
 * for admins or, in certain cases, for the customer by business policy.
 *
 * @param props.connection
 * @param props.mileageId The unique identifier of the mileage account to which
 *   the transaction belongs.
 * @param props.transactionId The unique identifier of the transaction to
 *   update.
 * @param props.body Update payload for the mileage transaction. Follows
 *   IShoppingMallMileageTransaction.IUpdate structure; only mutable fields may
 *   be updated.
 * @path /shoppingMall/admin/mileages/:mileageId/transactions/:transactionId
 * @accessor api.functional.shoppingMall.admin.mileages.transactions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the mileage account to which the transaction
     * belongs.
     */
    mileageId: string & tags.Format<"uuid">;

    /** The unique identifier of the transaction to update. */
    transactionId: string & tags.Format<"uuid">;

    /**
     * Update payload for the mileage transaction. Follows
     * IShoppingMallMileageTransaction.IUpdate structure; only mutable
     * fields may be updated.
     */
    body: IShoppingMallMileageTransaction.IUpdate;
  };
  export type Body = IShoppingMallMileageTransaction.IUpdate;
  export type Response = IShoppingMallMileageTransaction;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/mileages/:mileageId/transactions/:transactionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/mileages/${encodeURIComponent(props.mileageId ?? "null")}/transactions/${encodeURIComponent(props.transactionId ?? "null")}`;
  export const random = (): IShoppingMallMileageTransaction =>
    typia.random<IShoppingMallMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
      assert.param("transactionId")(() => typia.assert(props.transactionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically delete (soft delete or reverse) a mileage transaction by its
 * transactionId for a mileage account.
 *
 * Erase (soft delete or reverse) a mileage transaction for a specified mileage
 * account. This operation marks the transaction as deleted using the deleted_at
 * column, without removing data from the database, to meet audit and compliance
 * requirements. The operation is accessible only to administrators or elevated
 * permission roles. Customers may only request deletion, which triggers an
 * admin review. Attempts to erase finalized or non-existent transactions will
 * result in a detailed error. Audit logs of reversal or deletion are created,
 * and regulatory holds are checked when applicable. No response body is
 * returned on success.
 *
 * @param props.connection
 * @param props.mileageId The unique identifier of the mileage account
 *   containing the transaction.
 * @param props.transactionId The unique identifier of the transaction to be
 *   erased (soft deleted/reversed).
 * @path /shoppingMall/admin/mileages/:mileageId/transactions/:transactionId
 * @accessor api.functional.shoppingMall.admin.mileages.transactions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier of the mileage account containing the
     * transaction.
     */
    mileageId: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the transaction to be erased (soft
     * deleted/reversed).
     */
    transactionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/mileages/:mileageId/transactions/:transactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/mileages/${encodeURIComponent(props.mileageId ?? "null")}/transactions/${encodeURIComponent(props.transactionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
      assert.param("transactionId")(() => typia.assert(props.transactionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
