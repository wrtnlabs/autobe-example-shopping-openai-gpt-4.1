import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallDelivery } from "../../../../../structures/IShoppingMallDelivery";
import { IPageIShoppingMallDelivery } from "../../../../../structures/IPageIShoppingMallDelivery";

/**
 * Search and paginate deliveries associated with an order
 * (shopping_mall_deliveries table).
 *
 * Search and paginate deliveries (delivery windows/address records) for a
 * specific order. This is required for tracking multi-shipment orders, split
 * deliveries, and for enabling users to monitor overall delivery status on
 * complex orders.
 *
 * Advanced search filters—by status, shipmentId, recipient name, or time
 * period—are supported. Pagination allows efficient retrieval even for orders
 * with many delivery records (e.g., large B2B orders or split/partial
 * shipments). Security filters are applied: customers can view their own
 * orders, sellers can access deliveries related to their own goods, and admins
 * have global access.
 *
 * Returned fields include recipient information (with privacy controls),
 * delivery status, timing info, snapshot address as at delivery time, shipment
 * references, and any delivery messages (special instructions). The operation
 * is linked to after-sales workflows (returns/exchanges initiated from
 * delivered items) and audit/evidence modules for compliance. All search
 * parameters and response structures align with the shopping_mall_deliveries
 * schema.
 *
 * Related APIs include list/search of shipments for an order and detailed
 * delivery view (GET /orders/{orderId}/deliveries/{deliveryId}). Errors include
 * insufficient permission, non-existent order, or invalid filter parameters.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order for which deliveries are
 *   queried.
 * @param props.body Search filters, sorting, and pagination parameters for
 *   querying deliveries within an order.
 * @path /shoppingMall/admin/orders/:orderId/deliveries
 * @accessor api.functional.shoppingMall.admin.orders.deliveries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the order for which deliveries are queried. */
    orderId: string & tags.Format<"uuid">;

    /**
     * Search filters, sorting, and pagination parameters for querying
     * deliveries within an order.
     */
    body: IShoppingMallDelivery.IRequest;
  };
  export type Body = IShoppingMallDelivery.IRequest;
  export type Response = IPageIShoppingMallDelivery.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/orders/:orderId/deliveries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries`;
  export const random = (): IPageIShoppingMallDelivery.ISummary =>
    typia.random<IPageIShoppingMallDelivery.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a delivery for a specific order and deliveryId
 * (shopping_mall_deliveries table).
 *
 * Retrieve full details for a single delivery associated with an order. This
 * allows users to view address snapshot, recipient info, timing info, delivery
 * status, and evidence of the delivery event.
 *
 * Security is enforced to ensure only permitted actors may access delivery
 * data: customers are restricted to their own orders, sellers to their own
 * items, admins are unrestricted. The endpoint is essential for end-user
 * delivery tracking, support workflows (post-delivery disputes, after-sales
 * actions), and for building comprehensive audit trails.
 *
 * The response includes all shopping_mall_deliveries columns, including
 * address, recipient, delivery status, shipment associations, delivery
 * messages, confirmation state, and snapshot linkage for full evidentiary
 * support. Related APIs are the delivery list/search for an order, shipment
 * batching endpoints, and after-sales service initiation operations
 * (returns/exchanges). Error handling covers not found (invalid ID), permission
 * errors, and order-delivery mismatch scenarios. The API supports
 * internationalization and privacy controls for address and contact fields.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order.
 * @param props.deliveryId Unique identifier of the delivery record attached to
 *   the order.
 * @path /shoppingMall/admin/orders/:orderId/deliveries/:deliveryId
 * @accessor api.functional.shoppingMall.admin.orders.deliveries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the delivery record attached to the order. */
    deliveryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallDelivery;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/orders/:orderId/deliveries/:deliveryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): IShoppingMallDelivery =>
    typia.random<IShoppingMallDelivery>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
