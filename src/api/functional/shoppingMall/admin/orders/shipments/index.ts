import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallShipment } from "../../../../../structures/IShoppingMallShipment";
import { IPageIShoppingMallShipment } from "../../../../../structures/IPageIShoppingMallShipment";
export * as items from "./items/index";

/**
 * Register a new shipment batch for an order in shopping_mall_shipments.
 *
 * An authenticated seller (responsible for fulfillment of items in a given
 * order) or an admin can use this operation to create/register a new shipment
 * record for an order, such as for partial shipments or multi-phase deliveries.
 * The input must include detailed batch and fulfillment data: seller, carrier,
 * items, tracking code, and relevant timestamps. The system validates that the
 * order is eligible for shipment, and enforces permissions so that sellers can
 * create shipments only for items they manage.
 *
 * Upon successful creation, a new shipment row is recorded to
 * shopping_mall_shipments, with all initial fulfillment metadata. Downstream
 * modules (delivery, after-sales, analytics) can then be triggered. The
 * endpoint returns the full created shipment record, or appropriate error
 * details if business rules are violated (e.g., unauthorized, order state,
 * assignment mismatch, missing required fields). This endpoint is central to
 * complex fulfillment workflows such as multi-seller, split, or staged delivery
 * scenarios.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order for which shipment is
 *   being created
 * @param props.body Full creation information for the order shipment batch
 *   (seller, carrier, items, tracking info, meta)
 * @path /shoppingMall/admin/orders/:orderId/shipments
 * @accessor api.functional.shoppingMall.admin.orders.shipments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the order for which shipment is being created */
    orderId: string & tags.Format<"uuid">;

    /**
     * Full creation information for the order shipment batch (seller,
     * carrier, items, tracking info, meta)
     */
    body: IShoppingMallShipment.ICreate;
  };
  export type Body = IShoppingMallShipment.ICreate;
  export type Response = IShoppingMallShipment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/orders/:orderId/shipments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments`;
  export const random = (): IShoppingMallShipment =>
    typia.random<IShoppingMallShipment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated list of shipment batches for a specific order from
 * shopping_mall_shipments.
 *
 * This endpoint allows an authenticated user (customer, seller, or admin) to
 * retrieve a paginated and optionally filtered set of all shipment records for
 * a given order (identified by orderId).
 *
 * Security permissions are enforced such that only actors with legitimate
 * access to the specified order can view its shipments. Customers can access
 * only their own orders, sellers only their handled items, and admins have
 * global access. The operation returns shipment summaries including status,
 * tracking numbers, delivery windows, seller info, and per-shipment analytics.
 * Detailed filtering options enable users to analyze fulfillment performance,
 * identify delays, or reconcile after-sales disputes.
 *
 * The operation is tightly coupled with the shopping_mall_shipments database
 * model, and supports integration with delivery and after-sales modules. Errors
 * such as unauthorized access or invalid orderId are handled with appropriate
 * status codes and audit logging. Results are returned as paginated collections
 * for performance, and may be used together with shipment detail views or
 * shipment update endpoints as part of a full order management workflow.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order to get shipments
 *   for
 * @param props.body Search and filter options for shipment records, as well as
 *   pagination and sorting controls
 * @path /shoppingMall/admin/orders/:orderId/shipments
 * @accessor api.functional.shoppingMall.admin.orders.shipments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target order to get shipments for */
    orderId: string & tags.Format<"uuid">;

    /**
     * Search and filter options for shipment records, as well as pagination
     * and sorting controls
     */
    body: IShoppingMallShipment.IRequest;
  };
  export type Body = IShoppingMallShipment.IRequest;
  export type Response = IPageIShoppingMallShipment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/orders/:orderId/shipments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments`;
  export const random = (): IPageIShoppingMallShipment.ISummary =>
    typia.random<IPageIShoppingMallShipment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information on a specific order shipment
 * (shopping_mall_shipments).
 *
 * This endpoint provides granular shipment details for a specified shipmentId
 * within its parent order (orderId). It enforces strong security so that only
 * stakeholders associated with the order (customer, assigned seller, admin) may
 * retrieve the detail.
 *
 * The returned record includes the shipmentâ€™s status, all associated shipment
 * items, carrier/tracking links, timestamps for status transitions (requested,
 * shipped, delivered, etc), seller identity, and analytics/meta. Error handling
 * covers not-found, not-belonging-to-order, or unauthorized access cases. This
 * endpoint supports logistics traceability, customer inquiry response, and
 * after-sales case management. The result is primarily consumed in shipment
 * detail views and order history pages.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order that includes the
 *   specified shipment
 * @param props.shipmentId Unique identifier for the shipment batch to retrieve
 * @path /shoppingMall/admin/orders/:orderId/shipments/:shipmentId
 * @accessor api.functional.shoppingMall.admin.orders.shipments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the order that includes the specified shipment */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier for the shipment batch to retrieve */
    shipmentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallShipment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/orders/:orderId/shipments/:shipmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments/${encodeURIComponent(props.shipmentId ?? "null")}`;
  export const random = (): IShoppingMallShipment =>
    typia.random<IShoppingMallShipment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("shipmentId")(() => typia.assert(props.shipmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update shipment batch details for specific order shipment in
 * shopping_mall_shipments.
 *
 * This endpoint enables the updating of a shipment batch within an order. It is
 * available to the responsible seller or system administrator. Supported
 * updates include shipping carrier, tracking codes, fulfillment status,
 * shipment items, and delivery info. The system enforces that only the
 * authorized actor can perform updates and that the shipmentId actually belongs
 * to the specified orderId.
 *
 * Immutable fields (IDs, seller) cannot be changed. Errors are returned if
 * unauthorized, if the shipment cannot be updated due to business or audit
 * rules (e.g., already delivered, locked by dispute), or if the supplied data
 * is incomplete. All changes are snapshotted for subsequent audit, dispute, and
 * compliance access. Success returns the updated shipment entity; failures
 * return error details, with relevant business and security context.
 *
 * This operation is a key part of order fulfillment, shipping event tracking,
 * and after-sales management workflows.
 *
 * @param props.connection
 * @param props.orderId Unique identifier for the order containing the shipment
 * @param props.shipmentId Unique identifier for the shipment batch to update
 * @param props.body Update information for the shipment batch (status,
 *   tracking, items, carrier, meta)
 * @path /shoppingMall/admin/orders/:orderId/shipments/:shipmentId
 * @accessor api.functional.shoppingMall.admin.orders.shipments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the order containing the shipment */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier for the shipment batch to update */
    shipmentId: string & tags.Format<"uuid">;

    /**
     * Update information for the shipment batch (status, tracking, items,
     * carrier, meta)
     */
    body: IShoppingMallShipment.IUpdate;
  };
  export type Body = IShoppingMallShipment.IUpdate;
  export type Response = IShoppingMallShipment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/orders/:orderId/shipments/:shipmentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments/${encodeURIComponent(props.shipmentId ?? "null")}`;
  export const random = (): IShoppingMallShipment =>
    typia.random<IShoppingMallShipment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("shipmentId")(() => typia.assert(props.shipmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically delete (soft delete) a specific shipment belonging to an order.
 * Associated with shopping_mall_shipments and shopping_mall_orders.
 *
 * This API operation allows an authorized user to logically delete (soft
 * delete) a shipment associated with an order. The endpoint sets the deleted_at
 * field on the targeted shipment record but does not physically remove the
 * data, in full alignment with compliance, audit, and system evidence
 * requirements defined in the shopping_mall_shipments Prisma schema.
 *
 * Only authenticated users with proper permissions can execute this operation,
 * typically sellers responsible for the shipment, or administrators overseeing
 * the order. Business rules are enforcedâ€”shipments may only be deleted if not
 * yet shipped or in certain cancelable states; attempts to delete active,
 * shipping, or delivered shipments should be blocked, with error feedback
 * returned detailing the violation. When a shipment with associated shipment
 * items is deleted, those items are not deleted but their relationships are
 * preserved for auditability.
 *
 * For comprehensive audit, the system also records the deletion event in
 * compliance logs. Related endpoints include shipment creation, update,
 * listing, and retrieval; updates or deletions will reflect in order
 * fulfillment progress. Error cases include attempts to delete non-existent
 * shipments, already-deleted shipments, or shipments not tied to the specified
 * order.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order containing the
 *   shipment.
 * @param props.shipmentId Unique identifier of the shipment to be deleted
 *   logically.
 * @path /shoppingMall/admin/orders/:orderId/shipments/:shipmentId
 * @accessor api.functional.shoppingMall.admin.orders.shipments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target order containing the shipment. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the shipment to be deleted logically. */
    shipmentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/orders/:orderId/shipments/:shipmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments/${encodeURIComponent(props.shipmentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("shipmentId")(() => typia.assert(props.shipmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
