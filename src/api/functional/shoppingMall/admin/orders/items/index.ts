import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderItem } from "../../../../../structures/IShoppingMallOrderItem";
import { IPageIShoppingMallOrderItem } from "../../../../../structures/IPageIShoppingMallOrderItem";

/**
 * Add a new item to an existing shopping mall order
 * (shopping_mall_order_items).
 *
 * Use this endpoint to append a new item to an existing order before the order
 * is finalized and processed for fulfillment. It requires the orderId as a path
 * parameter and expects a request body conforming to
 * IShoppingMallOrderItem.ICreate, defining the product, optional variant,
 * quantity, pricing, and discount snapshot information.
 *
 * The operation enforces business logic to prevent addition once an order has
 * reached a non-editable state (e.g., after shipping/fulfillment). It verifies
 * that the selected product and variant are valid for the specified order
 * context (e.g., available in the order's channel, not discontinued, within
 * stock constraints) before item creation. The order and its customer, seller,
 * and channel context are cross-checked.
 *
 * Authorization checks ensure that only users with the correct relationship to
 * the order (customer who placed it, seller fulfilling it, or admin) may add
 * items. Security controls, order status validation, and audit trail
 * integration are implemented as per shopping_mall_orders and
 * shopping_mall_order_items table comments. If successful, returns the newly
 * created order item.
 *
 * Relevant errors include status transition violations, stock or eligibility
 * failures, or access control denial.
 *
 * @param props.connection
 * @param props.orderId Target order's unique identifier (UUID)
 * @param props.body Details of the order item to create, including product,
 *   quantity, variant, price, and discount snapshot
 * @path /shoppingMall/admin/orders/:orderId/items
 * @accessor api.functional.shoppingMall.admin.orders.items.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target order's unique identifier (UUID) */
    orderId: string & tags.Format<"uuid">;

    /**
     * Details of the order item to create, including product, quantity,
     * variant, price, and discount snapshot
     */
    body: IShoppingMallOrderItem.ICreate;
  };
  export type Body = IShoppingMallOrderItem.ICreate;
  export type Response = IShoppingMallOrderItem;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/orders/:orderId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items`;
  export const random = (): IShoppingMallOrderItem =>
    typia.random<IShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List all items for a specific shopping mall order with filtering, pagination,
 * and sorting.
 *
 * This API returns a paginated, filterable list of order items for a given
 * order, identified by its order ID. It is used to provide detailed breakdowns
 * of ordered products, their statuses, quantities, pricing, and discount
 * snapshot details as defined in the shopping_mall_order_items schema. Each
 * order item is linked to a product, variant, and fulfillment logic.
 *
 * The request body supports complex filtering (e.g., by status, product ID),
 * including pagination and sorting of results for user interfaces. Permissions
 * are enforced so that only authorized users (order owners or privileged staff)
 * can access item details for a given order.
 *
 * All fields in the response follow the schema comments: unit_price,
 * final_price, discount_snapshot, and status. The operation does not expose
 * deleted or inaccessible items and is optimized for audit/compliance
 * traceability. Error handling ensures that requests to non-existent or
 * restricted orders return clear feedback.
 *
 * @param props.connection
 * @param props.orderId The order ID to retrieve items for. Must be a valid UUID
 *   of an existing order.
 * @param props.body Filtering, pagination, and sort criteria for retrieving
 *   order items.
 * @path /shoppingMall/admin/orders/:orderId/items
 * @accessor api.functional.shoppingMall.admin.orders.items.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The order ID to retrieve items for. Must be a valid UUID of an
     * existing order.
     */
    orderId: string & tags.Format<"uuid">;

    /** Filtering, pagination, and sort criteria for retrieving order items. */
    body: IShoppingMallOrderItem.IRequest;
  };
  export type Body = IShoppingMallOrderItem.IRequest;
  export type Response = IPageIShoppingMallOrderItem;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/orders/:orderId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items`;
  export const random = (): IPageIShoppingMallOrderItem =>
    typia.random<IPageIShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a specific shopping mall order item by
 * orderId/itemId.
 *
 * This endpoint fetches detailed information about a specific order item
 * belonging to a particular order. Based on the shopping_mall_order_items
 * schema, the operation delivers all key business fields (product linkage,
 * quantity, price, discount snapshot, status, audit fields, etc.) and relates
 * them with the parent order, seller, and product as required for business
 * logic and compliance.
 *
 * Permission and access-level checks ensure that only users who own the order
 * or staff with the appropriate role can see item details. If the specified
 * order or item does not exist or is not accessible due to status/deletion, a
 * relevant error is returned.
 *
 * The response DTO matches the schema, including unit/discounted price,
 * quantity, product and variant references, and status. This operation is
 * critical for order management workflows and after-sales scenarios.
 *
 * @param props.connection
 * @param props.orderId The order ID to which the order item belongs. Must be a
 *   valid UUID.
 * @param props.itemId The unique ID of the order item to retrieve. Must be a
 *   valid UUID of an item in shopping_mall_order_items.
 * @path /shoppingMall/admin/orders/:orderId/items/:itemId
 * @accessor api.functional.shoppingMall.admin.orders.items.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The order ID to which the order item belongs. Must be a valid UUID. */
    orderId: string & tags.Format<"uuid">;

    /**
     * The unique ID of the order item to retrieve. Must be a valid UUID of
     * an item in shopping_mall_order_items.
     */
    itemId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallOrderItem;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/orders/:orderId/items/:itemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): IShoppingMallOrderItem =>
    typia.random<IShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("itemId")(() => typia.assert(props.itemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing shopping mall order item by ID
 * (shopping_mall_order_items).
 *
 * This endpoint is used to update an existing order item before it has been
 * processed for fulfillment. Can be used to change the product variant, adjust
 * quantity, update pricing or discount snapshots, or other modifiable
 * attributes defined in IShoppingMallOrderItem.IUpdate. The orderId and itemId
 * path parameters uniquely identify the order and the specific order item to
 * update.
 *
 * Business logic checks verify that the item is eligible for modification
 * (status allows updating, not yet shipped/fulfilled/cancelled) and that
 * changes conform to quantity, pricing, and inventory constraints. Mutation
 * triggers a snapshot/audit entry for compliance and traceability, per
 * shopping_mall_order_items and related snapshot tables.
 *
 * Authorization ensures only permitted users—order owner (customer), involved
 * seller, or admin—may update. Related workflows ensure inventory adjustment
 * and downstream delivery/payment status changes follow business rules. Returns
 * the updated order item on success.
 *
 * @param props.connection
 * @param props.orderId Unique identifier for the target order (UUID)
 * @param props.itemId Unique identifier for the order item to update (UUID)
 * @param props.body Order item update fields: quantity, variant, price,
 *   discounts, etc.
 * @path /shoppingMall/admin/orders/:orderId/items/:itemId
 * @accessor api.functional.shoppingMall.admin.orders.items.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the target order (UUID) */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier for the order item to update (UUID) */
    itemId: string & tags.Format<"uuid">;

    /** Order item update fields: quantity, variant, price, discounts, etc. */
    body: IShoppingMallOrderItem.IUpdate;
  };
  export type Body = IShoppingMallOrderItem.IUpdate;
  export type Response = IShoppingMallOrderItem;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/orders/:orderId/items/:itemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): IShoppingMallOrderItem =>
    typia.random<IShoppingMallOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("itemId")(() => typia.assert(props.itemId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove an order item from an order by ID (shopping_mall_order_items).
 *
 * Removes an order item by its unique itemId from the specified order, if
 * business and workflow rules allow (e.g., order not yet fulfilled or in
 * shipping). This actions a hard delete—data is completely removed from the
 * shopping_mall_order_items table, per schema, and triggers audit trail/logging
 * for tracking and compliance.
 *
 * The endpoint requires both orderId and itemId as path parameters. It
 * validates item eligibility for deletion (e.g., item is not already delivered,
 * paid, or processed) and enforces access control (allowed for order owner,
 * seller, or admins). Improper attempts (on shipped, paid, or finalized items)
 * result in error.
 *
 * No request or response body is needed. Upon successful deletion, deletion
 * event is recorded in audit log per compliance rules described in the
 * shopping_mall_order_items and related tables.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order (UUID)
 * @param props.itemId Unique identifier of the order item to be removed (UUID)
 * @path /shoppingMall/admin/orders/:orderId/items/:itemId
 * @accessor api.functional.shoppingMall.admin.orders.items.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the parent order (UUID) */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the order item to be removed (UUID) */
    itemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/orders/:orderId/items/:itemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("itemId")(() => typia.assert(props.itemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
