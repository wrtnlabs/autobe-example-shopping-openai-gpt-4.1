import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallSection } from "../../../../../structures/IShoppingMallSection";
import { IPageIShoppingMallSection } from "../../../../../structures/IPageIShoppingMallSection";

/**
 * Create a new shopping mall section in a given channel (admin only).
 *
 * This API endpoint allows an authorized administrator to add a new section to
 * a specified shopping mall channel. The request body must include required
 * fields such as code, name, display order, and may optionally include a
 * description. The channel ID is provided in the URL path and all inputs are
 * validated according to the schema and business requirements.
 *
 * Upon successful creation, the endpoint returns all details for the new
 * section, including assigned ID, creation and update timestamps, and any
 * optional fields. If a section code already exists within the channel, or if
 * required fields are missing or invalid, errors are clearly surfaced for
 * client-side correction.
 *
 * Permissions are strictly enforced, ensuring only admins can add new sections.
 * All creation events are logged for audit purposes and role elevation to this
 * endpoint is strictly prohibited for non-admin users.
 *
 * @param props.connection
 * @param props.channelId Unique identifier (UUID) of the parent shopping mall
 *   channel.
 * @param props.body New section creation fields: code (unique per channel),
 *   name, display order (int), and optional description.
 * @path /shoppingMall/admin/channels/:channelId/sections
 * @accessor api.functional.shoppingMall.admin.channels.sections.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier (UUID) of the parent shopping mall channel. */
    channelId: string & tags.Format<"uuid">;

    /**
     * New section creation fields: code (unique per channel), name, display
     * order (int), and optional description.
     */
    body: IShoppingMallSection.ICreate;
  };
  export type Body = IShoppingMallSection.ICreate;
  export type Response = IShoppingMallSection;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/channels/:channelId/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections`;
  export const random = (): IShoppingMallSection =>
    typia.random<IShoppingMallSection>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/filter shopping mall sections for a given channel with pagination and
 * filters (admin only).
 *
 * Retrieve an array of shopping mall sections belonging to a specified channel.
 * Administrators and authorized users can filter by section name, code, display
 * order, and deletion status, supporting targeted management of the mall's
 * navigational structure.
 *
 * The endpoint employs strict access control, permitting only authorized users
 * to view detailed section lists for a given channel. Advanced filtering and
 * sorting parameters can be applied via the request body, and pagination is
 * provided to efficiently support large result sets.
 *
 * Security logic ensures that users without proper access to the channel or
 * sections receive a clear, permission-denied error. Error handling also covers
 * invalid channel IDs and request validation failures.
 *
 * @param props.connection
 * @param props.channelId Unique identifier (UUID) of the shopping mall channel.
 * @param props.body Section list search/filter and pagination parameters (name,
 *   code, display order, status, page, limit, etc).
 * @path /shoppingMall/admin/channels/:channelId/sections
 * @accessor api.functional.shoppingMall.admin.channels.sections.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier (UUID) of the shopping mall channel. */
    channelId: string & tags.Format<"uuid">;

    /**
     * Section list search/filter and pagination parameters (name, code,
     * display order, status, page, limit, etc).
     */
    body: IShoppingMallSection.IRequest;
  };
  export type Body = IShoppingMallSection.IRequest;
  export type Response = IPageIShoppingMallSection.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/channels/:channelId/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections`;
  export const random = (): IPageIShoppingMallSection.ISummary =>
    typia.random<IPageIShoppingMallSection.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific mall section in a channel (admin only).
 *
 * The endpoint returns all available details for a specific shopping mall
 * section, identified by its unique section ID within the context of a channel.
 * It provides a comprehensive dataset including the section name, code, display
 * order, description, creation and update metadata, and deletion status.
 *
 * Security measures ensure that only admins or authorized users may access this
 * level of detail for a specific section. If the section does not exist or is
 * not associated with the given channel, a not found error is returned, and
 * permission checks protect sensitive data.
 *
 * This operation is typically paired with the section list endpoint for UI
 * detail navigation, and is compliant with audit, evidence, and role-based
 * access protocols.
 *
 * @param props.connection
 * @param props.channelId Unique identifier (UUID) of the shopping mall channel
 *   context.
 * @param props.sectionId Unique identifier (UUID) of the mall section to
 *   retrieve.
 * @path /shoppingMall/admin/channels/:channelId/sections/:sectionId
 * @accessor api.functional.shoppingMall.admin.channels.sections.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the shopping mall channel context. */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the mall section to retrieve. */
    sectionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallSection;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/channels/:channelId/sections/:sectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections/${encodeURIComponent(props.sectionId ?? "null")}`;
  export const random = (): IShoppingMallSection =>
    typia.random<IShoppingMallSection>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("sectionId")(() => typia.assert(props.sectionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update information for an existing shopping mall section
 * (shopping_mall_sections) within a specific channel.
 *
 * Update the details of a shopping mall section within a specific channel. This
 * operation operates on the shopping_mall_sections table and leverages core
 * fields such as code, name, description, display_order, and status, as
 * described in the schema comments.
 *
 * The update process enforces validation on uniqueness of the section code per
 * channel, permissible status values, and consistency of display order within
 * the channel for proper section arrangement. Security is enforced so that only
 * users with admin privileges can execute this operation; all modifications are
 * logged for audit purposes and compliance tracking.
 *
 * The request must include all necessary attributes for a section update, and
 * if any validation fails (e.g., duplicate code or unauthorized modification),
 * a detailed error message is returned. Changes are timestamped in the
 * updated_at column, and soft deletion is recorded using the deleted_at column
 * for audit traceability.
 *
 * @param props.connection
 * @param props.channelId The unique identifier (UUID) of the parent shopping
 *   mall channel containing the section to update.
 * @param props.sectionId The unique identifier (UUID) of the shopping mall
 *   section to update.
 * @param props.body All updatable attributes of a shopping mall section.
 *   Follows IShoppingMallSection.IUpdate DTO structure.
 * @path /shoppingMall/admin/channels/:channelId/sections/:sectionId
 * @accessor api.functional.shoppingMall.admin.channels.sections.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier (UUID) of the parent shopping mall channel
     * containing the section to update.
     */
    channelId: string & tags.Format<"uuid">;

    /** The unique identifier (UUID) of the shopping mall section to update. */
    sectionId: string & tags.Format<"uuid">;

    /**
     * All updatable attributes of a shopping mall section. Follows
     * IShoppingMallSection.IUpdate DTO structure.
     */
    body: IShoppingMallSection.IUpdate;
  };
  export type Body = IShoppingMallSection.IUpdate;
  export type Response = IShoppingMallSection;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/channels/:channelId/sections/:sectionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections/${encodeURIComponent(props.sectionId ?? "null")}`;
  export const random = (): IShoppingMallSection =>
    typia.random<IShoppingMallSection>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("sectionId")(() => typia.assert(props.sectionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically delete (soft-delete) a shopping mall section
 * (shopping_mall_sections) in a specified channel by marking its deleted_at
 * field.
 *
 * Permanently remove a shopping mall section (logical soft-delete) within a
 * specified channel. This operation interacts with the shopping_mall_sections
 * table, utilizing its fields including deleted_at, to ensure that data is
 * never physically removed, but rather marked as deleted for legal and business
 * evidence retention.
 *
 * Administrators executing this operation must have the requisite permissions,
 * and all actions are recorded for evidence preservation. This operation will
 * cascade required cleanup or linkage updates as mandated by business rules for
 * removing sections (for instance, reassigning attached products or updating
 * section display order). Attempts to access the deleted section after this
 * operation will result in appropriate error responses to prevent unintentional
 * access.
 *
 * If any issues occur, such as attempting to delete a non-existent section or a
 * section with unresolved dependencies, detailed error messages are returned.
 * The operation should be used with care to preserve compliance, audit, and
 * business continuity.
 *
 * @param props.connection
 * @param props.channelId The unique identifier (UUID) of the parent shopping
 *   mall channel containing the section to remove.
 * @param props.sectionId The unique identifier (UUID) of the section to delete
 *   logically.
 * @path /shoppingMall/admin/channels/:channelId/sections/:sectionId
 * @accessor api.functional.shoppingMall.admin.channels.sections.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier (UUID) of the parent shopping mall channel
     * containing the section to remove.
     */
    channelId: string & tags.Format<"uuid">;

    /** The unique identifier (UUID) of the section to delete logically. */
    sectionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/channels/:channelId/sections/:sectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/sections/${encodeURIComponent(props.sectionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("sectionId")(() => typia.assert(props.sectionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
