import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallChannelCategory } from "../../../../../structures/IShoppingMallChannelCategory";
import { IPageIShoppingMallChannelCategory } from "../../../../../structures/IPageIShoppingMallChannelCategory";

/**
 * Create a new category within a specific shopping mall channel
 * (shopping_mall_channel_categories).
 *
 * This endpoint is responsible for creating hierarchical categories within a
 * given channel. Categories are essential for product organization, search,
 * campaign targeting, and business rule scoping on the shopping mall platform.
 *
 * Only administrators or appropriately authorized business staff should access
 * this endpoint due to the impact on search taxonomies, merchandising, and user
 * navigation. All write operations are subject to audit trail requirements, and
 * unique codes/names per channel are strictly enforced by the database.
 *
 * The category will include a required code and name, an optional parent_id to
 * support hierarchical trees, an optional description, display ordering, and
 * business tracking timestamps. Validation ensures no duplicate codes within a
 * channel and correct parent-child relationships. If errors occur (such as a
 * duplicate code or invalid references), a detailed error message will be
 * provided.
 *
 * This endpoint may be used together with category retrieval, update, delete,
 * or reorganization endpoints. Post-creation, related services may trigger
 * indexing, notification, or analytics updates. Error handling must respect
 * database unique constraint violations and authorization enforcement.
 *
 * @param props.connection
 * @param props.channelId ID of the channel to which the category will be added.
 * @param props.body Information required to create a new category for a
 *   channel.
 * @path /shoppingMall/admin/channels/:channelId/categories
 * @accessor api.functional.shoppingMall.admin.channels.categories.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the channel to which the category will be added. */
    channelId: string & tags.Format<"uuid">;

    /** Information required to create a new category for a channel. */
    body: IShoppingMallChannelCategory.ICreate;
  };
  export type Body = IShoppingMallChannelCategory.ICreate;
  export type Response = IShoppingMallChannelCategory;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/channels/:channelId/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories`;
  export const random = (): IShoppingMallChannelCategory =>
    typia.random<IShoppingMallChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List, filter, sort, and paginate channel-specific categories
 * (shopping_mall_channel_categories).
 *
 * Obtain a comprehensive list of product or section categories within a given
 * shopping mall channel, using advanced filters, sort options, and pagination
 * controls.
 *
 * Categories in the shopping_mall_channel_categories table support hierarchical
 * structures and multi-level relationships. This operation supports querying
 * categories by parent, searching by textual fields (code/name), filtering by
 * status or display_order, and is suitable for rendering nested category trees
 * for channel administration. Requests can supply complex query parameters
 * encapsulated in the IShoppingMallChannelCategory.IRequest DTO, while results
 * are wrapped as paginated collections, enabling UI and batch management
 * workflows.
 *
 * Authorization requirements ensure that only admin users or users with proper
 * permissions can access the full category list. Error handling includes
 * feedback for invalid filters or request payloads, with security policies
 * enforced against unauthorized enumeration of categories beyond the user's
 * privilege scope.
 *
 * @param props.connection
 * @param props.channelId The unique identifier (UUID) of the channel whose
 *   categories are being queried.
 * @param props.body Filtering, sorting, and pagination parameters for channel
 *   categories query, matching IShoppingMallChannelCategory.IRequest DTO.
 * @path /shoppingMall/admin/channels/:channelId/categories
 * @accessor api.functional.shoppingMall.admin.channels.categories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier (UUID) of the channel whose categories are
     * being queried.
     */
    channelId: string & tags.Format<"uuid">;

    /**
     * Filtering, sorting, and pagination parameters for channel categories
     * query, matching IShoppingMallChannelCategory.IRequest DTO.
     */
    body: IShoppingMallChannelCategory.IRequest;
  };
  export type Body = IShoppingMallChannelCategory.IRequest;
  export type Response = IPageIShoppingMallChannelCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/channels/:channelId/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories`;
  export const random = (): IPageIShoppingMallChannelCategory.ISummary =>
    typia.random<IPageIShoppingMallChannelCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full details for a specific channel category
 * (shopping_mall_channel_categories) by ID.
 *
 * Retrieve complete details of a single category within a specified channel.
 * This operation directly accesses the shopping_mall_channel_categories table
 * and returns all business-relevant fieldsâ€”such as category code, name, parent
 * relationship, description, display order, status, creation/update/delete
 * timestamps, and audit metadata as described in the Prisma schema comments.
 *
 * This endpoint is essential for category management, allowing administrative
 * interfaces to present or edit full information about a category, perform
 * audits, or display contextual relationships (e.g., parent/child). Only
 * administrators or those with required permissions may access full metadata;
 * others should receive minimal or redacted information as determined by
 * authorization policies. If the category does not exist or the user lacks
 * authorization, an appropriate error is returned.
 *
 * @param props.connection
 * @param props.channelId The unique identifier (UUID) of the channel that owns
 *   the category.
 * @param props.categoryId The unique identifier (UUID) of the category to
 *   retrieve.
 * @path /shoppingMall/admin/channels/:channelId/categories/:categoryId
 * @accessor api.functional.shoppingMall.admin.channels.categories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the channel that owns the category. */
    channelId: string & tags.Format<"uuid">;

    /** The unique identifier (UUID) of the category to retrieve. */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallChannelCategory;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/channels/:channelId/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallChannelCategory =>
    typia.random<IShoppingMallChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing channel category's details
 * (shopping_mall_channel_categories).
 *
 * Allows administrators to modify the properties of an existing category within
 * a given channel, impacting classification, navigation, and product
 * organization. The endpoint supports updates to the name, code (within
 * uniqueness constraints), description, display order, and parent category for
 * hierarchical management.
 *
 * Strict business logic is enforced, including prevention of duplicate codes in
 * a channel, cycle detection in parent categories (no self-referencing or
 * loops), and validation of all references. Audit logs are required for change
 * tracking. Only users with admin role can access this operation, and
 * unauthorized attempts should be blocked and logged.
 *
 * Related endpoints may include category creation, retrieval, and deletion. If
 * an invalid update is attempted (e.g., referring to a deleted parent or
 * introducing a cycle), a precise error message is returned. Successful updates
 * may trigger re-indexing, notification, or analytics processes.
 *
 * @param props.connection
 * @param props.channelId Channel ID containing the target category.
 * @param props.categoryId ID of the category within the channel to update.
 * @param props.body Fields and relationships to update on the specified
 *   category.
 * @path /shoppingMall/admin/channels/:channelId/categories/:categoryId
 * @accessor api.functional.shoppingMall.admin.channels.categories.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Channel ID containing the target category. */
    channelId: string & tags.Format<"uuid">;

    /** ID of the category within the channel to update. */
    categoryId: string & tags.Format<"uuid">;

    /** Fields and relationships to update on the specified category. */
    body: IShoppingMallChannelCategory.IUpdate;
  };
  export type Body = IShoppingMallChannelCategory.IUpdate;
  export type Response = IShoppingMallChannelCategory;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/channels/:channelId/categories/:categoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IShoppingMallChannelCategory =>
    typia.random<IShoppingMallChannelCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically (soft) delete a channel category (shopping_mall_channel_categories)
 * from a channel.
 *
 * Allows administrators to logically delete (soft-delete) a specific category
 * under a channel, marking its deleted_at field without permanently removing it
 * from the database. The operation supports audit and regulatory requirements,
 * maintaining data integrity for compliance and potential recovery.
 *
 * Category records with a non-null deleted_at field are considered inactive for
 * navigation, product assignment, and search, but remain accessible for
 * historical lookup. Business logic must enforce that products previously
 * assigned to deleted categories be handled according to platform policies
 * (e.g., reclassification, notification).
 *
 * Only administrators may perform this operation. Attempts to delete
 * non-existent or already deleted categories should fail with an appropriate
 * error message. Related endpoints include category retrieval (excluding
 * deleted by default), restore, or audit log display. All removals are required
 * to be logged for evidence and traceability.
 *
 * @param props.connection
 * @param props.channelId Channel ID that contains the target category.
 * @param props.categoryId ID of the channel category to logically delete.
 * @path /shoppingMall/admin/channels/:channelId/categories/:categoryId
 * @accessor api.functional.shoppingMall.admin.channels.categories.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Channel ID that contains the target category. */
    channelId: string & tags.Format<"uuid">;

    /** ID of the channel category to logically delete. */
    categoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/channels/:channelId/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
