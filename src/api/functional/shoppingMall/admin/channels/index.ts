import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallChannel } from "../../../../structures/IShoppingMallChannel";
import { IPageIShoppingMallChannel } from "../../../../structures/IPageIShoppingMallChannel";
export * as sections from "./sections/index";
export * as categories from "./categories/index";

/**
 * Create a new shopping mall channel (storefront/brand).
 *
 * Register a new channel in the shopping mall backend, providing complete
 * definition for all required properties such as code, name, and description.
 * As each channel anchors downstream entities (sections, categories, products,
 * users), creation is locked to highly privileged roles and follows strict
 * validation rules for uniqueness and completeness.
 *
 * This operation requires admin access to prevent unauthorized creation or
 * abuse, and includes error messaging for conflicting codes or invalid
 * attributes according to the schema. Audit and compliance logging occurs for
 * every creation event, supporting later configuration or business expansion.
 *
 * Post-creation, the operation may trigger configuration loading, downstream
 * object scoping, or notification events relevant to the business workflow for
 * onboarding a new channel.
 *
 * @param props.connection
 * @param props.body Information and attributes required to create a new
 *   shopping mall channel.
 * @path /shoppingMall/admin/channels
 * @accessor api.functional.shoppingMall.admin.channels.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information and attributes required to create a new shopping mall
     * channel.
     */
    body: IShoppingMallChannel.ICreate;
  };
  export type Body = IShoppingMallChannel.ICreate;
  export type Response = IShoppingMallChannel;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/channels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/channels";
  export const random = (): IShoppingMallChannel =>
    typia.random<IShoppingMallChannel>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of shopping mall channels.
 *
 * Retrieve a filtered and paginated list of shopping mall channels using
 * advanced search and filter capabilities. The operation allows clients to list
 * channels by code, name, or other relevant identifiers. Intended for
 * navigation, administration, and configuration of multi-channel e-commerce
 * scenarios, this operation ensures that both admins and operators can
 * efficiently manage channels in large-scale shopping platforms.
 *
 * The endpoint enforces proper authorization and exposes only fields that are
 * appropriate for role-based access. Security and business rules may restrict
 * certain channel details to authorized users, and audit considerations are in
 * place for monitoring access to channel data.
 *
 * Pagination, sorting, and advanced query features ensure system scalability
 * and performance in handling large numbers of channels. Error handling
 * includes graceful handling of invalid filters, unauthorized access attempts,
 * and malformed queries.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for listing channels,
 *   including pagination and sorting.
 * @path /shoppingMall/admin/channels
 * @accessor api.functional.shoppingMall.admin.channels.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter parameters for listing channels, including
     * pagination and sorting.
     */
    body: IShoppingMallChannel.IRequest;
  };
  export type Body = IShoppingMallChannel.IRequest;
  export type Response = IPageIShoppingMallChannel.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/channels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/channels";
  export const random = (): IPageIShoppingMallChannel.ISummary =>
    typia.random<IPageIShoppingMallChannel.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific shopping mall channel by ID.
 *
 * Fetch the detailed profile of a specific shopping mall channel using its
 * unique ID. This operation enables admins or authorized operators to review
 * configuration, audit status, business context, and top-level properties
 * before making changes or associating sections, categories, or users with the
 * channel.
 *
 * Channel access is controlled by strict authorization policies ensuring only
 * permitted parties can access potentially sensitive configuration information.
 * The operation references the shopping_mall_channels entity and exposes all
 * relevant display and business logic fields. Relationships to sections,
 * categories, and child entities are available for further queries or linkage.
 *
 * Proper error handling is implemented for invalid or deleted channel IDs,
 * unauthorized requests, and reference integrity issues as per channel-level
 * security and compliance.
 *
 * @param props.connection
 * @param props.channelId Unique identifier (UUID) of the shopping mall channel
 *   to retrieve.
 * @path /shoppingMall/admin/channels/:channelId
 * @accessor api.functional.shoppingMall.admin.channels.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the shopping mall channel to retrieve. */
    channelId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallChannel;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/channels/:channelId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}`;
  export const random = (): IShoppingMallChannel =>
    typia.random<IShoppingMallChannel>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update information of an existing shopping mall channel by ID.
 *
 * Update the configuration or attributes of an existing channel, enabling
 * administrators to change names, business codes, descriptions, or related
 * metadata. The operation validates that the target channel exists and has not
 * been deleted, and enforces business logic to prevent duplication of codes or
 * invalid state transitions.
 *
 * All changes are recorded for audit purposes, including who performed the
 * update and what fields were modified, supporting both compliance and rollback
 * workflows for system stability. Strict role-based access ensures only
 * administrators may perform this operation, limiting the risk of accidental or
 * malicious alteration to channel records.
 *
 * Error handling is granular: attempts to edit non-existent or deleted
 * channels, conflict with existing codes, or unauthorized update requests
 * produce clear error messages per established API patterns.
 *
 * @param props.connection
 * @param props.channelId Unique identifier (UUID) of the shopping mall channel
 *   to update.
 * @param props.body Fields and attributes to update for the target shopping
 *   mall channel.
 * @path /shoppingMall/admin/channels/:channelId
 * @accessor api.functional.shoppingMall.admin.channels.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the shopping mall channel to update. */
    channelId: string & tags.Format<"uuid">;

    /** Fields and attributes to update for the target shopping mall channel. */
    body: IShoppingMallChannel.IUpdate;
  };
  export type Body = IShoppingMallChannel.IUpdate;
  export type Response = IShoppingMallChannel;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/channels/:channelId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}`;
  export const random = (): IShoppingMallChannel =>
    typia.random<IShoppingMallChannel>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a shopping mall channel (admin only; logical removal, not
 * physical delete).
 *
 * This API endpoint allows an administrator to logically delete (soft-delete) a
 * shopping mall channel by updating the 'deleted_at' column. The request
 * targets a specific channel by its UUID, permanently marking it as deleted for
 * operational purposes, but retaining its record and all related entities for
 * compliance and auditability.
 *
 * Security is strictly enforced; only authenticated administrators are
 * permitted to use this endpoint. Deletion does not cascade to physically
 * remove sections, products, or other related entities. All historical data,
 * including creation and modification timestamps, remains intact for future
 * audits or restoration.
 *
 * Attempts to delete a channel that does not exist, or has already been
 * deleted, will result in clear, actionable errors. The endpoint guarantees
 * compliance with evidence retention policies by never physically erasing the
 * channel record, and maintains full traceability for legal and business
 * needs.
 *
 * @param props.connection
 * @param props.channelId Unique identifier (UUID) of the target shopping mall
 *   channel to be deleted.
 * @path /shoppingMall/admin/channels/:channelId
 * @accessor api.functional.shoppingMall.admin.channels.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier (UUID) of the target shopping mall channel to be
     * deleted.
     */
    channelId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/channels/:channelId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/channels/${encodeURIComponent(props.channelId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
