import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallUserConnection } from "../../../../structures/IShoppingMallUserConnection";
import { IPageIShoppingMallUserConnection } from "../../../../structures/IPageIShoppingMallUserConnection";

/**
 * Search and list user connection records (sessions, logins, device/browser)
 * with filtering and pagination.
 *
 * Retrieve a paginated, filtered list of user connection/session records from
 * the shoppingMall platform. This operation queries the
 * shopping_mall_user_connections table, exposing actor type, channel, IP,
 * authentication context, device/user agent, and login/logout timestamps for
 * analytic and security review.
 *
 * The operation allows advanced search with filtering by actorType
 * (customer/seller/admin), channelId, time ranges (loginAt/logoutAt), IP
 * address, and user agent. Pagination and sorting are included to support audit
 * hardware, fraud analytics, and compliance/regulatory inquiry. Only authorized
 * personnel may access full metadata of connection records due to the potential
 * presence of PII (IP address, device details).
 *
 * Returns a paginated list of user connection summaries, optimized for
 * monitoring, security analysis, and compliance audit use-cases. Error handling
 * covers invalid filter params, authorization failures, and excessive query
 * workloads (rate limiting).
 *
 * @param props.connection
 * @param props.body Advanced search, filter, and pagination criteria for user
 *   connection log query.
 * @path /shoppingMall/admin/userConnections
 * @accessor api.functional.shoppingMall.admin.userConnections.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Advanced search, filter, and pagination criteria for user connection
     * log query.
     */
    body: IShoppingMallUserConnection.IRequest;
  };
  export type Body = IShoppingMallUserConnection.IRequest;
  export type Response = IPageIShoppingMallUserConnection.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/userConnections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/userConnections";
  export const random = (): IPageIShoppingMallUserConnection.ISummary =>
    typia.random<IPageIShoppingMallUserConnection.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific user connection record by its
 * ID.
 *
 * Fetch detailed record of a user connection/session as tracked in the
 * shopping_mall_user_connections table, using a unique identifier
 * (userConnectionId). This includes all available fields: actorId, actorType,
 * channelId, IP address, user agent string, login/logout timestamps, and
 * authentication context.
 *
 * Access to this API is restricted to admin or trusted audit roles, as the data
 * contains sensitive session and identity information. It is used for session
 * trace, fraud/abuse investigations, and full compliance audit. Authorization
 * and input validation are enforced—invalid or unauthorized requests are
 * rejected with appropriate errors.
 *
 * Typical use cases include: reconstructing a session for incident response,
 * verifying access source for legal compliance, or correlating suspicious
 * activity. Related endpoints allow search/listing (see index operation), and
 * deletion (erase operation for session records).
 *
 * @param props.connection
 * @param props.userConnectionId Unique identifier of the user
 *   connection/session record (UUID).
 * @path /shoppingMall/admin/userConnections/:userConnectionId
 * @accessor api.functional.shoppingMall.admin.userConnections.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user connection/session record (UUID). */
    userConnectionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallUserConnection;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/userConnections/:userConnectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/userConnections/${encodeURIComponent(props.userConnectionId ?? "null")}`;
  export const random = (): IShoppingMallUserConnection =>
    typia.random<IShoppingMallUserConnection>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userConnectionId")(() =>
        typia.assert(props.userConnectionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update or annotate metadata for a user connection/session record by ID (admin
 * only).
 *
 * Update or annotate a user connection/session record identified by
 * userConnectionId, as stored in the shopping_mall_user_connections table.
 * Permitted changes include updating select metadata for compliance (such as
 * authentication context, risk score, or device labeling). All changes are
 * logged with full audit trail for regulatory purposes.
 *
 * The operation requires strict authorization (admin-level), and validates all
 * updates to safeguard against destructive/irreversible changes — session
 * history is preserved and the record cannot be reactivated once ended or
 * deleted. Only allowed fields may be updated per audit policy; invalid fields
 * or unauthorized attempts are rejected.
 *
 * Typical use cases: marking session as compromised, appending compliance
 * comments, adjusting authentication data for risk scoring. Related endpoints:
 * see detail (at operation), list (index), and remove/erase. Error handling
 * returns actionable messages for invalid update requests or insufficient
 * privileges.
 *
 * @param props.connection
 * @param props.userConnectionId Unique identifier of the user
 *   connection/session record (UUID).
 * @param props.body Fields and values to update in the user connection/session
 *   record, including audit/compliance annotations.
 * @path /shoppingMall/admin/userConnections/:userConnectionId
 * @accessor api.functional.shoppingMall.admin.userConnections.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the user connection/session record (UUID). */
    userConnectionId: string & tags.Format<"uuid">;

    /**
     * Fields and values to update in the user connection/session record,
     * including audit/compliance annotations.
     */
    body: IShoppingMallUserConnection.IUpdate;
  };
  export type Body = IShoppingMallUserConnection.IUpdate;
  export type Response = IShoppingMallUserConnection;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/userConnections/:userConnectionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/userConnections/${encodeURIComponent(props.userConnectionId ?? "null")}`;
  export const random = (): IShoppingMallUserConnection =>
    typia.random<IShoppingMallUserConnection>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userConnectionId")(() =>
        typia.assert(props.userConnectionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently erase a user connection/session record by its unique ID
 * (compliance only).
 *
 * Permanently remove a user connection/session record from
 * shopping_mall_user_connections by its unique ID. This is a hard erase
 * operation, bypassing normal session expiry. It may only be used by privileged
 * admin roles for compliance (e.g., regulatory data erasure, expired
 * retention).
 *
 * The operation enforces full authorization and audit logging—irreversible
 * removal is only permitted after verification of legal/retention requirements.
 * No session information is recoverable after erase. Attempting to delete a
 * non-existent or unauthorized record results in a clear error. Related
 * endpoints include: retrieve/list (at/index), and update metadata. All actions
 * are monitored for compliance with legal frameworks such as GDPR, CCPA, and
 * internal audit policies.
 *
 * @param props.connection
 * @param props.userConnectionId Unique identifier of the user
 *   connection/session record (UUID).
 * @path /shoppingMall/admin/userConnections/:userConnectionId
 * @accessor api.functional.shoppingMall.admin.userConnections.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user connection/session record (UUID). */
    userConnectionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/userConnections/:userConnectionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/userConnections/${encodeURIComponent(props.userConnectionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userConnectionId")(() =>
        typia.assert(props.userConnectionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
