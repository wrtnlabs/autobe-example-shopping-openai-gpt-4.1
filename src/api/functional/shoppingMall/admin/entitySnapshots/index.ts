import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallEntitySnapshot } from "../../../../structures/IShoppingMallEntitySnapshot";
import { IPageIShoppingMallEntitySnapshot } from "../../../../structures/IPageIShoppingMallEntitySnapshot";

/**
 * Search and paginate entity snapshot audit history
 * (shopping_mall_entity_snapshots) with filters.
 *
 * Retrieve a filtered, paginated list of entity snapshots for any auditable
 * business object within the shopping mall platform. This operation supports
 * sophisticated search/filtering by entity_type (such as product, customer,
 * order, review, etc.), entity_id, event reason, or the snapshot_actor_id (who
 * performed the triggering event), as well as event and snapshot time ranges.
 *
 * The endpoint supports business audit functions, rollback/dispute
 * investigation, and regulatory compliance requests by allowing fine-grained
 * analysis of all historical state captures. Permission to access specific
 * types of entity snapshots is restricted to high-authorization roles
 * (generally 'admin'), given the potential PII or regulated information
 * included in snapshot_data.
 *
 * This operation queries the 'shopping_mall_entity_snapshots' table as defined
 * in the Actors, Products, Orders, and other domains, returning matching
 * records with full serialized state and metadata. Large result sets are
 * delivered using a standard paginated response payload to support scalable
 * audit operations. Related operations include detailed snapshot retrieval (GET
 * /entitySnapshots/{entitySnapshotId}) and the audit log list endpoint. Error
 * cases include invalid filters, role-based access restrictions, and malformed
 * queries.
 *
 * @param props.connection
 * @param props.body Entity snapshot search filters, pagination, and sort
 *   options.
 * @path /shoppingMall/admin/entitySnapshots
 * @accessor api.functional.shoppingMall.admin.entitySnapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Entity snapshot search filters, pagination, and sort options. */
    body: IShoppingMallEntitySnapshot.IRequest;
  };
  export type Body = IShoppingMallEntitySnapshot.IRequest;
  export type Response = IPageIShoppingMallEntitySnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/entitySnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/entitySnapshots";
  export const random = (): IPageIShoppingMallEntitySnapshot =>
    typia.random<IPageIShoppingMallEntitySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a historic entity snapshot
 * (shopping_mall_entity_snapshots).
 *
 * Retrieve the full historical state for a specific entity snapshot within the
 * shopping mall backend system. This operation references the
 * shopping_mall_entity_snapshots Prisma schema, which tracks immutable,
 * point-in-time captures of every critical business object (Customer, Product,
 * Order, etc.) as required for evidence preservation and regulatory
 * compliance.
 *
 * The endpoint is secured so that only administrative roles can access it, due
 * to its exposure of full serialized entity data, which may include sensitive
 * information. Typical use cases include compliance audits, dispute/rollback
 * analysis, and verification of proper business rule enforcement at the time of
 * the snapshot event.
 *
 * The operation is designed to be used in conjunction with the paginated index
 * endpoint (PATCH /entitySnapshots), especially when detailed insight into a
 * given snapshot instance is required. Possible error responses include not
 * found, forbidden (insufficient role), and bad request (malformed snapshot
 * ID).
 *
 * @param props.connection
 * @param props.entitySnapshotId Unique identifier of the desired entity
 *   snapshot record.
 * @path /shoppingMall/admin/entitySnapshots/:entitySnapshotId
 * @accessor api.functional.shoppingMall.admin.entitySnapshots.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the desired entity snapshot record. */
    entitySnapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallEntitySnapshot;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/entitySnapshots/:entitySnapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/entitySnapshots/${encodeURIComponent(props.entitySnapshotId ?? "null")}`;
  export const random = (): IShoppingMallEntitySnapshot =>
    typia.random<IShoppingMallEntitySnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("entitySnapshotId")(() =>
        typia.assert(props.entitySnapshotId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
