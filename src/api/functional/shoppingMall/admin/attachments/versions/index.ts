import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAttachmentVersion } from "../../../../../structures/IShoppingMallAttachmentVersion";
import { IPageIShoppingMallAttachmentVersion } from "../../../../../structures/IPageIShoppingMallAttachmentVersion";

/**
 * Create a new version for a given attachment
 * (shopping_mall_attachment_versions table).
 *
 * Create a new file version for an existing attachment by supplying all
 * relevant metadata and the server URI for the uploaded file content. This
 * operation must be used when a user (customer, seller, or admin) uploads a new
 * version of an existing file for business entities (products, reviews, orders,
 * posts, etc.).
 *
 * Permission checks are enforced to ensure only authorized users can update the
 * target attachment. The system validates that the supplied URI points to a
 * compliant file (size, type, structure) and updates are only possible for
 * attachments where the current user has replacement privileges.
 *
 * All previous versions for the attachment are preserved and retrievable via
 * audit APIs. Every new version increments the version number sequentially and
 * forms a time-stamped chain of versions for evidence and regulatory
 * compliance. If compliance, retention, or GDPR rules require blocking version
 * updates, a detailed error is returned explaining the constraint.
 *
 * Related endpoints include listing all versions of an attachment, retrieving a
 * single version, and replacing file versions for attachments used in shopping
 * mall business entities. This operation cannot be used if the parent
 * attachment is soft/hard deleted; such requests return a business logic error.
 * On success, it returns the full attachment version metadata.
 *
 * @param props.connection
 * @param props.attachmentId Target attachment's unique identifier (UUID).
 * @param props.body Metadata required to create a new attachment version for an
 *   existing attachment. Includes server file URI, version info, and audit
 *   metadata.
 * @path /shoppingMall/admin/attachments/:attachmentId/versions
 * @accessor api.functional.shoppingMall.admin.attachments.versions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target attachment's unique identifier (UUID). */
    attachmentId: string & tags.Format<"uuid">;

    /**
     * Metadata required to create a new attachment version for an existing
     * attachment. Includes server file URI, version info, and audit
     * metadata.
     */
    body: IShoppingMallAttachmentVersion.ICreate;
  };
  export type Body = IShoppingMallAttachmentVersion.ICreate;
  export type Response = IShoppingMallAttachmentVersion;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/attachments/:attachmentId/versions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/attachments/${encodeURIComponent(props.attachmentId ?? "null")}/versions`;
  export const random = (): IShoppingMallAttachmentVersion =>
    typia.random<IShoppingMallAttachmentVersion>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and paginate versions for a specific attachment from
 * shopping_mall_attachment_versions.
 *
 * This API operation retrieves a list of all versions associated with a
 * specific attachment. The endpoint supports advanced filtering, pagination,
 * and sorting of attachment versions according to request parameters. Only
 * metadata about each version (e.g., version number, mime type, upload
 * timestamp, hash) is returned—not file binary content.
 *
 * Permissions and role checks enforce access: typically, the uploader and users
 * with admin role or required business permissions may access version lists.
 * Downloading individual versions requires separate endpoints.
 *
 * A robust audit log of all access attempts is maintained—with errors for
 * unauthorized or failed lookups explained in descriptive messages. Returned
 * data reflects all versioning metadata for the attachmentId specified,
 * allowing clients to display selectable version histories or audit records.
 * This operation references the shopping_mall_attachment_versions table and
 * indexes on shopping_mall_attachments.
 *
 * @param props.connection
 * @param props.attachmentId Unique identifier of the attachment for which to
 *   list versions
 * @param props.body Filter, pagination, and sorting parameters for listing
 *   attachment versions.
 * @path /shoppingMall/admin/attachments/:attachmentId/versions
 * @accessor api.functional.shoppingMall.admin.attachments.versions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the attachment for which to list versions */
    attachmentId: string & tags.Format<"uuid">;

    /**
     * Filter, pagination, and sorting parameters for listing attachment
     * versions.
     */
    body: IShoppingMallAttachmentVersion.IRequest;
  };
  export type Body = IShoppingMallAttachmentVersion.IRequest;
  export type Response = IPageIShoppingMallAttachmentVersion;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/attachments/:attachmentId/versions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/attachments/${encodeURIComponent(props.attachmentId ?? "null")}/versions`;
  export const random = (): IPageIShoppingMallAttachmentVersion =>
    typia.random<IPageIShoppingMallAttachmentVersion>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific version's metadata for an attachment from
 * shopping_mall_attachment_versions.
 *
 * This API operation retrieves all metadata for a single attachment version,
 * uniquely identified by both attachmentId and versionId (version primary key).
 * Details include filename, file extension, mime type, size, hash, server URL,
 * and audit metadata for the requested version.
 *
 * Strict role and permission checks are enforced: only admin users or the
 * original uploader may retrieve version metadata. The binary file content is
 * not returned via this endpoint. All access is logged for compliance and
 * regulatory audit, with robust error messages for unauthorized or not-found
 * records.
 *
 * This endpoint operates solely on the shopping_mall_attachment_versions table,
 * providing comprehensive read access to version metadata while protecting
 * binary file content and enforcing evidence retention policies described in
 * the schema comments.
 *
 * @param props.connection
 * @param props.attachmentId Unique identifier of the parent attachment
 * @param props.versionId Unique identifier of the version record to retrieve
 *   (primary key)
 * @path /shoppingMall/admin/attachments/:attachmentId/versions/:versionId
 * @accessor api.functional.shoppingMall.admin.attachments.versions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent attachment */
    attachmentId: string & tags.Format<"uuid">;

    /** Unique identifier of the version record to retrieve (primary key) */
    versionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAttachmentVersion;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/attachments/:attachmentId/versions/:versionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/attachments/${encodeURIComponent(props.attachmentId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): IShoppingMallAttachmentVersion =>
    typia.random<IShoppingMallAttachmentVersion>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.param("versionId")(() => typia.assert(props.versionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update metadata for an existing attachment version
 * (shopping_mall_attachment_versions table).
 *
 * Update mutable business metadata for a specific version of an attachment
 * file, such as filename, description, or permission settings. This action is
 * only available for users with edit rights (admin, original uploader, or
 * authorized party) and for attachment versions that are neither deleted nor
 * locked for compliance reasons.
 *
 * Persistence of updates is permanent: the modification is logged, and past
 * versions are recoverable via snapshot and audit subsystems. If any business
 * constraint blocks the update (e.g., immutable fields, soft/hard deleted file,
 * policy violation), the system returns an error explaining why the operation
 * was denied.
 *
 * This endpoint may be used in conjunction with version listing, retrieval, or
 * replacement APIs as part of a broader attachment/file management workflow.
 *
 * @param props.connection
 * @param props.attachmentId UUID of the parent attachment.
 * @param props.versionId UUID of the version of the attachment file to update.
 * @param props.body Update payload for the attachment version, only allowing
 *   fields that are strictly mutable per compliance.
 * @path /shoppingMall/admin/attachments/:attachmentId/versions/:versionId
 * @accessor api.functional.shoppingMall.admin.attachments.versions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the parent attachment. */
    attachmentId: string & tags.Format<"uuid">;

    /** UUID of the version of the attachment file to update. */
    versionId: string & tags.Format<"uuid">;

    /**
     * Update payload for the attachment version, only allowing fields that
     * are strictly mutable per compliance.
     */
    body: IShoppingMallAttachmentVersion.IUpdate;
  };
  export type Body = IShoppingMallAttachmentVersion.IUpdate;
  export type Response = IShoppingMallAttachmentVersion;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/attachments/:attachmentId/versions/:versionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/attachments/${encodeURIComponent(props.attachmentId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): IShoppingMallAttachmentVersion =>
    typia.random<IShoppingMallAttachmentVersion>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.param("versionId")(() => typia.assert(props.versionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a specific attachment version (shopping_mall_attachment_versions
 * table).
 *
 * Soft-delete (logically remove) a file version of an attachment, ensuring that
 * the deleted_at field is set while maintaining full audit traceability. This
 * operation is typically available only to administrators, and possibly the
 * original uploader under certain circumstances, in accord with platform
 * policy.
 *
 * The endpoint will fail with a clear error if the user tries to delete a
 * version that is already deleted, does not exist, or is compliance-locked.
 * Attempts by unauthorized users or for compliance-sealed files are rejected
 * and fully logged for audit.
 *
 * Related APIs in this file management domain include creating, updating,
 * listing, and restoring file versions. Physical removal of file content is
 * always deferred until all legal retention policies are resolved.
 *
 * @param props.connection
 * @param props.attachmentId UUID of the parent attachment.
 * @param props.versionId UUID of the version to be soft deleted.
 * @path /shoppingMall/admin/attachments/:attachmentId/versions/:versionId
 * @accessor api.functional.shoppingMall.admin.attachments.versions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the parent attachment. */
    attachmentId: string & tags.Format<"uuid">;

    /** UUID of the version to be soft deleted. */
    versionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/attachments/:attachmentId/versions/:versionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/attachments/${encodeURIComponent(props.attachmentId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.param("versionId")(() => typia.assert(props.versionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
