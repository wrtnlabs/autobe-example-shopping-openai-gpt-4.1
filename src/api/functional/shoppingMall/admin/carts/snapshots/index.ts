import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCartSnapshot } from "../../../../../structures/IShoppingMallCartSnapshot";

/**
 * Retrieve a specific audit snapshot of a shopping cart state by ID, supporting
 * evidence, rollback, and compliance use-cases. Uses
 * shopping_mall_cart_snapshots.
 *
 * This API operation retrieves a single immutable snapshot of a shopping cart
 * as recorded in the shopping_mall_cart_snapshots table. Each snapshot captures
 * the full state of the cart, including items, options, and metadata, at a
 * particular event (such as checkout, deletion, or batch modification).
 *
 * Snapshots are critical for legal compliance, customer dispute evidence, and
 * system rollback functionality. By exposing specific snapshots, this endpoint
 * allows authorized parties to verify historical cart contents, reconstruct
 * user activity, and demonstrate business process auditability. Sensitive
 * personal information should be filtered or masked in accordance with the
 * requester's role and system policy.
 *
 * Authorization is required and limited typically to admin, support, or the
 * cart owner, with strong filtering for non-admins. The operation links through
 * both the cart ID and snapshot ID, supporting multi-tenancy and multi-event
 * associations. Error handling will provide clear messages if the snapshot does
 * not exist or access control fails. Logging of all access events supports full
 * audit trails.
 *
 * @param props.connection
 * @param props.cartId Target shopping cart's unique identifier (UUID).
 * @param props.snapshotId Unique identifier of the snapshot to retrieve (UUID).
 * @path /shoppingMall/admin/carts/:cartId/snapshots/:snapshotId
 * @accessor api.functional.shoppingMall.admin.carts.snapshots.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target shopping cart's unique identifier (UUID). */
    cartId: string & tags.Format<"uuid">;

    /** Unique identifier of the snapshot to retrieve (UUID). */
    snapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCartSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/carts/:cartId/snapshots/:snapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/carts/${encodeURIComponent(props.cartId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): IShoppingMallCartSnapshot =>
    typia.random<IShoppingMallCartSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
