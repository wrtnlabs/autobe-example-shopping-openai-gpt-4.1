import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCart } from "../../../../structures/IShoppingMallCart";
import { IPageIShoppingMallCart } from "../../../../structures/IPageIShoppingMallCart";
export * as items from "./items/index";
export * as snapshots from "./snapshots/index";

/**
 * Create a new shopping cart (shopping_mall_carts table).
 *
 * This endpoint provides the ability to initialize a new shopping cart entity
 * for an authenticated or guest customer. Submitted parameters must include all
 * required cart metadataâ€”customer identity, the sales channel and section,
 * source type (guest, member, etc), and optionally initial cart items. The cart
 * is created with an active or initial status, and its expiration is set
 * according to business policy.
 *
 * All input is validated: channels and sections must exist, customers must be
 * legitimate or guest sessions must be accepted by policy, and initial cart
 * item info (if present) must conform to schema and stock rules. Security rules
 * enforce that customers can only create carts for themselves (or their guest
 * device), while admins may create carts on behalf of any customer for
 * operational or support tasks.
 *
 * Upon successful creation, the full cart details are returned so the client
 * can proceed with add-to-cart, checkout, or further cart manipulation. Failure
 * scenarios include validation errors with input fields, unauthorized attempts
 * to create carts for other customers, or foreign key constraint violations.
 * This operation interrelates with cart listing and cart detail APIs,
 * supporting a seamless shopping experience.
 *
 * @param props.connection
 * @param props.body Cart creation request including all required metadata
 *   (customer, channel, section, etc).
 * @path /shoppingMall/admin/carts
 * @accessor api.functional.shoppingMall.admin.carts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Cart creation request including all required metadata (customer,
     * channel, section, etc).
     */
    body: IShoppingMallCart.ICreate;
  };
  export type Body = IShoppingMallCart.ICreate;
  export type Response = IShoppingMallCart;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/carts";
  export const random = (): IShoppingMallCart =>
    typia.random<IShoppingMallCart>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and paginate shopping carts for business monitoring or
 * customer dashboard (shopping_mall_carts table).
 *
 * This endpoint allows users to obtain a filtered and paginated list of carts
 * from the shopping_mall_carts table. Leveraging advanced request parameters,
 * users can search across key cart metadata including customer, channel,
 * section, cart status (active, expired, checked_out, deleted), source type, or
 * expiration window.
 *
 * Pagination and sorting options are available to ensure that large datasets
 * can be retrieved efficiently, with sensible defaults for items per page and
 * limit caps to prevent abuse. Security and privacy are critical: customers may
 * only view their own carts, while admins and potentially sellers (if allowed
 * by business policy) may filter by additional dimensions, subject to proper
 * authorization. Sensitive or deleted carts are masked or inaccessible as
 * required.
 *
 * This endpoint is designed for integration in admin panels, seller UIs, or
 * customer dashboards, supporting operational needs such as cart monitoring,
 * intervention, or analytics. It interoperates with cart detail (GET
 * /carts/{cartId}) and cart update/creation endpoints. Error handling includes
 * invalid parameter values, unauthorized access, or exceeding page size
 * limits.
 *
 * @param props.connection
 * @param props.body Filter and pagination request for listing and searching
 *   shopping carts.
 * @path /shoppingMall/admin/carts
 * @accessor api.functional.shoppingMall.admin.carts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and pagination request for listing and searching shopping
     * carts.
     */
    body: IShoppingMallCart.IRequest;
  };
  export type Body = IShoppingMallCart.IRequest;
  export type Response = IPageIShoppingMallCart.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/carts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/carts";
  export const random = (): IPageIShoppingMallCart.ISummary =>
    typia.random<IPageIShoppingMallCart.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific shopping cart
 * (shopping_mall_carts table).
 *
 * This endpoint allows an authenticated customer or an admin to retrieve the
 * full details of a specific cart instance using its unique cartId. The
 * response includes all cart metadata (customer, channel, section, status,
 * expiration), as well as the full composition of cart items, product
 * references, quantities, option snapshots, and last update timestamps.
 *
 * Security is pivotal: only the cart owner (customer) or administrators are
 * permitted to use this operation; other requests are denied. Sensitive fields
 * (such as deleted status or expired carts) may be masked as per business
 * logic. This endpoint forms the foundation for cart viewing, real-time cart
 * validation, and pre-checkout workflows.
 *
 * Error scenarios include requesting non-existent carts, permission violations,
 * or attempting to view a cart that has been deleted or expired. This operation
 * interlinks with other cart APIs, including retrieval via search (PATCH
 * /carts), cart modification or deletion, and conversion to order submission.
 * Proper audit logging is expected for compliance.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the shopping cart to be retrieved.
 * @path /shoppingMall/admin/carts/:cartId
 * @accessor api.functional.shoppingMall.admin.carts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the shopping cart to be retrieved. */
    cartId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCart;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/carts/:cartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): IShoppingMallCart =>
    typia.random<IShoppingMallCart>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the metadata and state of a shopping cart record
 * (shopping_mall_carts).
 *
 * This endpoint enables customers or authorized admin roles to update the
 * details of an existing shopping cart. Typical uses include changing the
 * associated channel or section (such as after switching store context),
 * refreshing cart status (such as from expired to active if business logic
 * permits), or updating session metadata. The action is restricted to the
 * authenticated cart owner or authorized personnel, ensuring that carts cannot
 * be arbitrarily moved between users or accessed without proper session.
 *
 * All updates are performed as hard-state changes (not soft-delete) and trigger
 * a compliance audit record. If the cart status is set to 'deleted', the
 * deleted_at timestamp will be populated for soft deletion in line with
 * compliance policies. Other fields, like source or expires_at, can also be
 * updated per business logic. Validation ensures that session context, customer
 * ownership, and cart activity state are enforced.
 *
 * Error handling returns meaningful messages for scenarios such as non-existent
 * cartId, trying to update an already-deleted cart, or a user attempting to
 * modify a cart they do not own. This integrates with the Prisma
 * shopping_mall_carts schema and its authorization logic.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the cart to update.
 * @param props.body Updated metadata and state values for the cart. Only
 *   cart-level fields can be changed; cart items require different endpoints.
 * @path /shoppingMall/admin/carts/:cartId
 * @accessor api.functional.shoppingMall.admin.carts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the cart to update. */
    cartId: string & tags.Format<"uuid">;

    /**
     * Updated metadata and state values for the cart. Only cart-level
     * fields can be changed; cart items require different endpoints.
     */
    body: IShoppingMallCart.IUpdate;
  };
  export type Body = IShoppingMallCart.IUpdate;
  export type Response = IShoppingMallCart;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/carts/:cartId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): IShoppingMallCart =>
    typia.random<IShoppingMallCart>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a shopping cart by cartId (shopping_mall_carts, soft delete).
 *
 * This API endpoint allows an authenticated user or admin to logically delete a
 * cart, marking it as deleted rather than removing it from the database
 * outright. This aligns with regulatory compliance, audit needs, and the
 * platform's evidence trail policies. Only users with ownership of the cart or
 * those with administrative privileges can perform this operation.
 *
 * Upon successful execution, the deleted_at timestamp of the
 * shopping_mall_carts row is set to the current time. Cart items remain
 * unchanged, but the cart's status is updated and it is hidden from active
 * lists in the UI. Associated cart snapshots or order data remain accessible
 * according to permission controls and are unaffected. Error scenarios include
 * attempts to delete an already-deleted cart, non-existent cartId, or lack of
 * permission based on user context.
 *
 * This API is tightly integrated into the legal and business logic of cart
 * management, evidence retention, and recoverability, as described in the
 * Prisma schema's comments.
 *
 * @param props.connection
 * @param props.cartId Unique identifier of the cart to be logically deleted.
 * @path /shoppingMall/admin/carts/:cartId
 * @accessor api.functional.shoppingMall.admin.carts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the cart to be logically deleted. */
    cartId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/carts/:cartId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/carts/${encodeURIComponent(props.cartId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
