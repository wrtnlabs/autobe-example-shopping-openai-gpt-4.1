import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCouponCampaign } from "../../../../structures/IShoppingMallCouponCampaign";
import { IPageIShoppingMallCouponCampaign } from "../../../../structures/IPageIShoppingMallCouponCampaign";

/**
 * Create a new coupon campaign (shopping_mall_coupon_campaigns table).
 *
 * This endpoint creates a new coupon campaign by inserting a record into the
 * shopping_mall_coupon_campaigns table. The operation requires the
 * administrator to supply all mandatory fields, including the campaign name
 * (which must be unique), optional description, start and end times, and the
 * present business status. The campaign can be in draft, active, or another
 * valid state upon creation, according to the business requirements. Audit and
 * compliance rules require that all creation events are logged including the
 * actor/admin and timestamp. Validation checks ensure the campaign name is not
 * duplicated and the start time precedes the end time.
 *
 * Role-based permissions mean only admin accounts, identified via
 * authentication and authorization mechanisms, can invoke this operation. The
 * operation is extensible for future features such as campaign analytics,
 * multi-language description, and advanced scheduling. Related operations
 * include updating a campaign, deleting a campaign, and listing active
 * campaigns. Errors are returned if input validation fails or if a campaign
 * name conflict occurs.
 *
 * @param props.connection
 * @param props.body Coupon campaign creation fields (name, description,
 *   schedule, business status, optional metadata)
 * @path /shoppingMall/admin/couponCampaigns
 * @accessor api.functional.shoppingMall.admin.couponCampaigns.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Coupon campaign creation fields (name, description, schedule,
     * business status, optional metadata)
     */
    body: IShoppingMallCouponCampaign.ICreate;
  };
  export type Body = IShoppingMallCouponCampaign.ICreate;
  export type Response = IShoppingMallCouponCampaign;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/couponCampaigns",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/couponCampaigns";
  export const random = (): IShoppingMallCouponCampaign =>
    typia.random<IShoppingMallCouponCampaign>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search/filter and paginate coupon campaigns from the
 * shopping_mall_coupon_campaigns table.
 *
 * This API operation allows authorized admin users to search and retrieve a
 * paginated collection of coupon campaigns configured in the shopping mall
 * system. Through the fields of shopping_mall_coupon_campaigns, users can
 * filter campaigns by name, status, date range, and description, as well as
 * sort by business status or activation window. The request body supports
 * IShoppingMallCouponCampaign.IRequest for advanced querying, including search
 * filters and pagination.
 *
 * Results will be delivered in a paginated structure, referencing the
 * IPageIShoppingMallCouponCampaign.ISummary type for optimized list display.
 * Security and privacy policies restrict this endpoint to admins, since
 * campaign data may encompass sensitive promotional strategies and performance.
 * Any search or list operation should limit results for extremely large
 * datasets and enforce rate limiting for intensive analytics use cases.
 *
 * This endpoint supports business process flows such as campaign status
 * tracking, planning, or bulk analytics. Edge cases, such as overlapping
 * campaigns or deleted data, must be handled gracefully. Errors from invalid
 * filters, page boundaries, or unauthorized requests should be consistently
 * surfaced via standard API error responses.
 *
 * Related endpoints include campaign creation (POST), campaign status updates
 * (PUT), and reading campaign details (GET by ID).
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and pagination parameters for campaign
 *   search, matching IShoppingMallCouponCampaign.IRequest.
 * @path /shoppingMall/admin/couponCampaigns
 * @accessor api.functional.shoppingMall.admin.couponCampaigns.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, sorting, and pagination parameters for campaign search,
     * matching IShoppingMallCouponCampaign.IRequest.
     */
    body: IShoppingMallCouponCampaign.IRequest;
  };
  export type Body = IShoppingMallCouponCampaign.IRequest;
  export type Response = IPageIShoppingMallCouponCampaign.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/couponCampaigns",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/couponCampaigns";
  export const random = (): IPageIShoppingMallCouponCampaign.ISummary =>
    typia.random<IPageIShoppingMallCouponCampaign.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get complete details of a coupon campaign by its campaignId from
 * shopping_mall_coupon_campaigns.
 *
 * This API endpoint provides full details of a coupon campaign configured
 * within the shopping mall system, resolving all fields from
 * shopping_mall_coupon_campaigns. The operation requires a campaignId path
 * parameter of type UUID, which uniquely identifies the campaign to retrieve.
 *
 * Security is restricted to admin roles due to the strategic and potentially
 * sensitive nature of campaign configurationâ€”including period, terms, and
 * analytics. The response body references IShoppingMallCouponCampaign,
 * containing comprehensive campaign metadata, status indicators, and activation
 * windows. If the specified campaign does not exist or is soft-deleted, the
 * system returns a suitable error message or not-found response.
 *
 * The operation supports business flows such as campaign planning, status
 * auditing, and downstream promotional/analytics orchestration. Related
 * endpoints include campaign search (PATCH), creation (POST), updating (PUT),
 * and logical deletion (DELETE). All read operations should be audit-logged for
 * compliance.
 *
 * @param props.connection
 * @param props.campaignId Unique identifier for the coupon campaign to
 *   retrieve.
 * @path /shoppingMall/admin/couponCampaigns/:campaignId
 * @accessor api.functional.shoppingMall.admin.couponCampaigns.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the coupon campaign to retrieve. */
    campaignId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCouponCampaign;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/couponCampaigns/:campaignId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/couponCampaigns/${encodeURIComponent(props.campaignId ?? "null")}`;
  export const random = (): IShoppingMallCouponCampaign =>
    typia.random<IShoppingMallCouponCampaign>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("campaignId")(() => typia.assert(props.campaignId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing coupon campaign (shopping_mall_coupon_campaigns table) by
 * campaignId.
 *
 * This endpoint allows an administrator to update a coupon campaign's metadata
 * (name, description, scheduling, status) in the shopping_mall_coupon_campaigns
 * table. The operation checks for the existence of the campaign identified by
 * the provided campaignId parameter, then applies changes to the permitted
 * fields. Validation ensures updated names remain unique and that the timing
 * fields are logically ordered. All updates are subject to compliance/audit
 * trails recording who performed the update and when.
 *
 * Only administrators may execute this operation, and attempts to update
 * nonexistent or deleted campaigns result in error responses. Related
 * operations include creating a new campaign and deleting or listing campaigns.
 * Updated records reflect the new state immediately on success.
 *
 * @param props.connection
 * @param props.campaignId The unique identifier of the coupon campaign to
 *   update
 * @param props.body New values for mutable fields of the coupon campaign (name,
 *   description, schedule, business status, etc)
 * @path /shoppingMall/admin/couponCampaigns/:campaignId
 * @accessor api.functional.shoppingMall.admin.couponCampaigns.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the coupon campaign to update */
    campaignId: string & tags.Format<"uuid">;

    /**
     * New values for mutable fields of the coupon campaign (name,
     * description, schedule, business status, etc)
     */
    body: IShoppingMallCouponCampaign.IUpdate;
  };
  export type Body = IShoppingMallCouponCampaign.IUpdate;
  export type Response = IShoppingMallCouponCampaign;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/couponCampaigns/:campaignId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/couponCampaigns/${encodeURIComponent(props.campaignId ?? "null")}`;
  export const random = (): IShoppingMallCouponCampaign =>
    typia.random<IShoppingMallCouponCampaign>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("campaignId")(() => typia.assert(props.campaignId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (logically delete) a coupon campaign
 * (shopping_mall_coupon_campaigns table) by campaignId.
 *
 * This endpoint allows administrators to logically delete (soft delete) a
 * coupon campaign identified by the campaignId parameter in the
 * shopping_mall_coupon_campaigns table. Instead of physically removing the
 * data, the deleted_at timestamp is set, preserving historical, analytical, and
 * legal information, while removing the campaign from all business and API
 * responses except those intended for audit/compliance purposes. The operation
 * enforces that the campaign is not already deleted, may check that associated
 * coupons are also safely handled, and always creates a corresponding audit
 * trail event documenting the actor and timestamp.
 *
 * Restricted to admin users, this operation prevents accidental or unauthorized
 * campaign erasure. Attempts to delete an already deleted or non-existent
 * campaign will fail with a clear error. Soft-deleted campaigns remain
 * available for compliance, analytics, or restoration workflows.
 *
 * @param props.connection
 * @param props.campaignId The unique identifier of the coupon campaign to
 *   delete
 * @path /shoppingMall/admin/couponCampaigns/:campaignId
 * @accessor api.functional.shoppingMall.admin.couponCampaigns.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the coupon campaign to delete */
    campaignId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/couponCampaigns/:campaignId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/couponCampaigns/${encodeURIComponent(props.campaignId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("campaignId")(() => typia.assert(props.campaignId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
