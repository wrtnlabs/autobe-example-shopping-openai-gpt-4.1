import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Soft delete a favorited inquiry by ID in shopping_mall_favorite_inquiries
 * (Favorites module).
 *
 * This endpoint enables a customer to unfavorite a previously favorited product
 * inquiry. Instead of physically deleting the favorite record, it performs a
 * soft deletion by setting the deleted_at timestamp, preserving the full
 * snapshot history of the associated inquiry for audit, compliance, and
 * potential future dispute resolution.
 *
 * Role-based security is enforced: customers can remove their own favorite
 * inquiries, while platform administrators can remove any for regulatory or
 * support purposes. The endpoint does not require a request body.
 *
 * Business logic will ensure that upon unfavoriting, any active notifications
 * linked to this favorite are unsubscribed. The deletion is audit-logged, and
 * the action can be viewed in the user's favorite inquiry management
 * interface.
 *
 * Error handling includes: 404 for nonexistent or already deleted
 * favoriteInquiryId, 403 if requesting actor lacks proper ownership/access, and
 * audit trail creation for successful and failed attempts.
 *
 * @param props.connection
 * @param props.favoriteInquiryId ID of the favorited inquiry to be removed
 * @path /shoppingMall/admin/favoriteInquiries/:favoriteInquiryId
 * @accessor api.functional.shoppingMall.admin.favoriteInquiries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the favorited inquiry to be removed */
    favoriteInquiryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/favoriteInquiries/:favoriteInquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/favoriteInquiries/${encodeURIComponent(props.favoriteInquiryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteInquiryId")(() =>
        typia.assert(props.favoriteInquiryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
