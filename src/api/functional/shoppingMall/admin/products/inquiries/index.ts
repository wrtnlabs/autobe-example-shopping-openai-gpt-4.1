import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductInquiry } from "../../../../../structures/IShoppingMallProductInquiry";
export * as answers from "./answers/index";

/**
 * Retrieve details of a specific product inquiry
 * (shopping_mall_product_inquiries) by inquiryId.
 *
 * This API operation retrieves detailed information about a single product
 * inquiry from the shopping_mall_product_inquiries table using the inquiry's
 * unique identifier and the related product's identifier. The endpoint delivers
 * all core business fields such as title, body, is_private, answered,
 * moderation_status, and timestamps, as well as information about the author
 * (customer or seller).
 *
 * Access control is enforced by examining the inquirer, seller relationship to
 * the product, and administrative privilege. For private inquiries, visibility
 * is limited to the author, seller, and admin roles; for public inquiries, all
 * authenticated users may view the inquiry details. The operation supports
 * robust audit and compliance requirements, including returning fields
 * necessary for evidence and moderation workflows as described in the Prisma
 * schema documentation.
 *
 * Error scenarios, such as unauthorized access to private content or
 * non-existent inquiry/product, return appropriate error messages. This API
 * operation complements list/index endpoints and pairs with creation, update,
 * and delete routes for the same entity.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product related to the
 *   inquiry.
 * @param props.inquiryId Unique identifier of the product inquiry record to
 *   retrieve.
 * @path /shoppingMall/admin/products/:productId/inquiries/:inquiryId
 * @accessor api.functional.shoppingMall.admin.products.inquiries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target product related to the inquiry. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the product inquiry record to retrieve. */
    inquiryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProductInquiry;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/products/:productId/inquiries/:inquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}`;
  export const random = (): IShoppingMallProductInquiry =>
    typia.random<IShoppingMallProductInquiry>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing product inquiry (shopping_mall_product_inquiries) by
 * inquiryId.
 *
 * This API endpoint permits the update of an existing product inquiry’s fields
 * by the author or a privileged admin. Editable fields include title, body, and
 * is_private (privacy), subject to business rules. The record is identified by
 * inquiryId and scoped to the related product via productId. Audit constraints
 * require that every edit creates an immutable snapshot in the associated
 * version history table, preserving rollback capability and legal evidence as
 * described in the Prisma schema.
 *
 * Permission checks enforce that only the author (customer or seller), or an
 * admin, may perform the update, and that the inquiry is not already deleted or
 * locked by moderation. Any changes in moderation status, notification
 * triggers, or sensitive context (such as changing privacy from public to
 * private) are validated according to the system’s compliance and moderation
 * model. Appropriate errors are returned on validation, permission, or record
 * existence failures.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product related to the
 *   inquiry.
 * @param props.inquiryId Unique identifier of the product inquiry to update.
 * @param props.body Updated inquiry details (content, privacy, etc.) following
 *   edit validation, as defined in the schema.
 * @path /shoppingMall/admin/products/:productId/inquiries/:inquiryId
 * @accessor api.functional.shoppingMall.admin.products.inquiries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the product related to the inquiry. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the product inquiry to update. */
    inquiryId: string & tags.Format<"uuid">;

    /**
     * Updated inquiry details (content, privacy, etc.) following edit
     * validation, as defined in the schema.
     */
    body: IShoppingMallProductInquiry.IUpdate;
  };
  export type Body = IShoppingMallProductInquiry.IUpdate;
  export type Response = IShoppingMallProductInquiry;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/products/:productId/inquiries/:inquiryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}`;
  export const random = (): IShoppingMallProductInquiry =>
    typia.random<IShoppingMallProductInquiry>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a product inquiry (shopping_mall_product_inquiries) by inquiryId.
 *
 * This API operation logically deletes (soft deletes) a product inquiry,
 * marking the record with a deleted_at timestamp rather than removing it from
 * the database, aligning with audit and compliance requirements for evidence
 * preservation as described in the schema. The inquiry is identified by
 * inquiryId and productId, and soft deletion can only be performed by the
 * inquiry’s author (customer or seller) or an admin with sufficient
 * privileges.
 *
 * Upon soft delete, the inquiry becomes excluded from future list or get
 * operations for regular users, but is retained for legal, moderation, and
 * rollback workflows. This action also triggers audit log generation and may
 * notify moderators or linked authors per notification configuration.
 * Unauthorized deletion attempts, requests for non-existent or already deleted
 * inquiries, or attempts to delete another user's inquiry are denied with
 * appropriate errors.
 *
 * This endpoint is intended to work alongside creation, update, and retrieval
 * APIs for inquiries, supporting full evidence trail and compliance logic.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product related to the
 *   inquiry.
 * @param props.inquiryId Unique identifier of the product inquiry to soft
 *   delete.
 * @path /shoppingMall/admin/products/:productId/inquiries/:inquiryId
 * @accessor api.functional.shoppingMall.admin.products.inquiries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the product related to the inquiry. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the product inquiry to soft delete. */
    inquiryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/products/:productId/inquiries/:inquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
