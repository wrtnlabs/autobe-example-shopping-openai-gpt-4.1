import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductContent } from "../../../../../structures/IShoppingMallProductContent";

/**
 * Retrieve product content for a specific product
 * (shopping_mall_product_content).
 *
 * This operation enables sellers and administrators to retrieve rich content
 * data for any product they own or manage. Information such as product
 * description (in Markdown/HTML), return policy, warranty details, and the
 * content locale are all returned as present in the
 * shopping_mall_product_content table. This is used to populate product edit
 * screens, preview product pages, or synchronize product information with
 * external platforms.
 *
 * Access checks enforce that the requester is the owner of the product (seller
 * role) or an authorized admin. The operation returns errors in cases of
 * missing product or content, or if the requester lacks sufficient permission.
 * All access to product content is logged for legal, compliance, or audit
 * purposes, and the endpoint does not allow modifications—purely read-only
 * access.
 *
 * The operation supports localization: the product content may be localized to
 * support multi-language catalogs. It outputs all configured content for the
 * product, supporting compliance with privacy, legal display, and business QA
 * workflows.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product to fetch content for.
 * @path /shoppingMall/admin/products/:productId/content
 * @accessor api.functional.shoppingMall.admin.products.content.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the product to fetch content for. */
    productId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProductContent;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/products/:productId/content",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/content`;
  export const random = (): IShoppingMallProductContent =>
    typia.random<IShoppingMallProductContent>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update rich content and policies for an existing shoppingMall product by
 * productId.
 *
 * Update the rich content of a shopping mall product, maintaining full
 * auditability and support for multilingual data, structured product
 * descriptions, return and warranty policy text. This operation enforces
 * permission checks, ensuring that only the product owner (seller) or platform
 * administrators can alter product content. It references the product and
 * content by their unique identifier (productId) as per the Prisma schema,
 * updating only allowable fields—content_markdown, return_policy,
 * warranty_policy, and locale.
 *
 * All changes result in snapshotting the prior state for audit and compliance,
 * preserving immutable historical versions as mandated by the platform's
 * evidence management requirements. Security logic ensures rejection of updates
 * for unauthorized users or for products in finalized/immutable states.
 * Validation includes Markdown/HTML correctness, legal compliance for policy
 * fields, and maximum length rules as defined in the database schema. Any
 * invalid update, role violation, or update to a deleted/discontinued product
 * is denied with an appropriate error code and reason in the response.
 *
 * Related APIs include creation of product content when registering a new
 * product and retrieval of product content for read operations. This endpoint
 * purely performs update within the bounds of the defined product content
 * schema.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product being updated.
 * @param props.body Fields to update product's content (rich description,
 *   return/warranty policy, and locale) as per schema.
 * @path /shoppingMall/admin/products/:productId/content
 * @accessor api.functional.shoppingMall.admin.products.content.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the product being updated. */
    productId: string & tags.Format<"uuid">;

    /**
     * Fields to update product's content (rich description, return/warranty
     * policy, and locale) as per schema.
     */
    body: IShoppingMallProductContent.IUpdate;
  };
  export type Body = IShoppingMallProductContent.IUpdate;
  export type Response = IShoppingMallProductContent;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/products/:productId/content",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/products/${encodeURIComponent(props.productId ?? "null")}/content`;
  export const random = (): IShoppingMallProductContent =>
    typia.random<IShoppingMallProductContent>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
