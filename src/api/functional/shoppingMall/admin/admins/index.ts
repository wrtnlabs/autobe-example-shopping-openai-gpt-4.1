import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAdmin } from "../../../../structures/IShoppingMallAdmin";
import { IPageIShoppingMallAdmin } from "../../../../structures/IPageIShoppingMallAdmin";
export * as roleEscalations from "./roleEscalations/index";

/**
 * Search and retrieve a paginated, filtered list of administrators from the
 * shopping_mall_admins table.
 *
 * Retrieve a filtered and paginated list of administrator profiles from the
 * platform. This endpoint provides searching, sorting, and filtering, allowing
 * system owners to review administrator accounts by various fields such as
 * email, status (active, suspended, pending), KYC verification status, and
 * creation date.
 *
 * Authorization is restricted to users with administrative privileges, as
 * administrator profile data is considered highly sensitive. Proper
 * authentication is required and the system should apply audit and
 * rate-limiting policies to this endpoint.
 *
 * This operation works directly with the shopping_mall_admins table in the
 * Prisma schema, referencing fields like email, name, status, kyc_status, and
 * audit metadata. It supports advanced filtering through its request body,
 * enabling use cases such as admin account reviews, compliance reporting,
 * escalation approval checks, and general user management.
 *
 * @param props.connection
 * @param props.body Search and filtering criteria for finding administrator
 *   accounts, including pagination and sort options.
 * @path /shoppingMall/admin/admins
 * @accessor api.functional.shoppingMall.admin.admins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filtering criteria for finding administrator accounts,
     * including pagination and sort options.
     */
    body: IShoppingMallAdmin.IRequest;
  };
  export type Body = IShoppingMallAdmin.IRequest;
  export type Response = IPageIShoppingMallAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/admins";
  export const random = (): IPageIShoppingMallAdmin.ISummary =>
    typia.random<IPageIShoppingMallAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get the full, detailed profile for an administrator using their adminId from
 * shopping_mall_admins.
 *
 * Retrieve the full profile and account information of an administrator by
 * their unique identifier. This includes personal profile (name, email), status
 * (active, suspended, pending), KYC verification, and identity audit fields
 * necessary for role-based access management and compliance.
 *
 * This operation is strictly role-restricted: only users with admin-level
 * privileges can access this endpoint, due to the sensitive nature of
 * administrator data. All read activities are auditable and should be logged
 * for compliance.
 *
 * The underlying Prisma schema (shopping_mall_admins) defines the fields
 * returned, ensuring only valid, authorized data is included. The response
 * supports audit and management use cases, such as reviewing admin escalation
 * status or handling support tickets related to admin accounts.
 *
 * @param props.connection
 * @param props.adminId The unique ID of the administrator to retrieve profile
 *   information for.
 * @path /shoppingMall/admin/admins/:adminId
 * @accessor api.functional.shoppingMall.admin.admins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * The unique ID of the administrator to retrieve profile information
     * for.
     */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAdmin;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IShoppingMallAdmin =>
    typia.random<IShoppingMallAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update administrator account information by adminId (shopping_mall_admins).
 *
 * Update an administrator's account fields, including their contact
 * information, account status (active, pending, suspended), KYC verification
 * state, or password hash (for authentication rotation). This could be for
 * supporting privilege escalation, admin onboarding, or handling
 * security/compliance workflow.
 *
 * This endpoint is only accessible to administrators with sufficient
 * privileges. All actions via this endpoint are logged for audit and compliance
 * purposes. The request body follows the shopping_mall_admins Prisma schema,
 * supporting only updatable fields and rejecting immutable ones (such as ID or
 * audit/history fields).
 *
 * Use cases include onboarding/exiting admins, security credential rotations,
 * updating compliance information (KYC), and locking/unlocking admin accounts.
 *
 * @param props.connection
 * @param props.adminId The unique ID of the administrator whose profile will be
 *   updated.
 * @param props.body Update payload for administrator fields allowed in
 *   shopping_mall_admins.
 * @path /shoppingMall/admin/admins/:adminId
 * @accessor api.functional.shoppingMall.admin.admins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique ID of the administrator whose profile will be updated. */
    adminId: string & tags.Format<"uuid">;

    /**
     * Update payload for administrator fields allowed in
     * shopping_mall_admins.
     */
    body: IShoppingMallAdmin.IUpdate;
  };
  export type Body = IShoppingMallAdmin.IUpdate;
  export type Response = IShoppingMallAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/admins/:adminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): IShoppingMallAdmin =>
    typia.random<IShoppingMallAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically delete an administrator (soft delete by setting deleted_at) using
 * their adminId.
 *
 * Logically deletes an administrator account from the platform by setting the
 * deleted_at timestamp on the shopping_mall_admins record corresponding to
 * adminId. This soft-deletion keeps all history and audit fields intact for
 * compliance, rollback, and legal reasons. The record will not be purged, so
 * admins cannot be recovered by regular users but may be retained for audit.
 *
 * This operation is strictly privileged: it is available only to authenticated
 * administrative users. All delete actions must be logged and auditable. This
 * endpoint does not return a response body upon successful completion. The
 * operation is essential for offboarding, security, or compliance situations
 * where administrators must be deactivated from the system.
 *
 * @param props.connection
 * @param props.adminId The unique ID of the administrator to logically delete.
 * @path /shoppingMall/admin/admins/:adminId
 * @accessor api.functional.shoppingMall.admin.admins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique ID of the administrator to logically delete. */
    adminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
