import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallEntityAttachmentLink } from "../../../../structures/IShoppingMallEntityAttachmentLink";
import { IPageIShoppingMallEntityAttachmentLink } from "../../../../structures/IPageIShoppingMallEntityAttachmentLink";

/**
 * Create a new entity-attachment link (shopping_mall_entity_attachment_links
 * table).
 *
 * This operation creates an association between an attachment (file resource)
 * and a business entity (product, order, review, etc.) by inserting a new
 * record in the shopping_mall_entity_attachment_links table. The request
 * includes the attachment ID, entity type (e.g., 'product', 'order', 'review'),
 * the related entity's UUID, the ID of the user performing the action, the
 * purpose or context (such as 'evidence', 'thumbnail'), any visibility
 * constraints, and audit meta fields.
 *
 * On creation, the operation enforces permission checks according to the
 * current user's role and visibility context, ensuring only permitted users can
 * link attachments to protected business entities. The created
 * entity-attachment link is subsequently used throughout the platform to
 * retrieve or authorize access to the file. Logical business constraints such
 * as unique (entity_type, entity_id, attachment_id) triples are enforced. The
 * response includes full details of the association as per
 * IShoppingMallEntityAttachmentLink. In case of violation (duplicate, invalid
 * reference, or permission error), appropriate error messages are returned.
 *
 * @param props.connection
 * @param props.body Payload to create an entity-attachment link, associating an
 *   attachment to a business entity.
 * @path /shoppingMall/admin/entityAttachmentLinks
 * @accessor api.functional.shoppingMall.admin.entityAttachmentLinks.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Payload to create an entity-attachment link, associating an
     * attachment to a business entity.
     */
    body: IShoppingMallEntityAttachmentLink.ICreate;
  };
  export type Body = IShoppingMallEntityAttachmentLink.ICreate;
  export type Response = IShoppingMallEntityAttachmentLink;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/admin/entityAttachmentLinks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/entityAttachmentLinks";
  export const random = (): IShoppingMallEntityAttachmentLink =>
    typia.random<IShoppingMallEntityAttachmentLink>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of entity/file links
 * (shopping_mall_entity_attachment_links table).
 *
 * Retrieve a pageable, searchable, and sortable list of entity-attachment links
 * for the shopping mall backend system. This operation allows system
 * administrators and privileged business users to enumerate, filter, and
 * analyze all file links associated with business entities such as products,
 * orders, reviews, or comments, based on flexible search criteria.
 *
 * Access controls limit the results to those entities/attachments allowed by
 * the caller's role and visibility permissions. The payload supports pagination
 * (page number/size), optional filtering by entity type, ID, role, linkage
 * purpose, attachment ID, and created/deleted state. The response returns a
 * paginated object containing entity-attachment link metadata, audit info, and
 * optionally summaries of both attachments and linked entities for system
 * review purposes.
 *
 * This operation is part of the larger attachment/file management, evidence,
 * and compliance suite for the modular shopping mall platform. Use it to
 * support audit, evidence query, or downstream AI/business analytics
 * workflows.
 *
 * @param props.connection
 * @param props.body Search criteria for entity-attachment links, including
 *   pagination, filters, and sort order.
 * @path /shoppingMall/admin/entityAttachmentLinks
 * @accessor api.functional.shoppingMall.admin.entityAttachmentLinks.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria for entity-attachment links, including pagination,
     * filters, and sort order.
     */
    body: IShoppingMallEntityAttachmentLink.IRequest;
  };
  export type Body = IShoppingMallEntityAttachmentLink.IRequest;
  export type Response = IPageIShoppingMallEntityAttachmentLink;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/admin/entityAttachmentLinks",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/admin/entityAttachmentLinks";
  export const random = (): IPageIShoppingMallEntityAttachmentLink =>
    typia.random<IPageIShoppingMallEntityAttachmentLink>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an entity-attachment link by ID (shopping_mall_entity_attachment_links
 * table).
 *
 * This endpoint allows the update of an entity-attachment link's metadata, such
 * as purpose, permission scope, or visibility roles, by accepting a payload
 * conforming to IShoppingMallEntityAttachmentLink.IUpdate. The operation
 * validates the existence of the link (by UUID), verifies administrative
 * permissions, and applies requested changes.
 *
 * Updates may include modifying the business context (purpose), changing who
 * can access the attachment via role-based visibility, or adding audit-related
 * context like justification for permission changes. The operation does not
 * allow changing the attachment, entity type, or link target for audit
 * integrity. If the target record is not found, deleted, or permissions are
 * insufficient, appropriate errors are returned. The response includes the
 * full, updated entity-attachment link definition as specified by
 * IShoppingMallEntityAttachmentLink.
 *
 * @param props.connection
 * @param props.entityAttachmentLinkId Unique identifier of the
 *   entity-attachment link (UUID).
 * @param props.body Payload containing updated attributes for the
 *   entity-attachment link.
 * @path /shoppingMall/admin/entityAttachmentLinks/:entityAttachmentLinkId
 * @accessor api.functional.shoppingMall.admin.entityAttachmentLinks.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the entity-attachment link (UUID). */
    entityAttachmentLinkId: string & tags.Format<"uuid">;

    /** Payload containing updated attributes for the entity-attachment link. */
    body: IShoppingMallEntityAttachmentLink.IUpdate;
  };
  export type Body = IShoppingMallEntityAttachmentLink.IUpdate;
  export type Response = IShoppingMallEntityAttachmentLink;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/admin/entityAttachmentLinks/:entityAttachmentLinkId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/admin/entityAttachmentLinks/${encodeURIComponent(props.entityAttachmentLinkId ?? "null")}`;
  export const random = (): IShoppingMallEntityAttachmentLink =>
    typia.random<IShoppingMallEntityAttachmentLink>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("entityAttachmentLinkId")(() =>
        typia.assert(props.entityAttachmentLinkId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete an entity-attachment link by ID
 * (shopping_mall_entity_attachment_links table).
 *
 * This operation marks the specified entity-attachment link as deleted
 * (soft-delete) by setting the deleted_at timestamp, as supported by the
 * shopping_mall_entity_attachment_links schema. Full audit history of the
 * association is preserved for compliance, dispute resolution, or legal needs.
 * The operation verifies administrator permissions and the current active state
 * of the link before performing the removal.
 *
 * Soft-deleted links are excluded from normal queries but retained for
 * regulatory retrieval and audit. If the entity-attachment link is already
 * deleted, not found, or access is denied, error messages are returned. No
 * response body is included; success can be confirmed by HTTP status and
 * subsequent retrieval attempts.
 *
 * @param props.connection
 * @param props.entityAttachmentLinkId Unique identifier of the
 *   entity-attachment link (UUID).
 * @path /shoppingMall/admin/entityAttachmentLinks/:entityAttachmentLinkId
 * @accessor api.functional.shoppingMall.admin.entityAttachmentLinks.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the entity-attachment link (UUID). */
    entityAttachmentLinkId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/admin/entityAttachmentLinks/:entityAttachmentLinkId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/admin/entityAttachmentLinks/${encodeURIComponent(props.entityAttachmentLinkId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("entityAttachmentLinkId")(() =>
        typia.assert(props.entityAttachmentLinkId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
