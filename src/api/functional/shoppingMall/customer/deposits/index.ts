import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallDeposit } from "../../../../structures/IShoppingMallDeposit";
export * as transactions from "./transactions/index";

/**
 * Get details of a specific deposit account by its ID from
 * shopping_mall_deposits table.
 *
 * Retrieve a single deposit account by its unique identifier. This API provides
 * detailed information on the balance, status, timestamps, and the associated
 * customer of the deposit account.
 *
 * This operation accesses the shopping_mall_deposits table. The data returned
 * includes both financial state (balance/status) and audit metadata (created,
 * updated, soft-deleted timestamps) as defined in the Prisma schema.
 *
 * Only the owner customer (authenticated) or administrators may use this
 * endpoint, enforced via authorization role in the response. Unauthorized
 * attempts are denied with standard permission errors. Error responses include
 * not-found for non-existent or inaccessible depositId, or forbidden if access
 * is outside permitted scope.
 *
 * Related APIs for deposit transactions and account ledgers are available but
 * not directly listed here.
 *
 * @param props.connection
 * @param props.depositId Unique identifier for the deposit account (UUID).
 * @path /shoppingMall/customer/deposits/:depositId
 * @accessor api.functional.shoppingMall.customer.deposits.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the deposit account (UUID). */
    depositId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallDeposit;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/deposits/:depositId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/deposits/${encodeURIComponent(props.depositId ?? "null")}`;
  export const random = (): IShoppingMallDeposit =>
    typia.random<IShoppingMallDeposit>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update existing deposit account data by depositId in shopping_mall_deposits.
 *
 * Update the status or other modifiable properties of an existing deposit
 * account using its depositId. This includes status transitions (e.g., active,
 * frozen, under_review, closed) and, where permitted, balance adjustments
 * following regulatory or business-policy controls.
 *
 * Direct arbitrary changes to the balance field are restricted and require
 * proper audit/reason according to business process—this API should only be
 * used in the context of manual adjustments, administrative reviews, or
 * customer-initiated account status changes. Attempts to update non-existent or
 * soft-deleted deposits will result in not-found errors.
 *
 * All update actions are performed with full audit logging, and only authorized
 * actors (account owner or admin) are allowed. No other fields beyond those
 * allowed in IShoppingMallDeposit.IUpdate may be modified through this
 * operation.
 *
 * @param props.connection
 * @param props.depositId Unique identifier for the deposit account (UUID).
 * @param props.body Updated deposit account data (e.g., status, manual
 *   adjustments, or review outcome).
 * @path /shoppingMall/customer/deposits/:depositId
 * @accessor api.functional.shoppingMall.customer.deposits.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the deposit account (UUID). */
    depositId: string & tags.Format<"uuid">;

    /**
     * Updated deposit account data (e.g., status, manual adjustments, or
     * review outcome).
     */
    body: IShoppingMallDeposit.IUpdate;
  };
  export type Body = IShoppingMallDeposit.IUpdate;
  export type Response = IShoppingMallDeposit;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/deposits/:depositId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/deposits/${encodeURIComponent(props.depositId ?? "null")}`;
  export const random = (): IShoppingMallDeposit =>
    typia.random<IShoppingMallDeposit>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (logical removal) of deposit account by depositId in
 * shopping_mall_deposits table.
 *
 * Mark the specified deposit account as soft-deleted by setting the deleted_at
 * timestamp. This logical deletion ensures the record is retained for audit and
 * compliance purposes, in line with regulatory requirements for financial
 * systems.
 *
 * Only the owner (authenticated user) or an administrator can invoke this
 * delete operation. If the depositId does not exist, a not-found error is
 * returned. After soft deletion, all transactional activity (payments, refunds)
 * for this account are blocked, but historical data remains queryable for
 * evidence and compliance.
 *
 * Attempts to hard-delete the physical record are denied—only logical deletion
 * supported per schema. An audit trail records who, when, and why the deletion
 * occurred.
 *
 * Error handling includes business logic errors (e.g., trying to delete an
 * already-deleted deposit), and appropriate security checks for role-based
 * permission enforcement.
 *
 * @param props.connection
 * @param props.depositId Unique identifier for the deposit account (UUID).
 * @path /shoppingMall/customer/deposits/:depositId
 * @accessor api.functional.shoppingMall.customer.deposits.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the deposit account (UUID). */
    depositId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/deposits/:depositId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/deposits/${encodeURIComponent(props.depositId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new deposit account for a customer in shopping_mall_deposits table.
 *
 * Create a new deposit account for a user. This endpoint receives account
 * initialization data—linking to the customer, setting initial balance, and
 * status. Validation checks include ensuring a customer does not already have
 * an existing active deposit account (enforced by Prisma unique constraint).
 * Attempts to create a duplicate will return a business conflict error.
 *
 * Only authenticated users are allowed to trigger deposit account creation
 * (role: customer). Audit fields (created_at, updated_at) are set by the
 * system. Responses include the new deposit account object as persisted in the
 * database.
 *
 * @param props.connection
 * @param props.body Initial deposit account creation data including customer
 *   linkage, balance, and status.
 * @path /shoppingMall/customer/deposits
 * @accessor api.functional.shoppingMall.customer.deposits.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Initial deposit account creation data including customer linkage,
     * balance, and status.
     */
    body: IShoppingMallDeposit.ICreate;
  };
  export type Body = IShoppingMallDeposit.ICreate;
  export type Response = IShoppingMallDeposit;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/deposits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/deposits";
  export const random = (): IShoppingMallDeposit =>
    typia.random<IShoppingMallDeposit>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
