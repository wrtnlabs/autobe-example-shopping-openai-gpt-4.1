import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallDepositTransaction } from "../../../../../structures/IShoppingMallDepositTransaction";
import { IPageIShoppingMallDepositTransaction } from "../../../../../structures/IPageIShoppingMallDepositTransaction";

/**
 * Create/deposit a new transaction record for a digital wallet
 * (IShoppingMallDepositTransaction).
 *
 * Create a new transaction for a specific user's digital deposit account. The
 * request payload determines the transaction type (income, outcome, refund,
 * admin_adjustment, etc.), amount, business status, and any linked references
 * (such as orders or audit events). Upon creation, the operation enforces
 * business rule validation—including non-negative balances, valid status
 * transitions, and fraud/risk heuristics—and updates the target deposit's
 * balance accordingly.
 *
 * All creation events are appended to the deposit's audit log and may trigger
 * compliance or risk scoring. This operation supports customer-initiated
 * activity (manual top-up, refund, spending) as well as admin-initiated
 * adjustments (freezing, deductions, fraud response). Strong access control
 * ensures only the deposit owner (for personal use) or authorized admins (for
 * adjustments/mitigation) can create new records. Upon success, the fully
 * detailed transaction DTO is returned, including the updated status and
 * linkage metadata.
 *
 * @param props.connection
 * @param props.depositId ID of the target deposit account the new transaction
 *   will be applied to.
 * @param props.body Complete information required to create a new deposit
 *   transaction—type, amount, status, references, evidence, and reason.
 * @path /shoppingMall/customer/deposits/:depositId/transactions
 * @accessor api.functional.shoppingMall.customer.deposits.transactions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * ID of the target deposit account the new transaction will be applied
     * to.
     */
    depositId: string & tags.Format<"uuid">;

    /**
     * Complete information required to create a new deposit
     * transaction—type, amount, status, references, evidence, and reason.
     */
    body: IShoppingMallDepositTransaction.ICreate;
  };
  export type Body = IShoppingMallDepositTransaction.ICreate;
  export type Response = IShoppingMallDepositTransaction;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/deposits/:depositId/transactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/deposits/${encodeURIComponent(props.depositId ?? "null")}/transactions`;
  export const random = (): IShoppingMallDepositTransaction =>
    typia.random<IShoppingMallDepositTransaction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/filter all transactions in a specific deposit account
 * (IShoppingMallDepositTransaction).
 *
 * Retrieve all transactions belonging to a specific user's digital deposit
 * account, as referenced by the depositId path parameter. The operation
 * supports complex querying options—such as searching by transaction type,
 * business status, order reference, or time window—to provide comprehensive
 * visibility over deposit activity. This multi-role endpoint requires
 * authentication as the customer owner or an administrator with audit
 * permissions.
 *
 * Returned results can be filtered and paginated to handle large account
 * histories efficiently. All records returned are compliant with the regulatory
 * requirement for evidentiary reporting. Responses exclude logically deleted
 * transactions by default, but the schema supports soft deletion for
 * compliance/audit purposes. This operation directly references
 * 'shopping_mall_deposit_transactions' and returns paged data using the
 * appropriate DTO.
 *
 * Security and role validation are critical—customers may access only their own
 * deposit account transactions, while administrators can access all.
 * Rate-limiting and access logging should be applied due to the sensitivity of
 * financial data.
 *
 * @param props.connection
 * @param props.depositId ID of the target deposit account for which
 *   transactions will be listed.
 * @param props.body Filter and pagination parameters for the deposit account
 *   transaction query. May include type, business_status, order reference, date
 *   range, or amount range.
 * @path /shoppingMall/customer/deposits/:depositId/transactions
 * @accessor api.functional.shoppingMall.customer.deposits.transactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * ID of the target deposit account for which transactions will be
     * listed.
     */
    depositId: string & tags.Format<"uuid">;

    /**
     * Filter and pagination parameters for the deposit account transaction
     * query. May include type, business_status, order reference, date
     * range, or amount range.
     */
    body: IShoppingMallDepositTransaction.IRequest;
  };
  export type Body = IShoppingMallDepositTransaction.IRequest;
  export type Response = IPageIShoppingMallDepositTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/deposits/:depositId/transactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/deposits/${encodeURIComponent(props.depositId ?? "null")}/transactions`;
  export const random = (): IPageIShoppingMallDepositTransaction =>
    typia.random<IPageIShoppingMallDepositTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific deposit transaction by transactionId
 * (IShoppingMallDepositTransaction).
 *
 * Retrieve full information for a specific digital deposit transaction, using
 * both the depositId and transactionId as identifiers. This operation returns
 * all relevant metadata; such as transaction type, order or evidence linkage,
 * business status, amount, reversal history, and audit reference. This is
 * essential for supporting customer queries, handling financial disputes,
 * enabling refund workflows, and investigating suspected fraud or risk cases.
 *
 * The operation strictly enforces access control: only the deposit account
 * owner or system administrators may access individual transaction details for
 * privacy and security reasons. Every access is logged for an audit trail. Data
 * is returned as a fully detailed DTO, with all soft deletion or reversal
 * metadata included as required.
 *
 * @param props.connection
 * @param props.depositId ID of the parent deposit account (for
 *   cross-verification and access control).
 * @param props.transactionId Unique identifier for the deposit transaction to
 *   retrieve.
 * @path /shoppingMall/customer/deposits/:depositId/transactions/:transactionId
 * @accessor api.functional.shoppingMall.customer.deposits.transactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * ID of the parent deposit account (for cross-verification and access
     * control).
     */
    depositId: string & tags.Format<"uuid">;

    /** Unique identifier for the deposit transaction to retrieve. */
    transactionId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallDepositTransaction;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/deposits/:depositId/transactions/:transactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/deposits/${encodeURIComponent(props.depositId ?? "null")}/transactions/${encodeURIComponent(props.transactionId ?? "null")}`;
  export const random = (): IShoppingMallDepositTransaction =>
    typia.random<IShoppingMallDepositTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
      assert.param("transactionId")(() => typia.assert(props.transactionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific transaction for a deposit account
 * (IShoppingMallDepositTransaction).
 *
 * Modify a specific transaction within a digital deposit account, as referenced
 * by depositId and transactionId. Permitted updates include status advancement,
 * fraud/risk flagging, reversal/adjustment actions, and administrative
 * explanations. Strict validation enforces eligible transitions, ensuring core
 * financial invariants are respected (e.g., no negative post-factum balances,
 * evidentiary snapshots on reversal). All updates generate audit events
 * detailing before/after state, actor, and reason for change.
 *
 * While admins can perform more extensive updates (status, fraud marking,
 * correction), users are limited to allowed fields per business rules and only
 * for their own account transactions. Every operation is logged for
 * regulatory/audit compliance, and errors on improper updates are surfaced with
 * actionable messages. Responses return the fully revised transaction DTO upon
 * success.
 *
 * @param props.connection
 * @param props.depositId ID of the deposit account parent. Required for access
 *   control and context.
 * @param props.transactionId ID of the transaction to update.
 * @param props.body Fields to update for the specified deposit
 *   transaction—e.g., business_status, reversal info, fraud markers, etc.
 * @path /shoppingMall/customer/deposits/:depositId/transactions/:transactionId
 * @accessor api.functional.shoppingMall.customer.deposits.transactions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * ID of the deposit account parent. Required for access control and
     * context.
     */
    depositId: string & tags.Format<"uuid">;

    /** ID of the transaction to update. */
    transactionId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the specified deposit transaction—e.g.,
     * business_status, reversal info, fraud markers, etc.
     */
    body: IShoppingMallDepositTransaction.IUpdate;
  };
  export type Body = IShoppingMallDepositTransaction.IUpdate;
  export type Response = IShoppingMallDepositTransaction;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/deposits/:depositId/transactions/:transactionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/deposits/${encodeURIComponent(props.depositId ?? "null")}/transactions/${encodeURIComponent(props.transactionId ?? "null")}`;
  export const random = (): IShoppingMallDepositTransaction =>
    typia.random<IShoppingMallDepositTransaction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositId")(() => typia.assert(props.depositId));
      assert.param("transactionId")(() => typia.assert(props.transactionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
