import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallFavoriteInquiry } from "../../../../structures/IShoppingMallFavoriteInquiry";
import { IPageIShoppingMallFavoriteInquiry } from "../../../../structures/IPageIShoppingMallFavoriteInquiry";

/**
 * Mark a product inquiry as a favorite for the user and store its snapshot.
 *
 * This operation allows users to favorite a specific product inquiry, linking
 * it to their favorites list with a preserved, immutable snapshot for audit and
 * evidence purposes. The user provides the inquiry to favorite, notification
 * preference, and any optional organizational label. The system verifies entity
 * validity, ownership/visibility rules (e.g., cannot favorite another user's
 * private inquiry), and prevents duplicate favorites for the same inquiry by
 * the same user.
 *
 * Upon successful creation, a shopping_mall_favorite_inquiries record is
 * written, referencing the immutable snapshot in
 * shopping_mall_favorite_snapshots. Notification settings and user-supplied
 * labels/tags are included. Re-favoriting after delete triggers a new snapshot
 * and favorite record.
 *
 * Business rules include respecting soft deletion (inquiries/favorites), audit
 * trail enforcement, and strict permission checks: only the owner of the
 * favorite can create or manage these records. Admins may perform override
 * operations for audit via separate admin API if needed.
 *
 * @param props.connection
 * @param props.body Data required to mark a product inquiry as a favorite
 *   (inquiry reference, notification settings, optional label).
 * @path /shoppingMall/customer/favoriteInquiries
 * @accessor api.functional.shoppingMall.customer.favoriteInquiries.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Data required to mark a product inquiry as a favorite (inquiry
     * reference, notification settings, optional label).
     */
    body: IShoppingMallFavoriteInquiry.ICreate;
  };
  export type Body = IShoppingMallFavoriteInquiry.ICreate;
  export type Response = IShoppingMallFavoriteInquiry;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/favoriteInquiries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/favoriteInquiries";
  export const random = (): IShoppingMallFavoriteInquiry =>
    typia.random<IShoppingMallFavoriteInquiry>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of favorite product inquiries for the
 * user.
 *
 * This operation enables a user to search and retrieve a list of their
 * favorited product inquiries within the shopping mall platform. The request
 * supports advanced search filters, including inquiry/product reference,
 * notification preference, tagging/label, and date ranges, allowing flexible
 * organization of favorites for personalization and notification management.
 *
 * It references the shopping_mall_favorite_inquiries entity, which links the
 * user (customer) to inquiry and immutable snapshot
 * (shopping_mall_favorite_snapshots), ensuring all evidence is preserved for
 * compliance and audit. The response structure includes essential details for
 * display, batch management (e.g., organize/remove), and notification
 * triggers.
 *
 * Security is enforced so only the authenticated user can access their own
 * favorite inquiries. Admins performing audit queries must use separate admin
 * endpoints according to business policy. The endpoint supports pagination,
 * configurable page size, and sorting by created date or custom batch label,
 * ensuring optimal UX and efficient querying for large favorite lists.
 *
 * @param props.connection
 * @param props.body Search filters, pagination, sorting, and batch labeling
 *   parameters for favorite inquiry listing.
 * @path /shoppingMall/customer/favoriteInquiries
 * @accessor api.functional.shoppingMall.customer.favoriteInquiries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search filters, pagination, sorting, and batch labeling parameters
     * for favorite inquiry listing.
     */
    body: IShoppingMallFavoriteInquiry.IRequest;
  };
  export type Body = IShoppingMallFavoriteInquiry.IRequest;
  export type Response = IPageIShoppingMallFavoriteInquiry;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/favoriteInquiries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/favoriteInquiries";
  export const random = (): IPageIShoppingMallFavoriteInquiry =>
    typia.random<IPageIShoppingMallFavoriteInquiry>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the details of a specific favorite product inquiry by ID for the
 * user.
 *
 * This operation fetches detailed information for a single favorite inquiry
 * record, identified by favoriteInquiryId, scoped to the current authenticated
 * customer. It provides the associated inquiry, the snapshot captured during
 * favoriting, product references, notification status, and any custom
 * labels/tags added by the user.
 *
 * The endpoint strictly enforces user-level access: users can only view their
 * own favorite inquiries. Attempting to access another user's favorite inquiry
 * will result in a security error. Error handling includes not found (404) for
 * invalid IDs or deleted/nonexistent favorites, and forbidden (403) for
 * cross-user access Attempts.
 *
 * Data returned is derived from shopping_mall_favorite_inquiries and its linked
 * inquiry and product snapshot in shopping_mall_favorite_snapshots, preserving
 * compliance and personalization logic.
 *
 * @param props.connection
 * @param props.favoriteInquiryId Unique identifier of the favorite inquiry to
 *   retrieve.
 * @path /shoppingMall/customer/favoriteInquiries/:favoriteInquiryId
 * @accessor api.functional.shoppingMall.customer.favoriteInquiries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the favorite inquiry to retrieve. */
    favoriteInquiryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallFavoriteInquiry;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/favoriteInquiries/:favoriteInquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/favoriteInquiries/${encodeURIComponent(props.favoriteInquiryId ?? "null")}`;
  export const random = (): IShoppingMallFavoriteInquiry =>
    typia.random<IShoppingMallFavoriteInquiry>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteInquiryId")(() =>
        typia.assert(props.favoriteInquiryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update notification or label settings for a specific favorite inquiry by ID.
 *
 * This operation enables users to modify notification preferences and
 * batch-organizational information (e.g., label/tag) for one of their favorite
 * inquiries. Access is granted only if the favoriteInquiryId belongs to the
 * current authenticated user; cross-user modification is strictly forbidden and
 * enforced with 403 errors.
 *
 * The endpoint touches only metadata (notification_enabled, batch_label), never
 * altering the linked snapshot or underlying inquiry. Error handling includes
 * validation on favoriteInquiryId (must exist and not be deleted), and only
 * allows update if the favorite is active and owned by the requesting user. All
 * changes are logged for audit and compliance.
 *
 * Data modified is persisted in shopping_mall_favorite_inquiries, following
 * business logic and compliance requirements. System generates appropriate
 * audit trail for every change per evidence-grade requirements.
 *
 * @param props.connection
 * @param props.favoriteInquiryId Unique identifier for the favorite inquiry to
 *   update.
 * @param props.body Fields to update for the favorite inquiry (notification or
 *   label/organization info).
 * @path /shoppingMall/customer/favoriteInquiries/:favoriteInquiryId
 * @accessor api.functional.shoppingMall.customer.favoriteInquiries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the favorite inquiry to update. */
    favoriteInquiryId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the favorite inquiry (notification or
     * label/organization info).
     */
    body: IShoppingMallFavoriteInquiry.IUpdate;
  };
  export type Body = IShoppingMallFavoriteInquiry.IUpdate;
  export type Response = IShoppingMallFavoriteInquiry;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/favoriteInquiries/:favoriteInquiryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/favoriteInquiries/${encodeURIComponent(props.favoriteInquiryId ?? "null")}`;
  export const random = (): IShoppingMallFavoriteInquiry =>
    typia.random<IShoppingMallFavoriteInquiry>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteInquiryId")(() =>
        typia.assert(props.favoriteInquiryId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a favorited inquiry by ID in shopping_mall_favorite_inquiries
 * (Favorites module).
 *
 * This endpoint enables a customer to unfavorite a previously favorited product
 * inquiry. Instead of physically deleting the favorite record, it performs a
 * soft deletion by setting the deleted_at timestamp, preserving the full
 * snapshot history of the associated inquiry for audit, compliance, and
 * potential future dispute resolution.
 *
 * Role-based security is enforced: customers can remove their own favorite
 * inquiries, while platform administrators can remove any for regulatory or
 * support purposes. The endpoint does not require a request body.
 *
 * Business logic will ensure that upon unfavoriting, any active notifications
 * linked to this favorite are unsubscribed. The deletion is audit-logged, and
 * the action can be viewed in the user's favorite inquiry management
 * interface.
 *
 * Error handling includes: 404 for nonexistent or already deleted
 * favoriteInquiryId, 403 if requesting actor lacks proper ownership/access, and
 * audit trail creation for successful and failed attempts.
 *
 * @param props.connection
 * @param props.favoriteInquiryId ID of the favorited inquiry to be removed
 * @path /shoppingMall/customer/favoriteInquiries/:favoriteInquiryId
 * @accessor api.functional.shoppingMall.customer.favoriteInquiries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the favorited inquiry to be removed */
    favoriteInquiryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/favoriteInquiries/:favoriteInquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/favoriteInquiries/${encodeURIComponent(props.favoriteInquiryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteInquiryId")(() =>
        typia.assert(props.favoriteInquiryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
