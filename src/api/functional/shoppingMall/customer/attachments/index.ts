import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAttachment } from "../../../../structures/IShoppingMallAttachment";
export * as versions from "./versions/index";

/**
 * Retrieve metadata and file info for a specific attachment by attachmentId
 * (shopping_mall_attachments).
 *
 * Fetches the current, latest metadata for a specific file attachment
 * identified by attachmentId. Metadata includes filename, extension, MIME type,
 * size, current CDN/server URL, permission scope, version management links,
 * hash for integrity, logical business source, description, and time/ownership
 * fields. The response can include a list or link to file versions if
 * versioning is enabled on the file.
 *
 * Callers use this to display, audit, or access downloadable resources within
 * the platform securely. Download permissions are enforced using the
 * permission_scope on the attachment, ensuring only qualified users, admins, or
 * entity owners can retrieve file links. Errors include 404 for invalid or
 * deleted files, 403 for unauthorized attempts, and audit trails for all
 * retrievals. Business logic may log access by actor ID and context for
 * compliance.
 *
 * @param props.connection
 * @param props.attachmentId ID of the file attachment to retrieve
 * @path /shoppingMall/customer/attachments/:attachmentId
 * @accessor api.functional.shoppingMall.customer.attachments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the file attachment to retrieve */
    attachmentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallAttachment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/attachments/:attachmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/attachments/${encodeURIComponent(props.attachmentId ?? "null")}`;
  export const random = (): IShoppingMallAttachment =>
    typia.random<IShoppingMallAttachment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Upload/create a new file attachment with metadata and version in
 * shopping_mall_attachments/shopping_mall_attachment_versions.
 *
 * Permits uploading a new file attachment to the platform. The request must
 * include a file reference (URI or temporary storage pointer after frontend
 * upload), business context fields (intended module/entity, expected permission
 * scope), and optional description tags. Uploaded files are validated by type,
 * size, and policy before being stored and indexed on the backend. Upon
 * success, metadata is created for the primary attachment entity as well as the
 * initial version in the version table.
 *
 * File uploads by users are permission checked: only authenticated actors
 * (customers, sellers, admins) may initiate uploads. Business logic applies
 * quota enforcement and extension/format validation, and performs malware/virus
 * scans and any compliance-related pre-processing. The operation may generate
 * public or restricted URLs based on permission_scope. Errors include file
 * invalidation (415), exceeded quota (429), or permission failure (403). The
 * response includes the full attachment metadata and permitted download URLs
 * for future use.
 *
 * @param props.connection
 * @param props.body Attachment creation/upload data including file reference,
 *   intended purpose, extension, and permissions.
 * @path /shoppingMall/customer/attachments
 * @accessor api.functional.shoppingMall.customer.attachments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Attachment creation/upload data including file reference, intended
     * purpose, extension, and permissions.
     */
    body: IShoppingMallAttachment.ICreate;
  };
  export type Body = IShoppingMallAttachment.ICreate;
  export type Response = IShoppingMallAttachment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/customer/attachments";
  export const random = (): IShoppingMallAttachment =>
    typia.random<IShoppingMallAttachment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
