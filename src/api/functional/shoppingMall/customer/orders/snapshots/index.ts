import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrderSnapshot } from "../../../../../structures/IShoppingMallOrderSnapshot";
import { IPageIShoppingMallOrderSnapshot } from "../../../../../structures/IPageIShoppingMallOrderSnapshot";

/**
 * List paginated order snapshot history for a specific order
 * (shopping_mall_order_snapshots).
 *
 * Use this endpoint to retrieve a filtered and paginated list of all historical
 * state snapshots for a specific order. Snapshots are created on each key state
 * transition for shopping_mall_orders, preserving the complete serialized order
 * object for audit, compliance, and evidence purposes.
 *
 * Request body supports advanced search, pagination, and sorting capabilities,
 * using IShoppingMallOrderSnapshot.IRequest to specify filters such as snapshot
 * event time, snapshot_reason, or actor. The response is a paginated list of
 * snapshots (IPageIShoppingMallOrderSnapshot), facilitating legal, audit, and
 * business investigations.
 *
 * Authorization checks allow access for order owners (customers), relevant
 * sellers, and platform admins. Sensitive details are filtered according to
 * role permissions, supporting regional compliance regulations.
 *
 * @param props.connection
 * @param props.orderId Identifier of the order to retrieve snapshots for (UUID)
 * @param props.body Filtering, sorting, and pagination parameters for order
 *   snapshot retrieval
 * @path /shoppingMall/customer/orders/:orderId/snapshots
 * @accessor api.functional.shoppingMall.customer.orders.snapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the order to retrieve snapshots for (UUID) */
    orderId: string & tags.Format<"uuid">;

    /**
     * Filtering, sorting, and pagination parameters for order snapshot
     * retrieval
     */
    body: IShoppingMallOrderSnapshot.IRequest;
  };
  export type Body = IShoppingMallOrderSnapshot.IRequest;
  export type Response = IPageIShoppingMallOrderSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/orders/:orderId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/snapshots`;
  export const random = (): IPageIShoppingMallOrderSnapshot =>
    typia.random<IPageIShoppingMallOrderSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
