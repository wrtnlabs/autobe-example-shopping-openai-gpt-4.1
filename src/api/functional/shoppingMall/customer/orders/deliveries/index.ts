import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallDelivery } from "../../../../../structures/IShoppingMallDelivery";
import { IPageIShoppingMallDelivery } from "../../../../../structures/IPageIShoppingMallDelivery";

/**
 * Create a delivery address and recipient entry for an order
 * (ShoppingMallDeliveries table).
 *
 * Create a new delivery entry for a specific order by providing the necessary
 * recipient and address details. This operation is used during the order
 * fulfillment workflow to specify where and to whom the order (or split
 * portion) should be delivered.
 *
 * Security measures enforce that only users with associated rights to the order
 * (customers who placed the order, authorized staff, or system processes) can
 * perform this action. Business logic ensures that the delivery address and
 * recipient contact information are validated based on locale-specific rules
 * and compliance requirements, including restricted address formats and
 * real-name confirmation if mandated by region.
 *
 * Upon invocation, the operation links the delivery directly to the designated
 * order and supports integration with split/multi-shipment logic where more
 * than one delivery entry may exist per order. Error handling covers missing or
 * invalid address/contact info, unauthorized access, and inconsistent order
 * status (e.g., order already completed/cancelled).
 *
 * Related APIs: Typically used as part of an order-to-fulfillment flow,
 * followed by shipment creation and status updates. Designed for use with audit
 * and evidence preservation as required by the schema's audit-compliance
 * structure.
 *
 * @param props.connection
 * @param props.orderId Target order's ID for which the delivery record is to be
 *   created.
 * @param props.body Delivery information including recipient and address for
 *   the new delivery entry.
 * @path /shoppingMall/customer/orders/:orderId/deliveries
 * @accessor api.functional.shoppingMall.customer.orders.deliveries.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target order's ID for which the delivery record is to be created. */
    orderId: string & tags.Format<"uuid">;

    /**
     * Delivery information including recipient and address for the new
     * delivery entry.
     */
    body: IShoppingMallDelivery.ICreate;
  };
  export type Body = IShoppingMallDelivery.ICreate;
  export type Response = IShoppingMallDelivery;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/orders/:orderId/deliveries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries`;
  export const random = (): IShoppingMallDelivery =>
    typia.random<IShoppingMallDelivery>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate deliveries associated with an order
 * (shopping_mall_deliveries table).
 *
 * Search and paginate deliveries (delivery windows/address records) for a
 * specific order. This is required for tracking multi-shipment orders, split
 * deliveries, and for enabling users to monitor overall delivery status on
 * complex orders.
 *
 * Advanced search filters—by status, shipmentId, recipient name, or time
 * period—are supported. Pagination allows efficient retrieval even for orders
 * with many delivery records (e.g., large B2B orders or split/partial
 * shipments). Security filters are applied: customers can view their own
 * orders, sellers can access deliveries related to their own goods, and admins
 * have global access.
 *
 * Returned fields include recipient information (with privacy controls),
 * delivery status, timing info, snapshot address as at delivery time, shipment
 * references, and any delivery messages (special instructions). The operation
 * is linked to after-sales workflows (returns/exchanges initiated from
 * delivered items) and audit/evidence modules for compliance. All search
 * parameters and response structures align with the shopping_mall_deliveries
 * schema.
 *
 * Related APIs include list/search of shipments for an order and detailed
 * delivery view (GET /orders/{orderId}/deliveries/{deliveryId}). Errors include
 * insufficient permission, non-existent order, or invalid filter parameters.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order for which deliveries are
 *   queried.
 * @param props.body Search filters, sorting, and pagination parameters for
 *   querying deliveries within an order.
 * @path /shoppingMall/customer/orders/:orderId/deliveries
 * @accessor api.functional.shoppingMall.customer.orders.deliveries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the order for which deliveries are queried. */
    orderId: string & tags.Format<"uuid">;

    /**
     * Search filters, sorting, and pagination parameters for querying
     * deliveries within an order.
     */
    body: IShoppingMallDelivery.IRequest;
  };
  export type Body = IShoppingMallDelivery.IRequest;
  export type Response = IPageIShoppingMallDelivery.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/orders/:orderId/deliveries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries`;
  export const random = (): IPageIShoppingMallDelivery.ISummary =>
    typia.random<IPageIShoppingMallDelivery.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a delivery for a specific order and deliveryId
 * (shopping_mall_deliveries table).
 *
 * Retrieve full details for a single delivery associated with an order. This
 * allows users to view address snapshot, recipient info, timing info, delivery
 * status, and evidence of the delivery event.
 *
 * Security is enforced to ensure only permitted actors may access delivery
 * data: customers are restricted to their own orders, sellers to their own
 * items, admins are unrestricted. The endpoint is essential for end-user
 * delivery tracking, support workflows (post-delivery disputes, after-sales
 * actions), and for building comprehensive audit trails.
 *
 * The response includes all shopping_mall_deliveries columns, including
 * address, recipient, delivery status, shipment associations, delivery
 * messages, confirmation state, and snapshot linkage for full evidentiary
 * support. Related APIs are the delivery list/search for an order, shipment
 * batching endpoints, and after-sales service initiation operations
 * (returns/exchanges). Error handling covers not found (invalid ID), permission
 * errors, and order-delivery mismatch scenarios. The API supports
 * internationalization and privacy controls for address and contact fields.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order.
 * @param props.deliveryId Unique identifier of the delivery record attached to
 *   the order.
 * @path /shoppingMall/customer/orders/:orderId/deliveries/:deliveryId
 * @accessor api.functional.shoppingMall.customer.orders.deliveries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the delivery record attached to the order. */
    deliveryId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallDelivery;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/deliveries/:deliveryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): IShoppingMallDelivery =>
    typia.random<IShoppingMallDelivery>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update delivery address or recipient information for an order delivery
 * (ShoppingMallDeliveries table).
 *
 * Update an existing delivery address or recipient info for a specific order
 * and delivery record. This is typically required if the user needs to correct
 * address details, change recipient information, or update delivery
 * instructions prior to shipment dispatch.
 *
 * Security and business logic ensure that only authorized users (typically, the
 * customer who owns the order or authorized staff/admin) can perform this
 * update. The operation validates that the delivery record is still in an
 * editable state (not yet delivered or confirmed), and all inputs must pass
 * stringent address/contact validation according to system and regulatory
 * rules.
 *
 * The system records a snapshot of the delivery state before and after the
 * update, preserving full audit history and supporting regulatory or
 * dispute-related rollback. Error cases include unauthorized update attempts,
 * invalid order/delivery IDs, and modification attempts after shipment
 * confirmation.
 *
 * This operation is part of the larger order fulfillment and shipment workflow.
 * It may be followed by shipment assignment, delivery status tracking, or
 * after-sales processes if changes are required post-dispatch.
 *
 * @param props.connection
 * @param props.orderId Target order's ID for which the delivery record is being
 *   updated.
 * @param props.deliveryId Unique delivery record ID to update.
 * @param props.body Updated delivery information (address, recipient,
 *   instructions).
 * @path /shoppingMall/customer/orders/:orderId/deliveries/:deliveryId
 * @accessor api.functional.shoppingMall.customer.orders.deliveries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target order's ID for which the delivery record is being updated. */
    orderId: string & tags.Format<"uuid">;

    /** Unique delivery record ID to update. */
    deliveryId: string & tags.Format<"uuid">;

    /** Updated delivery information (address, recipient, instructions). */
    body: IShoppingMallDelivery.IUpdate;
  };
  export type Body = IShoppingMallDelivery.IUpdate;
  export type Response = IShoppingMallDelivery;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/orders/:orderId/deliveries/:deliveryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): IShoppingMallDelivery =>
    typia.random<IShoppingMallDelivery>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically delete (soft delete) a delivery address or recipient info for an
 * order (ShoppingMallDeliveries table).
 *
 * Logically delete (soft delete) a delivery record for an order by setting the
 * deleted_at field per the ShoppingMallDeliveries schema. This operation is
 * permissible only if shipment is not yet confirmed or delivered. Soft deletion
 * ensures the delivery record remains in the system for audit, compliance, and
 * dispute resolution, but is excluded from active workflows and normal UI
 * displays.
 *
 * Only the customer who placed the order or authorized admin/staff can invoke
 * this deletion, and logic enforces that only deliveries in a
 * cancellable/editable state can be deleted. The action triggers audit log
 * recording for compliance and may notify relevant stakeholders (user and
 * logistics, if applicable).
 *
 * Error cases cover: attempting to delete after shipment confirmation or
 * delivery, unauthorized access, and non-existent delivery IDs linked to the
 * specified order. No response body is returned; operation follows RESTful
 * standards with appropriate status code only.
 *
 * @param props.connection
 * @param props.orderId Target order's ID for which the delivery record is being
 *   deleted.
 * @param props.deliveryId Unique delivery record ID to delete.
 * @path /shoppingMall/customer/orders/:orderId/deliveries/:deliveryId
 * @accessor api.functional.shoppingMall.customer.orders.deliveries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target order's ID for which the delivery record is being deleted. */
    orderId: string & tags.Format<"uuid">;

    /** Unique delivery record ID to delete. */
    deliveryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/orders/:orderId/deliveries/:deliveryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/deliveries/${encodeURIComponent(props.deliveryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("deliveryId")(() => typia.assert(props.deliveryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
