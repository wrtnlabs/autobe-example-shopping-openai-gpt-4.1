import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallShipment } from "../../../../../structures/IShoppingMallShipment";
import { IPageIShoppingMallShipment } from "../../../../../structures/IPageIShoppingMallShipment";

/**
 * Retrieve a paginated list of shipment batches for a specific order from
 * shopping_mall_shipments.
 *
 * This endpoint allows an authenticated user (customer, seller, or admin) to
 * retrieve a paginated and optionally filtered set of all shipment records for
 * a given order (identified by orderId).
 *
 * Security permissions are enforced such that only actors with legitimate
 * access to the specified order can view its shipments. Customers can access
 * only their own orders, sellers only their handled items, and admins have
 * global access. The operation returns shipment summaries including status,
 * tracking numbers, delivery windows, seller info, and per-shipment analytics.
 * Detailed filtering options enable users to analyze fulfillment performance,
 * identify delays, or reconcile after-sales disputes.
 *
 * The operation is tightly coupled with the shopping_mall_shipments database
 * model, and supports integration with delivery and after-sales modules. Errors
 * such as unauthorized access or invalid orderId are handled with appropriate
 * status codes and audit logging. Results are returned as paginated collections
 * for performance, and may be used together with shipment detail views or
 * shipment update endpoints as part of a full order management workflow.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order to get shipments
 *   for
 * @param props.body Search and filter options for shipment records, as well as
 *   pagination and sorting controls
 * @path /shoppingMall/customer/orders/:orderId/shipments
 * @accessor api.functional.shoppingMall.customer.orders.shipments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target order to get shipments for */
    orderId: string & tags.Format<"uuid">;

    /**
     * Search and filter options for shipment records, as well as pagination
     * and sorting controls
     */
    body: IShoppingMallShipment.IRequest;
  };
  export type Body = IShoppingMallShipment.IRequest;
  export type Response = IPageIShoppingMallShipment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/orders/:orderId/shipments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments`;
  export const random = (): IPageIShoppingMallShipment.ISummary =>
    typia.random<IPageIShoppingMallShipment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information on a specific order shipment
 * (shopping_mall_shipments).
 *
 * This endpoint provides granular shipment details for a specified shipmentId
 * within its parent order (orderId). It enforces strong security so that only
 * stakeholders associated with the order (customer, assigned seller, admin) may
 * retrieve the detail.
 *
 * The returned record includes the shipmentâ€™s status, all associated shipment
 * items, carrier/tracking links, timestamps for status transitions (requested,
 * shipped, delivered, etc), seller identity, and analytics/meta. Error handling
 * covers not-found, not-belonging-to-order, or unauthorized access cases. This
 * endpoint supports logistics traceability, customer inquiry response, and
 * after-sales case management. The result is primarily consumed in shipment
 * detail views and order history pages.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order that includes the
 *   specified shipment
 * @param props.shipmentId Unique identifier for the shipment batch to retrieve
 * @path /shoppingMall/customer/orders/:orderId/shipments/:shipmentId
 * @accessor api.functional.shoppingMall.customer.orders.shipments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the order that includes the specified shipment */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier for the shipment batch to retrieve */
    shipmentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallShipment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/orders/:orderId/shipments/:shipmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}/shipments/${encodeURIComponent(props.shipmentId ?? "null")}`;
  export const random = (): IShoppingMallShipment =>
    typia.random<IShoppingMallShipment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("shipmentId")(() => typia.assert(props.shipmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
