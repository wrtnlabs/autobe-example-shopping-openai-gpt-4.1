import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallOrder } from "../../../../structures/IShoppingMallOrder";
export * as items from "./items/index";
export * as snapshots from "./snapshots/index";
export * as shipments from "./shipments/index";
export * as deliveries from "./deliveries/index";
export * as afterSaleServices from "./afterSaleServices/index";

/**
 * Update an existing shopping mall order by ID.
 *
 * This API allows for the update of an order record by order ID. Orders in the
 * shoppingMall system represent the core business transaction structure and
 * include customer linkage, channel/section context, order status, payment
 * details, and audit data. Updates are restricted to appropriate roles and only
 * permitted when the order is not finalized, cancelled, or deleted.
 *
 * The update process must enforce all relevant business logic, such as checking
 * for illegal state transitions (e.g., cannot move from delivered to applied),
 * and prevent updates to orders marked deleted. All modifications will trigger
 * storage of a pre-update snapshot in accordance with compliance requirements,
 * ensuring full traceability for disputes and audit. Attempts to update locked,
 * deleted, or read-only orders will result in clear, actionable error
 * messages.
 *
 * This operation interacts with the shopping_mall_orders table, referencing
 * comments in the schema regarding state transition, multi-seller support, and
 * evidence retention. It is designed to be used by users with order management
 * privileges and returns the updated order record.
 *
 * @param props.connection
 * @param props.orderId Order ID to update. Must be a valid UUID representing an
 *   order in the shopping_mall_orders table.
 * @param props.body Update information for the target shopping mall order.
 * @path /shoppingMall/customer/orders/:orderId
 * @accessor api.functional.shoppingMall.customer.orders.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Order ID to update. Must be a valid UUID representing an order in the
     * shopping_mall_orders table.
     */
    orderId: string & tags.Format<"uuid">;

    /** Update information for the target shopping mall order. */
    body: IShoppingMallOrder.IUpdate;
  };
  export type Body = IShoppingMallOrder.IUpdate;
  export type Response = IShoppingMallOrder;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/orders/:orderId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}`;
  export const random = (): IShoppingMallOrder =>
    typia.random<IShoppingMallOrder>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete an existing shopping mall order by order ID.
 *
 * This API marks an order as deleted, enabling soft-delete functionality as
 * required for compliance and audit. Instead of removing the order data, the
 * system sets the deleted_at timestamp, ensuring the record remains accessible
 * for regulatory recovery and historical analysis.
 *
 * Deletion is only allowed when the order is in a deletable state as per
 * business rules â€” for example, not finalized, not associated with ongoing
 * shipments, or after permitted cancellation windows. Upon invocation, a
 * snapshot of the order will be saved for evidence, and deletion actions will
 * be logged in the audit trail.
 *
 * Attempts to delete orders in restricted or non-deletable states will result
 * in clear error messages. The endpoint enforces robust permission and status
 * logic based on schema comments for status and deletion fields.
 *
 * @param props.connection
 * @param props.orderId Order ID to soft delete. Must be a valid UUID of an
 *   existing order in shopping_mall_orders.
 * @path /shoppingMall/customer/orders/:orderId
 * @accessor api.functional.shoppingMall.customer.orders.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Order ID to soft delete. Must be a valid UUID of an existing order in
     * shopping_mall_orders.
     */
    orderId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/orders/:orderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/orders/${encodeURIComponent(props.orderId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
