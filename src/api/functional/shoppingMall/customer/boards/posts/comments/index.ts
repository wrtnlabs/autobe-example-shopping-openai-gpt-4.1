import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallComment } from "../../../../../../structures/IShoppingMallComment";

/**
 * Create a new comment on a specific board post (shopping_mall_comments).
 *
 * This endpoint enables users to submit new comments on a designated post
 * within a bulletin board, supporting threaded discussions and multi-role
 * interaction. Upon creation, the comment records authorship (customer, seller,
 * or admin), content, and relational references to the parent post. Permission
 * checks are applied to enforce who may comment based on board or post
 * visibility, and the initial moderation status is set (pending/approved)
 * depending on board configuration.
 *
 * The comment body supports Markdown formatting. The system ensures that the
 * new comment is correctly associated with the board and post by enforcing
 * integrity on boardId and postId. Moderation fields allow for workflows where
 * comments may require approval before publication, with clear tracking of
 * moderation status and explanations. Audit trails are written for each comment
 * creation for compliance and evidence purposes.
 *
 * Attachments to comments, if necessary, are handled by a separate attachment
 * API and are not part of this operation. Rate limits and anti-abuse measures
 * apply as required by business configuration. Related endpoints include
 * updating and deleting comments, listing thread comments, and managing
 * attachments.
 *
 * @param props.connection
 * @param props.boardId Unique identifier of the target board.
 * @param props.postId Unique identifier of the post to comment on.
 * @param props.body Information required to create a new comment under a
 *   specific post. Includes role-determined author fields and comment content.
 * @path /shoppingMall/customer/boards/:boardId/posts/:postId/comments
 * @accessor api.functional.shoppingMall.customer.boards.posts.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target board. */
    boardId: string & tags.Format<"uuid">;

    /** Unique identifier of the post to comment on. */
    postId: string & tags.Format<"uuid">;

    /**
     * Information required to create a new comment under a specific post.
     * Includes role-determined author fields and comment content.
     */
    body: IShoppingMallComment.ICreate;
  };
  export type Body = IShoppingMallComment.ICreate;
  export type Response = IShoppingMallComment;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/boards/:boardId/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/boards/${encodeURIComponent(props.boardId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IShoppingMallComment =>
    typia.random<IShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing comment on a board post (shopping_mall_comments).
 *
 * This endpoint supports editing an existing comment associated with a specific
 * board post. The operation validates that the acting user is either the
 * comment author or an authorized moderator/admin, enforcing strict permission
 * and moderation policies. The update process supports changing the comment
 * body and may also include updating moderation status or reason if initiated
 * by an admin.
 *
 * Every update is snapshotted for audit and evidence retention by leveraging
 * the comment snapshot mechanism in the underlying schema. All changes—whether
 * by the user or moderator—are logged and versioned, maintaining a full
 * traceable history of the comment's edits for compliance and potential
 * rollback.
 *
 * Input validation ensures the edited comment adheres to permitted content
 * guidelines (Markdown, length, etc.). Related operations include comment
 * creation, deletion, moderation flagging, and listing thread comments.
 *
 * @param props.connection
 * @param props.boardId Unique identifier of the target board.
 * @param props.postId Unique identifier of the post containing the comment.
 * @param props.commentId Unique identifier of the comment to be updated.
 * @param props.body Information necessary for updating the content of an
 *   existing comment; supports author- or moderator-initiated changes.
 * @path /shoppingMall/customer/boards/:boardId/posts/:postId/comments/:commentId
 * @accessor api.functional.shoppingMall.customer.boards.posts.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target board. */
    boardId: string & tags.Format<"uuid">;

    /** Unique identifier of the post containing the comment. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment to be updated. */
    commentId: string & tags.Format<"uuid">;

    /**
     * Information necessary for updating the content of an existing
     * comment; supports author- or moderator-initiated changes.
     */
    body: IShoppingMallComment.IUpdate;
  };
  export type Body = IShoppingMallComment.IUpdate;
  export type Response = IShoppingMallComment;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/boards/:boardId/posts/:postId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/boards/${encodeURIComponent(props.boardId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IShoppingMallComment =>
    typia.random<IShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically (soft) delete an existing comment on a board post
 * (shopping_mall_comments).
 *
 * This endpoint logically removes (soft deletes) a specific comment from a
 * board post by setting the deleted_at timestamp in the corresponding comment
 * record. Deletion rights are restricted to the comment's author or users with
 * appropriate moderation privileges such as admins. Upon deletion, all
 * historical and audit data are preserved in compliance with evidence retention
 * policy.
 *
 * Soft deleted comments are no longer displayed in standard thread listings but
 * may be accessible to authorized staff for moderation, audit, or dispute
 * review. This action triggers an audit log entry and, if configured, notifies
 * relevant users of the deletion event. Attempts to delete already deleted or
 * unauthorized comments will be rejected with appropriate error messages.
 * Associated comment snapshot records remain for future legal review or
 * recovery.
 *
 * @param props.connection
 * @param props.boardId Unique identifier of the board containing the post and
 *   comment.
 * @param props.postId Unique identifier of the post containing the comment.
 * @param props.commentId Unique identifier of the comment to be deleted.
 * @path /shoppingMall/customer/boards/:boardId/posts/:postId/comments/:commentId
 * @accessor api.functional.shoppingMall.customer.boards.posts.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the board containing the post and comment. */
    boardId: string & tags.Format<"uuid">;

    /** Unique identifier of the post containing the comment. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment to be deleted. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/boards/:boardId/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/boards/${encodeURIComponent(props.boardId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
