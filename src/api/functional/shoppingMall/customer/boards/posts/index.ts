import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallBoardPost } from "../../../../../structures/IShoppingMallBoardPost";
export * as comments from "./comments/index";

/**
 * Create a new board post in a specific board, handling validations,
 * relationships, and moderation policies.
 *
 * Create a new board post in the given board as defined in the
 * 'shopping_mall_board_posts' table. The operation accepts all fields necessary
 * for content registration, including title, body, reply/thread context, linked
 * product or order if required, visibility, and author identity (automatically
 * from the authenticated context).
 *
 * The endpoint enforces all business policies, such as board post structure,
 * maximum body/title length, moderation requirements, and notification
 * triggers. If moderation is enabled, the post will be set to the 'pending' or
 * 'unapproved' status until reviewed. Compliance features snapshot the post at
 * creation, and all primary/foreign relationships (author, parent, product,
 * etc.) are validated for existence and access rights. Rate limiting, duplicate
 * content checks, and anti-spam controls are also triggered on create.
 *
 * @param props.connection
 * @param props.boardId The unique identifier of the board in which to create
 *   the post.
 * @param props.body Details of the new board post being created (title, body,
 *   relationships, etc.), validated per business/board policy.
 * @path /shoppingMall/customer/boards/:boardId/posts
 * @accessor api.functional.shoppingMall.customer.boards.posts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** The unique identifier of the board in which to create the post. */
    boardId: string & tags.Format<"uuid">;

    /**
     * Details of the new board post being created (title, body,
     * relationships, etc.), validated per business/board policy.
     */
    body: IShoppingMallBoardPost.ICreate;
  };
  export type Body = IShoppingMallBoardPost.ICreate;
  export type Response = IShoppingMallBoardPost;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/boards/:boardId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/boards/${encodeURIComponent(props.boardId ?? "null")}/posts`;
  export const random = (): IShoppingMallBoardPost =>
    typia.random<IShoppingMallBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific board post within a board (shopping_mall_board_posts
 * table).
 *
 * Update the content, title, and meta fields of a board post belonging to the
 * specified board. This operation is essential for users (customers, sellers,
 * admins) to revise or correct their contributions. Security and permission
 * logic is enforced based on post authorship and user role, following the
 * comments in the shopping_mall_board_posts Prisma schema.
 *
 * The API ensures only permitted users can update their own or officially
 * authorized posts, performing full validation of moderation rules and
 * visibility requirements. Every update triggers a preservation snapshot for
 * audit trail purposes as required by the snapshot management logic in both the
 * business requirements and the shopping_mall_board_post_snapshots schema.
 * Unauthorized or invalid update attempts are blocked and produce a descriptive
 * error.
 *
 * This operation is closely linked to moderation, notification, and board
 * activity logging, ensuring all edits or meta changes are traceable and
 * reversible as per compliance and dispute needs. Clients should also use
 * relevant GET operations to refresh and sync updated content after a
 * successful update.
 *
 * @param props.connection
 * @param props.boardId Unique ID of the target board.
 * @param props.postId Unique ID of the post to update.
 * @param props.body Updated board post content and meta fields.
 * @path /shoppingMall/customer/boards/:boardId/posts/:postId
 * @accessor api.functional.shoppingMall.customer.boards.posts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique ID of the target board. */
    boardId: string & tags.Format<"uuid">;

    /** Unique ID of the post to update. */
    postId: string & tags.Format<"uuid">;

    /** Updated board post content and meta fields. */
    body: IShoppingMallBoardPost.IUpdate;
  };
  export type Body = IShoppingMallBoardPost.IUpdate;
  export type Response = IShoppingMallBoardPost;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/boards/:boardId/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/boards/${encodeURIComponent(props.boardId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IShoppingMallBoardPost =>
    typia.random<IShoppingMallBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a specific board post, marking it as logically removed
 * (shopping_mall_board_posts).
 *
 * Perform a logical (soft) delete on a board post, recording the deletion event
 * and marking the post as removed by setting deleted_at. The operation enforces
 * that only owners, sellers with appropriate permissions, or administrators may
 * delete the post, following security and role requirements from business rules
 * and the Prisma schema.
 *
 * Deletion actions are fully auditable, do not physically remove the post, and
 * ensure all previous versions and replies are preserved for potential
 * recovery, compliance, and dispute resolution. Related snapshot entries must
 * be retained for audit trails as directed by
 * shopping_mall_board_post_snapshots. Any errors related to unauthorized
 * access, invalid post state, or compliance-related blockage are surfaced with
 * clear error codes and messages.
 *
 * Clients should update UI listings to reflect the soft deletion state and may
 * display available recovery or dispute options based on the user's role.
 *
 * @param props.connection
 * @param props.boardId Unique ID of the target board.
 * @param props.postId Unique ID of the post to delete.
 * @path /shoppingMall/customer/boards/:boardId/posts/:postId
 * @accessor api.functional.shoppingMall.customer.boards.posts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique ID of the target board. */
    boardId: string & tags.Format<"uuid">;

    /** Unique ID of the post to delete. */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/boards/:boardId/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/boards/${encodeURIComponent(props.boardId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
