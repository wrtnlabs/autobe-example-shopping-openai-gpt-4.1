import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallMileage } from "../../../../structures/IShoppingMallMileage";
export * as transactions from "./transactions/index";

/**
 * Update the details of a mileage (loyalty/point) account in the
 * shopping_mall_mileages table.
 *
 * Update a specific mileage record by its UUID from the shopping_mall_mileages
 * table. This operation is used for administrative or customer self-service
 * adjustments to a user's mileage (loyalty point) account, such as balance
 * corrections, status changes (active, expired, frozen), or setting of
 * expiration dates.
 *
 * This API requires careful handling of concurrency and security, as altering
 * mileage balances can affect user experience and financial reconciliation.
 * Business rules may restrict who can update which fields, and all actions are
 * typically logged for compliance. The operation also checks the validity of
 * mileage status, ensures non-negative balances, and handles expiration fields
 * as defined in the schema.
 *
 * Authorization is enforced based on role: only account owners or
 * administrators may update their mileage. All updates are versioned and may be
 * snapshotted for audit and rollback. Related operations include retrieving a
 * mileage account, paging through transaction history, and account creation or
 * logical deletion. Validation errors should be explicitly communicated, and
 * all field changes require strict audit logging and, where applicable, consent
 * for critical changes (such as balance adjustment).
 *
 * @param props.connection
 * @param props.mileageId The unique identifier of the mileage account to
 *   update.
 * @param props.body Updated mileage account information, including fields such
 *   as balance, status, and expiration as defined by the schema.
 * @path /shoppingMall/customer/mileages/:mileageId
 * @accessor api.functional.shoppingMall.customer.mileages.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the mileage account to update. */
    mileageId: string & tags.Format<"uuid">;

    /**
     * Updated mileage account information, including fields such as
     * balance, status, and expiration as defined by the schema.
     */
    body: IShoppingMallMileage.IUpdate;
  };
  export type Body = IShoppingMallMileage.IUpdate;
  export type Response = IShoppingMallMileage;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/mileages/:mileageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/mileages/${encodeURIComponent(props.mileageId ?? "null")}`;
  export const random = (): IShoppingMallMileage =>
    typia.random<IShoppingMallMileage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (logically remove) a mileage account by marking deleted_at in
 * shopping_mall_mileages table.
 *
 * Soft-delete an existing mileage (loyalty/point) account given its UUID. This
 * operation is intended for either account owners or administrators to
 * deactivate or logically remove a mileage account without losing historical
 * data, as required for legal, financial, or user service reasons.
 *
 * The operation simply marks the deleted_at timestamp in accordance with the
 * schema-defined soft delete design. No data is permanently erased, ensuring
 * full audit trails and recoverability for regulatory compliance (such as
 * GDPR/CCPA erasure on proper approval). Only authorized users—typically the
 * owner of the mileage or administrators—may trigger this operation. Coupled
 * with business logic and permission checks, the API ensures no active balance
 * is lost or misaccounted. Related operations include restoring a logically
 * deleted mileage, listing active/inactive accounts, or querying snapshot
 * evidence for disputes.
 *
 * Implementation MUST NOT physically remove the record or affect associated
 * mileage transactions and analytics. All actions are strictly logged for
 * compliance.
 *
 * @param props.connection
 * @param props.mileageId The unique identifier of the mileage account to
 *   soft-delete.
 * @path /shoppingMall/customer/mileages/:mileageId
 * @accessor api.functional.shoppingMall.customer.mileages.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the mileage account to soft-delete. */
    mileageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/mileages/:mileageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/mileages/${encodeURIComponent(props.mileageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageId")(() => typia.assert(props.mileageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
