import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCartSnapshot } from "../../../../../structures/IShoppingMallCartSnapshot";
import { IPageIShoppingMallCartSnapshot } from "../../../../../structures/IPageIShoppingMallCartSnapshot";

/**
 * Search paginated audit/history cart snapshots for a given cart
 * (IPageIShoppingMallCartSnapshot).
 *
 * This advanced search endpoint returns a paginated, filterable list of
 * snapshot history for a specific cart (cartId). The API interacts with the
 * shopping_mall_cart_snapshots table and supports rich queriesâ€”allowing clients
 * to filter by creation date, mutation type, or other audit fields as
 * implemented in the IShoppingMallCartSnapshot.IRequest DTO.
 *
 * Business rules verify that only the owner of the cart (or privileged staff)
 * can access these snapshots. The response includes an
 * IPageIShoppingMallCartSnapshot collection, allowing clients to implement
 * evidence trails, rollback views, or compliance reporting. The API enforces
 * evidence retention policies as required by the snapshot schema. Pagination,
 * filtering, and sorting parameters are respected according to DTO
 * capabilities.
 *
 * @param props.connection
 * @param props.cartId The unique identifier of the cart whose snapshot history
 *   is being queried.
 * @param props.body Snapshot query/filter/pagination options following
 *   IShoppingMallCartSnapshot.IRequest DTO structure.
 * @path /shoppingMall/customer/carts/:cartId/snapshots
 * @accessor api.functional.shoppingMall.customer.carts.snapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the cart whose snapshot history is being
     * queried.
     */
    cartId: string & tags.Format<"uuid">;

    /**
     * Snapshot query/filter/pagination options following
     * IShoppingMallCartSnapshot.IRequest DTO structure.
     */
    body: IShoppingMallCartSnapshot.IRequest;
  };
  export type Body = IShoppingMallCartSnapshot.IRequest;
  export type Response = IPageIShoppingMallCartSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/carts/:cartId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/snapshots`;
  export const random = (): IPageIShoppingMallCartSnapshot =>
    typia.random<IPageIShoppingMallCartSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
