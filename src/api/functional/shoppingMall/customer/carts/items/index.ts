import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallCartItem } from "../../../../../structures/IShoppingMallCartItem";
import { IPageIShoppingMallCartItem } from "../../../../../structures/IPageIShoppingMallCartItem";

/**
 * Add a new item to a shopping cart (IShoppingMallCartItem.ICreate).
 *
 * This endpoint allows a customer to add a new item to their shopping cart,
 * associating a given product (and optionally, specific product variant) with a
 * particular cartId. The API targets the shopping_mall_cart_items table and is
 * used during the add-to-cart flow for authenticated or guest users. The
 * operation supports specifying the product, variant (for selected options),
 * quantity, and a snapshot of the user's option selection for evidence and
 * validation.
 *
 * Business validations include checking the existence and status of the cart
 * (linked to shopping_mall_carts), verifying that the product and optional
 * variant exist and are available for sale, and ensuring that inventory is
 * sufficient for the requested quantity. The API must enforce that only the
 * authenticated user (owner of the cart) or permitted support staff may add
 * items. Any failure due to business rules (e.g., cart status is 'checked_out',
 * inventory shortage, or invalid variant) should return a descriptive error
 * message.
 *
 * If the addition is successful, the response returns the updated state of the
 * added cart item, including metadata for subsequent operations such as
 * validation or cart-to-order conversion. All operations must be logged for
 * audit purposes, and evidence retention is enforced for compliance and
 * traceability as outlined in shopping_mall_cart_items schema documentation.
 *
 * @param props.connection
 * @param props.cartId The unique identifier of the shopping cart to which the
 *   item will be added.
 * @param props.body Required information for adding a product (and optional
 *   variant/options/quantity) as a cart item, mapping to the
 *   IShoppingMallCartItem.ICreate DTO.
 * @path /shoppingMall/customer/carts/:cartId/items
 * @accessor api.functional.shoppingMall.customer.carts.items.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The unique identifier of the shopping cart to which the item will be
     * added.
     */
    cartId: string & tags.Format<"uuid">;

    /**
     * Required information for adding a product (and optional
     * variant/options/quantity) as a cart item, mapping to the
     * IShoppingMallCartItem.ICreate DTO.
     */
    body: IShoppingMallCartItem.ICreate;
  };
  export type Body = IShoppingMallCartItem.ICreate;
  export type Response = IShoppingMallCartItem;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/customer/carts/:cartId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items`;
  export const random = (): IShoppingMallCartItem =>
    typia.random<IShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search all items in a specific cart (paginated, filterable;
 * shopping_mall_cart_items).
 *
 * Retrieves the complete list of items currently held within a specific
 * shopping cart, enabling the customer or authorized admin roles to see,
 * search, sort, or paginate through the cart's contents. Advanced filtering can
 * be applied based on product or variant, added time, or grouping labels when
 * batch features are enabled.
 *
 * The list is always scoped to a single cart via cartId, guaranteeing isolation
 * and privacy between different users' carts. The operation integrates deep
 * business rules, ensuring real-time item data consistency with catalog status,
 * inventory, or product updates (e.g., out-of-stock products appear as inactive
 * items). Results can support batch selection (for example, for mass removal or
 * checkout), with UI-level pagination and sorting options.
 *
 * This endpoint ties directly into the cart/checkout workflow and supports
 * personalization/AI modules by providing comprehensive insight into in-session
 * cart activity. Error cases include invalid cartId, unauthorized access, or
 * filtering by fields that do not exist on cart items.
 *
 * @param props.connection
 * @param props.cartId Unique identifier for the cart whose items are to be
 *   listed.
 * @param props.body Search, filter, and paging parameters for the cart items
 *   within the given cart.
 * @path /shoppingMall/customer/carts/:cartId/items
 * @accessor api.functional.shoppingMall.customer.carts.items.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the cart whose items are to be listed. */
    cartId: string & tags.Format<"uuid">;

    /**
     * Search, filter, and paging parameters for the cart items within the
     * given cart.
     */
    body: IShoppingMallCartItem.IRequest;
  };
  export type Body = IShoppingMallCartItem.IRequest;
  export type Response = IPageIShoppingMallCartItem;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/customer/carts/:cartId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items`;
  export const random = (): IPageIShoppingMallCartItem =>
    typia.random<IPageIShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single cart item with product and variant detail
 * (shopping_mall_cart_items).
 *
 * Fetches full details for a single item within a user's cart, using both
 * cartId and cartItemId to guarantee ownership and path-union context. The
 * returned information covers core relationships: the product, selected
 * variant, quantity, and relevant option/variant selections, along with the
 * added timestamp and current status (including inactive or invalid if product
 * status changed since addition).
 *
 * Security and business requirements ensure that only the owner or authorized
 * admin roles may access this resource. The endpoint returns up-to-date product
 * and variant metadata reflecting any catalog status, price, or availability
 * changes at the time of requestâ€”critical for checkout validation. Error
 * handling addresses cases such as missing or deleted cart or item, or
 * cross-user access attempts.
 *
 * This endpoint is an integral part of user session and checkout flows,
 * supporting UI and personalization logic, and adheres closely to
 * shopping_mall_cart_items table constraints documented in the Prisma schema.
 *
 * @param props.connection
 * @param props.cartId Parent cart ID for ownership and access scoping.
 * @param props.cartItemId Cart item ID to identify the record to retrieve.
 * @path /shoppingMall/customer/carts/:cartId/items/:cartItemId
 * @accessor api.functional.shoppingMall.customer.carts.items.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Parent cart ID for ownership and access scoping. */
    cartId: string & tags.Format<"uuid">;

    /** Cart item ID to identify the record to retrieve. */
    cartItemId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallCartItem;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/customer/carts/:cartId/items/:cartItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): IShoppingMallCartItem =>
    typia.random<IShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a cart item (IShoppingMallCartItem.IUpdate), e.g., quantity, variant,
 * options.
 *
 * This endpoint allows updating a specific item in a shopping cart, referenced
 * by cartId and cartItemId. It targets the shopping_mall_cart_items table,
 * supporting changes to properties such as quantity, selected product variant,
 * and option snapshot (for evidence and after-sales). Business rules validate
 * the cart's status, item existence, and ensure that the updated
 * variant/options are valid and in stock. Only the owner of the cart can update
 * items; support/admin may have elevated rights for dispute resolution.
 *
 * Upon successful update, the API returns the updated cart item, reflecting any
 * changes to inventory or option configuration, and records the operation for
 * audit trail compliance per the shopping_mall_cart_items schema. Attempts to
 * update a cart item in an expired or checked out cart, or with insufficient
 * inventory, must provide context-aware error responses.
 *
 * @param props.connection
 * @param props.cartId The unique identifier of the shopping cart containing the
 *   item to update.
 * @param props.cartItemId The unique identifier of the cart item to update
 *   within the cart.
 * @param props.body Information for updating a cart item, following
 *   IShoppingMallCartItem.IUpdate DTO, supporting quantity, variant selection,
 *   and options snapshot update.
 * @path /shoppingMall/customer/carts/:cartId/items/:cartItemId
 * @accessor api.functional.shoppingMall.customer.carts.items.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the shopping cart containing the item to
     * update.
     */
    cartId: string & tags.Format<"uuid">;

    /** The unique identifier of the cart item to update within the cart. */
    cartItemId: string & tags.Format<"uuid">;

    /**
     * Information for updating a cart item, following
     * IShoppingMallCartItem.IUpdate DTO, supporting quantity, variant
     * selection, and options snapshot update.
     */
    body: IShoppingMallCartItem.IUpdate;
  };
  export type Body = IShoppingMallCartItem.IUpdate;
  export type Response = IShoppingMallCartItem;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/customer/carts/:cartId/items/:cartItemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): IShoppingMallCartItem =>
    typia.random<IShoppingMallCartItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove (soft-delete) a cart item from a shopping cart
 * (IShoppingMallCartItem).
 *
 * This endpoint allows a user to remove (soft-delete) a specified item
 * (cartItemId) from a shopping cart (cartId). It updates the
 * shopping_mall_cart_items table's deleted_at field rather than hard-deleting
 * rows, in accordance with the schema, ensuring evidence retention for audit
 * and compliance.
 *
 * The operation verifies that the cart item exists, is currently active (not
 * already deleted), and that the parent cart is in a state permitting
 * modification. Only the cart owner or an authorized user may perform this
 * action. Attempts to remove items from a checked-out or expired cart should
 * fail with an appropriate error. All deletions are logged for audit/recovery.
 * The API returns a confirmation object or status, but no cart item body on
 * success.
 *
 * @param props.connection
 * @param props.cartId The unique identifier of the cart from which the item
 *   will be removed.
 * @param props.cartItemId The unique identifier of the cart item to remove.
 * @path /shoppingMall/customer/carts/:cartId/items/:cartItemId
 * @accessor api.functional.shoppingMall.customer.carts.items.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier of the cart from which the item will be
     * removed.
     */
    cartId: string & tags.Format<"uuid">;

    /** The unique identifier of the cart item to remove. */
    cartItemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/customer/carts/:cartId/items/:cartItemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/customer/carts/${encodeURIComponent(props.cartId ?? "null")}/items/${encodeURIComponent(props.cartItemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartId")(() => typia.assert(props.cartId));
      assert.param("cartItemId")(() => typia.assert(props.cartItemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
