import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAttachmentVersion } from "../../../../../structures/IShoppingMallAttachmentVersion";

/**
 * Create a new version for a given attachment
 * (shopping_mall_attachment_versions table).
 *
 * Create a new file version for an existing attachment by supplying all
 * relevant metadata and the server URI for the uploaded file content. This
 * operation must be used when a user (customer, seller, or admin) uploads a new
 * version of an existing file for business entities (products, reviews, orders,
 * posts, etc.).
 *
 * Permission checks are enforced to ensure only authorized users can update the
 * target attachment. The system validates that the supplied URI points to a
 * compliant file (size, type, structure) and updates are only possible for
 * attachments where the current user has replacement privileges.
 *
 * All previous versions for the attachment are preserved and retrievable via
 * audit APIs. Every new version increments the version number sequentially and
 * forms a time-stamped chain of versions for evidence and regulatory
 * compliance. If compliance, retention, or GDPR rules require blocking version
 * updates, a detailed error is returned explaining the constraint.
 *
 * Related endpoints include listing all versions of an attachment, retrieving a
 * single version, and replacing file versions for attachments used in shopping
 * mall business entities. This operation cannot be used if the parent
 * attachment is soft/hard deleted; such requests return a business logic error.
 * On success, it returns the full attachment version metadata.
 *
 * @param props.connection
 * @param props.attachmentId Target attachment's unique identifier (UUID).
 * @param props.body Metadata required to create a new attachment version for an
 *   existing attachment. Includes server file URI, version info, and audit
 *   metadata.
 * @path /shoppingMall/seller/attachments/:attachmentId/versions
 * @accessor api.functional.shoppingMall.seller.attachments.versions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target attachment's unique identifier (UUID). */
    attachmentId: string & tags.Format<"uuid">;

    /**
     * Metadata required to create a new attachment version for an existing
     * attachment. Includes server file URI, version info, and audit
     * metadata.
     */
    body: IShoppingMallAttachmentVersion.ICreate;
  };
  export type Body = IShoppingMallAttachmentVersion.ICreate;
  export type Response = IShoppingMallAttachmentVersion;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/attachments/:attachmentId/versions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/attachments/${encodeURIComponent(props.attachmentId ?? "null")}/versions`;
  export const random = (): IShoppingMallAttachmentVersion =>
    typia.random<IShoppingMallAttachmentVersion>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update metadata for an existing attachment version
 * (shopping_mall_attachment_versions table).
 *
 * Update mutable business metadata for a specific version of an attachment
 * file, such as filename, description, or permission settings. This action is
 * only available for users with edit rights (admin, original uploader, or
 * authorized party) and for attachment versions that are neither deleted nor
 * locked for compliance reasons.
 *
 * Persistence of updates is permanent: the modification is logged, and past
 * versions are recoverable via snapshot and audit subsystems. If any business
 * constraint blocks the update (e.g., immutable fields, soft/hard deleted file,
 * policy violation), the system returns an error explaining why the operation
 * was denied.
 *
 * This endpoint may be used in conjunction with version listing, retrieval, or
 * replacement APIs as part of a broader attachment/file management workflow.
 *
 * @param props.connection
 * @param props.attachmentId UUID of the parent attachment.
 * @param props.versionId UUID of the version of the attachment file to update.
 * @param props.body Update payload for the attachment version, only allowing
 *   fields that are strictly mutable per compliance.
 * @path /shoppingMall/seller/attachments/:attachmentId/versions/:versionId
 * @accessor api.functional.shoppingMall.seller.attachments.versions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the parent attachment. */
    attachmentId: string & tags.Format<"uuid">;

    /** UUID of the version of the attachment file to update. */
    versionId: string & tags.Format<"uuid">;

    /**
     * Update payload for the attachment version, only allowing fields that
     * are strictly mutable per compliance.
     */
    body: IShoppingMallAttachmentVersion.IUpdate;
  };
  export type Body = IShoppingMallAttachmentVersion.IUpdate;
  export type Response = IShoppingMallAttachmentVersion;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/attachments/:attachmentId/versions/:versionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/attachments/${encodeURIComponent(props.attachmentId ?? "null")}/versions/${encodeURIComponent(props.versionId ?? "null")}`;
  export const random = (): IShoppingMallAttachmentVersion =>
    typia.random<IShoppingMallAttachmentVersion>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("attachmentId")(() => typia.assert(props.attachmentId));
      assert.param("versionId")(() => typia.assert(props.versionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
