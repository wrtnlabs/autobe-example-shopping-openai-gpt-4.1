import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallReview } from "../../../../structures/IShoppingMallReview";
import { IPageIShoppingMallReview } from "../../../../structures/IPageIShoppingMallReview";

/**
 * Retrieve a filtered, paginated list of product review summaries
 * (shopping_mall_reviews).
 *
 * Use this endpoint to search and retrieve a paginated collection of product
 * review summaries. The operation leverages the shopping_mall_reviews table,
 * referencing all available review metadata, including associations to
 * products, orders, reviewers (customer or seller), and moderation status
 * fields.
 *
 * This endpoint is optimized for advanced filteringâ€”clients can search or sort
 * review data by product, rating, moderation status, creation date, reviewer,
 * or associated order. Full pagination support allows efficient data loading
 * for dashboards, listing pages, and analytics.
 *
 * Security: Customers can only access their own reviews. Sellers access reviews
 * on their listed products. Admins may access all reviews system-wide for
 * moderation and reporting purposes.
 *
 * The response includes only summary details (not full review content or
 * thread), suitable for listing views or analytics screens. Related APIs
 * include review detail retrieval (GET /reviews/{reviewId}), creation, and
 * update endpoints.
 *
 * @param props.connection
 * @param props.body Search criteria, filters, and pagination parameters for
 *   retrieving product review summaries.
 * @path /shoppingMall/seller/reviews
 * @accessor api.functional.shoppingMall.seller.reviews.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, filters, and pagination parameters for retrieving
     * product review summaries.
     */
    body: IShoppingMallReview.IRequest;
  };
  export type Body = IShoppingMallReview.IRequest;
  export type Response = IPageIShoppingMallReview.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/reviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/seller/reviews";
  export const random = (): IPageIShoppingMallReview.ISummary =>
    typia.random<IPageIShoppingMallReview.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific product review
 * (shopping_mall_reviews).
 *
 * This endpoint is designed to fetch complete details for a single product
 * review, based on its unique reviewId. The review is identified by its
 * shopping_mall_reviews.id, which is a UUID.
 *
 * Returned details include all core fields of the review: product association,
 * order reference, reviewer (customer or seller), rating, moderation status,
 * timestamps, and any attached content or meta. Associated fields such as
 * notifications, moderation notes, and linked thread references are also
 * included in the response as available.
 *
 * Access control ensures that customers may only view their own reviews,
 * sellers may access reviews concerning their products, and administrators may
 * view any review for moderation purposes. If the review does not exist, is
 * deleted, or access is unauthorized, an appropriate error is returned.
 *
 * Related endpoints include list/search, creation, and update APIs for product
 * reviews.
 *
 * @param props.connection
 * @param props.reviewId Unique identifier for the target product review.
 * @path /shoppingMall/seller/reviews/:reviewId
 * @accessor api.functional.shoppingMall.seller.reviews.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target product review. */
    reviewId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallReview;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/reviews/:reviewId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/reviews/${encodeURIComponent(props.reviewId ?? "null")}`;
  export const random = (): IShoppingMallReview =>
    typia.random<IShoppingMallReview>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("reviewId")(() => typia.assert(props.reviewId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
