import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductVariant } from "../../../../../structures/IShoppingMallProductVariant";
import { IPageIShoppingMallProductVariant } from "../../../../../structures/IPageIShoppingMallProductVariant";

/**
 * Create a product variant (SKU) under an existing product in
 * shopping_mall_product_variants.
 *
 * Creates a product variant (SKU) as a child resource of a specific product.
 * Required fields include sku_code (unique), option_values_hash
 * (system-generated or client-calculated), price, stock_quantity, and weight.
 * This endpoint is only available to authenticated sellers who own the parent
 * product or to admins with global privileges. On success, a new variant is
 * added; on business rule violation (e.g., duplicate SKU code, illegal option
 * combination), a detailed validation error is returned.
 *
 * Security and permissions are enforced to restrict this operation to the
 * product's owner/seller or platform admins. All input values are sanitized,
 * and the combination of option values is checked for uniqueness and
 * consistency. Referential foreign keys (productId) are validated against the
 * shopping_mall_products table.
 *
 * Error handling includes clear feedback for SKU collisions, input constraint
 * violations (e.g., negative stock, invalid price), and business logic errors
 * (e.g., parent product is deleted or paused). Upon successful creation, the
 * response includes the full new variant entity as defined in the
 * ShoppingMallProductVariant schema.
 *
 * @param props.connection
 * @param props.productId Parent product's unique identifier (UUID) for which to
 *   create the variant.
 * @param props.body Product variant creation details (SKU, option values hash,
 *   price, stock, etc.). Follows IShoppingMallProductVariant.ICreate type.
 * @path /shoppingMall/seller/products/:productId/variants
 * @accessor api.functional.shoppingMall.seller.products.variants.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Parent product's unique identifier (UUID) for which to create the
     * variant.
     */
    productId: string & tags.Format<"uuid">;

    /**
     * Product variant creation details (SKU, option values hash, price,
     * stock, etc.). Follows IShoppingMallProductVariant.ICreate type.
     */
    body: IShoppingMallProductVariant.ICreate;
  };
  export type Body = IShoppingMallProductVariant.ICreate;
  export type Response = IShoppingMallProductVariant;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/products/:productId/variants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants`;
  export const random = (): IShoppingMallProductVariant =>
    typia.random<IShoppingMallProductVariant>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and fetch a paginated list of product variants for a given product.
 *
 * The operation retrieves a filtered, paginated list of all variants belonging
 * to a specific parent product. The filtering/search criteria are submitted in
 * the request body (e.g., SKU code, stock, price filtering) and the result is a
 * page of variant summaries for administrative, seller, or catalog use. Results
 * can be sorted by attributes like created_at, price, or stock_quantity.
 *
 * The operation uses the shopping_mall_product_variants Prisma schema table,
 * with strict referential validation: only variants for the provided productId
 * are queryable. It enforces that only authorized sellers (owners of the
 * product) or platform admins can access the data for that product. Requests
 * without proper credentials or product ownership return authorization errors.
 *
 * Pagination metadata (total count, next/prev page, etc.) is included in the
 * response, as are only fields present in the .ISummary DTO and defined in the
 * underlying schema.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the parent product whose
 *   variants are being listed.
 * @param props.body Search, filter, and pagination criteria for product
 *   variants.
 * @path /shoppingMall/seller/products/:productId/variants
 * @accessor api.functional.shoppingMall.seller.products.variants.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier for the parent product whose variants are being
     * listed.
     */
    productId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination criteria for product variants. */
    body: IShoppingMallProductVariant.IRequest;
  };
  export type Body = IShoppingMallProductVariant.IRequest;
  export type Response = IPageIShoppingMallProductVariant.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/products/:productId/variants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants`;
  export const random = (): IPageIShoppingMallProductVariant.ISummary =>
    typia.random<IPageIShoppingMallProductVariant.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detail for a specific variant of a product from the
 * shopping_mall_product_variants table.
 *
 * This operation allows authorized sellers or admins to look up a single
 * variant under a specific product, ensuring precise identification and
 * security. It references the shopping_mall_product_variants Prisma schema
 * table, confirming both the variantId and its association with productId
 * before fetching the variant details. The response includes fields such as SKU
 * code, price, stock_quantity, and the determined set of option values.
 *
 * Authorization ensures that only the seller who owns the product or a platform
 * admin can view variant details. Detailed error messaging is returned for
 * absent or mismatched product/variant identifiers, or when permission is
 * denied. The endpoint does not expose any business-internal or unrelated
 * product variant data.
 *
 * Related operations include listing variants, updating variant data, or
 * managing inventory/stock directly tied to variant entries. Every variant
 * entity returned is compliant with the attributes as defined by the schema.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the parent product.
 * @param props.variantId Unique identifier for the product variant being
 *   retrieved.
 * @path /shoppingMall/seller/products/:productId/variants/:variantId
 * @accessor api.functional.shoppingMall.seller.products.variants.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the parent product. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier for the product variant being retrieved. */
    variantId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProductVariant;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/products/:productId/variants/:variantId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants/${encodeURIComponent(props.variantId ?? "null")}`;
  export const random = (): IShoppingMallProductVariant =>
    typia.random<IShoppingMallProductVariant>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("variantId")(() => typia.assert(props.variantId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a product variant (SKU) for a specific product in
 * shopping_mall_product_variants.
 *
 * Updates a SKU/variant for an existing product. Only accessible to the
 * product's owning seller or admins. Updates may affect SKU code, price, stock,
 * bar code, or option values, with full validation against product-level
 * constraints and invariant checks such as uniqueness.
 *
 * This operation references the corresponding product and enforces
 * authorization based on seller ownership or admin role. Attempting to update a
 * SKU with a duplicate code or invalid option values will result in a
 * validation error. Foreign key checks, data type validations, and all business
 * logic defined in the shopping_mall_product_variants schema are strictly
 * enforced. Partial (PUT-style) or full updates should be supported depending
 * on DTO implementation.
 *
 * On success, the updated variant entity is returned. Errors include not found,
 * unauthorized, invalid input, collision, or business rule violations. All
 * update events are recorded for audit/history.
 *
 * @param props.connection
 * @param props.productId Identifier of the parent product
 * @param props.variantId Unique identifier of the variant to update (UUID)
 * @param props.body Product variant update data according to
 *   IShoppingMallProductVariant.IUpdate DTO.
 * @path /shoppingMall/seller/products/:productId/variants/:variantId
 * @accessor api.functional.shoppingMall.seller.products.variants.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the parent product */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the variant to update (UUID) */
    variantId: string & tags.Format<"uuid">;

    /**
     * Product variant update data according to
     * IShoppingMallProductVariant.IUpdate DTO.
     */
    body: IShoppingMallProductVariant.IUpdate;
  };
  export type Body = IShoppingMallProductVariant.IUpdate;
  export type Response = IShoppingMallProductVariant;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/products/:productId/variants/:variantId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants/${encodeURIComponent(props.variantId ?? "null")}`;
  export const random = (): IShoppingMallProductVariant =>
    typia.random<IShoppingMallProductVariant>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("variantId")(() => typia.assert(props.variantId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (logical removal) of a product variant (SKU) via deleted_at in
 * shopping_mall_product_variants.
 *
 * Deletes (soft-removes) a product variant (SKU) for a specific product,
 * marking it as deleted by setting deleted_at instead of physically removing
 * the record. Only the product owner (seller) or admin can perform this
 * operation. The operation ensures that SKUs linked to past or current order
 * items, or required by product inventory audits, are never physically removed
 * for compliance reasons.
 *
 * This operation is strictly checked for business rule and permission
 * compliance. Audit trails are generated for all deletions (soft). If the
 * variant does not exist, does not belong to the seller, or is already deleted,
 * appropriate error responses are returned. The parent productId is used to
 * scope the deletion.
 *
 * The response confirms deletion (soft delete, setting deleted_at) without
 * returning the deleted entity, ensuring regulatory compliance and
 * traceability.
 *
 * @param props.connection
 * @param props.productId Parent product's unique identifier (UUID) for scoping
 *   the variant
 * @param props.variantId Identifier of the product variant to delete (UUID)
 * @path /shoppingMall/seller/products/:productId/variants/:variantId
 * @accessor api.functional.shoppingMall.seller.products.variants.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Parent product's unique identifier (UUID) for scoping the variant */
    productId: string & tags.Format<"uuid">;

    /** Identifier of the product variant to delete (UUID) */
    variantId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/seller/products/:productId/variants/:variantId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants/${encodeURIComponent(props.variantId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("variantId")(() => typia.assert(props.variantId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
