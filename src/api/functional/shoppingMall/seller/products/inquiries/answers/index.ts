import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallInquiryAnswer } from "../../../../../../structures/IShoppingMallInquiryAnswer";

/**
 * Create a new answer for a product inquiry (shopping_mall_inquiry_answers).
 *
 * Creates a new answer to a product inquiry for a specified product. Permitted
 * actors are sellers (answering their own products/inquiries) or admins
 * (platform moderation or official responses). The schema records responder
 * (seller/admin), body, official-answer flag, and relation to the target
 * inquiry.
 *
 * Validation ensures that only authorized users can answer, that the inquiry is
 * still open and not already answered if exclusive, and that
 * moderation/notification flags are set correctly. The post is subject to
 * moderation workflow with audit trail created on submission. Any attached
 * files or thread context are referenced in the request body.
 *
 * @param props.connection
 * @param props.productId Target product's unique identifier (UUID)
 * @param props.inquiryId Target inquiry's unique identifier (UUID)
 * @param props.body Answer content, authorship info, moderation/meta for new
 *   answer creation
 * @path /shoppingMall/seller/products/:productId/inquiries/:inquiryId/answers
 * @accessor api.functional.shoppingMall.seller.products.inquiries.answers.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target product's unique identifier (UUID) */
    productId: string & tags.Format<"uuid">;

    /** Target inquiry's unique identifier (UUID) */
    inquiryId: string & tags.Format<"uuid">;

    /**
     * Answer content, authorship info, moderation/meta for new answer
     * creation
     */
    body: IShoppingMallInquiryAnswer.ICreate;
  };
  export type Body = IShoppingMallInquiryAnswer.ICreate;
  export type Response = IShoppingMallInquiryAnswer;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/products/:productId/inquiries/:inquiryId/answers",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/answers`;
  export const random = (): IShoppingMallInquiryAnswer =>
    typia.random<IShoppingMallInquiryAnswer>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing answer to a product inquiry
 * (shopping_mall_inquiry_answers).
 *
 * Updates an existing product inquiry answer by its unique answerId for the
 * given product/inquiry context. Authorization checks ensure only the author
 * (seller/admin) or an admin with override rights can edit the answer.
 * Post-update, the system records a full snapshot for compliance/history.
 *
 * All moderated fields (body, official-answer flag, moderation status, etc.)
 * are eligible for update, subject to business validation. The operation
 * triggers moderation flows and audit logs, ensuring traceable compliance under
 * dispute or compliance requests. Historical versions of the answer are
 * accessible for admins.
 *
 * @param props.connection
 * @param props.productId Target product's unique identifier (UUID)
 * @param props.inquiryId Target inquiry's unique identifier (UUID)
 * @param props.answerId Target answer's unique identifier (UUID)
 * @param props.body Fields to update, including moderation state, content, and
 *   thread/meta
 * @path /shoppingMall/seller/products/:productId/inquiries/:inquiryId/answers/:answerId
 * @accessor api.functional.shoppingMall.seller.products.inquiries.answers.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target product's unique identifier (UUID) */
    productId: string & tags.Format<"uuid">;

    /** Target inquiry's unique identifier (UUID) */
    inquiryId: string & tags.Format<"uuid">;

    /** Target answer's unique identifier (UUID) */
    answerId: string & tags.Format<"uuid">;

    /**
     * Fields to update, including moderation state, content, and
     * thread/meta
     */
    body: IShoppingMallInquiryAnswer.IUpdate;
  };
  export type Body = IShoppingMallInquiryAnswer.IUpdate;
  export type Response = IShoppingMallInquiryAnswer;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/products/:productId/inquiries/:inquiryId/answers/:answerId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/answers/${encodeURIComponent(props.answerId ?? "null")}`;
  export const random = (): IShoppingMallInquiryAnswer =>
    typia.random<IShoppingMallInquiryAnswer>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.param("answerId")(() => typia.assert(props.answerId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently deletes a specific answer to a product inquiry
 * (shopping_mall_inquiry_answers).
 *
 * This endpoint is designed to delete a single answer from a product inquiry
 * within the system. It is associated with the shopping_mall_inquiry_answers
 * table in the Prisma schema, which tracks official answers provided by sellers
 * or administrators to inquiries posted about products.
 *
 * Deletion rights are typically restricted to the answer's author,
 * corresponding seller, or an administrator with moderation privileges. Since
 * soft delete is supported (via the 'deleted_at' field), this operation will
 * mark the record as deleted while retaining its history for evidence and
 * compliance purposes.
 *
 * To perform the operation, the requestor must specify the target productId,
 * inquiryId, and answerId in the path. Each ID must be a valid UUID,
 * corresponding to the hierarchy: product → inquiry → answer.
 *
 * Security: Only authenticated sellers (for their own products/inquiries) or
 * admins may execute this API. An audit log entry will be saved, and attempts
 * to delete unauthorized/nonexistent or already-deleted answers will result in
 * a relevant error.
 *
 * Related operations include creating, updating, or retrieving answers through
 * the respective endpoints. This deletion operation ensures compliance by
 * preserving the deleted state, enabling full legal traceability and rollback
 * if necessary.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the target product.
 * @param props.inquiryId Unique identifier for the product inquiry.
 * @param props.answerId Unique identifier for the answer to delete.
 * @path /shoppingMall/seller/products/:productId/inquiries/:inquiryId/answers/:answerId
 * @accessor api.functional.shoppingMall.seller.products.inquiries.answers.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the target product. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier for the product inquiry. */
    inquiryId: string & tags.Format<"uuid">;

    /** Unique identifier for the answer to delete. */
    answerId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/seller/products/:productId/inquiries/:inquiryId/answers/:answerId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/answers/${encodeURIComponent(props.answerId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.param("answerId")(() => typia.assert(props.answerId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
