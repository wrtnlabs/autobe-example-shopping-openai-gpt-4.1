import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallProductTag } from "../../../../../structures/IShoppingMallProductTag";
import { IPageIShoppingMallProductTag } from "../../../../../structures/IPageIShoppingMallProductTag";

/**
 * Create and attach a new tag to a specific product
 * (shopping_mall_product_tags).
 *
 * Add a new tag to the specified product by submitting a tag value through this
 * endpoint. The operation supports business logic for cleaning, normalizing,
 * and validating tag input, including checks for maximum allowed tags per
 * product, uniqueness, forbidden character set, and length limitations as
 * defined in the system. Duplicates are prevented at both database and logic
 * layers.
 *
 * Only users authorized as the seller of the product or as administrators can
 * add tags. The new tag is stored in shopping_mall_product_tags, and if
 * successful, the created tag with metadata is returned for further business
 * processing (AI enrichment, search, campaign eligibility).
 *
 * Validation enforces product existence, permission, and tag constraints;
 * errors are handled for duplicate attempts, permission denials, or malformed
 * input. System logs and audits track all tag creation for compliance and
 * analytics.
 *
 * @param props.connection
 * @param props.productId Unique identifier (UUID) of the product to which the
 *   tag is being added.
 * @param props.body Creation payload defining the tag value and related
 *   business metadata for the product.
 * @path /shoppingMall/seller/products/:productId/tags
 * @accessor api.functional.shoppingMall.seller.products.tags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier (UUID) of the product to which the tag is being
     * added.
     */
    productId: string & tags.Format<"uuid">;

    /**
     * Creation payload defining the tag value and related business metadata
     * for the product.
     */
    body: IShoppingMallProductTag.ICreate;
  };
  export type Body = IShoppingMallProductTag.ICreate;
  export type Response = IShoppingMallProductTag;

  export const METADATA = {
    method: "POST",
    path: "/shoppingMall/seller/products/:productId/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/tags`;
  export const random = (): IShoppingMallProductTag =>
    typia.random<IShoppingMallProductTag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate all tags associated with a specific product
 * (shopping_mall_product_tags).
 *
 * Retrieve a filtered and paginated list of tags attached to a particular
 * product in the catalog. This operation supports advanced searching by tag
 * value, filtering by tag characteristics, and sorting for administrative or UX
 * needs.
 *
 * The operation is secured, allowing only users with at least seller privileges
 * to access tags for their own products or administrators to access any
 * product's tag list for moderation and SEO.
 *
 * It utilizes the shopping_mall_product_tags schema, joining to
 * shopping_mall_products for product context and providing tag-level metadata
 * to support downstream recommendation, personalization, or campaign
 * eligibility logic. Pagination, search, and sorting improve performance and
 * scalability for products with many tags.
 *
 * Validation ensures productId refers to a real and accessible product and that
 * only authorized actors can query or audit tag relationships. Error handling
 * covers invalid productId, permission denials, and query parameter issues.
 *
 * @param props.connection
 * @param props.productId Unique identifier (UUID) of the product whose tags are
 *   to be retrieved.
 * @param props.body Search, filter, sort, and pagination options for product
 *   tag listing.
 * @path /shoppingMall/seller/products/:productId/tags
 * @accessor api.functional.shoppingMall.seller.products.tags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) of the product whose tags are to be
     * retrieved.
     */
    productId: string & tags.Format<"uuid">;

    /** Search, filter, sort, and pagination options for product tag listing. */
    body: IShoppingMallProductTag.IRequest;
  };
  export type Body = IShoppingMallProductTag.IRequest;
  export type Response = IPageIShoppingMallProductTag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/seller/products/:productId/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/tags`;
  export const random = (): IPageIShoppingMallProductTag.ISummary =>
    typia.random<IPageIShoppingMallProductTag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a detailed view of a single tag for a given product
 * (shopping_mall_product_tags).
 *
 * Fetch all metadata about a single tag assigned to a product, ensuring the
 * tagId reference is valid and belongs to the specified productId context. This
 * is used for administrative, seller, or automated review workflows, supporting
 * tasks like tag editing, compliance checks, or displaying full tag info to
 * backend systems.
 *
 * Security controls enforce that only sellers of the product or authorized
 * admins can view the tag details. The operation is implemented over the
 * shopping_mall_product_tags table, joining as needed for context.
 *
 * Validation ensures both productId and tagId are present, correspond to real
 * entities, and tagId is linked to the correct product. Errors are handled for
 * missing or mismatched tag-product relationships, permission issues, or
 * malformed identifiers.
 *
 * @param props.connection
 * @param props.productId Unique identifier (UUID) of the product being
 *   referenced.
 * @param props.tagId Unique identifier (UUID) of the tag linked to the product.
 * @path /shoppingMall/seller/products/:productId/tags/:tagId
 * @accessor api.functional.shoppingMall.seller.products.tags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the product being referenced. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the tag linked to the product. */
    tagId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallProductTag;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/seller/products/:productId/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IShoppingMallProductTag =>
    typia.random<IShoppingMallProductTag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing tag on a product (shopping_mall_product_tags) by tagId.
 *
 * Edit the tag value or its business-related metadata for a given tag attached
 * to a product. This operation allows qualified sellers (owners) or admin users
 * to update tags for purposes such as correcting typos, normalizing naming,
 * supporting new campaigns, or moderating user-generated tagging results. All
 * updates are strictly validated for system business rules: tag uniqueness
 * within the product, name/character constraints, and association integrity.
 *
 * Upon successful update, the operation returns the full, updated tag record
 * for audit and downstream system usage. Errors are handled for missing
 * product/tag references, permission issues, or tag input violations.
 *
 * Comprehensive audit logs record every change to ensure compliance and enable
 * rollback or traceability as needed for catalog, AI, or regulatory needs.
 *
 * @param props.connection
 * @param props.productId Unique identifier (UUID) of the product whose tag is
 *   to be updated.
 * @param props.tagId Unique identifier (UUID) of the tag belonging to the
 *   product requiring update.
 * @param props.body Update payload with the new tag value and/or business
 *   metadata to apply to the product tag.
 * @path /shoppingMall/seller/products/:productId/tags/:tagId
 * @accessor api.functional.shoppingMall.seller.products.tags.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the product whose tag is to be updated. */
    productId: string & tags.Format<"uuid">;

    /**
     * Unique identifier (UUID) of the tag belonging to the product
     * requiring update.
     */
    tagId: string & tags.Format<"uuid">;

    /**
     * Update payload with the new tag value and/or business metadata to
     * apply to the product tag.
     */
    body: IShoppingMallProductTag.IUpdate;
  };
  export type Body = IShoppingMallProductTag.IUpdate;
  export type Response = IShoppingMallProductTag;

  export const METADATA = {
    method: "PUT",
    path: "/shoppingMall/seller/products/:productId/tags/:tagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IShoppingMallProductTag =>
    typia.random<IShoppingMallProductTag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a tag from a product (shopping_mall_product_tags).
 *
 * This operation allows an authenticated seller or admin to permanently delete
 * a tag from a target product. Calling this endpoint removes the tag entry
 * linked to the specified product and tagId in the shopping_mall_product_tags
 * table. The tag cannot be recovered once deleted, and all downstream search,
 * recommendation, and AI personalization logic will reflect this change after
 * the operation.
 *
 * Authorization is required for either the seller who owns the product or an
 * admin role with sufficient privileges; permission is checked against both the
 * product and tag relationship. Attempting to delete a tag that is not
 * associated with the product will result in an appropriate error response.
 *
 * This operation connects tightly to the system's tag-based search and
 * recommendation modules; removing a tag may impact search rankings, product
 * discoverability, and AI-driven personalization. All deletion events are
 * logged for audit and compliance, and only soft-deleted products may have tags
 * removed if their tag records still exist. Use with caution, as deletion is
 * irreversible.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product whose tag is being
 *   deleted.
 * @param props.tagId Unique identifier of the tag to delete from the product.
 * @path /shoppingMall/seller/products/:productId/tags/:tagId
 * @accessor api.functional.shoppingMall.seller.products.tags.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the product whose tag is being deleted. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the tag to delete from the product. */
    tagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/shoppingMall/seller/products/:productId/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/seller/products/${encodeURIComponent(props.productId ?? "null")}/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
