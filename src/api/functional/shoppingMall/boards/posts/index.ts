import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallBoardPost } from "../../../../structures/IShoppingMallBoardPost";
import { IPageIShoppingMallBoardPost } from "../../../../structures/IPageIShoppingMallBoardPost";
export * as comments from "./comments/index";

/**
 * Retrieve a paginated, filtered list of board posts for a specific board.
 *
 * Fetch a filtered, paginated list of board posts from a specific board. This
 * operation utilizes the 'shopping_mall_board_posts' table and supports complex
 * list retrieval including filters for moderation status, visibility, post
 * type, author, hierarchical threading, and search on body/title content. The
 * request supports multi-criteria search, custom sorting (by created_at,
 * reply_level, author, or title), and advanced pagination controls.
 *
 * All business roles (customer, seller, admin) may access this endpoint, but
 * the details returned per post and the posts shown may vary based on requester
 * role, board configuration, and post visibility (public, private, restricted).
 * Rate limits, content masking or additional compliance measures may apply for
 * boards with private or sensitive content.
 *
 * Complex business logic may apply to determine which posts are accessible,
 * ensuring only permitted posts and details are included in each response
 * depending on requester's privileges.
 *
 * @param props.connection
 * @param props.boardId The unique identifier of the board whose posts are being
 *   listed.
 * @param props.body Advanced search, filter, pagination, and sorting criteria
 *   for listing board posts.
 * @path /shoppingMall/boards/:boardId/posts
 * @accessor api.functional.shoppingMall.boards.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** The unique identifier of the board whose posts are being listed. */
    boardId: string & tags.Format<"uuid">;

    /**
     * Advanced search, filter, pagination, and sorting criteria for listing
     * board posts.
     */
    body: IShoppingMallBoardPost.IRequest;
  };
  export type Body = IShoppingMallBoardPost.IRequest;
  export type Response = IPageIShoppingMallBoardPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/boards/:boardId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/boards/${encodeURIComponent(props.boardId ?? "null")}/posts`;
  export const random = (): IPageIShoppingMallBoardPost.ISummary =>
    typia.random<IPageIShoppingMallBoardPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full details of a board post by boardId and postId, with role-based
 * filtering and audit compliance.
 *
 * Upon successful authorization and access control checks, this retrieves
 * detailed information for a post from the 'shopping_mall_board_posts' table by
 * boardId and postId. The response includes all primary post properties,
 * including title, body, moderation status, author data (masked as
 * appropriate), content/threading details, links to version history and
 * attachments, as well as related entities (like product or order links if
 * applicable).
 *
 * Security controls are enforced so only permitted roles (customer, seller,
 * admin) may access the details, with content masked or restricted based on
 * post visibility, moderation state, and board rules. Board and post existence,
 * soft-deletion state, and access rights are validated. Read access may trigger
 * notification, audit logging, or rate-limiting according to compliance or
 * business policy.
 *
 * @param props.connection
 * @param props.boardId The unique identifier of the parent board.
 * @param props.postId The unique identifier of the target post within the
 *   board.
 * @path /shoppingMall/boards/:boardId/posts/:postId
 * @accessor api.functional.shoppingMall.boards.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the parent board. */
    boardId: string & tags.Format<"uuid">;

    /** The unique identifier of the target post within the board. */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallBoardPost;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/boards/:boardId/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/boards/${encodeURIComponent(props.boardId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IShoppingMallBoardPost =>
    typia.random<IShoppingMallBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
