import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallComment } from "../../../../../structures/IShoppingMallComment";
import { IPageIShoppingMallComment } from "../../../../../structures/IPageIShoppingMallComment";

/**
 * Retrieve a paginated list of comments for a board post
 * (shopping_mall_comments).
 *
 * Fetch, filter, and paginate comments linked to a specific board post as
 * identified by boardId and postId. The operation enables board viewers to
 * access ongoing comment threads according to sorting and visibility logic.
 * Integrated security checks apply, ensuring that only comments appropriate to
 * the viewer's permissions are returned according to the visibility and
 * moderation status fields in shopping_mall_comments.
 *
 * Business logic includes full support for search and advanced filters,
 * including reply thread level, moderation status, authorship, and time ranges.
 * Response objects only include non-deleted comments by default; admin users
 * may see all, including soft-deleted items for moderation and audit workflows.
 * Pagination and sorting parameters must follow platform-wide standards for UI
 * consistency and high-volume support. This operation is essential for board
 * UIs, moderation interfaces, and compliance review.
 *
 * The Prisma schema's threaded and multi-role author structure is respected,
 * and detailed relationships to parent comments, posts, and moderation fields
 * are reflected in both search and response formats.
 *
 * @param props.connection
 * @param props.boardId Unique ID of the board.
 * @param props.postId Unique ID of the post whose comments are requested.
 * @param props.body Filter, sort, search, and pagination parameters for comment
 *   retrieval.
 * @path /shoppingMall/boards/:boardId/posts/:postId/comments
 * @accessor api.functional.shoppingMall.boards.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique ID of the board. */
    boardId: string & tags.Format<"uuid">;

    /** Unique ID of the post whose comments are requested. */
    postId: string & tags.Format<"uuid">;

    /**
     * Filter, sort, search, and pagination parameters for comment
     * retrieval.
     */
    body: IShoppingMallComment.IRequest;
  };
  export type Body = IShoppingMallComment.IRequest;
  export type Response = IPageIShoppingMallComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/boards/:boardId/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/shoppingMall/boards/${encodeURIComponent(props.boardId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageIShoppingMallComment.ISummary =>
    typia.random<IPageIShoppingMallComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific comment on a board post by its ID (shopping_mall_comments).
 *
 * Retrieve the full detail of a comment associated with a specific board post
 * and comment ID. Permissions and data masking are enforced according to
 * comment authorship, parent board post visibility, thread level, and post
 * moderation status, as specified in the shopping_mall_comments Prisma schema
 * and business requirement documents.
 *
 * This operation supports clients needing to display an individual comment,
 * including all main fields, author role (customer, seller, admin), threading
 * metadata, moderation status, and any associated audit or compliance data. It
 * also manages logic for content masking when comments are marked as private,
 * moderated, or deleted, showing limited or redacted results based on the
 * requesting user's permissions. Error handling covers not found, access
 * denied, or redacted content scenarios.
 *
 * Clients should use this endpoint for comment detail view, compliance
 * resolution workflows, or threaded UI navigation.
 *
 * @param props.connection
 * @param props.boardId Unique ID of the board.
 * @param props.postId Unique ID of the post the comment belongs to.
 * @param props.commentId Unique ID of the comment to retrieve.
 * @path /shoppingMall/boards/:boardId/posts/:postId/comments/:commentId
 * @accessor api.functional.shoppingMall.boards.posts.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the board. */
    boardId: string & tags.Format<"uuid">;

    /** Unique ID of the post the comment belongs to. */
    postId: string & tags.Format<"uuid">;

    /** Unique ID of the comment to retrieve. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallComment;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/boards/:boardId/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/boards/${encodeURIComponent(props.boardId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IShoppingMallComment =>
    typia.random<IShoppingMallComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
