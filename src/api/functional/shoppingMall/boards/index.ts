import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallBoard } from "../../../structures/IShoppingMallBoard";
import { IPageIShoppingMallBoard } from "../../../structures/IPageIShoppingMallBoard";
export * as posts from "./posts/index";

/**
 * Search and retrieve a paginated, filtered list of bulletin boards.
 *
 * This operation retrieves a list of boards configured in the shopping mall
 * platform, allowing clients to filter by channel, section, visibility,
 * moderation settings, or keywords in the title and description. Returned board
 * data includes all visible boards matching search criteria, with full
 * pagination and sorting control for scalable UIs.
 *
 * Security and access to individual board metadata are governed by user role,
 * board visibility (public/private/role-restricted), and moderation state. Only
 * boards not soft-deleted (deleted_at is null) are included in results.
 *
 * Supports auditing and compliance requirements by only exposing board metadata
 * as allowed by platform policies, and provides essential building blocks for
 * board, inquiry, or review navigation endpoints.
 *
 * This aligns with the shopping_mall_boards schema; board, channel, and section
 * identifiers are validated against existing relationships. Bad or unauthorized
 * queries result in errors with reason codes and business logic feedback.
 * Filtering on soft/hard deletes, section/channel validity, or role-based
 * visibility is strictly enforced.
 *
 * @param props.connection
 * @param props.body Filtering, search, and pagination criteria for board list
 *   retrieval.
 * @path /shoppingMall/boards
 * @accessor api.functional.shoppingMall.boards.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering, search, and pagination criteria for board list retrieval. */
    body: IShoppingMallBoard.IRequest;
  };
  export type Body = IShoppingMallBoard.IRequest;
  export type Response = IPageIShoppingMallBoard.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppingMall/boards",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/shoppingMall/boards";
  export const random = (): IPageIShoppingMallBoard.ISummary =>
    typia.random<IPageIShoppingMallBoard.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a single bulletin board by ID.
 *
 * This operation retrieves full detail about a specified board, including
 * display configuration, description, visibility rules, moderation
 * requirements, and linkage to channel/section. Supports localization and
 * role-based access (e.g., hides private boards or restricted metadata from
 * unauthorized users).
 *
 * Access is tightly controlled: only boards not soft-deleted (deleted_at is
 * null) and accessible to the requesting user (based on their role and the
 * board visibility/permissions column) are returned. Unauthorized access
 * attempts are rejected with error codes.
 *
 * Board metadata integrates with board and post APIs for seamless construction
 * of Q&A, inquiry, or review UIs. All data accurately reflects the
 * shopping_mall_boards schema, ensuring auditability and compliance with
 * evidence policies.
 *
 * @param props.connection
 * @param props.boardId Unique identifier of the bulletin board to retrieve.
 * @path /shoppingMall/boards/:boardId
 * @accessor api.functional.shoppingMall.boards.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the bulletin board to retrieve. */
    boardId: string & tags.Format<"uuid">;
  };
  export type Response = IShoppingMallBoard;

  export const METADATA = {
    method: "GET",
    path: "/shoppingMall/boards/:boardId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/shoppingMall/boards/${encodeURIComponent(props.boardId ?? "null")}`;
  export const random = (): IShoppingMallBoard =>
    typia.random<IShoppingMallBoard>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("boardId")(() => typia.assert(props.boardId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
