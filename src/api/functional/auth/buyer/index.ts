import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IBuyer } from "../../../structures/IBuyer";
import { IAiCommerceBuyer } from "../../../structures/IAiCommerceBuyer";

/**
 * Register a new buyer (ai_commerce_buyer table) and issue JWT tokens.
 *
 * This endpoint allows a new user to join as a buyer, creating a record in the
 * ai_commerce_buyer table. It sets up essential user fields (email, hashed
 * password, initial status) according to the schema's constraints. Unique email
 * enforcement prevents duplicate accounts, and the password is never stored in
 * plaintext. Upon completion, JWT tokens are issued to the newly registered
 * account for buyer-specific access to features like cart, orders, reviews, and
 * favorites.
 *
 * Account creation does not establish relationships with other entities until
 * the user completes further onboarding steps (e.g., profile, addresses).
 * Registered buyers may later be elevated to seller through separate flows. All
 * required information comes directly from the ai_commerce_buyer schema.
 *
 * After successful execution, the response contains authorized session tokens
 * per the defined response DTO, and initial linkage is established for all
 * future buyer data.
 *
 * Security: email uniqueness, password hashing, and basic field validation are
 * handled internally per schema constraints. Role elevation and additional
 * verification occur in separate business operations.
 *
 * @param props.connection
 * @param props.body Buyer registration information as required by
 *   ai_commerce_buyer table: email, password (plain, will be hashed), and any
 *   additional initial status if needed.
 * @setHeader token.access Authorization
 *
 * @path /auth/buyer/join
 * @accessor api.functional.auth.buyer.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Buyer registration information as required by ai_commerce_buyer
     * table: email, password (plain, will be hashed), and any additional
     * initial status if needed.
     */
    body: IBuyer.ICreate;
  };
  export type Body = IBuyer.ICreate;
  export type Response = IAiCommerceBuyer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/buyer/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/buyer/join";
  export const random = (): IAiCommerceBuyer.IAuthorized =>
    typia.random<IAiCommerceBuyer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate buyer by email and password (ai_commerce_buyer), return JWT
 * tokens.
 *
 * Login endpoint for buyers. Validates email and password per the
 * ai_commerce_buyer schema, checking for a non-deleted, active status account.
 * Password is compared using secure hash, and if successful, the session
 * management logic issues JWT access and refresh tokens using
 * IAiCommerceBuyer.IAuthorized DTO. Account status, failed attempts, and error
 * feedback are handled strictly by internal business rules, referencing the
 * password_hash and status fields in the database schema. Does not support
 * non-buyer login or social/external authentication.
 *
 * @param props.connection
 * @param props.body Buyer login parameters: email and password (plaintext, will
 *   be checked against stored hash in ai_commerce_buyer table, must match for
 *   successful login).
 * @setHeader token.access Authorization
 *
 * @path /auth/buyer/login
 * @accessor api.functional.auth.buyer.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Buyer login parameters: email and password (plaintext, will be
     * checked against stored hash in ai_commerce_buyer table, must match
     * for successful login).
     */
    body: IBuyer.ILogin;
  };
  export type Body = IBuyer.ILogin;
  export type Response = IAiCommerceBuyer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/buyer/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/buyer/login";
  export const random = (): IAiCommerceBuyer.IAuthorized =>
    typia.random<IAiCommerceBuyer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh buyer session tokens using a valid refresh token
 * (ai_commerce_user_authentications).
 *
 * Refresh session JWT tokens for buyers. The submitted refresh token is
 * validated against the session records (ai_commerce_user_authentications) for
 * validity, non-expiry, and buyer_id linkage. Only sessions that are active,
 * not soft-deleted, and within defined expiration windows may be refreshed.
 * Upon validation, issues a new IAiCommerceBuyer.IAuthorized token set, while
 * old tokens may be revoked as per the internal session policy (referencing
 * session_expires_at and deleted_at fields). Standardized error responses for
 * invalid/expired tokens.
 *
 * @param props.connection
 * @param props.body Refresh token and session information (must correspond to
 *   existing, active record for the buyer in ai_commerce_user_authentications
 *   table).
 * @setHeader token.access Authorization
 *
 * @path /auth/buyer/refresh
 * @accessor api.functional.auth.buyer.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Refresh token and session information (must correspond to existing,
     * active record for the buyer in ai_commerce_user_authentications
     * table).
     */
    body: IBuyer.IRefresh;
  };
  export type Body = IBuyer.IRefresh;
  export type Response = IAiCommerceBuyer.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/buyer/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/buyer/refresh";
  export const random = (): IAiCommerceBuyer.IAuthorized =>
    typia.random<IAiCommerceBuyer.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
