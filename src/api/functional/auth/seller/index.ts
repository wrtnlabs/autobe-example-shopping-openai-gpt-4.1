import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSeller } from "../../../structures/IAiCommerceSeller";

/**
 * Register a new seller account (ai_commerce_seller table) and issue initial
 * tokens.
 *
 * This endpoint handles the registration of a new seller account for the
 * aiCommerce platform. Sellers are created as an elevated role, linked to a
 * buyer profile via the buyer_id field. The onboarding process begins by
 * collecting information such as email and password (stored as password_hash
 * for security), marking the seller's status as under_review. The operation is
 * strictly tied to the ai_commerce_seller and ai_commerce_buyer tables, making
 * use of core authentication fields documented by the schema.
 *
 * The account is set to under_review, and registration metadata such as
 * created_at is preserved for audit/tracing. Account approval and escalation
 * are handled separately via onboarding tables and admin processes. The
 * response body type follows authenticated convention, issuing
 * IAiCommerceSeller.IAuthorized, which includes JWT tokens for the session.
 *
 * Security includes validation of unique email, secure password storage, and
 * marking created accounts as pending approval. This registration does not
 * auto-approve; manual or automated compliance review is required thereafter.
 * The join operation is essential for enabling the seller onboarding lifecycle,
 * and error handling is aligned with schema constraints and business
 * guidelines.
 *
 * Related operations for login and refresh use the same authentication data
 * model. No soft delete is performed at registration. This is the only allowed
 * public endpoint for creating a new seller role; member and admin roles do not
 * use this path.
 *
 * @param props.connection
 * @param props.body Seller registration information (email, password, optional
 *   onboarding/kyc fields).
 * @setHeader token.access Authorization
 *
 * @path /auth/seller/join
 * @accessor api.functional.auth.seller.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Seller registration information (email, password, optional
     * onboarding/kyc fields).
     */
    body: IAiCommerceSeller.IJoin;
  };
  export type Body = IAiCommerceSeller.IJoin;
  export type Response = IAiCommerceSeller.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/seller/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/seller/join";
  export const random = (): IAiCommerceSeller.IAuthorized =>
    typia.random<IAiCommerceSeller.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate seller, issuing new JWT tokens (ai_commerce_seller,
 * ai_commerce_buyer).
 *
 * Authenticated login endpoint for sellers. Validates email and password
 * credentials against the ai_commerce_buyer (username/email) and
 * ai_commerce_seller (buyer_id linkage, status). Password is hashed and
 * compared to the stored password_hash field per schema, and only active
 * sellers are granted access.
 *
 * Security: Suspended/terminated sellers (status field) are denied login, and
 * audit logs should be triggered per ai_commerce_audit_logs_user. On successful
 * authentication, signed tokens are issued in the IAiCommerceSeller.IAuthorized
 * structure.
 *
 * Role specificity: This login endpoint only authenticates sellers and is not
 * available for buyers or admins. Error cases (invalid credentials, wrong
 * status) are fully aligned with schema rules and fields.
 *
 * The endpoint is the main path for session-based authentication of sellers,
 * fit for web/mobile SDKs, and requires no pre-execution of a join endpoint if
 * the account already exists.
 *
 * Error handling: Invalid email/password or account status (not active) returns
 * a clear error with no sensitive information.
 *
 * @param props.connection
 * @param props.body Seller login credentials (email, password).
 * @setHeader token.access Authorization
 *
 * @path /auth/seller/login
 * @accessor api.functional.auth.seller.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Seller login credentials (email, password). */
    body: IAiCommerceSeller.ILogin;
  };
  export type Body = IAiCommerceSeller.ILogin;
  export type Response = IAiCommerceSeller.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/seller/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/seller/login";
  export const random = (): IAiCommerceSeller.IAuthorized =>
    typia.random<IAiCommerceSeller.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for valid seller session (ai_commerce_seller,
 * ai_commerce_buyer).
 *
 * Token refresh endpoint for sellers. This operation accepts a valid refresh
 * token tied to an active seller account (ai_commerce_seller, via buyer_id
 * linkage). Upon validating token authenticity and session (referencing
 * ai_commerce_user_authentications, ai_commerce_buyer, and ai_commerce_seller
 * tables), new JWT access/refresh tokens are issued as
 * IAiCommerceSeller.IAuthorized. No account approval/escalation is performed by
 * this route.
 *
 * Security and status constraints: If a seller account is suspended or deleted
 * (per status field in ai_commerce_seller), token refresh is denied. Audit logs
 * for session/token refresh (ai_commerce_audit_logs_user) are triggered as per
 * backend compliance expectations. No request body fields are neededâ€”the token
 * is extracted from the HTTP headers.
 *
 * This operation is required for maintaining long-lived sessions and mobile SDK
 * flows for seller accounts. Related endpoints (login, join) are prerequisite
 * depending on acquisition flow, but are not called by this endpoint.
 *
 * @param props.connection
 * @setHeader token.access Authorization
 *
 * @path /auth/seller/refresh
 * @accessor api.functional.auth.seller.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Response = IAiCommerceSeller.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/seller/refresh",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/seller/refresh";
  export const random = (): IAiCommerceSeller.IAuthorized =>
    typia.random<IAiCommerceSeller.IAuthorized>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
