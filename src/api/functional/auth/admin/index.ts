import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IShoppingMallAdmin } from "../../../structures/IShoppingMallAdmin";

/**
 * Register (join) a new admin account in the shopping_mall_admins table with
 * full compliance, KYC, and audit initialization.
 *
 * This API endpoint allows for direct registration (onboarding) of new admin
 * users in the shopping mall platform, creating an entry in the
 * shopping_mall_admins table. The operation ensures all required fields—email,
 * password_hash, name, status, and kyc_status—are provided and valid per
 * schema. KYC/identity logic is enforced; status and audit fields auto-populate
 * for compliance tracking.
 *
 * Strict validation ensures the uniqueness of email (enforced via schema) and
 * the safe storage of hashed credentials, as no plain password is ever stored.
 * Upon successful registration, the system creates both the administrator
 * record and the initial session context, returning JWT access and refresh
 * tokens in accordance with platform IAM and audit requirements.
 *
 * Admin registration differs from member (customer) and seller flows: it does
 * not allow role escalation (customer→admin) and requires explicit direct
 * onboarding, usually via restricted admin interface. The request has no
 * dependencies to other business APIs but applies heightened security
 * controls—server-side input validation, strong password policies, and
 * immediate compliance audit entry in the event log.
 *
 * Security and audit are tightly integrated, with every registration event
 * triggering a new entry in both shopping_mall_admin_snapshots and system-wide
 * audit logs. Any registration denial or failure is logged with detailed error
 * context, preventing ambiguous or untracked failures.
 *
 * Related operations include admin login and refresh. This operation must be
 * used with care—ideally automated, not public-facing, and only invoked by
 * system integrators or platform staff. Must not allow re-registration of
 * existing admins and should limit exposure to brute force or enumeration
 * attacks.
 *
 * @param props.connection
 * @param props.body Admin registration info: email, password_hash, name, KYC
 *   status, etc.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Admin registration info: email, password_hash, name, KYC status, etc. */
    body: IShoppingMallAdmin.IJoin;
  };
  export type Body = IShoppingMallAdmin.IJoin;
  export type Response = IShoppingMallAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): IShoppingMallAdmin.IAuthorized =>
    typia.random<IShoppingMallAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate an admin and issue JWT tokens matching
 * IShoppingMallAdmin.IAuthorized; entry must be active, KYC-verified, and not
 * soft-deleted.
 *
 * Allows an admin to log in to the platform by submitting credentials (email,
 * password), which are matched against shopping_mall_admins. The system
 * verifies hashed password, account status, and KYC_state. Upon success, it
 * issues JWT access/refresh tokens, packed in IShoppingMallAdmin.IAuthorized,
 * and creates a new admin session entry. Only accounts with active
 * status/verified KYC are accepted.
 *
 * Audit trails and security snapshots are recorded for every login attempt,
 * including failed attempts for compliance and fraud analytics. This procedure
 * is distinct from seller and customer login, enforcing stricter KYC and
 * account state rules—admins must not be soft-deleted, pending, or withdrawn.
 * Brute force protection and rate limiting apply.
 *
 * All input credentials are validated strictly to the schema. If authentication
 * fails, or if the admin account is suspended/pending/withdrawn, the response
 * is a clear error, and the event is logged in the audit chain. Success
 * triggers session and token issuance and records the event for compliance
 * traceability.
 *
 * Related endpoints: join (admin registration) and refresh (token renewal).
 * This login is only for admin role and accepts only direct credentials—not
 * OAuth or federated accounts.
 *
 * @param props.connection
 * @param props.body Admin login payload: email and password as per
 *   IShoppingMallAdmin.ILogin.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @accessor api.functional.auth.admin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Admin login payload: email and password as per
     * IShoppingMallAdmin.ILogin.
     */
    body: IShoppingMallAdmin.ILogin;
  };
  export type Body = IShoppingMallAdmin.ILogin;
  export type Response = IShoppingMallAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): IShoppingMallAdmin.IAuthorized =>
    typia.random<IShoppingMallAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin JWT refresh: Validates refresh token and issues new JWT access/refresh
 * tokens to compliant, KYC-verified admin.
 *
 * Allows an admin with a valid refresh token to renew their JWT access/refresh
 * tokens. This operation checks the validity of the presented refresh token,
 * the admin's status (must be active and not soft-deleted), and compliance with
 * current session security policies. When successful, it issues new tokens and
 * records the renewal in both admin snapshots and system audit logs for
 * compliance and traceability.
 *
 * Unlike customer/seller token refresh, admin refresh includes extra checks for
 * KYC/identity status and proper status (not revoked/suspended/withdrawn). Only
 * valid, non-expired refresh tokens issued for the admin account are accepted;
 * all status and KYC checks are enforced prior to token renewal.
 *
 * Security logs and compliance events are written for both successful and
 * unsuccessful attempts, with audit trail across all relevant session state
 * transitions. All input and output match schema definitions and the
 * IShoppingMallAdmin.IAuthorized DTO contract.
 *
 * Related endpoints: admin join (registration) and login (authenticate/issue
 * new tokens). This endpoint is not for OAuth or anonymous session
 * renewal—admin credential context is always required.
 *
 * @param props.connection
 * @param props.body Payload containing the refresh token as per
 *   IShoppingMallAdmin.IRefresh.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Payload containing the refresh token as per
     * IShoppingMallAdmin.IRefresh.
     */
    body: IShoppingMallAdmin.IRefresh;
  };
  export type Body = IShoppingMallAdmin.IRefresh;
  export type Response = IShoppingMallAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): IShoppingMallAdmin.IAuthorized =>
    typia.random<IShoppingMallAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
