import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceAdmin } from "../../../structures/IAiCommerceAdmin";

/**
 * Register a new admin account (ai_commerce_admin table) for platform/internal
 * use only.
 *
 * This API registers a new administrator account on the aiCommerce platform
 * (ai_commerce_admin table).
 *
 * Paragraph 1: Use for platform-controlled internal provisioning (not public
 * self-registration), as all admin actions have platform-wide impact according
 * to the admin role definition and schema comment.
 *
 * Paragraph 2: The request body references IAiCommerceAdmin.IJoin and expects
 * unique email, secure password, and initial status fields. The
 * ai_commerce_admin schema enforces email uniqueness and proper password hash
 * storage.
 *
 * Paragraph 3: Upon successful registration, administrator authentication is
 * established via entry into ai_commerce_user_authentications with
 * session/security metadata, leveraging the system's JWT/token infrastructure.
 *
 * Paragraph 4: Only internal or automated system actors should execute this
 * endpoint. Security must be enforced at the controller/service level to block
 * any non-authorized invocations. Error handling covers existing email conflict
 * and input validation.
 *
 * Paragraph 5: Typical onboarding flows chain with admin login and session
 * refresh using the respective authentication endpoints. All administrative
 * actions are audit-logged as required by the business compliance layer.
 *
 * @param props.connection
 * @param props.body Admin registration input (email, secure password, status).
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Admin registration input (email, secure password, status). */
    body: IAiCommerceAdmin.IJoin;
  };
  export type Body = IAiCommerceAdmin.IJoin;
  export type Response = IAiCommerceAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): IAiCommerceAdmin.IAuthorized =>
    typia.random<IAiCommerceAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate an admin user and issue tokens (ai_commerce_admin table).
 *
 * Login/authentication endpoint for administrator users on the aiCommerce
 * platform (ai_commerce_admin table).
 *
 * Paragraph 1: Accepts admin email and password as specified in
 * IAiCommerceAdmin.ILogin. Verifies credentials using the admin schema's
 * password_hash and status fields.
 *
 * Paragraph 2: Upon successful match, records a new
 * ai_commerce_user_authentications entry and issues access/refresh tokens
 * through JWT/session infrastructure. Suspended/deleted status or invalid
 * credentials result in error responses as required by the compliance logic.
 *
 * Paragraph 3: All login attempts are audit-logged, leveraging the
 * ai_commerce_audit_logs_user schema for evidentiary and compliance
 * enforcement. Multiple failed attempts may trigger lockout or security
 * notifications.
 *
 * Paragraph 4: Authorization tokens and account info are returned
 * (IAiCommerceAdmin.IAuthorized). Session policies (expiry, refresh) are
 * governed by the admin authentication policy determined in platform
 * configuration.
 *
 * Paragraph 5: To maintain secure privileged access, this operation is intended
 * for administrator accounts only; invoke join for registration and refresh for
 * session renewal as part of the overall authentication workflow lifecycle.
 *
 * @param props.connection
 * @param props.body Admin login input (email and password).
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @accessor api.functional.auth.admin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Admin login input (email and password). */
    body: IAiCommerceAdmin.ILogin;
  };
  export type Body = IAiCommerceAdmin.ILogin;
  export type Response = IAiCommerceAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): IAiCommerceAdmin.IAuthorized =>
    typia.random<IAiCommerceAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh admin JWT session tokens (admin authentication, ai_commerce_admin
 * table).
 *
 * Allows session/token refresh for authenticated administrators on the
 * aiCommerce platform using valid refresh tokens.
 *
 * Paragraph 1: Accepts the refresh token as per IAiCommerceAdmin.IRefresh,
 * validating it for existence, expiry, and linkage to an active
 * ai_commerce_user_authentications record.
 *
 * Paragraph 2: Admin account status is checked via the ai_commerce_admin
 * schema; suspended/deleted statuses are blocked from refreshing.
 *
 * Paragraph 3: On success, issues new access/refresh tokens and returns updated
 * IAiCommerceAdmin.IAuthorized payload for privileged admin session.
 *
 * Paragraph 4: All refresh attempts (success/failure) are logged in the
 * ai_commerce_audit_logs_user table for compliance and traceability.
 *
 * Paragraph 5: This endpoint is to be invoked by UI or automation just before
 * session expiry and integrates with the login/join endpoints for full
 * authentication lifecycle management for admin users.
 *
 * @param props.connection
 * @param props.body Refresh token and session info for admin account.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token and session info for admin account. */
    body: IAiCommerceAdmin.IRefresh;
  };
  export type Body = IAiCommerceAdmin.IRefresh;
  export type Response = IAiCommerceAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): IAiCommerceAdmin.IAuthorized =>
    typia.random<IAiCommerceAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
