import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceInquiry } from "../../../structures/IAiCommerceInquiry";
import { IPageIAiCommerceInquiry } from "../../../structures/IPageIAiCommerceInquiry";

/**
 * List inquiries (with filtering and pagination) from ai_commerce_inquiries
 * table.
 *
 * Fetches a paginated, filtered, and optionally sorted list of product
 * inquiries as stored in the ai_commerce_inquiries table. Search parameters may
 * include filtering by product ID, author ID, inquiry status, and keywords.
 *
 * The operation supports both buyers searching for their own inquiries and
 * public browsing, with results subject to each inquiry's visibility property.
 * Backend filtering ensures compliance with privacy policies and returns only
 * those inquiries the requesting user is permitted to view.
 *
 * The response format includes a page of inquiry summary objects and pagination
 * metadata. The search and pagination logic is aligned to platform conventions
 * for performance and usability.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for listing
 *   inquiries, as defined in IAiCommerceInquiry.IRequest.
 * @path /aiCommerce/inquiries
 * @accessor api.functional.aiCommerce.inquiries.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination parameters for listing inquiries, as
     * defined in IAiCommerceInquiry.IRequest.
     */
    body: IAiCommerceInquiry.IRequest;
  };
  export type Body = IAiCommerceInquiry.IRequest;
  export type Response = IPageIAiCommerceInquiry.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/inquiries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/inquiries";
  export const random = (): IPageIAiCommerceInquiry.ISummary =>
    typia.random<IPageIAiCommerceInquiry.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of an inquiry (ai_commerce_inquiries table).
 *
 * Fetches all detailed fields of a single inquiry, uniquely identified by its
 * inquiryId path parameter. The returned object includes question, author,
 * associated product, timestamps, visibility, answer, and status.
 *
 * Permission checks are enforced so that private inquiries are visible only to
 * the author, product owner (seller), or administrators. Public inquiries are
 * available to all users. Attempts to access non-existent or unauthorized
 * resources produce appropriate errors.
 *
 * This endpoint is essential for supporting the inquiry Q&A user experience and
 * providing a detailed view for moderation and audit processes.
 *
 * @param props.connection
 * @param props.inquiryId Unique identifier for the inquiry to retrieve.
 * @path /aiCommerce/inquiries/:inquiryId
 * @accessor api.functional.aiCommerce.inquiries.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the inquiry to retrieve. */
    inquiryId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceInquiry;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/inquiries/:inquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}`;
  export const random = (): IAiCommerceInquiry =>
    typia.random<IAiCommerceInquiry>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
