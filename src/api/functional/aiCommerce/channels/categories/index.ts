import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceCategory } from "../../../../structures/IAiCommerceCategory";

/**
 * Retrieve detailed information about a specific channel category from
 * ai_commerce_categories.
 *
 * This operation retrieves detailed information about a specific category under
 * a particular channel. Categories are managed as tree structures for product
 * classification, filtering, and analytics, each mapped to a parent channel.
 * The operation requires both the channelId and categoryId as path parameters.
 * It outputs all category fields including hierarchical level, parent/child
 * relationships, activation status, business_workflow status, and audit
 * timestamps.
 *
 * Security is consideredâ€”while category structure is readable by most users,
 * detailed editing is reserved for administrative roles. This endpoint supports
 * front-end category navigation, analytics, and business rule enforcement.
 * Using the ai_commerce_categories table as defined in the Prisma schema,
 * related data includes channel linkage, parentage, and active/archived state.
 * Error scenarios include missing IDs, non-existent or deleted categories, and
 * channel-category mismatches.
 *
 * Developers may use this API in combination with category listing or channel
 * querying APIs to power mobile or web navigation, and with admin/creator
 * permission for more advanced category management flows.
 *
 * @param props.connection
 * @param props.channelId Unique identifier of the parent sales channel (UUID
 *   format).
 * @param props.categoryId Unique identifier of the category to retrieve (UUID
 *   format).
 * @path /aiCommerce/channels/:channelId/categories/:categoryId
 * @accessor api.functional.aiCommerce.channels.categories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent sales channel (UUID format). */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier of the category to retrieve (UUID format). */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceCategory;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/channels/:channelId/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/channels/${encodeURIComponent(props.channelId ?? "null")}/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IAiCommerceCategory =>
    typia.random<IAiCommerceCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
