import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceComment } from "../../../../structures/IAiCommerceComment";
import { IPageIAiCommerceComment } from "../../../../structures/IPageIAiCommerceComment";

/**
 * Paginated, filterable comment list for a given bulletin (ai_commerce_comments
 * by bulletin).
 *
 * Search and retrieve a list of comments (replies/discussions) for a given
 * bulletin identified by bulletinId, with support for pagination, searching,
 * filtering by author or status, and sorting by creation time or other fields.
 *
 * This endpoint enables threaded comment management for announcements, with
 * security/visibility handled depending on user role: buyers may see public
 * comments, admins can moderate and see all statuses. It references the
 * ai_commerce_comments table with a FK to the bulletin.
 *
 * Paginated results are returned, and related endpoints include get, create,
 * update, and moderation actions.
 *
 * @param props.connection
 * @param props.bulletinId ID of the bulletin whose comments are being listed.
 * @param props.body Filter, search, and pagination options for comment
 *   retrieval.
 * @path /aiCommerce/bulletins/:bulletinId/comments
 * @accessor api.functional.aiCommerce.bulletins.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** ID of the bulletin whose comments are being listed. */
    bulletinId: string & tags.Format<"uuid">;

    /** Filter, search, and pagination options for comment retrieval. */
    body: IAiCommerceComment.IRequest;
  };
  export type Body = IAiCommerceComment.IRequest;
  export type Response = IPageIAiCommerceComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/bulletins/:bulletinId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/bulletins/${encodeURIComponent(props.bulletinId ?? "null")}/comments`;
  export const random = (): IPageIAiCommerceComment.ISummary =>
    typia.random<IPageIAiCommerceComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bulletinId")(() => typia.assert(props.bulletinId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific comment by bulletin and comment ID (ai_commerce_comments).
 *
 * Get the complete details of a specific comment on a bulletin, identified by
 * both bulletinId and commentId. The response includes content, author,
 * creation date, moderation status, and all relevant fields from
 * ai_commerce_comments. Buyers may retrieve comments that are public or
 * addressed to them; admins may retrieve all.
 *
 * The endpoint validates both UUID parameters and returns an error if not found
 * or access denied due to visibility. Related endpoints enable retrieval of all
 * comments for a bulletin or management of thread hierarchies.
 *
 * @param props.connection
 * @param props.bulletinId ID of the bulletin for comment retrieval context.
 * @param props.commentId Unique identifier for the comment to retrieve.
 * @path /aiCommerce/bulletins/:bulletinId/comments/:commentId
 * @accessor api.functional.aiCommerce.bulletins.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the bulletin for comment retrieval context. */
    bulletinId: string & tags.Format<"uuid">;

    /** Unique identifier for the comment to retrieve. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceComment;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/bulletins/:bulletinId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/bulletins/${encodeURIComponent(props.bulletinId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IAiCommerceComment =>
    typia.random<IAiCommerceComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bulletinId")(() => typia.assert(props.bulletinId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
