import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceBulletin } from "../../../structures/IAiCommerceBulletin";
export * as comments from "./comments/index";

/**
 * Get the details of a specific bulletin by its ID (ai_commerce_bulletins).
 *
 * Retrieve the detailed contents of a specific bulletin by its unique
 * identifier. This includes all public fields such as title, body, visibility,
 * status, and timestamps, suitable for display in user or admin dashboards.
 *
 * Buyers may only view published and public bulletins, while admins can view
 * all bulletins regardless of status or visibility. The bulletinId parameter is
 * required and mapped directly to the record's UUID in the
 * ai_commerce_bulletins table.
 *
 * On not found, an appropriate error is returned. Usage of this endpoint is
 * controlled by the caller's role and bulletin visibility status.
 *
 * @param props.connection
 * @param props.bulletinId The unique identifier of the bulletin to retrieve.
 * @path /aiCommerce/bulletins/:bulletinId
 * @accessor api.functional.aiCommerce.bulletins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the bulletin to retrieve. */
    bulletinId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceBulletin;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/bulletins/:bulletinId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/bulletins/${encodeURIComponent(props.bulletinId ?? "null")}`;
  export const random = (): IAiCommerceBulletin =>
    typia.random<IAiCommerceBulletin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bulletinId")(() => typia.assert(props.bulletinId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
