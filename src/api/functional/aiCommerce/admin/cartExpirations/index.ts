import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceCartExpiration } from "../../../../structures/IAiCommerceCartExpiration";
import { IPageIAiCommerceCartExpiration } from "../../../../structures/IPageIAiCommerceCartExpiration";

/**
 * Search and retrieve paginated cart expiration/recovery event records.
 *
 * Retrieve a filtered and paginated collection of cart expiration and recovery
 * records. This operation interfaces with ai_commerce_cart_expirations to
 * support business insights, troubleshooting, and compliance reporting.
 *
 * Filters include expiration type (expiration, recovery, retry, auto_reopen),
 * cart ID, actor ID, and date/time range. All outputs are structured in a
 * paginated format and conform to system audit policies. Authorization is
 * required for access to privacy-sensitive fields, and only users with audit or
 * support privileges are permitted to use this endpoint.
 *
 * Searches with invalid input parameters, or requests exceeding result size
 * limits, are properly rejected with errors conforming to platform policies.
 * All relevant queries and results are logged for compliance and evidence
 * purposes.
 *
 * @param props.connection
 * @param props.body Request parameters for filtered search and pagination of
 *   cart expiration records, supporting event type, cart ID, actor ID, and
 *   temporal window.
 * @path /aiCommerce/admin/cartExpirations
 * @accessor api.functional.aiCommerce.admin.cartExpirations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request parameters for filtered search and pagination of cart
     * expiration records, supporting event type, cart ID, actor ID, and
     * temporal window.
     */
    body: IAiCommerceCartExpiration.IRequest;
  };
  export type Body = IAiCommerceCartExpiration.IRequest;
  export type Response = IPageIAiCommerceCartExpiration.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/cartExpirations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/cartExpirations";
  export const random = (): IPageIAiCommerceCartExpiration.ISummary =>
    typia.random<IPageIAiCommerceCartExpiration.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific cart expiration/recovery
 * event.
 *
 * Fetch detailed information for a specific cart expiration or recovery event
 * by cartExpirationId. The ai_commerce_cart_expirations table holds append-only
 * audit records for expiration logic enforcement, user support, and
 * compliance.
 *
 * Role-based permissions restrict this operation to audit or administrative
 * users. The returned data includes the event type, cart ID, actor (if any),
 * business reason, and a timestamp. If no record is found, a descriptive
 * not-found error is returned. All access attempts are audit-logged for later
 * review.
 *
 * Output fields will mask or redact sensitive details as necessary for
 * compliance or data privacy regulation, and underlying storage of audit/log
 * data ensures data integrity and non-repudiation.
 *
 * @param props.connection
 * @param props.cartExpirationId Unique identifier of the cart expiration or
 *   recovery event record to retrieve.
 * @path /aiCommerce/admin/cartExpirations/:cartExpirationId
 * @accessor api.functional.aiCommerce.admin.cartExpirations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the cart expiration or recovery event record to
     * retrieve.
     */
    cartExpirationId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceCartExpiration;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/cartExpirations/:cartExpirationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/cartExpirations/${encodeURIComponent(props.cartExpirationId ?? "null")}`;
  export const random = (): IAiCommerceCartExpiration =>
    typia.random<IAiCommerceCartExpiration>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartExpirationId")(() =>
        typia.assert(props.cartExpirationId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
