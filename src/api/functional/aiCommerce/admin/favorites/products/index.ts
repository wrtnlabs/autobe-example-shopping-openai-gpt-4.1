import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceFavoritesProduct } from "../../../../../structures/IAiCommerceFavoritesProduct";
import { IAiCommercePageIFavoritesProduct } from "../../../../../structures/IAiCommercePageIFavoritesProduct";

/**
 * Search and paginate a user's product favorites
 * (ai_commerce_favorites_products table).
 *
 * Allows authenticated users to retrieve a paginated, filtered, and optionally
 * sorted list of their product favorites for display, organization, and further
 * action. Users may filter by product_id, creation date, label, folder, or
 * other summary fields as per business rules. This operation is scoped to only
 * the favorites accessible to the calling user unless executed by an admin.
 *
 * All filtering and paging fields must match the
 * IAiCommerceFavoritesProduct.IRequest schema. Output is always a paginated
 * summary for efficient UI consumption and analytics.
 *
 * Errors include unauthorized access, invalid search parameters, or failures to
 * locate matching records. This endpoint enables user-friendly favorites list
 * UI as well as batch organization, alert setup, and cross-linking with
 * recommendations or notification logic. It should be used together with
 * favorites add, remove, and detail APIs for full-featured personalization.
 *
 * @param props.connection
 * @param props.body Favorite product filter/search and pagination request
 *   parameters (IAiCommerceFavoritesProduct.IRequest).
 * @path /aiCommerce/admin/favorites/products
 * @accessor api.functional.aiCommerce.admin.favorites.products.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Favorite product filter/search and pagination request parameters
     * (IAiCommerceFavoritesProduct.IRequest).
     */
    body: IAiCommerceFavoritesProduct.IRequest;
  };
  export type Body = IAiCommerceFavoritesProduct.IRequest;
  export type Response = IAiCommercePageIFavoritesProduct.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/favorites/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/favorites/products";
  export const random = (): IAiCommercePageIFavoritesProduct.ISummary =>
    typia.random<IAiCommercePageIFavoritesProduct.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
