import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProduct } from "../../../../structures/IAiCommerceProduct";
import { IPageIAiCommerceProduct } from "../../../../structures/IPageIAiCommerceProduct";
export * as variants from "./variants/index";
export * as images from "./images/index";
export * as contents from "./contents/index";
export * as seo from "./seo/index";
export * as legalCompliance from "./legalCompliance/index";
export * as categoryBindings from "./categoryBindings/index";
export * as sectionBindings from "./sectionBindings/index";
export * as snapshots from "./snapshots/index";
export * as auditLogs from "./auditLogs/index";

/**
 * Create a new product with business, inventory, and compliance details in
 * ai_commerce_products.
 *
 * Register a new product to the system as a seller or admin. Input data must
 * conform to IAiCommerceProduct.ICreate, including required business business
 * attributes (name, description), seller and store association, product
 * code/SKU, category assignments, base price, inventory details, and compliance
 * fields as mandated by platform policy. Optional variant/option definitions
 * may be specified at create time.
 *
 * Created products are initially saved as draft or require admin approval
 * depending on business workflow. The operation ensures all core validations:
 * required fields are present, price and inventory are within allowed limits,
 * SKU uniqueness is enforced, and regulatory requirements (certifications,
 * compliance region) are satisfied. Compliance status, legal snapshots, and
 * business rules are enforced according to the ai_commerce_products schema and
 * associated tables.
 *
 * Audit trails are generated for create events and reference all
 * actor/ownership information. The new product record is returned in detail
 * (IAiCommerceProduct DTO) after successful creation. Related endpoints include
 * product search (PATCH /products), detail (GET /products/{productId}), and
 * update (PUT /products/{productId}).
 *
 * @param props.connection
 * @param props.body Required information for new product registration,
 *   including business fields, inventory, and compliance.
 * @path /aiCommerce/admin/products
 * @accessor api.functional.aiCommerce.admin.products.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Required information for new product registration, including business
     * fields, inventory, and compliance.
     */
    body: IAiCommerceProduct.ICreate;
  };
  export type Body = IAiCommerceProduct.ICreate;
  export type Response = IAiCommerceProduct;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/products";
  export const random = (): IAiCommerceProduct =>
    typia.random<IAiCommerceProduct>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and retrieve a filtered, paginated list of products (admin
 * only) in ai_commerce_products.
 *
 * Retrieve a filtered and paginated list of products registered in the system.
 * The operation utilizes the IAICommerceProduct.IRequest DTO for rich query
 * capabilities including search by product name, code, store, seller, and
 * channel association. This API enables searching by status (draft, active,
 * paused, suspended, discontinued, deleted), pricing ranges, category or
 * section bindings, and supports keyword-based quick searching.
 *
 * Access to product search is generally restricted to admin users for
 * management, moderation, and analytics. Security considerations include rate
 * limiting and filtering of privileged information based on user authorization
 * levels. Only admins can view full unmoderated details (including deleted
 * products or compliance status); sellers or buyers may have limited
 * visibility.
 *
 * Using the ai_commerce_products table as the primary source, this operation
 * joins relevant entities (seller, store, categories, variants) where necessary
 * for filtering and aggregation. Pagination and sorting parameters are
 * essential to ensure scalable high-volume queries. Error handling includes
 * validation for out-of-range paging parameters, invalid filters, or
 * unauthorized data exposure. Related endpoints include detail retrieval (GET
 * /products/{productId}) and creation (POST /products).
 *
 * @param props.connection
 * @param props.body Filter and pagination criteria for product search,
 *   supporting keyword, status, category, seller, etc.
 * @path /aiCommerce/admin/products
 * @accessor api.functional.aiCommerce.admin.products.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter and pagination criteria for product search, supporting
     * keyword, status, category, seller, etc.
     */
    body: IAiCommerceProduct.IRequest;
  };
  export type Body = IAiCommerceProduct.IRequest;
  export type Response = IPageIAiCommerceProduct.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/products";
  export const random = (): IPageIAiCommerceProduct.ISummary =>
    typia.random<IPageIAiCommerceProduct.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific product by ID in
 * ai_commerce_products.
 *
 * Fetch detailed information about a specific product, given its unique
 * productId. The endpoint returns all data defined in the IAICommerceProduct
 * DTO, which comprises business attributes (name, SKU, price, inventory),
 * product status, option/variant configuration, and full content for frontend
 * or admin interfaces. Also includes compliance/legal markers, attached assets,
 * section/category assignments, and historical state if available.
 *
 * Product detail is viewable by admins for all records. Sellers may access
 * their own product details, including draft or paused listings. Buyers and
 * visitors are restricted to approved/active products and are not exposed to
 * internal fields or audit history.
 *
 * Uses ai_commerce_products as the main record, joining with variants,
 * compliance, store, and seller if needed. Error scenarios handled include
 * invalid/absent productId, unauthorized access to unpublished or deleted
 * products, and malformed queries. Complementary to PATCH /products (search),
 * PUT/POST for create/update, and DELETE/erase endpoints.
 *
 * @param props.connection
 * @param props.productId Unique identifier (UUID) of the target product.
 * @path /aiCommerce/admin/products/:productId
 * @accessor api.functional.aiCommerce.admin.products.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the target product. */
    productId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProduct;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/products/:productId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): IAiCommerceProduct =>
    typia.random<IAiCommerceProduct>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update product information and attributes for a specific productId in
 * ai_commerce_products.
 *
 * Edit or update fields of a product record identified by productId, using
 * IAiCommerceProduct.IUpdate to specify modified values. All modifications are
 * subject to role-based access control: sellers can only update their own
 * products, while admins may edit any product for correction/audit. Supported
 * fields include business attributes, pricing, inventory quantities, product
 * content, attachments, category/section bindings, variant/option
 * configurations, and compliance/certification fields.
 *
 * The operation enforces SKU uniqueness, pricing and inventory limits, and
 * legal compliance by validating updates per the ai_commerce_products schema
 * and regulatory requirements. On successful update, an audit snapshot is
 * captured for traceability. Error handling includes invalid productId,
 * unauthorized access, edit attempts for locked or deleted products, or
 * validation failures on submitted data. Related endpoints are GET
 * /products/{productId} (read), POST /products (create), and DELETE
 * /products/{productId} (deletion).
 *
 * @param props.connection
 * @param props.productId Unique identifier (UUID) of the product to update.
 * @param props.body Product update information: only the fields to modify are
 *   required, others may be omitted.
 * @path /aiCommerce/admin/products/:productId
 * @accessor api.functional.aiCommerce.admin.products.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the product to update. */
    productId: string & tags.Format<"uuid">;

    /**
     * Product update information: only the fields to modify are required,
     * others may be omitted.
     */
    body: IAiCommerceProduct.IUpdate;
  };
  export type Body = IAiCommerceProduct.IUpdate;
  export type Response = IAiCommerceProduct;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/products/:productId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): IAiCommerceProduct =>
    typia.random<IAiCommerceProduct>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently erase (soft delete) a product by productId in
 * ai_commerce_products (admin only).
 *
 * Permanently remove the specified product from the database, given its
 * productId. This is a hard delete operation—deleted_at is set for logical
 * removal as per table schema (soft delete semantics), but the record is
 * effectively excluded from all business logic and interfaces. Only users with
 * admin privileges may perform product deletion.
 *
 * The operation ensures data integrity by verifying that the target product is
 * not referenced by any active or historical orders, audits, or compliance
 * holds; if so, deletion is prevented and an error is returned. Otherwise, the
 * product record is flagged as deleted, associated options/variants are handled
 * according to policy, and an audit record is generated for compliance. Soft
 * delete is implemented as standard platform policy, retaining all legal and
 * compliance history. Error cases include invalid productId, unauthorized
 * deletion attempt, or product currently in use.
 *
 * @param props.connection
 * @param props.productId Unique identifier (UUID) of the product to permanently
 *   erase.
 * @path /aiCommerce/admin/products/:productId
 * @accessor api.functional.aiCommerce.admin.products.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the product to permanently erase. */
    productId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/products/:productId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
