import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductAuditLog } from "../../../../../structures/IAiCommerceProductAuditLog";
import { IPageIAiCommerceProductAuditLog } from "../../../../../structures/IPageIAiCommerceProductAuditLog";

/**
 * Search and retrieve audit logs of a product (ai_commerce_product_audit_logs).
 *
 * This operation allows authorized sellers or admins to review the complete
 * audit history for a product, using advanced search, filter, and pagination
 * parameters passed in IAiCommerceProductAuditLog.IRequest. The endpoint
 * returns IPageIAiCommerceProductAuditLog, detailing each audit event, its
 * source/actor, what changed, and when.
 *
 * All accesses must be logged as read operations for compliance. No data is
 * modified by this method. Audit logs are critical for legal compliance,
 * security, forensic analysis, and dispute investigations, so business logic
 * must ensure only properly authorized users have access. When requested,
 * highly sensitive or private changes may be subject to further masking or
 * redaction based on platform compliance policy.
 *
 * @param props.connection
 * @param props.productId UUID of the product whose audit logs will be
 *   retrieved.
 * @param props.body Advanced filtering and pagination options for product audit
 *   logs retrieval.
 * @path /aiCommerce/admin/products/:productId/auditLogs
 * @accessor api.functional.aiCommerce.admin.products.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the product whose audit logs will be retrieved. */
    productId: string & tags.Format<"uuid">;

    /**
     * Advanced filtering and pagination options for product audit logs
     * retrieval.
     */
    body: IAiCommerceProductAuditLog.IRequest;
  };
  export type Body = IAiCommerceProductAuditLog.IRequest;
  export type Response = IPageIAiCommerceProductAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/products/:productId/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/products/${encodeURIComponent(props.productId ?? "null")}/auditLogs`;
  export const random = (): IPageIAiCommerceProductAuditLog =>
    typia.random<IPageIAiCommerceProductAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific product audit log entry by auditLogId from the
 * ai_commerce_product_audit_logs table.
 *
 * This endpoint retrieves a detailed audit log entry for a specific product by
 * its unique identifiers. Audit logs in aiCommerce capture every critical event
 * related to a productâ€”such as creation, update, compliance reviews, price
 * changes, and deletions. Each record includes the productId and auditLogId as
 * path parameters, as well as information like event_type, actor_id,
 * before_json, after_json, and created_at, ensuring full reconstructibility for
 * legal, compliance, and business intelligence needs.
 *
 * Strict access control is enforced: only users with the admin role, or those
 * granted explicit audit/review permissions may use this endpoint. The
 * operation ties into the immutable, append-only audit trail for products
 * defined in the Prisma schema, allowing robust inquiry into what changes were
 * made, by whom, and when. This is vital for regulatory reporting, internal
 * incident tracking, and restoring mission-critical history.
 *
 * Permission violations, invalid product or audit log IDs, and requests for
 * missing logs must result in standardized error responses without revealing
 * sensitive system information.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product whose audit
 *   log is being retrieved.
 * @param props.auditLogId Unique identifier of the audit log entry for the
 *   product.
 * @path /aiCommerce/admin/products/:productId/auditLogs/:auditLogId
 * @accessor api.functional.aiCommerce.admin.products.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the target product whose audit log is being
     * retrieved.
     */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the audit log entry for the product. */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/products/:productId/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/products/${encodeURIComponent(props.productId ?? "null")}/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): IAiCommerceProductAuditLog =>
    typia.random<IAiCommerceProductAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
