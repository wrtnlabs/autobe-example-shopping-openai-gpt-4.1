import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSellerDispute } from "../../../../structures/IAiCommerceSellerDispute";
import { IPageIAiCommerceSellerDispute } from "../../../../structures/IPageIAiCommerceSellerDispute";

/**
 * Create a new seller dispute, escalation, or penalty case
 * (ai_commerce_seller_disputes).
 *
 * This endpoint registers a new seller dispute, penalty, or compliance
 * escalation in the ai_commerce_seller_disputes table. Submitted data must
 * specify the affected seller profile, dispute type, business context, and
 * supporting evidence, opening an administrative workflow for review and
 * resolution as per platform rules.
 *
 * The operation enforces validation to prevent duplicate cases on identical
 * business events or redundant escalation records for the same policy
 * infraction. Audit trails capture every action in compliance with legal and
 * forensic guidelines.
 *
 * Access is typically restricted to administrators and compliance officers who
 * manage platform dispute workflows, in accordance with business requirement
 * documents. The endpoint interoperates with business logic for evidence upload
 * and status transitions, and returns the full created case for UI
 * consumption.
 *
 * @param props.connection
 * @param props.body Dispute/penalty/escalation data for the new seller dispute
 *   record.
 * @path /aiCommerce/admin/sellerDisputes
 * @accessor api.functional.aiCommerce.admin.sellerDisputes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Dispute/penalty/escalation data for the new seller dispute record. */
    body: IAiCommerceSellerDispute.ICreate;
  };
  export type Body = IAiCommerceSellerDispute.ICreate;
  export type Response = IAiCommerceSellerDispute;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/sellerDisputes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/sellerDisputes";
  export const random = (): IAiCommerceSellerDispute =>
    typia.random<IAiCommerceSellerDispute>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated list of seller dispute cases
 * (ai_commerce_seller_disputes).
 *
 * This API provides a robust search interface for retrieving seller disputes,
 * penalties, and escalation records from the ai_commerce_seller_disputes table.
 * Advanced search and filtering criteria are supported, including dispute type
 * (policy violation, payout hold, fraud investigation, etc.), status (open,
 * closed, resolved, escalated), seller profile ID, and time windows for
 * creation or modification.
 *
 * The operation supports pagination, sorting, and intelligent querying,
 * allowing administrators and compliance personnel to focus on relevant dispute
 * categories. Security logic ensures that sellers may only view their own
 * dispute records, while admins are able to access all records for compliance
 * and oversight.
 *
 * Related endpoints include those for dispute detail retrieval, evidence
 * upload, and workflow escalation or resolution. The resulting data is
 * optimized for dashboard and compliance monitoring use cases, with each record
 * containing sufficient metadata for follow-up actions.
 *
 * @param props.connection
 * @param props.body Search and filter options for retrieving seller disputes
 *   (type, status, period, seller ID, pagination).
 * @path /aiCommerce/admin/sellerDisputes
 * @accessor api.functional.aiCommerce.admin.sellerDisputes.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter options for retrieving seller disputes (type,
     * status, period, seller ID, pagination).
     */
    body: IAiCommerceSellerDispute.IRequest;
  };
  export type Body = IAiCommerceSellerDispute.IRequest;
  export type Response = IPageIAiCommerceSellerDispute.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/sellerDisputes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/sellerDisputes";
  export const random = (): IPageIAiCommerceSellerDispute.ISummary =>
    typia.random<IPageIAiCommerceSellerDispute.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a single seller dispute case
 * (ai_commerce_seller_disputes) by ID.
 *
 * This API returns full details for a specific seller dispute as recorded in
 * the ai_commerce_seller_disputes table, including dispute type, workflow
 * status, context, attached evidence, and business/legal metadata fields. The
 * endpoint supports auditability and forensic evidence gathering for dispute
 * resolution and compliance monitoring.
 *
 * Permissions are enforced such that only the affected seller and authorized
 * admins may retrieve sensitive dispute data. The comprehensive response allows
 * for UI rendering of full dispute context and supports downstream actions such
 * as resolution workflows, appeals, and evidence uploads.
 *
 * This operation is critical to dispute management business processes and
 * should incorporate robust error handling for permission and not-found edge
 * cases. The API should be used in conjunction with the patch endpoint for
 * search and overview scenarios.
 *
 * @param props.connection
 * @param props.sellerDisputeId Unique identifier of the seller dispute to
 *   retrieve details for.
 * @path /aiCommerce/admin/sellerDisputes/:sellerDisputeId
 * @accessor api.functional.aiCommerce.admin.sellerDisputes.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller dispute to retrieve details for. */
    sellerDisputeId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceSellerDispute;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/sellerDisputes/:sellerDisputeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sellerDisputes/${encodeURIComponent(props.sellerDisputeId ?? "null")}`;
  export const random = (): IAiCommerceSellerDispute =>
    typia.random<IAiCommerceSellerDispute>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerDisputeId")(() =>
        typia.assert(props.sellerDisputeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing seller dispute (ai_commerce_seller_disputes) by ID.
 *
 * This API endpoint updates details for an existing seller dispute, identified
 * by sellerDisputeId. Permitted updates may include workflow status
 * transitions, evidence/context field changes, or business notes relevant to
 * the dispute's resolution. The full audit trail records all changes for
 * compliance and dispute tracking integrity.
 *
 * Role-based access control restricts modification to authorized
 * administrators. Validation ensures changes are permissible by business policy
 * (e.g., closed disputes cannot be reopened without a new escalation). Error
 * responses communicate any forbidden or invalid state transitions, and prior
 * versions are maintained.
 *
 * Use along with POST (new disputes), GET (detail), and PATCH (search)
 * endpoints for complete dispute lifecycle management.
 *
 * @param props.connection
 * @param props.sellerDisputeId Unique identifier of the seller dispute to
 *   update.
 * @param props.body Updated data, evidence, or status transition for the seller
 *   dispute.
 * @path /aiCommerce/admin/sellerDisputes/:sellerDisputeId
 * @accessor api.functional.aiCommerce.admin.sellerDisputes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller dispute to update. */
    sellerDisputeId: string & tags.Format<"uuid">;

    /** Updated data, evidence, or status transition for the seller dispute. */
    body: IAiCommerceSellerDispute.IUpdate;
  };
  export type Body = IAiCommerceSellerDispute.IUpdate;
  export type Response = IAiCommerceSellerDispute;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/sellerDisputes/:sellerDisputeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/sellerDisputes/${encodeURIComponent(props.sellerDisputeId ?? "null")}`;
  export const random = (): IAiCommerceSellerDispute =>
    typia.random<IAiCommerceSellerDispute>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerDisputeId")(() =>
        typia.assert(props.sellerDisputeId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a seller dispute record (ai_commerce_seller_disputes) by
 * ID.
 *
 * This API allows administrators to permanently erase a seller dispute record
 * from the ai_commerce_seller_disputes table. The operation is typically
 * necessary only in legally justified scenarios (e.g., correction of mistake,
 * compliance-removal), and not a routine path for standard business workflow.
 *
 * The deletion is hard (record removed from the database) and is tracked in
 * immutable audit logs for evidence purposes. Only platform administrators are
 * permitted to invoke this action, and checks are performed to prevent the
 * deletion of disputes critical for ongoing legal or compliance processes.
 *
 * Complementary endpoints should include get (detail view) and patch
 * (search/list) for monitoring dispute records; update and compliance
 * escalation features should be managed before considering hard deletion.
 *
 * @param props.connection
 * @param props.sellerDisputeId Unique identifier of the seller dispute to
 *   permanently delete.
 * @path /aiCommerce/admin/sellerDisputes/:sellerDisputeId
 * @accessor api.functional.aiCommerce.admin.sellerDisputes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the seller dispute to permanently delete. */
    sellerDisputeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/sellerDisputes/:sellerDisputeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sellerDisputes/${encodeURIComponent(props.sellerDisputeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerDisputeId")(() =>
        typia.assert(props.sellerDisputeId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
