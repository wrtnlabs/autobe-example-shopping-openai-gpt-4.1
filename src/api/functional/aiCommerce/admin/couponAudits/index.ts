import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceCouponAudit } from "../../../../structures/IAiCommerceCouponAudit";
import { IPageIAiCommerceCouponAudit } from "../../../../structures/IPageIAiCommerceCouponAudit";

/**
 * Search and retrieve a filtered, paginated list of coupon audit logs from
 * ai_commerce_coupon_audits.
 *
 * This operation returns a list of coupon audit logs with advanced query
 * support, including pagination, search filtering by coupon event type (e.g.
 * issue, redeem, expire, revoke), date range, coupon code, event reference, and
 * actor. The result includes detailed audit entry data for compliance review
 * and business analytics.
 *
 * The ai_commerce_coupon_audits table is write-only for business logic (never
 * edited or deleted), so this operation is purely read-only. All returned data
 * is compliant for evidence and reporting purposes.
 *
 * Security: Coupon audits involve potentially sensitive data and should be
 * accessible only to admin users or staff with reporting rights. Proper
 * authorization and filtering must be enforced.
 *
 * Typical use cases include: monitoring coupon abuse, tracking
 * redemption/issuance rates, regulatory reporting, and business promotion
 * analysis. Results are paginated and suitable for export or dashboard
 * analytics.
 *
 * @param props.connection
 * @param props.body The search, filter, and pagination parameters for coupon
 *   audit log retrieval.
 * @path /aiCommerce/admin/couponAudits
 * @accessor api.functional.aiCommerce.admin.couponAudits.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The search, filter, and pagination parameters for coupon audit log
     * retrieval.
     */
    body: IAiCommerceCouponAudit.IRequest;
  };
  export type Body = IAiCommerceCouponAudit.IRequest;
  export type Response = IPageIAiCommerceCouponAudit;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/couponAudits",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/couponAudits";
  export const random = (): IPageIAiCommerceCouponAudit =>
    typia.random<IPageIAiCommerceCouponAudit>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific coupon audit log entry by ID from ai_commerce_coupon_audits.
 *
 * Fetch detailed information for a single coupon audit entry by its unique ID
 * (couponAuditId). This operation is used for deep compliance reviews, dispute
 * investigations, or export of single evidence records. The
 * ai_commerce_coupon_audits table is immutable and append-only, containing full
 * details of coupon-related lifecycle/business events, such as issuance,
 * redemption, expiration, or administrative actions.
 *
 * The returned entry includes all fields: event type, event reference, note,
 * timestamp, and associated coupon information. Proper path parameter
 * validation and access control according to compliance reporting requirements
 * are enforced.
 *
 * This operation is critical for business processes that require forensic
 * detail, including legal review, user dispute resolution, and regulatory
 * audits. Only admins or compliance staff should have access to this API.
 *
 * @param props.connection
 * @param props.couponAuditId Unique identifier of the target coupon audit log
 *   entry.
 * @path /aiCommerce/admin/couponAudits/:couponAuditId
 * @accessor api.functional.aiCommerce.admin.couponAudits.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target coupon audit log entry. */
    couponAuditId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceCouponAudit;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/couponAudits/:couponAuditId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/couponAudits/${encodeURIComponent(props.couponAuditId ?? "null")}`;
  export const random = (): IAiCommerceCouponAudit =>
    typia.random<IAiCommerceCouponAudit>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponAuditId")(() => typia.assert(props.couponAuditId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
