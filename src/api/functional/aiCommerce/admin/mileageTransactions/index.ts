import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceMileageTransaction } from "../../../../structures/IAiCommerceMileageTransaction";
import { IPageIAiCommerceMileageTransaction } from "../../../../structures/IPageIAiCommerceMileageTransaction";

/**
 * Create a new mileage transaction record (accrual, redemption, adjustment, or
 * expiration).
 *
 * This operation enables authorized actors (typically admin or
 * compliance/business processes) to create a new mileage transaction entry for
 * a user’s account. Accepts all schema-required fields through the
 * IAiCommerceMileageTransaction.ICreate DTO, including mileage_account_id,
 * type, amount, status, reference_entity, and timestamps.
 *
 * Transaction creation is subject to business rule validations: only
 * appropriate types (accrual, redemption, adjustment, expiration) are accepted,
 * and balance changes are computed accordingly. The endpoint is strictly
 * audited to prevent abuse or unauthorized changes to mileages.
 *
 * Typically, user self-service is limited, and most creation is via business
 * logic triggers, admin, or reward campaign logic. The created transaction is
 * linked to audit, ledger, and compliance reporting.
 *
 * @param props.connection
 * @param props.body New mileage transaction details including account, type,
 *   amount, and event context.
 * @path /aiCommerce/admin/mileageTransactions
 * @accessor api.functional.aiCommerce.admin.mileageTransactions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * New mileage transaction details including account, type, amount, and
     * event context.
     */
    body: IAiCommerceMileageTransaction.ICreate;
  };
  export type Body = IAiCommerceMileageTransaction.ICreate;
  export type Response = IAiCommerceMileageTransaction;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/mileageTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/mileageTransactions";
  export const random = (): IAiCommerceMileageTransaction =>
    typia.random<IAiCommerceMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search mileage transactions with filtering and pagination.
 *
 * This operation searches and returns a paginated list of mileage transactions,
 * including accrual, redemption, adjustment, and expiration events. It
 * leverages parameters specified in IAiCommerceMileageTransaction.IRequest to
 * filter by type, date, user/account, status, and reference entity as
 * appropriate.
 *
 * Designed for both user self-audit and administrative/business use, this
 * operation supports compliance and account analytics use cases. Role-based
 * filtering is applied to ensure that users only see their own transactions,
 * while admins may filter globally or per user.
 *
 * Results are tailored for performance and summary, and detailed event or audit
 * data may be included based on role and business rule logic. Standard
 * pagination and sorting fields are supported.
 *
 * @param props.connection
 * @param props.body Query criteria for mileage transactions, including
 *   filtering and pagination parameters.
 * @path /aiCommerce/admin/mileageTransactions
 * @accessor api.functional.aiCommerce.admin.mileageTransactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Query criteria for mileage transactions, including filtering and
     * pagination parameters.
     */
    body: IAiCommerceMileageTransaction.IRequest;
  };
  export type Body = IAiCommerceMileageTransaction.IRequest;
  export type Response = IPageIAiCommerceMileageTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/mileageTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/mileageTransactions";
  export const random = (): IPageIAiCommerceMileageTransaction =>
    typia.random<IPageIAiCommerceMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full details of a mileage transaction by unique ID.
 *
 * This operation fetches the details of an individual mileage transaction, such
 * as accrual, usage/redemption, adjustment, or expiration events for audit or
 * user self-service purposes. Data fields include transaction type (accrual,
 * redemption, adjustment), amount, status, date, reference entity, and audit
 * metadata as stored in the ai_commerce_mileage_transactions table.
 *
 * Access is limited to the transaction owner (buyer or seller) and
 * administrator roles, with privacy and compliance strictly enforced. All query
 * actions are logged for security and auditability. Results include all
 * business-critical metadata and fields established in the database schema.
 *
 * @param props.connection
 * @param props.mileageTransactionId Unique identifier for the mileage
 *   transaction to retrieve.
 * @path /aiCommerce/admin/mileageTransactions/:mileageTransactionId
 * @accessor api.functional.aiCommerce.admin.mileageTransactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the mileage transaction to retrieve. */
    mileageTransactionId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceMileageTransaction;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/mileageTransactions/:mileageTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/mileageTransactions/${encodeURIComponent(props.mileageTransactionId ?? "null")}`;
  export const random = (): IAiCommerceMileageTransaction =>
    typia.random<IAiCommerceMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageTransactionId")(() =>
        typia.assert(props.mileageTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update/correct metadata or status of a specific mileage transaction event.
 *
 * This operation updates an existing mileage transaction entry identified by
 * mileageTransactionId. Update actions are highly restricted—used solely for
 * correction of erroneous metadata, operational status, or compliance
 * justification. It does not allow direct modification of amounts for finalized
 * transactions except by official audit/correction.
 *
 * Accepts request body formatted as IAiCommerceMileageTransaction.IUpdate,
 * supporting changes only to allowed schema fields. Attempts to update
 * immutable or business-critical fields will result in errors.
 *
 * All changes must be audit-logged, including actor, timestamp, before/after
 * state, and rationale for correction. Only administrators and
 * compliance-authorized actors may use this endpoint, and its use may require
 * justification in practice.
 *
 * @param props.connection
 * @param props.mileageTransactionId Unique identifier for the mileage
 *   transaction to update.
 * @param props.body Fields for updating mileage transaction metadata, status,
 *   or compliance reason.
 * @path /aiCommerce/admin/mileageTransactions/:mileageTransactionId
 * @accessor api.functional.aiCommerce.admin.mileageTransactions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the mileage transaction to update. */
    mileageTransactionId: string & tags.Format<"uuid">;

    /**
     * Fields for updating mileage transaction metadata, status, or
     * compliance reason.
     */
    body: IAiCommerceMileageTransaction.IUpdate;
  };
  export type Body = IAiCommerceMileageTransaction.IUpdate;
  export type Response = IAiCommerceMileageTransaction;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/mileageTransactions/:mileageTransactionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/mileageTransactions/${encodeURIComponent(props.mileageTransactionId ?? "null")}`;
  export const random = (): IAiCommerceMileageTransaction =>
    typia.random<IAiCommerceMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageTransactionId")(() =>
        typia.assert(props.mileageTransactionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific mileage transaction (admin only) from
 * ai_commerce_mileage_transactions.
 *
 * This operation deletes a specific mileage transaction from the
 * 'ai_commerce_mileage_transactions' table, identified by the
 * mileageTransactionId parameter.
 *
 * Mileage transactions include all events that increase or decrease a user's
 * mileage/points balance (such as accrual, redemption, adjustment, or
 * expiration) and are critical for loyalty and compliance tracking. Only
 * authorized admin personnel may erase a transaction. Erasure should be used
 * strictly for compliance, audit correction, or fraud remediation; all actions
 * are audit-logged.
 *
 * The soft delete field 'deleted_at' is set, and the record is removed from
 * normal querying contexts, but full recovery and audit evidence are preserved
 * in the backend. Non-admin attempts or missing transactionId will result in
 * access denied or not found errors.
 *
 * @param props.connection
 * @param props.mileageTransactionId The unique identifier of the mileage
 *   transaction to be deleted
 * @path /aiCommerce/admin/mileageTransactions/:mileageTransactionId
 * @accessor api.functional.aiCommerce.admin.mileageTransactions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the mileage transaction to be deleted */
    mileageTransactionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/mileageTransactions/:mileageTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/mileageTransactions/${encodeURIComponent(props.mileageTransactionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageTransactionId")(() =>
        typia.assert(props.mileageTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
