import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSellerOnboarding } from "../../../../structures/IAiCommerceSellerOnboarding";
import { IPageIAiCommerceSellerOnboarding } from "../../../../structures/IPageIAiCommerceSellerOnboarding";

/**
 * Retrieve paginated/searchable seller onboarding application list
 * (ai_commerce_seller_onboarding table).
 *
 * This operation returns a filtered, paginated list of all seller onboarding
 * records within the ai_commerce_seller_onboarding table. Admins can use
 * advanced search criteria—including onboarding_status, created_at, user
 * references, or current_stage—to monitor the flow and progress of seller
 * onboarding applications. The operation supports business workflows around
 * onboarding review, KYC compliance, and escalation.
 *
 * Each result in the list provides a summary of the onboarding application:
 * applicant association, current status, timestamps, and business context.
 * Pagination and sorting are available for dashboards and compliance review
 * queues. The endpoint enables administrators to quickly filter for
 * applications requiring intervention, escalation, or documentation. Records
 * are retrieved with audit compliance, omitting deleted or non-relevant cases
 * unless explicitly requested.
 *
 * No personally identifiable or sensitive KYC data is exposed without proper
 * authorization. Errors may occur if non-admin roles attempt access or if
 * listing criteria are malformed.
 *
 * @param props.connection
 * @param props.body Search filters and pagination for onboarding applications
 * @path /aiCommerce/admin/sellerOnboardings
 * @accessor api.functional.aiCommerce.admin.sellerOnboardings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search filters and pagination for onboarding applications */
    body: IAiCommerceSellerOnboarding.IRequest;
  };
  export type Body = IAiCommerceSellerOnboarding.IRequest;
  export type Response = IPageIAiCommerceSellerOnboarding.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/sellerOnboardings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/sellerOnboardings";
  export const random = (): IPageIAiCommerceSellerOnboarding.ISummary =>
    typia.random<IPageIAiCommerceSellerOnboarding.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full details for a specific seller onboarding application
 * (ai_commerce_seller_onboarding table).
 *
 * This operation returns detailed information for a seller onboarding
 * application from ai_commerce_seller_onboarding, identified by
 * sellerOnboardingId. All application fields are included, including
 * application_data (KYC, disclosures, supporting docs), onboarding_status,
 * current_stage, notes, and audit fields (created_at, updated_at, deleted_at).
 * This endpoint is strictly admin-restricted due to sensitive compliance and
 * KYC content.
 *
 * Use cases include onboarding review, compliance audit, escalation, or final
 * approval/denial workflow. The administrator can access application details
 * for a comprehensive review, request further documentation, or make an
 * approval/rejection decision within compliance guidelines.
 *
 * The operation enforces data access policies at the controller and service
 * layer, ensuring private and sensitive fields are protected. If the onboarding
 * record is not found or the requester lacks authorization, an error is
 * returned.
 *
 * @param props.connection
 * @param props.sellerOnboardingId Unique identifier for the seller onboarding
 *   application
 * @path /aiCommerce/admin/sellerOnboardings/:sellerOnboardingId
 * @accessor api.functional.aiCommerce.admin.sellerOnboardings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the seller onboarding application */
    sellerOnboardingId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceSellerOnboarding;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/sellerOnboardings/:sellerOnboardingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sellerOnboardings/${encodeURIComponent(props.sellerOnboardingId ?? "null")}`;
  export const random = (): IAiCommerceSellerOnboarding =>
    typia.random<IAiCommerceSellerOnboarding>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerOnboardingId")(() =>
        typia.assert(props.sellerOnboardingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update seller onboarding application information or status
 * (ai_commerce_seller_onboarding table).
 *
 * This operation updates the fields of a seller onboarding application record
 * based on the ai_commerce_seller_onboarding schema. Supported updates include
 * onboarding_status changes (per workflow), updates to application_data, notes,
 * or current_stage, and compliance justification. Both applicants (buyer) and
 * admins can update relevant fields per business rules—e.g., buyers submit
 * additional documents, admins escalate or approve.
 *
 * Each update records before/after change, timestamp, and user performing the
 * action for audit and compliance. Update permission is context-sensitive:
 * applicants alter their own onboarding records, while admins/compliance can
 * update any onboarding application for review, escalation, or adjudication.
 * Workflow rules enforce valid status transitions; invalid or unauthorized
 * updates are rejected.
 *
 * Returns the updated onboarding application details as defined by schema. The
 * endpoint ensures full traceability, prevents unauthorized workflow jumps, and
 * maintains platform compliance posture.
 *
 * @param props.connection
 * @param props.sellerOnboardingId Unique identifier for the seller onboarding
 *   record to update
 * @param props.body Updated onboarding application information or workflow
 *   fields allowed by business logic
 * @path /aiCommerce/admin/sellerOnboardings/:sellerOnboardingId
 * @accessor api.functional.aiCommerce.admin.sellerOnboardings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the seller onboarding record to update */
    sellerOnboardingId: string & tags.Format<"uuid">;

    /**
     * Updated onboarding application information or workflow fields allowed
     * by business logic
     */
    body: IAiCommerceSellerOnboarding.IUpdate;
  };
  export type Body = IAiCommerceSellerOnboarding.IUpdate;
  export type Response = IAiCommerceSellerOnboarding;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/sellerOnboardings/:sellerOnboardingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/sellerOnboardings/${encodeURIComponent(props.sellerOnboardingId ?? "null")}`;
  export const random = (): IAiCommerceSellerOnboarding =>
    typia.random<IAiCommerceSellerOnboarding>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerOnboardingId")(() =>
        typia.assert(props.sellerOnboardingId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a seller onboarding record from
 * ai_commerce_seller_onboarding.
 *
 * This operation allows an administrator or an authorized actor to permanently
 * delete a seller onboarding record from the ai_commerce_seller_onboarding
 * table. This is typically used in scenarios where a seller's onboarding
 * process is cancelled due to fraud detection, duplicate application, or
 * explicit withdrawal by the user. There is no soft delete field, so the
 * removal is permanent and the onboarding record is fully deleted, though all
 * audit logs related to this onboarding must be preserved for compliance
 * reasons.
 *
 * Security is critical for this operation, as only privileged roles (admin)
 * should be permitted to perform deletions. Relations to store, user
 * authentication, and seller KYC data must be checked/handled at the
 * provider/service logic level to prevent orphaned references and maintain
 * referential integrity.
 *
 * Attempts to delete onboarding records that are under dispute or legal hold
 * must result in validation errors, and attempts must be correctly logged for
 * audit trail purposes.
 *
 * @param props.connection
 * @param props.sellerOnboardingId Unique identifier of the seller onboarding
 *   record to delete
 * @path /aiCommerce/admin/sellerOnboardings/:sellerOnboardingId
 * @accessor api.functional.aiCommerce.admin.sellerOnboardings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the seller onboarding record to delete */
    sellerOnboardingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/sellerOnboardings/:sellerOnboardingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sellerOnboardings/${encodeURIComponent(props.sellerOnboardingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerOnboardingId")(() =>
        typia.assert(props.sellerOnboardingId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
