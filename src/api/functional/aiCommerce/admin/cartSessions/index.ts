import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceCartSession } from "../../../../structures/IAiCommerceCartSession";

/**
 * Get cart session details by cartSessionId from ai_commerce_cart_sessions.
 *
 * This endpoint retrieves a cart session record from ai_commerce_cart_sessions,
 * as identified by cartSessionId in the path parameter.
 *
 * Purpose: Enables buyers or administrators to review session state, which is
 * vital for validating device merges, troubleshooting persistent carts,
 * detecting guest-to-member transitions, and supporting compliance audits.
 *
 * Buyers may only see their sessions. Admins may view all for
 * audit/troubleshooting. Sensitive attributes (e.g., session token) only
 * returned when suitably authenticated.
 *
 * Returns all session properties (including references) as present in the
 * schema. If the record doesn't exist or access is unauthorized, a standard
 * error is returned.
 *
 * @param props.connection
 * @param props.cartSessionId Unique identifier for the cart session to
 *   retrieve, as UUID.
 * @path /aiCommerce/admin/cartSessions/:cartSessionId
 * @accessor api.functional.aiCommerce.admin.cartSessions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the cart session to retrieve, as UUID. */
    cartSessionId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceCartSession;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/cartSessions/:cartSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/cartSessions/${encodeURIComponent(props.cartSessionId ?? "null")}`;
  export const random = (): IAiCommerceCartSession =>
    typia.random<IAiCommerceCartSession>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartSessionId")(() => typia.assert(props.cartSessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing cart session in ai_commerce_cart_sessions by
 * cartSessionId.
 *
 * Updates session fields (expiration, status, cart link, session token) for
 * session identified by cartSessionId. Only the buyer who owns the session or
 * an administrator may update. Updates must adhere to business rules and not
 * permit unauthorized user cross-session updates. All updates are audited.
 *
 * Returns updated session object on success. Validates all incoming field
 * updates and returns error if the request is invalid or not allowed.
 *
 * @param props.connection
 * @param props.cartSessionId Unique identifier for the cart session to update,
 *   as UUID.
 * @param props.body Fields for updating cart session: supports partial or full
 *   update. Follows IAiCommerceCartSession.IUpdate schema.
 * @path /aiCommerce/admin/cartSessions/:cartSessionId
 * @accessor api.functional.aiCommerce.admin.cartSessions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the cart session to update, as UUID. */
    cartSessionId: string & tags.Format<"uuid">;

    /**
     * Fields for updating cart session: supports partial or full update.
     * Follows IAiCommerceCartSession.IUpdate schema.
     */
    body: IAiCommerceCartSession.IUpdate;
  };
  export type Body = IAiCommerceCartSession.IUpdate;
  export type Response = IAiCommerceCartSession;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/cartSessions/:cartSessionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/cartSessions/${encodeURIComponent(props.cartSessionId ?? "null")}`;
  export const random = (): IAiCommerceCartSession =>
    typia.random<IAiCommerceCartSession>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartSessionId")(() => typia.assert(props.cartSessionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (erase) a cart session by cartSessionId from
 * ai_commerce_cart_sessions.
 *
 * Marks a cart session as deleted by populating deleted_at, so the session
 * persists for logs/audit/compliance. Only the owning buyer or admin may
 * trigger this. Used on logout, account deletion, and privacy workflows.
 * Attempting to erase unauthorized sessions is denied.
 *
 * @param props.connection
 * @param props.cartSessionId Unique identifier for the cart session to erase
 *   (soft delete), as UUID.
 * @path /aiCommerce/admin/cartSessions/:cartSessionId
 * @accessor api.functional.aiCommerce.admin.cartSessions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier for the cart session to erase (soft delete), as
     * UUID.
     */
    cartSessionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/cartSessions/:cartSessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/cartSessions/${encodeURIComponent(props.cartSessionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartSessionId")(() => typia.assert(props.cartSessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new cart session in ai_commerce_cart_sessions.
 *
 * Creates and persists a new cart session, tied to either an authenticated
 * buyer or as an anonymous/guest session. Populates ai_commerce_cart_sessions
 * with unique session token and links to the relevant cart. Ensures
 * session_token and cart_id adhere to uniqueness constraints. Buyers can create
 * sessions for their own cart; admins may perform this for testing or
 * recovery.
 *
 * Request provides required associations and configuration; response returns
 * persisted entity. Seller/admin non-buyer accounts should not use this
 * endpoint.
 *
 * @param props.connection
 * @param props.body Creation fields for new cart session: buyer (optional),
 *   cart reference, session token, status, expiration, timestamps.
 * @path /aiCommerce/admin/cartSessions
 * @accessor api.functional.aiCommerce.admin.cartSessions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Creation fields for new cart session: buyer (optional), cart
     * reference, session token, status, expiration, timestamps.
     */
    body: IAiCommerceCartSession.ICreate;
  };
  export type Body = IAiCommerceCartSession.ICreate;
  export type Response = IAiCommerceCartSession;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/cartSessions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/cartSessions";
  export const random = (): IAiCommerceCartSession =>
    typia.random<IAiCommerceCartSession>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
