import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductTag } from "../../../../structures/IAiCommerceProductTag";
import { IPageIAiCommerceProductTag } from "../../../../structures/IPageIAiCommerceProductTag";

/**
 * Create a new product-tag binding (ai_commerce_product_tags).
 *
 * Create a new product-tag binding in the ai_commerce_product_tags table. This
 * operation links a tag to a product, enhancing search/discovery features and
 * supporting marketing or analytic initiatives.
 *
 * The input includes identifiers for both product and tag, and may also include
 * meta or business context. Permissions apply: sellers can only tag their own
 * products; admins can create any binding. Error scenarios are duplicate
 * bindings, non-existent product/tag, or permission errors.
 *
 * @param props.connection
 * @param props.body The product-tag binding creation payload with product, tag,
 *   and context info.
 * @path /aiCommerce/admin/productTags
 * @accessor api.functional.aiCommerce.admin.productTags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * The product-tag binding creation payload with product, tag, and
     * context info.
     */
    body: IAiCommerceProductTag.ICreate;
  };
  export type Body = IAiCommerceProductTag.ICreate;
  export type Response = IAiCommerceProductTag;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/productTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/productTags";
  export const random = (): IAiCommerceProductTag =>
    typia.random<IAiCommerceProductTag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginated search for product-tag bindings (ai_commerce_product_tags).
 *
 * Search, filter, and paginate product-tag bindings recorded in the
 * ai_commerce_product_tags table, which links tags to products for search and
 * discovery. This enables discovery/admin users to locate products by tag, or
 * audit product tagging for compliance and analytics.
 *
 * Search criteria may include product ID, tag ID, tag status, or binding time.
 * Pagination, sort order, and search by partial tag/product names may also be
 * supported. The response is optimized for admin/search tools.
 *
 * Security: Admins may view all bindings, while other roles may be restricted
 * to their own products. Error scenarios include invalid search criteria,
 * overly broad or narrow filters, and permission errors.
 *
 * @param props.connection
 * @param props.body Search and filter options for product-tag bindings (IDs,
 *   tags, pagination, etc.).
 * @path /aiCommerce/admin/productTags
 * @accessor api.functional.aiCommerce.admin.productTags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter options for product-tag bindings (IDs, tags,
     * pagination, etc.).
     */
    body: IAiCommerceProductTag.IRequest;
  };
  export type Body = IAiCommerceProductTag.IRequest;
  export type Response = IPageIAiCommerceProductTag;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/productTags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/productTags";
  export const random = (): IPageIAiCommerceProductTag =>
    typia.random<IPageIAiCommerceProductTag>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific product-tag binding (ai_commerce_product_tags).
 *
 * Get detailed information for a specific product-tag binding from the
 * ai_commerce_product_tags table using its unique binding ID. This operation is
 * common for admin or analytics workflows where information about
 * tag-assignments needs to be reviewed or audited.
 *
 * The endpoint is accessible only to admins or users with appropriate access.
 * The result includes all key info about the tag-product relationship, tag
 * status, product metadata, and audit references. Possible errors include
 * invalid productTagId or lack of permission.
 *
 * @param props.connection
 * @param props.productTagId The unique identifier of the product-tag binding
 *   record.
 * @path /aiCommerce/admin/productTags/:productTagId
 * @accessor api.functional.aiCommerce.admin.productTags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the product-tag binding record. */
    productTagId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductTag;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/productTags/:productTagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/productTags/${encodeURIComponent(props.productTagId ?? "null")}`;
  export const random = (): IAiCommerceProductTag =>
    typia.random<IAiCommerceProductTag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productTagId")(() => typia.assert(props.productTagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing product-tag binding (ai_commerce_product_tags).
 *
 * Update an existing product-tag binding in ai_commerce_product_tags. This is
 * used to reclassify the tag or product association, update meta/context info,
 * or correct earlier mistakes. Only admins or the owning seller may perform
 * this action.
 *
 * All changes are tracked and auditable for compliance and analytics history.
 * The operation requires the unique productTagId, and the request body details
 * the fields to update. Security: Only permitted users may update their own
 * products' tag bindings; error handling includes lack of permission, invalid
 * IDs, or data conflicts.
 *
 * @param props.connection
 * @param props.productTagId The unique identifier of the product-tag binding to
 *   update.
 * @param props.body Updated fields for the product-tag binding.
 * @path /aiCommerce/admin/productTags/:productTagId
 * @accessor api.functional.aiCommerce.admin.productTags.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the product-tag binding to update. */
    productTagId: string & tags.Format<"uuid">;

    /** Updated fields for the product-tag binding. */
    body: IAiCommerceProductTag.IUpdate;
  };
  export type Body = IAiCommerceProductTag.IUpdate;
  export type Response = IAiCommerceProductTag;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/productTags/:productTagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/productTags/${encodeURIComponent(props.productTagId ?? "null")}`;
  export const random = (): IAiCommerceProductTag =>
    typia.random<IAiCommerceProductTag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productTagId")(() => typia.assert(props.productTagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a product-tag binding (ai_commerce_product_tags).
 *
 * Delete (erase) a product-tag binding from the ai_commerce_product_tags table.
 * This removes the tag-product association, affecting search/discovery on the
 * platform. Only admins or owners can perform this.
 *
 * The operation takes the unique productTagId. Once erased, the association is
 * lost and cannot be immediately recovered unless re-created. Compliance and
 * audit logging applies. Errors include invalid binding ID, insufficient
 * permissions, or attempting to delete protected/tagged associations.
 *
 * @param props.connection
 * @param props.productTagId The unique identifier of the product-tag binding to
 *   erase.
 * @path /aiCommerce/admin/productTags/:productTagId
 * @accessor api.functional.aiCommerce.admin.productTags.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the product-tag binding to erase. */
    productTagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/productTags/:productTagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/productTags/${encodeURIComponent(props.productTagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productTagId")(() => typia.assert(props.productTagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
