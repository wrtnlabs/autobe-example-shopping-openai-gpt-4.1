import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceAuditLogsSystem } from "../../../../structures/IAiCommerceAuditLogsSystem";
import { IPageIAiCommerceAuditLogsSystem } from "../../../../structures/IPageIAiCommerceAuditLogsSystem";

/**
 * Search and retrieve system audit logs (ai_commerce_audit_logs_system).
 *
 * Provides advanced search/filter capabilities to discover audit log entries
 * according to parameters such as event type, actor, target table, or creation
 * date. All audit events (creation, edit, deletion related to
 * config/templates/channels/categories, etc.) are included. The request
 * supports complex query filters, pagination, and sorting as per the
 * ai_commerce_audit_logs_system schema.
 *
 * Only admin role users may access full audit log data. Sensitive content is
 * filtered or redacted according to business compliance policy. The response
 * includes a paginated list of audit log entries with complete event details
 * and metadata as defined by the ai_commerce_audit_logs_system model. Errors
 * are returned on malformed filters or pagination parameters.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination info for audit logs.
 * @path /aiCommerce/admin/auditLogsSystem
 * @accessor api.functional.aiCommerce.admin.auditLogsSystem.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria and pagination info for audit logs. */
    body: IAiCommerceAuditLogsSystem.IRequest;
  };
  export type Body = IAiCommerceAuditLogsSystem.IRequest;
  export type Response = IPageIAiCommerceAuditLogsSystem;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/auditLogsSystem",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/auditLogsSystem";
  export const random = (): IPageIAiCommerceAuditLogsSystem =>
    typia.random<IPageIAiCommerceAuditLogsSystem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a single system audit log (ai_commerce_audit_logs_system).
 *
 * Retrieve all details for a single audit log event identified by logId,
 * including type of event, actor, before/after data snapshots, and the
 * timestamp. Useful for forensic review or as legal evidence of configuration
 * changes. The logId parameter must be a valid UUID referencing an existing
 * audit entry.
 *
 * Authorization is restricted to admins. The retrieved data includes full event
 * context as stored in the ai_commerce_audit_logs_system table. Errors are
 * returned if logId is invalid or if the log entry does not exist.
 *
 * @param props.connection
 * @param props.logId Unique identifier for the audit log entry to retrieve.
 * @path /aiCommerce/admin/auditLogsSystem/:logId
 * @accessor api.functional.aiCommerce.admin.auditLogsSystem.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the audit log entry to retrieve. */
    logId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceAuditLogsSystem;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/auditLogsSystem/:logId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/auditLogsSystem/${encodeURIComponent(props.logId ?? "null")}`;
  export const random = (): IAiCommerceAuditLogsSystem =>
    typia.random<IAiCommerceAuditLogsSystem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("logId")(() => typia.assert(props.logId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
