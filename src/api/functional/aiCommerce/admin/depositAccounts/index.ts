import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceDepositAccount } from "../../../../structures/IAiCommerceDepositAccount";
import { IPageIAiCommerceDepositAccount } from "../../../../structures/IPageIAiCommerceDepositAccount";

/**
 * Create a new user deposit account administratively (admin only).
 *
 * Manually create a new user (buyer/seller) deposit account from the admin
 * interface. The operation requires user ID, initial balance, currency, and
 * status. All records are created with audit, and use-case must conform to
 * platform compliance. User-triggered creation is not permitted, and this
 * operation should not be exposed to buyers or sellers directly.
 *
 * Security: Only admin role permitted. Input validation is strictly enforced,
 * and records are linked to user compliance and transaction audit trails. Each
 * action is logged for evidence and troubleshooting.
 *
 * Underlying Entity: ai_commerce_deposit_accounts, with references to user
 * identity and audit snapshot for balance initialization or migration.
 *
 * Errors include duplicate account, invalid user, or status/validation
 * failures. Compliance audit and review procedures must be followed when using
 * this operation.
 *
 * @param props.connection
 * @param props.body Required data for new deposit account creation, including
 *   user, initial balance, and status.
 * @path /aiCommerce/admin/depositAccounts
 * @accessor api.functional.aiCommerce.admin.depositAccounts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Required data for new deposit account creation, including user,
     * initial balance, and status.
     */
    body: IAiCommerceDepositAccount.ICreate;
  };
  export type Body = IAiCommerceDepositAccount.ICreate;
  export type Response = IAiCommerceDepositAccount;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/depositAccounts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/depositAccounts";
  export const random = (): IAiCommerceDepositAccount =>
    typia.random<IAiCommerceDepositAccount>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin-restricted query for paginated, filterable list of deposit accounts.
 *
 * Fetch a paginated list of deposit accounts in the system, with filter and
 * search support. Admins can use this endpoint to review account status,
 * investigate user balances, and generate reports on active, suspended, or
 * high-balance accounts. Supports robust pagination, filtering, and sorting
 * capabilities.
 *
 * Security: Only admins are allowed to access the platform-wide account list.
 * User/depositor privacy is respected according to compliance rules, and
 * sensitive metadata is restricted in the output.
 *
 * Underlying Entity: ai_commerce_deposit_accounts. Supports relational search
 * (by user ID, currency, account code) and aggregate operation for financial
 * reporting.
 *
 * Used together with account detail, adjustment/transaction creation, and
 * closing endpoints. Any inconsistent access or search errors are clearly
 * reported for remediation and audit.
 *
 * @param props.connection
 * @param props.body Search/filter/request parameters for deposit account
 *   listing and query.
 * @path /aiCommerce/admin/depositAccounts
 * @accessor api.functional.aiCommerce.admin.depositAccounts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search/filter/request parameters for deposit account listing and
     * query.
     */
    body: IAiCommerceDepositAccount.IRequest;
  };
  export type Body = IAiCommerceDepositAccount.IRequest;
  export type Response = IPageIAiCommerceDepositAccount;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/depositAccounts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/depositAccounts";
  export const random = (): IPageIAiCommerceDepositAccount =>
    typia.random<IPageIAiCommerceDepositAccount>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Show a specific deposit account record by its ID (admin only).
 *
 * Retrieve comprehensive data about a deposit account using its unique account
 * ID. Returns business-critical balance, status, identifiers, user linkages,
 * audit and transaction reference, and compliance and account details.
 *
 * Security: Only accessible to admin users for audit, investigation, and
 * reporting. Sensitive fields and related detail are shielded in the response
 * for non-authorized users.
 *
 * Underlying Entity: ai_commerce_deposit_accounts, linked to users and payment
 * transaction history for full background.
 *
 * Any failed or unauthorized attempts to retrieve account details are logged
 * for compliance.
 *
 * @param props.connection
 * @param props.depositAccountId Unique identifier of the target deposit account
 * @path /aiCommerce/admin/depositAccounts/:depositAccountId
 * @accessor api.functional.aiCommerce.admin.depositAccounts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target deposit account */
    depositAccountId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceDepositAccount;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/depositAccounts/:depositAccountId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/depositAccounts/${encodeURIComponent(props.depositAccountId ?? "null")}`;
  export const random = (): IAiCommerceDepositAccount =>
    typia.random<IAiCommerceDepositAccount>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositAccountId")(() =>
        typia.assert(props.depositAccountId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a deposit account by its unique identifier (UUID) in aiCommerce's
 * deposit account table.
 *
 * This operation updates an existing deposit account record using the account's
 * unique identifier.
 *
 * The record is located in the ai_commerce_deposit_accounts table, which
 * manages e-wallet balances for buyers and sellers for transactional purposes.
 * Update actions may include changing account status (active or suspended),
 * modifying metadata, or other permissible field changes not breaking the
 * integrity of financial records.
 *
 * Security context: Only platform administrators or privileged support staff
 * may perform this update, following strict business rules and permission
 * matrix defined in system documentation. Attempts by unauthorized users are
 * logged and rejected.
 *
 * All updates are fully audited, and a historical record is maintained for
 * compliance with payment regulations and financial auditing standards. If a
 * target account is soft-deleted, no modifications are allowed.
 *
 * Related operations: Account status checks, deposit transaction creation,
 * account soft-deletion (suspension/closure), and audit log queries may be
 * performed in conjunction with this update.
 *
 * @param props.connection
 * @param props.depositAccountId Unique identifier (UUID) of the deposit account
 *   to update.
 * @param props.body Updated deposit account data fields (status, metadata,
 *   etc).
 * @path /aiCommerce/admin/depositAccounts/:depositAccountId
 * @accessor api.functional.aiCommerce.admin.depositAccounts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the deposit account to update. */
    depositAccountId: string & tags.Format<"uuid">;

    /** Updated deposit account data fields (status, metadata, etc). */
    body: IAiCommerceDepositAccount.IUpdate;
  };
  export type Body = IAiCommerceDepositAccount.IUpdate;
  export type Response = IAiCommerceDepositAccount;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/depositAccounts/:depositAccountId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/depositAccounts/${encodeURIComponent(props.depositAccountId ?? "null")}`;
  export const random = (): IAiCommerceDepositAccount =>
    typia.random<IAiCommerceDepositAccount>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositAccountId")(() =>
        typia.assert(props.depositAccountId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a deposit account (by UUID) for compliance audit using
 * aiCommerce's deposit account schema.
 *
 * This operation logically deletes (soft-removes) a deposit account identified
 * by its UUID from the ai_commerce_deposit_accounts table.
 *
 * It sets the deleted_at timestamp instead of physical removal, aligning with
 * strict financial compliance requirements around data retention. Physical
 * deletion is never implemented for deposit accounts as per regulatory
 * expectations and fraud/tampering auditability.
 *
 * Only administrators have permission to execute this action; all delete
 * operations are tracked in an immutable audit log, with before/after state
 * snapshots preserved for compliance and recovery.
 *
 * If the account does not exist or is already soft-deleted, the operation
 * returns an appropriate error. Related operations for account recovery or
 * audit may be used by compliance or admin staff when needed.
 *
 * @param props.connection
 * @param props.depositAccountId UUID of the deposit account to soft-delete.
 * @path /aiCommerce/admin/depositAccounts/:depositAccountId
 * @accessor api.functional.aiCommerce.admin.depositAccounts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the deposit account to soft-delete. */
    depositAccountId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/depositAccounts/:depositAccountId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/depositAccounts/${encodeURIComponent(props.depositAccountId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositAccountId")(() =>
        typia.assert(props.depositAccountId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
