import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSellerAppeal } from "../../../../structures/IAiCommerceSellerAppeal";
import { IPageIAiCommerceSellerAppeal } from "../../../../structures/IPageIAiCommerceSellerAppeal";

/**
 * Search and list seller appeal cases (ai_commerce_seller_appeals) with
 * advanced filtering.
 *
 * Search and list seller appeal cases by various filtering parameters (status,
 * appeal type, date, and seller profile) with pagination and sorting. Provides
 * all details needed for fair review and timely dispute resolution, including
 * the original appeal reason, evidence, current status, and admin/seller
 * outcome notes.
 *
 * Role-based security: sellers may only access records concerning their own
 * profile; administrators can view all appeals platform-wide. All actions and
 * responses are appropriately logged for compliance. Output is designed for
 * efficient case triage, review, and audit workflows.
 *
 * @param props.connection
 * @param props.body Filter criteria and pagination settings for listing seller
 *   appeals.
 * @path /aiCommerce/admin/sellerAppeals
 * @accessor api.functional.aiCommerce.admin.sellerAppeals.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter criteria and pagination settings for listing seller appeals. */
    body: IAiCommerceSellerAppeal.IRequest;
  };
  export type Body = IAiCommerceSellerAppeal.IRequest;
  export type Response = IPageIAiCommerceSellerAppeal;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/sellerAppeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/sellerAppeals";
  export const random = (): IPageIAiCommerceSellerAppeal =>
    typia.random<IPageIAiCommerceSellerAppeal>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific seller appeal case by ID (ai_commerce_seller_appeals).
 *
 * Fetch all available information for a seller appeal by its unique identifier.
 * Includes the appeal reason, type, evidence, timeline, administrator notes,
 * and all relevant workflow status fields as recorded in the database. Used for
 * real-time dispute investigation, compliance documentation, and resolution
 * workflows.
 *
 * Strict role controls apply: only the seller involved and administrators have
 * access to this operation. Record access and case review events are
 * audit-logged. If the provided sellerAppealId does not exist, an appropriate
 * error is returned.
 *
 * @param props.connection
 * @param props.sellerAppealId Unique identifier for the seller appeal record
 * @path /aiCommerce/admin/sellerAppeals/:sellerAppealId
 * @accessor api.functional.aiCommerce.admin.sellerAppeals.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the seller appeal record */
    sellerAppealId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceSellerAppeal;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/sellerAppeals/:sellerAppealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sellerAppeals/${encodeURIComponent(props.sellerAppealId ?? "null")}`;
  export const random = (): IAiCommerceSellerAppeal =>
    typia.random<IAiCommerceSellerAppeal>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerAppealId")(() => typia.assert(props.sellerAppealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
