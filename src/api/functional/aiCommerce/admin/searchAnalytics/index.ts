import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSearchAnalytics } from "../../../../structures/IAiCommerceSearchAnalytics";
import { IPageIAiCommerceSearchAnalytics } from "../../../../structures/IPageIAiCommerceSearchAnalytics";

/**
 * Search, aggregate, and paginate discovery search analytics for backend
 * monitoring and optimization.
 *
 * Enables authorized users to fetch search-related KPIs, statistics, and
 * analytics events for the discovery system, filtered by query, aggregation
 * type, timeframe, or custom dashboard segmentation. The endpoint is essential
 * for BI teams, admin analysis, and platform recommendation optimization.
 *
 * Access is restricted to admin roles with permission to analytics dashboards
 * or BI modules. Results are paginated and can be aggregated for trend,
 * segment, or dashboard reporting. Security controls prevent excessive loads or
 * data exfiltration, and all accesses are monitored for compliance.
 *
 * Responses return summarized, aggregate analytics datasets designed for
 * integration into data dashboards and optimization routines.
 *
 * @param props.connection
 * @param props.body Filtering and aggregation criteria for search analytics
 *   query, plus pagination if required
 * @path /aiCommerce/admin/searchAnalytics
 * @accessor api.functional.aiCommerce.admin.searchAnalytics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering and aggregation criteria for search analytics query, plus
     * pagination if required
     */
    body: IAiCommerceSearchAnalytics.IRequest;
  };
  export type Body = IAiCommerceSearchAnalytics.IRequest;
  export type Response = IPageIAiCommerceSearchAnalytics;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/searchAnalytics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/searchAnalytics";
  export const random = (): IPageIAiCommerceSearchAnalytics =>
    typia.random<IPageIAiCommerceSearchAnalytics>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detail for a specific search analytics entry by ID.
 *
 * Fetches a single, detailed analytics record referenced by dashboard or
 * analyst for reporting and optimization. Includes aggregated query
 * information, KPI breakdowns, filter/facet state, and analytic interval
 * windows.
 *
 * Only admin users can access or drill into individual analytics records; all
 * such actions are tracked in the compliance audit logs for evidence. Related
 * errors—such as record not found, access denied, or incomplete data—are
 * reported with actionable error messages. Access to drilldown data may vary by
 * system configuration/policy.
 *
 * @param props.connection
 * @param props.searchAnalyticsId Unique ID for the analytics entry to view
 *   detail
 * @path /aiCommerce/admin/searchAnalytics/:searchAnalyticsId
 * @accessor api.functional.aiCommerce.admin.searchAnalytics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID for the analytics entry to view detail */
    searchAnalyticsId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceSearchAnalytics;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/searchAnalytics/:searchAnalyticsId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/searchAnalytics/${encodeURIComponent(props.searchAnalyticsId ?? "null")}`;
  export const random = (): IAiCommerceSearchAnalytics =>
    typia.random<IAiCommerceSearchAnalytics>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("searchAnalyticsId")(() =>
        typia.assert(props.searchAnalyticsId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
