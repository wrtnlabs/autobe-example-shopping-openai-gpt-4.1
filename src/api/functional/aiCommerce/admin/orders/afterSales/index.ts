import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderAfterSales } from "../../../../../structures/IAiCommerceOrderAfterSales";
import { IPageIAiCommerceOrderAfterSales } from "../../../../../structures/IPageIAiCommerceOrderAfterSales";

/**
 * Search and list after-sales service events (ai_commerce_order_after_sales)
 * linked to an order.
 *
 * This operation fetches a paginated, optionally filtered list of all
 * after-sales service events for a particular order using
 * ai_commerce_order_after_sales. Buyers can monitor return/exchange requests
 * and their progression. Sellers/admins have full visibility for resolving
 * cases, providing support, and ensuring legal compliance.
 *
 * Advanced search fields allow filtering by event type (return, exchange,
 * dispute, warranty, etc.), status, actor, and creation/closing time. The
 * endpoint enables stakeholders to monitor, audit, and act on after-sales
 * events efficiently. Each response contains summary and detail for event
 * state, context note, and temporal fields, and is accessible based on
 * authorization as buyer of the order, seller involved in fulfillment, or
 * platform admin. Audit logging ensures evidence preservation for compliance.
 *
 * @param props.connection
 * @param props.orderId Order ID whose after-sales events are being listed
 *   (ai_commerce_orders.id).
 * @param props.body Paginated and filtered search parameters for after-sales
 *   events.
 * @path /aiCommerce/admin/orders/:orderId/afterSales
 * @accessor api.functional.aiCommerce.admin.orders.afterSales.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Order ID whose after-sales events are being listed
     * (ai_commerce_orders.id).
     */
    orderId: string & tags.Format<"uuid">;

    /** Paginated and filtered search parameters for after-sales events. */
    body: IAiCommerceOrderAfterSales.IRequest;
  };
  export type Body = IAiCommerceOrderAfterSales.IRequest;
  export type Response = IPageIAiCommerceOrderAfterSales;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/orders/:orderId/afterSales",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/afterSales`;
  export const random = (): IPageIAiCommerceOrderAfterSales =>
    typia.random<IPageIAiCommerceOrderAfterSales>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific after-sales case for an order
 * (ai_commerce_order_after_sales).
 *
 * This endpoint allows authorized users to retrieve the complete details of a
 * single after-sales case (e.g., return, exchange, dispute) for a specific
 * order using both the order ID and after-sales case ID. The operation
 * references the ai_commerce_order_after_sales table and returns all relevant
 * fields, such as order linkage, order item reference, actor, after-sales type,
 * case status, timestamps, and any notes provided.
 *
 * Permission checks ensure that only the order's buyer, the involved seller
 * (when applicable), or a system admin can obtain this information. The
 * operation incorporates logic to return only after-sales cases relevant to the
 * requested order, minimizing leakage of other users' data.
 *
 * Validation includes confirming existence of both the order and after-sales
 * case, as well as correct association between them. Error handling covers
 * not-found, unauthorized access, and association mismatch cases. Successful
 * responses deliver all record fields as defined in the Prisma model.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) of the parent order.
 * @param props.afterSalesId Unique identifier (UUID) of the after-sales case.
 * @path /aiCommerce/admin/orders/:orderId/afterSales/:afterSalesId
 * @accessor api.functional.aiCommerce.admin.orders.afterSales.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the parent order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the after-sales case. */
    afterSalesId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceOrderAfterSales;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/orders/:orderId/afterSales/:afterSalesId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/afterSales/${encodeURIComponent(props.afterSalesId ?? "null")}`;
  export const random = (): IAiCommerceOrderAfterSales =>
    typia.random<IAiCommerceOrderAfterSales>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("afterSalesId")(() => typia.assert(props.afterSalesId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an after-sales case for an order (ai_commerce_order_after_sales).
 *
 * Permits authorized actors—such as the buyer who raised the after-sales
 * request, the responsible seller, or an admin—to submit updates to a specific
 * after-sales record. This endpoint is tied to the
 * ai_commerce_order_after_sales schema and ensures full association integrity
 * between the given order and the after-sales case.
 *
 * Fields like status, note, type, or order item reference may be updated per
 * business rules. Permission logic enforces that only permitted workflow
 * actions (by role and status) are accepted. Full audit/trace of all updates is
 * maintained for compliance. The operation returns the record with updated data
 * post-modification.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) of the order containing the
 *   after-sales case.
 * @param props.afterSalesId Unique identifier (UUID) of the after-sales case to
 *   be updated.
 * @param props.body Fields to update for the after-sales case, using
 *   IAiCommerceOrderAfterSales.IUpdate DTO structure.
 * @path /aiCommerce/admin/orders/:orderId/afterSales/:afterSalesId
 * @accessor api.functional.aiCommerce.admin.orders.afterSales.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier (UUID) of the order containing the after-sales
     * case.
     */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the after-sales case to be updated. */
    afterSalesId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the after-sales case, using
     * IAiCommerceOrderAfterSales.IUpdate DTO structure.
     */
    body: IAiCommerceOrderAfterSales.IUpdate;
  };
  export type Body = IAiCommerceOrderAfterSales.IUpdate;
  export type Response = IAiCommerceOrderAfterSales;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/orders/:orderId/afterSales/:afterSalesId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/afterSales/${encodeURIComponent(props.afterSalesId ?? "null")}`;
  export const random = (): IAiCommerceOrderAfterSales =>
    typia.random<IAiCommerceOrderAfterSales>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("afterSalesId")(() => typia.assert(props.afterSalesId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete an after-sales case for an order (ai_commerce_order_after_sales, hard
 * delete).
 *
 * Enables authorized users (normally admin or owners under specific business
 * rules) to permanently remove an after-sales case record for an order. Based
 * on the ai_commerce_order_after_sales schema, and reflecting that there is no
 * soft-delete column, this operation executes a hard delete.
 *
 * Before removing, the function checks association between the order and
 * after-sales record, verifies role/ownership or admin privilege, and ensures
 * no policy or compliance prohibits deletion (such as being within audit window
 * or pending workflow). Upon irrevocable removal, no response body is
 * returned.
 *
 * Error handling manages cases of non-existence, unauthorized attempt, or
 * violations of system rules.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) of the order containing the
 *   after-sales record.
 * @param props.afterSalesId Unique identifier (UUID) of the after-sales record
 *   to be deleted.
 * @path /aiCommerce/admin/orders/:orderId/afterSales/:afterSalesId
 * @accessor api.functional.aiCommerce.admin.orders.afterSales.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier (UUID) of the order containing the after-sales
     * record.
     */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the after-sales record to be deleted. */
    afterSalesId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/orders/:orderId/afterSales/:afterSalesId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/afterSales/${encodeURIComponent(props.afterSalesId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("afterSalesId")(() => typia.assert(props.afterSalesId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
