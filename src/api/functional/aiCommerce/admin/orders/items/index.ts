import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderItem } from "../../../../../structures/IAiCommerceOrderItem";
import { IPageIAiCommerceOrderItem } from "../../../../../structures/IPageIAiCommerceOrderItem";

/**
 * Create a new order item under a given order (ai_commerce_order_items) —
 * admin/system/internal only.
 *
 * A new order item is added to a specified order, for example in
 * admin-controlled or automated workflow use cases (such as order corrections,
 * additional shipments, or post-processing within the fulfillment lifecycle).
 * The request body supplies the necessary product/variant/quantity/pricing and
 * seller information, following the IAiCommerceOrderItem.ICreate request
 * structure. The ai_commerce_order_items table captures one record for each new
 * item, always linked to a valid existing order and product variant.
 *
 * Security is paramount—orders can only have new items added if permitted by
 * business status and role: typically admins or system automation only, never
 * by buyers post-checkout. Validation covers proper UUIDs, sufficient
 * inventory, valid pricing, and duplicate prevention for the same
 * product/variant combination. Any failure in validation, such as referencing a
 * completed or locked order, results in a rejection.
 *
 * Related endpoints include PATCH /orders/{orderId}/items for index, and GET
 * for item detail. This API exists for completeness within admin/operational
 * flows, not for end-customer cart operations.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order to which the item
 *   will be added.
 * @param props.body Order item creation information: product/variant,
 *   quantities, pricing, and seller references.
 * @path /aiCommerce/admin/orders/:orderId/items
 * @accessor api.functional.aiCommerce.admin.orders.items.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the parent order to which the item will be
     * added.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Order item creation information: product/variant, quantities,
     * pricing, and seller references.
     */
    body: IAiCommerceOrderItem.ICreate;
  };
  export type Body = IAiCommerceOrderItem.ICreate;
  export type Response = IAiCommerceOrderItem;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/orders/:orderId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items`;
  export const random = (): IAiCommerceOrderItem =>
    typia.random<IAiCommerceOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a paginated, filtered list of order items for a specific
 * order (ai_commerce_order_items).
 *
 * This API operation enables retrieval of a paginated list of order items under
 * a specific order by its unique orderId. It supports advanced searching and
 * filtering on fields such as product name, status, seller, and quantity.
 * Access control applies based on the user's role and ownership: buyers may
 * only access their own orders, admins may access any order items, and sellers
 * are restricted to their own segments of a split order, depending on business
 * implementation.
 *
 * The underlying ai_commerce_order_items table captures each product or variant
 * within an order, including associated product/variant references, seller
 * information for multi-vendor use cases, item status, pricing at purchase, and
 * related analytics. Pagination and filtering are supported by supplying a
 * structured request body.
 *
 * Business rules enforce referential integrity to the parent order, return only
 * items belonging to the specified orderId, and optionally restrict access
 * based on account role (buyer, seller, admin). Error handling and validation
 * ensure valid UUIDs and respect for row-level permissions and privacy rules.
 *
 * This operation supports order item histories, analytics, after-sales
 * eligibility, and is typically paired with GET
 * /orders/{orderId}/items/{itemId} for details; buyers and sellers use this to
 * track, manage, and resolve issues with specific order items.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose items are being
 *   queried.
 * @param props.body Search, filter, and pagination parameters for order item
 *   retrieval.
 * @path /aiCommerce/admin/orders/:orderId/items
 * @accessor api.functional.aiCommerce.admin.orders.items.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the order whose items are being queried. */
    orderId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination parameters for order item retrieval. */
    body: IAiCommerceOrderItem.IRequest;
  };
  export type Body = IAiCommerceOrderItem.IRequest;
  export type Response = IPageIAiCommerceOrderItem;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/orders/:orderId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items`;
  export const random = (): IPageIAiCommerceOrderItem =>
    typia.random<IPageIAiCommerceOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the full details of a specific order item within an order
 * (ai_commerce_order_items).
 *
 * This API operation fetches a single order item's details, including
 * quantities, pricing, seller information, variant/product references,
 * fulfillment and delivery status, and linked after-sales eligibility. The
 * operation enforces that only authorized users—buyers who own the parent
 * order, relevant sellers tied to the ordered item, or platform admins—may
 * access the record.
 *
 * The ai_commerce_order_items table anchors the response, joined by foreign
 * keys to product, variant, and seller details for context (not expanded inline
 * unless specified in the response DTO). If either the orderId or itemId does
 * not correspond to a valid order or item, or if the user lacks permission, the
 * operation returns a not-found or unauthorized error.
 *
 * Related APIs include PATCH /orders/{orderId}/items for item search and
 * access, and PUT or DELETE for updates and removals. This endpoint is critical
 * for after-sales processes, dispute resolution, and customer support.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order.
 * @param props.itemId Unique identifier of the target order item.
 * @path /aiCommerce/admin/orders/:orderId/items/:itemId
 * @accessor api.functional.aiCommerce.admin.orders.items.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the target order item. */
    itemId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceOrderItem;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/orders/:orderId/items/:itemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): IAiCommerceOrderItem =>
    typia.random<IAiCommerceOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("itemId")(() => typia.assert(props.itemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the fields of a specific order item (ai_commerce_order_items) —
 * admin/seller only.
 *
 * Used to modify one or more fields (such as delivery status, quantity, price,
 * or fulfillment details) of an existing order item. Enables administrative
 * corrections, split-fulfillment adjustments, or edge-case after-sales actions.
 * The operation requires the caller to provide both orderId and itemId as path
 * parameters, and an IAiCommerceOrderItem.IUpdate request body specifying
 * changes.
 *
 * Business rules limit which fields may be updated depending on the status of
 * the parent order and the item itself (e.g., item cannot have quantities
 * edited after delivery is marked complete). Edits are tracked in the audit/log
 * subsystems. Only users with sufficient permissions—typically admin, or
 * possibly seller for their own items in status-limited windows—can perform
 * updates. All input is strictly validated for permission and referential
 * integrity.
 *
 * Should the item or order not exist, or the update not be permitted by
 * workflow state, validation errors are returned. Related endpoints include GET
 * for item detail, PATCH for index, and DELETE for removals.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order.
 * @param props.itemId Unique identifier of the order item to update.
 * @param props.body Fields for updating the selected order item, according to
 *   business rules and audit requirements.
 * @path /aiCommerce/admin/orders/:orderId/items/:itemId
 * @accessor api.functional.aiCommerce.admin.orders.items.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the parent order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the order item to update. */
    itemId: string & tags.Format<"uuid">;

    /**
     * Fields for updating the selected order item, according to business
     * rules and audit requirements.
     */
    body: IAiCommerceOrderItem.IUpdate;
  };
  export type Body = IAiCommerceOrderItem.IUpdate;
  export type Response = IAiCommerceOrderItem;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/orders/:orderId/items/:itemId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): IAiCommerceOrderItem =>
    typia.random<IAiCommerceOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("itemId")(() => typia.assert(props.itemId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an order item from an order (ai_commerce_order_items) —
 * admin only, hard delete.
 *
 * The erase (delete) operation allows an authorized admin to remove an order
 * item record when permitted by order lifecycle, status, and compliance/audit
 * requirements. Soft delete is not supported as the ai_commerce_order_items
 * table relies on a hard delete (no deleted_at column); once removed, the item
 * record is permanently erased and all dependent relations (e.g., after-sales
 * records) are optionally handled per implementation policy.
 *
 * Critical business validations prevent deletion if the item is already
 * delivered, under after-sales processing, or if the parent order is locked.
 * Only administrators may perform this operation in normal circumstances. All
 * deletions are recorded in the audit history for traceability. Attempts to
 * delete protected items result in error responses; a successful operation
 * returns HTTP 204 No Content or equivalent result depending on framework.
 *
 * Administrators should use this endpoint only for true data correction or
 * compliance resets; misuse of the erase operation may cause loss of
 * business/audit data. No response body is returned by design, but
 * success/failure codes and error context are provided per convention.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order.
 * @param props.itemId Unique identifier of the order item to delete.
 * @path /aiCommerce/admin/orders/:orderId/items/:itemId
 * @accessor api.functional.aiCommerce.admin.orders.items.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the parent order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the order item to delete. */
    itemId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/orders/:orderId/items/:itemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("itemId")(() => typia.assert(props.itemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
