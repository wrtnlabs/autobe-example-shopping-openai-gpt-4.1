import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderRefund } from "../../../../../structures/IAiCommerceOrderRefund";
import { IPageIAiCommerceOrderRefund } from "../../../../../structures/IPageIAiCommerceOrderRefund";

/**
 * Create a refund record for a specific order in ai_commerce_order_refunds.
 *
 * Create a new refund record associated with an order by providing the
 * necessary data in the request body, as defined by the
 * IAiCommerceOrderRefund.ICreate schema. This operation appends a new row to
 * ai_commerce_order_refunds, linking it to orderId and setting initial statuses
 * and amounts per the submitted refund request data. This API is a critical
 * part of customer support and after-sales flows.
 *
 * Role-specific business logic is enforced: only the buyer who placed the
 * order, a seller for products related to the order (where permitted by
 * policy/business logic), or an admin can create a refund. Refund eligibility,
 * requested amount, status, and reason are validated against the order/payment
 * status. Compliance logic may block or require further escalation for orders
 * that are not eligible for refund or are already fully refunded. The system
 * creates required audit logs, both for the creation action and for compliance
 * tracking of all refund activity.
 *
 * Errors resulting from invalid orderId, bad input, or ineligible status result
 * in explicit business error codes, and all failed creation attempts are
 * logged. The created refund is returned in the response on success.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order to which the refund is
 *   attached. Must be a UUID string referencing ai_commerce_orders.id.
 * @param props.body New refund request data for the order, matching
 *   IAiCommerceOrderRefund.ICreate schema.
 * @path /aiCommerce/admin/orders/:orderId/refunds
 * @accessor api.functional.aiCommerce.admin.orders.refunds.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the order to which the refund is attached. Must
     * be a UUID string referencing ai_commerce_orders.id.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * New refund request data for the order, matching
     * IAiCommerceOrderRefund.ICreate schema.
     */
    body: IAiCommerceOrderRefund.ICreate;
  };
  export type Body = IAiCommerceOrderRefund.ICreate;
  export type Response = IAiCommerceOrderRefund;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/orders/:orderId/refunds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds`;
  export const random = (): IAiCommerceOrderRefund =>
    typia.random<IAiCommerceOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List all refunds for a specific order with search and pagination from
 * ai_commerce_order_refunds.
 *
 * Retrieve a filtered, paginated list of order refunds using advanced search,
 * filter, and sort capabilities. The operation uses orderId as the primary path
 * parameter and leverages POST body parameters for complex querying,
 * corresponding directly to ai_commerce_order_refunds attributes such as
 * refund_code, reason, status, and amount.
 *
 * This endpoint is critical for customer support, compliance review, and
 * financial operations, as it enables authorized users to review historic,
 * active, and pending refunds in detail. Security controls ensure that only
 * users with an appropriate business relationship to the order—the buyer,
 * seller, or relevant admin—can access refund history for the order. Business
 * logic supports result pagination, complex search criteria, and customizable
 * sort orders.
 *
 * The operation integrates with backend business logic to ensure that only
 * refunds actually belonging to the given order are returned, and that
 * sensitive financial metadata is appropriately masked or filtered according to
 * user authorization. Errors for invalid order IDs or unauthorized access are
 * handled gracefully, with explicit error messages and audit logging of all
 * result requests.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order. Must be a UUID
 *   string referencing ai_commerce_orders.id.
 * @param props.body Search and filter parameters for refund list retrieval,
 *   matching IAiCommerceOrderRefund.IRequest schema.
 * @path /aiCommerce/admin/orders/:orderId/refunds
 * @accessor api.functional.aiCommerce.admin.orders.refunds.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the target order. Must be a UUID string
     * referencing ai_commerce_orders.id.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Search and filter parameters for refund list retrieval, matching
     * IAiCommerceOrderRefund.IRequest schema.
     */
    body: IAiCommerceOrderRefund.IRequest;
  };
  export type Body = IAiCommerceOrderRefund.IRequest;
  export type Response = IPageIAiCommerceOrderRefund;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/orders/:orderId/refunds",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds`;
  export const random = (): IPageIAiCommerceOrderRefund =>
    typia.random<IPageIAiCommerceOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific refund associated with an order from
 * ai_commerce_order_refunds.
 *
 * Retrieve full detail of a specific order refund record by orderId and
 * refundId. The operation corresponds directly to ai_commerce_order_refunds and
 * is used by customer support, buyers, sellers, and compliance administrators
 * to view refund status, amount, currency, request/resolve timestamps, actor,
 * and business notes.
 *
 * Security logic ensures only stakeholders authorized by business rules can
 * access the refund: this includes the buyer involved in the order, the seller
 * responsible for the product, and platform administrators. The API returns
 * sensitive financial and process details according to the role of the
 * requester, masking or filtering fields if needed.
 *
 * If either the order or refund ID is not found, or access is attempted by an
 * unauthorized party, the system responds with explicit error codes and
 * explanations. Refund detail retrieval is also monitored for compliance and
 * audit logging purposes.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order to which the refund is
 *   attached. Must be a UUID string referencing ai_commerce_orders.id.
 * @param props.refundId Unique identifier of the target refund record. Must be
 *   a UUID string referencing ai_commerce_order_refunds.id.
 * @path /aiCommerce/admin/orders/:orderId/refunds/:refundId
 * @accessor api.functional.aiCommerce.admin.orders.refunds.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the order to which the refund is attached. Must
     * be a UUID string referencing ai_commerce_orders.id.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the target refund record. Must be a UUID string
     * referencing ai_commerce_order_refunds.id.
     */
    refundId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceOrderRefund;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/orders/:orderId/refunds/:refundId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): IAiCommerceOrderRefund =>
    typia.random<IAiCommerceOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing refund for an order in ai_commerce_order_refunds
 * (admin-only).
 *
 * Update a refund record identified by orderId and refundId by providing new
 * refund data that matches the IAiCommerceOrderRefund.IUpdate schema. This
 * operation enables correction or escalation for refund records—such as
 * adjusting amounts, changing status, or adding compliance notes—under strict
 * administrative control. All changes are written to ai_commerce_order_refunds,
 * and a fully detailed audit record is automatically generated.
 *
 * Business logic restricts this operation to admins, supporting scenarios like
 * regulatory changes, error correction, or compliance requests. Normal users
 * and sellers are not permitted to update existing refund records. The update
 * operation validates field values according to the schema and
 * business/financial rules, including that the refund must actually belong to
 * the specified order, and that the update does not violate refund status,
 * currency, or payment settlement conditions.
 *
 * Concurrent updates, invalid refund/order IDs, or validation failures result
 * in clear business error codes and do not result in partial writes. The fully
 * updated refund record is returned in the response for confirmation and any
 * post-processing.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order. Must be a UUID string
 *   referencing ai_commerce_orders.id.
 * @param props.refundId Unique identifier of the refund record. Must be a UUID
 *   string referencing ai_commerce_order_refunds.id.
 * @param props.body Updated refund data as defined in
 *   IAiCommerceOrderRefund.IUpdate schema.
 * @path /aiCommerce/admin/orders/:orderId/refunds/:refundId
 * @accessor api.functional.aiCommerce.admin.orders.refunds.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the order. Must be a UUID string referencing
     * ai_commerce_orders.id.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the refund record. Must be a UUID string
     * referencing ai_commerce_order_refunds.id.
     */
    refundId: string & tags.Format<"uuid">;

    /**
     * Updated refund data as defined in IAiCommerceOrderRefund.IUpdate
     * schema.
     */
    body: IAiCommerceOrderRefund.IUpdate;
  };
  export type Body = IAiCommerceOrderRefund.IUpdate;
  export type Response = IAiCommerceOrderRefund;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/orders/:orderId/refunds/:refundId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): IAiCommerceOrderRefund =>
    typia.random<IAiCommerceOrderRefund>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a specific refund record from ai_commerce_order_refunds for an
 * order (admin only).
 *
 * Permanently erase the refund record identified by orderId and refundId from
 * the ai_commerce_order_refunds table. This operation is specifically
 * restricted to admins due to the sensitive nature of refund removal (affecting
 * financial, compliance, and auditor records).
 *
 * The deletion is a hard remove (no soft delete present in this table), and it
 * is handled with system-wide audit logging of the operation and all dependent
 * changes. Use of this operation is very limited outside administrative
 * correction, compliance, or error remediation scenarios. All other refunds are
 * retained for legal/business evidence.
 *
 * Attempts to delete non-existent or locked refunds (those attached to
 * closed/settled orders or in the compliance hold state) will result in clear
 * business error responses. This ensures both data integrity and full
 * traceability through post-operation logs.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order. Must be a UUID string
 *   referencing ai_commerce_orders.id.
 * @param props.refundId Unique identifier of the refund record to be deleted.
 *   Must be a UUID string referencing ai_commerce_order_refunds.id.
 * @path /aiCommerce/admin/orders/:orderId/refunds/:refundId
 * @accessor api.functional.aiCommerce.admin.orders.refunds.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the order. Must be a UUID string referencing
     * ai_commerce_orders.id.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the refund record to be deleted. Must be a UUID
     * string referencing ai_commerce_order_refunds.id.
     */
    refundId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/orders/:orderId/refunds/:refundId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/refunds/${encodeURIComponent(props.refundId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("refundId")(() => typia.assert(props.refundId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
