import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderAuditLog } from "../../../../../structures/IAiCommerceOrderAuditLog";
import { IPageIAiCommerceOrderAuditLog } from "../../../../../structures/IPageIAiCommerceOrderAuditLog";

/**
 * Retrieve a paginated list of audit logs for a specific order from the
 * ai_commerce_order_audit_logs table.
 *
 * This API operation allows clients to retrieve a paginated, filterable list of
 * all audit logs connected to a specific order. Audit logs document every
 * critical order-related action—creation, update, payment, refund, fulfillment,
 * cancellation, after-sales, and associated notes—ensuring full compliance with
 * business traceability, legal evidence preservation, and transparent
 * auditability per the ai_commerce_order_audit_logs table.
 *
 * Each audit log entry contains details such as the type of action performed,
 * the actor (buyer, seller, admin), contextual notes, and the precise
 * timestamp. This is foundational for compliance, forensic analysis, and
 * regulatory reporting, enabling both admins and business users to reconstruct
 * the complete lifecycle of an order.
 *
 * Data access is typically restricted based on authorization level (e.g., admin
 * access required for sensitive audit data) and may include pagination,
 * filtering by event type, and date ranges. This endpoint is fundamental for
 * legal dispute support, operational analytics, and system integrity
 * monitoring.
 *
 * @param props.connection
 * @param props.orderId Unique identifier for the target order whose audit logs
 *   are being retrieved.
 * @param props.body Audit log search, pagination, and filter criteria for a
 *   given order.
 * @path /aiCommerce/admin/orders/:orderId/auditLogs
 * @accessor api.functional.aiCommerce.admin.orders.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier for the target order whose audit logs are being
     * retrieved.
     */
    orderId: string & tags.Format<"uuid">;

    /** Audit log search, pagination, and filter criteria for a given order. */
    body: IAiCommerceOrderAuditLog.IRequest;
  };
  export type Body = IAiCommerceOrderAuditLog.IRequest;
  export type Response = IPageIAiCommerceOrderAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/orders/:orderId/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/auditLogs`;
  export const random = (): IPageIAiCommerceOrderAuditLog =>
    typia.random<IPageIAiCommerceOrderAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
