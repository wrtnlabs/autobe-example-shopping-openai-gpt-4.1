import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderFulfillments } from "../../../../../structures/IAiCommerceOrderFulfillments";
import { IPageIAiCommerceOrderFulfillments } from "../../../../../structures/IPageIAiCommerceOrderFulfillments";

/**
 * List and search fulfillment actions (ai_commerce_order_fulfillments) for an
 * order.
 *
 * This operation lists the fulfillment actions for a specific order, supporting
 * advanced filtering, search, and pagination for cases of staged, split, or
 * partial deliveries. Queries the ai_commerce_order_fulfillments table,
 * presenting events such as shipping, delivery, returns, or failed attempts.
 * The operation enables buyers to track shipments and their statuses, and
 * allows sellers/admins to monitor and audit fulfillment performance.
 *
 * The endpoint supports filters for sub-order, carrier, fulfillment status, and
 * date/time. Pagination is implemented for efficiency on large/long-running
 * orders. Access is granted to the buyer (who placed the order), sellers who
 * own relevant sub-orders, and administrators. Audit logging of all queries
 * ensures support and regulatory evidence is maintained.
 *
 * @param props.connection
 * @param props.orderId Order ID for which to retrieve fulfillment events
 *   (ai_commerce_orders.id).
 * @param props.body Advanced search and filter parameters for fulfillment
 *   actions, including pagination.
 * @path /aiCommerce/admin/orders/:orderId/fulfillments
 * @accessor api.functional.aiCommerce.admin.orders.fulfillments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Order ID for which to retrieve fulfillment events
     * (ai_commerce_orders.id).
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Advanced search and filter parameters for fulfillment actions,
     * including pagination.
     */
    body: IAiCommerceOrderFulfillments.IRequest;
  };
  export type Body = IAiCommerceOrderFulfillments.IRequest;
  export type Response = IPageIAiCommerceOrderFulfillments;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/orders/:orderId/fulfillments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/fulfillments`;
  export const random = (): IPageIAiCommerceOrderFulfillments =>
    typia.random<IPageIAiCommerceOrderFulfillments>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single fulfillment event (ai_commerce_order_fulfillments) for an order
 * by orderId and fulfillmentId.
 *
 * Returns complete details for a fulfillment action on a specific order,
 * selecting by orderId and fulfillmentId. Queries
 * ai_commerce_order_fulfillments for all relevant attributes, such as carrier,
 * delivery status, carrier contact, and event times. Designed for tracking,
 * support, and regulatory audit scenarios.
 *
 * Access is limited to the buyer who owns the order, the seller responsible for
 * the sub-order being fulfilled, or an administrator. Helps users trace parcel
 * and delivery state, resolve issues, and support compliance. If the
 * fulfillmentId does not exist for the order, or the user is unauthorized, an
 * error is returned. Complements the list/search endpoint for order
 * fulfillments.
 *
 * @param props.connection
 * @param props.orderId Order ID (ai_commerce_orders.id) whose fulfillment is
 *   being viewed.
 * @param props.fulfillmentId Unique ID of the fulfillment event
 *   (ai_commerce_order_fulfillments.id).
 * @path /aiCommerce/admin/orders/:orderId/fulfillments/:fulfillmentId
 * @accessor api.functional.aiCommerce.admin.orders.fulfillments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Order ID (ai_commerce_orders.id) whose fulfillment is being viewed. */
    orderId: string & tags.Format<"uuid">;

    /**
     * Unique ID of the fulfillment event
     * (ai_commerce_order_fulfillments.id).
     */
    fulfillmentId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceOrderFulfillments;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/orders/:orderId/fulfillments/:fulfillmentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/orders/${encodeURIComponent(props.orderId ?? "null")}/fulfillments/${encodeURIComponent(props.fulfillmentId ?? "null")}`;
  export const random = (): IAiCommerceOrderFulfillments =>
    typia.random<IAiCommerceOrderFulfillments>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("fulfillmentId")(() => typia.assert(props.fulfillmentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
