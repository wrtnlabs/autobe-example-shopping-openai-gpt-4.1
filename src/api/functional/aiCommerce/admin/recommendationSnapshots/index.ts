import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceRecommendationSnapshot } from "../../../../structures/IAiCommerceRecommendationSnapshot";
import { IPageIAiCommerceRecommendationSnapshot } from "../../../../structures/IPageIAiCommerceRecommendationSnapshot";

/**
 * Search and filter recommendation snapshot logs for audit and AI analysis.
 *
 * Authorized analytics teams and admins can query recommendation snapshots
 * generated by the personalized AI engine. Snapshots include linked user
 * context, full recommendation data, computed reason/ranking, and contextual
 * evidence for model explainability and compliance audits.
 *
 * Advanced search supports filtering by user, snapshot timestamp, and
 * rank/context filters. The operation ensures all returned data is tied to
 * audit trails for privacy and compliance. Results may be redacted to anonymize
 * personal information as required by business logic and legal obligations.
 *
 * The endpoint enforces rate limits and logging for access control, and returns
 * a paginated, detailed summary set for further inspection or evidence
 * gathering.
 *
 * @param props.connection
 * @param props.body Complex filters and pagination options for recommendation
 *   snapshot query
 * @path /aiCommerce/admin/recommendationSnapshots
 * @accessor api.functional.aiCommerce.admin.recommendationSnapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Complex filters and pagination options for recommendation snapshot
     * query
     */
    body: IAiCommerceRecommendationSnapshot.IRequest;
  };
  export type Body = IAiCommerceRecommendationSnapshot.IRequest;
  export type Response = IPageIAiCommerceRecommendationSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/recommendationSnapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/recommendationSnapshots";
  export const random = (): IPageIAiCommerceRecommendationSnapshot =>
    typia.random<IPageIAiCommerceRecommendationSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the detail of a specific recommendation snapshot entry for model
 * audit or compliance.
 *
 * Retrieves a full snapshot event log for a specific recommendation issued to a
 * user, identified by its unique recommendationSnapshotId. Includes context,
 * full output, AI model scoring, and user linkage for explainability, audit,
 * and legal trace.
 *
 * The operation is only accessible to analytics team members or admins with
 * proper audit rights, and every access is recorded in the security audit log.
 * Personal information in the snapshot is anonymized or redacted in accordance
 * with data privacy policies and audit requirements.
 *
 * If the requested snapshot is not found, was already redacted, or access is
 * denied, the API returns actionable error feedback, and all such queries are
 * monitored for compliance reporting.
 *
 * @param props.connection
 * @param props.recommendationSnapshotId ID of the recommendation snapshot to
 *   retrieve
 * @path /aiCommerce/admin/recommendationSnapshots/:recommendationSnapshotId
 * @accessor api.functional.aiCommerce.admin.recommendationSnapshots.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the recommendation snapshot to retrieve */
    recommendationSnapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceRecommendationSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/recommendationSnapshots/:recommendationSnapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/recommendationSnapshots/${encodeURIComponent(props.recommendationSnapshotId ?? "null")}`;
  export const random = (): IAiCommerceRecommendationSnapshot =>
    typia.random<IAiCommerceRecommendationSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("recommendationSnapshotId")(() =>
        typia.assert(props.recommendationSnapshotId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
