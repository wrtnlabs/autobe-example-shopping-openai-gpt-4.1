import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceMileageAccount } from "../../../../structures/IAiCommerceMileageAccount";
import { IPageIAiCommerceMileageAccount } from "../../../../structures/IPageIAiCommerceMileageAccount";

/**
 * Create a new mileage account for a user with essential setup information.
 *
 * This operation allows an authorized actor to create a new mileage account,
 * most commonly at the time of user onboarding or role escalation (e.g.,
 * becoming a seller). The request body must conform to the
 * IAiCommerceMileageAccount.ICreate structure, capturing data such as user_id
 * (buyer or seller), initial balance, currency_code, account_code (if specified
 * per business logic), and account status.
 *
 * Business rules typically enforce one active account per user for each
 * currency. Duplicate or redundant accounts should be prevented unless
 * explicitly required. Upon creation, all compliance, KPIs, and incentive logic
 * are initialized.
 *
 * All mileage account creation events are strictly audited, as these accounts
 * may impact financial settlement and user-facing rewards. Only permitted
 * system or admin actors can trigger account creation for another user.
 *
 * @param props.connection
 * @param props.body Parameters for creating a new mileage account, including
 *   user association, currency, and any initial balance.
 * @path /aiCommerce/admin/mileageAccounts
 * @accessor api.functional.aiCommerce.admin.mileageAccounts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Parameters for creating a new mileage account, including user
     * association, currency, and any initial balance.
     */
    body: IAiCommerceMileageAccount.ICreate;
  };
  export type Body = IAiCommerceMileageAccount.ICreate;
  export type Response = IAiCommerceMileageAccount;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/mileageAccounts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/mileageAccounts";
  export const random = (): IAiCommerceMileageAccount =>
    typia.random<IAiCommerceMileageAccount>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginated and filtered search of mileage accounts for loyalty point balances,
 * by user or admin.
 *
 * Retrieve a paginated, filtered list of mileage accounts associated with users
 * from ai_commerce_mileage_accounts.
 *
 * Query parameters include user ID, account status, creation/update date range,
 * and balance filters. The endpoint supports advanced analytics actions for
 * admins and lets authenticated users review their own loyalty balances, with
 * field masking and row-level permissions according to role.
 *
 * Security is strictly enforced: only users may access their own mileage
 * accounts; admins have unrestricted analytics access. All search criteria and
 * results are auditable, and access is logged for fraud/compliance review.
 *
 * Use cases include loyalty point review, reward analytics, and admin
 * audit/compliance activities. Related operations: account detail view,
 * transaction history for a mileage account, account management, and account
 * auditing.
 *
 * @param props.connection
 * @param props.body Criteria and paging controls for mileage account search.
 * @path /aiCommerce/admin/mileageAccounts
 * @accessor api.functional.aiCommerce.admin.mileageAccounts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Criteria and paging controls for mileage account search. */
    body: IAiCommerceMileageAccount.IRequest;
  };
  export type Body = IAiCommerceMileageAccount.IRequest;
  export type Response = IPageIAiCommerceMileageAccount;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/mileageAccounts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/mileageAccounts";
  export const random = (): IPageIAiCommerceMileageAccount =>
    typia.random<IPageIAiCommerceMileageAccount>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific mileage account by its unique
 * identifier.
 *
 * This operation retrieves the full set of details for a specific mileage
 * account, referenced by its unique identifier (mileageAccountId). It includes
 * all fields as defined in the ai_commerce_mileage_accounts table:
 * account_code, user_id, balance, currency_code, status, created_at,
 * updated_at, and deleted_at if present.
 *
 * The function is permissioned such that only the account owner, relevant
 * seller, or platform administrator can access this information. This ensures
 * privacy and security for sensitive account data.
 *
 * Mileage account data is critical for both business operations and regulatory
 * compliance, as the account maintains a running history of all
 * reward/incentive points, deductions, and status changes. Any queries to this
 * endpoint should be carefully audited and logged for security purposes.
 *
 * @param props.connection
 * @param props.mileageAccountId Unique identifier for the target mileage
 *   account.
 * @path /aiCommerce/admin/mileageAccounts/:mileageAccountId
 * @accessor api.functional.aiCommerce.admin.mileageAccounts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target mileage account. */
    mileageAccountId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceMileageAccount;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/mileageAccounts/:mileageAccountId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/mileageAccounts/${encodeURIComponent(props.mileageAccountId ?? "null")}`;
  export const random = (): IAiCommerceMileageAccount =>
    typia.random<IAiCommerceMileageAccount>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageAccountId")(() =>
        typia.assert(props.mileageAccountId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details for an existing mileage account by unique ID.
 *
 * This operation updates the core fields of an existing mileage account,
 * including account status (e.g., suspended/active), currency, or other allowed
 * changes based on business rules. Balance adjustment is restricted to specific
 * business processes and usually performed via transaction records.
 *
 * Request data must follow the IAiCommerceMileageAccount.IUpdate type, ensuring
 * only modifiable fields in schema can be altered. All inputs are validated for
 * regulatory compliance and consistency with user/account business rules.
 *
 * Mileage account updates are strictly audited: every state change, especially
 * those affecting user-facing balances or account status, is tracked for
 * compliance and legal evidence. Only admins or compliance-authorized roles are
 * permitted to update another user's mileage account.
 *
 * @param props.connection
 * @param props.mileageAccountId Unique identifier for the mileage account to
 *   update.
 * @param props.body Update fields for the specified mileage account following
 *   business and audit rules.
 * @path /aiCommerce/admin/mileageAccounts/:mileageAccountId
 * @accessor api.functional.aiCommerce.admin.mileageAccounts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the mileage account to update. */
    mileageAccountId: string & tags.Format<"uuid">;

    /**
     * Update fields for the specified mileage account following business
     * and audit rules.
     */
    body: IAiCommerceMileageAccount.IUpdate;
  };
  export type Body = IAiCommerceMileageAccount.IUpdate;
  export type Response = IAiCommerceMileageAccount;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/mileageAccounts/:mileageAccountId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/mileageAccounts/${encodeURIComponent(props.mileageAccountId ?? "null")}`;
  export const random = (): IAiCommerceMileageAccount =>
    typia.random<IAiCommerceMileageAccount>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageAccountId")(() =>
        typia.assert(props.mileageAccountId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a mileage account by its unique ID (hard delete, not
 * reversible).
 *
 * The operation performs a permanent removal (hard delete) of a specified
 * mileage account from active records in the ai_commerce_mileage_accounts
 * table, identified by mileageAccountId. This is typically allowed only for
 * accounts with zero balance and not under legal/financial hold.
 *
 * Before deletion, all dependent records and transactional references are
 * validated for compliance. The operation will fail if the account is non-empty
 * or involved in an open dispute or compliance freeze. Post-deletion, only
 * audit logs and compliance evidence are retained for regulatory and legal
 * purposes.
 *
 * Access to deletion functionality is strictly limited to administrative or
 * compliance officers, and every action is fully logged with actor, timestamp,
 * and justification.
 *
 * @param props.connection
 * @param props.mileageAccountId Unique identifier for the mileage account to be
 *   deleted.
 * @path /aiCommerce/admin/mileageAccounts/:mileageAccountId
 * @accessor api.functional.aiCommerce.admin.mileageAccounts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the mileage account to be deleted. */
    mileageAccountId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/mileageAccounts/:mileageAccountId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/mileageAccounts/${encodeURIComponent(props.mileageAccountId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageAccountId")(() =>
        typia.assert(props.mileageAccountId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
