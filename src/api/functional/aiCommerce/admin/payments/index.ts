import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommercePayment } from "../../../../structures/IAiCommercePayment";
import { IPageIAiCommercePayment } from "../../../../structures/IPageIAiCommercePayment";

/**
 * Create a new payment record (pending or issued) in the ai_commerce_payments
 * subsystem for transaction tracking and settlement.
 *
 * This API allows for the creation of a new payment entry in the
 * ai_commerce_payments table. All business logic regarding uniqueness of the
 * payment reference, initial status, amount, currency, and linkage to orders or
 * users is handled according to the schema definitions.
 *
 * Upon POST, the system logs the payment with a unique payment_reference,
 * issued_at timestamp, and status (e.g., 'pending'), capturing all essential
 * data for future confirmation, refund, and compliance audit. The creation of a
 * payment is a trigger for further processing, including confirmation by
 * payment gateways, potential fraud checks, and linking to downstream order
 * fulfillment.
 *
 * Access to this endpoint is restricted (typically admin or system users) to
 * prevent unauthorized payment entries. Validation ensures compliance with
 * transaction recording standards, and errors returned for duplication,
 * referencing inexistent orders, or invalid amounts. Integrates with the
 * broader financial subsystem for complete integrity in transaction
 * processing.
 *
 * @param props.connection
 * @param props.body Details and metadata for the new payment to be created,
 *   including reference, amount, currency, status, and related order info.
 * @path /aiCommerce/admin/payments
 * @accessor api.functional.aiCommerce.admin.payments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details and metadata for the new payment to be created, including
     * reference, amount, currency, status, and related order info.
     */
    body: IAiCommercePayment.ICreate;
  };
  export type Body = IAiCommercePayment.ICreate;
  export type Response = IAiCommercePayment;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/payments";
  export const random = (): IAiCommercePayment =>
    typia.random<IAiCommercePayment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search payment records with advanced filtering and pagination from
 * the ai_commerce_payments table.
 *
 * This API retrieves a paginated and filterable list of payments recorded in
 * the ai_commerce_payments table. Each payment entry includes details such as
 * payment status, amount, currency, associated order/payment reference, method,
 * issued and confirmed timestamps, and failure reasons as applicable.
 *
 * Admins can apply filters to search payments by date range, method, currency,
 * and status (pending, paid, failed, refunded, etc.), as well as sort and page
 * through results. This function is crucial for back-office finance teams
 * conducting audits, reviewing settlement activity, analyzing transaction
 * history, and responding to suspected fraud or system issues.
 *
 * Sensitive fields such as user references, failure reasons, or gateway
 * responses are included in the dataset, so admin-level role is typically
 * required. This endpoint is core to compliance, reporting, and advanced
 * payment analytics modules.
 *
 * @param props.connection
 * @param props.body Filter, search, and pagination criteria for listing payment
 *   records.
 * @path /aiCommerce/admin/payments
 * @accessor api.functional.aiCommerce.admin.payments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, search, and pagination criteria for listing payment records. */
    body: IAiCommercePayment.IRequest;
  };
  export type Body = IAiCommercePayment.IRequest;
  export type Response = IPageIAiCommercePayment;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/payments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/payments";
  export const random = (): IPageIAiCommercePayment =>
    typia.random<IPageIAiCommercePayment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full detail for a specific payment event from the
 * ai_commerce_payments table.
 *
 * This endpoint returns the detailed record for a specified payment, as managed
 * by the ai_commerce_payments schema model. The retrieved information includes
 * payment status, reference code, amount, issued and confirmation times, any
 * failure reason, and related order or user linkage.
 *
 * This operation supports compliance with financial reporting, helps admin
 * review payment settlement status, troubleshoot failed transactions, or
 * provide resolution for refunds and disputes. Data access is limited to
 * authorized administrative users and may be used synergistically with payment
 * audit, refund, or order management endpoints for deeper financial operations
 * and system integrity.
 *
 * @param props.connection
 * @param props.paymentId Identifier of the payment record to retrieve.
 * @path /aiCommerce/admin/payments/:paymentId
 * @accessor api.functional.aiCommerce.admin.payments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the payment record to retrieve. */
    paymentId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommercePayment;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IAiCommercePayment =>
    typia.random<IAiCommercePayment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing payment transaction's details/status in the
 * ai_commerce_payments table.
 *
 * This endpoint allows an authorized admin to modify a payment record, updating
 * details such as status (settled, refunded, failed), confirmation time,
 * failure reasons, or audit/correction notes in the ai_commerce_payments table.
 * Typical uses include reconciling payment states after external gateway
 * callbacks, correcting payment errors, or performing compliance-related status
 * changes documented in audit trails.
 *
 * All updates must comply with payment reconciliation and compliance policies,
 * ensuring no double-spend or inconsistency with related order status. The
 * endpoint checks for concurrency, authorized admin action, and logs all
 * changes for audit purposes. Incorrect updates are rejected with validation or
 * business error messages.
 *
 * @param props.connection
 * @param props.paymentId Identifier of the payment record to update.
 * @param props.body Fields to update for payment status, timestamps, or other
 *   reconciled values.
 * @path /aiCommerce/admin/payments/:paymentId
 * @accessor api.functional.aiCommerce.admin.payments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the payment record to update. */
    paymentId: string & tags.Format<"uuid">;

    /**
     * Fields to update for payment status, timestamps, or other reconciled
     * values.
     */
    body: IAiCommercePayment.IUpdate;
  };
  export type Body = IAiCommercePayment.IUpdate;
  export type Response = IAiCommercePayment;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/payments/:paymentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): IAiCommercePayment =>
    typia.random<IAiCommercePayment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("paymentId")(() => typia.assert(props.paymentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Hard delete a specific payment record from the ai_commerce_payments subsystem
 * (irreversible).
 *
 * This endpoint performs an irreversible hard delete of a payment record
 * identified by paymentId from the ai_commerce_payments table. Unlike soft
 * deletes elsewhere, this fully erases the record from the system, making it
 * unrecoverable. The operation is restricted to admin users to prevent
 * accidental or malicious removal of financial records.
 *
 * Deletion is permitted only on payments not tied to settled or legally owned
 * transactions, in strict conformance with business, legal, and audit rules.
 * The operation verifies target eligibility and records the deletion action for
 * forensic/audit evidence. Invalid requests (such as deletion of finalized or
 * linked payments) are rejected with explicit error reporting.
 *
 * @param props.connection
 * @param props.paymentId UUID of the payment transaction to delete permanently.
 * @path /aiCommerce/admin/payments/:paymentId
 * @accessor api.functional.aiCommerce.admin.payments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the payment transaction to delete permanently. */
    paymentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/payments/:paymentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/payments/${encodeURIComponent(props.paymentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("paymentId")(() => typia.assert(props.paymentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
