import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommercePaymentTransaction } from "../../../../structures/IAiCommercePaymentTransaction";
import { IPageIAiCommercePaymentTransaction } from "../../../../structures/IPageIAiCommercePaymentTransaction";

/**
 * Manually create a payment transaction record for reconciliation or admin
 * purposes.
 *
 * Create a new payment transaction record in the
 * ai_commerce_payment_transactions table. This is intended for
 * back-office/admin users who need to insert a transaction for exception
 * handling, platform reconciliation, or correcting gateway transaction history.
 * Required fields include transaction reference, payment linkage, payment
 * method and gateway, amount, status, timestamps, and supporting data.
 *
 * Security: Only admins have privilege to create transactions directly. This
 * API must never be exposed to buyers or sellers.
 *
 * Underlying Entity: ai_commerce_payment_transactions, with strict schema
 * enforcement and audit logging for compliance and operational recovery
 * workflows. All actions are monitored and subject to security review.
 *
 * @param props.connection
 * @param props.body Required data to create a new payment transaction record,
 *   such as transaction reference, payment linkage, amount, status, and
 *   metadata.
 * @path /aiCommerce/admin/paymentTransactions
 * @accessor api.functional.aiCommerce.admin.paymentTransactions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Required data to create a new payment transaction record, such as
     * transaction reference, payment linkage, amount, status, and
     * metadata.
     */
    body: IAiCommercePaymentTransaction.ICreate;
  };
  export type Body = IAiCommercePaymentTransaction.ICreate;
  export type Response = IAiCommercePaymentTransaction;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/paymentTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/paymentTransactions";
  export const random = (): IAiCommercePaymentTransaction =>
    typia.random<IAiCommercePaymentTransaction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated, filterable list of payment transactions for admin
 * investigation.
 *
 * Retrieve a filtered and paginated list of payment transactions from the
 * ai_commerce_payment_transactions table. This endpoint provides advanced query
 * options such as searching by payment status, gateway, date range, and
 * user/account, as well as sorting by transaction date or amount. Users can
 * analyze exposure to failed, pending, or successful transactions and track
 * reconciliation needs.
 *
 * Security: Only admin users have access to the full transaction list.
 * Sensitive fields and raw gateway response data are restricted.
 *
 * Underlying Entity: ai_commerce_payment_transactions, with relations to
 * ai_commerce_payments (gateway, payment method, order linkage).
 *
 * Validation: Supports full filtering and pagination per platform standard.
 * Input must conform to search schema and access will be permission-checked.
 *
 * This operation is often paired with detail retrieval and status update
 * endpoints for investigation or reporting workflows. Errors in filtering or
 * unauthorized access return clear feedback and audit logging.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for querying payment
 *   transactions
 * @path /aiCommerce/admin/paymentTransactions
 * @accessor api.functional.aiCommerce.admin.paymentTransactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and filter parameters for querying payment transactions */
    body: IAiCommercePaymentTransaction.IRequest;
  };
  export type Body = IAiCommercePaymentTransaction.IRequest;
  export type Response = IPageIAiCommercePaymentTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/paymentTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/paymentTransactions";
  export const random = (): IPageIAiCommercePaymentTransaction =>
    typia.random<IPageIAiCommercePaymentTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full detail of a specific payment transaction by its transaction ID.
 *
 * Retrieve complete payment transaction details given a valid payment
 * transaction ID. The operation returns all metadata, status, monetary amounts,
 * linked payment and gateway entities, relevant timestamps, and associated raw
 * gateway payloads.
 *
 * Security: Only admins may access raw and sensitive transaction metadata,
 * including gateway response bodies. All actions are logged for compliance.
 *
 * Underlying Entity: ai_commerce_payment_transactions, with references to
 * ai_commerce_payments and related tables.
 *
 * Validation: Transaction IDs are validated for existence and permission; any
 * not found or unauthorized attempts return error or access denied responses.
 *
 * Cancellation or refund investigation typically uses this detail endpoint
 * alongside related payment and order data queries.
 *
 * @param props.connection
 * @param props.paymentTransactionId Unique identifier of the target payment
 *   transaction
 * @path /aiCommerce/admin/paymentTransactions/:paymentTransactionId
 * @accessor api.functional.aiCommerce.admin.paymentTransactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target payment transaction */
    paymentTransactionId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommercePaymentTransaction;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/paymentTransactions/:paymentTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/paymentTransactions/${encodeURIComponent(props.paymentTransactionId ?? "null")}`;
  export const random = (): IAiCommercePaymentTransaction =>
    typia.random<IAiCommercePaymentTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("paymentTransactionId")(() =>
        typia.assert(props.paymentTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a payment transaction record by ID for reconciliation, error
 * correction, or compliance.
 *
 * Update payment transaction record fields by ID. Allows admins to modify
 * details such as transaction status, timestamps, gateway response, and
 * linkages to associated payments/orders. This is intended for reconciliation,
 * audit, and error-correction. Operation is strictly access-controlled and all
 * changes are tracked for compliance audit.
 *
 * Security: Only admin users may update payment transaction records due to
 * sensitive financial data. Modifications are logged and versioned for audit.
 *
 * Underlying Entity: ai_commerce_payment_transactions. Validation ensures only
 * valid transaction IDs are updated, and required fields must be present as per
 * the update schema.
 *
 * Errors may arise if the transaction is not found, not allowed to update
 * (locked, settled, etc.), or inputs violate business validation rules.
 *
 * @param props.connection
 * @param props.paymentTransactionId Unique identifier of the target payment
 *   transaction
 * @param props.body Data for updating fields in the payment transaction, such
 *   as status or metadata.
 * @path /aiCommerce/admin/paymentTransactions/:paymentTransactionId
 * @accessor api.functional.aiCommerce.admin.paymentTransactions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target payment transaction */
    paymentTransactionId: string & tags.Format<"uuid">;

    /**
     * Data for updating fields in the payment transaction, such as status
     * or metadata.
     */
    body: IAiCommercePaymentTransaction.IUpdate;
  };
  export type Body = IAiCommercePaymentTransaction.IUpdate;
  export type Response = IAiCommercePaymentTransaction;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/paymentTransactions/:paymentTransactionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/paymentTransactions/${encodeURIComponent(props.paymentTransactionId ?? "null")}`;
  export const random = (): IAiCommercePaymentTransaction =>
    typia.random<IAiCommercePaymentTransaction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("paymentTransactionId")(() =>
        typia.assert(props.paymentTransactionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a payment transaction record by ID (admin only).
 *
 * Permanently remove a payment transaction record given its transaction ID.
 * Only admins may execute this action. This is generally reserved for
 * exceptional administrative corrections and is never intended for normal
 * payment lifecycle management. All operations are recorded in audit logs and a
 * compliance review is required before use.
 *
 * Security: Restricted admin access. Attempts outside of permissions are denied
 * and logged.
 *
 * Underlying Entity: ai_commerce_payment_transactions. If the schema does not
 * specify a soft delete, this performs a complete hard delete.
 *
 * Usage is rare and should be governed by business process exceptions and
 * compliance guidelines.
 *
 * @param props.connection
 * @param props.paymentTransactionId Unique identifier of the payment
 *   transaction to delete
 * @path /aiCommerce/admin/paymentTransactions/:paymentTransactionId
 * @accessor api.functional.aiCommerce.admin.paymentTransactions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the payment transaction to delete */
    paymentTransactionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/paymentTransactions/:paymentTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/paymentTransactions/${encodeURIComponent(props.paymentTransactionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("paymentTransactionId")(() =>
        typia.assert(props.paymentTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
