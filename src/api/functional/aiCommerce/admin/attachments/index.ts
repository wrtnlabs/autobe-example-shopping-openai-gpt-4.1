import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceAttachments } from "../../../../structures/IAiCommerceAttachments";
import { IPageIAiCommerceAttachments } from "../../../../structures/IPageIAiCommerceAttachments";

/**
 * Search and paginate uploaded attachments for review
 * (ai_commerce_attachments).
 *
 * Retrieves a paginated list of attachments, filtering by attributes such as
 * status, business type, user, or created_at timestamp. This is used for
 * compliance review, file management, and can also support user reports of
 * attachments. The request supports advanced filters and complex paging as per
 * the ai_commerce_attachments schema.
 *
 * This endpoint is strictly admin-only for system-wide attachment management.
 * Sensitive data is appropriately redacted in the results. Errors are returned
 * if filters are malformed or required parameters are missing.
 *
 * @param props.connection
 * @param props.body Filtering and paging criteria for attachment search.
 * @path /aiCommerce/admin/attachments
 * @accessor api.functional.aiCommerce.admin.attachments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and paging criteria for attachment search. */
    body: IAiCommerceAttachments.IRequest;
  };
  export type Body = IAiCommerceAttachments.IRequest;
  export type Response = IPageIAiCommerceAttachments;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/attachments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/attachments";
  export const random = (): IPageIAiCommerceAttachments =>
    typia.random<IPageIAiCommerceAttachments>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
