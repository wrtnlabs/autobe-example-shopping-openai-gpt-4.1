import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSellerStatusHistory } from "../../../../structures/IAiCommerceSellerStatusHistory";
import { IPageIAiCommerceSellerStatusHistory } from "../../../../structures/IPageIAiCommerceSellerStatusHistory";

/**
 * Search/filter the seller status history records
 * (ai_commerce_seller_status_history).
 *
 * Search and filter the seller status change history across the marketplace.
 * Seller status history includes all onboarding, approvals, suspensions,
 * demotions, appeals, and escalations, with reasons and actor logs. Supports
 * filtering by seller profile, status type, date range, and reason, along with
 * pagination and sorting for large historical records.
 *
 * Available to administrators for platform oversight, and to sellers for their
 * own status history review, subject to role-based access control. All output
 * complies with regulatory requirements for evidence and audit documentation.
 * Sensitive details are only displayed according to the requesting partyâ€™s
 * access level.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination options for querying seller
 *   status histories.
 * @path /aiCommerce/admin/sellerStatusHistory
 * @accessor api.functional.aiCommerce.admin.sellerStatusHistory.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination options for querying seller status
     * histories.
     */
    body: IAiCommerceSellerStatusHistory.IRequest;
  };
  export type Body = IAiCommerceSellerStatusHistory.IRequest;
  export type Response = IPageIAiCommerceSellerStatusHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/sellerStatusHistory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/sellerStatusHistory";
  export const random = (): IPageIAiCommerceSellerStatusHistory =>
    typia.random<IPageIAiCommerceSellerStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single seller status history record by ID
 * (ai_commerce_seller_status_history).
 *
 * Read the complete details of one seller status history event using its unique
 * identifier. Returns actor, status change sequence, transition reason,
 * previous status, new status, timestamps, and cross-links to related entities
 * if applicable. Access is strictly regulated: only the seller concerned and
 * administrators may view the record.
 *
 * Historical records are presented exactly as stored, supporting full
 * traceability for dispute resolution, compliance reviews, or appeals. Attempts
 * to fetch a non-existent or unauthorized record will return an error or empty
 * result as appropriate by policy.
 *
 * @param props.connection
 * @param props.sellerStatusHistoryId Unique identifier for the seller status
 *   history record to retrieve
 * @path /aiCommerce/admin/sellerStatusHistory/:sellerStatusHistoryId
 * @accessor api.functional.aiCommerce.admin.sellerStatusHistory.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the seller status history record to retrieve */
    sellerStatusHistoryId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceSellerStatusHistory;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/sellerStatusHistory/:sellerStatusHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sellerStatusHistory/${encodeURIComponent(props.sellerStatusHistoryId ?? "null")}`;
  export const random = (): IAiCommerceSellerStatusHistory =>
    typia.random<IAiCommerceSellerStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerStatusHistoryId")(() =>
        typia.assert(props.sellerStatusHistoryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
