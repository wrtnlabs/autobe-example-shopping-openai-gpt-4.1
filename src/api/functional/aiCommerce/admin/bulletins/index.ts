import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceBulletin } from "../../../../structures/IAiCommerceBulletin";
import { IPageIAiCommerceBulletin } from "../../../../structures/IPageIAiCommerceBulletin";

/**
 * Create a new bulletin (ai_commerce_bulletins) with full required fields.
 *
 * Create a new platform bulletin or announcement. Only admins can use this
 * endpoint to post system notices, with all required business fields such as
 * title, full body content, publication status, and visibility scope.
 *
 * The request body follows the IAiCommerceBulletin.ICreate schema and is
 * validated for required fields including localized title, description/body,
 * and associated publication parameters. Security and audit logging are
 * performed automatically on create.
 *
 * On success, the response returns the created bulletin record. Related
 * endpoints include update and index.
 *
 * @param props.connection
 * @param props.body Bulletin creation data including title, body, status, and
 *   visibility controls.
 * @path /aiCommerce/admin/bulletins
 * @accessor api.functional.aiCommerce.admin.bulletins.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Bulletin creation data including title, body, status, and visibility
     * controls.
     */
    body: IAiCommerceBulletin.ICreate;
  };
  export type Body = IAiCommerceBulletin.ICreate;
  export type Response = IAiCommerceBulletin;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/bulletins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/bulletins";
  export const random = (): IAiCommerceBulletin =>
    typia.random<IAiCommerceBulletin>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Advanced, paginated search/filter for ai_commerce_bulletins with sorting and
 * filtering.
 *
 * Search, filter, and retrieve a paginated list of bulletins (system notices or
 * announcements), with advanced search capabilities including keyword
 * full-text, creation/update date range, status, and author filtering. Results
 * are sorted as requested and can be paginated for scalability.
 *
 * Only admins may access the full set of bulletins with all moderation status.
 * Buyers may see only published, public bulletins. Response contains summary
 * information for listing purposes.
 *
 * This endpoint corresponds to the ai_commerce_bulletins table, referencing
 * fields for filtering, sorting, and secure pagination. See documentation for
 * parameter examples.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for bulletin retrieval,
 *   including pagination, text search, and status filter.
 * @path /aiCommerce/admin/bulletins
 * @accessor api.functional.aiCommerce.admin.bulletins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter parameters for bulletin retrieval, including
     * pagination, text search, and status filter.
     */
    body: IAiCommerceBulletin.IRequest;
  };
  export type Body = IAiCommerceBulletin.IRequest;
  export type Response = IPageIAiCommerceBulletin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/bulletins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/bulletins";
  export const random = (): IPageIAiCommerceBulletin.ISummary =>
    typia.random<IPageIAiCommerceBulletin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing bulletin (ai_commerce_bulletins) by ID as an
 * administrator.
 *
 * Update an existing bulletin's details, including title, content, visibility,
 * and publication status. This endpoint is for administrator use only; regular
 * users may not update bulletins.
 *
 * The bulletinId parameter identifies the record to change, and the request
 * body includes fields to be updated. Changes are logged for compliance, and
 * the endpoint references the ai_commerce_bulletins table.
 *
 * On success, returns the new state of the updated bulletin. Related endpoints
 * include get, create, and delete.
 *
 * @param props.connection
 * @param props.bulletinId Unique identifier of the bulletin to update.
 * @param props.body Information to update on the specified bulletin, such as
 *   title, body, visibility, or status changes.
 * @path /aiCommerce/admin/bulletins/:bulletinId
 * @accessor api.functional.aiCommerce.admin.bulletins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the bulletin to update. */
    bulletinId: string & tags.Format<"uuid">;

    /**
     * Information to update on the specified bulletin, such as title, body,
     * visibility, or status changes.
     */
    body: IAiCommerceBulletin.IUpdate;
  };
  export type Body = IAiCommerceBulletin.IUpdate;
  export type Response = IAiCommerceBulletin;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/bulletins/:bulletinId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/bulletins/${encodeURIComponent(props.bulletinId ?? "null")}`;
  export const random = (): IAiCommerceBulletin =>
    typia.random<IAiCommerceBulletin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bulletinId")(() => typia.assert(props.bulletinId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a bulletin by ID (soft delete in ai_commerce_bulletins for compliance).
 *
 * Erase the specified bulletin (announcement/notice) identified by bulletinId.
 * For compliance with the ai_commerce_bulletins schema, deletion is implemented
 * as a soft delete, marking the bulletin as deleted without physical removal to
 * retain for audit/evidence purposes.
 *
 * Only administrators are authorized to erase bulletins. The operation records
 * audit trails and timestamps in the deleted_at field, maintaining legal and
 * business traceability. Related endpoints include update and at (get by ID).
 *
 * @param props.connection
 * @param props.bulletinId The unique identifier of the bulletin to erase.
 * @path /aiCommerce/admin/bulletins/:bulletinId
 * @accessor api.functional.aiCommerce.admin.bulletins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the bulletin to erase. */
    bulletinId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/bulletins/:bulletinId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/bulletins/${encodeURIComponent(props.bulletinId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bulletinId")(() => typia.assert(props.bulletinId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
