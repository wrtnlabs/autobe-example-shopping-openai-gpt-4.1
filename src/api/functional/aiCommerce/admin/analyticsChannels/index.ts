import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceAnalyticsChannels } from "../../../../structures/IAiCommerceAnalyticsChannels";
import { IPageIAiCommerceAnalyticsChannels } from "../../../../structures/IPageIAiCommerceAnalyticsChannels";

/**
 * Search and list analytics channel summaries (ai_commerce_analytics_channels).
 *
 * Search and retrieve analytics channel summaries, supporting advanced filter,
 * pagination, and sorting options. Only admin role can access or query detailed
 * analytics, which cover channel KPIs such as total orders, sales amount,
 * number of buyers, and stat date. The results are based on the
 * ai_commerce_analytics_channels model and can be used for business
 * intelligence dashboards and compliance reporting.
 *
 * All searches are logged for audit. Errors are raised if search parameters are
 * missing or malformed.
 *
 * @param props.connection
 * @param props.body Filter and paging criteria for analytics channels.
 * @path /aiCommerce/admin/analyticsChannels
 * @accessor api.functional.aiCommerce.admin.analyticsChannels.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and paging criteria for analytics channels. */
    body: IAiCommerceAnalyticsChannels.IRequest;
  };
  export type Body = IAiCommerceAnalyticsChannels.IRequest;
  export type Response = IPageIAiCommerceAnalyticsChannels;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/analyticsChannels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/analyticsChannels";
  export const random = (): IPageIAiCommerceAnalyticsChannels =>
    typia.random<IPageIAiCommerceAnalyticsChannels>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get analytics KPI summary for a specific channel
 * (ai_commerce_analytics_channels).
 *
 * Get analytics summary and KPI details for a specific channel, by its unique
 * identifier (channelAnalyticsId). The result includes order statistics, sales,
 * buyers, and analytic timestamps, as persisted in the
 * ai_commerce_analytics_channels model. Only admins may view this data, and the
 * channelAnalyticsId must be valid. Returned data is used for business
 * monitoring and compliance requirements.
 *
 * Errors are returned if the ID is invalid or does not exist.
 *
 * @param props.connection
 * @param props.channelAnalyticsId Primary key identifier for analyticsChannels
 *   record to retrieve.
 * @path /aiCommerce/admin/analyticsChannels/:channelAnalyticsId
 * @accessor api.functional.aiCommerce.admin.analyticsChannels.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Primary key identifier for analyticsChannels record to retrieve. */
    channelAnalyticsId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceAnalyticsChannels;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/analyticsChannels/:channelAnalyticsId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/analyticsChannels/${encodeURIComponent(props.channelAnalyticsId ?? "null")}`;
  export const random = (): IAiCommerceAnalyticsChannels =>
    typia.random<IAiCommerceAnalyticsChannels>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelAnalyticsId")(() =>
        typia.assert(props.channelAnalyticsId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
