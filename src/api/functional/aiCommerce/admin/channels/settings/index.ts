import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceChannelSetting } from "../../../../../structures/IAiCommerceChannelSetting";
import { IPageIAiCommerceChannelSetting } from "../../../../../structures/IPageIAiCommerceChannelSetting";

/**
 * Create a new configuration setting for a channel (admin only).
 *
 * Allows platform administrators to add a new setting key/value for a channel,
 * supporting modular configuration. Required fields include the parent channel
 * ID, configuration key, and value (string or serialized). Uniqueness is
 * enforced: the same key cannot be set twice for a given channel. Only admins
 * may create channel settings, complying with system security and audit
 * standards.
 *
 * The endpoint returns the fully persisted setting record on success, with all
 * relevant metadata. Attempts to insert duplicate keys or invalid data are
 * rejected with clear messages.
 *
 * Common use cases: toggling experimental features, configuring external
 * endpoints, adjusting business logic templates. All changes are audit-logged
 * in the platform for compliance and rollback.
 *
 * Upon creation, the new setting is immediately available for subsequent reads
 * or business rule evaluation.
 *
 * @param props.connection
 * @param props.channelId Target channel's unique identifier
 * @param props.body Key/value pair and option metadata for the new channel
 *   setting.
 * @path /aiCommerce/admin/channels/:channelId/settings
 * @accessor api.functional.aiCommerce.admin.channels.settings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target channel's unique identifier */
    channelId: string & tags.Format<"uuid">;

    /** Key/value pair and option metadata for the new channel setting. */
    body: IAiCommerceChannelSetting.ICreate;
  };
  export type Body = IAiCommerceChannelSetting.ICreate;
  export type Response = IAiCommerceChannelSetting;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/channels/:channelId/settings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/settings`;
  export const random = (): IAiCommerceChannelSetting =>
    typia.random<IAiCommerceChannelSetting>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve channel settings for a specified channel (admin only).
 *
 * Enables secure retrieval of all settings attached to a specific aiCommerce
 * channel, identified by channelId. Supports pagination and advanced filtering
 * by key or value—for example, to find all theme configurations or feature
 * toggles for a channel. Each setting is returned with full schema alignment to
 * ai_commerce_channel_settings, supporting business rule enforcement.
 *
 * Sensitive configuration data is protected—this endpoint returns only settings
 * for the specified channel, and only admins may access these details. Audit
 * logs track all accesses to support compliance and operational analytics.
 *
 * This operation is fundamental for administrators who need to troubleshoot,
 * audit, or rapidly modify channel settings as part of ongoing platform
 * governance. Errors are returned if the specified channel does not exist or
 * the admin lacks permissions.
 *
 * @param props.connection
 * @param props.channelId Target sales channel UUID for which to list settings
 * @param props.body Filter and pagination options for channel settings
 *   discovery (by key, value, etc).
 * @path /aiCommerce/admin/channels/:channelId/settings
 * @accessor api.functional.aiCommerce.admin.channels.settings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Target sales channel UUID for which to list settings */
    channelId: string & tags.Format<"uuid">;

    /**
     * Filter and pagination options for channel settings discovery (by key,
     * value, etc).
     */
    body: IAiCommerceChannelSetting.IRequest;
  };
  export type Body = IAiCommerceChannelSetting.IRequest;
  export type Response = IPageIAiCommerceChannelSetting;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/channels/:channelId/settings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/settings`;
  export const random = (): IPageIAiCommerceChannelSetting =>
    typia.random<IPageIAiCommerceChannelSetting>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific channel setting (admin only).
 *
 * Given both a channelId and a settingId, retrieve all details for a single
 * configuration setting attached to an aiCommerce sales channel. The response
 * matches the ai_commerce_channel_settings schema and is restricted to admin
 * usage for security and compliance. The data includes the configuration key
 * and value, timestamps, and related channel linkage.
 *
 * This endpoint is critical when troubleshooting complex deployments, enforcing
 * business compliance, or tracking precise configuration changes across
 * environments. Invalid or missing IDs result in a not-found response, and all
 * accesses are tracked in system logs.
 *
 * Returns only channel-specific settings, ensuring admins cannot view unrelated
 * configuration data from other channels.
 *
 * @param props.connection
 * @param props.channelId Parent aiCommerce channel's unique identifier (UUID)
 * @param props.settingId Unique identifier of the channel setting (UUID)
 * @path /aiCommerce/admin/channels/:channelId/settings/:settingId
 * @accessor api.functional.aiCommerce.admin.channels.settings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Parent aiCommerce channel's unique identifier (UUID) */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier of the channel setting (UUID) */
    settingId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceChannelSetting;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/channels/:channelId/settings/:settingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/settings/${encodeURIComponent(props.settingId ?? "null")}`;
  export const random = (): IAiCommerceChannelSetting =>
    typia.random<IAiCommerceChannelSetting>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("settingId")(() => typia.assert(props.settingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing setting for a specific sales channel
 * (ai_commerce_channel_settings).
 *
 * Update a configuration setting within a sales channel by its unique setting
 * ID, modifying the 'key' or 'value' or both, as stored in the
 * ai_commerce_channel_settings table.
 *
 * Administrators can leverage this endpoint to apply necessary changes to
 * enable or disable channel-specific functionalities, update feature flags, or
 * adjust advanced business policies. Permissions must be enforced to allow only
 * privileged admin users to execute this update operation.
 *
 * Relationship to the channel is validated by the foreign key constraint on
 * ai_commerce_channel_id. All modifications are audit-logged for compliance and
 * traceability, and any changes to unique keys or existing keys must respect
 * uniqueness constraints in the schema.
 *
 * @param props.connection
 * @param props.channelId Unique identifier of the target channel
 * @param props.settingId Unique identifier for the channel setting to update
 * @param props.body Updated values for the channel setting entity
 * @path /aiCommerce/admin/channels/:channelId/settings/:settingId
 * @accessor api.functional.aiCommerce.admin.channels.settings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target channel */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier for the channel setting to update */
    settingId: string & tags.Format<"uuid">;

    /** Updated values for the channel setting entity */
    body: IAiCommerceChannelSetting.IUpdate;
  };
  export type Body = IAiCommerceChannelSetting.IUpdate;
  export type Response = IAiCommerceChannelSetting;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/channels/:channelId/settings/:settingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/settings/${encodeURIComponent(props.settingId ?? "null")}`;
  export const random = (): IAiCommerceChannelSetting =>
    typia.random<IAiCommerceChannelSetting>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("settingId")(() => typia.assert(props.settingId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (hard delete) a channel setting from a given sales channel
 * (ai_commerce_channel_settings).
 *
 * Administrators use this API to erase a specific configuration setting within
 * a given channel. Given the unique setting ID and its parent channel ID, the
 * operation performs a hard delete—removing the record from the
 * ai_commerce_channel_settings table. All deletions are subject to business
 * validation, including preventing deletion of settings critical for channel
 * operation, and are logged for audit purposes.
 *
 * This operation is reserved strictly for admin-level users due to potential
 * impact on channel configuration and must adhere to referential integrity
 * rules. Any errors or integrity constraints violations (such as deleting a
 * non-existent or critical setting) are returned as descriptive error
 * responses.
 *
 * @param props.connection
 * @param props.channelId Unique identifier for the channel containing the
 *   setting
 * @param props.settingId Unique identifier for the channel setting to be
 *   deleted
 * @path /aiCommerce/admin/channels/:channelId/settings/:settingId
 * @accessor api.functional.aiCommerce.admin.channels.settings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the channel containing the setting */
    channelId: string & tags.Format<"uuid">;

    /** Unique identifier for the channel setting to be deleted */
    settingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/channels/:channelId/settings/:settingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/channels/${encodeURIComponent(props.channelId ?? "null")}/settings/${encodeURIComponent(props.settingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("channelId")(() => typia.assert(props.channelId));
      assert.param("settingId")(() => typia.assert(props.settingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
