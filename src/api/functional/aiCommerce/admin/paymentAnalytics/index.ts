import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommercePaymentAnalytics } from "../../../../structures/IAiCommercePaymentAnalytics";
import { IPageIAiCommercePaymentAnalytics } from "../../../../structures/IPageIAiCommercePaymentAnalytics";

/**
 * Retrieve paginated summary analytics of payment/coupon/mileage transactional
 * activity from ai_commerce_payment_analytics.
 *
 * This endpoint delivers summary-level business analytics on payment
 * transactions, coupon use, mileage expiry/redemption, deposit usage, and
 * refund metrics over user-defined time windows (period_start/period_end),
 * filtered by channel, payment method, or gateway. Results support business
 * dashboards, financial analytics, and regulatory compliance reporting, and are
 * only accessible by authorized admins or finance roles.
 *
 * The ai_commerce_payment_analytics table is strictly read-only, populated via
 * scheduled ETL jobs or platform events. Outputs are suitable for report
 * generation, management KPIs, and cross-channel comparison. Extensive
 * pagination and filtering ensure scalable business intelligence use.
 *
 * @param props.connection
 * @param props.body Criteria and time range parameters for finding and
 *   filtering payment analytics summary records.
 * @path /aiCommerce/admin/paymentAnalytics
 * @accessor api.functional.aiCommerce.admin.paymentAnalytics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Criteria and time range parameters for finding and filtering payment
     * analytics summary records.
     */
    body: IAiCommercePaymentAnalytics.IRequest;
  };
  export type Body = IAiCommercePaymentAnalytics.IRequest;
  export type Response = IPageIAiCommercePaymentAnalytics;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/paymentAnalytics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/paymentAnalytics";
  export const random = (): IPageIAiCommercePaymentAnalytics =>
    typia.random<IPageIAiCommercePaymentAnalytics>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific payment analytics record by ID from
 * ai_commerce_payment_analytics table.
 *
 * Retrieve full details of a payment analytics record by its unique identifier.
 * This endpoint is intended for use by administrators to access aggregated or
 * denormalized analytics about payments for a specific period, channel, payment
 * method, and gateway.
 *
 * Only administrators can access this endpoint, and the response contains
 * sensitive business information about transaction volume, revenues, refunds,
 * coupon/redemption rates, and system usage. The request parameter is the
 * unique UUID of the payment analytics record.
 *
 * This API references the ai_commerce_payment_analytics table and is restricted
 * to admin-level roles for compliance and confidentiality. If the record does
 * not exist, an error is returned. Related endpoints include list retrieval and
 * analytics dashboards.
 *
 * @param props.connection
 * @param props.paymentAnalyticsId Unique identifier for the payment analytics
 *   record to retrieve.
 * @path /aiCommerce/admin/paymentAnalytics/:paymentAnalyticsId
 * @accessor api.functional.aiCommerce.admin.paymentAnalytics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the payment analytics record to retrieve. */
    paymentAnalyticsId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommercePaymentAnalytics;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/paymentAnalytics/:paymentAnalyticsId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/paymentAnalytics/${encodeURIComponent(props.paymentAnalyticsId ?? "null")}`;
  export const random = (): IAiCommercePaymentAnalytics =>
    typia.random<IAiCommercePaymentAnalytics>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("paymentAnalyticsId")(() =>
        typia.assert(props.paymentAnalyticsId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
