import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceCouponIssue } from "../../../../structures/IAiCommerceCouponIssue";
import { IPageIAiCommerceCouponIssue } from "../../../../structures/IPageIAiCommerceCouponIssue";

/**
 * Issue a new coupon to a user (ai_commerce_coupon_issues table) for admin or
 * seller campaigns.
 *
 * This operation enables platform administrators, sellers (for their own
 * coupons), or the automated incentive engine to grant a coupon to a specific
 * user by creating a new record in the ai_commerce_coupon_issues table.
 *
 * The request enforces business rules such as coupon validity period, max
 * usage/quota, restrictions on overlapping coupon campaigns, and user
 * eligibility. Only coupons presently active and not expired may be issued. The
 * operation ensures that a single coupon cannot be issued multiple times to the
 * same user beyond quota constraints.
 *
 * Error scenarios include invalid coupon codes, user not found or not eligible,
 * quota/issuance limit exceeded, expired coupons, or violation of business
 * restrictions. All successful and failed issuance attempts are audit-logged
 * for compliance and analytics.
 *
 * Related operations include coupon usage/redeem (couponUses), coupon issue
 * update (e.g., status adjustment), and searching existing issues for a given
 * user or campaign. All coupon issue data is ultimately linked to coupon usage
 * for tracking and incentive analytics.
 *
 * User role permissions restrict coupon issuance to admins for all coupons and
 * sellers for coupons they own, while public users cannot invoke this operation
 * directly. System-dispatched automated issuance must comply with full business
 * validation rules.
 *
 * @param props.connection
 * @param props.body Details of the coupon issuance to a user account, including
 *   coupon, recipient, issuance status, expiry, and campaign info.
 * @path /aiCommerce/admin/couponIssues
 * @accessor api.functional.aiCommerce.admin.couponIssues.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details of the coupon issuance to a user account, including coupon,
     * recipient, issuance status, expiry, and campaign info.
     */
    body: IAiCommerceCouponIssue.ICreate;
  };
  export type Body = IAiCommerceCouponIssue.ICreate;
  export type Response = IAiCommerceCouponIssue;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/couponIssues",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/couponIssues";
  export const random = (): IAiCommerceCouponIssue =>
    typia.random<IAiCommerceCouponIssue>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list coupon issues to users (admin only) from
 * ai_commerce_coupon_issues.
 *
 * Search and retrieve coupon issues (user-assigned coupons), supporting
 * advanced filtering and pagination for analytics and compliance reviews. The
 * operation allows admins to see which users have been issued specific coupons,
 * their usage, expiration, and redemption status.
 *
 * Coupon issues represent the individual assignment of platform or seller
 * coupons to buyers or accounts, and are linked to campaign details and
 * business events. Supports searching by coupon attributes, user/account,
 * status (issued, redeemed, expired, revoked), and by issuance or usage
 * period.
 *
 * Response is paginated and returns summary records only. Only admin users may
 * call this operation to protect sensitive financial and analytics records.
 *
 * @param props.connection
 * @param props.body Criteria for searching coupon issue records including
 *   status, period, and user/coupon relation
 * @path /aiCommerce/admin/couponIssues
 * @accessor api.functional.aiCommerce.admin.couponIssues.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Criteria for searching coupon issue records including status, period,
     * and user/coupon relation
     */
    body: IAiCommerceCouponIssue.IRequest;
  };
  export type Body = IAiCommerceCouponIssue.IRequest;
  export type Response = IPageIAiCommerceCouponIssue.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/couponIssues",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/couponIssues";
  export const random = (): IPageIAiCommerceCouponIssue.ISummary =>
    typia.random<IPageIAiCommerceCouponIssue.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full detail for a coupon issue (admin only) from
 * ai_commerce_coupon_issues.
 *
 * Returns a specific coupon issue record (user-assigned coupon) from the
 * 'ai_commerce_coupon_issues' table, found by couponIssueId. Information
 * includes coupon entity reference, user/account, issuance/expiry dates,
 * redemption status, and relevant campaign attribution or batch info.
 *
 * This endpoint is vital for support, compliance, and business investigation
 * scenarios where an individual coupon's journey through issuance and usage
 * must be audited and traced. Only admin users may access per-issue detail, as
 * assignment and redemption pathways are sensitive.
 *
 * Handles not found, permission, and record status errors gracefully for robust
 * operational integration.
 *
 * @param props.connection
 * @param props.couponIssueId The unique identifier of the coupon issue to
 *   retrieve
 * @path /aiCommerce/admin/couponIssues/:couponIssueId
 * @accessor api.functional.aiCommerce.admin.couponIssues.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the coupon issue to retrieve */
    couponIssueId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceCouponIssue;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/couponIssues/:couponIssueId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/couponIssues/${encodeURIComponent(props.couponIssueId ?? "null")}`;
  export const random = (): IAiCommerceCouponIssue =>
    typia.random<IAiCommerceCouponIssue>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponIssueId")(() => typia.assert(props.couponIssueId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an issued coupon's status or expiry by couponIssueId
 * (ai_commerce_coupon_issues table).
 *
 * The operation allows an authorized administrator or the owning seller to
 * update fields of a coupon issue, identified by its couponIssueId. Typical use
 * cases include manual revocation of unredeemed coupons, expiry extension due
 * to campaign adjustments, or correction of campaign metadata.
 *
 * Update actions are governed by business rules: only coupons in specific
 * states (e.g., issued, not yet redeemed or expired) may be updated. Attempting
 * to update redeemed, revoked, or expired coupon issues is rejected with a
 * validation error, and all update attempts are recorded in the audit log for
 * compliance and evidence.
 *
 * The operation carefully validates date and status transitions to avoid
 * retroactive benefit extension or unauthorized coupon reactivation. Related
 * APIs include coupon issuance, coupon usage, and querying coupon status for
 * given users.
 *
 * @param props.connection
 * @param props.couponIssueId The unique identifier of the coupon issue to
 *   update.
 * @param props.body Fields to update for the issued coupon, such as status,
 *   expiry, or batch association.
 * @path /aiCommerce/admin/couponIssues/:couponIssueId
 * @accessor api.functional.aiCommerce.admin.couponIssues.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the coupon issue to update. */
    couponIssueId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the issued coupon, such as status, expiry, or
     * batch association.
     */
    body: IAiCommerceCouponIssue.IUpdate;
  };
  export type Body = IAiCommerceCouponIssue.IUpdate;
  export type Response = IAiCommerceCouponIssue;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/couponIssues/:couponIssueId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/couponIssues/${encodeURIComponent(props.couponIssueId ?? "null")}`;
  export const random = (): IAiCommerceCouponIssue =>
    typia.random<IAiCommerceCouponIssue>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponIssueId")(() => typia.assert(props.couponIssueId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete an unredeemed, unexpired coupon issue by couponIssueId
 * (ai_commerce_coupon_issues).
 *
 * Authorized users (admin or the issuer seller) may delete a coupon issue. This
 * ensures compliance with privacy and audit policies while preserving
 * historical records elsewhere for regulatory review and analytics.
 *
 * Before performing deletion, the system checks that the coupon issue is unused
 * (not redeemed) and not already expired. Attempts to delete already used,
 * redeemed, or expired coupons are rejected to maintain auditability. Audit
 * trails of all deletion actions are maintained, including actor, timestamp,
 * and associated campaign/context metadata.
 *
 * End users cannot delete coupon issues directly; only privileged roles can
 * initiate revocation. Related API operations include issuing, updating, and
 * redeeming coupons, each of which enforces business rules for legal and audit
 * compliance.
 *
 * @param props.connection
 * @param props.couponIssueId The unique ID of the coupon issue to be deleted.
 * @path /aiCommerce/admin/couponIssues/:couponIssueId
 * @accessor api.functional.aiCommerce.admin.couponIssues.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique ID of the coupon issue to be deleted. */
    couponIssueId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/couponIssues/:couponIssueId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/couponIssues/${encodeURIComponent(props.couponIssueId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponIssueId")(() => typia.assert(props.couponIssueId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
