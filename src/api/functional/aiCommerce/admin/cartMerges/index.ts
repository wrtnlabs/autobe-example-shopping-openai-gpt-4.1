import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceCartMerge } from "../../../../structures/IAiCommerceCartMerge";
import { IPageIAiCommerceCartMerge } from "../../../../structures/IPageIAiCommerceCartMerge";

/**
 * Create a new cart merge record linking source and target carts by business
 * logic.
 *
 * Create a new cart merge entry by specifying the involved source cart, target
 * cart, merging actor (if known), and merge reason. The ai_commerce_cart_merges
 * table captures all individual merge events for persistent audit, analytics,
 * and session troubleshooting.
 *
 * Creation is typically initiated by background logic during user login, device
 * switch, or administrative actions requiring consolidation of cart contents.
 * The request body includes all necessary fields, with business logic enforcing
 * that merge events are valid and do not conflict with active cart sessions.
 * The resulting record is returned in full for confirmation and audit
 * registration.
 *
 * Errors during creation (such as invalid cart relationships or actor IDs) are
 * reported with actionable error codes. All operations are strictly logged for
 * compliance, and only users with sufficient administrative authority are
 * allowed to perform manual merges using this operation.
 *
 * @param props.connection
 * @param props.body Creation information specifying source/target cart IDs,
 *   actor (if any), reason, and relevant details for the cart merge event.
 * @path /aiCommerce/admin/cartMerges
 * @accessor api.functional.aiCommerce.admin.cartMerges.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Creation information specifying source/target cart IDs, actor (if
     * any), reason, and relevant details for the cart merge event.
     */
    body: IAiCommerceCartMerge.ICreate;
  };
  export type Body = IAiCommerceCartMerge.ICreate;
  export type Response = IAiCommerceCartMerge;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/cartMerges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/cartMerges";
  export const random = (): IAiCommerceCartMerge =>
    typia.random<IAiCommerceCartMerge>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and retrieve paginated cart merge records from
 * ai_commerce_cart_merges.
 *
 * Retrieve a comprehensive list of cart merges based on complex filtering
 * criteria such as merge type, actor, reason, and timestamp range. The
 * ai_commerce_cart_merges table provides a historical record of all cart merge
 * events, including guest-to-member, device switch, and administrative merges.
 *
 * This operation aids administrators and support roles in tracking user
 * sessions, detecting recovery flows, understanding anonymized user behavior,
 * or forensic investigation. The request body supports structured query
 * parameters including actor ID, date ranges, merge reasons, and ordering, and
 * supports standard pagination controls.
 *
 * Security controls ensure that only users with proper auditing or support
 * privileges can access cart merge histories with full context. Error handling
 * returns appropriate codes if filter parameters are invalid. Only records
 * matching the search criteria are returned, and access to PII data within
 * merge records is masked for compliance.
 *
 * @param props.connection
 * @param props.body Request parameters for searching and paginating cart merge
 *   records. Includes filters such as actor ID, reason, timestamp range, and
 *   sort options.
 * @path /aiCommerce/admin/cartMerges
 * @accessor api.functional.aiCommerce.admin.cartMerges.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request parameters for searching and paginating cart merge records.
     * Includes filters such as actor ID, reason, timestamp range, and sort
     * options.
     */
    body: IAiCommerceCartMerge.IRequest;
  };
  export type Body = IAiCommerceCartMerge.IRequest;
  export type Response = IPageIAiCommerceCartMerge.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/cartMerges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/cartMerges";
  export const random = (): IPageIAiCommerceCartMerge.ISummary =>
    typia.random<IPageIAiCommerceCartMerge.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific cart merge using cartMergeId.
 *
 * Fetch full details about a single cart merge event using its unique
 * cartMergeId. The ai_commerce_cart_merges table logs each cart merge for
 * audit, user support, or session recovery analysis. The returned data includes
 * the source and target cart IDs, actor, reason, and merge timestamp.
 *
 * This operation is essential for forensic troubleshooting, understanding merge
 * outcomes, or reconstructing user sessions in compliance or support incidents.
 * Strict authorization ensures only users with administrative or support rights
 * can access this level of detail. If the cart merge record does not exist, the
 * operation returns a clear not-found error.
 *
 * Personal data is masked as required by privacy policy, and all access
 * attempts are logged for compliance monitoring.
 *
 * @param props.connection
 * @param props.cartMergeId Unique identifier of the cart merge record to
 *   retrieve.
 * @path /aiCommerce/admin/cartMerges/:cartMergeId
 * @accessor api.functional.aiCommerce.admin.cartMerges.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the cart merge record to retrieve. */
    cartMergeId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceCartMerge;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/cartMerges/:cartMergeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/cartMerges/${encodeURIComponent(props.cartMergeId ?? "null")}`;
  export const random = (): IAiCommerceCartMerge =>
    typia.random<IAiCommerceCartMerge>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartMergeId")(() => typia.assert(props.cartMergeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update limited annotatable fields of a cart merge record.
 *
 * Modify an existing cart merge record by cartMergeId, allowing updates to
 * annotatable or business-related fields that do not compromise historical
 * integrity. Cart merge records are intended to be immutable for audit core
 * fields such as actors, carts, and merge reason; only supplemental information
 * (for example, investigation result, internal notes, or tagging) is allowed to
 * be updated.
 *
 * The API validates that only updatable fields are included in the request, and
 * all changes are logged with before/after snapshots. This operation supports
 * internal compliance, data curation, or administrative error correction
 * scenarios. Mutation attempts against immutable core merge fields are rejected
 * with explicit errors, maintaining audit reliability and compliance.
 *
 * Access is limited to administrators or authorized support users, and all
 * updates are included in the audit log trail for forensics and regulatory
 * purposes.
 *
 * @param props.connection
 * @param props.cartMergeId Unique identifier of the cart merge record to
 *   update.
 * @param props.body Updatable/annotatable fields for the given cart merge
 *   record (e.g., business notes, investigation flags).
 * @path /aiCommerce/admin/cartMerges/:cartMergeId
 * @accessor api.functional.aiCommerce.admin.cartMerges.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the cart merge record to update. */
    cartMergeId: string & tags.Format<"uuid">;

    /**
     * Updatable/annotatable fields for the given cart merge record (e.g.,
     * business notes, investigation flags).
     */
    body: IAiCommerceCartMerge.IUpdate;
  };
  export type Body = IAiCommerceCartMerge.IUpdate;
  export type Response = IAiCommerceCartMerge;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/cartMerges/:cartMergeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/cartMerges/${encodeURIComponent(props.cartMergeId ?? "null")}`;
  export const random = (): IAiCommerceCartMerge =>
    typia.random<IAiCommerceCartMerge>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartMergeId")(() => typia.assert(props.cartMergeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently erase a cart merge record (admin compliance only).
 *
 * Permanently remove an existing cart merge record using cartMergeId. The
 * ai_commerce_cart_merges table stores historical references for all cart merge
 * events; as such, deletion is generally restricted for only data
 * rectification, error correction, or regulatory obligations.
 *
 * All erase operations are strictly permissioned, require administrative
 * privileges, and are subject to compliance pre-conditions (such as evidentiary
 * record retention and justification). An audit log entry is generated for
 * every deletion. Core business and compliance policies discourage or prohibit
 * deletions unless explicitly authorized. No recoverable soft-delete is
 * provided; the operation irreversibly removes the record on success, after
 * verifying all required preconditions.
 *
 * @param props.connection
 * @param props.cartMergeId Unique identifier of the cart merge record to
 *   permanently erase.
 * @path /aiCommerce/admin/cartMerges/:cartMergeId
 * @accessor api.functional.aiCommerce.admin.cartMerges.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the cart merge record to permanently erase. */
    cartMergeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/cartMerges/:cartMergeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/cartMerges/${encodeURIComponent(props.cartMergeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartMergeId")(() => typia.assert(props.cartMergeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
