import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceTag } from "../../../../structures/IAiCommerceTag";
import { IPageIAiCommerceTag } from "../../../../structures/IPageIAiCommerceTag";
export * as moderation from "./moderation/index";

/**
 * Create a new tag, inserting into ai_commerce_tags as an admin.
 *
 * Create a new tag entry in the ai_commerce_tags table. Admins or authorized
 * moderators use this operation to define new searchable tags to be attached to
 * products, inquiries, analytics, or promoted in discovery modules. Tag
 * properties include name (unique, alphanumeric), status, description, and
 * other metadata fields. Successful creation returns the detailed tag object
 * that was inserted.
 *
 * The operation enforces tag uniqueness, appropriate business rules
 * (prohibitions, moderation), and audits create activity for compliance. If a
 * duplicate name is detected or creation parameters fail schema/business
 * validation, the endpoint returns a descriptive error, with all attempts
 * recorded for administrator review and system monitoring.
 *
 * @param props.connection
 * @param props.body Tag creation input as defined by ai_commerce_tags,
 *   including name, status, and metadata.
 * @path /aiCommerce/admin/tags
 * @accessor api.functional.aiCommerce.admin.tags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Tag creation input as defined by ai_commerce_tags, including name,
     * status, and metadata.
     */
    body: IAiCommerceTag.ICreate;
  };
  export type Body = IAiCommerceTag.ICreate;
  export type Response = IAiCommerceTag;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/tags";
  export const random = (): IAiCommerceTag => typia.random<IAiCommerceTag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list tags, with advanced filtering and pagination, from
 * ai_commerce_tags.
 *
 * Search and retrieve a list of tags used in product and discovery modules
 * within the commerce platform. Each tag can be filtered by name, status
 * (active, under_review, suspended, deleted), creation date, and other
 * attributes. This operation supports advanced filtering, search, sorting, and
 * pagination—essential for admin- or moderation-facing UIs with high data
 * volume.
 *
 * The ai_commerce_tags table provides critical tagging structure for products,
 * inquiries, and analytics, and is referenced throughout discovery and
 * recommendation engines. The response includes both tag summary and pagination
 * metadata for streamlined UI usage. This operation is strictly accessible by
 * admins or authorized moderators, supporting bulk curation, trend detection,
 * and maintenance of the tag taxonomy.
 *
 * Users lacking appropriate privilege must be denied access and notified
 * politely, and all search/filter parameters must be validated for type and
 * allowed values.
 *
 * @param props.connection
 * @param props.body Search/filter and pagination parameters for tag listing and
 *   moderation.
 * @path /aiCommerce/admin/tags
 * @accessor api.functional.aiCommerce.admin.tags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search/filter and pagination parameters for tag listing and
     * moderation.
     */
    body: IAiCommerceTag.IRequest;
  };
  export type Body = IAiCommerceTag.IRequest;
  export type Response = IPageIAiCommerceTag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/tags";
  export const random = (): IPageIAiCommerceTag.ISummary =>
    typia.random<IPageIAiCommerceTag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific tag by tagId from ai_commerce_tags.
 *
 * Get details of a specific tag by its unique tagId. The ai_commerce_tags model
 * defines all major properties of a tag, such as tag identity (name), status
 * (active, under_review, suspended, deleted), business description, creation
 * and update timestamps, and its use in product/discovery analytics. This
 * operation is exclusively accessible to admin or moderator accounts, who
 * require complete information on the tag for moderation, search analytics,
 * recommendations, or metadata management.
 *
 * The API ensures only users with high-privilege roles may retrieve full tag
 * information, and all lookups are logged to the audit trail. If tagId is
 * invalid or does not exist, the operation must fail gracefully, delivering a
 * consistent error response without revealing sensitive backend details.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the tag to retrieve.
 * @path /aiCommerce/admin/tags/:tagId
 * @accessor api.functional.aiCommerce.admin.tags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the tag to retrieve. */
    tagId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceTag;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IAiCommerceTag => typia.random<IAiCommerceTag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update all major properties of an existing tag by tagId (admin/moderator
 * only).
 *
 * Update an existing tag in ai_commerce_tags by tagId. This operation lets
 * admins fully overwrite properties for a tag—including name, status, and
 * description—effectively updating the tag for moderation, business taxonomy,
 * or analytics improvement purposes. Tag uniqueness by name, enum validation
 * for status, and business/format constraints are strictly enforced, and all
 * update activity is traceable via audit logs.
 *
 * The endpoint is restricted to high-privilege accounts and includes business
 * logic for resolving naming collisions or attempts to apply invalid
 * status/transition combinations. Errors in input, permissions, or tag
 * mutability must result in standardized, actionable error messages for
 * administrator awareness.
 *
 * @param props.connection
 * @param props.tagId The unique identifier of the tag to update.
 * @param props.body All fields to replace on tag, as defined in
 *   ai_commerce_tags.
 * @path /aiCommerce/admin/tags/:tagId
 * @accessor api.functional.aiCommerce.admin.tags.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the tag to update. */
    tagId: string & tags.Format<"uuid">;

    /** All fields to replace on tag, as defined in ai_commerce_tags. */
    body: IAiCommerceTag.IUpdate;
  };
  export type Body = IAiCommerceTag.IUpdate;
  export type Response = IAiCommerceTag;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/tags/:tagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IAiCommerceTag => typia.random<IAiCommerceTag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a tag record by tagId from ai_commerce_tags (hard delete).
 *
 * Permanently delete a tag by its tagId. The ai_commerce_tags schema does not
 * support a soft delete field, so this operation immediately and irrevocably
 * removes the record from the database for that tagId. Referential integrity
 * and dependency checks must be performed before deletion, and the operation is
 * restricted to admin-level users.
 *
 * All delete attempts are recorded in the audit trail for compliance and
 * recoverability within backup systems. Unauthorized or invalid delete attempts
 * must return clear, actionable errors, ensuring no accidental or malicious
 * deletion occurs.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the tag to delete.
 * @path /aiCommerce/admin/tags/:tagId
 * @accessor api.functional.aiCommerce.admin.tags.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the tag to delete. */
    tagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
