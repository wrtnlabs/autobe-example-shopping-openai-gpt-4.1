import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceTagModeration } from "../../../../../structures/IAiCommerceTagModeration";
import { IPageIAiCommerceTagModeration } from "../../../../../structures/IPageIAiCommerceTagModeration";

/**
 * Admin creates a new moderation/action record for a specific tag
 * (ai_commerce_tags).
 *
 * Create a new moderation action for a tag in the ai_commerce_tags table. This
 * endpoint is used by administrators to moderate tag usage and labeling. When a
 * tag is reported or requires review, the admin can perform actions such as
 * approve, reject, or suspend, all of which are recorded along with the admin
 * identity and reasoning.
 *
 * Permissions are strictly limited to admins; all actions are logged for audit.
 * Moderation links to business compliance, as improper tagging can affect
 * product visibility and legal discoverability. The endpoint is part of a
 * workflow where admins review tags flagged by the system, users, or through
 * random sampling.
 *
 * If the moderation is successful, a new moderation record is persisted with
 * timestamps and references to both the tag and the acting admin.
 *
 * Related operations are getting the tag for review or updating an existing
 * moderation decision.
 *
 * @param props.connection
 * @param props.tagId The unique identifier of the tag to be moderated.
 * @param props.body Details of the moderation to perform, including action,
 *   rationale, and moderator identity.
 * @path /aiCommerce/admin/tags/:tagId/moderation
 * @accessor api.functional.aiCommerce.admin.tags.moderation.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** The unique identifier of the tag to be moderated. */
    tagId: string & tags.Format<"uuid">;

    /**
     * Details of the moderation to perform, including action, rationale,
     * and moderator identity.
     */
    body: IAiCommerceTagModeration.ICreate;
  };
  export type Body = IAiCommerceTagModeration.ICreate;
  export type Response = IAiCommerceTagModeration;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/tags/:tagId/moderation",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/tags/${encodeURIComponent(props.tagId ?? "null")}/moderation`;
  export const random = (): IAiCommerceTagModeration =>
    typia.random<IAiCommerceTagModeration>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list moderation events for a tag by tagId, supporting filtering,
 * pagination, and evidence review.
 *
 * Search the moderation log for a specific tag by tagId. All moderation
 * activity—approvals, rejections, flags, suspensions—are recorded in
 * ai_commerce_tag_moderation with references to the tag, moderator, reason,
 * action, and timestamps. This operation supports filtering by action, time
 * window, moderator identity, or result, and is paginated to support large
 * moderation histories.
 *
 * Admins or moderators may use this endpoint to review the moderation
 * life-cycle of a tag, investigate disputes, and prepare compliance
 * documentation. Unauthorized users must not have access to this data, and all
 * accesses are recorded for trace/audit.
 *
 * @param props.connection
 * @param props.tagId The unique identifier of the tag whose moderation history
 *   to search.
 * @param props.body Filtering and pagination controls for tag moderation event
 *   log listing.
 * @path /aiCommerce/admin/tags/:tagId/moderation
 * @accessor api.functional.aiCommerce.admin.tags.moderation.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** The unique identifier of the tag whose moderation history to search. */
    tagId: string & tags.Format<"uuid">;

    /**
     * Filtering and pagination controls for tag moderation event log
     * listing.
     */
    body: IAiCommerceTagModeration.IRequest;
  };
  export type Body = IAiCommerceTagModeration.IRequest;
  export type Response = IPageIAiCommerceTagModeration;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/tags/:tagId/moderation",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/tags/${encodeURIComponent(props.tagId ?? "null")}/moderation`;
  export const random = (): IPageIAiCommerceTagModeration =>
    typia.random<IPageIAiCommerceTagModeration>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific tag moderation log entry by tagId and moderationId.
 *
 * Retrieve a specific moderation log entry for a tag, identified by tagId and
 * moderationId. The ai_commerce_tag_moderation schema captures every moderation
 * action and is indexed by tag and unique moderation identifiers. The response
 * includes the full moderation record—action type, outcome, moderator, reason,
 * evidence snapshot reference, and timestamps.
 *
 * Only admins may access this information for regulatory, evidence, or workflow
 * purposes. All attempts are logged for traceability, and errors for
 * invalid/faulty lookups or lack of privilege are handled with standard error
 * protocols and without exposing unnecessary details about internal business
 * logic.
 *
 * @param props.connection
 * @param props.tagId The tag whose moderation event is being retrieved.
 * @param props.moderationId Unique identifier of the moderation event for the
 *   tag.
 * @path /aiCommerce/admin/tags/:tagId/moderation/:moderationId
 * @accessor api.functional.aiCommerce.admin.tags.moderation.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The tag whose moderation event is being retrieved. */
    tagId: string & tags.Format<"uuid">;

    /** Unique identifier of the moderation event for the tag. */
    moderationId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceTagModeration;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/tags/:tagId/moderation/:moderationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/tags/${encodeURIComponent(props.tagId ?? "null")}/moderation/${encodeURIComponent(props.moderationId ?? "null")}`;
  export const random = (): IAiCommerceTagModeration =>
    typia.random<IAiCommerceTagModeration>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.param("moderationId")(() => typia.assert(props.moderationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin updates an existing moderation record for a tag
 * (ai_commerce_tag_moderation).
 *
 * Update an existing moderation entry for a specific tag in the
 * ai_commerce_tag_moderation table. This may be needed if additional evidence
 * is provided, an initial moderation decision is appealed, or for correction of
 * prior mistakes.
 *
 * Admins must provide the moderationId of the moderation entry and the updated
 * action, result, or notes. Every change is tracked for compliance, audit, and
 * traceability. Security is paramount, limited to admin roles only.
 *
 * Changes to moderation decisions can affect product search, visibility, and
 * platform compliance, and must be handled with care. Error handling includes
 * validation that the moderationId belongs to the tag and that only admins may
 * update.
 *
 * @param props.connection
 * @param props.tagId The unique ID of the tag for which moderation is to be
 *   updated.
 * @param props.moderationId The ID of the moderation record to be updated.
 * @param props.body Updated moderation action details (e.g., new result,
 *   rationale).
 * @path /aiCommerce/admin/tags/:tagId/moderation/:moderationId
 * @accessor api.functional.aiCommerce.admin.tags.moderation.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique ID of the tag for which moderation is to be updated. */
    tagId: string & tags.Format<"uuid">;

    /** The ID of the moderation record to be updated. */
    moderationId: string & tags.Format<"uuid">;

    /** Updated moderation action details (e.g., new result, rationale). */
    body: IAiCommerceTagModeration.IUpdate;
  };
  export type Body = IAiCommerceTagModeration.IUpdate;
  export type Response = IAiCommerceTagModeration;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/tags/:tagId/moderation/:moderationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/tags/${encodeURIComponent(props.tagId ?? "null")}/moderation/${encodeURIComponent(props.moderationId ?? "null")}`;
  export const random = (): IAiCommerceTagModeration =>
    typia.random<IAiCommerceTagModeration>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.param("moderationId")(() => typia.assert(props.moderationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin deletes a moderation record for a tag (ai_commerce_tag_moderation).
 *
 * Permanently remove an existing moderation decision related to a specific tag
 * from the ai_commerce_tag_moderation table. Admins can use this when a
 * moderation record must be erased for legal, privacy, or error correction
 * reasons.
 *
 * Security and compliance are essential, so only admins can execute this action
 * and all deletion attempts are logged. There are strict controls in normal
 * business operations to avoid unnecessary data loss. Typical use cases include
 * compliance with right-to-be-forgotten requests or after an audit reveals a
 * moderation entry was created in error.
 *
 * Error cases include invalid moderationId, attempts from non-admin users, or
 * trying to delete system-critical moderation records.
 *
 * @param props.connection
 * @param props.tagId The unique ID of the tag whose moderation record is to be
 *   deleted.
 * @param props.moderationId The unique ID of the moderation record to delete.
 * @path /aiCommerce/admin/tags/:tagId/moderation/:moderationId
 * @accessor api.functional.aiCommerce.admin.tags.moderation.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique ID of the tag whose moderation record is to be deleted. */
    tagId: string & tags.Format<"uuid">;

    /** The unique ID of the moderation record to delete. */
    moderationId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/tags/:tagId/moderation/:moderationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/tags/${encodeURIComponent(props.tagId ?? "null")}/moderation/${encodeURIComponent(props.moderationId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.param("moderationId")(() => typia.assert(props.moderationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
