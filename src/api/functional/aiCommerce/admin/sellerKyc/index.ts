import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSellerKyc } from "../../../../structures/IAiCommerceSellerKyc";
import { IPageIAiCommerceSellerKyc } from "../../../../structures/IPageIAiCommerceSellerKyc";

/**
 * Create a new seller KYC verification submission (onboarding, compliance).
 *
 * This API operation allows a seller or an authorized onboarding workflow to
 * create a new KYC submission by providing necessary KYC data in the request
 * body. The sent data includes details like document type, provided metadata,
 * and onboarding references, as required by the ai_commerce_seller_kyc schema.
 *
 * Upon submission, the record is stored with status field set to a
 * workflow-appropriate initial value (such as 'pending'). Further processing,
 * review, or approval will follow according to compliance workflow. All fields
 * and relationships from the schema must be supplied.
 *
 * This operation can be used by the onboarding automation system or authorized
 * sellers. Access control should prevent unauthorized KYC creation by limiting
 * to sellers in the onboarding stage or admins acting on behalf of applicants.
 *
 * @param props.connection
 * @param props.body KYC document and metadata as required for
 *   ai_commerce_seller_kyc creation.
 * @path /aiCommerce/admin/sellerKyc
 * @accessor api.functional.aiCommerce.admin.sellerKyc.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * KYC document and metadata as required for ai_commerce_seller_kyc
     * creation.
     */
    body: IAiCommerceSellerKyc.ICreate;
  };
  export type Body = IAiCommerceSellerKyc.ICreate;
  export type Response = IAiCommerceSellerKyc;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/sellerKyc",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/sellerKyc";
  export const random = (): IAiCommerceSellerKyc =>
    typia.random<IAiCommerceSellerKyc>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list ai_commerce_seller_kyc records (admin, compliance only).
 *
 * This API operation retrieves a paginated and filtered list of seller KYC
 * records from the ai_commerce_seller_kyc table for administrative review and
 * compliance operations. It allows administrators to apply complex filtering on
 * KYC status (such as verified, pending, rejected), document types, and
 * onboarding relationships, while supporting sort and pagination parameters for
 * scalable processing of large volumes of KYC submissions.
 *
 * Returned results provide the essential details for each KYC record including
 * status, document types, and associated onboarding application context. The
 * provider/service layer is expected to apply result filtering according to
 * authorization, ensuring that only users with the necessary roles (admin) can
 * access sensitive KYC documents and compliance evidence, in line with privacy
 * and security policy.
 *
 * Validation is applied to ensure request parameters are within acceptable
 * range and result size is constrained to prevent over-fetching. This operation
 * is critical for periodic compliance audits and legal investigations.
 *
 * @param props.connection
 * @param props.body Request parameters for filtering, searching, and paginating
 *   ai_commerce_seller_kyc records.
 * @path /aiCommerce/admin/sellerKyc
 * @accessor api.functional.aiCommerce.admin.sellerKyc.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request parameters for filtering, searching, and paginating
     * ai_commerce_seller_kyc records.
     */
    body: IAiCommerceSellerKyc.IRequest;
  };
  export type Body = IAiCommerceSellerKyc.IRequest;
  export type Response = IPageIAiCommerceSellerKyc;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/sellerKyc",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/sellerKyc";
  export const random = (): IPageIAiCommerceSellerKyc =>
    typia.random<IPageIAiCommerceSellerKyc>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full details of a seller KYC record by its ID.
 *
 * This operation retrieves the full detail of a single seller KYC record from
 * the ai_commerce_seller_kyc table based on the provided KYC ID. It is used
 * during compliance reviews, audits, or investigations where the administrator
 * or compliance officer must examine document metadata, reviewer notes,
 * resolved status, and supporting evidence as recorded in the KYC record.
 * Returns all available fields for the KYC submission for forensic and
 * compliance purposes.
 *
 * Access to this operation is strictly limited to authorized admin or
 * compliance personnel, as KYC records contain highly sensitive identity
 * documents and business information. Role-based access control and logging are
 * enforced by the service provider.
 *
 * Any attempts to retrieve a non-existent KYC ID or one not available to the
 * requester due to missing permissions must result in an error and audit
 * logging.
 *
 * @param props.connection
 * @param props.sellerKycId Unique identifier of the seller KYC record to
 *   retrieve
 * @path /aiCommerce/admin/sellerKyc/:sellerKycId
 * @accessor api.functional.aiCommerce.admin.sellerKyc.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the seller KYC record to retrieve */
    sellerKycId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceSellerKyc;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/sellerKyc/:sellerKycId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sellerKyc/${encodeURIComponent(props.sellerKycId ?? "null")}`;
  export const random = (): IAiCommerceSellerKyc =>
    typia.random<IAiCommerceSellerKyc>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerKycId")(() => typia.assert(props.sellerKycId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing seller KYC verification record for compliance review.
 *
 * This operation updates an existing seller KYC submission with new status
 * (such as 'verified', 'rejected', etc.), document metadata, or compliance
 * notes. Typically executed by a compliance admin, this endpoint ensures all
 * updates are audited and retain previous KYC state for legal evidence.
 *
 * The input must reference an existing seller KYC ID and provide updated
 * information as per business rules. Validation rules ensure status transitions
 * follow compliance policy and all updates are consistent with previous audit
 * trail.
 *
 * Only admin roles may update KYC records, as these represent sensitive
 * compliance evidence. All updates must be logged, and any unauthorized attempt
 * should return an error, preserving audit integrity.
 *
 * @param props.connection
 * @param props.sellerKycId Unique identifier of the seller KYC record to update
 * @param props.body Fields and values to update in the ai_commerce_seller_kyc
 *   submission.
 * @path /aiCommerce/admin/sellerKyc/:sellerKycId
 * @accessor api.functional.aiCommerce.admin.sellerKyc.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller KYC record to update */
    sellerKycId: string & tags.Format<"uuid">;

    /** Fields and values to update in the ai_commerce_seller_kyc submission. */
    body: IAiCommerceSellerKyc.IUpdate;
  };
  export type Body = IAiCommerceSellerKyc.IUpdate;
  export type Response = IAiCommerceSellerKyc;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/sellerKyc/:sellerKycId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/sellerKyc/${encodeURIComponent(props.sellerKycId ?? "null")}`;
  export const random = (): IAiCommerceSellerKyc =>
    typia.random<IAiCommerceSellerKyc>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerKycId")(() => typia.assert(props.sellerKycId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a seller KYC record for audit/audit-compliance.
 *
 * This operation marks a seller KYC record as deleted in the
 * ai_commerce_seller_kyc table by setting the deleted_at timestamp field. This
 * is used by admins when a KYC record is found to be a duplicate, incomplete,
 * or submitted in error, and preserves all evidence for legal and audit
 * purposes. The record is not physically deleted but excluded from most
 * business queries, ensuring privacy and compliance.
 *
 * Only admin-level users can perform this operation, as it represents a
 * sensitive compliance operation that must be carefully controlled. Attempts to
 * delete KYC records that are under investigation or legal hold must result in
 * validation errors; all actions are audited by the provider/service layer.
 *
 * @param props.connection
 * @param props.sellerKycId Unique identifier of the seller KYC record to soft
 *   delete
 * @path /aiCommerce/admin/sellerKyc/:sellerKycId
 * @accessor api.functional.aiCommerce.admin.sellerKyc.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the seller KYC record to soft delete */
    sellerKycId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/sellerKyc/:sellerKycId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sellerKyc/${encodeURIComponent(props.sellerKycId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerKycId")(() => typia.assert(props.sellerKycId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
