import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceStoreAnalytics } from "../../../../structures/IAiCommerceStoreAnalytics";
import { IPageIAiCommerceStoreAnalytics } from "../../../../structures/IPageIAiCommerceStoreAnalytics";

/**
 * Search and retrieve paginated store analytics (ai_commerce_store_analytics).
 *
 * Retrieve a filtered, paginated set of analytics records for stores,
 * supporting queries by store ID, time period (date_bucket), and core metrics
 * like sales volume, orders count, and conversion rates. This enables
 * comprehensive reporting and insight into store performance for both
 * administrative and seller-centric dashboards.
 *
 * Role enforcement ensures that sellers may only see analytics of their own
 * stores, while admins access all records. The API is designed for integration
 * into analytical dashboards, compliance auditing, and operational optimization
 * workflows. Requested filters and sorting are processed using database indexes
 * for optimal performance.
 *
 * Errors for invalid filters or unauthorized access trigger descriptive error
 * messages and full audit logging in line with compliance standards.
 *
 * @param props.connection
 * @param props.body Analytics filtering criteria, such as storeId, analytics
 *   period, metrics, and pagination.
 * @path /aiCommerce/admin/storeAnalytics
 * @accessor api.functional.aiCommerce.admin.storeAnalytics.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Analytics filtering criteria, such as storeId, analytics period,
     * metrics, and pagination.
     */
    body: IAiCommerceStoreAnalytics.IRequest;
  };
  export type Body = IAiCommerceStoreAnalytics.IRequest;
  export type Response = IPageIAiCommerceStoreAnalytics.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/storeAnalytics",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/storeAnalytics";
  export const random = (): IPageIAiCommerceStoreAnalytics.ISummary =>
    typia.random<IPageIAiCommerceStoreAnalytics.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed analytics record (ai_commerce_store_analytics) for a store.
 *
 * Retrieve full analytics information for a single store by its unique
 * analytics record ID. Returns all key performance indicators, sales volume,
 * visitor count, and any additional metrics stored for the selected date period
 * and store.
 *
 * Admin roles have unrestricted access while store owners are limited to their
 * own analytics. This API supports monitoring, finance audits, reporting, and
 * troubleshooting workflows, providing all available fields from the analytics
 * table. Access attempts are recorded for audit compliance.
 *
 * Errors for failed lookups or violations of access control policy trigger
 * clear error messages as per business and compliance documentation.
 *
 * @param props.connection
 * @param props.storeAnalyticsId Unique identifier of the analytics record
 *   (UUID).
 * @path /aiCommerce/admin/storeAnalytics/:storeAnalyticsId
 * @accessor api.functional.aiCommerce.admin.storeAnalytics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the analytics record (UUID). */
    storeAnalyticsId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceStoreAnalytics;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/storeAnalytics/:storeAnalyticsId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/storeAnalytics/${encodeURIComponent(props.storeAnalyticsId ?? "null")}`;
  export const random = (): IAiCommerceStoreAnalytics =>
    typia.random<IAiCommerceStoreAnalytics>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeAnalyticsId")(() =>
        typia.assert(props.storeAnalyticsId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
