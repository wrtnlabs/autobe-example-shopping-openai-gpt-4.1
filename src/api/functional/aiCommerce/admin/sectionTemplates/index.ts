import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSectionTemplate } from "../../../../structures/IAiCommerceSectionTemplate";
import { IPageIAiCommerceSectionTemplate } from "../../../../structures/IPageIAiCommerceSectionTemplate";

/**
 * Create a new section template in ai_commerce_section_templates.
 *
 * Enables admin users to define and register a new section template for use in
 * business merchandising, channel planning, or AI configuration. The
 * ai_commerce_section_templates Prisma model captures input fields like
 * template code, name, template_data (as serialized configuration), is_default
 * status, and workflow status. The API request body validates template code
 * uniqueness, field completeness, and accepted configuration schema. On
 * success, the created template is returned for further workflow steps or UI
 * display.
 *
 * Business rules prevent duplicate template codes and require all mandatory
 * fields. This API powers advanced merchandising automation and rapid section
 * instantiation. Errors include existing code, malformed template_data, or
 * unauthorized calls. Audit trails are enforced per Prisma schema comments and
 * compliance requirements.
 *
 * @param props.connection
 * @param props.body Fields required to define a new section template, such as
 *   code, name, configuration data, and status.
 * @path /aiCommerce/admin/sectionTemplates
 * @accessor api.functional.aiCommerce.admin.sectionTemplates.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Fields required to define a new section template, such as code, name,
     * configuration data, and status.
     */
    body: IAiCommerceSectionTemplate.ICreate;
  };
  export type Body = IAiCommerceSectionTemplate.ICreate;
  export type Response = IAiCommerceSectionTemplate;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/sectionTemplates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/sectionTemplates";
  export const random = (): IAiCommerceSectionTemplate =>
    typia.random<IAiCommerceSectionTemplate>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search section templates in ai_commerce_section_templates with
 * filtering and pagination.
 *
 * Retrieves a filtered and paginated list of section templates used for
 * defining merchandising layouts and logic in channels. The
 * ai_commerce_section_templates model enables admins and business users to
 * efficiently retrieve, analyze, and select templates for new sections. The
 * request body allows complex querying—filtering by name, is_default,
 * business_status, date range, etc.—and supports server-side paging, search
 * keyword, and sort fields.
 *
 * Templates may be prebuilt for rapid business rollout, and are vital in
 * AI-driven as well as manual merchandising. This API aligns with business
 * workflow, providing analytics and template insights for channel curation.
 * Results include core template metadata, status, and audit fields for each
 * template. Business logic enforces access restrictions for editing but allows
 * read access to most authenticated users or public endpoints.
 *
 * @param props.connection
 * @param props.body Filtering and pagination criteria for section template
 *   retrieval.
 * @path /aiCommerce/admin/sectionTemplates
 * @accessor api.functional.aiCommerce.admin.sectionTemplates.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination criteria for section template retrieval. */
    body: IAiCommerceSectionTemplate.IRequest;
  };
  export type Body = IAiCommerceSectionTemplate.IRequest;
  export type Response = IPageIAiCommerceSectionTemplate.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/sectionTemplates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/sectionTemplates";
  export const random = (): IPageIAiCommerceSectionTemplate.ISummary =>
    typia.random<IPageIAiCommerceSectionTemplate.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full details of a specific section template from
 * ai_commerce_section_templates.
 *
 * Fetch detailed information on a single section template used for channel
 * merchandising. Each section template is a modular, reusable definition,
 * supporting business logic for rapid channel setup and AI personalization. The
 * ai_commerce_section_templates schema defines required template fields,
 * including code, name, configuration data (serialized), is_default, status,
 * creation, and update timestamps.
 *
 * Access to this endpoint is generally allowed for admin users and supports
 * catalog planning, analytics, or prefill in UI forms. Error scenarios include
 * invalid templateId, lack of access permission, or deleted/retired templates.
 * The response returns complete template details as per Prisma schema
 * comments.
 *
 * @param props.connection
 * @param props.templateId Unique identifier of the section template to retrieve
 *   (UUID format).
 * @path /aiCommerce/admin/sectionTemplates/:templateId
 * @accessor api.functional.aiCommerce.admin.sectionTemplates.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the section template to retrieve (UUID format). */
    templateId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceSectionTemplate;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/sectionTemplates/:templateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sectionTemplates/${encodeURIComponent(props.templateId ?? "null")}`;
  export const random = (): IAiCommerceSectionTemplate =>
    typia.random<IAiCommerceSectionTemplate>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("templateId")(() => typia.assert(props.templateId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing section template in ai_commerce_section_templates.
 *
 * Modifies the configuration or metadata of an existing section template,
 * supporting business side template revision, versioning, and rapid iteration
 * on merchandising logic. This endpoint uses the ai_commerce_section_templates
 * Prisma model for full update capability, including the template code, name,
 * template_data blob, is_default state, status, and timestamps. The update API
 * ensures only authorized admins make changes and validates template code
 * uniqueness, configuration integrity, and field completeness.
 *
 * Operations are logged with before/after state for compliance and
 * traceability. On successful update, the latest template object is returned
 * for UI refresh or workflow continuation. Potential errors are missing
 * templateId, code conflicts, or invalid configuration data. Uses
 * IAiCommerceSectionTemplate.IUpdate schema for request body; admins only
 * permitted as actors.
 *
 * Related APIs include template list/retrieval and section instantiation using
 * this template.
 *
 * @param props.connection
 * @param props.templateId Identifier of the template to update (UUID format).
 * @param props.body Fields to update in the template, such as code, name,
 *   template_data, etc.
 * @path /aiCommerce/admin/sectionTemplates/:templateId
 * @accessor api.functional.aiCommerce.admin.sectionTemplates.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the template to update (UUID format). */
    templateId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the template, such as code, name, template_data,
     * etc.
     */
    body: IAiCommerceSectionTemplate.IUpdate;
  };
  export type Body = IAiCommerceSectionTemplate.IUpdate;
  export type Response = IAiCommerceSectionTemplate;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/sectionTemplates/:templateId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/sectionTemplates/${encodeURIComponent(props.templateId ?? "null")}`;
  export const random = (): IAiCommerceSectionTemplate =>
    typia.random<IAiCommerceSectionTemplate>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("templateId")(() => typia.assert(props.templateId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a section template (soft delete) by template ID from
 * ai_commerce_section_templates.
 *
 * Deletes a specific section template based on its unique templateId,
 * referencing the ai_commerce_section_templates table. This API performs a soft
 * logical deletion by updating the deleted_at field, in line with audit and
 * evidence requirements for legal compliance and rollback.
 *
 * Only administrator roles are permitted to perform this operation, ensuring
 * that only vetted users can remove section templates from the business
 * configuration. Audit trails of this deletion are automatically generated per
 * platform business rules, guaranteeing investigatory and compliance needs are
 * met.
 *
 * Attempting to delete a template that is still actively referenced by
 * sections, channels, or merchandising flows will result in a validation error,
 * and the operation will fail with appropriate messaging. Error handling
 * ensures that database consistency and referential integrity are always
 * maintained.
 *
 * This operation can be paired with the get (detail) operation to ensure the
 * template contents and usage can be inspected before deletion. It is also
 * related to the list/search operation for administrators managing many
 * templates.
 *
 * @param props.connection
 * @param props.templateId The unique identifier of the section template to be
 *   deleted.
 * @path /aiCommerce/admin/sectionTemplates/:templateId
 * @accessor api.functional.aiCommerce.admin.sectionTemplates.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the section template to be deleted. */
    templateId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/sectionTemplates/:templateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/sectionTemplates/${encodeURIComponent(props.templateId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("templateId")(() => typia.assert(props.templateId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
