import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceCoupon } from "../../../../structures/IAiCommerceCoupon";
import { IPageIAiCommerceCoupon } from "../../../../structures/IPageIAiCommerceCoupon";

/**
 * Create a new coupon entry in ai_commerce_coupons (admin only).
 *
 * Register a new coupon in the 'ai_commerce_coupons' table, fully defining its
 * campaign, business rules, and configuration. The creation request provides
 * type (amount, percent, shipping, etc.), usage limits, validity periods,
 * assigned issuer (admin or seller), code generation rules, and validation
 * logic.
 *
 * Only admin users are permitted to create coupons, as coupons affect financial
 * liability and cross-platform incentives. Errors arise if invalid details are
 * entered, such as date collisions, overlimit values, or duplicating codes.
 * Coupon creation events are fully audited for compliance and review.
 *
 * The new coupon will become available for issuance once validation passes and
 * business rules are confirmed. Response includes the created coupon entity in
 * full detail.
 *
 * @param props.connection
 * @param props.body Coupon creation business logic covering code, validity,
 *   limits, and rules
 * @path /aiCommerce/admin/coupons
 * @accessor api.functional.aiCommerce.admin.coupons.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Coupon creation business logic covering code, validity, limits, and
     * rules
     */
    body: IAiCommerceCoupon.ICreate;
  };
  export type Body = IAiCommerceCoupon.ICreate;
  export type Response = IAiCommerceCoupon;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/coupons";
  export const random = (): IAiCommerceCoupon =>
    typia.random<IAiCommerceCoupon>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list platform coupons with filtering and pagination (admin only)
 * from ai_commerce_coupons.
 *
 * Retrieve a paginated, searchable list of coupons from the platform's coupon
 * master table. This operation returns coupon metadata, issuance, validity
 * periods, usage limits, status, and other business properties, filtered and
 * sorted using powerful query capabilities.
 *
 * Admin users can search by fields such as type, status, validity period, or
 * partial code/name. Paging and sorting are supported, enabling large-scale
 * analytics and reporting for management and campaign performance reviews. This
 * operation operates on the ai_commerce_coupons table in the Prisma schema.
 *
 * Permissions are restricted to admin users, as coupon intelligence could
 * expose commercial strategy data. Attempts by unauthorized users receive
 * access denied errors; empty search results are handled gracefully.
 *
 * @param props.connection
 * @param props.body Search and filter criteria for querying coupon records
 * @path /aiCommerce/admin/coupons
 * @accessor api.functional.aiCommerce.admin.coupons.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and filter criteria for querying coupon records */
    body: IAiCommerceCoupon.IRequest;
  };
  export type Body = IAiCommerceCoupon.IRequest;
  export type Response = IPageIAiCommerceCoupon.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/coupons",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/coupons";
  export const random = (): IPageIAiCommerceCoupon.ISummary =>
    typia.random<IPageIAiCommerceCoupon.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a single coupon from ai_commerce_coupons
 * (admin only).
 *
 * Provides full detail for a coupon from the 'ai_commerce_coupons' table,
 * retrieved by couponId. Information returned includes code, issuance and
 * expiry, coupon type (amount/percent/shipping), usage limits, conditions,
 * campaign info, and the business logic fields used for validation and
 * auditing.
 *
 * Full coupon details are sensitive and valuable for evaluating promotion
 * campaign efficacy or compliance. Only admin users are authorized to access
 * single coupon details. Error handling includes not found, permission denied,
 * or deleted records by validating couponId accurately.
 *
 * Relies on the underlying coupon entity and all its data for further
 * downstream operations (such as update, usage audit, or campaign reporting).
 *
 * @param props.connection
 * @param props.couponId The unique identifier of the coupon to retrieve
 * @path /aiCommerce/admin/coupons/:couponId
 * @accessor api.functional.aiCommerce.admin.coupons.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the coupon to retrieve */
    couponId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceCoupon;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IAiCommerceCoupon =>
    typia.random<IAiCommerceCoupon>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing coupon entry in ai_commerce_coupons (admin only).
 *
 * Edit an existing coupon in the 'ai_commerce_coupons' table, referenced by
 * couponId. Permissible updates include changing campaign settings, business
 * rules, limits, effective periods, or revising the coupon status for
 * governance.
 *
 * Admin users can only update coupons that are not expired or deleted. All
 * update actions are logged for business records and compliance. Update process
 * performs full validation to ensure the coupon remains within platform and
 * legal limits.
 *
 * Permission checks and audit logging ensure only authorized staff can edit
 * coupons, and that rollback/history is available for compliance or
 * reconciliation.
 *
 * @param props.connection
 * @param props.couponId Unique identifier of the coupon to update
 * @param props.body Updated business and configuration data for the coupon
 * @path /aiCommerce/admin/coupons/:couponId
 * @accessor api.functional.aiCommerce.admin.coupons.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the coupon to update */
    couponId: string & tags.Format<"uuid">;

    /** Updated business and configuration data for the coupon */
    body: IAiCommerceCoupon.IUpdate;
  };
  export type Body = IAiCommerceCoupon.IUpdate;
  export type Response = IAiCommerceCoupon;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/coupons/:couponId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): IAiCommerceCoupon =>
    typia.random<IAiCommerceCoupon>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase a coupon record from ai_commerce_coupons (admin only, soft delete).
 *
 * Remove a coupon from active use by setting its soft delete field
 * ('deleted_at') in the 'ai_commerce_coupons' table, found via couponId. The
 * action is restricted to admin users, and the record remains available for
 * business auditing or compliance reviews.
 *
 * Coupons may be erased due to campaign closure, error in issuance, or legal
 * requirements. The soft delete maintains all references and evidence,
 * supporting full rollback or legal inquiry as required.
 *
 * Non-admin users will receive access denied errors. Record not found errors or
 * already-deleted coupons return appropriate error responses.
 *
 * @param props.connection
 * @param props.couponId The unique identifier of the coupon to erase
 * @path /aiCommerce/admin/coupons/:couponId
 * @accessor api.functional.aiCommerce.admin.coupons.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the coupon to erase */
    couponId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/coupons/:couponId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/coupons/${encodeURIComponent(props.couponId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("couponId")(() => typia.assert(props.couponId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
