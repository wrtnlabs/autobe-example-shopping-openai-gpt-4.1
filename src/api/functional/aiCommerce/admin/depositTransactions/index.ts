import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceDepositTransaction } from "../../../../structures/IAiCommerceDepositTransaction";
import { IPageIAiCommerceDepositTransaction } from "../../../../structures/IPageIAiCommerceDepositTransaction";

/**
 * Create a new deposit transaction (recharge, withdrawal, payment, refund) for
 * an account with proper validation and audit.
 *
 * This endpoint creates a new deposit transaction, such as a top-up (recharge),
 * withdrawal, payment, or refund, and adds the corresponding entry in the
 * ai_commerce_deposit_transactions table.
 *
 * Each creation is subject to business rule validation: only supported
 * transaction types are allowed, the affected deposit account must exist and be
 * active, balances are checked for withdrawals/payments, and excessive
 * operations are prevented for anti-fraud and abuse safeguard.
 *
 * Insertions generate an immutable, auditable event, with full details such as
 * type, account, amount, time, and counterparty reference. All actions are
 * logged and propagate updates to account balances atomically. Admins can
 * create transactions for any account; authenticated users can create
 * transactions for their linked account, subject to business logic.
 *
 * Expected error cases: insufficient balance, invalid account, unsupported
 * type, or business rule violation. Related APIs: transaction list/search,
 * account management, transaction audit.
 *
 * @param props.connection
 * @param props.body Deposit transaction creation data, including account, type,
 *   amount, and context.
 * @path /aiCommerce/admin/depositTransactions
 * @accessor api.functional.aiCommerce.admin.depositTransactions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Deposit transaction creation data, including account, type, amount,
     * and context.
     */
    body: IAiCommerceDepositTransaction.ICreate;
  };
  export type Body = IAiCommerceDepositTransaction.ICreate;
  export type Response = IAiCommerceDepositTransaction;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/admin/depositTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/depositTransactions";
  export const random = (): IAiCommerceDepositTransaction =>
    typia.random<IAiCommerceDepositTransaction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated, filtered list of deposit transactions using search
 * criteria (for account, type, date, etc).
 *
 * This operation searches for deposit transactions using advanced filtering
 * criteria and returns a paginated result set of transactions from
 * ai_commerce_deposit_transactions.
 *
 * Supported query parameters include account ID, transaction type (recharge,
 * withdraw, payment, refund), status, date ranges, and search keywords.
 * Pagination and sorting options are required for high-volume account
 * histories.
 *
 * Security: Buyers or account owners may view their own transaction history;
 * finance staff and admins have broader access. Role-based field masking and
 * permission checks are enforced.
 *
 * Full audit is available via the transaction's immutable records, with every
 * transaction tied to a specific account and event. Error handling is based on
 * invalid filters, type errors, or exceeding permitted result window sizes.
 *
 * @param props.connection
 * @param props.body Criteria for deposit transaction search (account, type,
 *   period, status, etc).
 * @path /aiCommerce/admin/depositTransactions
 * @accessor api.functional.aiCommerce.admin.depositTransactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Criteria for deposit transaction search (account, type, period,
     * status, etc).
     */
    body: IAiCommerceDepositTransaction.IRequest;
  };
  export type Body = IAiCommerceDepositTransaction.IRequest;
  export type Response = IPageIAiCommerceDepositTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/admin/depositTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/admin/depositTransactions";
  export const random = (): IPageIAiCommerceDepositTransaction =>
    typia.random<IPageIAiCommerceDepositTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for one deposit transaction (by UUID) from the
 * ai_commerce_deposit_transactions table.
 *
 * This API returns full details for one deposit transaction, uniquely
 * identified by its UUID primary key.
 *
 * The transaction is sourced from the ai_commerce_deposit_transactions table,
 * containing all business metadata, links to account, event type, time, and
 * status. Intended use cases include transaction detail presentation, evidence
 * for audits or disputes, and system financial reporting.
 *
 * Access is limited by role: the account owner may view their own data; admins
 * and finance roles may access any transaction. Security and privacy are
 * strictly enforced, with all lookups generating audit trail entries.
 *
 * If the record is not found or is soft-deleted, an error or not-found response
 * is returned. Related operations: transaction search, account retrieval,
 * transaction audit log query.
 *
 * @param props.connection
 * @param props.depositTransactionId UUID identifier for the deposit transaction
 *   to retrieve.
 * @path /aiCommerce/admin/depositTransactions/:depositTransactionId
 * @accessor api.functional.aiCommerce.admin.depositTransactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID identifier for the deposit transaction to retrieve. */
    depositTransactionId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceDepositTransaction;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/admin/depositTransactions/:depositTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/depositTransactions/${encodeURIComponent(props.depositTransactionId ?? "null")}`;
  export const random = (): IAiCommerceDepositTransaction =>
    typia.random<IAiCommerceDepositTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositTransactionId")(() =>
        typia.assert(props.depositTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update permitted fields of a deposit transaction (by UUID), strictly audited
 * and business-rule constrained.
 *
 * This endpoint allows updating certain editable fields on a deposit
 * transaction, such as status, references, or auxiliary metadata, as business
 * logic permits.
 *
 * Available only to finance administrators or account owners in cases where
 * business rules and data integrity allow updates after creation (e.g., status
 * correction or reference updates in case of error). Attempts to change
 * immutable fields (transaction type, amount, account linkage) are always
 * rejected by the operation and will trigger error responses and audit logs.
 *
 * All operations are fully audited for each before/after snapshot for
 * compliance, and soft-deleted transactions cannot be modified. Common
 * use-cases are for correcting failed/pending statuses or adding reference
 * links (e.g., for reconciliation, fraud notes).
 *
 * Performing this action requires suitable authority and audit will be
 * maintained.
 *
 * @param props.connection
 * @param props.depositTransactionId UUID of the deposit transaction to update.
 * @param props.body Editable business fields to update (status, references,
 *   etc).
 * @path /aiCommerce/admin/depositTransactions/:depositTransactionId
 * @accessor api.functional.aiCommerce.admin.depositTransactions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the deposit transaction to update. */
    depositTransactionId: string & tags.Format<"uuid">;

    /** Editable business fields to update (status, references, etc). */
    body: IAiCommerceDepositTransaction.IUpdate;
  };
  export type Body = IAiCommerceDepositTransaction.IUpdate;
  export type Response = IAiCommerceDepositTransaction;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/admin/depositTransactions/:depositTransactionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/admin/depositTransactions/${encodeURIComponent(props.depositTransactionId ?? "null")}`;
  export const random = (): IAiCommerceDepositTransaction =>
    typia.random<IAiCommerceDepositTransaction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositTransactionId")(() =>
        typia.assert(props.depositTransactionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (logically remove) a deposit transaction by UUID for compliance
 * and audit purposes.
 *
 * This operation marks a deposit transaction as deleted by setting the
 * deleted_at timestamp in the ai_commerce_deposit_transactions table.
 *
 * Financial record-keeping and audit requirements make physical deletion
 * forbidden; only a logical deletion is permitted. The operation ensures the
 * transaction exists and is not already deleted. Soft-deleted transactions show
 * as removed in standard queries but remain available for audit and
 * compliance.
 *
 * Only users with sufficient permissions (admin or account owner) can initiate
 * this operation; all deletions are logged with full state snapshots. Any
 * attempt to remove a non-existent or already deleted transaction is rejected
 * with appropriate error messaging.
 *
 * @param props.connection
 * @param props.depositTransactionId UUID of the deposit transaction to
 *   soft-delete.
 * @path /aiCommerce/admin/depositTransactions/:depositTransactionId
 * @accessor api.functional.aiCommerce.admin.depositTransactions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the deposit transaction to soft-delete. */
    depositTransactionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/admin/depositTransactions/:depositTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/admin/depositTransactions/${encodeURIComponent(props.depositTransactionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("depositTransactionId")(() =>
        typia.assert(props.depositTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
