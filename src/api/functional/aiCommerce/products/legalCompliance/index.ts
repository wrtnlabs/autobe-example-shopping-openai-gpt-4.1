import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductLegalCompliance } from "../../../../structures/IAiCommerceProductLegalCompliance";

/**
 * Fetch legal and compliance information for a specific product from
 * ai_commerce_product_legal_compliance.
 *
 * The GET /products/{productId}/legalCompliance endpoint is designed for
 * retrieving legal and compliance information associated with a particular
 * product. This data covers regulatory certificates, hazardous material flags,
 * age restrictions, region of compliance, and approval status, as stored in the
 * ai_commerce_product_legal_compliance table.
 *
 * Public read access ensures buyers, visitors, and all user roles may check
 * compliance status, supporting buyer trust and regulatory transparency. The
 * endpoint will return the compliance entity for the indicated product, or a
 * not found/null response if compliance data is not registered.
 *
 * This API supports compliance audits, buyer-visible requirements (e.g., age
 * limits, hazardous goods), and admin/analytics tracking without needing
 * authentication for public viewing. Proper error handling occurs if the
 * resource is missing or the productId is invalid. No request body is required,
 * and the full compliance entity is returned in response following OA component
 * schema.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the product to fetch legal
 *   compliance data for.
 * @path /aiCommerce/products/:productId/legalCompliance
 * @accessor api.functional.aiCommerce.products.legalCompliance.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the product to fetch legal compliance data for. */
    productId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductLegalCompliance;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/products/:productId/legalCompliance",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/products/${encodeURIComponent(props.productId ?? "null")}/legalCompliance`;
  export const random = (): IAiCommerceProductLegalCompliance =>
    typia.random<IAiCommerceProductLegalCompliance>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
