import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductSeo } from "../../../../structures/IAiCommerceProductSeo";

/**
 * Retrieve all SEO metadata for a specific product from
 * ai_commerce_product_seo.
 *
 * The GET /products/{productId}/seo endpoint is used to retrieve SEO-related
 * metadata for the specified product. This metadata includes fields such as SEO
 * page title, meta description, canonical URL, keywords, and open graph image
 * URL, which are essential for product discoverability on search engines and
 * social platforms.
 *
 * This operation is accessible publicly and does not require authentication or
 * authorization; all visitors, buyers, sellers, and admins can read SEO
 * metadata for a product. The endpoint supports wide integration for rendering
 * product detail pages, external marketing, or analytics dashboards.
 *
 * Internally, the API calls the ai_commerce_product_seo table, looks up the row
 * by productId, and returns the complete SEO record for the product. If the
 * resource does not exist or SEO metadata is not configured, a null or not
 * found response is returned. The operation enforces a hard limit of one SEO
 * entry per product via a unique index.
 *
 * Any errors or missing records are handled gracefully with a detailed error
 * response. No request body is required. The response returns the full SEO
 * entity as defined in the OpenAPI schema.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product for which to retrieve
 *   SEO metadata.
 * @path /aiCommerce/products/:productId/seo
 * @accessor api.functional.aiCommerce.products.seo.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the product for which to retrieve SEO metadata. */
    productId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductSeo;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/products/:productId/seo",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/products/${encodeURIComponent(props.productId ?? "null")}/seo`;
  export const random = (): IAiCommerceProductSeo =>
    typia.random<IAiCommerceProductSeo>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
