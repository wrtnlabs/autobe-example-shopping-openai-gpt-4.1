import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceTrendingProduct } from "../../../structures/IAiCommerceTrendingProduct";
import { IPageIAiCommerceTrendingProduct } from "../../../structures/IPageIAiCommerceTrendingProduct";

/**
 * Retrieve a paginated and filtered list of trending products
 * (ai_commerce_trending_products).
 *
 * Retrieve a paginated and filtered list of trending products from
 * ai_commerce_trending_products. This operation allows clients, admins, or end
 * users to obtain the most up-to-date and relevant trending product data,
 * supporting user-facing feeds, analytics dashboards, and trend monitoring
 * workflows respectively.
 *
 * The response includes essential details such as trending analytics score,
 * whether the status is manually overridden, and product references for each
 * entry. Proper pagination and sorting options ensure high-performance access
 * for large catalogues. Sensitive or internal analytics data may be filtered or
 * summarized depending on the requesting user's role and context as determined
 * by authorization logic in the business layer.
 *
 * Trending status is determined by platform analytics and, optionally, can be
 * manually overridden by administrators. This endpoint interacts closely with
 * related product and discovery endpoints and should be used in conjunction
 * with AI-powered personalization or homepage recommendation APIs when building
 * consumer-facing surfaces.
 *
 * Error handling includes proper status codes for query errors, unrecognized
 * parameters, or internal analytics errors. Only summary information for each
 * trending product is returned unless otherwise specified by request context.
 *
 * @param props.connection
 * @param props.body Filter, sorting, and pagination parameters for listing
 *   trending products.
 * @path /aiCommerce/trendingProducts
 * @accessor api.functional.aiCommerce.trendingProducts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter, sorting, and pagination parameters for listing trending
     * products.
     */
    body: IAiCommerceTrendingProduct.IRequest;
  };
  export type Body = IAiCommerceTrendingProduct.IRequest;
  export type Response = IPageIAiCommerceTrendingProduct.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/trendingProducts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/trendingProducts";
  export const random = (): IPageIAiCommerceTrendingProduct.ISummary =>
    typia.random<IPageIAiCommerceTrendingProduct.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific trending product
 * (ai_commerce_trending_products).
 *
 * Fetch the detailed information for a specific trending product entry in
 * ai_commerce_trending_products by trendingProductId (UUID). This enables
 * retrieval of trending analytics, product reference, score, override flag, and
 * timestamp fields, with full support for both user-facing discovery and
 * administrative inspection.
 *
 * Security and permissions are essential; sensitive analytics or audit trail
 * fields may require elevated roles (e.g., admin) to access. Business logic may
 * enforce broader or narrower field visibility depending on the context in
 * which the API is called.
 *
 * This operation should be used in conjunction with product detail and
 * analytics endpoints for holistic trend monitoring and intervention workflows.
 * Error handling includes not found, forbidden, and invalid parameter statuses
 * as required.
 *
 * The path parameter trendingProductId is a required UUID that identifies the
 * target trending record. The endpoint merges information from trending,
 * analytics, and linked product tables as appropriate.
 *
 * @param props.connection
 * @param props.trendingProductId Unique identifier of the trending product
 *   record to retrieve.
 * @path /aiCommerce/trendingProducts/:trendingProductId
 * @accessor api.functional.aiCommerce.trendingProducts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the trending product record to retrieve. */
    trendingProductId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceTrendingProduct;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/trendingProducts/:trendingProductId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/trendingProducts/${encodeURIComponent(props.trendingProductId ?? "null")}`;
  export const random = (): IAiCommerceTrendingProduct =>
    typia.random<IAiCommerceTrendingProduct>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("trendingProductId")(() =>
        typia.assert(props.trendingProductId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
