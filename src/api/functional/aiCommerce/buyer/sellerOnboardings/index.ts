import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSellerOnboarding } from "../../../../structures/IAiCommerceSellerOnboarding";

/**
 * Create new seller onboarding application (ai_commerce_seller_onboarding
 * table).
 *
 * This operation creates a new seller onboarding application record as
 * specified in ai_commerce_seller_onboarding. It is invoked by a buyer user
 * seeking to become a seller and submit all required application data for
 * onboarding, including KYC documentation, legal disclosures, and business
 * details packed in application_data. The system validates the request, assigns
 * the appropriate onboarding_status, and stores all necessary compliance
 * evidence.
 *
 * Initiation triggers onboarding workflow and KYC checks. On success, the
 * onboarding application is ready for review by compliance/admin personnel. On
 * failure, errors may result from validation, missing documents, or business
 * rule mismatches. After creation, the user can track onboarding progress and
 * participate in further onboarding steps (e.g., KYC submission, media uploads,
 * escalation).
 *
 * Admin, seller, and compliance roles may reference onboarding status for
 * approval or escalation.
 *
 * @param props.connection
 * @param props.body Information for new onboarding application
 *   (application_data, applicant, business disclosure)
 * @path /aiCommerce/buyer/sellerOnboardings
 * @accessor api.functional.aiCommerce.buyer.sellerOnboardings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information for new onboarding application (application_data,
     * applicant, business disclosure)
     */
    body: IAiCommerceSellerOnboarding.ICreate;
  };
  export type Body = IAiCommerceSellerOnboarding.ICreate;
  export type Response = IAiCommerceSellerOnboarding;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/buyer/sellerOnboardings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/buyer/sellerOnboardings";
  export const random = (): IAiCommerceSellerOnboarding =>
    typia.random<IAiCommerceSellerOnboarding>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
