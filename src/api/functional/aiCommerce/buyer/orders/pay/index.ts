import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommercePayments } from "../../../../../structures/IAiCommercePayments";

/**
 * Initiate payment for an order by creating a payment record
 * (ai_commerce_payments).
 *
 * This operation starts the payment process for a specific order. The endpoint
 * is intended for the buyer who owns the order (ai_commerce_orders.buyer_id).
 * The buyer submits payment information (method, amount, provider details) that
 * is then validated against order status (only allowed when order is in a
 * 'payment_pending' state), amount, and business rules.
 *
 * Upon valid request, a new ai_commerce_payments entry is created and linked to
 * the order via ai_commerce_order_payments. The operation is audit-logged for
 * compliance and traceability. If the order is ineligible for payment (already
 * paid, cancelled, etc.), an error is returned with a descriptive business
 * reason.
 *
 * All payment attempts, successes, and failures are recorded for legal evidence
 * and refund/audit purposes. Only the owner (buyer) of the order may submit
 * payment using this endpoint.
 *
 * @param props.connection
 * @param props.orderId Order ID for which payment is being initiated
 *   (ai_commerce_orders.id).
 * @param props.body Payment initiation payload: method, amount, provider info,
 *   and related fields.
 * @path /aiCommerce/buyer/orders/:orderId/pay
 * @accessor api.functional.aiCommerce.buyer.orders.pay.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Order ID for which payment is being initiated
     * (ai_commerce_orders.id).
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Payment initiation payload: method, amount, provider info, and
     * related fields.
     */
    body: IAiCommercePayments.ICreate;
  };
  export type Body = IAiCommercePayments.ICreate;
  export type Response = IAiCommercePayments;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/buyer/orders/:orderId/pay",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/buyer/orders/${encodeURIComponent(props.orderId ?? "null")}/pay`;
  export const random = (): IAiCommercePayments =>
    typia.random<IAiCommercePayments>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
