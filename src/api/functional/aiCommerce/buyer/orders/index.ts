import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrder } from "../../../../structures/IAiCommerceOrder";
import { IPageIAiCommerceOrder } from "../../../../structures/IPageIAiCommerceOrder";
export * as items from "./items/index";
export * as subOrders from "./subOrders/index";
export * as statusHistory from "./statusHistory/index";
export * as pay from "./pay/index";
export * as fulfillments from "./fulfillments/index";
export * as afterSales from "./afterSales/index";
export * as cancellations from "./cancellations/index";
export * as refunds from "./refunds/index";
export * as analytics from "./analytics/index";
export * as snapshots from "./snapshots/index";

/**
 * Create a new purchase order from cart (ai_commerce_orders table).
 *
 * Create a new purchase order for the buyer, using their current cart and
 * supplied checkout information (address, payment, channel). This operation
 * validates cart contents for availability, compliance, and pricing, then locks
 * in the snapshot of products and prices for legal evidence and fulfillment. An
 * address snapshot is stored to guarantee delivery integrity regardless of
 * future updates. Fulfillment status is initialized as per the business
 * workflow.
 *
 * Buyers must be authenticated to create orders; visitors are required to
 * register first. Security is handled to ensure only legitimate, non-expired
 * sessions can create orders. The creation request body is validated against
 * the full requirements for initial order setup, and actionable errors are
 * provided on failure, e.g., insufficient stock, pricing changes, or policy
 * violations.
 *
 * Upon success, the complete order record is returned for confirmation,
 * payment, and user tracking. This operation is based on ai_commerce_orders and
 * related child schema tables.
 *
 * @param props.connection
 * @param props.body Complete checkout and order creation payload including cart
 *   reference, address, payment, and buyer info.
 * @path /aiCommerce/buyer/orders
 * @accessor api.functional.aiCommerce.buyer.orders.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Complete checkout and order creation payload including cart
     * reference, address, payment, and buyer info.
     */
    body: IAiCommerceOrder.ICreate;
  };
  export type Body = IAiCommerceOrder.ICreate;
  export type Response = IAiCommerceOrder;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/buyer/orders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/buyer/orders";
  export const random = (): IAiCommerceOrder =>
    typia.random<IAiCommerceOrder>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a filtered, paginated list of purchase orders (ai_commerce_orders
 * table).
 *
 * Retrieve a filtered and paginated list of purchase orders from the aiCommerce
 * system, supporting advanced search capabilities by order status, buyer,
 * channel, and date. This operation provides both buyers and administrators the
 * ability to locate orders based on a wide range of criteria, including but not
 * limited to order codes, creation/update time, fulfillment states, price
 * ranges, and specific buyer or channel linkage.
 *
 * Paging parameters ensure manageable result sets for large datasets, and
 * sorting options are available for recency, order value, or delivery status in
 * either direction. The response returns a list of order summaries with key
 * details optimized for history or management screen display.
 *
 * Security considerations include restricting access to one's own orders for
 * buyers and unrestricted access for admins, with all queries subject to rate
 * limiting and audit logging for compliance. This operation is based on the
 * ai_commerce_orders Prisma schema and returns summary information only â€“
 * detailed views must use the 'at' operation.
 *
 * Validation ensures that all search parameters conform with business
 * requirements; unsupported or malformed requests are rejected with actionable
 * errors.
 *
 * @param props.connection
 * @param props.body Advanced search and pagination parameters for order
 *   retrieval.
 * @path /aiCommerce/buyer/orders
 * @accessor api.functional.aiCommerce.buyer.orders.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Advanced search and pagination parameters for order retrieval. */
    body: IAiCommerceOrder.IRequest;
  };
  export type Body = IAiCommerceOrder.IRequest;
  export type Response = IPageIAiCommerceOrder.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/buyer/orders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/buyer/orders";
  export const random = (): IPageIAiCommerceOrder.ISummary =>
    typia.random<IPageIAiCommerceOrder.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific order (ai_commerce_orders table)
 * by UUID.
 *
 * Get full details of a specific purchase order by its unique orderId,
 * including all relational data such as buyer, associated items, statuses,
 * pricing, and fulfillment steps. This operation provides a complete view of
 * the given order, necessary for display in detailed order screens, dispute
 * management, audit, and after-sales support workflows.
 *
 * Authorization is enforced: buyers may only access their own orders; admins
 * have global access. All access attempts are logged for compliance, especially
 * regarding sensitive fields (address snapshots, payment references,
 * after-sales states).
 *
 * Based on the ai_commerce_orders Prisma schema, this operation validates the
 * provided UUID, ensures the record exists and is accessible by the
 * authenticated user. Malformed identifiers or unauthorized access are rejected
 * with appropriate error messages. Returns the complete order object for
 * downstream application needs.
 *
 * @param props.connection
 * @param props.orderId The UUID of the target purchase order to retrieve.
 * @path /aiCommerce/buyer/orders/:orderId
 * @accessor api.functional.aiCommerce.buyer.orders.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The UUID of the target purchase order to retrieve. */
    orderId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceOrder;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/buyer/orders/:orderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/orders/${encodeURIComponent(props.orderId ?? "null")}`;
  export const random = (): IAiCommerceOrder =>
    typia.random<IAiCommerceOrder>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update permitted details of a specific order (ai_commerce_orders table) by
 * UUID.
 *
 * Update fields on an existing order by its UUID, such as recipient address,
 * payment method, scheduled delivery, or business status as permitted at the
 * current status stage. All modifications are validated to ensure only allowed
 * transitions (e.g., no edits after fulfillment, only allowed fields per order
 * status).
 *
 * Only the owner (buyer) or administrators can execute this operation. All
 * updates are logged, and any field with legal or compliance impact is
 * snapshotted prior to mutation. Unauthorized or improper update attempts
 * return actionable errors depending on context (e.g., invalid transition,
 * locked order, missing permissions).
 *
 * Based on field-level update logic in ai_commerce_orders; operation ensures
 * strict business compliance and full audit trail.
 *
 * @param props.connection
 * @param props.orderId The UUID of the target order to update.
 * @param props.body Payload containing allowed updates for the specified order
 *   according to its current lifecycle status.
 * @path /aiCommerce/buyer/orders/:orderId
 * @accessor api.functional.aiCommerce.buyer.orders.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The UUID of the target order to update. */
    orderId: string & tags.Format<"uuid">;

    /**
     * Payload containing allowed updates for the specified order according
     * to its current lifecycle status.
     */
    body: IAiCommerceOrder.IUpdate;
  };
  export type Body = IAiCommerceOrder.IUpdate;
  export type Response = IAiCommerceOrder;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/buyer/orders/:orderId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/buyer/orders/${encodeURIComponent(props.orderId ?? "null")}`;
  export const random = (): IAiCommerceOrder =>
    typia.random<IAiCommerceOrder>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Logically (soft) delete a specific order by UUID (ai_commerce_orders table).
 *
 * Permanently remove an order record identified by a UUID by marking its
 * deleted_at timestamp, retaining the record for historical, audit, and
 * compliance purposes. The order must not have settled payment, fulfilled
 * shipping, or compliance holds; business logic validation will reject any
 * attempt to erase orders that are not eligible.
 *
 * Deletion is restricted to the owner (buyer) or administrators, following the
 * platform lifecycle management rules. All delete actions are snapshotted prior
 * to marking as deleted. Unauthorized, invalid, or unsuccessful attempts are
 * returned with clear error messages. The deletion process ensures that no
 * business integrity is lost and compliance auditability is maintained at all
 * times.
 *
 * Based on ai_commerce_orders schema, this operation upholds full data
 * integrity, evidence policy, and regulatory conformance for archival.
 *
 * @param props.connection
 * @param props.orderId The UUID of the target order to logically delete.
 * @path /aiCommerce/buyer/orders/:orderId
 * @accessor api.functional.aiCommerce.buyer.orders.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The UUID of the target order to logically delete. */
    orderId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/buyer/orders/:orderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/orders/${encodeURIComponent(props.orderId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
