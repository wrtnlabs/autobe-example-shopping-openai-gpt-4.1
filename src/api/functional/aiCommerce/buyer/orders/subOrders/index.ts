import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSubOrder } from "../../../../../structures/IAiCommerceSubOrder";
import { IPageIAiCommerceSubOrder } from "../../../../../structures/IPageIAiCommerceSubOrder";

/**
 * Retrieve a paginated, filtered list of sub-orders for an order
 * (ai_commerce_sub_orders).
 *
 * This API retrieves a filtered and paginated list of sub-orders belonging to
 * the parent order indicated by orderId. Sub-orders correspond to segmented
 * fulfillment units—such as by seller, warehouse, or shipping method—generated
 * automatically or administratively during order processing.
 *
 * The ai_commerce_sub_orders table records the linkage between the primary
 * order and its sub-entities, including independent status, pricing, and
 * fulfillment details. The operation aids buyers and administrators in tracking
 * partial shipments, seller-specific delivery, and vendor resolution cases.
 * Filtering and paging options are passed in the request body following the
 * IAiCommerceSubOrder.IRequest DTO, and strict security ensures only authorized
 * actors (buyers for their own orders, sellers for their own sub-orders, admins
 * globally) can access these lists.
 *
 * Related APIs include GET for individual sub-order detail and POST for
 * administering new segments. Typical business rules limit creation to the
 * system or administrator roles, not end users, for compliance and operational
 * clarity.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order for which
 *   sub-orders are listed.
 * @param props.body Search, filter, and paging parameters for sub-order
 *   retrieval.
 * @path /aiCommerce/buyer/orders/:orderId/subOrders
 * @accessor api.functional.aiCommerce.buyer.orders.subOrders.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the parent order for which sub-orders are
     * listed.
     */
    orderId: string & tags.Format<"uuid">;

    /** Search, filter, and paging parameters for sub-order retrieval. */
    body: IAiCommerceSubOrder.IRequest;
  };
  export type Body = IAiCommerceSubOrder.IRequest;
  export type Response = IPageIAiCommerceSubOrder;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/buyer/orders/:orderId/subOrders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/buyer/orders/${encodeURIComponent(props.orderId ?? "null")}/subOrders`;
  export const random = (): IPageIAiCommerceSubOrder =>
    typia.random<IPageIAiCommerceSubOrder>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific sub-order for an order
 * (ai_commerce_sub_orders).
 *
 * The endpoint fetches all business-relevant details for a single sub-order,
 * identified by both the parent orderId and the subOrderId. These may include
 * fulfillment status, pricing breakdown, seller and channel context, and
 * shipping/tracking references. Business rules enforce permissions based on
 * account type and order relationship. Buyers may access their own sub-orders,
 * sellers only their own, and administrators any, with role-specific views for
 * sensitive/aggregated fields.
 *
 * Underlying storage comes from the ai_commerce_sub_orders table, which links
 * each segmented order to its top-level order and responsible seller. Not found
 * or permission errors are handled according to privacy and compliance
 * policies. Use with PATCH for sub-order index and POST for creation. This
 * operation is required for operational tracking, partial fulfillment, and
 * customer care representing complex orders.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order.
 * @param props.subOrderId Unique identifier of the target sub-order.
 * @path /aiCommerce/buyer/orders/:orderId/subOrders/:subOrderId
 * @accessor api.functional.aiCommerce.buyer.orders.subOrders.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the target sub-order. */
    subOrderId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceSubOrder;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/buyer/orders/:orderId/subOrders/:subOrderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/orders/${encodeURIComponent(props.orderId ?? "null")}/subOrders/${encodeURIComponent(props.subOrderId ?? "null")}`;
  export const random = (): IAiCommerceSubOrder =>
    typia.random<IAiCommerceSubOrder>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("subOrderId")(() => typia.assert(props.subOrderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
