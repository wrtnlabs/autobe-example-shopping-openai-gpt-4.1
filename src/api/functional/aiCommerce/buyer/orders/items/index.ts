import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderItem } from "../../../../../structures/IAiCommerceOrderItem";
import { IPageIAiCommerceOrderItem } from "../../../../../structures/IPageIAiCommerceOrderItem";

/**
 * Search and retrieve a paginated, filtered list of order items for a specific
 * order (ai_commerce_order_items).
 *
 * This API operation enables retrieval of a paginated list of order items under
 * a specific order by its unique orderId. It supports advanced searching and
 * filtering on fields such as product name, status, seller, and quantity.
 * Access control applies based on the user's role and ownership: buyers may
 * only access their own orders, admins may access any order items, and sellers
 * are restricted to their own segments of a split order, depending on business
 * implementation.
 *
 * The underlying ai_commerce_order_items table captures each product or variant
 * within an order, including associated product/variant references, seller
 * information for multi-vendor use cases, item status, pricing at purchase, and
 * related analytics. Pagination and filtering are supported by supplying a
 * structured request body.
 *
 * Business rules enforce referential integrity to the parent order, return only
 * items belonging to the specified orderId, and optionally restrict access
 * based on account role (buyer, seller, admin). Error handling and validation
 * ensure valid UUIDs and respect for row-level permissions and privacy rules.
 *
 * This operation supports order item histories, analytics, after-sales
 * eligibility, and is typically paired with GET
 * /orders/{orderId}/items/{itemId} for details; buyers and sellers use this to
 * track, manage, and resolve issues with specific order items.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose items are being
 *   queried.
 * @param props.body Search, filter, and pagination parameters for order item
 *   retrieval.
 * @path /aiCommerce/buyer/orders/:orderId/items
 * @accessor api.functional.aiCommerce.buyer.orders.items.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the order whose items are being queried. */
    orderId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination parameters for order item retrieval. */
    body: IAiCommerceOrderItem.IRequest;
  };
  export type Body = IAiCommerceOrderItem.IRequest;
  export type Response = IPageIAiCommerceOrderItem;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/buyer/orders/:orderId/items",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/buyer/orders/${encodeURIComponent(props.orderId ?? "null")}/items`;
  export const random = (): IPageIAiCommerceOrderItem =>
    typia.random<IPageIAiCommerceOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the full details of a specific order item within an order
 * (ai_commerce_order_items).
 *
 * This API operation fetches a single order item's details, including
 * quantities, pricing, seller information, variant/product references,
 * fulfillment and delivery status, and linked after-sales eligibility. The
 * operation enforces that only authorized users—buyers who own the parent
 * order, relevant sellers tied to the ordered item, or platform admins—may
 * access the record.
 *
 * The ai_commerce_order_items table anchors the response, joined by foreign
 * keys to product, variant, and seller details for context (not expanded inline
 * unless specified in the response DTO). If either the orderId or itemId does
 * not correspond to a valid order or item, or if the user lacks permission, the
 * operation returns a not-found or unauthorized error.
 *
 * Related APIs include PATCH /orders/{orderId}/items for item search and
 * access, and PUT or DELETE for updates and removals. This endpoint is critical
 * for after-sales processes, dispute resolution, and customer support.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the parent order.
 * @param props.itemId Unique identifier of the target order item.
 * @path /aiCommerce/buyer/orders/:orderId/items/:itemId
 * @accessor api.functional.aiCommerce.buyer.orders.items.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent order. */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier of the target order item. */
    itemId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceOrderItem;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/buyer/orders/:orderId/items/:itemId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/orders/${encodeURIComponent(props.orderId ?? "null")}/items/${encodeURIComponent(props.itemId ?? "null")}`;
  export const random = (): IAiCommerceOrderItem =>
    typia.random<IAiCommerceOrderItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("itemId")(() => typia.assert(props.itemId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
