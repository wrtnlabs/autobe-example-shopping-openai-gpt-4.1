import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderAnalytics } from "../../../../../structures/IAiCommerceOrderAnalytics";

/**
 * Get order analytics and performance statistics by orderId from
 * ai_commerce_order_analytics.
 *
 * Retrieve the analytics information and performance statistics for a given
 * order, based on orderId. The API returns aggregated and real-time metrics
 * including order value, item count, total refunds, after-sales incidents,
 * completion timing, and the last known order status. The
 * ai_commerce_order_analytics table is the data source but output is filtered
 * based on role: the buyer, related seller, or admin can retrieve metrics
 * suitable to business needs.
 *
 * Analytics endpoints support after-sales decision making, compliance reviews,
 * operational analysis, and customer reporting. Data is filtered to ensure
 * privacy (e.g., only the buyer can access their own order, sellers only see
 * their own fulfillment analytics, and only admins can retrieve full
 * analytics).
 *
 * If the order ID does not exist or is not associated with the requester,
 * explicit business error responses are returned. All access is audit-logged to
 * meet compliance and performance requirements.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the order whose analytics are being
 *   requested. Must be a UUID string referencing ai_commerce_orders.id.
 * @path /aiCommerce/buyer/orders/:orderId/analytics
 * @accessor api.functional.aiCommerce.buyer.orders.analytics.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the order whose analytics are being requested.
     * Must be a UUID string referencing ai_commerce_orders.id.
     */
    orderId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceOrderAnalytics;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/buyer/orders/:orderId/analytics",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/orders/${encodeURIComponent(props.orderId ?? "null")}/analytics`;
  export const random = (): IAiCommerceOrderAnalytics =>
    typia.random<IAiCommerceOrderAnalytics>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
