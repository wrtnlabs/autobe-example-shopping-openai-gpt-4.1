import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceMileageTransaction } from "../../../../structures/IAiCommerceMileageTransaction";
import { IPageIAiCommerceMileageTransaction } from "../../../../structures/IPageIAiCommerceMileageTransaction";

/**
 * List and search mileage transactions with filtering and pagination.
 *
 * This operation searches and returns a paginated list of mileage transactions,
 * including accrual, redemption, adjustment, and expiration events. It
 * leverages parameters specified in IAiCommerceMileageTransaction.IRequest to
 * filter by type, date, user/account, status, and reference entity as
 * appropriate.
 *
 * Designed for both user self-audit and administrative/business use, this
 * operation supports compliance and account analytics use cases. Role-based
 * filtering is applied to ensure that users only see their own transactions,
 * while admins may filter globally or per user.
 *
 * Results are tailored for performance and summary, and detailed event or audit
 * data may be included based on role and business rule logic. Standard
 * pagination and sorting fields are supported.
 *
 * @param props.connection
 * @param props.body Query criteria for mileage transactions, including
 *   filtering and pagination parameters.
 * @path /aiCommerce/buyer/mileageTransactions
 * @accessor api.functional.aiCommerce.buyer.mileageTransactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Query criteria for mileage transactions, including filtering and
     * pagination parameters.
     */
    body: IAiCommerceMileageTransaction.IRequest;
  };
  export type Body = IAiCommerceMileageTransaction.IRequest;
  export type Response = IPageIAiCommerceMileageTransaction;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/buyer/mileageTransactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/buyer/mileageTransactions";
  export const random = (): IPageIAiCommerceMileageTransaction =>
    typia.random<IPageIAiCommerceMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full details of a mileage transaction by unique ID.
 *
 * This operation fetches the details of an individual mileage transaction, such
 * as accrual, usage/redemption, adjustment, or expiration events for audit or
 * user self-service purposes. Data fields include transaction type (accrual,
 * redemption, adjustment), amount, status, date, reference entity, and audit
 * metadata as stored in the ai_commerce_mileage_transactions table.
 *
 * Access is limited to the transaction owner (buyer or seller) and
 * administrator roles, with privacy and compliance strictly enforced. All query
 * actions are logged for security and auditability. Results include all
 * business-critical metadata and fields established in the database schema.
 *
 * @param props.connection
 * @param props.mileageTransactionId Unique identifier for the mileage
 *   transaction to retrieve.
 * @path /aiCommerce/buyer/mileageTransactions/:mileageTransactionId
 * @accessor api.functional.aiCommerce.buyer.mileageTransactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the mileage transaction to retrieve. */
    mileageTransactionId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceMileageTransaction;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/buyer/mileageTransactions/:mileageTransactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/mileageTransactions/${encodeURIComponent(props.mileageTransactionId ?? "null")}`;
  export const random = (): IAiCommerceMileageTransaction =>
    typia.random<IAiCommerceMileageTransaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("mileageTransactionId")(() =>
        typia.assert(props.mileageTransactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
