import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceInquiry } from "../../../../structures/IAiCommerceInquiry";
export * as comments from "./comments/index";

/**
 * Create a new product inquiry (ai_commerce_inquiries table).
 *
 * Enables buyers to post a new inquiry about a product. The operation is
 * authenticated and tied to the buyer's identity for accountability and
 * follow-up communication. The inquiry content is validated against platform
 * moderation rules before persistence.
 *
 * Mandatory fields include the product being asked about, the inquiry text, and
 * intended visibility (public/private) as allowed. The system creates the
 * inquiry with appropriate status, links to the involved product and user, and
 * initializes audit trails.
 *
 * The detailed inquiry object, complete with metadata and association, is
 * returned upon success. Possible errors include missing required fields,
 * unauthorized access, or failed validation (e.g., moderation block).
 *
 * @param props.connection
 * @param props.body Information to create a new inquiry, including product,
 *   question, visibility, etc. per IAiCommerceInquiry.ICreate.
 * @path /aiCommerce/buyer/inquiries
 * @accessor api.functional.aiCommerce.buyer.inquiries.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information to create a new inquiry, including product, question,
     * visibility, etc. per IAiCommerceInquiry.ICreate.
     */
    body: IAiCommerceInquiry.ICreate;
  };
  export type Body = IAiCommerceInquiry.ICreate;
  export type Response = IAiCommerceInquiry;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/buyer/inquiries",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/buyer/inquiries";
  export const random = (): IAiCommerceInquiry =>
    typia.random<IAiCommerceInquiry>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a product inquiry (ai_commerce_inquiries table).
 *
 * Allows the original inquiry author (buyer) or an administrator to update
 * details of a product inquiry. The inquiryId path parameter identifies the
 * record to update, and the request body supplies the fields to modify (such as
 * question text or visibility status).
 *
 * Permissions are strictly enforced; only the original author or admins may
 * update the inquiry, and the operation fails if the user lacks rights or if
 * moderation locks the inquiry. Each update action logs an immutable snapshot
 * for compliance.
 *
 * The updated inquiry entity is returned, showing new and unchanged fields.
 * Errors return reasons such as field validation, non-existent inquiry, or
 * permission issues.
 *
 * @param props.connection
 * @param props.inquiryId Unique identifier of the inquiry to update.
 * @param props.body Fields to update in the inquiry, such as content,
 *   visibility, etc., formatted as IAiCommerceInquiry.IUpdate.
 * @path /aiCommerce/buyer/inquiries/:inquiryId
 * @accessor api.functional.aiCommerce.buyer.inquiries.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the inquiry to update. */
    inquiryId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the inquiry, such as content, visibility, etc.,
     * formatted as IAiCommerceInquiry.IUpdate.
     */
    body: IAiCommerceInquiry.IUpdate;
  };
  export type Body = IAiCommerceInquiry.IUpdate;
  export type Response = IAiCommerceInquiry;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/buyer/inquiries/:inquiryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/buyer/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}`;
  export const random = (): IAiCommerceInquiry =>
    typia.random<IAiCommerceInquiry>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (logically) a product inquiry (soft delete via ai_commerce_inquiries
 * table).
 *
 * This endpoint enables a user to mark an inquiry as deleted by setting its
 * deleted_at timestamp (soft delete). Only the creator of the inquiry or an
 * admin is allowed to perform this action, ensuring accountability and
 * traceability.
 *
 * The soft delete operation leaves the inquiry in the database for evidence,
 * audit, and future review, but it is not returned in normal user or search
 * queries. Attempts to delete an inquiry by an unauthorized actor or if the
 * inquiry does not exist will result in a precise error response.
 *
 * The deletion is logged in the audit trail, including the user identity and
 * timestamp. No response body is returned on success, but errors convey
 * validation or authorization issues.
 *
 * @param props.connection
 * @param props.inquiryId Unique identifier of the inquiry to be deleted.
 * @path /aiCommerce/buyer/inquiries/:inquiryId
 * @accessor api.functional.aiCommerce.buyer.inquiries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the inquiry to be deleted. */
    inquiryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/buyer/inquiries/:inquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
