import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceComment } from "../../../../../structures/IAiCommerceComment";

/**
 * Create a new comment on a specific bulletin (ai_commerce_comments table).
 *
 * This endpoint allows an authenticated user (buyer) to create a comment on a
 * specific bulletin post. The user must provide the bulletinId of the target
 * bulletin, and the request body should include the content of the comment and
 * optional threading metadata (e.g., parentCommentId for replies).
 *
 * Security is enforced by restricting creation to authenticated buyers only,
 * ensuring accountability and audit log traceability. The request payload is
 * validated to ensure that content is non-empty and free from prohibited terms
 * as per platform rules; moderation and content filtering may be triggered
 * automatically for certain keywords.
 *
 * Each created comment is linked to the bulletin, the posting user, and
 * supports reply/threaded structure if a parentCommentId is given. Upon
 * successful creation, the response returns the detailed comment entity as
 * stored in the system, including timestamps and status. Errors are returned
 * for invalid input, unauthorized access, or if the bulletin is not found or
 * not accepting comments.
 *
 * @param props.connection
 * @param props.bulletinId Unique identifier of the target bulletin post to
 *   which the comment will be attached.
 * @param props.body Information required to create a comment under a bulletin,
 *   including content, optional parentCommentId for threading, and
 *   visibility/status as defined in IAiCommerceComment.ICreate.
 * @path /aiCommerce/buyer/bulletins/:bulletinId/comments
 * @accessor api.functional.aiCommerce.buyer.bulletins.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier of the target bulletin post to which the comment
     * will be attached.
     */
    bulletinId: string & tags.Format<"uuid">;

    /**
     * Information required to create a comment under a bulletin, including
     * content, optional parentCommentId for threading, and
     * visibility/status as defined in IAiCommerceComment.ICreate.
     */
    body: IAiCommerceComment.ICreate;
  };
  export type Body = IAiCommerceComment.ICreate;
  export type Response = IAiCommerceComment;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/buyer/bulletins/:bulletinId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/buyer/bulletins/${encodeURIComponent(props.bulletinId ?? "null")}/comments`;
  export const random = (): IAiCommerceComment =>
    typia.random<IAiCommerceComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bulletinId")(() => typia.assert(props.bulletinId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing comment for a given bulletin (ai_commerce_comments table).
 *
 * Allows the author of a comment (buyer) or an administrator to update the
 * content or visibility status of a specific comment on a bulletin post. The
 * operation references both the bulletinId and commentId to uniquely identify
 * the comment.
 *
 * Input validation ensures that the editor is authorized, that provided content
 * is not blank and complies with moderation policies, and that the comment is
 * still editable (e.g., not locked by moderation or older than an allowed edit
 * window). Edits are saved with an immutable snapshot in the edit history for
 * compliance and auditability.
 *
 * On success, the updated comment entity reflecting all changes is returned.
 * Errors will be raised if the requestor lacks permission, if comment or
 * bulletin does not exist, or if a validation rule is violated.
 *
 * @param props.connection
 * @param props.bulletinId Identifier of the bulletin which the comment belongs
 *   to.
 * @param props.commentId Unique identifier of the comment to update.
 * @param props.body Updated information for the comment, such as content or
 *   status, formatted as IAiCommerceComment.IUpdate.
 * @path /aiCommerce/buyer/bulletins/:bulletinId/comments/:commentId
 * @accessor api.functional.aiCommerce.buyer.bulletins.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the bulletin which the comment belongs to. */
    bulletinId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment to update. */
    commentId: string & tags.Format<"uuid">;

    /**
     * Updated information for the comment, such as content or status,
     * formatted as IAiCommerceComment.IUpdate.
     */
    body: IAiCommerceComment.IUpdate;
  };
  export type Body = IAiCommerceComment.IUpdate;
  export type Response = IAiCommerceComment;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/buyer/bulletins/:bulletinId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/buyer/bulletins/${encodeURIComponent(props.bulletinId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IAiCommerceComment =>
    typia.random<IAiCommerceComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bulletinId")(() => typia.assert(props.bulletinId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (logically) a specific comment on a bulletin (soft delete via
 * ai_commerce_comments table).
 *
 * This endpoint allows an authorized user (the comment author or an
 * administrator) to mark a comment on a bulletin as deleted. Instead of
 * physically erasing the comment, the deleted_at timestamp is set for logical
 * deletion, enabling recovery or audit retrieval. The comment remains in the
 * database for compliance and evidence but is no longer displayed to standard
 * users.
 *
 * Permission checks ensure only the comment's author or users with the
 * appropriate administrative privileges can perform this operation. Attempts by
 * unauthorized users will result in error responses and may trigger audit
 * alerts.
 *
 * The deletion action is always recorded in the platform's audit log, including
 * the actor's identity, reason, and the timestamp. In case of failure (e.g.,
 * comment not found, insufficient rights), the response will convey the reason
 * to the client.
 *
 * @param props.connection
 * @param props.bulletinId Identifier of the bulletin which contains the
 *   comment.
 * @param props.commentId Unique identifier of the comment to be deleted.
 * @path /aiCommerce/buyer/bulletins/:bulletinId/comments/:commentId
 * @accessor api.functional.aiCommerce.buyer.bulletins.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Identifier of the bulletin which contains the comment. */
    bulletinId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment to be deleted. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/buyer/bulletins/:bulletinId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/bulletins/${encodeURIComponent(props.bulletinId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("bulletinId")(() => typia.assert(props.bulletinId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
