import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceFavoritesProductNotification } from "../../../../../../structures/IAiCommerceFavoritesProductNotification";
import { IPageIAiCommerceFavoritesProductNotification } from "../../../../../../structures/IPageIAiCommerceFavoritesProductNotification";

/**
 * Search and retrieve a paginated list of notifications for a user's favorited
 * product (ai_commerce_favorites_products and
 * ai_commerce_favorites_notifications).
 *
 * This operation enables a user to retrieve a paginated, searchable, and
 * sortable list of notification events associated with a specific favorited
 * product. These notifications keep a user informed about important updates,
 * such as price changes, stock status, or promotional events tied to the
 * product they have favorited.
 *
 * Access to this information is restricted to authenticated users who own the
 * favorite product reference, with robust permission enforcement. The endpoint
 * supports pagination and advanced search queries (e.g., filtering by
 * notification type, date range, read/unread status), enabling efficient
 * notification management by the user. Notification data returned includes the
 * notification type, timestamps for creation, delivery, and read status, along
 * with associated metadata for the favorited product.
 *
 * Underlying data is read from ai_commerce_favorites_products (for favorite
 * identification) and ai_commerce_favorites_notifications (for event records).
 * Sensitive notification content is accessible only by the user who favorited
 * the product. Excessive retrieval or abuse of this API may be rate limited,
 * and all access events are logged for audit purposes.
 *
 * Related operations may include marking notifications as read or deleting
 * specific notifications for housekeeping. Error handling ensures that access
 * is denied if the favorite product entry does not belong to the requesting
 * user, or if it has been deleted or revoked.
 *
 * @param props.connection
 * @param props.favoriteProductId The unique identifier of the favorited product
 *   for which to retrieve notifications.
 * @param props.body Search/query parameters for filtering, sorting, and
 *   paginating notification events.
 * @path /aiCommerce/buyer/favorites/products/:favoriteProductId/notifications
 * @accessor api.functional.aiCommerce.buyer.favorites.products.notifications.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the favorited product for which to retrieve
     * notifications.
     */
    favoriteProductId: string & tags.Format<"uuid">;

    /**
     * Search/query parameters for filtering, sorting, and paginating
     * notification events.
     */
    body: IAiCommerceFavoritesProductNotification.IRequest;
  };
  export type Body = IAiCommerceFavoritesProductNotification.IRequest;
  export type Response = IPageIAiCommerceFavoritesProductNotification;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/buyer/favorites/products/:favoriteProductId/notifications",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/buyer/favorites/products/${encodeURIComponent(props.favoriteProductId ?? "null")}/notifications`;
  export const random = (): IPageIAiCommerceFavoritesProductNotification =>
    typia.random<IPageIAiCommerceFavoritesProductNotification>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteProductId")(() =>
        typia.assert(props.favoriteProductId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a specific notification for a user's favorited
 * product (ai_commerce_favorites_products and
 * ai_commerce_favorites_notifications).
 *
 * This operation enables a user to retrieve all available detail for a single
 * notification event associated with one of their favorited products.
 * Information returned includes type of notification (e.g., price drop,
 * restock, sale), status (delivered, read), timestamp history, related product
 * snapshot, and any contextual or business metadata.
 *
 * Only the owner of the favorited product entry can access notification detail,
 * and access is further restricted if the favorite has been deleted or revoked.
 * The API ensures secure handling by verifying the user's rights to the
 * favorite/notification pairing. If the notification entry is not found or does
 * not belong to the user's favorite, an appropriate error is returned.
 *
 * Underlying tables are ai_commerce_favorites_products and
 * ai_commerce_favorites_notifications. This endpoint supports use cases such as
 * custom notification interfaces, personal notification auditing, and
 * user-facing notification detail screens. Access and retrieval are logged to
 * support audit trails and system monitoring.
 *
 * @param props.connection
 * @param props.favoriteProductId The unique identifier of the favorited product
 *   to which the notification belongs.
 * @param props.notificationId The unique identifier of the notification event
 *   to retrieve.
 * @path /aiCommerce/buyer/favorites/products/:favoriteProductId/notifications/:notificationId
 * @accessor api.functional.aiCommerce.buyer.favorites.products.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * The unique identifier of the favorited product to which the
     * notification belongs.
     */
    favoriteProductId: string & tags.Format<"uuid">;

    /** The unique identifier of the notification event to retrieve. */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceFavoritesProductNotification;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/buyer/favorites/products/:favoriteProductId/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/favorites/products/${encodeURIComponent(props.favoriteProductId ?? "null")}/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IAiCommerceFavoritesProductNotification =>
    typia.random<IAiCommerceFavoritesProductNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteProductId")(() =>
        typia.assert(props.favoriteProductId),
      );
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
