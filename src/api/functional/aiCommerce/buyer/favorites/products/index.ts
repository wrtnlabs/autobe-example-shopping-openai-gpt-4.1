import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceFavoritesProducts } from "../../../../../structures/IAiCommerceFavoritesProducts";
import { IAiCommerceFavoritesProduct } from "../../../../../structures/IAiCommerceFavoritesProduct";
import { IAiCommercePageIFavoritesProduct } from "../../../../../structures/IAiCommercePageIFavoritesProduct";
export * as alerts from "./alerts/index";
export * as notifications from "./notifications/index";

/**
 * Create a new product favorite and return the record with snapshot and folder
 * data.
 *
 * Create a new product favorite entry for an authenticated user, storing an
 * association between the user and a target product along with organizational
 * metadata (folder, label) and a product snapshot at the time of favoriting.
 * The favorite is unique per user-product pair, and attempts to favorite the
 * same product twice will result in a validation error.
 *
 * The operation supports batch notification triggers and alert configurations
 * following successful creation. Only logged-in users can favorite products.
 * Favorite creation is essential for supporting personalized product
 * recommendations, notifications, and future product status comparisons.
 *
 * Upon success, the operation returns the favorite entry as stored, including
 * references to the snapshot, any folder or label, and timestamps.
 *
 * @param props.connection
 * @param props.body Details for creating a new product favorite, including
 *   product ID and optional organization settings.
 * @path /aiCommerce/buyer/favorites/products
 * @accessor api.functional.aiCommerce.buyer.favorites.products.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details for creating a new product favorite, including product ID and
     * optional organization settings.
     */
    body: IAiCommerceFavoritesProducts.ICreate;
  };
  export type Body = IAiCommerceFavoritesProducts.ICreate;
  export type Response = IAiCommerceFavoritesProducts;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/buyer/favorites/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/buyer/favorites/products";
  export const random = (): IAiCommerceFavoritesProducts =>
    typia.random<IAiCommerceFavoritesProducts>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate a user's product favorites
 * (ai_commerce_favorites_products table).
 *
 * Allows authenticated users to retrieve a paginated, filtered, and optionally
 * sorted list of their product favorites for display, organization, and further
 * action. Users may filter by product_id, creation date, label, folder, or
 * other summary fields as per business rules. This operation is scoped to only
 * the favorites accessible to the calling user unless executed by an admin.
 *
 * All filtering and paging fields must match the
 * IAiCommerceFavoritesProduct.IRequest schema. Output is always a paginated
 * summary for efficient UI consumption and analytics.
 *
 * Errors include unauthorized access, invalid search parameters, or failures to
 * locate matching records. This endpoint enables user-friendly favorites list
 * UI as well as batch organization, alert setup, and cross-linking with
 * recommendations or notification logic. It should be used together with
 * favorites add, remove, and detail APIs for full-featured personalization.
 *
 * @param props.connection
 * @param props.body Favorite product filter/search and pagination request
 *   parameters (IAiCommerceFavoritesProduct.IRequest).
 * @path /aiCommerce/buyer/favorites/products
 * @accessor api.functional.aiCommerce.buyer.favorites.products.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Favorite product filter/search and pagination request parameters
     * (IAiCommerceFavoritesProduct.IRequest).
     */
    body: IAiCommerceFavoritesProduct.IRequest;
  };
  export type Body = IAiCommerceFavoritesProduct.IRequest;
  export type Response = IAiCommercePageIFavoritesProduct.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/buyer/favorites/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/buyer/favorites/products";
  export const random = (): IAiCommercePageIFavoritesProduct.ISummary =>
    typia.random<IAiCommercePageIFavoritesProduct.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific product favorite by favoriteProductId from
 * ai_commerce_favorites_products.
 *
 * Retrieve information on a single product favorite using its unique ID from
 * the ai_commerce_favorites_products table.
 *
 * This operation fetches not only the favorite linkage, but also related
 * snapshot information, label or folder organization, and creation or update
 * timestamps. Only authenticated users can access their own favorites. The
 * result provides a precise reflection of the favorited product's state at the
 * moment it was favorited, supporting UX personalization and compliance
 * evidence requirements.
 *
 * Errors occur if the favorite is not found, if it belongs to another user, or
 * if the favorite has been deleted. This operation is commonly used in
 * conjunction with organization, alert, or notification flows for user
 * favorites.
 *
 * @param props.connection
 * @param props.favoriteProductId Unique identifier of the product favorite to
 *   retrieve.
 * @path /aiCommerce/buyer/favorites/products/:favoriteProductId
 * @accessor api.functional.aiCommerce.buyer.favorites.products.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the product favorite to retrieve. */
    favoriteProductId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceFavoritesProducts;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/buyer/favorites/products/:favoriteProductId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/favorites/products/${encodeURIComponent(props.favoriteProductId ?? "null")}`;
  export const random = (): IAiCommerceFavoritesProducts =>
    typia.random<IAiCommerceFavoritesProducts>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteProductId")(() =>
        typia.assert(props.favoriteProductId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update metadata for an existing product favorite by favoriteProductId.
 *
 * Update the metadata for a product favorite (such as label or folder
 * assignment) without modifying the fundamental favorite-product linkage or the
 * product snapshot. The operation works exclusively on the user's own favorites
 * and will fail if the favoriteProductId does not exist or is already deleted.
 *
 * Only permitted fields such as label, folder, or alert configuration are
 * editable; the associated product and original snapshot remain immutable for
 * audit and compliance.
 *
 * Upon success, the operation returns the updated favorite entry. If the
 * favorite is not found or does not belong to the user, a 404 error is
 * returned.
 *
 * @param props.connection
 * @param props.favoriteProductId Unique identifier of the product favorite to
 *   update.
 * @param props.body Fields for updating the product favorite's label, folder,
 *   or alert configuration.
 * @path /aiCommerce/buyer/favorites/products/:favoriteProductId
 * @accessor api.functional.aiCommerce.buyer.favorites.products.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the product favorite to update. */
    favoriteProductId: string & tags.Format<"uuid">;

    /**
     * Fields for updating the product favorite's label, folder, or alert
     * configuration.
     */
    body: IAiCommerceFavoritesProducts.IUpdate;
  };
  export type Body = IAiCommerceFavoritesProducts.IUpdate;
  export type Response = IAiCommerceFavoritesProducts;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/buyer/favorites/products/:favoriteProductId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/buyer/favorites/products/${encodeURIComponent(props.favoriteProductId ?? "null")}`;
  export const random = (): IAiCommerceFavoritesProducts =>
    typia.random<IAiCommerceFavoritesProducts>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteProductId")(() =>
        typia.assert(props.favoriteProductId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase (soft delete) a specified product favorite by favoriteProductId.
 *
 * Erase (soft delete) the specified product favorite using its unique ID. After
 * this operation, the favorite will not appear in personalized product or
 * favorites lists, and no new notifications or alerts will be sent. The record
 * is retained for audit purposes, and the product snapshot remains available
 * for compliance.
 *
 * Users can only erase their own favorites, and attempts to erase a nonexistent
 * or another user's favorite will result in an error.
 *
 * @param props.connection
 * @param props.favoriteProductId Unique identifier of the product favorite to
 *   erase (soft delete).
 * @path /aiCommerce/buyer/favorites/products/:favoriteProductId
 * @accessor api.functional.aiCommerce.buyer.favorites.products.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the product favorite to erase (soft delete). */
    favoriteProductId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/buyer/favorites/products/:favoriteProductId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/buyer/favorites/products/${encodeURIComponent(props.favoriteProductId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteProductId")(() =>
        typia.assert(props.favoriteProductId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
