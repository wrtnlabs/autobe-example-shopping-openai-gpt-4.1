import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSellerKyc } from "../../../../structures/IAiCommerceSellerKyc";

/**
 * Create a new seller KYC verification submission (onboarding, compliance).
 *
 * This API operation allows a seller or an authorized onboarding workflow to
 * create a new KYC submission by providing necessary KYC data in the request
 * body. The sent data includes details like document type, provided metadata,
 * and onboarding references, as required by the ai_commerce_seller_kyc schema.
 *
 * Upon submission, the record is stored with status field set to a
 * workflow-appropriate initial value (such as 'pending'). Further processing,
 * review, or approval will follow according to compliance workflow. All fields
 * and relationships from the schema must be supplied.
 *
 * This operation can be used by the onboarding automation system or authorized
 * sellers. Access control should prevent unauthorized KYC creation by limiting
 * to sellers in the onboarding stage or admins acting on behalf of applicants.
 *
 * @param props.connection
 * @param props.body KYC document and metadata as required for
 *   ai_commerce_seller_kyc creation.
 * @path /aiCommerce/seller/sellerKyc
 * @accessor api.functional.aiCommerce.seller.sellerKyc.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * KYC document and metadata as required for ai_commerce_seller_kyc
     * creation.
     */
    body: IAiCommerceSellerKyc.ICreate;
  };
  export type Body = IAiCommerceSellerKyc.ICreate;
  export type Response = IAiCommerceSellerKyc;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/sellerKyc",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/sellerKyc";
  export const random = (): IAiCommerceSellerKyc =>
    typia.random<IAiCommerceSellerKyc>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
