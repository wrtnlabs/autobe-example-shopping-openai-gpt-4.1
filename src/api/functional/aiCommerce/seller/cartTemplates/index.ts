import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceCartTemplate } from "../../../../structures/IAiCommerceCartTemplate";
import { IPageIAiCommerceCartTemplate } from "../../../../structures/IPageIAiCommerceCartTemplate";

/**
 * Create a new cart template in ai_commerce_cart_templates.
 *
 * Registers a new cart template for a seller or administrator in
 * ai_commerce_cart_templates. All fields validated for requiredness,
 * uniqueness, and role constraints. Buyers may not use this endpoint. Success
 * returns the complete new template as created.
 *
 * @param props.connection
 * @param props.body Request body for cart template creation
 *   (IAiCommerceCartTemplate.ICreate), defining all template and association
 *   fields.
 * @path /aiCommerce/seller/cartTemplates
 * @accessor api.functional.aiCommerce.seller.cartTemplates.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Request body for cart template creation
     * (IAiCommerceCartTemplate.ICreate), defining all template and
     * association fields.
     */
    body: IAiCommerceCartTemplate.ICreate;
  };
  export type Body = IAiCommerceCartTemplate.ICreate;
  export type Response = IAiCommerceCartTemplate;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/cartTemplates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/cartTemplates";
  export const random = (): IAiCommerceCartTemplate =>
    typia.random<IAiCommerceCartTemplate>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and paginate ai_commerce_cart_templates (cart templates).
 *
 * Searches, filters, and paginates cart templates using criteria like name,
 * creator, store, and status from ai_commerce_cart_templates. Sellers only see
 * their own; admins have global audit access. Supports partial matches and sort
 * order. Pagination metadata in response. Intended for template management,
 * campaign support, or troubleshooting rollouts.
 *
 * @param props.connection
 * @param props.body Request body with filters/pagination for searching cart
 *   templates, per IAiCommerceCartTemplate.IRequest.
 * @path /aiCommerce/seller/cartTemplates
 * @accessor api.functional.aiCommerce.seller.cartTemplates.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request body with filters/pagination for searching cart templates,
     * per IAiCommerceCartTemplate.IRequest.
     */
    body: IAiCommerceCartTemplate.IRequest;
  };
  export type Body = IAiCommerceCartTemplate.IRequest;
  export type Response = IPageIAiCommerceCartTemplate.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/cartTemplates",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/cartTemplates";
  export const random = (): IPageIAiCommerceCartTemplate.ISummary =>
    typia.random<IPageIAiCommerceCartTemplate.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed cart template by cartTemplateId from ai_commerce_cart_templates.
 *
 * Returns all properties of the ai_commerce_cart_templates row for the
 * cartTemplateId. If a seller, they must own the template; admins can retrieve
 * any. Used for review, configuration, edit flows. Returns error on not-found
 * or unauthorized access.
 *
 * @param props.connection
 * @param props.cartTemplateId Unique identifier of the cart template to fetch,
 *   as UUID.
 * @path /aiCommerce/seller/cartTemplates/:cartTemplateId
 * @accessor api.functional.aiCommerce.seller.cartTemplates.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the cart template to fetch, as UUID. */
    cartTemplateId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceCartTemplate;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/cartTemplates/:cartTemplateId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/cartTemplates/${encodeURIComponent(props.cartTemplateId ?? "null")}`;
  export const random = (): IAiCommerceCartTemplate =>
    typia.random<IAiCommerceCartTemplate>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartTemplateId")(() => typia.assert(props.cartTemplateId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update properties of an existing cart template by cartTemplateId.
 *
 * Permits the updater (admin or owning seller) to change template properties
 * (name, description, config, assignment, status) for an entity in
 * ai_commerce_cart_templates. Handles audit, naming, uniqueness, and ownership
 * per business rules. Denies requests lacking permission or validity.
 *
 * @param props.connection
 * @param props.cartTemplateId Unique identifier for cart template update, as
 *   UUID.
 * @param props.body Fields to update on the target template
 *   (IAiCommerceCartTemplate.IUpdate).
 * @path /aiCommerce/seller/cartTemplates/:cartTemplateId
 * @accessor api.functional.aiCommerce.seller.cartTemplates.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for cart template update, as UUID. */
    cartTemplateId: string & tags.Format<"uuid">;

    /**
     * Fields to update on the target template
     * (IAiCommerceCartTemplate.IUpdate).
     */
    body: IAiCommerceCartTemplate.IUpdate;
  };
  export type Body = IAiCommerceCartTemplate.IUpdate;
  export type Response = IAiCommerceCartTemplate;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/cartTemplates/:cartTemplateId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/cartTemplates/${encodeURIComponent(props.cartTemplateId ?? "null")}`;
  export const random = (): IAiCommerceCartTemplate =>
    typia.random<IAiCommerceCartTemplate>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("cartTemplateId")(() => typia.assert(props.cartTemplateId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
