import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceStores } from "../../../../structures/IAiCommerceStores";
import { IPageIAiCommerceStores } from "../../../../structures/IPageIAiCommerceStores";

/**
 * Create a new store (ai_commerce_stores table) for an authenticated seller or
 * admin.
 *
 * This endpoint enables an authenticated seller (or admin) to register a new
 * store in the system. Store creation requires a valid seller_profile_id and
 * owner_user_id, and unique store_code. Business logic validates the
 * completeness of all fields, veracity of linked profiles, and the absence of
 * duplicates for critical identifiers.
 *
 * Upon successful creation, the endpoint returns the full store record with all
 * relational data, including identifiers, status, and the owner profile.
 * Security checks ensure only authorized sellers or platform admins can invoke
 * this operation. Any errors (validation, duplication, permission) result in
 * explicit business error codes. All creation events are strictly logged for
 * compliance purposes.
 *
 * @param props.connection
 * @param props.body Payload for creating a store, including core fields and
 *   business metadata as required by ai_commerce_stores.
 * @path /aiCommerce/seller/stores
 * @accessor api.functional.aiCommerce.seller.stores.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Payload for creating a store, including core fields and business
     * metadata as required by ai_commerce_stores.
     */
    body: IAiCommerceStores.ICreate;
  };
  export type Body = IAiCommerceStores.ICreate;
  export type Response = IAiCommerceStores;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/stores",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/stores";
  export const random = (): IAiCommerceStores =>
    typia.random<IAiCommerceStores>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of stores (ai_commerce_stores
 * table).
 *
 * This API operation returns a paginated and searchable list of stores from the
 * ai_commerce_stores table. Advanced filtering can be performed on fields such
 * as store_name, store_code, approval_status, and owner_user_id, supporting
 * business workflows for sellers and platform administrators.
 *
 * Sellers are restricted to their own stores, while admins can query the entire
 * set. Buyers and visitors, if enabled, may only see public/active stores,
 * subject to business rules and approval_status. The response includes
 * pagination, summary data for each store (store ID, name, code, status), and
 * may contain additional analytics fields if available through related tables.
 *
 * The listing supports sorting, search queries, and full-text indexing of store
 * names/codes. Business logic enforces role-based visibility and hides stores
 * that are closed or suspended for most roles. Extensive validation is
 * performed on query criteria and any errors are returned as
 * business-validation failures.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination parameters for store
 *   retrieval (fields from ai_commerce_stores, full-text search, etc).
 * @path /aiCommerce/seller/stores
 * @accessor api.functional.aiCommerce.seller.stores.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, and pagination parameters for store retrieval (fields
     * from ai_commerce_stores, full-text search, etc).
     */
    body: IAiCommerceStores.IRequest;
  };
  export type Body = IAiCommerceStores.IRequest;
  export type Response = IPageIAiCommerceStores.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/stores",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/stores";
  export const random = (): IPageIAiCommerceStores.ISummary =>
    typia.random<IPageIAiCommerceStores.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full store details (ai_commerce_stores table) for a given storeId.
 *
 * This API endpoint returns a detailed store record from the ai_commerce_stores
 * table, identified by storeId. The response contains all defined fields,
 * including store_name, store_code, store_metadata, approval_status,
 * closure_reason, and relational references such as owner_user_id and
 * seller_profile_id.
 *
 * Security checks ensure that sellers only access their own stores, while
 * admins have full visibility. Detailed store settings and analytics can be
 * included in the response through entity relationships, subject to business
 * rules and performance considerations.
 *
 * If the store does not exist or access is unauthorized, appropriate errors are
 * returned. This endpoint is used to drive business workflows for store
 * management, analytics, and audit trails. All access is logged for
 * compliance.
 *
 * @param props.connection
 * @param props.storeId The unique identifier of the store to retrieve.
 * @path /aiCommerce/seller/stores/:storeId
 * @accessor api.functional.aiCommerce.seller.stores.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the store to retrieve. */
    storeId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceStores;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/stores/:storeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/stores/${encodeURIComponent(props.storeId ?? "null")}`;
  export const random = (): IAiCommerceStores =>
    typia.random<IAiCommerceStores>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeId")(() => typia.assert(props.storeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a store (ai_commerce_stores table) identified by storeId for the
 * authenticated seller or admin.
 *
 * This endpoint allows a seller or admin to update the information of a
 * specific store, as identified by storeId. Permitted fields for editing
 * include store_name, store_metadata, approval_status, closure_reason, and
 * related configuration. The modification is allowed only for the store's owner
 * (seller) or a platform admin, and all field values are validated according to
 * the ai_commerce_stores Prisma schema.
 *
 * On successful update, the response contains the updated store record.
 * Unauthorized attempts, invalid data, or access violations return explicit
 * business error codes. This update is audit logged for platform compliance and
 * forensics.
 *
 * @param props.connection
 * @param props.storeId Unique identifier of the store to be updated (UUID).
 * @param props.body Payload of updatable store fields according to
 *   ai_commerce_stores schema.
 * @path /aiCommerce/seller/stores/:storeId
 * @accessor api.functional.aiCommerce.seller.stores.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the store to be updated (UUID). */
    storeId: string & tags.Format<"uuid">;

    /**
     * Payload of updatable store fields according to ai_commerce_stores
     * schema.
     */
    body: IAiCommerceStores.IUpdate;
  };
  export type Body = IAiCommerceStores.IUpdate;
  export type Response = IAiCommerceStores;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/stores/:storeId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/stores/${encodeURIComponent(props.storeId ?? "null")}`;
  export const random = (): IAiCommerceStores =>
    typia.random<IAiCommerceStores>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeId")(() => typia.assert(props.storeId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a store (ai_commerce_stores table) by storeId. Hard delete
 * only.
 *
 * This API deletes a store from the ai_commerce_stores table, permanently
 * removing the database record identified by storeId, as no soft delete field
 * is defined. Only the store owner (seller) or admin can invoke this operation,
 * governed by permissions and business rules.
 *
 * Prior to deletion, the platform validates dependencies to prevent breaking
 * referential integrity, such as linked products or analytics. Any violation
 * results in business-level error reporting. The delete operation itself is
 * strictly recorded in audit logs for platform compliance and legal review.
 *
 * If successful, the operation completes without a response body. Unauthorized
 * access, non-existent records, or dependency violations will fail with
 * appropriate errors.
 *
 * @param props.connection
 * @param props.storeId Unique identifier of the store to be deleted (UUID).
 * @path /aiCommerce/seller/stores/:storeId
 * @accessor api.functional.aiCommerce.seller.stores.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the store to be deleted (UUID). */
    storeId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/stores/:storeId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/stores/${encodeURIComponent(props.storeId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeId")(() => typia.assert(props.storeId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
