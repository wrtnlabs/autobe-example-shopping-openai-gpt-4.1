import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceSellerAppeal } from "../../../../structures/IAiCommerceSellerAppeal";
import { IPageIAiCommerceSellerAppeal } from "../../../../structures/IPageIAiCommerceSellerAppeal";

/**
 * Submit a new seller appeal regarding penalties, workflow actions, or payout
 * holds (ai_commerce_seller_appeals).
 *
 * This API endpoint enables a seller to formally submit an appeal regarding
 * platform actions such as rejections, penalties, demotions, payout blocks, or
 * other negative workflow outcomes. Submissions are recorded in the
 * ai_commerce_seller_appeals table, including the type of appeal, supporting
 * evidence (as JSON), and an open status pending admin or business review.
 *
 * User permissions are checked to ensure that only the owner of the seller
 * profile may appeal on their own account. The platform retains full audit
 * trails and evidence snapshots to support compliance and business reporting.
 * The operation ensures the completeness of appeal data and enforces one appeal
 * per unique case, per seller, preventing duplicate submissions for the same
 * workflow event.
 *
 * Related business APIs may include endpoints to retrieve the status of current
 * appeals, administrative review flows, and dispute documentation uploads.
 * Appeal workflow logic is aligned with the requirements for immutable audit
 * logs, allowing for reproducible evidence handling and eventual notification
 * of resolution outcomes to the appellant.
 *
 * @param props.connection
 * @param props.body Details of the seller appeal to be submitted, including
 *   type, attached evidence, and explanation.
 * @path /aiCommerce/seller/sellerAppeals
 * @accessor api.functional.aiCommerce.seller.sellerAppeals.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details of the seller appeal to be submitted, including type,
     * attached evidence, and explanation.
     */
    body: IAiCommerceSellerAppeal.ICreate;
  };
  export type Body = IAiCommerceSellerAppeal.ICreate;
  export type Response = IAiCommerceSellerAppeal;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/sellerAppeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/sellerAppeals";
  export const random = (): IAiCommerceSellerAppeal =>
    typia.random<IAiCommerceSellerAppeal>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list seller appeal cases (ai_commerce_seller_appeals) with
 * advanced filtering.
 *
 * Search and list seller appeal cases by various filtering parameters (status,
 * appeal type, date, and seller profile) with pagination and sorting. Provides
 * all details needed for fair review and timely dispute resolution, including
 * the original appeal reason, evidence, current status, and admin/seller
 * outcome notes.
 *
 * Role-based security: sellers may only access records concerning their own
 * profile; administrators can view all appeals platform-wide. All actions and
 * responses are appropriately logged for compliance. Output is designed for
 * efficient case triage, review, and audit workflows.
 *
 * @param props.connection
 * @param props.body Filter criteria and pagination settings for listing seller
 *   appeals.
 * @path /aiCommerce/seller/sellerAppeals
 * @accessor api.functional.aiCommerce.seller.sellerAppeals.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter criteria and pagination settings for listing seller appeals. */
    body: IAiCommerceSellerAppeal.IRequest;
  };
  export type Body = IAiCommerceSellerAppeal.IRequest;
  export type Response = IPageIAiCommerceSellerAppeal;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/sellerAppeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/sellerAppeals";
  export const random = (): IPageIAiCommerceSellerAppeal =>
    typia.random<IPageIAiCommerceSellerAppeal>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific seller appeal case by ID (ai_commerce_seller_appeals).
 *
 * Fetch all available information for a seller appeal by its unique identifier.
 * Includes the appeal reason, type, evidence, timeline, administrator notes,
 * and all relevant workflow status fields as recorded in the database. Used for
 * real-time dispute investigation, compliance documentation, and resolution
 * workflows.
 *
 * Strict role controls apply: only the seller involved and administrators have
 * access to this operation. Record access and case review events are
 * audit-logged. If the provided sellerAppealId does not exist, an appropriate
 * error is returned.
 *
 * @param props.connection
 * @param props.sellerAppealId Unique identifier for the seller appeal record
 * @path /aiCommerce/seller/sellerAppeals/:sellerAppealId
 * @accessor api.functional.aiCommerce.seller.sellerAppeals.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the seller appeal record */
    sellerAppealId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceSellerAppeal;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/sellerAppeals/:sellerAppealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/sellerAppeals/${encodeURIComponent(props.sellerAppealId ?? "null")}`;
  export const random = (): IAiCommerceSellerAppeal =>
    typia.random<IAiCommerceSellerAppeal>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerAppealId")(() => typia.assert(props.sellerAppealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a pending seller appeal (ai_commerce_seller_appeals) by ID.
 *
 * This API endpoint allows for modifications to an open seller appeal entry,
 * identified by sellerAppealId. Updates can be made to the supporting evidence,
 * explanation, or appeal data fields, as long as the appeal has not reached a
 * 'closed' or 'finalized' status. The operation is strictly tracked via
 * immutable audit logs for dispute, compliance, and business workflow
 * traceability.
 *
 * Security logic ensures only the original appellant (seller) or an admin can
 * perform updates; role checks are enforced at the application layer. The
 * operation references the ai_commerce_seller_appeals table and its fields for
 * updating records while preserving all prior versions for compliance.
 *
 * Validation logic may include checks for non-modifiable appeal statuses,
 * evidence data formatting, and preventing overwriting resolved cases. Error
 * responses are returned for forbidden, locked, or invalid state transitions.
 * This endpoint should be used in conjunction with GET/detail and admin review
 * APIs in the broader dispute resolution workflow.
 *
 * @param props.connection
 * @param props.sellerAppealId Unique identifier of the seller appeal to update.
 * @param props.body Updated seller appeal data, evidence, or status information
 *   (if permitted).
 * @path /aiCommerce/seller/sellerAppeals/:sellerAppealId
 * @accessor api.functional.aiCommerce.seller.sellerAppeals.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the seller appeal to update. */
    sellerAppealId: string & tags.Format<"uuid">;

    /**
     * Updated seller appeal data, evidence, or status information (if
     * permitted).
     */
    body: IAiCommerceSellerAppeal.IUpdate;
  };
  export type Body = IAiCommerceSellerAppeal.IUpdate;
  export type Response = IAiCommerceSellerAppeal;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/sellerAppeals/:sellerAppealId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/sellerAppeals/${encodeURIComponent(props.sellerAppealId ?? "null")}`;
  export const random = (): IAiCommerceSellerAppeal =>
    typia.random<IAiCommerceSellerAppeal>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerAppealId")(() => typia.assert(props.sellerAppealId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Withdraw (soft delete) a pending seller appeal (ai_commerce_seller_appeals)
 * by ID.
 *
 * This API operation enables a seller to withdraw their own appeal for cases
 * where the issue has been resolved or the appeal is no longer relevant. The
 * soft delete is applied by setting the deleted_at timestamp for the record in
 * ai_commerce_seller_appeals, preserving the audit trail and evidentiary
 * requirements for compliance.
 *
 * Only appeals with open or reviewable status may be withdrawn by the original
 * appellant (seller); appeals in finalized, resolved, or locked states cannot
 * be overwritten or removed without admin intervention. Error responses inform
 * users of ineligible status transitions or lack of access rights. This API
 * must interoperate with audit logging and notification mechanisms to keep all
 * parties informed of appeal record changes.
 *
 * Platform admins can restore or permanently erase appeals as per escalation
 * procedures, but sellers are limited to soft-deleting their own unresolved
 * appeals.
 *
 * @param props.connection
 * @param props.sellerAppealId Unique identifier of the seller appeal to
 *   withdraw (soft delete).
 * @path /aiCommerce/seller/sellerAppeals/:sellerAppealId
 * @accessor api.functional.aiCommerce.seller.sellerAppeals.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the seller appeal to withdraw (soft delete). */
    sellerAppealId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/sellerAppeals/:sellerAppealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/sellerAppeals/${encodeURIComponent(props.sellerAppealId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sellerAppealId")(() => typia.assert(props.sellerAppealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
