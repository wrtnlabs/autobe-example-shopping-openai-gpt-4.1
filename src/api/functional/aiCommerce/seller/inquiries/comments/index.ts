import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceComment } from "../../../../../structures/IAiCommerceComment";
import { IPageIAiCommerceComment } from "../../../../../structures/IPageIAiCommerceComment";

/**
 * Create a comment under a specific inquiry (ai_commerce_comments).
 *
 * This operation creates a new comment and attaches it to the given inquiry,
 * using fields from ai_commerce_comments such as author_id, inquiry_id, body,
 * status (draft/published), and timestamps. The system validates input
 * (including non-empty content, permission to post, and correct relationship to
 * inquiry), checks spam/moderation rules, and returns the new comment's full
 * record.
 *
 * Buyers may only respond to their own or public inquiries; sellers may reply
 * to inquiries about their products; admins may post on any inquiry. Threaded
 * replies (comments on comments) are supported. Error handling covers invalid
 * inquiry, permission denial (unauthorized), input validation errors, or
 * moderation queue results.
 *
 * This endpoint integrates with moderation, notification, and history endpoints
 * for a full comment-on-inquiry workflow.
 *
 * @param props.connection
 * @param props.inquiryId The inquiry to attach the new comment to.
 * @param props.body Required and optional fields to create a new inquiry
 *   comment, including body, optional replied-to comment, and metadata.
 * @path /aiCommerce/seller/inquiries/:inquiryId/comments
 * @accessor api.functional.aiCommerce.seller.inquiries.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** The inquiry to attach the new comment to. */
    inquiryId: string & tags.Format<"uuid">;

    /**
     * Required and optional fields to create a new inquiry comment,
     * including body, optional replied-to comment, and metadata.
     */
    body: IAiCommerceComment.ICreate;
  };
  export type Body = IAiCommerceComment.ICreate;
  export type Response = IAiCommerceComment;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/inquiries/:inquiryId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments`;
  export const random = (): IAiCommerceComment =>
    typia.random<IAiCommerceComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get paginated list of comments under a specific inquiry
 * (ai_commerce_comments).
 *
 * Retrieve a paginated, filtered list of comments for a given inquiry from the
 * ai_commerce_comments table. This supports advanced querying on properties
 * like author, status (published/moderated), timestamp, and text content. Only
 * comments directly attached to the specified inquiry (inquiryId) are
 * included.
 *
 * Security ensures that buyers see public or their own comments, sellers see
 * comments on their products' inquiries, and admins have full access. The
 * operation checks for inquiry existence and user authorization. Results are
 * paginated to support UI performance, and include summary information suitable
 * for listing. Errors include not found, unauthorized access, or invalid
 * parameters.
 *
 * The endpoint supports integration with moderation tools and may be combined
 * with comment creation or detail endpoints for a complete inquiry comment
 * workflow.
 *
 * @param props.connection
 * @param props.inquiryId The unique identifier of the target inquiry to
 *   retrieve comments for.
 * @param props.body Advanced search, filter, and pagination options for listing
 *   comments on an inquiry.
 * @path /aiCommerce/seller/inquiries/:inquiryId/comments
 * @accessor api.functional.aiCommerce.seller.inquiries.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** The unique identifier of the target inquiry to retrieve comments for. */
    inquiryId: string & tags.Format<"uuid">;

    /**
     * Advanced search, filter, and pagination options for listing comments
     * on an inquiry.
     */
    body: IAiCommerceComment.IRequest;
  };
  export type Body = IAiCommerceComment.IRequest;
  export type Response = IPageIAiCommerceComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/inquiries/:inquiryId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments`;
  export const random = (): IPageIAiCommerceComment.ISummary =>
    typia.random<IPageIAiCommerceComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detail of a single comment for a specific inquiry (ai_commerce_comments).
 *
 * Fetch a single comment by its commentId within the context of an inquiry
 * (inquiryId). Ensures the referenced comment not only exists but is linked to
 * the provided inquiry. Reads all primary fields of the ai_commerce_comments
 * table, including body, author, timestamps, status, and parent (if threaded).
 *
 * Authorization assures that only viewers who have permission on the inquiry
 * (e.g., the author, related seller, admin) may access private or non-public
 * comments. Returns all detail fields, as well as any moderation or reply links
 * if authorized. Errors include not found (for comment or parent inquiry) or
 * insufficient privileges.
 *
 * This endpoint is commonly used in UI detail pages and as a dependency for
 * moderation or editing endpoints.
 *
 * @param props.connection
 * @param props.inquiryId The unique identifier of the parent inquiry this
 *   comment belongs to.
 * @param props.commentId The unique identifier of the comment to retrieve.
 * @path /aiCommerce/seller/inquiries/:inquiryId/comments/:commentId
 * @accessor api.functional.aiCommerce.seller.inquiries.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the parent inquiry this comment belongs to. */
    inquiryId: string & tags.Format<"uuid">;

    /** The unique identifier of the comment to retrieve. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceComment;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/inquiries/:inquiryId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IAiCommerceComment =>
    typia.random<IAiCommerceComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific comment for an inquiry (ai_commerce_comments).
 *
 * This operation allows the author (or authorized moderator/admin) to edit a
 * comment's contents or metadata. The system ensures that the new data for
 * body/status is properly validated (non-empty, no prohibited content), records
 * change history (old vs. new), and triggers moderation or notification logic
 * as appropriate.
 *
 * CommentId must belong to the specified inquiryId, and the editor must be the
 * comment author or have edit privileges (admin). Status changes are allowed
 * only for authorized actors. Failure modes include non-existent inquiry or
 * comment, unauthorized edit attempt, or input validation failure.
 *
 * This operation supports revision/audit trails for compliance, and is often
 * paired with comment retrieval or listing endpoints for seamless user flows.
 *
 * @param props.connection
 * @param props.inquiryId The unique identifier of the inquiry containing the
 *   comment to update.
 * @param props.commentId The unique identifier of the comment to update.
 * @param props.body Patch object with modifiable comment fields such as
 *   content/body and status.
 * @path /aiCommerce/seller/inquiries/:inquiryId/comments/:commentId
 * @accessor api.functional.aiCommerce.seller.inquiries.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the inquiry containing the comment to
     * update.
     */
    inquiryId: string & tags.Format<"uuid">;

    /** The unique identifier of the comment to update. */
    commentId: string & tags.Format<"uuid">;

    /**
     * Patch object with modifiable comment fields such as content/body and
     * status.
     */
    body: IAiCommerceComment.IUpdate;
  };
  export type Body = IAiCommerceComment.IUpdate;
  export type Response = IAiCommerceComment;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/inquiries/:inquiryId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IAiCommerceComment =>
    typia.random<IAiCommerceComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a comment from a specific inquiry (ai_commerce_comments, hard delete).
 *
 * Removes a comment referenced by commentId from under the specified inquiryId,
 * only if the user is the owner or an authorized moderator. The operation
 * checks that the comment is linked to the inquiry, and executes a permanent
 * database deletion (not soft delete), as the ai_commerce_comments schema lacks
 * a soft delete field.
 *
 * Audit logs and moderation histories are retained for legal compliance
 * regardless of record removal. Authorization failures, non-existent resources,
 * or violation of policy (e.g., removing comments under dispute) return
 * appropriate errors.
 *
 * This endpoint does not return the comment body, only a deletion confirmation.
 * Useful for comment management UIs and compliance/appeal workflows.
 *
 * @param props.connection
 * @param props.inquiryId The inquiry containing the comment to delete.
 * @param props.commentId The comment to be deleted.
 * @path /aiCommerce/seller/inquiries/:inquiryId/comments/:commentId
 * @accessor api.functional.aiCommerce.seller.inquiries.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The inquiry containing the comment to delete. */
    inquiryId: string & tags.Format<"uuid">;

    /** The comment to be deleted. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/inquiries/:inquiryId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/inquiries/${encodeURIComponent(props.inquiryId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("inquiryId")(() => typia.assert(props.inquiryId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
