import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceStoreBanking } from "../../../../structures/IAiCommerceStoreBanking";

/**
 * Retrieve seller store banking details by banking record ID
 * (ai_commerce_store_banking).
 *
 * Fetch detailed store banking information linked to a specific seller's store.
 *
 * The operation targets ai_commerce_store_banking by requiring a unique banking
 * record identifier (storeBankingId) in the URL path. Response includes all
 * fields for bank identification and payout configuration, along with the
 * compliance and verification status as maintained in the database.
 *
 * Security enforcement ensures only the authenticated owner (seller) of the
 * store, or an administrator, can access the full banking record; others are
 * denied. Sensitive fields such as account numbers are handled in properly
 * permissioned views. All access is logged for auditability.
 *
 * @param props.connection
 * @param props.storeBankingId Unique identifier for the store banking record to
 *   retrieve
 * @path /aiCommerce/seller/storeBanking/:storeBankingId
 * @accessor api.functional.aiCommerce.seller.storeBanking.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the store banking record to retrieve */
    storeBankingId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceStoreBanking;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/storeBanking/:storeBankingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/storeBanking/${encodeURIComponent(props.storeBankingId ?? "null")}`;
  export const random = (): IAiCommerceStoreBanking =>
    typia.random<IAiCommerceStoreBanking>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeBankingId")(() => typia.assert(props.storeBankingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update store banking details for a seller’s store by banking record ID
 * (ai_commerce_store_banking).
 *
 * Modify an existing store banking configuration by supplying the banking
 * record ID and new field values. All updates are validated against both
 * compliance and business rules before changes are persisted. Updates could
 * trigger re-verification and temporary suspension of payout until approval if
 * sensitive fields (bank account, routing, etc.) change.
 *
 * Only the store’s verified owner or administrators are permitted to update
 * banking records. All modifications are logged for compliance and audit
 * reasons. Sensitive data is stored securely according to industry standards,
 * and changes to critical fields can require additional identity verification
 * or trigger workflow notifications.
 *
 * @param props.connection
 * @param props.storeBankingId Unique identifier for the store banking record to
 *   update
 * @param props.body Updated store banking information. Only modifiable fields
 *   in compliance with business rules are accepted.
 * @path /aiCommerce/seller/storeBanking/:storeBankingId
 * @accessor api.functional.aiCommerce.seller.storeBanking.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the store banking record to update */
    storeBankingId: string & tags.Format<"uuid">;

    /**
     * Updated store banking information. Only modifiable fields in
     * compliance with business rules are accepted.
     */
    body: IAiCommerceStoreBanking.IUpdate;
  };
  export type Body = IAiCommerceStoreBanking.IUpdate;
  export type Response = IAiCommerceStoreBanking;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/storeBanking/:storeBankingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/storeBanking/${encodeURIComponent(props.storeBankingId ?? "null")}`;
  export const random = (): IAiCommerceStoreBanking =>
    typia.random<IAiCommerceStoreBanking>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeBankingId")(() => typia.assert(props.storeBankingId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a store banking record by banking record ID
 * (ai_commerce_store_banking).
 *
 * Delete (permanently) a store banking configuration associated with a seller's
 * store, using the unique storeBankingId. This action is irreversible in the
 * absence of a soft delete column—physical removal occurs unless business
 * policy mandates logical retention for legal or compliance reasons.
 *
 * Only the store’s authorized owner or an administrator may perform this
 * action, and all delete events are strictly logged for compliance. If the
 * record is referenced in unresolved payout actions or required for audit,
 * deletion may be denied or delayed subject to platform rules. Attempts to
 * delete non-existent or unauthorized records will result in clear error
 * messages.
 *
 * @param props.connection
 * @param props.storeBankingId Unique identifier for the store banking record to
 *   delete
 * @path /aiCommerce/seller/storeBanking/:storeBankingId
 * @accessor api.functional.aiCommerce.seller.storeBanking.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the store banking record to delete */
    storeBankingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/storeBanking/:storeBankingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/storeBanking/${encodeURIComponent(props.storeBankingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("storeBankingId")(() => typia.assert(props.storeBankingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new store banking/payout record for a seller’s store
 * (ai_commerce_store_banking).
 *
 * Register new banking details for a seller’s store, providing all
 * compliance-required fields like bank name, account number, account holder's
 * name, and routing code. Upon submission, the banking record is stored pending
 * verification and compliance checks. Only the authenticated store owner or
 * administrators may create new banking configurations.
 *
 * All input fields are validated for financial industry compliance and business
 * logic requirements. Sensitive information is encrypted at rest and only
 * surfaced to permissioned users. Creation events are audit-logged for legal
 * and dispute resolution needs. Automated verification status and verification
 * flags are updated post-creation according to business rules.
 *
 * @param props.connection
 * @param props.body Information required to create a new store banking
 *   configuration record.
 * @path /aiCommerce/seller/storeBanking
 * @accessor api.functional.aiCommerce.seller.storeBanking.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Information required to create a new store banking configuration
     * record.
     */
    body: IAiCommerceStoreBanking.ICreate;
  };
  export type Body = IAiCommerceStoreBanking.ICreate;
  export type Response = IAiCommerceStoreBanking;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/storeBanking",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/storeBanking";
  export const random = (): IAiCommerceStoreBanking =>
    typia.random<IAiCommerceStoreBanking>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
