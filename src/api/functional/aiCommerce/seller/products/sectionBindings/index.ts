import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductSectionBinding } from "../../../../../structures/IAiCommerceProductSectionBinding";
import { IPageIAiCommerceProductSectionBinding } from "../../../../../structures/IPageIAiCommerceProductSectionBinding";

/**
 * Create a new product-section binding (ai_commerce_product_section_bindings).
 *
 * This operation enables a seller or admin to add a product to a specific
 * merchandising section (such as 'Best Sellers' or 'Curated Picks'), which
 * affect how products are presented to shoppers. It must validate that the
 * requestor is authorized for the product in question and that the section
 * exists and is active. The business rules require that a unique binding is
 * maintained for each product-section pair, and attempts to create duplicates
 * are rejected with a detailed error.
 *
 * The operation is fully audited, supporting revert and compliance workflows.
 * Related endpoints include deleting a binding, listing all bindings, or
 * updating display order. Inputs and outputs reference
 * IAiCommerceProductSectionBinding.ICreate and
 * IAiCommerceProductSectionBinding, respectively.
 *
 * @param props.connection
 * @param props.productId UUID of the product to be associated with a section.
 * @param props.body Information required to create a new section binding for
 *   the product.
 * @path /aiCommerce/seller/products/:productId/sectionBindings
 * @accessor api.functional.aiCommerce.seller.products.sectionBindings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the product to be associated with a section. */
    productId: string & tags.Format<"uuid">;

    /** Information required to create a new section binding for the product. */
    body: IAiCommerceProductSectionBinding.ICreate;
  };
  export type Body = IAiCommerceProductSectionBinding.ICreate;
  export type Response = IAiCommerceProductSectionBinding;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/products/:productId/sectionBindings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/sectionBindings`;
  export const random = (): IAiCommerceProductSectionBinding =>
    typia.random<IAiCommerceProductSectionBinding>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list product-section bindings for a product
 * (ai_commerce_product_section_bindings).
 *
 * This endpoint provides a way for authorized sellers or admins to list and
 * search section bindings for a given product, which control the merchandising
 * contexts within various storefront sections (e.g., "Flash Sales", "Top
 * Picks").
 *
 * Security is enforced so that only the product's seller or platform
 * administrators can access the full list of bindings. The operation supports
 * pagination, advanced search, and sorting, as well as filtering by section,
 * display order, or status for detailed analytics and business management. The
 * operation is critical for managing where and how products are presented
 * throughout the sales channels.
 *
 * Proper input validation and business rule enforcement must ensure that
 * inappropriate disclosure of merchandising metadata is prevented for
 * non-authorized users. Related operations allow binding creation and hard
 * deletion for merchandising curation. No data is modified by this method;
 * read-only access is provided.
 *
 * @param props.connection
 * @param props.productId UUID of the product whose section bindings are to be
 *   searched/listed.
 * @param props.body Advanced filtering and pagination settings for retrieving
 *   product-section bindings.
 * @path /aiCommerce/seller/products/:productId/sectionBindings
 * @accessor api.functional.aiCommerce.seller.products.sectionBindings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the product whose section bindings are to be searched/listed. */
    productId: string & tags.Format<"uuid">;

    /**
     * Advanced filtering and pagination settings for retrieving
     * product-section bindings.
     */
    body: IAiCommerceProductSectionBinding.IRequest;
  };
  export type Body = IAiCommerceProductSectionBinding.IRequest;
  export type Response = IPageIAiCommerceProductSectionBinding;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/products/:productId/sectionBindings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/sectionBindings`;
  export const random = (): IPageIAiCommerceProductSectionBinding =>
    typia.random<IPageIAiCommerceProductSectionBinding>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific section binding for a product
 * (ai_commerce_product_section_bindings).
 *
 * The operation fetches the full details of a single binding between a product
 * and a merchandising section using both the productId and bindingId as path
 * parameters. Only authorized roles (the related seller or platform admin) may
 * access this information to ensure merchandising controls and business
 * privacy. The response provides all metadata of the binding, including display
 * order and section context, and is essential for troubleshooting display
 * issues or confirming merchandising setup.
 *
 * Attempts to retrieve non-existent bindings should result in an appropriate
 * 404-like error. It does not modify any data and does not require a request
 * body. Related endpoints enable listing all bindings or managing them via
 * creation and deletion APIs. Care must be taken to return only the bindings
 * relevant to the correct productId for data integrity.
 *
 * @param props.connection
 * @param props.productId UUID of the parent product of the binding.
 * @param props.bindingId UUID of the section binding to retrieve.
 * @path /aiCommerce/seller/products/:productId/sectionBindings/:bindingId
 * @accessor api.functional.aiCommerce.seller.products.sectionBindings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the parent product of the binding. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the section binding to retrieve. */
    bindingId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductSectionBinding;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/products/:productId/sectionBindings/:bindingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/sectionBindings/${encodeURIComponent(props.bindingId ?? "null")}`;
  export const random = (): IAiCommerceProductSectionBinding =>
    typia.random<IAiCommerceProductSectionBinding>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("bindingId")(() => typia.assert(props.bindingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a product's section binding (ai_commerce_product_section_bindings).
 *
 * Authorized sellers or platform administrators may use this endpoint to
 * hard-delete a binding between a product and a section, thereby removing the
 * product from that section's merchandising context. All deletion operations
 * are hard deletes (no soft delete field is present in this schema for
 * bindings), and must be strictly audited.
 *
 * Any attempt to delete a non-existent binding returns an error. The removal is
 * immediate and may result in the product no longer appearing in related
 * promotions or curated sections. Business logic ensures the requestor is
 * authorized and that store consistency is maintained. Related endpoints
 * provide binding creation and listing. Both productId and bindingId are
 * strictly required for binding identification.
 *
 * @param props.connection
 * @param props.productId UUID of the parent product whose section binding will
 *   be removed.
 * @param props.bindingId UUID of the section binding record to be deleted.
 * @path /aiCommerce/seller/products/:productId/sectionBindings/:bindingId
 * @accessor api.functional.aiCommerce.seller.products.sectionBindings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the parent product whose section binding will be removed. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the section binding record to be deleted. */
    bindingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/products/:productId/sectionBindings/:bindingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/sectionBindings/${encodeURIComponent(props.bindingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("bindingId")(() => typia.assert(props.bindingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
