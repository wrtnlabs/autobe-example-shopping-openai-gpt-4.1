import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductLegalCompliance } from "../../../../../structures/IAiCommerceProductLegalCompliance";

/**
 * Update or create the legal compliance and regulatory metadata for a product
 * in ai_commerce_product_legal_compliance.
 *
 * The PUT /products/{productId}/legalCompliance endpoint enables authorized
 * sellers or admins to update (or create) a full set of compliance data for a
 * product. Data includes jurisdiction, certifications, restricted age, hazard
 * flags, evidence, and review timestamps. If the product lacks compliance
 * metadata, a new record is created (upsert semantics); otherwise, the existing
 * entity is replaced.
 *
 * The service enforces authorization, allowing only the product's seller or
 * admins to modify compliance details. Successful execution updates the
 * ai_commerce_product_legal_compliance table and returns the latest compliance
 * entity. All modifications trigger compliance-logging, including snapshotting
 * before/after state for legal evidence.
 *
 * If the productId is invalid, not found, or unauthorized, appropriate error
 * codes and messages are returned. The request body must comply with the
 * IAiCommerceProductLegalCompliance.IUpdate OpenAPI schema. The endpoint is
 * safe for idempotent repeated calls. Buyers and the public cannot update
 * compliance records.
 *
 * @param props.connection
 * @param props.productId Unique identifier for the product to update compliance
 *   info for.
 * @param props.body Complete legal compliance information to set on the
 *   product.
 * @path /aiCommerce/seller/products/:productId/legalCompliance
 * @accessor api.functional.aiCommerce.seller.products.legalCompliance.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the product to update compliance info for. */
    productId: string & tags.Format<"uuid">;

    /** Complete legal compliance information to set on the product. */
    body: IAiCommerceProductLegalCompliance.IUpdate;
  };
  export type Body = IAiCommerceProductLegalCompliance.IUpdate;
  export type Response = IAiCommerceProductLegalCompliance;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/products/:productId/legalCompliance",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/legalCompliance`;
  export const random = (): IAiCommerceProductLegalCompliance =>
    typia.random<IAiCommerceProductLegalCompliance>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
