import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductBundle } from "../../../../../structures/IAiCommerceProductBundle";
import { IPageIAiCommerceProductBundle } from "../../../../../structures/IPageIAiCommerceProductBundle";

/**
 * Create a new product bundle for a product (ai_commerce_product_bundles
 * table).
 *
 * This operation enables a seller to create a new bundle for a product. The
 * supplied data specifies bundle code, name, description, pricing, and
 * constituent items (child products or variants and their quantities/order).
 * Creation requests are validated for allowed number of bundles, uniqueness of
 * bundle code, and required link to the parent product.
 *
 * The input follows the schema and supports advanced use cases such as
 * optional/required child items. Audit events are generated for compliance, and
 * the association to the parent product is mandatory. Errors are returned for
 * any violations of uniqueness, permissions, or data completeness. The
 * operation is limited to sellers with ownership of the product.
 *
 * @param props.connection
 * @param props.productId UUID of the parent product to which the bundle should
 *   be added.
 * @param props.body Bundle creation fields, includes item composition and
 *   pricing.
 * @path /aiCommerce/seller/products/:productId/bundles
 * @accessor api.functional.aiCommerce.seller.products.bundles.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the parent product to which the bundle should be added. */
    productId: string & tags.Format<"uuid">;

    /** Bundle creation fields, includes item composition and pricing. */
    body: IAiCommerceProductBundle.ICreate;
  };
  export type Body = IAiCommerceProductBundle.ICreate;
  export type Response = IAiCommerceProductBundle;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/products/:productId/bundles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/bundles`;
  export const random = (): IAiCommerceProductBundle =>
    typia.random<IAiCommerceProductBundle>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve/paginate all bundles for a product (ai_commerce_product_bundles
 * table).
 *
 * This operation retrieves a paginated list of bundles linked to the specified
 * product. Bundles represent composite products that include multiple child
 * items. Sellers utilize this endpoint to view all bundles under their product,
 * with support for filtering by status, name, or other criteria.
 *
 * The list is paginated and may be filtered by active status, name, or other
 * metadata as supported in the request DTO. The result includes summary
 * information suitable for listing in UI or further management. Only authorized
 * users (owners of the product or platform admins) can access this
 * information.
 *
 * Validation includes checking product existence and seller/admin permissions.
 * The ai_commerce_product_bundles table is the main reference, but
 * relationships to child products/variants may be included in the summary DTO.
 * Errors are raised for missing product or insufficient permissions.
 *
 * @param props.connection
 * @param props.productId UUID of the product whose bundles are being listed.
 * @param props.body Query, filter, and pagination parameters for getting
 *   bundles.
 * @path /aiCommerce/seller/products/:productId/bundles
 * @accessor api.functional.aiCommerce.seller.products.bundles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the product whose bundles are being listed. */
    productId: string & tags.Format<"uuid">;

    /** Query, filter, and pagination parameters for getting bundles. */
    body: IAiCommerceProductBundle.IRequest;
  };
  export type Body = IAiCommerceProductBundle.IRequest;
  export type Response = IPageIAiCommerceProductBundle.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/products/:productId/bundles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/bundles`;
  export const random = (): IPageIAiCommerceProductBundle.ISummary =>
    typia.random<IPageIAiCommerceProductBundle.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific product bundle (ai_commerce_product_bundles
 * table).
 *
 * This endpoint retrieves the complete details of a bundle, including all
 * product/variant items, pricing, metadata, and status. Used in product detail
 * pages, editing workflows, or for preparing updates. Sellers must own the
 * parent product or have explicit permission to view.
 *
 * The GET operation fully populates all relevant bundle fields per the
 * ai_commerce_product_bundles schema and provides comprehensive information for
 * decision making or editing. Errors are returned if the combination of
 * productId and bundleId does not exist or if the requester lacks
 * authorization. See also: update bundle, erase bundle, and bundle listing
 * endpoints.
 *
 * @param props.connection
 * @param props.productId The unique identifier of the parent product.
 * @param props.bundleId The unique identifier of the bundle to retrieve.
 * @path /aiCommerce/seller/products/:productId/bundles/:bundleId
 * @accessor api.functional.aiCommerce.seller.products.bundles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the parent product. */
    productId: string & tags.Format<"uuid">;

    /** The unique identifier of the bundle to retrieve. */
    bundleId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductBundle;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/products/:productId/bundles/:bundleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/bundles/${encodeURIComponent(props.bundleId ?? "null")}`;
  export const random = (): IAiCommerceProductBundle =>
    typia.random<IAiCommerceProductBundle>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("bundleId")(() => typia.assert(props.bundleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing product bundle for a product (ai_commerce_product_bundles
 * table).
 *
 * This endpoint allows sellers to update bundle information, including
 * metadata, price, bundle composition, and statuses for a specific bundle
 * associated with a product. The seller must own the product/bundle.
 *
 * Input data is checked for validity in reference to the
 * ai_commerce_product_bundles schema, and changes are subject to audit/snapshot
 * processes. Uniqueness of bundle code, valid status transitions, and logical
 * update of bundle items are checked. Errors are returned for invalid ids, lack
 * of permission, or violations of business rules.
 *
 * @param props.connection
 * @param props.productId UUID of the parent product.
 * @param props.bundleId UUID of the bundle to update.
 * @param props.body Update fields for the bundle, including item composition,
 *   price, and status changes.
 * @path /aiCommerce/seller/products/:productId/bundles/:bundleId
 * @accessor api.functional.aiCommerce.seller.products.bundles.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the parent product. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the bundle to update. */
    bundleId: string & tags.Format<"uuid">;

    /**
     * Update fields for the bundle, including item composition, price, and
     * status changes.
     */
    body: IAiCommerceProductBundle.IUpdate;
  };
  export type Body = IAiCommerceProductBundle.IUpdate;
  export type Response = IAiCommerceProductBundle;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/products/:productId/bundles/:bundleId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/bundles/${encodeURIComponent(props.bundleId ?? "null")}`;
  export const random = (): IAiCommerceProductBundle =>
    typia.random<IAiCommerceProductBundle>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("bundleId")(() => typia.assert(props.bundleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft/hard) a product bundle from a product
 * (ai_commerce_product_bundles table).
 *
 * This operation deletes a bundle from a product, subject to verification of
 * ownership and compliance with business rules. If the schema supports soft
 * deletion (deleted_at field), the operation marks the bundle as deleted but
 * does not physically erase it, retaining history for audit/compliance. If the
 * bundle is referenced in active orders or promotions, deletion may be
 * blocked.
 *
 * All deletions are audit-logged, and the operation is allowed only for sellers
 * who own the parent product and bundle. Deleting a non-existent or already
 * deleted bundle returns an error. Related endpoints: create, update, at (get
 * bundle).
 *
 * @param props.connection
 * @param props.productId UUID of the parent product.
 * @param props.bundleId UUID of the bundle to delete.
 * @path /aiCommerce/seller/products/:productId/bundles/:bundleId
 * @accessor api.functional.aiCommerce.seller.products.bundles.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the parent product. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the bundle to delete. */
    bundleId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/products/:productId/bundles/:bundleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/bundles/${encodeURIComponent(props.bundleId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("bundleId")(() => typia.assert(props.bundleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
