import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductCategoryBindings } from "../../../../../structures/IAiCommerceProductCategoryBindings";
import { IPageIAiCommerceProductCategoryBindings } from "../../../../../structures/IPageIAiCommerceProductCategoryBindings";

/**
 * Create a new product-category binding association for a product (catalog
 * assignment).
 *
 * The POST /products/{productId}/categoryBindings endpoint allows authorized
 * sellers or admins to create a new product-category binding. This operation
 * establishes a new mapping between the product and a category, controlling its
 * visibility in searches and merchandising.
 *
 * Upon receiving the request, the service validates ownership (seller/admin)
 * and the uniqueness of the binding (no duplicate product-category mapping is
 * allowed). The request body must include a valid categoryId and any required
 * metadata for the association, following the
 * IAiCommerceProductCategoryBindings.ICreate schema. Successful creation
 * returns the full binding entity for use in catalog navigation, analytics, or
 * edits. Attempting to bind the same product and category more than once
 * results in an error.
 *
 * All operations are audit-logged for catalog integrity and security. Buyers
 * and the public cannot add new product-category bindings.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product to categorize.
 * @param props.body Information about the category binding to create, including
 *   target category and metadata.
 * @path /aiCommerce/seller/products/:productId/categoryBindings
 * @accessor api.functional.aiCommerce.seller.products.categoryBindings.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the product to categorize. */
    productId: string & tags.Format<"uuid">;

    /**
     * Information about the category binding to create, including target
     * category and metadata.
     */
    body: IAiCommerceProductCategoryBindings.ICreate;
  };
  export type Body = IAiCommerceProductCategoryBindings.ICreate;
  export type Response = IAiCommerceProductCategoryBindings;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/products/:productId/categoryBindings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/categoryBindings`;
  export const random = (): IAiCommerceProductCategoryBindings =>
    typia.random<IAiCommerceProductCategoryBindings>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List all category bindings for a product, with pagination, filtering, and
 * search.
 *
 * The PATCH /products/{productId}/categoryBindings endpoint returns a paginated
 * list of all categories to which the specified product is currently bound. The
 * service supports search criteria, filtering, pagination, and sorting via the
 * request body. This enables sellers or admins to efficiently browse, audit, or
 * update product-category relationships for catalog management or analytics
 * integration.
 *
 * Authorization is requiredâ€”sellers can only access their own products'
 * bindings, while admins may retrieve any product's category bindings. Security
 * is enforced for catalog scope compliance.
 *
 * Results conform to the OpenAPI IPageIAiCommerceProductCategoryBindings
 * component schema, providing standard pagination and metadata. If there are no
 * category bindings, an empty list is returned. All interactions are logged for
 * future audit and catalog change tracking. Appropriate error responses address
 * missing productId, unauthorized access, or malformed queries.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product for which to list
 *   category bindings.
 * @param props.body Filtering and paging parameters for querying
 *   product-category bindings.
 * @path /aiCommerce/seller/products/:productId/categoryBindings
 * @accessor api.functional.aiCommerce.seller.products.categoryBindings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the product for which to list category bindings. */
    productId: string & tags.Format<"uuid">;

    /**
     * Filtering and paging parameters for querying product-category
     * bindings.
     */
    body: IAiCommerceProductCategoryBindings.IRequest;
  };
  export type Body = IAiCommerceProductCategoryBindings.IRequest;
  export type Response = IPageIAiCommerceProductCategoryBindings;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/products/:productId/categoryBindings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/categoryBindings`;
  export const random = (): IPageIAiCommerceProductCategoryBindings =>
    typia.random<IPageIAiCommerceProductCategoryBindings>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific product-category binding by its identifier for a
 * product.
 *
 * The GET /products/{productId}/categoryBindings/{bindingId} endpoint fetches
 * the details of a single product-category binding by its unique identifier,
 * scoped to the parent product. This allows sellers/admins to review the
 * specifics of the binding, such as associated category, timestamps, and
 * metadata. The operation enforces that sellers may access only category
 * bindings for their own products, while admins have global read access.
 *
 * This is primarily used in catalog management flows for examining mapping
 * details, auditing changes, or preparing further update/delete operations. All
 * requests are audit-logged for catalog traceability. Missing or unauthorized
 * access is handled with appropriate error codes, and a 404 is returned if the
 * resource does not exist.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product to which the binding
 *   is attached.
 * @param props.bindingId Unique identifier of the product-category binding to
 *   fetch.
 * @path /aiCommerce/seller/products/:productId/categoryBindings/:bindingId
 * @accessor api.functional.aiCommerce.seller.products.categoryBindings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the product to which the binding is attached. */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the product-category binding to fetch. */
    bindingId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductCategoryBindings;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/products/:productId/categoryBindings/:bindingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/categoryBindings/${encodeURIComponent(props.bindingId ?? "null")}`;
  export const random = (): IAiCommerceProductCategoryBindings =>
    typia.random<IAiCommerceProductCategoryBindings>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("bindingId")(() => typia.assert(props.bindingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a category binding between a product and a category
 * (ai_commerce_product_category_bindings).
 *
 * This API operation allows an authorized seller or admin to remove a category
 * binding from a specific product. Category bindings determine which categories
 * a product is shown in, and their removal can directly impact product
 * discoverability, search filters, and reporting.
 *
 * Authorization is required: only the product's seller or a platform admin may
 * erase a category binding. All actions are audit-logged for evidence and
 * traceability. The operation hard-deletes the relationship, and any attempt to
 * delete a binding that does not exist returns an appropriate error response
 * with actionable feedback.
 *
 * Related operations include adding or listing category bindings for a product,
 * managed through corresponding POST or PATCH endpoints. No request body is
 * required, but both productId and bindingId path parameters are strictly
 * required to ensure the correct binding is targeted. The operation must be
 * used carefully, as removing a binding may impact merchandising and analytics
 * immediately.
 *
 * @param props.connection
 * @param props.productId UUID of the target product for which to remove the
 *   category binding.
 * @param props.bindingId UUID of the product-category binding to be removed.
 * @path /aiCommerce/seller/products/:productId/categoryBindings/:bindingId
 * @accessor api.functional.aiCommerce.seller.products.categoryBindings.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the target product for which to remove the category binding. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the product-category binding to be removed. */
    bindingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/products/:productId/categoryBindings/:bindingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/categoryBindings/${encodeURIComponent(props.bindingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("bindingId")(() => typia.assert(props.bindingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
