import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductVariant } from "../../../../../structures/IAiCommerceProductVariant";
import { IPageIAiCommerceProductVariant } from "../../../../../structures/IPageIAiCommerceProductVariant";

/**
 * Create a new variant/option under a given product for inventory/sales
 * management.
 *
 * Register a new product variant/option under the specified product. Fields are
 * provided via IAiCommerceProductVariant.ICreate, covering SKU, option summary,
 * variant-specific price, inventory count, and operational status. Variant will
 * inherit parent product context and can be referenced in analytics or
 * downstream order flows.
 *
 * This operation is restricted to product owners (seller) or admins. It
 * enforces uniqueness of SKUs within product, validates all required fields,
 * ensures input is compatible with product's current lifecycle status, and
 * records an audit snapshot. Errors may occur for non-existent/mismatched
 * productId, duplicate SKU, invalid parameters, or unauthorized creation.
 *
 * The completed variant record (IAiCommerceProductVariant) is returned on
 * success. Related endpoints cover variant searching (PATCH
 * /products/{productId}/variants), detail (GET), and update flows.
 *
 * @param props.connection
 * @param props.productId UUID of the product to which the new variant will be
 *   linked.
 * @param props.body Variant registration details (SKU, options summary, price,
 *   inventory, status).
 * @path /aiCommerce/seller/products/:productId/variants
 * @accessor api.functional.aiCommerce.seller.products.variants.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the product to which the new variant will be linked. */
    productId: string & tags.Format<"uuid">;

    /**
     * Variant registration details (SKU, options summary, price, inventory,
     * status).
     */
    body: IAiCommerceProductVariant.ICreate;
  };
  export type Body = IAiCommerceProductVariant.ICreate;
  export type Response = IAiCommerceProductVariant;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/products/:productId/variants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants`;
  export const random = (): IAiCommerceProductVariant =>
    typia.random<IAiCommerceProductVariant>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginate and search product variants/options under a given product (admin or
 * owner).
 *
 * List/search variants for a specific product, paginated and filtered by
 * parameters provided in IAiCommerceProductVariant.IRequest. Includes support
 * for search by SKU, option summary (e.g., 'Size: M / Color: Red'), status
 * (active, paused, discontinued), price, and inventory. Results are intended
 * for owner (seller) management, admin moderation, or analytics application.
 * Each returned variant includes all business/operational fields and can
 * reference parent product context.
 *
 * This operation accesses the ai_commerce_product_variants table and may join
 * parent product for authorization filtering. Sellers may only view variants
 * linked to their own products. Admins can access all. Validation errors
 * include non-existent or unauthorized productId reference, invalid filtering,
 * or access to variants for products not owned by the user. Related endpoints
 * include PUT/POST for variant creation and update, GET for detail retrieval,
 * and DELETE if permitted.
 *
 * @param props.connection
 * @param props.productId UUID of the parent product whose variants to search.
 * @param props.body Search/filter/pagination criteria for variants of the
 *   target product.
 * @path /aiCommerce/seller/products/:productId/variants
 * @accessor api.functional.aiCommerce.seller.products.variants.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the parent product whose variants to search. */
    productId: string & tags.Format<"uuid">;

    /** Search/filter/pagination criteria for variants of the target product. */
    body: IAiCommerceProductVariant.IRequest;
  };
  export type Body = IAiCommerceProductVariant.IRequest;
  export type Response = IPageIAiCommerceProductVariant.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/products/:productId/variants",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants`;
  export const random = (): IPageIAiCommerceProductVariant.ISummary =>
    typia.random<IPageIAiCommerceProductVariant.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get full information of a specific product variant under a given product for
 * admin/owner.
 *
 * Retrieve detail of a particular variant, given both parent productId and
 * variantId (UUIDs). The returned DTO (IAiCommerceProductVariant) enumerates
 * SKU, option summary, price, inventory, status, and business classification
 * fields. Optionally includes parent product reference where required for
 * business context or access checks.
 *
 * Admins may view all variants; sellers may access only those belonging to
 * their own products. The AI system validates both product and variant
 * existence and matching. Errors returned for absent/invalid productId,
 * variantId, or unauthorized access. Related endpoints include variant PATCH
 * (search), PUT/POST for creation or update, and variant deletion if defined in
 * further requirements.
 *
 * @param props.connection
 * @param props.productId UUID of the product whose variant to retrieve.
 * @param props.variantId UUID of the target variant within the parent product.
 * @path /aiCommerce/seller/products/:productId/variants/:variantId
 * @accessor api.functional.aiCommerce.seller.products.variants.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the product whose variant to retrieve. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the target variant within the parent product. */
    variantId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductVariant;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/products/:productId/variants/:variantId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants/${encodeURIComponent(props.variantId ?? "null")}`;
  export const random = (): IAiCommerceProductVariant =>
    typia.random<IAiCommerceProductVariant>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("variantId")(() => typia.assert(props.variantId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing product variant (ai_commerce_product_variants table).
 *
 * This operation updates a specific product variant belonging to a product in
 * the marketplace. Sellers use this endpoint to update information such as SKU
 * code, option summary, price (variant_price), inventory_quantity, and status
 * of the variant. The provided variantId and productId must correspond to an
 * existing record.
 *
 * The update is only allowed if the authenticated user is the owner seller, and
 * the variant is not in a 'deleted' state. All updates are tracked in the audit
 * logs for compliance, ensuring that every change is traceable, including
 * details of who performed the update and which fields were changed.
 *
 * Input is strictly validated: SKU code must remain unique, price should not be
 * negative, and inventory quantities are checked for business rules (e.g.,
 * cannot set negative inventory). Errors are returned for invalid references,
 * forbidden actions, or failed business rules. See also: creating variants,
 * erasing variants, and updating parent product information.
 *
 * @param props.connection
 * @param props.productId The unique identifier (UUID) of the parent product.
 * @param props.variantId The unique identifier (UUID) of the variant to update.
 * @param props.body Fields to update for the product variant: option summary,
 *   SKU, price, inventory, and status.
 * @path /aiCommerce/seller/products/:productId/variants/:variantId
 * @accessor api.functional.aiCommerce.seller.products.variants.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the parent product. */
    productId: string & tags.Format<"uuid">;

    /** The unique identifier (UUID) of the variant to update. */
    variantId: string & tags.Format<"uuid">;

    /**
     * Fields to update for the product variant: option summary, SKU, price,
     * inventory, and status.
     */
    body: IAiCommerceProductVariant.IUpdate;
  };
  export type Body = IAiCommerceProductVariant.IUpdate;
  export type Response = IAiCommerceProductVariant;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/products/:productId/variants/:variantId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants/${encodeURIComponent(props.variantId ?? "null")}`;
  export const random = (): IAiCommerceProductVariant =>
    typia.random<IAiCommerceProductVariant>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("variantId")(() => typia.assert(props.variantId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft or hard) an existing product variant
 * (ai_commerce_product_variants table).
 *
 * This operation deletes a specific product variant associated with a product.
 * The request identifies the parent product and the target variant by UUID. The
 * operation is available to sellers who own the product, subject to business
 * constraints: deletion is blocked if the variant is referenced in active
 * orders or in a state that disallows removal.
 *
 * If the schema includes a deleted_at field, this is a soft delete: the record
 * is retained for audit and compliance but is excluded from product listings
 * and option selection. Actions are strictly logged for forensic purposes.
 *
 * Related endpoints include: create, update, and get variant. Attempting to
 * delete a non-existing or already deleted record returns an error.
 *
 * @param props.connection
 * @param props.productId The UUID of the parent product.
 * @param props.variantId The UUID of the product variant to delete.
 * @path /aiCommerce/seller/products/:productId/variants/:variantId
 * @accessor api.functional.aiCommerce.seller.products.variants.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The UUID of the parent product. */
    productId: string & tags.Format<"uuid">;

    /** The UUID of the product variant to delete. */
    variantId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/products/:productId/variants/:variantId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/variants/${encodeURIComponent(props.variantId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("variantId")(() => typia.assert(props.variantId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
