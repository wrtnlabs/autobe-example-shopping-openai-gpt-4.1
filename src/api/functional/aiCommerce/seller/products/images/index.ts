import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductImage } from "../../../../../structures/IAiCommerceProductImage";
import { IPageIAiCommerceProductImage } from "../../../../../structures/IPageIAiCommerceProductImage";

/**
 * Add a new image to an existing product in ai_commerce_product_images.
 *
 * Creates a new image resource for a given product, collecting necessary fields
 * including the attachment (file) reference, display order, and locale. The
 * operation checks seller ownership or admin rights and validates that the
 * product exists and is editable.
 *
 * The request body corresponds to the IAiCommerceProductImage.ICreate DTO and
 * must contain the attachment_id (for the uploaded file), optional locale,
 * display_order, and productId path parameter. Image limits, file type/size,
 * and localization policies should be enforced per business logic. If the image
 * is associated with a product not owned by the seller or in an immutable
 * state, the request should be rejected.
 *
 * On success, returns the newly created image entity as response with full
 * metadata for UI updates. This endpoint integrates with attachment storage
 * APIs in file management flows.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the target product to add an
 *   image to
 * @param props.body Image upload data including attachment reference and
 *   optional locale/order
 * @path /aiCommerce/seller/products/:productId/images
 * @accessor api.functional.aiCommerce.seller.products.images.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target product to add an image to */
    productId: string & tags.Format<"uuid">;

    /**
     * Image upload data including attachment reference and optional
     * locale/order
     */
    body: IAiCommerceProductImage.ICreate;
  };
  export type Body = IAiCommerceProductImage.ICreate;
  export type Response = IAiCommerceProductImage;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/products/:productId/images",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/images`;
  export const random = (): IAiCommerceProductImage =>
    typia.random<IAiCommerceProductImage>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginate/list product images associated with a product
 * (ai_commerce_product_images table).
 *
 * This operation allows a seller to list or paginate through the images
 * attached to a particular product. The result contains summary metadata (e.g.,
 * display order, attachment id, locale) and is suitable for use in file
 * management UIs or for preparing image updates.
 *
 * Supports query/pagination parameters for status, order, locale, or other
 * filters as exposed in the request DTO. Only sellers with permission on the
 * product can access this data. The operation strictly validates the productId
 * and user permissions, and errors are returned for invalid, missing, or
 * unauthorized references. Use with product update, add image, or delete image
 * operations for full image management lifecycle.
 *
 * @param props.connection
 * @param props.productId UUID of the product to list or filter images for.
 * @param props.body Filtering and pagination options for product images.
 * @path /aiCommerce/seller/products/:productId/images
 * @accessor api.functional.aiCommerce.seller.products.images.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the product to list or filter images for. */
    productId: string & tags.Format<"uuid">;

    /** Filtering and pagination options for product images. */
    body: IAiCommerceProductImage.IRequest;
  };
  export type Body = IAiCommerceProductImage.IRequest;
  export type Response = IPageIAiCommerceProductImage.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/products/:productId/images",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/images`;
  export const random = (): IPageIAiCommerceProductImage.ISummary =>
    typia.random<IPageIAiCommerceProductImage.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a product image for a given productId and imageId from
 * ai_commerce_product_images.
 *
 * Fetch a single product image, including its display order, locale metadata,
 * and attachment file reference, as defined in the ai_commerce_product_images
 * schema. The operation is accessible to authorized sellers (for their own
 * products) and platform admins; public access may be permitted for resources
 * marked as active and public, per business requirements.
 *
 * This endpoint fetches all columns for the identified image: id, product_id,
 * attachment_id, display_order, and locale. Security checks should ensure that
 * only the creator or authorized admin can view unpublished/archived images,
 * while published images for public products may be accessible by any
 * authenticated or public user. Error handling covers not found, access denied,
 * and resource deletion scenarios.
 *
 * This operation enables granular image management UI/UX and can be linked to
 * attachment/download APIs for file retrieval.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the parent product
 * @param props.imageId Unique identifier for the product image resource
 * @path /aiCommerce/seller/products/:productId/images/:imageId
 * @accessor api.functional.aiCommerce.seller.products.images.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent product */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier for the product image resource */
    imageId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductImage;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/products/:productId/images/:imageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): IAiCommerceProductImage =>
    typia.random<IAiCommerceProductImage>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("imageId")(() => typia.assert(props.imageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an image's metadata for a specific product using
 * ai_commerce_product_images.
 *
 * Permits the owner (seller) of the product or platform admins to update fields
 * for a product image such as the linked attachment (file), display order, or
 * locale. Based on the IAiCommerceProductImage.IUpdate DTO, the request
 * supports full or partial field replacement; it is not intended for image
 * content modification but for metadata management only.
 *
 * Authorization enforces seller ownership or admin role, and the existence and
 * modifiability of the image/product. Changes should be audited and validated
 * against product publishing status (e.g., published images may have change
 * restrictions). A successful update returns the new image entity. Business
 * logic includes checking for image asset existence, field validation, and
 * external attachment verification with file management modules.
 *
 * @param props.connection
 * @param props.productId Product to which this image belongs
 * @param props.imageId Image record to modify
 * @param props.body Data for product image metadata updates
 * @path /aiCommerce/seller/products/:productId/images/:imageId
 * @accessor api.functional.aiCommerce.seller.products.images.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Product to which this image belongs */
    productId: string & tags.Format<"uuid">;

    /** Image record to modify */
    imageId: string & tags.Format<"uuid">;

    /** Data for product image metadata updates */
    body: IAiCommerceProductImage.IUpdate;
  };
  export type Body = IAiCommerceProductImage.IUpdate;
  export type Response = IAiCommerceProductImage;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/products/:productId/images/:imageId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): IAiCommerceProductImage =>
    typia.random<IAiCommerceProductImage>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("imageId")(() => typia.assert(props.imageId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific product image from ai_commerce_product_images.
 *
 * Deletes or logically removes a product image for a specified product,
 * ensuring only authorized sellers (for their products) or admins can execute
 * the operation. This endpoint is used for cleaning up duplicate or outdated
 * images, and supports compliance with gallery or publishing limits.
 *
 * Prior to deletion, checks are performed to ensure the image is not set as
 * primary, used in a locked product state, or referenced by audit/history
 * features. If soft deletion is implemented, the record is marked via the
 * deleted_at column; otherwise, the row is permanently removed from the table.
 * The operation will fail if the image does not exist or if access is not
 * permitted.
 *
 * No response body is provided on success, but an HTTP status code will
 * indicate completion. Errors for not found, forbidden, or resource in use are
 * expected and should be documented.
 *
 * @param props.connection
 * @param props.productId Owning product ID for the image
 * @param props.imageId Unique identifier of the image to delete
 * @path /aiCommerce/seller/products/:productId/images/:imageId
 * @accessor api.functional.aiCommerce.seller.products.images.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Owning product ID for the image */
    productId: string & tags.Format<"uuid">;

    /** Unique identifier of the image to delete */
    imageId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/products/:productId/images/:imageId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/images/${encodeURIComponent(props.imageId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("imageId")(() => typia.assert(props.imageId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
