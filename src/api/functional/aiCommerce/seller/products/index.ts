import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProduct } from "../../../../structures/IAiCommerceProduct";
export * as variants from "./variants/index";
export * as bundles from "./bundles/index";
export * as images from "./images/index";
export * as contents from "./contents/index";
export * as seo from "./seo/index";
export * as legalCompliance from "./legalCompliance/index";
export * as categoryBindings from "./categoryBindings/index";
export * as sectionBindings from "./sectionBindings/index";
export * as snapshots from "./snapshots/index";
export * as auditLogs from "./auditLogs/index";

/**
 * Create a new product with business, inventory, and compliance details in
 * ai_commerce_products.
 *
 * Register a new product to the system as a seller or admin. Input data must
 * conform to IAiCommerceProduct.ICreate, including required business business
 * attributes (name, description), seller and store association, product
 * code/SKU, category assignments, base price, inventory details, and compliance
 * fields as mandated by platform policy. Optional variant/option definitions
 * may be specified at create time.
 *
 * Created products are initially saved as draft or require admin approval
 * depending on business workflow. The operation ensures all core validations:
 * required fields are present, price and inventory are within allowed limits,
 * SKU uniqueness is enforced, and regulatory requirements (certifications,
 * compliance region) are satisfied. Compliance status, legal snapshots, and
 * business rules are enforced according to the ai_commerce_products schema and
 * associated tables.
 *
 * Audit trails are generated for create events and reference all
 * actor/ownership information. The new product record is returned in detail
 * (IAiCommerceProduct DTO) after successful creation. Related endpoints include
 * product search (PATCH /products), detail (GET /products/{productId}), and
 * update (PUT /products/{productId}).
 *
 * @param props.connection
 * @param props.body Required information for new product registration,
 *   including business fields, inventory, and compliance.
 * @path /aiCommerce/seller/products
 * @accessor api.functional.aiCommerce.seller.products.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Required information for new product registration, including business
     * fields, inventory, and compliance.
     */
    body: IAiCommerceProduct.ICreate;
  };
  export type Body = IAiCommerceProduct.ICreate;
  export type Response = IAiCommerceProduct;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/products",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/products";
  export const random = (): IAiCommerceProduct =>
    typia.random<IAiCommerceProduct>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update product information and attributes for a specific productId in
 * ai_commerce_products.
 *
 * Edit or update fields of a product record identified by productId, using
 * IAiCommerceProduct.IUpdate to specify modified values. All modifications are
 * subject to role-based access control: sellers can only update their own
 * products, while admins may edit any product for correction/audit. Supported
 * fields include business attributes, pricing, inventory quantities, product
 * content, attachments, category/section bindings, variant/option
 * configurations, and compliance/certification fields.
 *
 * The operation enforces SKU uniqueness, pricing and inventory limits, and
 * legal compliance by validating updates per the ai_commerce_products schema
 * and regulatory requirements. On successful update, an audit snapshot is
 * captured for traceability. Error handling includes invalid productId,
 * unauthorized access, edit attempts for locked or deleted products, or
 * validation failures on submitted data. Related endpoints are GET
 * /products/{productId} (read), POST /products (create), and DELETE
 * /products/{productId} (deletion).
 *
 * @param props.connection
 * @param props.productId Unique identifier (UUID) of the product to update.
 * @param props.body Product update information: only the fields to modify are
 *   required, others may be omitted.
 * @path /aiCommerce/seller/products/:productId
 * @accessor api.functional.aiCommerce.seller.products.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the product to update. */
    productId: string & tags.Format<"uuid">;

    /**
     * Product update information: only the fields to modify are required,
     * others may be omitted.
     */
    body: IAiCommerceProduct.IUpdate;
  };
  export type Body = IAiCommerceProduct.IUpdate;
  export type Response = IAiCommerceProduct;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/products/:productId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}`;
  export const random = (): IAiCommerceProduct =>
    typia.random<IAiCommerceProduct>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
