import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductSnapshot } from "../../../../../structures/IAiCommerceProductSnapshot";
import { IPageIAiCommerceProductSnapshot } from "../../../../../structures/IPageIAiCommerceProductSnapshot";

/**
 * Search product snapshot history for a product
 * (ai_commerce_product_snapshots).
 *
 * This endpoint serves to provide a comprehensive history of all snapshots
 * taken for a particular product, useful for compliance audits, version
 * rollback, and business intelligence. The request body allows advanced
 * filtering, search, pagination, and sorting, referencing
 * IAiCommerceProductSnapshot.IRequest.
 *
 * The operation returns IPageIAiCommerceProductSnapshot, giving a paginated
 * list of immutable, append-only historical snapshots capturing product state
 * at each edit/event. Only authorized sellers or admins may view this
 * information. Attempts by unauthorized users must be denied with full audit
 * logging. Related endpoints provide retrieval of a single snapshot and
 * non-destructive version rollback actions.
 *
 * @param props.connection
 * @param props.productId UUID of the product whose snapshot history is being
 *   queried.
 * @param props.body Search and pagination parameters for retrieving product
 *   snapshots.
 * @path /aiCommerce/seller/products/:productId/snapshots
 * @accessor api.functional.aiCommerce.seller.products.snapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the product whose snapshot history is being queried. */
    productId: string & tags.Format<"uuid">;

    /** Search and pagination parameters for retrieving product snapshots. */
    body: IAiCommerceProductSnapshot.IRequest;
  };
  export type Body = IAiCommerceProductSnapshot.IRequest;
  export type Response = IPageIAiCommerceProductSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/products/:productId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/snapshots`;
  export const random = (): IPageIAiCommerceProductSnapshot =>
    typia.random<IPageIAiCommerceProductSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific product snapshot (ai_commerce_product_snapshots).
 *
 * This endpoint retrieves a single immutable snapshot representing a product's
 * state at a specific point in time (such as after creation, update, compliance
 * review). Only authorized sellers or admins may access this record. The
 * returned IAiCommerceProductSnapshot object provides a denormalized view of
 * all product attributes at the snapshot point. This is critical for audit,
 * regulatory, and evidence purposes and supports dispute handling and forensic
 * investigations.
 *
 * The operation must strictly check both productId and snapshotId, returning an
 * error if not found. No request body is needed. The endpoint does not allow
 * modification; it is for forensic and business review only.
 *
 * @param props.connection
 * @param props.productId UUID of the product whose snapshot is requested.
 * @param props.snapshotId UUID of the specific product snapshot to retrieve.
 * @path /aiCommerce/seller/products/:productId/snapshots/:snapshotId
 * @accessor api.functional.aiCommerce.seller.products.snapshots.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the product whose snapshot is requested. */
    productId: string & tags.Format<"uuid">;

    /** UUID of the specific product snapshot to retrieve. */
    snapshotId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceProductSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/products/:productId/snapshots/:snapshotId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/snapshots/${encodeURIComponent(props.snapshotId ?? "null")}`;
  export const random = (): IAiCommerceProductSnapshot =>
    typia.random<IAiCommerceProductSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.param("snapshotId")(() => typia.assert(props.snapshotId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
