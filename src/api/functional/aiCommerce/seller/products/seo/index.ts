import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceProductSeo } from "../../../../../structures/IAiCommerceProductSeo";

/**
 * Update or create the SEO metadata for a specific product in
 * ai_commerce_product_seo (upsert behavior).
 *
 * The PUT /products/{productId}/seo endpoint allows a seller or admin to set or
 * update all SEO configuration fields for a specific product, including title,
 * canonical URL, meta description, keywords, and open graph attributes. The
 * operation supports both full update and creation (upsert): if metadata exists
 * for the product, it is replaced; if not, a new record is created.
 *
 * Business logic validates ownership (sellers can update only their products),
 * and admins may override globally. On success, the updated or created SEO
 * entity is returned, ensuring only one SEO record per product (enforced by a
 * unique constraint in ai_commerce_product_seo). All updates are
 * compliance-logged, capturing before and after state for regulatory audit.
 *
 * This operation is not accessible by the public or buyers; only authorized
 * sellers (for their products) and admins may update SEO data. Audit logging
 * supports SEO compliance and legal traceability. Invalid or non-existent
 * productIds, or unauthorized attempts, return error responses as per business
 * rule.
 *
 * Request validation ensures input conforms to OpenAPI
 * IAiCommerceProductSeo.IUpdate schema. Idempotent behavior returns the
 * complete, current SEO entity upon success.
 *
 * @param props.connection
 * @param props.productId Unique identifier of the product to update SEO
 *   metadata for.
 * @param props.body Full update information for product SEO fields (title,
 *   canonical URL, description, etc.).
 * @path /aiCommerce/seller/products/:productId/seo
 * @accessor api.functional.aiCommerce.seller.products.seo.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the product to update SEO metadata for. */
    productId: string & tags.Format<"uuid">;

    /**
     * Full update information for product SEO fields (title, canonical URL,
     * description, etc.).
     */
    body: IAiCommerceProductSeo.IUpdate;
  };
  export type Body = IAiCommerceProductSeo.IUpdate;
  export type Response = IAiCommerceProductSeo;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/products/:productId/seo",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/products/${encodeURIComponent(props.productId ?? "null")}/seo`;
  export const random = (): IAiCommerceProductSeo =>
    typia.random<IAiCommerceProductSeo>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("productId")(() => typia.assert(props.productId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
