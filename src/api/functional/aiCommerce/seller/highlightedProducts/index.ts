import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceHighlightedProduct } from "../../../../structures/IAiCommerceHighlightedProduct";

/**
 * Create a new highlighted product record (ai_commerce_highlighted_products).
 *
 * Add a new highlighted product record to ai_commerce_highlighted_products,
 * specifying product, schedule, curation reason, and creator identity. Only
 * users with sufficient privileges may access this operation. Input validation
 * ensures that a valid, promoted product is selected with appropriate schedule
 * (start/end), and that duplication or overlap with other campaigns is
 * prevented.
 *
 * Highlights may power homepage rotations, promotional events, or curated
 * category spotlights. All operations are logged for compliance, and actions
 * may trigger downstream campaign processes or analytics updates. Failures may
 * include date conflicts, ineligible product IDs, or access control
 * violations.
 *
 * @param props.connection
 * @param props.body Data to create a new highlighted product, including product
 *   and schedule info.
 * @path /aiCommerce/seller/highlightedProducts
 * @accessor api.functional.aiCommerce.seller.highlightedProducts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Data to create a new highlighted product, including product and
     * schedule info.
     */
    body: IAiCommerceHighlightedProduct.ICreate;
  };
  export type Body = IAiCommerceHighlightedProduct.ICreate;
  export type Response = IAiCommerceHighlightedProduct;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/highlightedProducts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/highlightedProducts";
  export const random = (): IAiCommerceHighlightedProduct =>
    typia.random<IAiCommerceHighlightedProduct>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific highlighted product entry in the discovery business table.
 *
 * This operation modifies an existing highlighted product, allowing changes to
 * the highlight time frame, manual highlight reasons, and related campaign or
 * business context data.
 *
 * Security is enforced so that only users with appropriate admin or seller
 * privileges can update highlights that were created by them or that belong to
 * their marketplace segment. Each update is audit-logged according to
 * compliance and marketing rules.
 *
 * Inputs are validated against the business schema for correct scheduling
 * (start and end times), reason annotation, and relational integrity with
 * product and curator. Conflicting updates, such as overlapping scheduled
 * highlights, are rejected with actionable errors.
 *
 * For recovery and evidence, every update produces a new audit trail entry and
 * updates the status of any related notifications or analytics dashboards.
 *
 * @param props.connection
 * @param props.highlightedProductId Unique identifier for the highlighted
 *   product record being updated
 * @param props.body Fields to update in the highlighted product (window,
 *   curator ID, reason, etc.)
 * @path /aiCommerce/seller/highlightedProducts/:highlightedProductId
 * @accessor api.functional.aiCommerce.seller.highlightedProducts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the highlighted product record being updated */
    highlightedProductId: string & tags.Format<"uuid">;

    /**
     * Fields to update in the highlighted product (window, curator ID,
     * reason, etc.)
     */
    body: IAiCommerceHighlightedProduct.IUpdate;
  };
  export type Body = IAiCommerceHighlightedProduct.IUpdate;
  export type Response = IAiCommerceHighlightedProduct;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/highlightedProducts/:highlightedProductId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/highlightedProducts/${encodeURIComponent(props.highlightedProductId ?? "null")}`;
  export const random = (): IAiCommerceHighlightedProduct =>
    typia.random<IAiCommerceHighlightedProduct>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("highlightedProductId")(() =>
        typia.assert(props.highlightedProductId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a highlighted product from discovery curation registry.
 *
 * This endpoint performs a logical deletion on a highlighted product record:
 * the entry is marked as deleted (timestamped), but not physically removed, to
 * preserve historical and analytic integrity.
 *
 * Only authorized admins or the original seller curator (with sufficient
 * privileges) may perform this operation. Every removal is audit-logged with
 * timestamp, actor, and the pre-deletion state for compliance and recovery. The
 * audit trail ensures the recovery path, and analytic dashboards are updated to
 * exclude deleted highlights from live curation views but retain history.
 *
 * Deletion requests that violate campaign schedule requirements or attempt to
 * delete active/in-use highlights may be rejected with detailed error
 * messaging. All soft-deleted records remain available for evidence, rollback,
 * or audit queries by authorized personnel.
 *
 * @param props.connection
 * @param props.highlightedProductId Unique identifier for the highlighted
 *   product to remove from the registry
 * @path /aiCommerce/seller/highlightedProducts/:highlightedProductId
 * @accessor api.functional.aiCommerce.seller.highlightedProducts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier for the highlighted product to remove from the
     * registry
     */
    highlightedProductId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/highlightedProducts/:highlightedProductId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/highlightedProducts/${encodeURIComponent(props.highlightedProductId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("highlightedProductId")(() =>
        typia.assert(props.highlightedProductId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
