import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderCancellation } from "../../../../../structures/IAiCommerceOrderCancellation";
import { IPageIAiCommerceOrderCancellation } from "../../../../../structures/IPageIAiCommerceOrderCancellation";

/**
 * Create a new order cancellation request (ai_commerce_order_cancellations).
 *
 * Allows an eligible actor (order buyer, or associated seller) to submit a new
 * cancellation for an order as per the ai_commerce_order_cancellations schema.
 * All input fields are validated: association between order, items, actor is
 * checked, and business/permissions logic ensures duplicates or erroneous
 * states are rejected.
 *
 * The input includes cancellation reason, relevant item info, and is created
 * with proper linkage. Upon creation, returns the full record with associated
 * IDs, status, time markers, and rationale. Audit records and workflow triggers
 * are updated as required by compliance.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) of the order for which a
 *   cancellation is being created.
 * @param props.body Order cancellation creation data, as per
 *   IAiCommerceOrderCancellation.ICreate DTO structure.
 * @path /aiCommerce/seller/orders/:orderId/cancellations
 * @accessor api.functional.aiCommerce.seller.orders.cancellations.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Unique identifier (UUID) of the order for which a cancellation is
     * being created.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Order cancellation creation data, as per
     * IAiCommerceOrderCancellation.ICreate DTO structure.
     */
    body: IAiCommerceOrderCancellation.ICreate;
  };
  export type Body = IAiCommerceOrderCancellation.ICreate;
  export type Response = IAiCommerceOrderCancellation;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/orders/:orderId/cancellations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellations`;
  export const random = (): IAiCommerceOrderCancellation =>
    typia.random<IAiCommerceOrderCancellation>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and list order cancellations for an order
 * (ai_commerce_order_cancellations).
 *
 * This operation enables users (order owner, involved seller, or admin) to
 * search, filter, paginate, and sort cancellation requests associated with a
 * specific order. Leveraging the ai_commerce_order_cancellations schema, search
 * criteria can include status, requester, creation/approval/finalization times,
 * and free-text in reason fields.
 *
 * Advanced search supports flexible queries as per business needs, including
 * full or partial field matching, time range, and status logic. Permission
 * logic restricts access to users authorized for the target order. The response
 * is a paginated list, structured for efficient UI display, analytics, or
 * workflow follow-up.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) for the parent order whose
 *   cancellations are being queried.
 * @param props.body Search criteria, sorting, and pagination info as per
 *   IAiCommerceOrderCancellation.IRequest DTO structure.
 * @path /aiCommerce/seller/orders/:orderId/cancellations
 * @accessor api.functional.aiCommerce.seller.orders.cancellations.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier (UUID) for the parent order whose cancellations are
     * being queried.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Search criteria, sorting, and pagination info as per
     * IAiCommerceOrderCancellation.IRequest DTO structure.
     */
    body: IAiCommerceOrderCancellation.IRequest;
  };
  export type Body = IAiCommerceOrderCancellation.IRequest;
  export type Response = IPageIAiCommerceOrderCancellation;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/orders/:orderId/cancellations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellations`;
  export const random = (): IPageIAiCommerceOrderCancellation =>
    typia.random<IPageIAiCommerceOrderCancellation>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific order cancellation record
 * (ai_commerce_order_cancellations).
 *
 * Allows an authorized user (order buyer, associated seller for item(s), or
 * admin) to fetch complete information for a particular order cancellation
 * record. The ai_commerce_order_cancellations table is the backing schema.
 * Enforces strict validation: verifies the cancellation record exists, matches
 * the requested order, and that the caller is entitled (as owner, seller, or
 * admin) to view it.
 *
 * Returned data includes all business fieldsâ€”status, time markers, actor and
 * order IDs, reason for cancellation, and related workflow/context fields. Used
 * for timeline and audit review in service and compliance flows or UI detail
 * pages.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) of the parent order which the
 *   cancellation is tied to.
 * @param props.cancellationId Unique identifier (UUID) of the cancellation
 *   record being requested.
 * @path /aiCommerce/seller/orders/:orderId/cancellations/:cancellationId
 * @accessor api.functional.aiCommerce.seller.orders.cancellations.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier (UUID) of the parent order which the cancellation
     * is tied to.
     */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) of the cancellation record being requested. */
    cancellationId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceOrderCancellation;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/orders/:orderId/cancellations/:cancellationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellations/${encodeURIComponent(props.cancellationId ?? "null")}`;
  export const random = (): IAiCommerceOrderCancellation =>
    typia.random<IAiCommerceOrderCancellation>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("cancellationId")(() => typia.assert(props.cancellationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an order cancellation request (ai_commerce_order_cancellations).
 *
 * Permits an authorized user (owner, associated seller, or admin) to update
 * fields in a specific order cancellation record for a given order. The
 * ai_commerce_order_cancellations schema supports updates to status, reason,
 * workflow data, subject to business validation (e.g., cannot update after
 * finalization).
 *
 * Permission logic restricts modifications to appropriate states and roles.
 * Full validation ensures record exists, is associated with the order, caller
 * is allowed, and update complies with workflow. The updated record is returned
 * upon success, with audit trace.
 *
 * @param props.connection
 * @param props.orderId Unique identifier (UUID) of the order associated with
 *   the cancellation being updated.
 * @param props.cancellationId Unique identifier (UUID) for the cancellation
 *   record being modified.
 * @param props.body Update payload for the cancellation record
 *   (IAiCommerceOrderCancellation.IUpdate DTO structure).
 * @path /aiCommerce/seller/orders/:orderId/cancellations/:cancellationId
 * @accessor api.functional.aiCommerce.seller.orders.cancellations.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier (UUID) of the order associated with the
     * cancellation being updated.
     */
    orderId: string & tags.Format<"uuid">;

    /** Unique identifier (UUID) for the cancellation record being modified. */
    cancellationId: string & tags.Format<"uuid">;

    /**
     * Update payload for the cancellation record
     * (IAiCommerceOrderCancellation.IUpdate DTO structure).
     */
    body: IAiCommerceOrderCancellation.IUpdate;
  };
  export type Body = IAiCommerceOrderCancellation.IUpdate;
  export type Response = IAiCommerceOrderCancellation;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/orders/:orderId/cancellations/:cancellationId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/cancellations/${encodeURIComponent(props.cancellationId ?? "null")}`;
  export const random = (): IAiCommerceOrderCancellation =>
    typia.random<IAiCommerceOrderCancellation>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("cancellationId")(() => typia.assert(props.cancellationId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
