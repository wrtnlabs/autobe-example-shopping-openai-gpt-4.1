import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderStatusHistory } from "../../../../../structures/IAiCommerceOrderStatusHistory";
import { IPageIAiCommerceOrderStatusHistory } from "../../../../../structures/IPageIAiCommerceOrderStatusHistory";

/**
 * Paginated search of status history (ai_commerce_order_status_history) for a
 * specific order.
 *
 * This operation provides a paginated, filterable, and searchable list of all
 * status change events for a particular order, drawing from the
 * ai_commerce_order_status_history table. These status transitions include
 * every lifecycle state change for the order, including status,
 * business_status, notes, and the actor responsible.
 *
 * Authorized access is allowed for the buyer (who placed the order), sellers
 * linked to any parts of the order, or admins. The information enables
 * end-users and administrators to trace order evolution for support,
 * compliance, or audit purposes. Pagination is provided to support long-lived
 * orders with many transitions. Sorting by change time and advanced filtering
 * (by status, actor, etc.) are also supported.
 *
 * The API response summarizes the status history events and supports efficient
 * browsing of complex order histories. Errors may occur if the orderId is
 * invalid or the requester lacks sufficient privileges.
 *
 * @param props.connection
 * @param props.orderId Order whose status history to list
 *   (ai_commerce_orders.id).
 * @param props.body Request parameters for paginated, filtered status history
 *   retrieval.
 * @path /aiCommerce/seller/orders/:orderId/statusHistory
 * @accessor api.functional.aiCommerce.seller.orders.statusHistory.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Order whose status history to list (ai_commerce_orders.id). */
    orderId: string & tags.Format<"uuid">;

    /** Request parameters for paginated, filtered status history retrieval. */
    body: IAiCommerceOrderStatusHistory.IRequest;
  };
  export type Body = IAiCommerceOrderStatusHistory.IRequest;
  export type Response = IPageIAiCommerceOrderStatusHistory;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/orders/:orderId/statusHistory",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/statusHistory`;
  export const random = (): IPageIAiCommerceOrderStatusHistory =>
    typia.random<IPageIAiCommerceOrderStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single order status history event (ai_commerce_order_status_history) by
 * orderId and historyId.
 *
 * This operation returns the details of a single status history record for a
 * specific order, identifying both the order (orderId) and history record
 * (historyId). It queries the ai_commerce_order_status_history table to provide
 * a full snapshot of the status change: the actor, time of transition, previous
 * and new status values, workflow context, and any notes attached.
 *
 * Permission to retrieve this data is granted to the buyer (who placed the
 * order), sellers associated with any related sub-orders, or administrators.
 * This operation supports support workflows and regulatory audit requirements,
 * enabling investigation of specific lifecycle transitions in the order's
 * record.
 *
 * If the specified historyId does not exist for the orderId, or the user is not
 * authorized, an error is returned. Related endpoints allow retrieval of full
 * order status history or searching among events.
 *
 * @param props.connection
 * @param props.orderId Order whose status history is being accessed
 *   (ai_commerce_orders.id).
 * @param props.historyId Unique ID of the status history event
 *   (ai_commerce_order_status_history.id).
 * @path /aiCommerce/seller/orders/:orderId/statusHistory/:historyId
 * @accessor api.functional.aiCommerce.seller.orders.statusHistory.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Order whose status history is being accessed (ai_commerce_orders.id). */
    orderId: string & tags.Format<"uuid">;

    /**
     * Unique ID of the status history event
     * (ai_commerce_order_status_history.id).
     */
    historyId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceOrderStatusHistory;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/orders/:orderId/statusHistory/:historyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/statusHistory/${encodeURIComponent(props.historyId ?? "null")}`;
  export const random = (): IAiCommerceOrderStatusHistory =>
    typia.random<IAiCommerceOrderStatusHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.param("historyId")(() => typia.assert(props.historyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
