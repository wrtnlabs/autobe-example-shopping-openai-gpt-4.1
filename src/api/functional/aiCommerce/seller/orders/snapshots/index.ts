import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceOrderSnapshotLog } from "../../../../../structures/IAiCommerceOrderSnapshotLog";
import { IPageIAiCommerceOrderSnapshotLog } from "../../../../../structures/IPageIAiCommerceOrderSnapshotLog";

/**
 * Search and list all historical snapshot logs for a specific order from
 * ai_commerce_order_snapshot_logs.
 *
 * Retrieve historical order state snapshots for a given orderId, supporting
 * compliance, audit, and advanced troubleshooting. This endpoint allows for
 * search, filter, sort, and pagination through POST body query parameters as
 * defined in IAiCommerceOrderSnapshotLog.IRequest. The output matches
 * IPageIAiCommerceOrderSnapshotLog structure, including all required order
 * snapshot data.
 *
 * Historical snapshots are used for forensics, compliance review, order
 * recovery, dispute investigation, and business analytics. Only authorized
 * stakeholders (buyer, seller, or admin) can access the snapshot log. All
 * accesses are audit-logged. Error conditions—such as non-existent orders or
 * unauthorized access—produce appropriate error codes and descriptive messages,
 * with no exposure of sensitive snapshot content to unauthenticated or
 * unauthorized users.
 *
 * @param props.connection
 * @param props.orderId Unique identifier of the target order. Must be a UUID
 *   string referencing ai_commerce_orders.id.
 * @param props.body Search, filter, and pagination parameters for order
 *   snapshot log list, matching IAiCommerceOrderSnapshotLog.IRequest schema.
 * @path /aiCommerce/seller/orders/:orderId/snapshots
 * @accessor api.functional.aiCommerce.seller.orders.snapshots.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier of the target order. Must be a UUID string
     * referencing ai_commerce_orders.id.
     */
    orderId: string & tags.Format<"uuid">;

    /**
     * Search, filter, and pagination parameters for order snapshot log
     * list, matching IAiCommerceOrderSnapshotLog.IRequest schema.
     */
    body: IAiCommerceOrderSnapshotLog.IRequest;
  };
  export type Body = IAiCommerceOrderSnapshotLog.IRequest;
  export type Response = IPageIAiCommerceOrderSnapshotLog;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/orders/:orderId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/orders/${encodeURIComponent(props.orderId ?? "null")}/snapshots`;
  export const random = (): IPageIAiCommerceOrderSnapshotLog =>
    typia.random<IPageIAiCommerceOrderSnapshotLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("orderId")(() => typia.assert(props.orderId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
