import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Remove a favorite inquiry (soft delete) for the authenticated user
 * (ai_commerce_favorites_inquiries).
 *
 * Delete a user's favorite inquiry by marking it as deleted. The operation
 * verifies user permissions, favorite inquiry ownership, and ensures the
 * operation is auditable and compliant with the business logic in
 * ai_commerce_favorites_inquiries.
 *
 * Security consideration: Accessible only to authenticated buyers or sellers
 * who own the favorite inquiry. Soft deletion preserves record integrity and
 * audit logging for evidence.
 *
 * This operation references the Prisma schema's ai_commerce_favorites_inquiries
 * table, specifically utilizing the deleted_at column for soft removal. No data
 * is physically erased, satisfying compliance requirements for privacy and
 * legal retention.
 *
 * Business logic and ownership validation are enforced. Errors are returned if
 * the favorite does not exist, does not belong to the user, or has already been
 * deleted.
 *
 * @param props.connection
 * @param props.favoriteInquiryId Unique identifier of the favorite inquiry to
 *   remove
 * @path /aiCommerce/seller/favorites/inquiries/:favoriteInquiryId
 * @accessor api.functional.aiCommerce.seller.favorites.inquiries.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the favorite inquiry to remove */
    favoriteInquiryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/favorites/inquiries/:favoriteInquiryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/favorites/inquiries/${encodeURIComponent(props.favoriteInquiryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteInquiryId")(() =>
        typia.assert(props.favoriteInquiryId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
