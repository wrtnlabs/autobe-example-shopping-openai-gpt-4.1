import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceFavoritesAddress } from "../../../../../structures/IAiCommerceFavoritesAddress";
import { IPageIAiCommerceFavoritesAddress } from "../../../../../structures/IPageIAiCommerceFavoritesAddress";

/**
 * Add a new favorite address for the current user
 * (ai_commerce_favorites_addresses).
 *
 * Register a user address as a favorite, storing a snapshot of the address
 * state and optional organizational information such as folder and label.
 * Business logic ensures no duplicate favoriting of the same address per user.
 * On success, a snapshot record is created for auditing/compliance.
 *
 * Authorization: Only available to buyers or sellers for their own addresses.
 * Attempts to favorite someone else's address or re-favorite the same address
 * are rejected with errors. All new entries reference the current state for
 * snapshot integrity.
 *
 * Based on ai_commerce_favorites_addresses. The request follows
 * IAiCommerceFavoritesAddress.ICreate, and the response includes the newly
 * created favorite record (IAiCommerceFavoritesAddress).
 *
 * @param props.connection
 * @param props.body Request body containing address ID and optional
 *   folder/label for favoriting
 * @path /aiCommerce/seller/favorites/addresses
 * @accessor api.functional.aiCommerce.seller.favorites.addresses.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Request body containing address ID and optional folder/label for
     * favoriting
     */
    body: IAiCommerceFavoritesAddress.ICreate;
  };
  export type Body = IAiCommerceFavoritesAddress.ICreate;
  export type Response = IAiCommerceFavoritesAddress;

  export const METADATA = {
    method: "POST",
    path: "/aiCommerce/seller/favorites/addresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/favorites/addresses";
  export const random = (): IAiCommerceFavoritesAddress =>
    typia.random<IAiCommerceFavoritesAddress>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve favorite addresses for the current user
 * (ai_commerce_favorites_addresses).
 *
 * Fetch a list of favorite addresses belonging to the authenticated buyer or
 * seller with support for advanced searching, sorting, and pagination. Filters
 * can include folder assignment, labels, and primary address status. The
 * request body follows IAiCommerceFavoritesAddress.IRequest, and results are
 * returned as paginated summaries.
 *
 * Security: Accessible exclusively to authenticated buyers or sellers. Each
 * result only includes addresses favorited by the current user. Sensitive
 * information is filtered based on user permissions. Audit logging applies per
 * compliance rules.
 *
 * Underlying Prisma entity is ai_commerce_favorites_addresses, supporting
 * compliance, snapshotting, and organization via folders. Edge cases such as
 * unauthorized access or data not existing are handled appropriately.
 *
 * @param props.connection
 * @param props.body Criteria for filtering, sorting, and paginating the
 *   favorite addresses of the current user
 * @path /aiCommerce/seller/favorites/addresses
 * @accessor api.functional.aiCommerce.seller.favorites.addresses.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Criteria for filtering, sorting, and paginating the favorite
     * addresses of the current user
     */
    body: IAiCommerceFavoritesAddress.IRequest;
  };
  export type Body = IAiCommerceFavoritesAddress.IRequest;
  export type Response = IPageIAiCommerceFavoritesAddress.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/favorites/addresses",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/favorites/addresses";
  export const random = (): IPageIAiCommerceFavoritesAddress.ISummary =>
    typia.random<IPageIAiCommerceFavoritesAddress.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific favorite address with snapshot and metadata
 * (ai_commerce_favorites_addresses).
 *
 * Fetch the detailed information for a user's favorite address, including all
 * snapshot metadata, folder assignment, label, and primary status. This
 * operation checks the ownership of the favorite before exposing any
 * information, referencing deleted_at for soft-deleted records.
 *
 * Security: Only the buyer or seller who owns the favorite can access the
 * information. Non-owners or unauthenticated callers are denied access.
 * Includes compliance-required details for audit/logging.
 *
 * This operation is based on the ai_commerce_favorites_addresses schema, using
 * the favoriteAddressId as the primary lookup. Errors are handled for
 * non-existent or unauthorized records. Snapshot audit is maintained.
 *
 * @param props.connection
 * @param props.favoriteAddressId Unique identifier for the favorite address
 *   record
 * @path /aiCommerce/seller/favorites/addresses/:favoriteAddressId
 * @accessor api.functional.aiCommerce.seller.favorites.addresses.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the favorite address record */
    favoriteAddressId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceFavoritesAddress;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/favorites/addresses/:favoriteAddressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/favorites/addresses/${encodeURIComponent(props.favoriteAddressId ?? "null")}`;
  export const random = (): IAiCommerceFavoritesAddress =>
    typia.random<IAiCommerceFavoritesAddress>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteAddressId")(() =>
        typia.assert(props.favoriteAddressId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update organization or metadata of an existing favorite address
 * (ai_commerce_favorites_addresses).
 *
 * Modify a user's favorite address, such as moving it to a different folder,
 * changing the label, or toggling its primary status. The operation checks
 * favorite ownership, ensuring only the owning buyer or seller can update their
 * favorites. Any changes are snapshot-audited for compliance purposes.
 *
 * Security: Buyers or sellers can only modify favorites they own. Setting
 * multiple primary favorites or organizing into non-existent folders is
 * validated and rejected as needed. The updatedAt field of
 * ai_commerce_favorites_addresses is updated.
 *
 * Complies with the business organization's logic described in
 * IAiCommerceFavoritesAddress.IUpdate request body schema, responding with the
 * updated favorite's detailed info.
 *
 * @param props.connection
 * @param props.favoriteAddressId Unique identifier of the favorite address to
 *   update
 * @param props.body Changes to apply to folder, label, primary status, or
 *   organization for an address favorite
 * @path /aiCommerce/seller/favorites/addresses/:favoriteAddressId
 * @accessor api.functional.aiCommerce.seller.favorites.addresses.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the favorite address to update */
    favoriteAddressId: string & tags.Format<"uuid">;

    /**
     * Changes to apply to folder, label, primary status, or organization
     * for an address favorite
     */
    body: IAiCommerceFavoritesAddress.IUpdate;
  };
  export type Body = IAiCommerceFavoritesAddress.IUpdate;
  export type Response = IAiCommerceFavoritesAddress;

  export const METADATA = {
    method: "PUT",
    path: "/aiCommerce/seller/favorites/addresses/:favoriteAddressId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/aiCommerce/seller/favorites/addresses/${encodeURIComponent(props.favoriteAddressId ?? "null")}`;
  export const random = (): IAiCommerceFavoritesAddress =>
    typia.random<IAiCommerceFavoritesAddress>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteAddressId")(() =>
        typia.assert(props.favoriteAddressId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove (soft delete) a favorite address for the user
 * (ai_commerce_favorites_addresses).
 *
 * Logically deletes a favorite address belonging to the requesting buyer or
 * seller. This operation performs a soft delete (setting deleted_at) in
 * accordance with compliance and business requirements. Users can only delete
 * their own favorites; unauthorized or already-deleted records trigger errors.
 *
 * Audit trail and compliance rules are enforced. The favorite is not physically
 * erased, retaining snapshot and traceability for legal/audit scenarios. The
 * AICommerceFavoritesAddress schema is referenced throughout the business
 * operation.
 *
 * @param props.connection
 * @param props.favoriteAddressId ID of the favorite address to remove
 * @path /aiCommerce/seller/favorites/addresses/:favoriteAddressId
 * @accessor api.functional.aiCommerce.seller.favorites.addresses.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the favorite address to remove */
    favoriteAddressId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/aiCommerce/seller/favorites/addresses/:favoriteAddressId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/favorites/addresses/${encodeURIComponent(props.favoriteAddressId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("favoriteAddressId")(() =>
        typia.assert(props.favoriteAddressId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
