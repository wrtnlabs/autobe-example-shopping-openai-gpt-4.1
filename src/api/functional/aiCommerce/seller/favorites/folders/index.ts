import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceFavoritesFolder } from "../../../../../structures/IAiCommerceFavoritesFolder";
import { IPageIAiCommerceFavoritesFolder } from "../../../../../structures/IPageIAiCommerceFavoritesFolder";

/**
 * Search and retrieve favorite folders for the authenticated user
 * (ai_commerce_favorites_folders).
 *
 * Returns a list of folders used to organize address, product, and inquiry
 * favorites for the current authenticated buyer or seller. Supports searching
 * by folder name, filtering, and advanced organizational structures. Pagination
 * and sorting options are included as per business needs. Each folder shown is
 * owned by the current user only.
 *
 * Security: Buyers or sellers are limited to viewing/managing their folders.
 * Edge cases like non-existent or already-deleted folders are handled
 * transparently, with audit logging as needed.
 *
 * The operation supports compliance requirements for organization, privacy, and
 * user experience business logic. It follows
 * IAiCommerceFavoritesFolder.IRequest request body and returns paginated
 * IAiCommerceFavoritesFolder.ISummary responses.
 *
 * @param props.connection
 * @param props.body Folder search, filter, and pagination criteria
 * @path /aiCommerce/seller/favorites/folders
 * @accessor api.functional.aiCommerce.seller.favorites.folders.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Folder search, filter, and pagination criteria */
    body: IAiCommerceFavoritesFolder.IRequest;
  };
  export type Body = IAiCommerceFavoritesFolder.IRequest;
  export type Response = IPageIAiCommerceFavoritesFolder.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/seller/favorites/folders",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/seller/favorites/folders";
  export const random = (): IPageIAiCommerceFavoritesFolder.ISummary =>
    typia.random<IPageIAiCommerceFavoritesFolder.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific favorite folder by ID
 * (ai_commerce_favorites_folders).
 *
 * Fetches metadata and detailed information for a user's favorite folder,
 * including name, description, and organizational state. Ownership is verified,
 * and access is limited to the authenticated buyer or seller who owns the
 * folder. The operation ensures compliance and audit logging.
 *
 * Based on ai_commerce_favorites_folders, and keyed by folderId. Soft-deleted
 * or unauthorized access returns descriptive errors. Audit logic is in place as
 * needed for traceability.
 *
 * @param props.connection
 * @param props.folderId Unique identifier for the favorite folder record
 * @path /aiCommerce/seller/favorites/folders/:folderId
 * @accessor api.functional.aiCommerce.seller.favorites.folders.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the favorite folder record */
    folderId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceFavoritesFolder;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/seller/favorites/folders/:folderId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/seller/favorites/folders/${encodeURIComponent(props.folderId ?? "null")}`;
  export const random = (): IAiCommerceFavoritesFolder =>
    typia.random<IAiCommerceFavoritesFolder>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("folderId")(() => typia.assert(props.folderId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
