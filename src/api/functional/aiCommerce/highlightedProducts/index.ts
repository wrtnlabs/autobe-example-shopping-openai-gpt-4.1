import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAiCommerceHighlightedProduct } from "../../../structures/IAiCommerceHighlightedProduct";
import { IPageIAiCommerceHighlightedProduct } from "../../../structures/IPageIAiCommerceHighlightedProduct";

/**
 * List paginated and filtered highlighted products
 * (ai_commerce_highlighted_products).
 *
 * List current and scheduled highlighted product entries from
 * ai_commerce_highlighted_products. This endpoint allows filtering, sorting,
 * and paginated access, ensuring scalable performance and responsive UI. Output
 * includes highlight timing (start/end), reason, manually assigned curator, and
 * associated product references.
 *
 * The endpoint addresses business needs for promoted content, featured product
 * selections, and homepage campaign management. Non-admin users receive only
 * public, currently live highlights, whereas admins may request broader scope
 * or historical records. Related operations include creation, update, and
 * deletion of highlights, often combined with real-time campaign monitoring or
 * analytics dashboards.
 *
 * Error handling covers range queries, out-of-bounds pagination, and access
 * violations where historic or non-public highlights are requested by
 * unauthorized roles.
 *
 * @param props.connection
 * @param props.body Highlight filter, sort, and page options for highlighted
 *   product search.
 * @path /aiCommerce/highlightedProducts
 * @accessor api.functional.aiCommerce.highlightedProducts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Highlight filter, sort, and page options for highlighted product
     * search.
     */
    body: IAiCommerceHighlightedProduct.IRequest;
  };
  export type Body = IAiCommerceHighlightedProduct.IRequest;
  export type Response = IPageIAiCommerceHighlightedProduct.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/aiCommerce/highlightedProducts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/aiCommerce/highlightedProducts";
  export const random = (): IPageIAiCommerceHighlightedProduct.ISummary =>
    typia.random<IPageIAiCommerceHighlightedProduct.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific highlighted product by ID
 * (ai_commerce_highlighted_products).
 *
 * Retrieve details of a specific highlighted product in
 * ai_commerce_highlighted_products by its highlightedProductId. The endpoint
 * covers highlight timing, curator identity, manual notes, status, and product
 * links. Permissions may restrict sensitive scheduling or administrative
 * campaign notes to elevated roles. Path parameter highlightedProductId is a
 * required UUID.
 *
 * This operation supports detailed configuration screens, consumer-facing
 * highlight banners with extended info, or campaign retrospectives for business
 * stakeholders. Coupled with highlight creation and update APIs for full
 * lifecycle management. Error cases return standard not found, unauthorized, or
 * parameterization errors with full traceability.
 *
 * @param props.connection
 * @param props.highlightedProductId Unique identifier of the highlighted
 *   product record to retrieve.
 * @path /aiCommerce/highlightedProducts/:highlightedProductId
 * @accessor api.functional.aiCommerce.highlightedProducts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the highlighted product record to retrieve. */
    highlightedProductId: string & tags.Format<"uuid">;
  };
  export type Response = IAiCommerceHighlightedProduct;

  export const METADATA = {
    method: "GET",
    path: "/aiCommerce/highlightedProducts/:highlightedProductId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/aiCommerce/highlightedProducts/${encodeURIComponent(props.highlightedProductId ?? "null")}`;
  export const random = (): IAiCommerceHighlightedProduct =>
    typia.random<IAiCommerceHighlightedProduct>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("highlightedProductId")(() =>
        typia.assert(props.highlightedProductId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
