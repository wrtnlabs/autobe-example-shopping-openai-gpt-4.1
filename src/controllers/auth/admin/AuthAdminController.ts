import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_admin_join } from "../../../providers/post__auth_admin_join";
import { post__auth_admin_login } from "../../../providers/post__auth_admin_login";
import { post__auth_admin_refresh } from "../../../providers/post__auth_admin_refresh";

import { IShoppingMallAiBackendAdmin } from "../../../api/structures/IShoppingMallAiBackendAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register a new admin account (shopping_mall_ai_backend_admins table) and
   * issue initial authorization tokens.
   *
   * This API endpoint allows creation of a new admin account by registering
   * required fields from the shopping_mall_ai_backend_admins table. The
   * operation gathers username, password_hash (securely hashed by the backend),
   * real name, email (unique and validated), and optional phone_number,
   * establishing a new system operator for global platform management.
   *
   * Upon registration, the system enforces all unique constraints (username,
   * email) and business validation rules relevant to regulatory requirements,
   * platform audit trail, and administrator onboarding. Success results in
   * creation of an eligible admin account with 'is_active' state set according
   * to policy (default active unless compliance/approval is required).
   *
   * If registration is successful, the backend issues a pair of access and
   * refresh JWT tokens, mapped to the session and audit trail. Token issuance
   * details are captured for compliance, security traceability and for
   * grant/revoke flows in future privilege escalations.
   *
   * This join operation is restricted to onboarding a new admin via API (not
   * interactive UI). Credentials are never exposed in cleartext; non-compliant
   * attempts result in validation or business errors. Admin registration is
   * subject to further review and enablement by super-admins where applicable.
   *
   * The operation is complementary to the login and refresh endpoints, which
   * handle subsequent credential validation and token renewal for API-centric
   * management. All operations defer credential hashing and security best
   * practices to backend subsystems for regulatory compliance and
   * auditability.
   *
   * @param connection
   * @param body Registration data for new admin account, including username,
   *   hashed password, name, email, is_active, and optionally phone_number.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IShoppingMallAiBackendAdmin.ICreate,
  ): Promise<IShoppingMallAiBackendAdmin.IAuthorized> {
    try {
      return await post__auth_admin_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate admin using username/password and issue authorization tokens
   * (shopping_mall_ai_backend_admins table).
   *
   * This API endpoint implements credential-based login for admin users by
   * accepting username and password. It references the
   * shopping_mall_ai_backend_admins schema, where username uniquely identifies
   * each admin and password_hash stores a securely hashed credential.
   *
   * The operation validates the provided credentials, confirms that the admin
   * account is active (is_active=true), not deleted (deleted_at is null), and
   * if authentication is successful, updates last_login_at for activity
   * monitoring and audit. It then generates and returns new access and refresh
   * JWT tokens with session metadata.
   *
   * Failed login attempts for suspended, deactivated, or non-existent accounts
   * are denied with appropriate business error codes, maintaining compliance
   * and evidence. All credential handling adheres to backend storage and
   * transmission security, never exposing hashes or plain text. The
   * authentication supports standard business login workflows, including error
   * handling for duplicates, concurrent sessions, and lockout policies as
   * defined in business rules.
   *
   * This operation is to be used in tandem with join (registration) and refresh
   * endpoints, forming the core of the admin authentication system for secure
   * API management. It is tightly coupled with the administrator lifecycle and
   * evidence preservation policies as dictated by compliance needs.
   *
   * @param connection
   * @param body Admin login credentials (username, password). Password is
   *   securely validated against stored password_hash.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IShoppingMallAiBackendAdmin.ILogin,
  ): Promise<IShoppingMallAiBackendAdmin.IAuthorized> {
    try {
      return await post__auth_admin_login({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Renew admin authentication tokens using a valid refresh token
   * (shopping_mall_ai_backend_admins table).
   *
   * This API endpoint implements authentication token renewal for admin users.
   * It is based on secure validation of a refresh token, which maps to an
   * active session and admin account in shopping_mall_ai_backend_admins. Upon
   * validation, the endpoint invalidates the used refresh token, issues new
   * access and refresh tokens, and updates audit/session state for evidence.
   *
   * The operation ensures all admin and session requirements: the admin must be
   * active (is_active=true), not deleted (deleted_at null), and the refresh
   * token must correspond to an active, unexpired session. Any
   * failures—invalid/expired tokens, deactivated account—result in access
   * denial with business error codes for compliance and traceability.
   *
   * Token renewal is managed in full accordance with JWT lifecycle, session
   * security, and backend audit policies. This operation is a critical
   * component of secure API-based admin management, enabling ongoing
   * authenticated interaction without resubmitting credentials for each
   * session.
   *
   * This endpoint should be used in conjunction with the join (admin
   * registration) and login endpoints to provide a complete admin
   * authentication flow, and aligns with evidence preservation, role
   * management, and regulatory compliance requirements for privileged
   * operations.
   *
   * @param connection
   * @param body Refresh token for session renewal. Must map to an eligible
   *   admin and an active session.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IShoppingMallAiBackendAdmin.IRefresh,
  ): Promise<IShoppingMallAiBackendAdmin.IAuthorized> {
    try {
      return await post__auth_admin_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
