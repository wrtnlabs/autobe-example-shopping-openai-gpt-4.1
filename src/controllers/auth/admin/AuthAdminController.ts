import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminJoin } from "../../../providers/postauthAdminJoin";
import { postauthAdminLogin } from "../../../providers/postauthAdminLogin";
import { postauthAdminRefresh } from "../../../providers/postauthAdminRefresh";

import { IAiCommerceAdmin } from "../../../api/structures/IAiCommerceAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register a new admin account (ai_commerce_admin table) for
   * platform/internal use only.
   *
   * This API registers a new administrator account on the aiCommerce platform
   * (ai_commerce_admin table).
   *
   * Paragraph 1: Use for platform-controlled internal provisioning (not public
   * self-registration), as all admin actions have platform-wide impact
   * according to the admin role definition and schema comment.
   *
   * Paragraph 2: The request body references IAiCommerceAdmin.IJoin and expects
   * unique email, secure password, and initial status fields. The
   * ai_commerce_admin schema enforces email uniqueness and proper password hash
   * storage.
   *
   * Paragraph 3: Upon successful registration, administrator authentication is
   * established via entry into ai_commerce_user_authentications with
   * session/security metadata, leveraging the system's JWT/token
   * infrastructure.
   *
   * Paragraph 4: Only internal or automated system actors should execute this
   * endpoint. Security must be enforced at the controller/service level to
   * block any non-authorized invocations. Error handling covers existing email
   * conflict and input validation.
   *
   * Paragraph 5: Typical onboarding flows chain with admin login and session
   * refresh using the respective authentication endpoints. All administrative
   * actions are audit-logged as required by the business compliance layer.
   *
   * @param connection
   * @param body Admin registration input (email, secure password, status).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IAiCommerceAdmin.IJoin,
  ): Promise<IAiCommerceAdmin.IAuthorized> {
    try {
      return await postauthAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate an admin user and issue tokens (ai_commerce_admin table).
   *
   * Login/authentication endpoint for administrator users on the aiCommerce
   * platform (ai_commerce_admin table).
   *
   * Paragraph 1: Accepts admin email and password as specified in
   * IAiCommerceAdmin.ILogin. Verifies credentials using the admin schema's
   * password_hash and status fields.
   *
   * Paragraph 2: Upon successful match, records a new
   * ai_commerce_user_authentications entry and issues access/refresh tokens
   * through JWT/session infrastructure. Suspended/deleted status or invalid
   * credentials result in error responses as required by the compliance logic.
   *
   * Paragraph 3: All login attempts are audit-logged, leveraging the
   * ai_commerce_audit_logs_user schema for evidentiary and compliance
   * enforcement. Multiple failed attempts may trigger lockout or security
   * notifications.
   *
   * Paragraph 4: Authorization tokens and account info are returned
   * (IAiCommerceAdmin.IAuthorized). Session policies (expiry, refresh) are
   * governed by the admin authentication policy determined in platform
   * configuration.
   *
   * Paragraph 5: To maintain secure privileged access, this operation is
   * intended for administrator accounts only; invoke join for registration and
   * refresh for session renewal as part of the overall authentication workflow
   * lifecycle.
   *
   * @param connection
   * @param body Admin login input (email and password).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IAiCommerceAdmin.ILogin,
  ): Promise<IAiCommerceAdmin.IAuthorized> {
    try {
      return await postauthAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh admin JWT session tokens (admin authentication, ai_commerce_admin
   * table).
   *
   * Allows session/token refresh for authenticated administrators on the
   * aiCommerce platform using valid refresh tokens.
   *
   * Paragraph 1: Accepts the refresh token as per IAiCommerceAdmin.IRefresh,
   * validating it for existence, expiry, and linkage to an active
   * ai_commerce_user_authentications record.
   *
   * Paragraph 2: Admin account status is checked via the ai_commerce_admin
   * schema; suspended/deleted statuses are blocked from refreshing.
   *
   * Paragraph 3: On success, issues new access/refresh tokens and returns
   * updated IAiCommerceAdmin.IAuthorized payload for privileged admin session.
   *
   * Paragraph 4: All refresh attempts (success/failure) are logged in the
   * ai_commerce_audit_logs_user table for compliance and traceability.
   *
   * Paragraph 5: This endpoint is to be invoked by UI or automation just before
   * session expiry and integrates with the login/join endpoints for full
   * authentication lifecycle management for admin users.
   *
   * @param connection
   * @param body Refresh token and session info for admin account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IAiCommerceAdmin.IRefresh,
  ): Promise<IAiCommerceAdmin.IAuthorized> {
    try {
      return await postauthAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
