import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthSellerJoin } from "../../../providers/postAuthSellerJoin";
import { postAuthSellerLogin } from "../../../providers/postAuthSellerLogin";
import { postAuthSellerRefresh } from "../../../providers/postAuthSellerRefresh";

import { IShoppingMallSeller } from "../../../api/structures/IShoppingMallSeller";

@Controller("/auth/seller")
export class AuthSellerController {
  /**
   * Register a new seller (shopping_mall_sellers table) and issue initial
   * authentication credentials/token.
   *
   * This operation enables the registration of a new seller on the AI-driven
   * shopping mall platform by creating records in the 'shopping_mall_sellers'
   * Prisma table, which in turn is linked to the parent customer record. The
   * process captures all mandatory KYC and business registration fields—such as
   * email, password_hash, name, status, and approval requirements—ensuring
   * rigorous compliance and onboarding control.
   *
   * The operation integrates tightly with status tracking fields like 'status',
   * 'kyc_status', and may include initial verification meta, providing the
   * business with a full audit trail as required by e-commerce compliance law.
   * Role escalation for existing members is also supported via this endpoint;
   * in both new and upgrade scenarios, uniqueness of email and association are
   * audited using the 'shopping_mall_customers' table.
   *
   * For security and extensibility, additional authentication fields (such as
   * mobile phone or social login identity, if available) are accepted as per
   * the schema. All onboarding steps are snapshotted and reviewed, with
   * role/section assignments validated at registration. The endpoint's business
   * logic ensures that incomplete or duplicate applications are properly
   * rejected, and all successful registrations are set to pending approval or
   * active based on workflow status.
   *
   * The registration event is essential for enabling subsequent authentication
   * and token issuance as a seller. Error handling is robust, including unique
   * constraint violations (email/check), invalid field formats, or business
   * rule infractions, and such events are logged as part of the system's
   * evidence chain.
   *
   * This operation does not provide any update or deletion capabilities,
   * focusing exclusively on initial seller registration. Profile modifications,
   * section changes, or escalation beyond 'seller' status require separate
   * role-specific endpoints and are not covered here.
   *
   * @param connection
   * @param body Seller registration payload with customer and seller profile
   *   fields. Includes email, password, KYC, and all schema-mandatory business
   *   fields.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IShoppingMallSeller.IJoin,
  ): Promise<IShoppingMallSeller.IAuthorized> {
    try {
      return await postAuthSellerJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Seller login (shopping_mall_sellers/shopping_mall_customers): Authenticate
   * and issue access/refresh tokens.
   *
   * Authenticate a seller using the 'shopping_mall_sellers' and
   * 'shopping_mall_customers' tables by verifying email and password
   * credentials. The 'shopping_mall_customers.email' field serves as the login
   * identifier, and 'password_hash' provides secure credential verification
   * matching best practices for authentication.
   *
   * This operation enforces business rules around account statuses: only
   * sellers with 'active' and/or 'approved' status may log in, and statuses
   * such as 'pending', 'suspended', or 'deleted' block authentication attempts,
   * generating security-audited events. The operation also logs all connection
   * and session events for compliance, referencing both seller and customer IDs
   * in the audit chain.
   *
   * Upon successful authentication, the operation issues new JWT access and
   * refresh tokens paired with seller authentication metadata in the response.
   * All failed login attempts trigger appropriate error logs and may escalate
   * to account lockout after repeated failures as defined in the business
   * logic.
   *
   * Login attempts on soft-deleted ('deleted_at' set) or withdrawn accounts are
   * prevented in accordance with legal and compliance requirements. Full
   * session tracking is maintained in the audit log for all authentication
   * flows.
   *
   * This endpoint does not create or update profile data, nor does it elevate
   * roles; those are managed via separate API operations. Its exclusive purpose
   * is secure credential-based seller authentication.
   *
   * @param connection
   * @param body Seller login payload specifying email and password credentials
   *   for authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IShoppingMallSeller.ILogin,
  ): Promise<IShoppingMallSeller.IAuthorized> {
    try {
      return await postAuthSellerLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Renew seller authentication tokens (JWT) using valid refresh token for
   * shopping_mall_sellers table.
   *
   * Renew authentication tokens for a seller using a valid refresh token
   * against the 'shopping_mall_sellers' and 'shopping_mall_customers' tables.
   * The submitted refresh token is verified for validity, and upon passing, new
   * JWT access and refresh tokens are generated and returned in the response
   * payload. All issued tokens are bound to the seller's current status as well
   * as compliance with account activity/soft-deletion checks ('deleted_at'
   * field is null).
   *
   * Failed attempts for inactive, suspended, or soft-deleted sellers are
   * strictly denied, and all such events are logged for regulatory evidence.
   * The operation supports tracking and audit linkage in compliance with
   * session authentication requirements for AI-driven shopping mall platforms.
   *
   * On successful renewal, connection/session meta is updated for full audit
   * support. This endpoint does not support credentials-based authentication or
   * any profile/account updates—it strictly serves token refresh flows.
   *
   * @param connection
   * @param body Token renewal payload with refresh token for seller session
   *   continuation.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IShoppingMallSeller.IRefresh,
  ): Promise<IShoppingMallSeller.IAuthorized> {
    try {
      return await postAuthSellerRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
