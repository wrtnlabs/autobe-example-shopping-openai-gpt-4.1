import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_seller_join } from "../../../providers/post__auth_seller_join";
import { post__auth_seller_login } from "../../../providers/post__auth_seller_login";
import { post__auth_seller_refresh } from "../../../providers/post__auth_seller_refresh";

import { IShoppingMallAiBackendSeller } from "../../../api/structures/IShoppingMallAiBackendSeller";

@Controller("/auth/seller")
export class AuthSellerController {
  /**
   * Register a new seller and issue JWT tokens
   * (shopping_mall_ai_backend_sellers).
   *
   * This operation enables a new seller to register and obtain authenticated
   * API access to the system. It is based on the
   * 'shopping_mall_ai_backend_sellers' table. Upon registration, the seller
   * record includes an email (for platform identity), a
   * business_registration_number (for compliance and uniqueness), and personal
   * or business name information. Creation of a seller account immediately
   * results in issuance of JWT tokens for API authentication and business logic
   * workflow. The seller can begin listing products and fulfilling orders after
   * successful registration. Security is enforced through unique email and
   * business registration number per seller. Integration into business
   * onboarding flows, dashboard creation, and audit event logging is supported.
   * This operation is essential for onboarding new merchants.
   *
   * @param connection
   * @param body Information required to register a new seller business account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IShoppingMallAiBackendSeller.ICreate,
  ): Promise<IShoppingMallAiBackendSeller.IAuthorized> {
    try {
      return await post__auth_seller_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Login as an existing seller and receive tokens
   * (shopping_mall_ai_backend_sellers).
   *
   * This authentication endpoint allows an existing seller to log in using
   * their business email and password. The information is checked against the
   * 'shopping_mall_ai_backend_sellers' table with password_hash, is_active, and
   * is_verified status for account eligibility. If authentication is successful
   * and the account is active and verified, the seller receives JWT access and
   * refresh tokens, enabling API-based business operations such as order
   * management, fulfillment, and analytics dashboard access. This operation
   * supports business session management, allows only credential-based logins
   * (no external/OAuth options), and is integral to secure, auditable platform
   * operations. Failed login attempts are logged for security compliance.
   * Related APIs: /auth/seller/join (registration) and /auth/seller/refresh
   * (token renewal).
   *
   * @param connection
   * @param body Seller's email and password used for login authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IShoppingMallAiBackendSeller.ILogin,
  ): Promise<IShoppingMallAiBackendSeller.IAuthorized> {
    try {
      return await post__auth_seller_login({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Renew JWT tokens for an active seller session
   * (shopping_mall_ai_backend_sellers).
   *
   * This operation allows an authenticated seller to renew their session tokens
   * using a valid refresh token. Session renewal is only available for sellers
   * whose accounts are active in the 'shopping_mall_ai_backend_sellers'
   * database table. Upon successful validation, the system issues new JWT
   * access and refresh tokens for continued API operations. This endpoint
   * updates the last_login_at field for the seller, maintaining accurate audit
   * and activity tracking. Clients should invoke this operation before token
   * expiry to ensure uninterrupted access to protected API resources. Related
   * endpoints: /auth/seller/login, /auth/seller/join.
   *
   * @param connection
   * @param body Refresh token to request new session tokens for seller.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IShoppingMallAiBackendSeller.IRefresh,
  ): Promise<IShoppingMallAiBackendSeller.IAuthorized> {
    try {
      return await post__auth_seller_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
