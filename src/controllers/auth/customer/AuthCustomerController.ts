import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthCustomerJoin } from "../../../providers/postAuthCustomerJoin";
import { postAuthCustomerLogin } from "../../../providers/postAuthCustomerLogin";
import { postAuthCustomerRefresh } from "../../../providers/postAuthCustomerRefresh";

import { IShoppingMallCustomer } from "../../../api/structures/IShoppingMallCustomer";

@Controller("/auth/customer")
export class AuthCustomerController {
  /**
   * Register a new customer account (shopping_mall_customers table).
   *
   * This API operation enables the creation of a new customer account on the
   * shopping mall platform, referencing the shopping_mall_customers table as
   * its core. The customer's email (required and unique per channel), name, and
   * optional phone number are collected, with password_hash present only if a
   * password strategy is used, as observed in the schema.
   *
   * Upon invocation, the operation validates the uniqueness of the email within
   * the target channel and hashes any provided password before persisting as
   * password_hash. The kyc_status and status columns are initialized with
   * channel policy defaults ('active', 'pending', etc). It does not presume
   * more than these verified schema fields.
   *
   * Customer registration is implemented as a public endpoint, ensuring any
   * user can sign up as a new member provided the email is not already
   * registered in that channel. The implementation stores creation and update
   * timestamps with current UTC values. Soft deletion is supported
   * post-registration by the deleted_at field.
   *
   * On success, this operation issues a JWT access token and a refresh token to
   * the newly created customer, following the IShoppingMallCustomer.IAuthorized
   * structure (see DTO policy). The returned payload contains only fields
   * guaranteed by the current schema and omits any business logic outside the
   * registration transaction.
   *
   * This registration endpoint is related to the login and refresh endpoints.
   * Users will typically register here (join), then subsequently use the login
   * endpoint for authentication, and the refresh endpoint to renew tokens. Each
   * endpoint is documented to reference only shopping_mall_customers schema
   * columns observed.
   *
   * @param connection
   * @param body Information required to join/register as a new customer. Only
   *   fields defined in shopping_mall_customers schema are accepted.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IShoppingMallCustomer.IJoin,
  ): Promise<IShoppingMallCustomer.IAuthorized> {
    try {
      return await postAuthCustomerJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate (login) customer and issue JWT tokens (shopping_mall_customers
   * table).
   *
   * This API operation authenticates a customer using their registered email
   * and password, referencing the shopping_mall_customers table. It accepts
   * provided credentials, locates the customer by channel and email, and
   * compares the submitted password after hashing against the stored
   * password_hash field.
   *
   * The login procedure checks that the customer’s status is not set to states
   * like 'suspended', 'withdrawn', or soft-deleted, as determined by the status
   * and deleted_at fields in the schema. Authentication is denied if status or
   * deletion policy fails. The kyc_status is not used for authentication gating
   * per schema analysis but could be referenced by business logic externally.
   *
   * After successful validation, the operation issues new JWT access and
   * refresh tokens for the session. Unsuccessful login attempts (invalid
   * credentials, status, or deleted_at present) are rejected with appropriate
   * error handling.
   *
   * This login endpoint aligns with the join and refresh endpoints. Customers
   * may register via join, authenticate via login, and maintain sessions via
   * refresh. All password and sensitive data is handled according to best
   * practices, only accepting what schema fields support.
   *
   * The endpoint issues response bodies conforming to
   * IShoppingMallCustomer.IAuthorized, which holds token(s) and customer
   * identity payload based strictly on the schema. No fields outside those
   * defined by the schema are returned or assumed.
   *
   * @param connection
   * @param body User login credentials (email and password); only parameters
   *   defined in shopping_mall_customers schema are allowed.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IShoppingMallCustomer.ILogin,
  ): Promise<IShoppingMallCustomer.IAuthorized> {
    try {
      return await postAuthCustomerLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for customer session (shopping_mall_customers table).
   *
   * This API operation enables customers to refresh their authentication
   * session, using the shopping_mall_customers table for user identity
   * validation. It receives a refresh token, validates it for authenticity and
   * expiration, then verifies that the associated customer is in a valid state
   * (status is not suspended/withdrawn and deleted_at is null).
   *
   * Upon successful validation, it issues a new access token and optionally a
   * new refresh token. The endpoint is crucial for maintaining persistent
   * sessions without forcing users to re-enter credentials upon access token
   * expiry. If the refresh token is invalid or the customer’s status/deletion
   * policy is violated per the schema, the operation returns an error and
   * denies the token refresh.
   *
   * Token refresh does not transfer or modify any customer profile data but
   * provides authorized session state as output, always following the
   * IShoppingMallCustomer.IAuthorized DTO structure, directly referencing
   * fields in the schema.
   *
   * This endpoint is always linked with join (registration) and login (initial
   * authentication) endpoints. Each step uses distinct authorizationType
   * markers, and they collectively provide a secure JWT-based auth flow for the
   * customer role. All logic aligns strictly with the shopping_mall_customers
   * table and does not include operations unsupported by its schema.
   *
   * @param connection
   * @param body JWT refresh token for session renewal; follows project
   *   convention. Only schema-supported fields allowed.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IShoppingMallCustomer.IRefresh,
  ): Promise<IShoppingMallCustomer.IAuthorized> {
    try {
      return await postAuthCustomerRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
