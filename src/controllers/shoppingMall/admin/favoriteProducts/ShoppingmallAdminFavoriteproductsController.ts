import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallAdminFavoriteProductsFavoriteProductId } from "../../../../providers/getShoppingMallAdminFavoriteProductsFavoriteProductId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IShoppingMallFavoriteProduct } from "../../../../api/structures/IShoppingMallFavoriteProduct";

@Controller("/shoppingMall/admin/favoriteProducts/:favoriteProductId")
export class ShoppingmallAdminFavoriteproductsController {
  /**
   * Retrieve a detailed favorited product by ID
   * (shopping_mall_favorite_products table).
   *
   * This endpoint retrieves detailed information about a single product
   * favorited by a user, identified by favoriteProductId. The result includes
   * the full favorite record, all meta fields (such as notification_enabled and
   * batch_label), links to the preserved product snapshot, and the original
   * product entity, if present. Security is enforced so that only the
   * favoriting user may access their own favorite records; admin access is
   * granted for support or compliance audit. The result supports review for
   * personalization, notification settings, batch labels, and export or
   * evidence operations.
   *
   * Attempts to retrieve a favorite that does not exist, is deleted, or is not
   * owned by the user will return an error according to platform business
   * rules. The operation also integrates with downstream personalization,
   * notification, and snapshot export logic, and is part of the broader
   * user-facing favorites management suite.
   *
   * @param connection
   * @param favoriteProductId Unique identifier of the favorited product entry
   *   to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallFavoriteProduct> {
    try {
      return await getShoppingMallAdminFavoriteProductsFavoriteProductId({
        admin,
        favoriteProductId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
