import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminChannelsChannelIdCategories } from "../../../../../providers/postShoppingMallAdminChannelsChannelIdCategories";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminChannelsChannelIdCategories } from "../../../../../providers/patchShoppingMallAdminChannelsChannelIdCategories";
import { getShoppingMallAdminChannelsChannelIdCategoriesCategoryId } from "../../../../../providers/getShoppingMallAdminChannelsChannelIdCategoriesCategoryId";
import { putShoppingMallAdminChannelsChannelIdCategoriesCategoryId } from "../../../../../providers/putShoppingMallAdminChannelsChannelIdCategoriesCategoryId";
import { deleteShoppingMallAdminChannelsChannelIdCategoriesCategoryId } from "../../../../../providers/deleteShoppingMallAdminChannelsChannelIdCategoriesCategoryId";

import { IShoppingMallChannelCategory } from "../../../../../api/structures/IShoppingMallChannelCategory";
import { IPageIShoppingMallChannelCategory } from "../../../../../api/structures/IPageIShoppingMallChannelCategory";

@Controller("/shoppingMall/admin/channels/:channelId/categories")
export class ShoppingmallAdminChannelsCategoriesController {
  /**
   * Create a new category within a specific shopping mall channel
   * (shopping_mall_channel_categories).
   *
   * This endpoint is responsible for creating hierarchical categories within a
   * given channel. Categories are essential for product organization, search,
   * campaign targeting, and business rule scoping on the shopping mall
   * platform.
   *
   * Only administrators or appropriately authorized business staff should
   * access this endpoint due to the impact on search taxonomies, merchandising,
   * and user navigation. All write operations are subject to audit trail
   * requirements, and unique codes/names per channel are strictly enforced by
   * the database.
   *
   * The category will include a required code and name, an optional parent_id
   * to support hierarchical trees, an optional description, display ordering,
   * and business tracking timestamps. Validation ensures no duplicate codes
   * within a channel and correct parent-child relationships. If errors occur
   * (such as a duplicate code or invalid references), a detailed error message
   * will be provided.
   *
   * This endpoint may be used together with category retrieval, update, delete,
   * or reorganization endpoints. Post-creation, related services may trigger
   * indexing, notification, or analytics updates. Error handling must respect
   * database unique constraint violations and authorization enforcement.
   *
   * @param connection
   * @param channelId ID of the channel to which the category will be added.
   * @param body Information required to create a new category for a channel.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallChannelCategory.ICreate,
  ): Promise<IShoppingMallChannelCategory> {
    try {
      return await postShoppingMallAdminChannelsChannelIdCategories({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List, filter, sort, and paginate channel-specific categories
   * (shopping_mall_channel_categories).
   *
   * Obtain a comprehensive list of product or section categories within a given
   * shopping mall channel, using advanced filters, sort options, and pagination
   * controls.
   *
   * Categories in the shopping_mall_channel_categories table support
   * hierarchical structures and multi-level relationships. This operation
   * supports querying categories by parent, searching by textual fields
   * (code/name), filtering by status or display_order, and is suitable for
   * rendering nested category trees for channel administration. Requests can
   * supply complex query parameters encapsulated in the
   * IShoppingMallChannelCategory.IRequest DTO, while results are wrapped as
   * paginated collections, enabling UI and batch management workflows.
   *
   * Authorization requirements ensure that only admin users or users with
   * proper permissions can access the full category list. Error handling
   * includes feedback for invalid filters or request payloads, with security
   * policies enforced against unauthorized enumeration of categories beyond the
   * user's privilege scope.
   *
   * @param connection
   * @param channelId The unique identifier (UUID) of the channel whose
   *   categories are being queried.
   * @param body Filtering, sorting, and pagination parameters for channel
   *   categories query, matching IShoppingMallChannelCategory.IRequest DTO.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallChannelCategory.IRequest,
  ): Promise<IPageIShoppingMallChannelCategory.ISummary> {
    try {
      return await patchShoppingMallAdminChannelsChannelIdCategories({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full details for a specific channel category
   * (shopping_mall_channel_categories) by ID.
   *
   * Retrieve complete details of a single category within a specified channel.
   * This operation directly accesses the shopping_mall_channel_categories table
   * and returns all business-relevant fieldsâ€”such as category code, name,
   * parent relationship, description, display order, status,
   * creation/update/delete timestamps, and audit metadata as described in the
   * Prisma schema comments.
   *
   * This endpoint is essential for category management, allowing administrative
   * interfaces to present or edit full information about a category, perform
   * audits, or display contextual relationships (e.g., parent/child). Only
   * administrators or those with required permissions may access full metadata;
   * others should receive minimal or redacted information as determined by
   * authorization policies. If the category does not exist or the user lacks
   * authorization, an appropriate error is returned.
   *
   * @param connection
   * @param channelId The unique identifier (UUID) of the channel that owns the
   *   category.
   * @param categoryId The unique identifier (UUID) of the category to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallChannelCategory> {
    try {
      return await getShoppingMallAdminChannelsChannelIdCategoriesCategoryId({
        admin,
        channelId,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing channel category's details
   * (shopping_mall_channel_categories).
   *
   * Allows administrators to modify the properties of an existing category
   * within a given channel, impacting classification, navigation, and product
   * organization. The endpoint supports updates to the name, code (within
   * uniqueness constraints), description, display order, and parent category
   * for hierarchical management.
   *
   * Strict business logic is enforced, including prevention of duplicate codes
   * in a channel, cycle detection in parent categories (no self-referencing or
   * loops), and validation of all references. Audit logs are required for
   * change tracking. Only users with admin role can access this operation, and
   * unauthorized attempts should be blocked and logged.
   *
   * Related endpoints may include category creation, retrieval, and deletion.
   * If an invalid update is attempted (e.g., referring to a deleted parent or
   * introducing a cycle), a precise error message is returned. Successful
   * updates may trigger re-indexing, notification, or analytics processes.
   *
   * @param connection
   * @param channelId Channel ID containing the target category.
   * @param categoryId ID of the category within the channel to update.
   * @param body Fields and relationships to update on the specified category.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallChannelCategory.IUpdate,
  ): Promise<IShoppingMallChannelCategory> {
    try {
      return await putShoppingMallAdminChannelsChannelIdCategoriesCategoryId({
        admin,
        channelId,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically (soft) delete a channel category
   * (shopping_mall_channel_categories) from a channel.
   *
   * Allows administrators to logically delete (soft-delete) a specific category
   * under a channel, marking its deleted_at field without permanently removing
   * it from the database. The operation supports audit and regulatory
   * requirements, maintaining data integrity for compliance and potential
   * recovery.
   *
   * Category records with a non-null deleted_at field are considered inactive
   * for navigation, product assignment, and search, but remain accessible for
   * historical lookup. Business logic must enforce that products previously
   * assigned to deleted categories be handled according to platform policies
   * (e.g., reclassification, notification).
   *
   * Only administrators may perform this operation. Attempts to delete
   * non-existent or already deleted categories should fail with an appropriate
   * error message. Related endpoints include category retrieval (excluding
   * deleted by default), restore, or audit log display. All removals are
   * required to be logged for evidence and traceability.
   *
   * @param connection
   * @param channelId Channel ID that contains the target category.
   * @param categoryId ID of the channel category to logically delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminChannelsChannelIdCategoriesCategoryId(
        {
          admin,
          channelId,
          categoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
