import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminChannelsChannelIdSections } from "../../../../../providers/postShoppingMallAdminChannelsChannelIdSections";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminChannelsChannelIdSections } from "../../../../../providers/patchShoppingMallAdminChannelsChannelIdSections";
import { getShoppingMallAdminChannelsChannelIdSectionsSectionId } from "../../../../../providers/getShoppingMallAdminChannelsChannelIdSectionsSectionId";
import { putShoppingMallAdminChannelsChannelIdSectionsSectionId } from "../../../../../providers/putShoppingMallAdminChannelsChannelIdSectionsSectionId";
import { deleteShoppingMallAdminChannelsChannelIdSectionsSectionId } from "../../../../../providers/deleteShoppingMallAdminChannelsChannelIdSectionsSectionId";

import { IShoppingMallSection } from "../../../../../api/structures/IShoppingMallSection";
import { IPageIShoppingMallSection } from "../../../../../api/structures/IPageIShoppingMallSection";

@Controller("/shoppingMall/admin/channels/:channelId/sections")
export class ShoppingmallAdminChannelsSectionsController {
  /**
   * Create a new shopping mall section in a given channel (admin only).
   *
   * This API endpoint allows an authorized administrator to add a new section
   * to a specified shopping mall channel. The request body must include
   * required fields such as code, name, display order, and may optionally
   * include a description. The channel ID is provided in the URL path and all
   * inputs are validated according to the schema and business requirements.
   *
   * Upon successful creation, the endpoint returns all details for the new
   * section, including assigned ID, creation and update timestamps, and any
   * optional fields. If a section code already exists within the channel, or if
   * required fields are missing or invalid, errors are clearly surfaced for
   * client-side correction.
   *
   * Permissions are strictly enforced, ensuring only admins can add new
   * sections. All creation events are logged for audit purposes and role
   * elevation to this endpoint is strictly prohibited for non-admin users.
   *
   * @param connection
   * @param channelId Unique identifier (UUID) of the parent shopping mall
   *   channel.
   * @param body New section creation fields: code (unique per channel), name,
   *   display order (int), and optional description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSection.ICreate,
  ): Promise<IShoppingMallSection> {
    try {
      return await postShoppingMallAdminChannelsChannelIdSections({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List/filter shopping mall sections for a given channel with pagination and
   * filters (admin only).
   *
   * Retrieve an array of shopping mall sections belonging to a specified
   * channel. Administrators and authorized users can filter by section name,
   * code, display order, and deletion status, supporting targeted management of
   * the mall's navigational structure.
   *
   * The endpoint employs strict access control, permitting only authorized
   * users to view detailed section lists for a given channel. Advanced
   * filtering and sorting parameters can be applied via the request body, and
   * pagination is provided to efficiently support large result sets.
   *
   * Security logic ensures that users without proper access to the channel or
   * sections receive a clear, permission-denied error. Error handling also
   * covers invalid channel IDs and request validation failures.
   *
   * @param connection
   * @param channelId Unique identifier (UUID) of the shopping mall channel.
   * @param body Section list search/filter and pagination parameters (name,
   *   code, display order, status, page, limit, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSection.IRequest,
  ): Promise<IPageIShoppingMallSection.ISummary> {
    try {
      return await patchShoppingMallAdminChannelsChannelIdSections({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific mall section in a channel (admin only).
   *
   * The endpoint returns all available details for a specific shopping mall
   * section, identified by its unique section ID within the context of a
   * channel. It provides a comprehensive dataset including the section name,
   * code, display order, description, creation and update metadata, and
   * deletion status.
   *
   * Security measures ensure that only admins or authorized users may access
   * this level of detail for a specific section. If the section does not exist
   * or is not associated with the given channel, a not found error is returned,
   * and permission checks protect sensitive data.
   *
   * This operation is typically paired with the section list endpoint for UI
   * detail navigation, and is compliant with audit, evidence, and role-based
   * access protocols.
   *
   * @param connection
   * @param channelId Unique identifier (UUID) of the shopping mall channel
   *   context.
   * @param sectionId Unique identifier (UUID) of the mall section to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sectionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSection> {
    try {
      return await getShoppingMallAdminChannelsChannelIdSectionsSectionId({
        admin,
        channelId,
        sectionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update information for an existing shopping mall section
   * (shopping_mall_sections) within a specific channel.
   *
   * Update the details of a shopping mall section within a specific channel.
   * This operation operates on the shopping_mall_sections table and leverages
   * core fields such as code, name, description, display_order, and status, as
   * described in the schema comments.
   *
   * The update process enforces validation on uniqueness of the section code
   * per channel, permissible status values, and consistency of display order
   * within the channel for proper section arrangement. Security is enforced so
   * that only users with admin privileges can execute this operation; all
   * modifications are logged for audit purposes and compliance tracking.
   *
   * The request must include all necessary attributes for a section update, and
   * if any validation fails (e.g., duplicate code or unauthorized
   * modification), a detailed error message is returned. Changes are
   * timestamped in the updated_at column, and soft deletion is recorded using
   * the deleted_at column for audit traceability.
   *
   * @param connection
   * @param channelId The unique identifier (UUID) of the parent shopping mall
   *   channel containing the section to update.
   * @param sectionId The unique identifier (UUID) of the shopping mall section
   *   to update.
   * @param body All updatable attributes of a shopping mall section. Follows
   *   IShoppingMallSection.IUpdate DTO structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sectionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSection.IUpdate,
  ): Promise<IShoppingMallSection> {
    try {
      return await putShoppingMallAdminChannelsChannelIdSectionsSectionId({
        admin,
        channelId,
        sectionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (soft-delete) a shopping mall section
   * (shopping_mall_sections) in a specified channel by marking its deleted_at
   * field.
   *
   * Permanently remove a shopping mall section (logical soft-delete) within a
   * specified channel. This operation interacts with the shopping_mall_sections
   * table, utilizing its fields including deleted_at, to ensure that data is
   * never physically removed, but rather marked as deleted for legal and
   * business evidence retention.
   *
   * Administrators executing this operation must have the requisite
   * permissions, and all actions are recorded for evidence preservation. This
   * operation will cascade required cleanup or linkage updates as mandated by
   * business rules for removing sections (for instance, reassigning attached
   * products or updating section display order). Attempts to access the deleted
   * section after this operation will result in appropriate error responses to
   * prevent unintentional access.
   *
   * If any issues occur, such as attempting to delete a non-existent section or
   * a section with unresolved dependencies, detailed error messages are
   * returned. The operation should be used with care to preserve compliance,
   * audit, and business continuity.
   *
   * @param connection
   * @param channelId The unique identifier (UUID) of the parent shopping mall
   *   channel containing the section to remove.
   * @param sectionId The unique identifier (UUID) of the section to delete
   *   logically.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sectionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminChannelsChannelIdSectionsSectionId({
        admin,
        channelId,
        sectionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
