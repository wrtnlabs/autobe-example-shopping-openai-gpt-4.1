import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminChannels } from "../../../../providers/postShoppingMallAdminChannels";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminChannels } from "../../../../providers/patchShoppingMallAdminChannels";
import { getShoppingMallAdminChannelsChannelId } from "../../../../providers/getShoppingMallAdminChannelsChannelId";
import { putShoppingMallAdminChannelsChannelId } from "../../../../providers/putShoppingMallAdminChannelsChannelId";
import { deleteShoppingMallAdminChannelsChannelId } from "../../../../providers/deleteShoppingMallAdminChannelsChannelId";

import { IShoppingMallChannel } from "../../../../api/structures/IShoppingMallChannel";
import { IPageIShoppingMallChannel } from "../../../../api/structures/IPageIShoppingMallChannel";

@Controller("/shoppingMall/admin/channels")
export class ShoppingmallAdminChannelsController {
  /**
   * Create a new shopping mall channel (storefront/brand).
   *
   * Register a new channel in the shopping mall backend, providing complete
   * definition for all required properties such as code, name, and description.
   * As each channel anchors downstream entities (sections, categories,
   * products, users), creation is locked to highly privileged roles and follows
   * strict validation rules for uniqueness and completeness.
   *
   * This operation requires admin access to prevent unauthorized creation or
   * abuse, and includes error messaging for conflicting codes or invalid
   * attributes according to the schema. Audit and compliance logging occurs for
   * every creation event, supporting later configuration or business
   * expansion.
   *
   * Post-creation, the operation may trigger configuration loading, downstream
   * object scoping, or notification events relevant to the business workflow
   * for onboarding a new channel.
   *
   * @param connection
   * @param body Information and attributes required to create a new shopping
   *   mall channel.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallChannel.ICreate,
  ): Promise<IShoppingMallChannel> {
    try {
      return await postShoppingMallAdminChannels({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of shopping mall channels.
   *
   * Retrieve a filtered and paginated list of shopping mall channels using
   * advanced search and filter capabilities. The operation allows clients to
   * list channels by code, name, or other relevant identifiers. Intended for
   * navigation, administration, and configuration of multi-channel e-commerce
   * scenarios, this operation ensures that both admins and operators can
   * efficiently manage channels in large-scale shopping platforms.
   *
   * The endpoint enforces proper authorization and exposes only fields that are
   * appropriate for role-based access. Security and business rules may restrict
   * certain channel details to authorized users, and audit considerations are
   * in place for monitoring access to channel data.
   *
   * Pagination, sorting, and advanced query features ensure system scalability
   * and performance in handling large numbers of channels. Error handling
   * includes graceful handling of invalid filters, unauthorized access
   * attempts, and malformed queries.
   *
   * @param connection
   * @param body Search and filter parameters for listing channels, including
   *   pagination and sorting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallChannel.IRequest,
  ): Promise<IPageIShoppingMallChannel.ISummary> {
    try {
      return await patchShoppingMallAdminChannels({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific shopping mall channel by ID.
   *
   * Fetch the detailed profile of a specific shopping mall channel using its
   * unique ID. This operation enables admins or authorized operators to review
   * configuration, audit status, business context, and top-level properties
   * before making changes or associating sections, categories, or users with
   * the channel.
   *
   * Channel access is controlled by strict authorization policies ensuring only
   * permitted parties can access potentially sensitive configuration
   * information. The operation references the shopping_mall_channels entity and
   * exposes all relevant display and business logic fields. Relationships to
   * sections, categories, and child entities are available for further queries
   * or linkage.
   *
   * Proper error handling is implemented for invalid or deleted channel IDs,
   * unauthorized requests, and reference integrity issues as per channel-level
   * security and compliance.
   *
   * @param connection
   * @param channelId Unique identifier (UUID) of the shopping mall channel to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":channelId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallChannel> {
    try {
      return await getShoppingMallAdminChannelsChannelId({
        admin,
        channelId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update information of an existing shopping mall channel by ID.
   *
   * Update the configuration or attributes of an existing channel, enabling
   * administrators to change names, business codes, descriptions, or related
   * metadata. The operation validates that the target channel exists and has
   * not been deleted, and enforces business logic to prevent duplication of
   * codes or invalid state transitions.
   *
   * All changes are recorded for audit purposes, including who performed the
   * update and what fields were modified, supporting both compliance and
   * rollback workflows for system stability. Strict role-based access ensures
   * only administrators may perform this operation, limiting the risk of
   * accidental or malicious alteration to channel records.
   *
   * Error handling is granular: attempts to edit non-existent or deleted
   * channels, conflict with existing codes, or unauthorized update requests
   * produce clear error messages per established API patterns.
   *
   * @param connection
   * @param channelId Unique identifier (UUID) of the shopping mall channel to
   *   update.
   * @param body Fields and attributes to update for the target shopping mall
   *   channel.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":channelId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallChannel.IUpdate,
  ): Promise<IShoppingMallChannel> {
    try {
      return await putShoppingMallAdminChannelsChannelId({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a shopping mall channel (admin only; logical removal, not
   * physical delete).
   *
   * This API endpoint allows an administrator to logically delete (soft-delete)
   * a shopping mall channel by updating the 'deleted_at' column. The request
   * targets a specific channel by its UUID, permanently marking it as deleted
   * for operational purposes, but retaining its record and all related entities
   * for compliance and auditability.
   *
   * Security is strictly enforced; only authenticated administrators are
   * permitted to use this endpoint. Deletion does not cascade to physically
   * remove sections, products, or other related entities. All historical data,
   * including creation and modification timestamps, remains intact for future
   * audits or restoration.
   *
   * Attempts to delete a channel that does not exist, or has already been
   * deleted, will result in clear, actionable errors. The endpoint guarantees
   * compliance with evidence retention policies by never physically erasing the
   * channel record, and maintains full traceability for legal and business
   * needs.
   *
   * @param connection
   * @param channelId Unique identifier (UUID) of the target shopping mall
   *   channel to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":channelId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminChannelsChannelId({
        admin,
        channelId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
