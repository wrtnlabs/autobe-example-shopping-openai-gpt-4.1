import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItems } from "../../../../../../providers/postShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItems";
import { AdminAuth } from "../../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItems } from "../../../../../../providers/patchShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItems";
import { getShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItemsShipmentItemId } from "../../../../../../providers/getShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItemsShipmentItemId";
import { putShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItemsShipmentItemId } from "../../../../../../providers/putShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItemsShipmentItemId";
import { deleteShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItemsShipmentItemId } from "../../../../../../providers/deleteShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItemsShipmentItemId";

import { IShoppingMallShipmentItem } from "../../../../../../api/structures/IShoppingMallShipmentItem";
import { IPageIShoppingMallShipmentItem } from "../../../../../../api/structures/IPageIShoppingMallShipmentItem";

@Controller("/shoppingMall/admin/orders/:orderId/shipments/:shipmentId/items")
export class ShoppingmallAdminOrdersShipmentsItemsController {
  /**
   * Add a new shipment item to a specific shipment within an order. Associated
   * with shopping_mall_shipment_items.
   *
   * This API operation creates and adds a new shipment item to the specified
   * shipment of an order. Shipment items represent the discrete quantities of
   * ordered products that are included in a shipment batch and are crucial for
   * supporting complex shipment, tracking, and fulfillment business flows
   * common in large e-commerce platforms.
   *
   * The request body must include the required details matching the
   * IShoppingMallShipmentItem.ICreate contract (including which order item is
   * to be marked as shipped, the quantity, and associated product/variant
   * references). Business validation ensures the item is part of the referenced
   * order, is not already fully shipped, and the addition does not violate
   * inventory or order integrity constraints. Errors are returned for attempts
   * to over-ship items, reference non-existent entities, or business rule
   * violations.
   *
   * Authorization is restricted to sellers handling fulfillment and system
   * administrators. Upon success, the created shipment item record is returned
   * for UI updating, downstream automation, and audit history. Audit and
   * compliance are ensured by recording all event metadata and linking to
   * relevant order/shipment/fulfillment chains.
   *
   * @param connection
   * @param orderId Unique identifier for the target order under which the
   *   shipment is being managed.
   * @param shipmentId Unique identifier for the parent shipment to which the
   *   item will be added.
   * @param body Creation request with order item reference, product/variant
   *   info, and shipped quantity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShipmentItem.ICreate,
  ): Promise<IShoppingMallShipmentItem> {
    try {
      return await postShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItems({
        admin,
        orderId,
        shipmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Filter and retrieve a paginated list of shipment items for a specific order
   * shipment. Associated with shopping_mall_shipment_items.
   *
   * This API allows users to retrieve a filtered, paginated list of shipment
   * items associated with a specific order and shipment. The operation supports
   * advanced search and filtering, taking advantage of the
   * shopping_mall_shipment_items schema's structure—for example, filtering by
   * referenced order items, quantity, shipment batch, or item creation date. It
   * is optimized for large-scale batch shipments as common in enterprise
   * commerce flows.
   *
   * Authorization is required; typically, sellers responsible for the shipment,
   * order owners, or admins may invoke this endpoint. Pagination parameters,
   * complex filters, and sorting options (by created_at, product, fulfillment
   * state) are supported via the request body. The response returns a paginated
   * list including details for each shipment item, supporting business process
   * integration and audit/compliance review.
   *
   * Security considerations include ensuring that only actors linked to the
   * relevant order, shipment, or fulfillment process can access this list.
   * Related endpoints include the ability to retrieve a single item, add
   * shipment items, update shipment item quantities, or remove shipment items
   * from a batch.
   *
   * @param connection
   * @param orderId Unique identifier for the order containing the shipment.
   * @param shipmentId Unique identifier for the shipment whose items are being
   *   listed.
   * @param body Advanced filter, pagination, and sorting criteria for searching
   *   shipment items of a shipment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShipmentItem.IRequest,
  ): Promise<IPageIShoppingMallShipmentItem> {
    try {
      return await patchShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItems({
        admin,
        orderId,
        shipmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details for a specific shipment item within an order's
   * shipment. Associated with shopping_mall_shipment_items.
   *
   * This API returns the complete detailed information of a shipment item given
   * its identifier, enforcing that the requested item exists under the
   * specified order and shipment through strict referential checks. Shipment
   * items (shopping_mall_shipment_items) track the number of units shipped for
   * an order item in a specific shipment batch and are critical for batch
   * fulfillment and downstream tracking. This operation supports operational,
   * fulfillment, customer service, and compliance use cases.
   *
   * Permission checks are enforced: only sellers fulfilling the order,
   * associated admins, or order owners can access the full shipment item
   * details. The response structure includes all relevant attributes as
   * described in the Prisma schema: shipped_quantity, references to shipments
   * and order items, audit metadata (created_at/updated_at), etc. Error
   * handling returns clear responses for missing items, misreferenced
   * shipments, or unauthorized access.
   *
   * Commonly paired with the shipment items list endpoint, as well as
   * create/update operations for batch shipment management and fulfillment
   * control.
   *
   * @param connection
   * @param orderId Unique identifier for the related order.
   * @param shipmentId Unique identifier for the targeted shipment.
   * @param shipmentItemId Unique identifier for the shipment item within the
   *   batch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":shipmentItemId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
    @TypedParam("shipmentItemId")
    shipmentItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallShipmentItem> {
    try {
      return await getShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItemsShipmentItemId(
        {
          admin,
          orderId,
          shipmentId,
          shipmentItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a shipment item for a specific order and shipment
   * (shopping_mall_shipment_items table).
   *
   * Update a shipment item—a specific item within an order's shipment batch.
   * This enables correcting quantities, handling partial/shipping errors, or
   * administrative adjustments. Shipment items link shipment batches to order
   * items and are fundamental for partial and multi-shipment workflows.
   *
   * This operation requires role-based authorization (seller who owns the
   * shipment's items, or admin). Only items in non-finalized shipments (e.g.,
   * not yet fully delivered) are editable; once delivered, shipment items are
   * immutable. All quantity updates are validated against ordered and
   * previously shipped amounts, and negative/inconsistent updates are rejected
   * with a detailed error.
   *
   * Updates are auditable: on each mutation, a snapshot or audit event is
   * recorded, preserving the before/after states. Related APIs include shipment
   * state transitions (e.g., marking as shipped or delivered), and shipment
   * item creation/cancellation (as supported by business rules). Errors are
   * raised for invalid shipment IDs/order IDs or lack of permission.
   *
   * Role checks are enforced at the endpoint level. Sellers may only update
   * shipment items for their own goods and only within allowed states; admins
   * may override. All responses include the updated shipment item state for UI
   * confirmation.
   *
   * @param connection
   * @param orderId Unique identifier of the order containing the shipment and
   *   shipment item.
   * @param shipmentId Unique identifier of the shipment batch for the order.
   * @param shipmentItemId Unique identifier of the shipment item being updated
   *   within the shipment batch.
   * @param body Updated information of the shipment item, such as
   *   shipped_quantity and any allowed editable fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":shipmentItemId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
    @TypedParam("shipmentItemId")
    shipmentItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShipmentItem.IUpdate,
  ): Promise<IShoppingMallShipmentItem> {
    try {
      return await putShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItemsShipmentItemId(
        {
          admin,
          orderId,
          shipmentId,
          shipmentItemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (logically delete) a shipment item by orderId, shipmentId, and
   * shipmentItemId (shopping_mall_shipment_items table).
   *
   * Erase a shipment item (row) from a shipment batch within an order. This
   * supports workflows such as cancelling a scheduled shipment item, correcting
   * an incorrectly included item before fulfillment, or handling pre-shipment
   * administrative errors.
   *
   * Only authorized users—sellers responsible for the shipment or system
   * administrators—can perform this action. Logical (soft) deletion is applied
   * by setting the deleted_at field, ensuring traceability and compliance with
   * business/audit requirements. The operation is restricted: only shipment
   * items in shipments that are not yet finalized or shipped can be deleted.
   * Any attempt to "erase" after shipping will cause security and business
   * validation errors.
   *
   * All deletion events are logged for compliance, referencing the snapshot of
   * the shipment item prior to deletion. Related APIs include updating shipment
   * items, shipment batch status transitions, and the parent order management
   * endpoints. Users will receive either a confirmation of successful erasure
   * or an error indicating the operation was not permissible (due to shipment
   * state, insufficient permission, or invalid IDs).
   *
   * @param connection
   * @param orderId Unique identifier of the related order.
   * @param shipmentId Unique identifier of the shipment batch.
   * @param shipmentItemId Unique identifier of the shipment item to erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":shipmentItemId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
    @TypedParam("shipmentItemId")
    shipmentItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrdersOrderIdShipmentsShipmentIdItemsShipmentItemId(
        {
          admin,
          orderId,
          shipmentId,
          shipmentItemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
