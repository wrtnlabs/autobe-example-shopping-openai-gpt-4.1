import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminOrdersOrderIdShipments } from "../../../../../providers/postShoppingMallAdminOrdersOrderIdShipments";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminOrdersOrderIdShipments } from "../../../../../providers/patchShoppingMallAdminOrdersOrderIdShipments";
import { getShoppingMallAdminOrdersOrderIdShipmentsShipmentId } from "../../../../../providers/getShoppingMallAdminOrdersOrderIdShipmentsShipmentId";
import { putShoppingMallAdminOrdersOrderIdShipmentsShipmentId } from "../../../../../providers/putShoppingMallAdminOrdersOrderIdShipmentsShipmentId";
import { deleteShoppingMallAdminOrdersOrderIdShipmentsShipmentId } from "../../../../../providers/deleteShoppingMallAdminOrdersOrderIdShipmentsShipmentId";

import { IShoppingMallShipment } from "../../../../../api/structures/IShoppingMallShipment";
import { IPageIShoppingMallShipment } from "../../../../../api/structures/IPageIShoppingMallShipment";

@Controller("/shoppingMall/admin/orders/:orderId/shipments")
export class ShoppingmallAdminOrdersShipmentsController {
  /**
   * Register a new shipment batch for an order in shopping_mall_shipments.
   *
   * An authenticated seller (responsible for fulfillment of items in a given
   * order) or an admin can use this operation to create/register a new shipment
   * record for an order, such as for partial shipments or multi-phase
   * deliveries. The input must include detailed batch and fulfillment data:
   * seller, carrier, items, tracking code, and relevant timestamps. The system
   * validates that the order is eligible for shipment, and enforces permissions
   * so that sellers can create shipments only for items they manage.
   *
   * Upon successful creation, a new shipment row is recorded to
   * shopping_mall_shipments, with all initial fulfillment metadata. Downstream
   * modules (delivery, after-sales, analytics) can then be triggered. The
   * endpoint returns the full created shipment record, or appropriate error
   * details if business rules are violated (e.g., unauthorized, order state,
   * assignment mismatch, missing required fields). This endpoint is central to
   * complex fulfillment workflows such as multi-seller, split, or staged
   * delivery scenarios.
   *
   * @param connection
   * @param orderId Unique identifier of the order for which shipment is being
   *   created
   * @param body Full creation information for the order shipment batch (seller,
   *   carrier, items, tracking info, meta)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShipment.ICreate,
  ): Promise<IShoppingMallShipment> {
    try {
      return await postShoppingMallAdminOrdersOrderIdShipments({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated list of shipment batches for a specific order from
   * shopping_mall_shipments.
   *
   * This endpoint allows an authenticated user (customer, seller, or admin) to
   * retrieve a paginated and optionally filtered set of all shipment records
   * for a given order (identified by orderId).
   *
   * Security permissions are enforced such that only actors with legitimate
   * access to the specified order can view its shipments. Customers can access
   * only their own orders, sellers only their handled items, and admins have
   * global access. The operation returns shipment summaries including status,
   * tracking numbers, delivery windows, seller info, and per-shipment
   * analytics. Detailed filtering options enable users to analyze fulfillment
   * performance, identify delays, or reconcile after-sales disputes.
   *
   * The operation is tightly coupled with the shopping_mall_shipments database
   * model, and supports integration with delivery and after-sales modules.
   * Errors such as unauthorized access or invalid orderId are handled with
   * appropriate status codes and audit logging. Results are returned as
   * paginated collections for performance, and may be used together with
   * shipment detail views or shipment update endpoints as part of a full order
   * management workflow.
   *
   * @param connection
   * @param orderId Unique identifier of the target order to get shipments for
   * @param body Search and filter options for shipment records, as well as
   *   pagination and sorting controls
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShipment.IRequest,
  ): Promise<IPageIShoppingMallShipment.ISummary> {
    try {
      return await patchShoppingMallAdminOrdersOrderIdShipments({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information on a specific order shipment
   * (shopping_mall_shipments).
   *
   * This endpoint provides granular shipment details for a specified shipmentId
   * within its parent order (orderId). It enforces strong security so that only
   * stakeholders associated with the order (customer, assigned seller, admin)
   * may retrieve the detail.
   *
   * The returned record includes the shipment’s status, all associated shipment
   * items, carrier/tracking links, timestamps for status transitions
   * (requested, shipped, delivered, etc), seller identity, and analytics/meta.
   * Error handling covers not-found, not-belonging-to-order, or unauthorized
   * access cases. This endpoint supports logistics traceability, customer
   * inquiry response, and after-sales case management. The result is primarily
   * consumed in shipment detail views and order history pages.
   *
   * @param connection
   * @param orderId Unique identifier of the order that includes the specified
   *   shipment
   * @param shipmentId Unique identifier for the shipment batch to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":shipmentId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallShipment> {
    try {
      return await getShoppingMallAdminOrdersOrderIdShipmentsShipmentId({
        admin,
        orderId,
        shipmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update shipment batch details for specific order shipment in
   * shopping_mall_shipments.
   *
   * This endpoint enables the updating of a shipment batch within an order. It
   * is available to the responsible seller or system administrator. Supported
   * updates include shipping carrier, tracking codes, fulfillment status,
   * shipment items, and delivery info. The system enforces that only the
   * authorized actor can perform updates and that the shipmentId actually
   * belongs to the specified orderId.
   *
   * Immutable fields (IDs, seller) cannot be changed. Errors are returned if
   * unauthorized, if the shipment cannot be updated due to business or audit
   * rules (e.g., already delivered, locked by dispute), or if the supplied data
   * is incomplete. All changes are snapshotted for subsequent audit, dispute,
   * and compliance access. Success returns the updated shipment entity;
   * failures return error details, with relevant business and security
   * context.
   *
   * This operation is a key part of order fulfillment, shipping event tracking,
   * and after-sales management workflows.
   *
   * @param connection
   * @param orderId Unique identifier for the order containing the shipment
   * @param shipmentId Unique identifier for the shipment batch to update
   * @param body Update information for the shipment batch (status, tracking,
   *   items, carrier, meta)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":shipmentId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShipment.IUpdate,
  ): Promise<IShoppingMallShipment> {
    try {
      return await putShoppingMallAdminOrdersOrderIdShipmentsShipmentId({
        admin,
        orderId,
        shipmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (soft delete) a specific shipment belonging to an order.
   * Associated with shopping_mall_shipments and shopping_mall_orders.
   *
   * This API operation allows an authorized user to logically delete (soft
   * delete) a shipment associated with an order. The endpoint sets the
   * deleted_at field on the targeted shipment record but does not physically
   * remove the data, in full alignment with compliance, audit, and system
   * evidence requirements defined in the shopping_mall_shipments Prisma
   * schema.
   *
   * Only authenticated users with proper permissions can execute this
   * operation, typically sellers responsible for the shipment, or
   * administrators overseeing the order. Business rules are enforced—shipments
   * may only be deleted if not yet shipped or in certain cancelable states;
   * attempts to delete active, shipping, or delivered shipments should be
   * blocked, with error feedback returned detailing the violation. When a
   * shipment with associated shipment items is deleted, those items are not
   * deleted but their relationships are preserved for auditability.
   *
   * For comprehensive audit, the system also records the deletion event in
   * compliance logs. Related endpoints include shipment creation, update,
   * listing, and retrieval; updates or deletions will reflect in order
   * fulfillment progress. Error cases include attempts to delete non-existent
   * shipments, already-deleted shipments, or shipments not tied to the
   * specified order.
   *
   * @param connection
   * @param orderId Unique identifier of the target order containing the
   *   shipment.
   * @param shipmentId Unique identifier of the shipment to be deleted
   *   logically.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":shipmentId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrdersOrderIdShipmentsShipmentId({
        admin,
        orderId,
        shipmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
