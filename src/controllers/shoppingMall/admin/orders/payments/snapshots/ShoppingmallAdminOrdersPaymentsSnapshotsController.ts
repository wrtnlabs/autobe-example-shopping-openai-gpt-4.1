import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminOrdersOrderIdPaymentsPaymentIdSnapshots } from "../../../../../../providers/patchShoppingMallAdminOrdersOrderIdPaymentsPaymentIdSnapshots";
import { AdminAuth } from "../../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminOrdersOrderIdPaymentsPaymentIdSnapshotsSnapshotId } from "../../../../../../providers/getShoppingMallAdminOrdersOrderIdPaymentsPaymentIdSnapshotsSnapshotId";

import { IPageIShoppingMallPaymentSnapshot } from "../../../../../../api/structures/IPageIShoppingMallPaymentSnapshot";
import { IShoppingMallPaymentSnapshot } from "../../../../../../api/structures/IShoppingMallPaymentSnapshot";

@Controller("/shoppingMall/admin/orders/:orderId/payments/:paymentId/snapshots")
export class ShoppingmallAdminOrdersPaymentsSnapshotsController {
  /**
   * Search payment snapshot history for a payment under an order
   * (shopping_mall_payment_snapshots).
   *
   * This endpoint provides a filtered and paginated collection of all
   * historical snapshots for a particular payment (paymentId), under a specific
   * order (orderId). The underlying table, 'shopping_mall_payment_snapshots',
   * stores complete, immutable records of payment states at each significant
   * eventâ€”creation, processing, confirmation, update, or deletion. Used for
   * audit, compliance, and dispute investigation.
   *
   * Supports advanced search by snapshot timestamp, event type (if referenced
   * in the data), and free-text filtering where implemented. Pagination options
   * prevent overload from large audit histories. Only admin roles may access
   * detailed payment snapshots due to sensitive business and personal data.
   * Typical usage scenarios include financial audit, compliance reviews, fraud
   * investigations, and operational support. Related endpoints allow access to
   * the current payment record, as well as creation and update flows for
   * payment entries.
   *
   * Errors result from missing payment references, invalid order/payment IDs,
   * or out-of-bounds pagination parameters. Output includes all key
   * business/archive fields for reconstructing payment history as required by
   * regulatory or dispute processes.
   *
   * @param connection
   * @param orderId Unique identifier of the order containing the referenced
   *   payment.
   * @param paymentId Unique identifier of the payment whose snapshots are being
   *   queried.
   * @param body Search criteria and pagination parameters for payment snapshot
   *   filtering.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallPaymentSnapshot.IRequest,
  ): Promise<IPageIShoppingMallPaymentSnapshot> {
    try {
      return await patchShoppingMallAdminOrdersOrderIdPaymentsPaymentIdSnapshots(
        {
          admin,
          orderId,
          paymentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific payment snapshot for a payment in an order
   * (shopping_mall_payment_snapshots).
   *
   * This endpoint allows an authorized admin to fetch all information about one
   * specific payment snapshot, designated by snapshotId, for a payment (by
   * paymentId) within an order (by orderId). Payment snapshots capture full
   * immutable records of the payment at each critical state transition for
   * evidence and compliance, such as payment request, confirmation,
   * cancellation, or refund events.
   *
   * The result includes all business fields and compliance/audit meta as
   * serialized at the time the snapshot was created. Typical scenarios include
   * dispute resolution, audit export, and compliance reporting. Appropriate
   * error messages are returned if any referenced record is not found, or if
   * authorization rules are not met. Related endpoints enable listing all
   * snapshots or retrieving the latest active payment record.
   *
   * @param connection
   * @param orderId Unique identifier of the order containing the referenced
   *   payment.
   * @param paymentId Unique identifier of the payment whose snapshot is being
   *   retrieved.
   * @param snapshotId Unique identifier of the payment snapshot record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":snapshotId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedParam("snapshotId")
    snapshotId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallPaymentSnapshot> {
    try {
      return await getShoppingMallAdminOrdersOrderIdPaymentsPaymentIdSnapshotsSnapshotId(
        {
          admin,
          orderId,
          paymentId,
          snapshotId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
