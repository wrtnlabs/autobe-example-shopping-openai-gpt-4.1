import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminOrders } from "../../../../providers/postShoppingMallAdminOrders";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminOrders } from "../../../../providers/patchShoppingMallAdminOrders";
import { getShoppingMallAdminOrdersOrderId } from "../../../../providers/getShoppingMallAdminOrdersOrderId";
import { putShoppingMallAdminOrdersOrderId } from "../../../../providers/putShoppingMallAdminOrdersOrderId";
import { deleteShoppingMallAdminOrdersOrderId } from "../../../../providers/deleteShoppingMallAdminOrdersOrderId";

import { IShoppingMallOrder } from "../../../../api/structures/IShoppingMallOrder";
import { IPageIShoppingMallOrder } from "../../../../api/structures/IPageIShoppingMallOrder";

@Controller("/shoppingMall/admin/orders")
export class ShoppingmallAdminOrdersController {
  /**
   * Create a new order based on an application (cart, user input), validating
   * all business rules, and returning the full created order record. Uses
   * shopping_mall_orders.
   *
   * This API operation creates a new order in the business catalog,
   * transforming an application cart or direct input into a live shopping
   * order. The endpoint enforces all validation: product availability checks,
   * inventory application, option/value validation, coupon code/promotion
   * handling, and eligibility (minimum/maximum amounts, currency, etc.). If all
   * checks pass, an order record is created along with order items, snapshot
   * events, and payment initializations.
   *
   * Applicable business rules for stacking/exclusion, segmentation, fulfillment
   * batching, and logistics routing are processed in this operation. The
   * operation is comprehensive: side-effects may include triggering rule engine
   * events, initiating payment and shipment, generating audit trails, and
   * notifying relevant parties. The endpoint is suitable for both authenticated
   * and guest orders as system configuration permits.
   *
   * Authorization covers all customers (or public/guest if permitted) with
   * detailed validation error returns for any business rule failure
   * (out-of-stock, eligibility, price change, etc.). It is idempotent against
   * duplicate cart conversion; duplicate submissions with the same
   * cart/application are handled gracefully with an appropriate error or
   * retrieval of the existing order. Success returns the complete created order
   * and all related sub-entities.
   *
   * @param connection
   * @param body Order application details: source cart reference, fulfillment
   *   instructions, payment method, options, user data, and any coupons
   *   applied. Must follow IShoppingMallOrder.ICreate structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallOrder.ICreate,
  ): Promise<IShoppingMallOrder> {
    try {
      return await postShoppingMallAdminOrders({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of orders across all states
   * for CRM, analytics, and reporting. Uses shopping_mall_orders.
   *
   * This API operation provides advanced search and pagination over the order
   * database, allowing users to filter by customer, channel, section, status
   * (applied, paid, shipping, delivered, completed, cancelled, etc.), date
   * ranges, amounts, and other key criteria defined in
   * IShoppingMallOrder.IRequest.
   *
   * Each search result returns a summary list or full order details as
   * required, supporting business workflows, customer inquiry handling, fraud
   * analysis, and operational reporting. The endpoint is compatible with CRM
   * dashboards and data export needs, incorporating both user-facing and
   * administrative use-cases. Standard pagination parameters (page, size),
   * multi-level sorting, and advanced filter operators are supported for
   * flexible querying.
   *
   * Authorization is required and enforced by business role and segmentation
   * policy: customers only see their own orders, sellers see their own, and
   * admins have global access. Error scenarios provide actionable messages and
   * support high parallel query loads for analytics.
   *
   * @param connection
   * @param body Search, filtering, and pagination criteria for advanced order
   *   retrieval. Supports complex multi-field queries across date, status,
   *   customer, channel, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallOrder.IRequest,
  ): Promise<IPageIShoppingMallOrder> {
    try {
      return await patchShoppingMallAdminOrders({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the full details of a single order by its ID, including all items,
   * status, and linked data. Uses shopping_mall_orders.
   *
   * This API operation retrieves a complete view of a business order as
   * identified by the unique order ID (UUID). It returns the main order record
   * along with all major related sub-entities (items, fulfillment status,
   * payment, shipment, audit snapshots, and linked customer/seller).
   *
   * Typical applications include customer order history screens, seller
   * dashboards, after-sales workflow handling, customer service, fraud
   * investigation, and compliance export. The endpoint utilizes strict
   * authorization logic: customers and sellers are segmented by their own
   * records, while admins have full access. Complete error and existence checks
   * are performed, and sensitive data is filtered appropriately per requesting
   * role.
   *
   * The operation allows for extension via includes/expansions where necessary
   * (e.g., related shipment, payment), and is the canonical entrypoint for all
   * business rule engines requiring full order context. Includes full audit
   * coverage of all access attempts and provides granular error messages if
   * order is missing or access is denied.
   *
   * @param connection
   * @param orderId Unique identifier for the order to retrieve (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrder> {
    try {
      return await getShoppingMallAdminOrdersOrderId({
        admin,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing shopping mall order by ID.
   *
   * This API allows for the update of an order record by order ID. Orders in
   * the shoppingMall system represent the core business transaction structure
   * and include customer linkage, channel/section context, order status,
   * payment details, and audit data. Updates are restricted to appropriate
   * roles and only permitted when the order is not finalized, cancelled, or
   * deleted.
   *
   * The update process must enforce all relevant business logic, such as
   * checking for illegal state transitions (e.g., cannot move from delivered to
   * applied), and prevent updates to orders marked deleted. All modifications
   * will trigger storage of a pre-update snapshot in accordance with compliance
   * requirements, ensuring full traceability for disputes and audit. Attempts
   * to update locked, deleted, or read-only orders will result in clear,
   * actionable error messages.
   *
   * This operation interacts with the shopping_mall_orders table, referencing
   * comments in the schema regarding state transition, multi-seller support,
   * and evidence retention. It is designed to be used by users with order
   * management privileges and returns the updated order record.
   *
   * @param connection
   * @param orderId Order ID to update. Must be a valid UUID representing an
   *   order in the shopping_mall_orders table.
   * @param body Update information for the target shopping mall order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrder.IUpdate,
  ): Promise<IShoppingMallOrder> {
    try {
      return await putShoppingMallAdminOrdersOrderId({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an existing shopping mall order by order ID.
   *
   * This API marks an order as deleted, enabling soft-delete functionality as
   * required for compliance and audit. Instead of removing the order data, the
   * system sets the deleted_at timestamp, ensuring the record remains
   * accessible for regulatory recovery and historical analysis.
   *
   * Deletion is only allowed when the order is in a deletable state as per
   * business rules â€” for example, not finalized, not associated with ongoing
   * shipments, or after permitted cancellation windows. Upon invocation, a
   * snapshot of the order will be saved for evidence, and deletion actions will
   * be logged in the audit trail.
   *
   * Attempts to delete orders in restricted or non-deletable states will result
   * in clear error messages. The endpoint enforces robust permission and status
   * logic based on schema comments for status and deletion fields.
   *
   * @param connection
   * @param orderId Order ID to soft delete. Must be a valid UUID of an existing
   *   order in shopping_mall_orders.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrdersOrderId({
        admin,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
