import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminOrdersOrderIdSnapshots } from "../../../../../providers/patchShoppingMallAdminOrdersOrderIdSnapshots";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminOrdersOrderIdSnapshotsSnapshotId } from "../../../../../providers/getShoppingMallAdminOrdersOrderIdSnapshotsSnapshotId";

import { IPageIShoppingMallOrderSnapshot } from "../../../../../api/structures/IPageIShoppingMallOrderSnapshot";
import { IShoppingMallOrderSnapshot } from "../../../../../api/structures/IShoppingMallOrderSnapshot";

@Controller("/shoppingMall/admin/orders/:orderId/snapshots")
export class ShoppingmallAdminOrdersSnapshotsController {
  /**
   * List paginated order snapshot history for a specific order
   * (shopping_mall_order_snapshots).
   *
   * Use this endpoint to retrieve a filtered and paginated list of all
   * historical state snapshots for a specific order. Snapshots are created on
   * each key state transition for shopping_mall_orders, preserving the complete
   * serialized order object for audit, compliance, and evidence purposes.
   *
   * Request body supports advanced search, pagination, and sorting
   * capabilities, using IShoppingMallOrderSnapshot.IRequest to specify filters
   * such as snapshot event time, snapshot_reason, or actor. The response is a
   * paginated list of snapshots (IPageIShoppingMallOrderSnapshot), facilitating
   * legal, audit, and business investigations.
   *
   * Authorization checks allow access for order owners (customers), relevant
   * sellers, and platform admins. Sensitive details are filtered according to
   * role permissions, supporting regional compliance regulations.
   *
   * @param connection
   * @param orderId Identifier of the order to retrieve snapshots for (UUID)
   * @param body Filtering, sorting, and pagination parameters for order
   *   snapshot retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderSnapshot.IRequest,
  ): Promise<IPageIShoppingMallOrderSnapshot> {
    try {
      return await patchShoppingMallAdminOrdersOrderIdSnapshots({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single historical snapshot of an order for audit and evidence
   * purposes (shopping_mall_order_snapshots).
   *
   * This operation allows authorized users (such as administrators or the
   * customer who placed the order) to fetch a single snapshot of an order
   * record based on a snapshot's unique identifier. Each snapshot preserves the
   * immutable state of the order at the moment of a critical business event
   * (such as creation, payment, shipment, cancellation, etc).
   *
   * Security: Only users with rights over the order (the owner, the fulfilling
   * seller, or a system admin) may access the snapshot, as it may contain PII
   * and sensitive transactional data. Permission checks must verify the
   * requesting user's relationship to the order before serving the snapshot.
   *
   * The response includes all key order fields and nested data (items,
   * payments, fulfillment, etc.) serialized as at the snapshot time, suitable
   * for compliance export or internal forensic analysis.
   *
   * Linked DB: shopping_mall_order_snapshots, with foreign key to
   * shopping_mall_orders. This is part of the audit/evidence chain for order
   * lifecycle events. Path parameter 'orderId' is required for context, and
   * 'snapshotId' identifies the exact snapshot entity.
   *
   * If the order or snapshot does not exist (or the user has insufficient
   * rights), the system returns HTTP 404 or 403 with an error message in
   * accordance with compliance and privacy standards.
   *
   * @param connection
   * @param orderId UUID of the target order whose snapshot is being requested.
   * @param snapshotId UUID of the snapshot record to retrieve, uniquely
   *   identifying the historical record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":snapshotId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("snapshotId")
    snapshotId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderSnapshot> {
    try {
      return await getShoppingMallAdminOrdersOrderIdSnapshotsSnapshotId({
        admin,
        orderId,
        snapshotId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
