import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallAdminOrdersOrderIdAfterSaleServicesAfterSaleServiceId } from "../../../../../providers/getShoppingMallAdminOrdersOrderIdAfterSaleServicesAfterSaleServiceId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminOrdersOrderIdAfterSaleServicesAfterSaleServiceId } from "../../../../../providers/putShoppingMallAdminOrdersOrderIdAfterSaleServicesAfterSaleServiceId";
import { deleteShoppingMallAdminOrdersOrderIdAfterSaleServicesAfterSaleServiceId } from "../../../../../providers/deleteShoppingMallAdminOrdersOrderIdAfterSaleServicesAfterSaleServiceId";
import { postShoppingMallAdminOrdersOrderIdAfterSaleServices } from "../../../../../providers/postShoppingMallAdminOrdersOrderIdAfterSaleServices";

import { IShoppingMallAfterSaleService } from "../../../../../api/structures/IShoppingMallAfterSaleService";

@Controller("/shoppingMall/admin/orders/:orderId/afterSaleServices")
export class ShoppingmallAdminOrdersAftersaleservicesController {
  /**
   * Retrieve details for a specific after-sales service case by order and
   * afterSaleServiceId (shopping_mall_after_sale_services).
   *
   * Retrieve comprehensive details about a single after-sales service case for
   * a specific order. The operation fetches all relevant business data fields,
   * including the associated order ID, after-sale service case type (such as
   * return, exchange, or refund), status, user-provided reasons, linked
   * evidence snapshots, and resolution messaging.
   *
   * Authorization and visibility are enforced based on the user's relationship
   * to the order or their platform role: customers can view their own
   * after-sales records, sellers can view only after-sales records linked to
   * their orders/products, and admins can view all.
   *
   * This retrieval operation references the shopping_mall_after_sale_services
   * table and pulls all fields defined therein, aligning with audit and legal
   * evidence needs. Error handling ensures that non-existent or unauthorized
   * queries result in clear, actionable errors.
   *
   * Related operations include list/search for all after-sale cases and update
   * or delete operations for authorized users.
   *
   * @param connection
   * @param orderId Unique identifier of the target order whose after-sales
   *   service is being queried.
   * @param afterSaleServiceId Unique identifier of the target after-sales
   *   service case within the order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":afterSaleServiceId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("afterSaleServiceId")
    afterSaleServiceId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAfterSaleService> {
    try {
      return await getShoppingMallAdminOrdersOrderIdAfterSaleServicesAfterSaleServiceId(
        {
          admin,
          orderId,
          afterSaleServiceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an after-sales service record for a specific order
   * (shopping_mall_after_sale_services).
   *
   * Update the information for a specific after-sales service case within an
   * order. Permitted updates include status transitions (such as processing,
   * approved, or denied), updated resolution messages, and changes to
   * user-submitted reasons or evidence reference fields as permitted by
   * business logic and authorization.
   *
   * The endpoint consumes data per the IShoppingMallAfterSaleService.IUpdate
   * DTO and validates that all updates comply with business rules and
   * eligibility (e.g., certain statuses can only transition in allowed ways;
   * after-sales services may be locked after resolution or escalation). All
   * updates are snapshotted for compliance, and notification flows may be
   * triggered depending on the update.
   *
   * Only authorized actors can perform updates: requesting customers for their
   * own cases (with constraints), sellers for seller-side workflow, and admins
   * for oversight and dispute scenarios. Unauthorized updates yield clear,
   * actionable errors.
   *
   * @param connection
   * @param orderId Unique identifier of the order to which this after-sales
   *   service belongs.
   * @param afterSaleServiceId Unique identifier of the after-sales service case
   *   being updated.
   * @param body Fields required to update the after-sales service record,
   *   following business rules and compliance.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":afterSaleServiceId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("afterSaleServiceId")
    afterSaleServiceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAfterSaleService.IUpdate,
  ): Promise<IShoppingMallAfterSaleService> {
    try {
      return await putShoppingMallAdminOrdersOrderIdAfterSaleServicesAfterSaleServiceId(
        {
          admin,
          orderId,
          afterSaleServiceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (logically remove) an after-sales service record for a specific
   * order (shopping_mall_after_sale_services).
   *
   * Logically remove an after-sales service case by marking it as
   * deleted—setting its deleted_at field—rather than removing the record from
   * the database. This implements a soft deletion, retaining the full evidence
   * trail for compliance and dispute requirements.
   *
   * Actors authorized to perform this operation include the requester for their
   * own after-sales cases (within permissions), the responsible seller in
   * specific after-sales flows, and administrators with audit privileges. If
   * attempted on an already resolved, locked, or escalated after-sales case,
   * the operation will block with an error explaining required next steps or
   * stating compliance lock-out.
   *
   * This operation ensures that no actual data is lost (just flagged as
   * deleted), which is critical for audit/legal compliance in regulated
   * e-commerce. All deletions are snapshotted, and audit/deletion event logs
   * are created.
   *
   * @param connection
   * @param orderId Unique identifier of the order related to the after-sales
   *   service being deleted.
   * @param afterSaleServiceId Unique identifier of the after-sales service case
   *   to be logically deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":afterSaleServiceId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("afterSaleServiceId")
    afterSaleServiceId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminOrdersOrderIdAfterSaleServicesAfterSaleServiceId(
        {
          admin,
          orderId,
          afterSaleServiceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new after-sales service record for a specific order
   * (shopping_mall_after_sale_services).
   *
   * Initiate a new after-sales service process attached to a particular order.
   * This operation enables customers (buyers) to file return/exchange/refund or
   * other after-sales requests against their orders, referencing necessary
   * evidence snapshots and business context. The endpoint accepts comprehensive
   * creation data as mandated by the IShoppingMallAfterSaleService.ICreate DTO,
   * including case type, status, reason, and optional evidence linkages.
   *
   * Business logic enforces eligibility checks: only orders eligible within the
   * after-sales window and matching business rules can trigger a request. If
   * the service is requested by a seller (e.g., for recall), seller audit
   * linkage and escalation apply. The record creation is snapshotted for audit,
   * and notifications are issued to all stakeholders.
   *
   * Responses provide the freshly created after-sale service record. Security
   * and data integrity are enforced according to the roles and the actor's
   * relationship with the order and service.
   *
   * @param connection
   * @param orderId Unique identifier of the order for which the after-sales
   *   service is being initiated.
   * @param body Fields required to create a new after-sales service record
   *   aligned to the provided order, based on business and compliance rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAfterSaleService.ICreate,
  ): Promise<IShoppingMallAfterSaleService> {
    try {
      return await postShoppingMallAdminOrdersOrderIdAfterSaleServices({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
