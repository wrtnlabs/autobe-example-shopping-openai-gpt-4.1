import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminEntitySnapshots } from "../../../../providers/patchShoppingMallAdminEntitySnapshots";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminEntitySnapshotsEntitySnapshotId } from "../../../../providers/getShoppingMallAdminEntitySnapshotsEntitySnapshotId";

import { IPageIShoppingMallEntitySnapshot } from "../../../../api/structures/IPageIShoppingMallEntitySnapshot";
import { IShoppingMallEntitySnapshot } from "../../../../api/structures/IShoppingMallEntitySnapshot";

@Controller("/shoppingMall/admin/entitySnapshots")
export class ShoppingmallAdminEntitysnapshotsController {
  /**
   * Search and paginate entity snapshot audit history
   * (shopping_mall_entity_snapshots) with filters.
   *
   * Retrieve a filtered, paginated list of entity snapshots for any auditable
   * business object within the shopping mall platform. This operation supports
   * sophisticated search/filtering by entity_type (such as product, customer,
   * order, review, etc.), entity_id, event reason, or the snapshot_actor_id
   * (who performed the triggering event), as well as event and snapshot time
   * ranges.
   *
   * The endpoint supports business audit functions, rollback/dispute
   * investigation, and regulatory compliance requests by allowing fine-grained
   * analysis of all historical state captures. Permission to access specific
   * types of entity snapshots is restricted to high-authorization roles
   * (generally 'admin'), given the potential PII or regulated information
   * included in snapshot_data.
   *
   * This operation queries the 'shopping_mall_entity_snapshots' table as
   * defined in the Actors, Products, Orders, and other domains, returning
   * matching records with full serialized state and metadata. Large result sets
   * are delivered using a standard paginated response payload to support
   * scalable audit operations. Related operations include detailed snapshot
   * retrieval (GET /entitySnapshots/{entitySnapshotId}) and the audit log list
   * endpoint. Error cases include invalid filters, role-based access
   * restrictions, and malformed queries.
   *
   * @param connection
   * @param body Entity snapshot search filters, pagination, and sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallEntitySnapshot.IRequest,
  ): Promise<IPageIShoppingMallEntitySnapshot> {
    try {
      return await patchShoppingMallAdminEntitySnapshots({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a historic entity snapshot
   * (shopping_mall_entity_snapshots).
   *
   * Retrieve the full historical state for a specific entity snapshot within
   * the shopping mall backend system. This operation references the
   * shopping_mall_entity_snapshots Prisma schema, which tracks immutable,
   * point-in-time captures of every critical business object (Customer,
   * Product, Order, etc.) as required for evidence preservation and regulatory
   * compliance.
   *
   * The endpoint is secured so that only administrative roles can access it,
   * due to its exposure of full serialized entity data, which may include
   * sensitive information. Typical use cases include compliance audits,
   * dispute/rollback analysis, and verification of proper business rule
   * enforcement at the time of the snapshot event.
   *
   * The operation is designed to be used in conjunction with the paginated
   * index endpoint (PATCH /entitySnapshots), especially when detailed insight
   * into a given snapshot instance is required. Possible error responses
   * include not found, forbidden (insufficient role), and bad request
   * (malformed snapshot ID).
   *
   * @param connection
   * @param entitySnapshotId Unique identifier of the desired entity snapshot
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":entitySnapshotId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("entitySnapshotId")
    entitySnapshotId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallEntitySnapshot> {
    try {
      return await getShoppingMallAdminEntitySnapshotsEntitySnapshotId({
        admin,
        entitySnapshotId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
