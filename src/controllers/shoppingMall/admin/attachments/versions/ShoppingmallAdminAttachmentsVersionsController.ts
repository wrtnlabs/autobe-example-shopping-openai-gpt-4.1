import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminAttachmentsAttachmentIdVersions } from "../../../../../providers/postShoppingMallAdminAttachmentsAttachmentIdVersions";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminAttachmentsAttachmentIdVersions } from "../../../../../providers/patchShoppingMallAdminAttachmentsAttachmentIdVersions";
import { getShoppingMallAdminAttachmentsAttachmentIdVersionsVersionId } from "../../../../../providers/getShoppingMallAdminAttachmentsAttachmentIdVersionsVersionId";
import { putShoppingMallAdminAttachmentsAttachmentIdVersionsVersionId } from "../../../../../providers/putShoppingMallAdminAttachmentsAttachmentIdVersionsVersionId";
import { deleteShoppingMallAdminAttachmentsAttachmentIdVersionsVersionId } from "../../../../../providers/deleteShoppingMallAdminAttachmentsAttachmentIdVersionsVersionId";

import { IShoppingMallAttachmentVersion } from "../../../../../api/structures/IShoppingMallAttachmentVersion";
import { IPageIShoppingMallAttachmentVersion } from "../../../../../api/structures/IPageIShoppingMallAttachmentVersion";

@Controller("/shoppingMall/admin/attachments/:attachmentId/versions")
export class ShoppingmallAdminAttachmentsVersionsController {
  /**
   * Create a new version for a given attachment
   * (shopping_mall_attachment_versions table).
   *
   * Create a new file version for an existing attachment by supplying all
   * relevant metadata and the server URI for the uploaded file content. This
   * operation must be used when a user (customer, seller, or admin) uploads a
   * new version of an existing file for business entities (products, reviews,
   * orders, posts, etc.).
   *
   * Permission checks are enforced to ensure only authorized users can update
   * the target attachment. The system validates that the supplied URI points to
   * a compliant file (size, type, structure) and updates are only possible for
   * attachments where the current user has replacement privileges.
   *
   * All previous versions for the attachment are preserved and retrievable via
   * audit APIs. Every new version increments the version number sequentially
   * and forms a time-stamped chain of versions for evidence and regulatory
   * compliance. If compliance, retention, or GDPR rules require blocking
   * version updates, a detailed error is returned explaining the constraint.
   *
   * Related endpoints include listing all versions of an attachment, retrieving
   * a single version, and replacing file versions for attachments used in
   * shopping mall business entities. This operation cannot be used if the
   * parent attachment is soft/hard deleted; such requests return a business
   * logic error. On success, it returns the full attachment version metadata.
   *
   * @param connection
   * @param attachmentId Target attachment's unique identifier (UUID).
   * @param body Metadata required to create a new attachment version for an
   *   existing attachment. Includes server file URI, version info, and audit
   *   metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAttachmentVersion.ICreate,
  ): Promise<IShoppingMallAttachmentVersion> {
    try {
      return await postShoppingMallAdminAttachmentsAttachmentIdVersions({
        admin,
        attachmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and paginate versions for a specific attachment from
   * shopping_mall_attachment_versions.
   *
   * This API operation retrieves a list of all versions associated with a
   * specific attachment. The endpoint supports advanced filtering, pagination,
   * and sorting of attachment versions according to request parameters. Only
   * metadata about each version (e.g., version number, mime type, upload
   * timestamp, hash) is returned—not file binary content.
   *
   * Permissions and role checks enforce access: typically, the uploader and
   * users with admin role or required business permissions may access version
   * lists. Downloading individual versions requires separate endpoints.
   *
   * A robust audit log of all access attempts is maintained—with errors for
   * unauthorized or failed lookups explained in descriptive messages. Returned
   * data reflects all versioning metadata for the attachmentId specified,
   * allowing clients to display selectable version histories or audit records.
   * This operation references the shopping_mall_attachment_versions table and
   * indexes on shopping_mall_attachments.
   *
   * @param connection
   * @param attachmentId Unique identifier of the attachment for which to list
   *   versions
   * @param body Filter, pagination, and sorting parameters for listing
   *   attachment versions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAttachmentVersion.IRequest,
  ): Promise<IPageIShoppingMallAttachmentVersion> {
    try {
      return await patchShoppingMallAdminAttachmentsAttachmentIdVersions({
        admin,
        attachmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific version's metadata for an attachment from
   * shopping_mall_attachment_versions.
   *
   * This API operation retrieves all metadata for a single attachment version,
   * uniquely identified by both attachmentId and versionId (version primary
   * key). Details include filename, file extension, mime type, size, hash,
   * server URL, and audit metadata for the requested version.
   *
   * Strict role and permission checks are enforced: only admin users or the
   * original uploader may retrieve version metadata. The binary file content is
   * not returned via this endpoint. All access is logged for compliance and
   * regulatory audit, with robust error messages for unauthorized or not-found
   * records.
   *
   * This endpoint operates solely on the shopping_mall_attachment_versions
   * table, providing comprehensive read access to version metadata while
   * protecting binary file content and enforcing evidence retention policies
   * described in the schema comments.
   *
   * @param connection
   * @param attachmentId Unique identifier of the parent attachment
   * @param versionId Unique identifier of the version record to retrieve
   *   (primary key)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":versionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedParam("versionId")
    versionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAttachmentVersion> {
    try {
      return await getShoppingMallAdminAttachmentsAttachmentIdVersionsVersionId(
        {
          admin,
          attachmentId,
          versionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata for an existing attachment version
   * (shopping_mall_attachment_versions table).
   *
   * Update mutable business metadata for a specific version of an attachment
   * file, such as filename, description, or permission settings. This action is
   * only available for users with edit rights (admin, original uploader, or
   * authorized party) and for attachment versions that are neither deleted nor
   * locked for compliance reasons.
   *
   * Persistence of updates is permanent: the modification is logged, and past
   * versions are recoverable via snapshot and audit subsystems. If any business
   * constraint blocks the update (e.g., immutable fields, soft/hard deleted
   * file, policy violation), the system returns an error explaining why the
   * operation was denied.
   *
   * This endpoint may be used in conjunction with version listing, retrieval,
   * or replacement APIs as part of a broader attachment/file management
   * workflow.
   *
   * @param connection
   * @param attachmentId UUID of the parent attachment.
   * @param versionId UUID of the version of the attachment file to update.
   * @param body Update payload for the attachment version, only allowing fields
   *   that are strictly mutable per compliance.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":versionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedParam("versionId")
    versionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAttachmentVersion.IUpdate,
  ): Promise<IShoppingMallAttachmentVersion> {
    try {
      return await putShoppingMallAdminAttachmentsAttachmentIdVersionsVersionId(
        {
          admin,
          attachmentId,
          versionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a specific attachment version
   * (shopping_mall_attachment_versions table).
   *
   * Soft-delete (logically remove) a file version of an attachment, ensuring
   * that the deleted_at field is set while maintaining full audit traceability.
   * This operation is typically available only to administrators, and possibly
   * the original uploader under certain circumstances, in accord with platform
   * policy.
   *
   * The endpoint will fail with a clear error if the user tries to delete a
   * version that is already deleted, does not exist, or is compliance-locked.
   * Attempts by unauthorized users or for compliance-sealed files are rejected
   * and fully logged for audit.
   *
   * Related APIs in this file management domain include creating, updating,
   * listing, and restoring file versions. Physical removal of file content is
   * always deferred until all legal retention policies are resolved.
   *
   * @param connection
   * @param attachmentId UUID of the parent attachment.
   * @param versionId UUID of the version to be soft deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":versionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedParam("versionId")
    versionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminAttachmentsAttachmentIdVersionsVersionId(
        {
          admin,
          attachmentId,
          versionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
