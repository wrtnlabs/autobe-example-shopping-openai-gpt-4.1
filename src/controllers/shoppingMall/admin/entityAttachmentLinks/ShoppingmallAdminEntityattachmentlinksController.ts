import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminEntityAttachmentLinks } from "../../../../providers/postShoppingMallAdminEntityAttachmentLinks";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminEntityAttachmentLinks } from "../../../../providers/patchShoppingMallAdminEntityAttachmentLinks";
import { putShoppingMallAdminEntityAttachmentLinksEntityAttachmentLinkId } from "../../../../providers/putShoppingMallAdminEntityAttachmentLinksEntityAttachmentLinkId";
import { deleteShoppingMallAdminEntityAttachmentLinksEntityAttachmentLinkId } from "../../../../providers/deleteShoppingMallAdminEntityAttachmentLinksEntityAttachmentLinkId";

import { IShoppingMallEntityAttachmentLink } from "../../../../api/structures/IShoppingMallEntityAttachmentLink";
import { IPageIShoppingMallEntityAttachmentLink } from "../../../../api/structures/IPageIShoppingMallEntityAttachmentLink";

@Controller("/shoppingMall/admin/entityAttachmentLinks")
export class ShoppingmallAdminEntityattachmentlinksController {
  /**
   * Create a new entity-attachment link (shopping_mall_entity_attachment_links
   * table).
   *
   * This operation creates an association between an attachment (file resource)
   * and a business entity (product, order, review, etc.) by inserting a new
   * record in the shopping_mall_entity_attachment_links table. The request
   * includes the attachment ID, entity type (e.g., 'product', 'order',
   * 'review'), the related entity's UUID, the ID of the user performing the
   * action, the purpose or context (such as 'evidence', 'thumbnail'), any
   * visibility constraints, and audit meta fields.
   *
   * On creation, the operation enforces permission checks according to the
   * current user's role and visibility context, ensuring only permitted users
   * can link attachments to protected business entities. The created
   * entity-attachment link is subsequently used throughout the platform to
   * retrieve or authorize access to the file. Logical business constraints such
   * as unique (entity_type, entity_id, attachment_id) triples are enforced. The
   * response includes full details of the association as per
   * IShoppingMallEntityAttachmentLink. In case of violation (duplicate, invalid
   * reference, or permission error), appropriate error messages are returned.
   *
   * @param connection
   * @param body Payload to create an entity-attachment link, associating an
   *   attachment to a business entity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallEntityAttachmentLink.ICreate,
  ): Promise<IShoppingMallEntityAttachmentLink> {
    try {
      return await postShoppingMallAdminEntityAttachmentLinks({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of entity/file links
   * (shopping_mall_entity_attachment_links table).
   *
   * Retrieve a pageable, searchable, and sortable list of entity-attachment
   * links for the shopping mall backend system. This operation allows system
   * administrators and privileged business users to enumerate, filter, and
   * analyze all file links associated with business entities such as products,
   * orders, reviews, or comments, based on flexible search criteria.
   *
   * Access controls limit the results to those entities/attachments allowed by
   * the caller's role and visibility permissions. The payload supports
   * pagination (page number/size), optional filtering by entity type, ID, role,
   * linkage purpose, attachment ID, and created/deleted state. The response
   * returns a paginated object containing entity-attachment link metadata,
   * audit info, and optionally summaries of both attachments and linked
   * entities for system review purposes.
   *
   * This operation is part of the larger attachment/file management, evidence,
   * and compliance suite for the modular shopping mall platform. Use it to
   * support audit, evidence query, or downstream AI/business analytics
   * workflows.
   *
   * @param connection
   * @param body Search criteria for entity-attachment links, including
   *   pagination, filters, and sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallEntityAttachmentLink.IRequest,
  ): Promise<IPageIShoppingMallEntityAttachmentLink> {
    try {
      return await patchShoppingMallAdminEntityAttachmentLinks({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an entity-attachment link by ID
   * (shopping_mall_entity_attachment_links table).
   *
   * This endpoint allows the update of an entity-attachment link's metadata,
   * such as purpose, permission scope, or visibility roles, by accepting a
   * payload conforming to IShoppingMallEntityAttachmentLink.IUpdate. The
   * operation validates the existence of the link (by UUID), verifies
   * administrative permissions, and applies requested changes.
   *
   * Updates may include modifying the business context (purpose), changing who
   * can access the attachment via role-based visibility, or adding
   * audit-related context like justification for permission changes. The
   * operation does not allow changing the attachment, entity type, or link
   * target for audit integrity. If the target record is not found, deleted, or
   * permissions are insufficient, appropriate errors are returned. The response
   * includes the full, updated entity-attachment link definition as specified
   * by IShoppingMallEntityAttachmentLink.
   *
   * @param connection
   * @param entityAttachmentLinkId Unique identifier of the entity-attachment
   *   link (UUID).
   * @param body Payload containing updated attributes for the entity-attachment
   *   link.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":entityAttachmentLinkId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("entityAttachmentLinkId")
    entityAttachmentLinkId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallEntityAttachmentLink.IUpdate,
  ): Promise<IShoppingMallEntityAttachmentLink> {
    try {
      return await putShoppingMallAdminEntityAttachmentLinksEntityAttachmentLinkId(
        {
          admin,
          entityAttachmentLinkId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an entity-attachment link by ID
   * (shopping_mall_entity_attachment_links table).
   *
   * This operation marks the specified entity-attachment link as deleted
   * (soft-delete) by setting the deleted_at timestamp, as supported by the
   * shopping_mall_entity_attachment_links schema. Full audit history of the
   * association is preserved for compliance, dispute resolution, or legal
   * needs. The operation verifies administrator permissions and the current
   * active state of the link before performing the removal.
   *
   * Soft-deleted links are excluded from normal queries but retained for
   * regulatory retrieval and audit. If the entity-attachment link is already
   * deleted, not found, or access is denied, error messages are returned. No
   * response body is included; success can be confirmed by HTTP status and
   * subsequent retrieval attempts.
   *
   * @param connection
   * @param entityAttachmentLinkId Unique identifier of the entity-attachment
   *   link (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":entityAttachmentLinkId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("entityAttachmentLinkId")
    entityAttachmentLinkId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminEntityAttachmentLinksEntityAttachmentLinkId(
        {
          admin,
          entityAttachmentLinkId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
