import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchShoppingMallAdminDeposits } from "../../../../providers/patchShoppingMallAdminDeposits";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IPageIShoppingMallDeposit } from "../../../../api/structures/IPageIShoppingMallDeposit";
import { IShoppingMallDeposit } from "../../../../api/structures/IShoppingMallDeposit";

@Controller("/shoppingMall/admin/deposits")
export class ShoppingmallAdminDepositsController {
  /**
   * Admin search/list of all user deposit accounts (shopping_mall_deposits
   * table) with filtering and pagination.
   *
   * This endpoint retrieves a paginated and filtered list of deposit accounts
   * (electronic wallet balances) stored in the shopping_mall_deposits table.
   * Administrators may use flexible search criteria (status, minimum/maximum
   * balance, customer association, time windows) bundled in the request body.
   * The response contains an array of deposit summaries and pagination
   * metadata, providing an overview and drill-down capability for finance and
   * audit operations.
   *
   * Strict access controls ensure only admin roles can enumerate, review, or
   * audit all deposit accounts. Regular users may only access their own balance
   * via a tailored endpoint, not this administrative overview. Error scenarios
   * include invalid filters, excessive result windows, or internal errors.
   * Related APIs exist for deposit transaction history and user-specific
   * balance viewing.
   *
   * @param connection
   * @param body Filter and search parameters for finding deposit accounts
   *   (status, balance window, customer, etc) with pagination and sort options
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallDeposit.IRequest,
  ): Promise<IPageIShoppingMallDeposit.ISummary> {
    try {
      return await patchShoppingMallAdminDeposits({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
