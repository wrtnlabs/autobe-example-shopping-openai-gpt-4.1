import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminUserAgreements } from "../../../../providers/patchShoppingMallAdminUserAgreements";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminUserAgreementsUserAgreementId } from "../../../../providers/getShoppingMallAdminUserAgreementsUserAgreementId";
import { putShoppingMallAdminUserAgreementsUserAgreementId } from "../../../../providers/putShoppingMallAdminUserAgreementsUserAgreementId";
import { deleteShoppingMallAdminUserAgreementsUserAgreementId } from "../../../../providers/deleteShoppingMallAdminUserAgreementsUserAgreementId";

import { IPageIShoppingMallUserAgreement } from "../../../../api/structures/IPageIShoppingMallUserAgreement";
import { IShoppingMallUserAgreement } from "../../../../api/structures/IShoppingMallUserAgreement";

@Controller("/shoppingMall/admin/userAgreements")
export class ShoppingmallAdminUseragreementsController {
  /**
   * Search and filter user agreement records for compliance/audit
   * (shopping_mall_user_agreements).
   *
   * Retrieve a paginated and filterable list of user agreement entities from
   * the system for compliance, auditing, or policy management purposes. This
   * endpoint supports advanced filtering on agreement type, version, actor
   * type, user identity, acceptance/withdrawal timestamps, and more. Multiple
   * agreements per user and version are allowed per regulatory standards.
   *
   * This API is only accessible to platform administrators or roles with
   * audit/audit-log viewing permissions. Output includes masked or minimum
   * required PII depending on actor type and system configuration. Results are
   * paginated and sorted, and implementation should ensure fast index-based
   * query performance for large datasets.
   *
   * Related operations include GET/PUT for agreement detail and update, as well
   * as DELETE for removing agreement records in the case of error corrections
   * or privacy/withdrawal enforcement. Not to be used for self-service user
   * privacy consent flows.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for user agreement
   *   query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallUserAgreement.IRequest,
  ): Promise<IPageIShoppingMallUserAgreement.ISummary> {
    try {
      return await patchShoppingMallAdminUserAgreements({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific user agreement record
   * (shopping_mall_user_agreements).
   *
   * Fetch a single user agreement record by its unique identifier for the
   * purposes of compliance, legal audit, or platform administration. The
   * response includes all core agreement fields: actor ID and type
   * (customer/seller/admin), agreement type (e.g., Terms, Privacy), document
   * version, acceptance and withdrawal timestamps, and unique constraints.
   * Actor information is revealed according to system policy and only for
   * authorized roles. Intended for deep-dive investigations of specific
   * agreements or user consent episodes, not bulk export or user self-service.
   *
   * Related operations include PATCH for indexed search, PUT for updating
   * agreement status or correcting administrative errors, and DELETE for
   * removing mistaken or legacy records, each subject to strict auditing.
   * Improper or unauthorized access triggers security logging and potential
   * investigation.
   *
   * @param connection
   * @param userAgreementId Unique identifier of the target user agreement
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userAgreementId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userAgreementId")
    userAgreementId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallUserAgreement> {
    try {
      return await getShoppingMallAdminUserAgreementsUserAgreementId({
        admin,
        userAgreementId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details or status of a user agreement record
   * (shopping_mall_user_agreements).
   *
   * Modify the details of a user agreement record, including setting or
   * updating the acceptance timestamp, withdrawal timestamp, or correcting
   * version/type fields as permitted by business policy and compliance
   * regulation. PATCH/PUT history is tracked for audit, and all updates require
   * reason/context for the change. Sensitive to role; only administrators or
   * compliance operators may perform updates. Any modification contrary to
   * regulatory retention or user privacy rules must be strictly blocked and
   * logged for security. Updates are subject to validation that agreement
   * type/version match current policy standards.
   *
   * Related API operations are GET to view user agreement detail, DELETE to
   * remove records for error correction or privacy withdrawal, and PATCH for
   * search/filtering in bulk audit scenarios. Errors return explicit reason
   * codes for business rules, retention limitations, or role violations.
   *
   * @param connection
   * @param userAgreementId Unique identifier of the user agreement to update.
   * @param body Fields to update in the user agreement record, such as
   *   acceptance/withdrawal date or agreement version/type. All fields are
   *   strictly validated for business/policy correctness.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userAgreementId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userAgreementId")
    userAgreementId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallUserAgreement.IUpdate,
  ): Promise<IShoppingMallUserAgreement> {
    try {
      return await putShoppingMallAdminUserAgreementsUserAgreementId({
        admin,
        userAgreementId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft delete) a specific user agreement record for compliance or
   * correction (shopping_mall_user_agreements).
   *
   * Marks a user agreement record as deleted, making it logically removed from
   * standard query results but still available for audit and compliance as
   * required by regulatory and retention standards. This operation is strictly
   * limited to administrator or compliance roles, and is tracked with reason
   * and snapshot. Soft deletions ensure no permanent data removal occurs, only
   * legal/compliance-mandated logical removal. This endpoint must not permit
   * physical delete to meet compliance and audit requirements for user
   * consents. Attempts to delete non-existent or non-removable records result
   * in clear error messages and audit log entries for traceability.
   *
   * Typically used for correcting entries mistakenly created, fulfilling
   * GDPR/CCPA erasure requests, or maintaining retention/expunge policies.
   * Associated audit and entity snapshots are referenced for downstream
   * evidence.
   *
   * @param connection
   * @param userAgreementId Unique identifier of the target user agreement
   *   record to remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userAgreementId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userAgreementId")
    userAgreementId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminUserAgreementsUserAgreementId({
        admin,
        userAgreementId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
