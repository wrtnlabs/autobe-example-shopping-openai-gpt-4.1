import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallAdminProductsProductIdInquiriesInquiryId } from "../../../../../providers/getShoppingMallAdminProductsProductIdInquiriesInquiryId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminProductsProductIdInquiriesInquiryId } from "../../../../../providers/putShoppingMallAdminProductsProductIdInquiriesInquiryId";
import { deleteShoppingMallAdminProductsProductIdInquiriesInquiryId } from "../../../../../providers/deleteShoppingMallAdminProductsProductIdInquiriesInquiryId";

import { IShoppingMallProductInquiry } from "../../../../../api/structures/IShoppingMallProductInquiry";

@Controller("/shoppingMall/admin/products/:productId/inquiries/:inquiryId")
export class ShoppingmallAdminProductsInquiriesController {
  /**
   * Retrieve details of a specific product inquiry
   * (shopping_mall_product_inquiries) by inquiryId.
   *
   * This API operation retrieves detailed information about a single product
   * inquiry from the shopping_mall_product_inquiries table using the inquiry's
   * unique identifier and the related product's identifier. The endpoint
   * delivers all core business fields such as title, body, is_private,
   * answered, moderation_status, and timestamps, as well as information about
   * the author (customer or seller).
   *
   * Access control is enforced by examining the inquirer, seller relationship
   * to the product, and administrative privilege. For private inquiries,
   * visibility is limited to the author, seller, and admin roles; for public
   * inquiries, all authenticated users may view the inquiry details. The
   * operation supports robust audit and compliance requirements, including
   * returning fields necessary for evidence and moderation workflows as
   * described in the Prisma schema documentation.
   *
   * Error scenarios, such as unauthorized access to private content or
   * non-existent inquiry/product, return appropriate error messages. This API
   * operation complements list/index endpoints and pairs with creation, update,
   * and delete routes for the same entity.
   *
   * @param connection
   * @param productId Unique identifier of the target product related to the
   *   inquiry.
   * @param inquiryId Unique identifier of the product inquiry record to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductInquiry> {
    try {
      return await getShoppingMallAdminProductsProductIdInquiriesInquiryId({
        admin,
        productId,
        inquiryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product inquiry (shopping_mall_product_inquiries) by
   * inquiryId.
   *
   * This API endpoint permits the update of an existing product inquiry’s
   * fields by the author or a privileged admin. Editable fields include title,
   * body, and is_private (privacy), subject to business rules. The record is
   * identified by inquiryId and scoped to the related product via productId.
   * Audit constraints require that every edit creates an immutable snapshot in
   * the associated version history table, preserving rollback capability and
   * legal evidence as described in the Prisma schema.
   *
   * Permission checks enforce that only the author (customer or seller), or an
   * admin, may perform the update, and that the inquiry is not already deleted
   * or locked by moderation. Any changes in moderation status, notification
   * triggers, or sensitive context (such as changing privacy from public to
   * private) are validated according to the system’s compliance and moderation
   * model. Appropriate errors are returned on validation, permission, or record
   * existence failures.
   *
   * @param connection
   * @param productId Unique identifier of the product related to the inquiry.
   * @param inquiryId Unique identifier of the product inquiry to update.
   * @param body Updated inquiry details (content, privacy, etc.) following edit
   *   validation, as defined in the schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductInquiry.IUpdate,
  ): Promise<IShoppingMallProductInquiry> {
    try {
      return await putShoppingMallAdminProductsProductIdInquiriesInquiryId({
        admin,
        productId,
        inquiryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a product inquiry (shopping_mall_product_inquiries) by
   * inquiryId.
   *
   * This API operation logically deletes (soft deletes) a product inquiry,
   * marking the record with a deleted_at timestamp rather than removing it from
   * the database, aligning with audit and compliance requirements for evidence
   * preservation as described in the schema. The inquiry is identified by
   * inquiryId and productId, and soft deletion can only be performed by the
   * inquiry’s author (customer or seller) or an admin with sufficient
   * privileges.
   *
   * Upon soft delete, the inquiry becomes excluded from future list or get
   * operations for regular users, but is retained for legal, moderation, and
   * rollback workflows. This action also triggers audit log generation and may
   * notify moderators or linked authors per notification configuration.
   * Unauthorized deletion attempts, requests for non-existent or already
   * deleted inquiries, or attempts to delete another user's inquiry are denied
   * with appropriate errors.
   *
   * This endpoint is intended to work alongside creation, update, and retrieval
   * APIs for inquiries, supporting full evidence trail and compliance logic.
   *
   * @param connection
   * @param productId Unique identifier of the product related to the inquiry.
   * @param inquiryId Unique identifier of the product inquiry to soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminProductsProductIdInquiriesInquiryId({
        admin,
        productId,
        inquiryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
