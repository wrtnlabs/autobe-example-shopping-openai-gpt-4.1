import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminProducts } from "../../../../providers/postShoppingMallAdminProducts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminProductsProductId } from "../../../../providers/putShoppingMallAdminProductsProductId";
import { deleteShoppingMallAdminProductsProductId } from "../../../../providers/deleteShoppingMallAdminProductsProductId";

import { IShoppingMallProduct } from "../../../../api/structures/IShoppingMallProduct";

@Controller("/shoppingMall/admin/products")
export class ShoppingmallAdminProductsController {
  /**
   * Register a new product to the shopping mall catalog.
   * (shopping_mall_products).
   *
   * Create a new product entry in the shopping mall catalog by providing all
   * required business fields including seller, channel, section, category,
   * code, name, status, and business workflow state. Validates the payload
   * against business constraints (uniqueness, completeness, status rules) and
   * sets up initial state for product lifecycle management.
   *
   * Additional content, options, variants, bundles, tagging, and attachments
   * can be specified in compliant structures, ensuring modular expansion and
   * rich catalog presentation. Automatically creates a product snapshot for
   * evidence and audit at creation. Only authorized roles (seller for their
   * section/channel, admin for global scopes) may invoke this operation;
   * customers cannot register products. Comprehensive error handling for
   * validation failures, permission denials, or business rule violations aligns
   * with shopping_mall_products Prisma schema and associated relationships.
   *
   * Returns the full detail of the created product, suitable for immediate use
   * in listing, editing, or management workflows.
   *
   * @param connection
   * @param body All primary and supplementary information for registering the
   *   new product, including seller, catalog scope, product data, and
   *   attachment references.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallProduct.ICreate,
  ): Promise<IShoppingMallProduct> {
    try {
      return await postShoppingMallAdminProducts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update information for an existing product by productId.
   * (shopping_mall_products).
   *
   * Update the attributes of an existing product specified by productId, with
   * changeable fields including core attributes (code, name, status, category,
   * section, etc.) and related catalog relationships. Supports business
   * workflow controls for pausing, activating, discontinuing, or modifying
   * eligibility for display/order. Permissions restrict seller updates to their
   * own products/sections, while admins have global update access. Validation
   * ensures compliance with workflow rules, uniqueness, and completeness,
   * performing all error handling on rejection or rule violation.
   *
   * Automatically generates a product snapshot for evidence, versioning, and
   * compliance needs. Integration of content, variant, bundle, and tag changes
   * are governed by sub-schemas and can be included in update input. Returns
   * the updated product object reflecting all changes. Strictly aligned with
   * the field and relationship definitions in shopping_mall_products Prisma
   * schema, with robust audit trail and error explanations as needed.
   *
   * Non-authorized or invalid updates (e.g., for deleted, expired, or
   * restricted products) are rejected with clear exception messages.
   *
   * @param connection
   * @param productId Unique identifier for the product to update in the
   *   catalog.
   * @param body Fields to update for the product identified by productId, with
   *   structures matching updatable business data per product schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":productId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProduct.IUpdate,
  ): Promise<IShoppingMallProduct> {
    try {
      return await putShoppingMallAdminProductsProductId({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a product identified by productId (shopping_mall_products
   * table).
   *
   * Allows an authorized seller or admin to remove a product from active
   * listings without permanently erasing the record, complying with audit and
   * evidence policies. Soft deletion is achieved by updating the 'deleted_at'
   * field, preserving product data, options, variants, and all historical
   * snapshots. This approach supports regulatory requirements and dispute
   * resolution by retaining all product-related evidence and relationships.
   *
   * Role-based authorization ensures that only the product owner (seller) or an
   * administrator can delete a product. Attempts by unauthorized users will be
   * rejected with a clear, actionable error. The operation also checks that the
   * product is not part of active orders or reserved inventoryâ€”if it is,
   * deletion will be blocked and a descriptive business error is returned.
   * Related snapshots in shopping_mall_product_snapshots ensure the deleted
   * state is fully traceable.
   *
   * This API should be paired with product listing and recovery endpoints to
   * enable batch operations or accidental deletion recovery, and must log all
   * delete attempts in system audit trails for compliance. If a product is
   * already soft-deleted or does not exist, an error will be returned
   * indicating its status.
   *
   * @param connection
   * @param productId UUID identifier of the product to remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":productId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminProductsProductId({
        admin,
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
