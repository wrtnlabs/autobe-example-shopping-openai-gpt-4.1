import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallAdminProductsProductIdSeo } from "../../../../../providers/getShoppingMallAdminProductsProductIdSeo";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminProductsProductIdSeo } from "../../../../../providers/putShoppingMallAdminProductsProductIdSeo";

import { IShoppingMallProductSeoMetadata } from "../../../../../api/structures/IShoppingMallProductSeoMetadata";

@Controller("/shoppingMall/admin/products/:productId/seo")
export class ShoppingmallAdminProductsSeoController {
  /**
   * Retrieve SEO metadata for a given product
   * (shopping_mall_product_seo_metadata).
   *
   * This operation allows sellers and administrators to retrieve the full SEO
   * configuration for a designated product in the catalog. The response
   * contains the meta title, meta description, and meta keywords, all as
   * maintained in the shopping_mall_product_seo_metadata entity. It supports
   * management UIs, product editing screens, SEO auditing, and external service
   * integrations for auto-update of product metadata on partner platforms.
   *
   * Access control is granted to sellers who own the product, as well as to
   * admins with global privilege. The endpoint checks that the specified
   * product exists and that the requester is permitted to view its SEO data. If
   * the product or its SEO metadata record are missing, an appropriate error is
   * returned, and access may be denied for insufficient privileges.
   *
   * The operation does not modify any data. It streams the content of the
   * shopping_mall_product_seo_metadata object for the product, supporting
   * preview interfaces, analytics export, and search engine QA. All accesses
   * are logged for audit and legal compliance.
   *
   * @param connection
   * @param productId Unique identifier of the product whose SEO metadata to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductSeoMetadata> {
    try {
      return await getShoppingMallAdminProductsProductIdSeo({
        admin,
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update or create product SEO metadata (shopping_mall_product_seo_metadata).
   *
   * This operation permits an authenticated seller (who owns the product) or
   * admin to upsert SEO metadata for a product. This covers the fields
   * meta_title, meta_description, and meta_keywords according to the business
   * rules defined in the shopping_mall_product_seo_metadata model. The
   * operation validates that the product exists, the requester has permission,
   * and the new metadata is compliant with length, keyword, and formatting
   * requirements.
   *
   * If the product does not yet have SEO metadata, a new record is inserted; if
   * one exists, it is updated with the request body contents. On success, the
   * response is the full resulting SEO metadata object. SEO metadata changes
   * are immediately reflected in product search, display, and external SEO
   * integrations; all updates are snapshotted for audit and rollback support.
   *
   * Relevant errors, such as forbidden fields, permission violations, or
   * non-existent product ID, result in appropriate error responses. The
   * endpoint supports localization, multi-language content as permitted by the
   * catalog configuration, and triggers downstream update notifications for
   * search/SEO services when changes are committed.
   *
   * @param connection
   * @param productId Unique identifier of the product whose SEO metadata is to
   *   be updated.
   * @param body SEO metadata information to be created or updated, including
   *   meta title, description, and keywords.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductSeoMetadata.IUpdate,
  ): Promise<IShoppingMallProductSeoMetadata> {
    try {
      return await putShoppingMallAdminProductsProductIdSeo({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
