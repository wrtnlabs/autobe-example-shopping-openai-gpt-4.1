import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminProductsProductIdOptions } from "../../../../../providers/postShoppingMallAdminProductsProductIdOptions";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminProductsProductIdOptions } from "../../../../../providers/patchShoppingMallAdminProductsProductIdOptions";
import { getShoppingMallAdminProductsProductIdOptionsOptionId } from "../../../../../providers/getShoppingMallAdminProductsProductIdOptionsOptionId";
import { putShoppingMallAdminProductsProductIdOptionsOptionId } from "../../../../../providers/putShoppingMallAdminProductsProductIdOptionsOptionId";
import { deleteShoppingMallAdminProductsProductIdOptionsOptionId } from "../../../../../providers/deleteShoppingMallAdminProductsProductIdOptionsOptionId";

import { IShoppingMallProductOption } from "../../../../../api/structures/IShoppingMallProductOption";
import { IPageIShoppingMallProductOption } from "../../../../../api/structures/IPageIShoppingMallProductOption";

@Controller("/shoppingMall/admin/products/:productId/options")
export class ShoppingmallAdminProductsOptionsController {
  /**
   * Create a new option on a product (shopping_mall_product_options table).
   *
   * Creates a new option for the specified product by accepting option details
   * such as name, whether it is required, and its intended order for UI
   * purposes. Only sellers who own the product and admins can use this
   * operation; permission errors are returned for unauthorized attempts, with
   * all such events logged for compliance.
   *
   * Business validation ensures that the option name is unique per product,
   * required attributes are filled, and maximum option count per product is
   * enforced if applicable. The API creates the database record, updates search
   * indices, and triggers any necessary business rule workflows associated with
   * product option definition.
   *
   * Upon successful creation, the response returns the full option object.
   * Error handling addresses duplicate names, invalid product references,
   * rejected validation, or constraint violations. Extensible for future
   * metadata fields and localization attributes.
   *
   * @param connection
   * @param productId UUID of the product to which the new option will be added.
   * @param body Data required to create a new product option.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductOption.ICreate,
  ): Promise<IShoppingMallProductOption> {
    try {
      return await postShoppingMallAdminProductsProductIdOptions({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of options for a specified product
   * (shopping_mall_product_options table).
   *
   * Fetches a list of all options linked to a particular product, providing
   * support for advanced filtering, sorting, and pagination to accommodate
   * large datasets and complex UIs. The response includes both required and
   * optional options, ordered by the UI display position, and indicates option
   * names and requirements as stored in the shopping_mall_product_options
   * table.
   *
   * Role-based access ensures that sellers (owners of the product), admins, and
   * authorized business users can access this endpoint. Sensitive or hidden
   * option information is excluded according to the user's permissions and
   * business rules. In case the product does not exist, permission is
   * insufficient, or the owner does not match, appropriate business errors and
   * audit logs are produced.
   *
   * Integrates with shopping_mall_products for option grouping and with
   * shopping_mall_product_option_values for downstream API navigation. Supports
   * localization and extended attributes for future extensibility.
   *
   * @param connection
   * @param productId UUID of the product whose options are requested.
   * @param body Filter, sort, and pagination criteria for options retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductOption.IRequest,
  ): Promise<IPageIShoppingMallProductOption.ISummary> {
    try {
      return await patchShoppingMallAdminProductsProductIdOptions({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the detail for a specific product option
   * (shopping_mall_product_options table).
   *
   * Returns full information for a specific product option belonging to a
   * product, including its name, required status, UI display order, and all
   * business-meta as recorded in shopping_mall_product_options. Foreign key
   * relationships to the target product and associated option values are
   * included.
   *
   * Security measures ensure that only sellers who own the parent product, or
   * admins, can access this detail. Unauthorized access attempts are logged for
   * audit. If the option does not exist or is not attached to the specified
   * product, an appropriate error is returned for business and compliance
   * traceability.
   *
   * This operation is typically used in option editing forms, business logic
   * reviews, and audit UIs. Associated endpoints include option update and
   * value management APIs.
   *
   * @param connection
   * @param productId UUID identifier of the parent product.
   * @param optionId UUID identifier of the product option to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":optionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductOption> {
    try {
      return await getShoppingMallAdminProductsProductIdOptionsOptionId({
        admin,
        productId,
        optionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific product option in the shopping_mall_product_options
   * table.
   *
   * This operation updates an option entity associated with a parent product in
   * the product catalog. The update process enforces role-based access
   * controlâ€”only the seller who owns the product or an admin may perform
   * updates. Option fields such as 'name', 'required', and 'position' can be
   * altered. Attempts to rename to a duplicate name within the same product
   * will yield a conflict error.
   *
   * The underlying Prisma schema table, shopping_mall_product_options, manages
   * all options for each product, and changes are immediately reflected in
   * variant generation logic and can impact inventory structure. The system
   * automatically records all updates as historical snapshots in the
   * appropriate audit trail for compliance.
   *
   * If an invalid product or option identifier is specified, a clear HTTP 404
   * error will be returned. Any modification is subject to validation
   * constraints in the schema (e.g., name required, position is integer,
   * required is boolean).
   *
   * @param connection
   * @param productId Unique identifier for the parent product.
   * @param optionId Unique identifier for the option being updated.
   * @param body Fields for updating the product option (e.g., name, required,
   *   position).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":optionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductOption.IUpdate,
  ): Promise<IShoppingMallProductOption> {
    try {
      return await putShoppingMallAdminProductsProductIdOptionsOptionId({
        admin,
        productId,
        optionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an option from a product using the
   * shopping_mall_product_options table.
   *
   * This operation performs a soft deletion of an option from the
   * shopping_mall_product_options table, scoped by product and option
   * identifiers. The system first validates ownership and role permissions.
   * Soft deletion is achieved by updating the 'deleted_at' field, complying
   * with strict audit and evidence requirements.
   *
   * If the option is actively referenced by existing variants, the operation
   * checks business rules and either rejects the deletion or triggers updates
   * for affected variant records. The endpoint provides clear error messaging
   * for constraint violations, not-found errors, or permission denial.
   *
   * Every soft delete operation triggers audit log updates and historical
   * snapshots to permit compliance audit and future restoration if necessary.
   * Only the product owner (seller) or an administrator may invoke this
   * operation.
   *
   * @param connection
   * @param productId Unique identifier for the parent product.
   * @param optionId Unique identifier of the option to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":optionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminProductsProductIdOptionsOptionId({
        admin,
        productId,
        optionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
