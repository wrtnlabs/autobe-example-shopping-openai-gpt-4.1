import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminCartsCartIdItems } from "../../../../../providers/patchShoppingMallAdminCartsCartIdItems";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminCartsCartIdItemsCartItemId } from "../../../../../providers/getShoppingMallAdminCartsCartIdItemsCartItemId";

import { IPageIShoppingMallCartItem } from "../../../../../api/structures/IPageIShoppingMallCartItem";
import { IShoppingMallCartItem } from "../../../../../api/structures/IShoppingMallCartItem";

@Controller("/shoppingMall/admin/carts/:cartId/items")
export class ShoppingmallAdminCartsItemsController {
  /**
   * List and search all items in a specific cart (paginated, filterable;
   * shopping_mall_cart_items).
   *
   * Retrieves the complete list of items currently held within a specific
   * shopping cart, enabling the customer or authorized admin roles to see,
   * search, sort, or paginate through the cart's contents. Advanced filtering
   * can be applied based on product or variant, added time, or grouping labels
   * when batch features are enabled.
   *
   * The list is always scoped to a single cart via cartId, guaranteeing
   * isolation and privacy between different users' carts. The operation
   * integrates deep business rules, ensuring real-time item data consistency
   * with catalog status, inventory, or product updates (e.g., out-of-stock
   * products appear as inactive items). Results can support batch selection
   * (for example, for mass removal or checkout), with UI-level pagination and
   * sorting options.
   *
   * This endpoint ties directly into the cart/checkout workflow and supports
   * personalization/AI modules by providing comprehensive insight into
   * in-session cart activity. Error cases include invalid cartId, unauthorized
   * access, or filtering by fields that do not exist on cart items.
   *
   * @param connection
   * @param cartId Unique identifier for the cart whose items are to be listed.
   * @param body Search, filter, and paging parameters for the cart items within
   *   the given cart.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.IRequest,
  ): Promise<IPageIShoppingMallCartItem> {
    try {
      return await patchShoppingMallAdminCartsCartIdItems({
        admin,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single cart item with product and variant detail
   * (shopping_mall_cart_items).
   *
   * Fetches full details for a single item within a user's cart, using both
   * cartId and cartItemId to guarantee ownership and path-union context. The
   * returned information covers core relationships: the product, selected
   * variant, quantity, and relevant option/variant selections, along with the
   * added timestamp and current status (including inactive or invalid if
   * product status changed since addition).
   *
   * Security and business requirements ensure that only the owner or authorized
   * admin roles may access this resource. The endpoint returns up-to-date
   * product and variant metadata reflecting any catalog status, price, or
   * availability changes at the time of requestâ€”critical for checkout
   * validation. Error handling addresses cases such as missing or deleted cart
   * or item, or cross-user access attempts.
   *
   * This endpoint is an integral part of user session and checkout flows,
   * supporting UI and personalization logic, and adheres closely to
   * shopping_mall_cart_items table constraints documented in the Prisma
   * schema.
   *
   * @param connection
   * @param cartId Parent cart ID for ownership and access scoping.
   * @param cartItemId Cart item ID to identify the record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartItemId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await getShoppingMallAdminCartsCartIdItemsCartItemId({
        admin,
        cartId,
        cartItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
