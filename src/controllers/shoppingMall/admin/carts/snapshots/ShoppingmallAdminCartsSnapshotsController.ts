import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallAdminCartsCartIdSnapshotsSnapshotId } from "../../../../../providers/getShoppingMallAdminCartsCartIdSnapshotsSnapshotId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IShoppingMallCartSnapshot } from "../../../../../api/structures/IShoppingMallCartSnapshot";

@Controller("/shoppingMall/admin/carts/:cartId/snapshots/:snapshotId")
export class ShoppingmallAdminCartsSnapshotsController {
  /**
   * Retrieve a specific audit snapshot of a shopping cart state by ID,
   * supporting evidence, rollback, and compliance use-cases. Uses
   * shopping_mall_cart_snapshots.
   *
   * This API operation retrieves a single immutable snapshot of a shopping cart
   * as recorded in the shopping_mall_cart_snapshots table. Each snapshot
   * captures the full state of the cart, including items, options, and
   * metadata, at a particular event (such as checkout, deletion, or batch
   * modification).
   *
   * Snapshots are critical for legal compliance, customer dispute evidence, and
   * system rollback functionality. By exposing specific snapshots, this
   * endpoint allows authorized parties to verify historical cart contents,
   * reconstruct user activity, and demonstrate business process auditability.
   * Sensitive personal information should be filtered or masked in accordance
   * with the requester's role and system policy.
   *
   * Authorization is required and limited typically to admin, support, or the
   * cart owner, with strong filtering for non-admins. The operation links
   * through both the cart ID and snapshot ID, supporting multi-tenancy and
   * multi-event associations. Error handling will provide clear messages if the
   * snapshot does not exist or access control fails. Logging of all access
   * events supports full audit trails.
   *
   * @param connection
   * @param cartId Target shopping cart's unique identifier (UUID).
   * @param snapshotId Unique identifier of the snapshot to retrieve (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("snapshotId")
    snapshotId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCartSnapshot> {
    try {
      return await getShoppingMallAdminCartsCartIdSnapshotsSnapshotId({
        admin,
        cartId,
        snapshotId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
