import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putShoppingMallAdminBoardsBoardIdPostsPostId } from "../../../../../providers/putShoppingMallAdminBoardsBoardIdPostsPostId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { deleteShoppingMallAdminBoardsBoardIdPostsPostId } from "../../../../../providers/deleteShoppingMallAdminBoardsBoardIdPostsPostId";

import { IShoppingMallBoardPost } from "../../../../../api/structures/IShoppingMallBoardPost";

@Controller("/shoppingMall/admin/boards/:boardId/posts/:postId")
export class ShoppingmallAdminBoardsPostsController {
  /**
   * Update a specific board post within a board (shopping_mall_board_posts
   * table).
   *
   * Update the content, title, and meta fields of a board post belonging to the
   * specified board. This operation is essential for users (customers, sellers,
   * admins) to revise or correct their contributions. Security and permission
   * logic is enforced based on post authorship and user role, following the
   * comments in the shopping_mall_board_posts Prisma schema.
   *
   * The API ensures only permitted users can update their own or officially
   * authorized posts, performing full validation of moderation rules and
   * visibility requirements. Every update triggers a preservation snapshot for
   * audit trail purposes as required by the snapshot management logic in both
   * the business requirements and the shopping_mall_board_post_snapshots
   * schema. Unauthorized or invalid update attempts are blocked and produce a
   * descriptive error.
   *
   * This operation is closely linked to moderation, notification, and board
   * activity logging, ensuring all edits or meta changes are traceable and
   * reversible as per compliance and dispute needs. Clients should also use
   * relevant GET operations to refresh and sync updated content after a
   * successful update.
   *
   * @param connection
   * @param boardId Unique ID of the target board.
   * @param postId Unique ID of the post to update.
   * @param body Updated board post content and meta fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallBoardPost.IUpdate,
  ): Promise<IShoppingMallBoardPost> {
    try {
      return await putShoppingMallAdminBoardsBoardIdPostsPostId({
        admin,
        boardId,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a specific board post, marking it as logically removed
   * (shopping_mall_board_posts).
   *
   * Perform a logical (soft) delete on a board post, recording the deletion
   * event and marking the post as removed by setting deleted_at. The operation
   * enforces that only owners, sellers with appropriate permissions, or
   * administrators may delete the post, following security and role
   * requirements from business rules and the Prisma schema.
   *
   * Deletion actions are fully auditable, do not physically remove the post,
   * and ensure all previous versions and replies are preserved for potential
   * recovery, compliance, and dispute resolution. Related snapshot entries must
   * be retained for audit trails as directed by
   * shopping_mall_board_post_snapshots. Any errors related to unauthorized
   * access, invalid post state, or compliance-related blockage are surfaced
   * with clear error codes and messages.
   *
   * Clients should update UI listings to reflect the soft deletion state and
   * may display available recovery or dispute options based on the user's
   * role.
   *
   * @param connection
   * @param boardId Unique ID of the target board.
   * @param postId Unique ID of the post to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminBoardsBoardIdPostsPostId({
        admin,
        boardId,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
