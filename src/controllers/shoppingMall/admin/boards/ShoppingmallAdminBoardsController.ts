import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminBoards } from "../../../../providers/postShoppingMallAdminBoards";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putShoppingMallAdminBoardsBoardId } from "../../../../providers/putShoppingMallAdminBoardsBoardId";
import { deleteShoppingMallAdminBoardsBoardId } from "../../../../providers/deleteShoppingMallAdminBoardsBoardId";

import { IShoppingMallBoard } from "../../../../api/structures/IShoppingMallBoard";

@Controller("/shoppingMall/admin/boards")
export class ShoppingmallAdminBoardsController {
  /**
   * Create a new bulletin board with full configuration and access settings.
   *
   * This operation allows administrators or authorized users to register a new
   * board in the shopping mall backend, specifying parameters such as channel
   * ID, section ID, title, description, visibility (public, channel, or
   * section-restricted), whether moderation is required, and optional post
   * expiry policy. All required business fields are validated for uniqueness
   * and compliance with naming/policy guidelines (e.g., within-channel title
   * uniqueness).
   *
   * Security controls require authenticated users with board management rights;
   * all actions are audited for compliance. Invalid, duplicate, or unauthorized
   * board creation attempts result in reasoned error responses.
   *
   * Upon creation, the endpoint returns the complete configuration of the new
   * board per shopping_mall_boards schema, for immediate UI reflection or rule
   * engine integration.
   *
   * @param connection
   * @param body Board creation data including channel/section assignment,
   *   display and access configuration.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallBoard.ICreate,
  ): Promise<IShoppingMallBoard> {
    try {
      return await postShoppingMallAdminBoards({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update configuration, visibility, or moderation rules for a bulletin board.
   *
   * This operation updates properties of a specified board, such as channel and
   * section linkage, display title, description, visibility, moderation
   * requirement, and policy settings (e.g., post expiry). All changes are
   * strictly controlled by business rules, and uniqueness/authorization (e.g.,
   * only one 'main' board per channel) is enforced.
   *
   * Only users with board management/administrative rights can perform these
   * updates; actions are fully audited. Attempts to update non-existent,
   * deleted, or unauthorized boards yield error responses with feedback for
   * correction.
   *
   * Response returns the updated board metadata, directly reflecting storage in
   * the shopping_mall_boards schema, for UI and configuration management
   * integration.
   *
   * @param connection
   * @param boardId Identifier of the bulletin board to update.
   * @param body Board update fields: display, business, moderation, or policy
   *   changes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":boardId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallBoard.IUpdate,
  ): Promise<IShoppingMallBoard> {
    try {
      return await putShoppingMallAdminBoardsBoardId({
        admin,
        boardId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a board by its ID in the shopping_mall_boards table.
   *
   * The delete board operation enables privileged roles, typically
   * administrators, to remove a board entity from the system. This operation
   * targets the 'shopping_mall_boards' table and sets the 'deleted_at' field
   * with the current timestamp, enforcing a logical (soft) deletion policy. All
   * posts and content associated with the board will become inaccessible and
   * preserved for audit and compliance purposes as per system rules.
   *
   * Security is paramount: only roles with elevated permission, such as
   * 'admin', can call this endpoint. When invoked, dependent business logic is
   * responsible for handling cascading effects on child posts or metadata, as
   * well as triggering compliance or notification workflows.
   *
   * The endpoint will validate that the specified board exists and isn't
   * already deleted; non-existent IDs or already-deleted boards yield a
   * business error. The deletion event will be audit-logged for compliance,
   * with downstream moderation and evidence logic triggered where required by
   * business or regulatory rules.
   *
   * @param connection
   * @param boardId The unique identifier of the board to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":boardId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminBoardsBoardId({
        admin,
        boardId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
