import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminCustomers } from "../../../../providers/patchShoppingMallAdminCustomers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminCustomersCustomerId } from "../../../../providers/getShoppingMallAdminCustomersCustomerId";
import { putShoppingMallAdminCustomersCustomerId } from "../../../../providers/putShoppingMallAdminCustomersCustomerId";
import { deleteShoppingMallAdminCustomersCustomerId } from "../../../../providers/deleteShoppingMallAdminCustomersCustomerId";

import { IPageIShoppingMallCustomer } from "../../../../api/structures/IPageIShoppingMallCustomer";
import { IShoppingMallCustomer } from "../../../../api/structures/IShoppingMallCustomer";

@Controller("/shoppingMall/admin/customers")
export class ShoppingmallAdminCustomersController {
  /**
   * Search and retrieve a filtered, paginated list of customer accounts from
   * shopping_mall_customers.
   *
   * Retrieve a filtered and paginated list of customer accounts stored in the
   * shopping_mall_customers table. This operation allows administrators to view
   * and manage customer information and profiles; it provides search, sort, and
   * pagination functions to help efficiently handle high-volume customer
   * records.
   *
   * This endpoint enables searching by channel, account status, KYC status,
   * email, name, and other metadata such as registration, deletion, and update
   * timestamps. Admin users can use this operation to identify customer
   * segments, monitor onboarding, process compliance requirements, or prepare
   * data for analytics.
   *
   * Security is enforced using the admin role, and business logic will
   * implement rate limiting and sensitive field masking as appropriate for
   * compliance. This is a critical operation for platform control, account
   * lifecycle oversight, and regulatory audit. Error handling includes proper
   * messaging for invalid query parameters or access denial if roles are not
   * sufficient.
   *
   * @param connection
   * @param body Search and pagination criteria for retrieving customer
   *   accounts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallCustomer.IRequest,
  ): Promise<IPageIShoppingMallCustomer.ISummary> {
    try {
      return await patchShoppingMallAdminCustomers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific customer by ID from
   * shopping_mall_customers.
   *
   * Retrieve full detailed information for an individual customer account by
   * specifying the customerId path parameter. Uses the shopping_mall_customers
   * table as the main resource, returning all relevant fields including
   * channel, email, phone, name, account status, KYC status, and audit
   * timestamps.
   *
   * Administrators will use this endpoint to review or update (in a separate
   * operation) customer status, verify compliance (KYC), or analyze account
   * history. Sensitive PII is only accessible to authorized admin roles, and
   * business logic will ensure data masking and compliance with privacy law.
   *
   * If a customer with the provided ID does not exist or access is attempted by
   * an unauthorized role, the system will return appropriate error messaging.
   *
   * @param connection
   * @param customerId Unique identifier of the target customer account.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":customerId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCustomer> {
    try {
      return await getShoppingMallAdminCustomersCustomerId({
        admin,
        customerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific customer account by ID in the shopping_mall_customers
   * table.
   *
   * Update the profile and metadata for an individual customer in the
   * shopping_mall_customers table. This is an admin-only operation that
   * supports modification to key fields such as email, phone, name, status, or
   * KYC state. The customerId path parameter specifies the record to update.
   *
   * Business logic will enforce field validation (for unique emails, channel
   * constraints, KYC/business status, etc.) and preserve audit history of
   * changes for compliance. Only administrators may use this operation to
   * ensure sensitive account changes are traced and authorized.
   *
   * If the supplied customerId does not reference an existing account, or if
   * update constraints are violated (duplicate email, invalid status), the
   * operation will return an error.
   *
   * @param connection
   * @param customerId Unique identifier of the customer to update.
   * @param body Updated profile and meta information to apply to the selected
   *   customer account.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":customerId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCustomer.IUpdate,
  ): Promise<IShoppingMallCustomer> {
    try {
      return await putShoppingMallAdminCustomersCustomerId({
        admin,
        customerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a specific customer account by setting deleted_at based on
   * customerId.
   *
   * Soft delete a customer account from the shopping_mall_customers table by
   * setting the deleted_at timestamp for the provided customerId. This action
   * does not remove the record from the database but instead marks it as
   * deleted for regulatory, legal, or compliance reasons. All previous history
   * and audit trails are retained.
   *
   * This operation is restricted to the admin role and should trigger business
   * logic for data masking, account access prevention, and detailed audit chain
   * recording. Customers marked as deleted are excluded from most standard
   * queries and are not accessible by regular users or via the main
   * customer-facing features.
   *
   * If the targeted customer record does not exist, or if the action is
   * attempted without administrative privileges, the system will return an
   * error.
   *
   * @param connection
   * @param customerId Unique identifier of the customer account to be soft
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":customerId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminCustomersCustomerId({
        admin,
        customerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
