import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminUserConnections } from "../../../../providers/patchShoppingMallAdminUserConnections";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminUserConnectionsUserConnectionId } from "../../../../providers/getShoppingMallAdminUserConnectionsUserConnectionId";
import { putShoppingMallAdminUserConnectionsUserConnectionId } from "../../../../providers/putShoppingMallAdminUserConnectionsUserConnectionId";
import { deleteShoppingMallAdminUserConnectionsUserConnectionId } from "../../../../providers/deleteShoppingMallAdminUserConnectionsUserConnectionId";

import { IPageIShoppingMallUserConnection } from "../../../../api/structures/IPageIShoppingMallUserConnection";
import { IShoppingMallUserConnection } from "../../../../api/structures/IShoppingMallUserConnection";

@Controller("/shoppingMall/admin/userConnections")
export class ShoppingmallAdminUserconnectionsController {
  /**
   * Search and list user connection records (sessions, logins, device/browser)
   * with filtering and pagination.
   *
   * Retrieve a paginated, filtered list of user connection/session records from
   * the shoppingMall platform. This operation queries the
   * shopping_mall_user_connections table, exposing actor type, channel, IP,
   * authentication context, device/user agent, and login/logout timestamps for
   * analytic and security review.
   *
   * The operation allows advanced search with filtering by actorType
   * (customer/seller/admin), channelId, time ranges (loginAt/logoutAt), IP
   * address, and user agent. Pagination and sorting are included to support
   * audit hardware, fraud analytics, and compliance/regulatory inquiry. Only
   * authorized personnel may access full metadata of connection records due to
   * the potential presence of PII (IP address, device details).
   *
   * Returns a paginated list of user connection summaries, optimized for
   * monitoring, security analysis, and compliance audit use-cases. Error
   * handling covers invalid filter params, authorization failures, and
   * excessive query workloads (rate limiting).
   *
   * @param connection
   * @param body Advanced search, filter, and pagination criteria for user
   *   connection log query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallUserConnection.IRequest,
  ): Promise<IPageIShoppingMallUserConnection.ISummary> {
    try {
      return await patchShoppingMallAdminUserConnections({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific user connection record by its
   * ID.
   *
   * Fetch detailed record of a user connection/session as tracked in the
   * shopping_mall_user_connections table, using a unique identifier
   * (userConnectionId). This includes all available fields: actorId, actorType,
   * channelId, IP address, user agent string, login/logout timestamps, and
   * authentication context.
   *
   * Access to this API is restricted to admin or trusted audit roles, as the
   * data contains sensitive session and identity information. It is used for
   * session trace, fraud/abuse investigations, and full compliance audit.
   * Authorization and input validation are enforced—invalid or unauthorized
   * requests are rejected with appropriate errors.
   *
   * Typical use cases include: reconstructing a session for incident response,
   * verifying access source for legal compliance, or correlating suspicious
   * activity. Related endpoints allow search/listing (see index operation), and
   * deletion (erase operation for session records).
   *
   * @param connection
   * @param userConnectionId Unique identifier of the user connection/session
   *   record (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userConnectionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userConnectionId")
    userConnectionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallUserConnection> {
    try {
      return await getShoppingMallAdminUserConnectionsUserConnectionId({
        admin,
        userConnectionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update or annotate metadata for a user connection/session record by ID
   * (admin only).
   *
   * Update or annotate a user connection/session record identified by
   * userConnectionId, as stored in the shopping_mall_user_connections table.
   * Permitted changes include updating select metadata for compliance (such as
   * authentication context, risk score, or device labeling). All changes are
   * logged with full audit trail for regulatory purposes.
   *
   * The operation requires strict authorization (admin-level), and validates
   * all updates to safeguard against destructive/irreversible changes — session
   * history is preserved and the record cannot be reactivated once ended or
   * deleted. Only allowed fields may be updated per audit policy; invalid
   * fields or unauthorized attempts are rejected.
   *
   * Typical use cases: marking session as compromised, appending compliance
   * comments, adjusting authentication data for risk scoring. Related
   * endpoints: see detail (at operation), list (index), and remove/erase. Error
   * handling returns actionable messages for invalid update requests or
   * insufficient privileges.
   *
   * @param connection
   * @param userConnectionId Unique identifier of the user connection/session
   *   record (UUID).
   * @param body Fields and values to update in the user connection/session
   *   record, including audit/compliance annotations.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userConnectionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userConnectionId")
    userConnectionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallUserConnection.IUpdate,
  ): Promise<IShoppingMallUserConnection> {
    try {
      return await putShoppingMallAdminUserConnectionsUserConnectionId({
        admin,
        userConnectionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase a user connection/session record by its unique ID
   * (compliance only).
   *
   * Permanently remove a user connection/session record from
   * shopping_mall_user_connections by its unique ID. This is a hard erase
   * operation, bypassing normal session expiry. It may only be used by
   * privileged admin roles for compliance (e.g., regulatory data erasure,
   * expired retention).
   *
   * The operation enforces full authorization and audit logging—irreversible
   * removal is only permitted after verification of legal/retention
   * requirements. No session information is recoverable after erase. Attempting
   * to delete a non-existent or unauthorized record results in a clear error.
   * Related endpoints include: retrieve/list (at/index), and update metadata.
   * All actions are monitored for compliance with legal frameworks such as
   * GDPR, CCPA, and internal audit policies.
   *
   * @param connection
   * @param userConnectionId Unique identifier of the user connection/session
   *   record (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userConnectionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userConnectionId")
    userConnectionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminUserConnectionsUserConnectionId({
        admin,
        userConnectionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
