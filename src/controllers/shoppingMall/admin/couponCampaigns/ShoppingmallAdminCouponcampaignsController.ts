import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminCouponCampaigns } from "../../../../providers/postShoppingMallAdminCouponCampaigns";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminCouponCampaigns } from "../../../../providers/patchShoppingMallAdminCouponCampaigns";
import { getShoppingMallAdminCouponCampaignsCampaignId } from "../../../../providers/getShoppingMallAdminCouponCampaignsCampaignId";
import { putShoppingMallAdminCouponCampaignsCampaignId } from "../../../../providers/putShoppingMallAdminCouponCampaignsCampaignId";
import { deleteShoppingMallAdminCouponCampaignsCampaignId } from "../../../../providers/deleteShoppingMallAdminCouponCampaignsCampaignId";

import { IShoppingMallCouponCampaign } from "../../../../api/structures/IShoppingMallCouponCampaign";
import { IPageIShoppingMallCouponCampaign } from "../../../../api/structures/IPageIShoppingMallCouponCampaign";

@Controller("/shoppingMall/admin/couponCampaigns")
export class ShoppingmallAdminCouponcampaignsController {
  /**
   * Create a new coupon campaign (shopping_mall_coupon_campaigns table).
   *
   * This endpoint creates a new coupon campaign by inserting a record into the
   * shopping_mall_coupon_campaigns table. The operation requires the
   * administrator to supply all mandatory fields, including the campaign name
   * (which must be unique), optional description, start and end times, and the
   * present business status. The campaign can be in draft, active, or another
   * valid state upon creation, according to the business requirements. Audit
   * and compliance rules require that all creation events are logged including
   * the actor/admin and timestamp. Validation checks ensure the campaign name
   * is not duplicated and the start time precedes the end time.
   *
   * Role-based permissions mean only admin accounts, identified via
   * authentication and authorization mechanisms, can invoke this operation. The
   * operation is extensible for future features such as campaign analytics,
   * multi-language description, and advanced scheduling. Related operations
   * include updating a campaign, deleting a campaign, and listing active
   * campaigns. Errors are returned if input validation fails or if a campaign
   * name conflict occurs.
   *
   * @param connection
   * @param body Coupon campaign creation fields (name, description, schedule,
   *   business status, optional metadata)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallCouponCampaign.ICreate,
  ): Promise<IShoppingMallCouponCampaign> {
    try {
      return await postShoppingMallAdminCouponCampaigns({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search/filter and paginate coupon campaigns from the
   * shopping_mall_coupon_campaigns table.
   *
   * This API operation allows authorized admin users to search and retrieve a
   * paginated collection of coupon campaigns configured in the shopping mall
   * system. Through the fields of shopping_mall_coupon_campaigns, users can
   * filter campaigns by name, status, date range, and description, as well as
   * sort by business status or activation window. The request body supports
   * IShoppingMallCouponCampaign.IRequest for advanced querying, including
   * search filters and pagination.
   *
   * Results will be delivered in a paginated structure, referencing the
   * IPageIShoppingMallCouponCampaign.ISummary type for optimized list display.
   * Security and privacy policies restrict this endpoint to admins, since
   * campaign data may encompass sensitive promotional strategies and
   * performance. Any search or list operation should limit results for
   * extremely large datasets and enforce rate limiting for intensive analytics
   * use cases.
   *
   * This endpoint supports business process flows such as campaign status
   * tracking, planning, or bulk analytics. Edge cases, such as overlapping
   * campaigns or deleted data, must be handled gracefully. Errors from invalid
   * filters, page boundaries, or unauthorized requests should be consistently
   * surfaced via standard API error responses.
   *
   * Related endpoints include campaign creation (POST), campaign status updates
   * (PUT), and reading campaign details (GET by ID).
   *
   * @param connection
   * @param body Filtering, sorting, and pagination parameters for campaign
   *   search, matching IShoppingMallCouponCampaign.IRequest.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallCouponCampaign.IRequest,
  ): Promise<IPageIShoppingMallCouponCampaign.ISummary> {
    try {
      return await patchShoppingMallAdminCouponCampaigns({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get complete details of a coupon campaign by its campaignId from
   * shopping_mall_coupon_campaigns.
   *
   * This API endpoint provides full details of a coupon campaign configured
   * within the shopping mall system, resolving all fields from
   * shopping_mall_coupon_campaigns. The operation requires a campaignId path
   * parameter of type UUID, which uniquely identifies the campaign to
   * retrieve.
   *
   * Security is restricted to admin roles due to the strategic and potentially
   * sensitive nature of campaign configurationâ€”including period, terms, and
   * analytics. The response body references IShoppingMallCouponCampaign,
   * containing comprehensive campaign metadata, status indicators, and
   * activation windows. If the specified campaign does not exist or is
   * soft-deleted, the system returns a suitable error message or not-found
   * response.
   *
   * The operation supports business flows such as campaign planning, status
   * auditing, and downstream promotional/analytics orchestration. Related
   * endpoints include campaign search (PATCH), creation (POST), updating (PUT),
   * and logical deletion (DELETE). All read operations should be audit-logged
   * for compliance.
   *
   * @param connection
   * @param campaignId Unique identifier for the coupon campaign to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":campaignId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("campaignId")
    campaignId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCouponCampaign> {
    try {
      return await getShoppingMallAdminCouponCampaignsCampaignId({
        admin,
        campaignId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing coupon campaign (shopping_mall_coupon_campaigns table)
   * by campaignId.
   *
   * This endpoint allows an administrator to update a coupon campaign's
   * metadata (name, description, scheduling, status) in the
   * shopping_mall_coupon_campaigns table. The operation checks for the
   * existence of the campaign identified by the provided campaignId parameter,
   * then applies changes to the permitted fields. Validation ensures updated
   * names remain unique and that the timing fields are logically ordered. All
   * updates are subject to compliance/audit trails recording who performed the
   * update and when.
   *
   * Only administrators may execute this operation, and attempts to update
   * nonexistent or deleted campaigns result in error responses. Related
   * operations include creating a new campaign and deleting or listing
   * campaigns. Updated records reflect the new state immediately on success.
   *
   * @param connection
   * @param campaignId The unique identifier of the coupon campaign to update
   * @param body New values for mutable fields of the coupon campaign (name,
   *   description, schedule, business status, etc)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":campaignId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("campaignId")
    campaignId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCouponCampaign.IUpdate,
  ): Promise<IShoppingMallCouponCampaign> {
    try {
      return await putShoppingMallAdminCouponCampaignsCampaignId({
        admin,
        campaignId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (logically delete) a coupon campaign
   * (shopping_mall_coupon_campaigns table) by campaignId.
   *
   * This endpoint allows administrators to logically delete (soft delete) a
   * coupon campaign identified by the campaignId parameter in the
   * shopping_mall_coupon_campaigns table. Instead of physically removing the
   * data, the deleted_at timestamp is set, preserving historical, analytical,
   * and legal information, while removing the campaign from all business and
   * API responses except those intended for audit/compliance purposes. The
   * operation enforces that the campaign is not already deleted, may check that
   * associated coupons are also safely handled, and always creates a
   * corresponding audit trail event documenting the actor and timestamp.
   *
   * Restricted to admin users, this operation prevents accidental or
   * unauthorized campaign erasure. Attempts to delete an already deleted or
   * non-existent campaign will fail with a clear error. Soft-deleted campaigns
   * remain available for compliance, analytics, or restoration workflows.
   *
   * @param connection
   * @param campaignId The unique identifier of the coupon campaign to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":campaignId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("campaignId")
    campaignId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminCouponCampaignsCampaignId({
        admin,
        campaignId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
