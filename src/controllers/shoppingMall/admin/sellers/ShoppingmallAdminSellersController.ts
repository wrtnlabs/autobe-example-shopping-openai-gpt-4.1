import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminSellers } from "../../../../providers/patchShoppingMallAdminSellers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminSellersSellerId } from "../../../../providers/getShoppingMallAdminSellersSellerId";
import { putShoppingMallAdminSellersSellerId } from "../../../../providers/putShoppingMallAdminSellersSellerId";
import { deleteShoppingMallAdminSellersSellerId } from "../../../../providers/deleteShoppingMallAdminSellersSellerId";

import { IPageIShoppingMallSeller } from "../../../../api/structures/IPageIShoppingMallSeller";
import { IShoppingMallSeller } from "../../../../api/structures/IShoppingMallSeller";

@Controller("/shoppingMall/admin/sellers")
export class ShoppingmallAdminSellersController {
  /**
   * Paginated search and retrieval of shopping mall sellers (admin only,
   * shopping_mall_sellers table).
   *
   * Retrieve a paginated, filtered list of sellers registered on the shopping
   * mall platform. Sellers are vendor accounts inheriting from customers, with
   * extended fields such as approval status, profile name, section, and KYC
   * state. This endpoint is intended for use by administrators to find, audit,
   * or moderate sellers, supporting advanced business workflows, onboarding
   * approval, and compliance review.
   *
   * Security consideration: Only users with the 'admin' role can access this
   * endpoint due to the sensitivity of seller data and the need for
   * auditability. All queries are logged for compliance.
   *
   * The request structure supports flexible search—by profile name, status
   * (pending, active, suspended), KYC status, approval date range, or section
   * assignment. The response body delivers a paginated summary of all found
   * sellers, with essential metadata for list displays. Related endpoints
   * include seller detail, status change, and audit history retrieval APIs.
   *
   * Error handling ensures inappropriate access is blocked, and invalid filter
   * criteria result in structured, actionable errors.
   *
   * @param connection
   * @param body Filter, sort, and pagination options for searching sellers.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallSeller.IRequest,
  ): Promise<IPageIShoppingMallSeller.ISummary> {
    try {
      return await patchShoppingMallAdminSellers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a given seller by ID (admin only,
   * shopping_mall_sellers table).
   *
   * Fetch detailed information for a seller account by its unique ID. The
   * seller entity extends from the base customer and contains additional fields
   * for section assignment, profile information, seller approval and status,
   * and KYC verification metadata.
   *
   * Accessible to administrators for tasks such as onboarding, suspension,
   * audit, or advanced analytics. When a seller is selected for moderation,
   * compliance, or dispute cases, this endpoint provides a point-in-time
   * snapshot of full seller state—including approval details, customer linkage,
   * and historical status tracking.
   *
   * Strict role restriction is enforced, and every access event is logged for
   * compliance. If the seller does not exist or has been removed (soft
   * deleted), an appropriate not-found or access-denied error is returned.
   *
   * @param connection
   * @param sellerId Unique identifier of the target seller account.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallSeller> {
    try {
      return await getShoppingMallAdminSellersSellerId({
        admin,
        sellerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update seller account details, status, or section (admin only,
   * shopping_mall_sellers table).
   *
   * Update details of a seller account, identified by sellerId, with new
   * profile information, status changes, section assignment, or KYC
   * verification metadata. This operation is intended for use by administrators
   * to perform moderation, onboarding flows, suspensions, compliance review, or
   * dispute resolution on seller accounts.
   *
   * All updates are strictly audited; operation may trigger a seller snapshot
   * for rollback or legal record. Input validation ensures that status changes,
   * KYC results, and section assignments adhere to business rules, with errors
   * clearly reported for invalid attempts.
   *
   * If the seller is not found or the update is not permitted (e.g., due to
   * business constraints or entity state), the API returns a structured error
   * message with context. Related operations include seller detail retrieval
   * and index/search endpoints.
   *
   * Strict role authorization is enforced for this update path.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller to update.
   * @param body Updated seller profile, status, KYC, or section assignment
   *   info.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sellerId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallSeller.IUpdate,
  ): Promise<IShoppingMallSeller> {
    try {
      return await putShoppingMallAdminSellersSellerId({
        admin,
        sellerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (deactivate) a seller account by ID (admin only,
   * shopping_mall_sellers table).
   *
   * Permanently deactivate and logically delete a seller account specified by
   * sellerId, marking it as deleted without physical removal from the database.
   * This enforces soft deletion by setting the deleted_at field in the
   * shopping_mall_sellers table, supporting legal audit, evidence retention,
   * and later possible restoration by administrators.
   *
   * This API is reserved for administrative role actions, and all executions
   * are logged for compliance. The operation will fail if the seller does not
   * exist or has already been deleted. If related resources must be unlinked or
   * deactivated for legal reasons, this operation ensures upstream workflows
   * are triggered.
   *
   * Associated endpoints include seller retrieval, update, and search. Users
   * with insufficient permission are denied access, and every action is
   * appended to the audit and deletion event logs.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller to soft-delete
   *   (deactivate).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sellerId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminSellersSellerId({
        admin,
        sellerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
