import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminDonations } from "../../../../providers/patchShoppingMallAdminDonations";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminDonationsDonationId } from "../../../../providers/getShoppingMallAdminDonationsDonationId";
import { putShoppingMallAdminDonationsDonationId } from "../../../../providers/putShoppingMallAdminDonationsDonationId";
import { deleteShoppingMallAdminDonationsDonationId } from "../../../../providers/deleteShoppingMallAdminDonationsDonationId";

import { IPageIShoppingMallDonation } from "../../../../api/structures/IPageIShoppingMallDonation";
import { IShoppingMallDonation } from "../../../../api/structures/IShoppingMallDonation";

@Controller("/shoppingMall/admin/donations")
export class ShoppingmallAdminDonationsController {
  /**
   * Search and retrieve a paginated, filtered list of donation records.
   *
   * Retrieve a filtered, paginated list of donation records from the
   * shopping_mall_donations table. This operation allows both users and
   * administrators to view donation transactions based on various criteria,
   * including customer identity, donation source type (deposit or mileage),
   * campaign code, and status. Pagination parameters ensure efficient
   * navigation through potentially large result sets. Administrators can view
   * system-wide or filtered analytics; customers can view their personal
   * donation history. Search parameters may include time range, amount range,
   * campaign, and transaction status. The operation ensures sensitive
   * information is properly masked for non-admin users, and permission checks
   * prevent cross-user data access. The response contains a paginated summary
   * of donation transactions and relevant statistics.
   *
   * @param connection
   * @param body Search and pagination parameters for donation filtering,
   *   defined by IShoppingMallDonation.IRequest. Supports filtering by
   *   customer, campaign code, amount, date range, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallDonation.IRequest,
  ): Promise<IPageIShoppingMallDonation.ISummary> {
    try {
      return await patchShoppingMallAdminDonations({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific donation by its UUID from the
   * shopping_mall_donations table.
   *
   * This operation retrieves a detailed donation record for a given donation
   * identified by its unique UUID in the shopping_mall_donations table. The
   * donation record includes the donating customer, source type (deposit or
   * mileage), related campaign/event code, transferred amount, donation status
   * (pending, confirmed, failed, refunded, etc.), and full timestamp/audit
   * metadata.
   *
   * The endpoint is designed for auditability—enabling compliant review of
   * donation evidence, transparency for analytics, and support for legal
   * inquiries. Only authorized users may access donation records. Customers may
   * request their own information; administrators can access records for
   * compliance, fraud tracking, or dispute resolution.
   *
   * Validation enforces that donationId matches an extant record and that
   * access controls are respected. Errors may occur if the donation is missing,
   * deleted, or if the caller lacks permission. Related endpoints include
   * donation creation, update, and logical deletion.
   *
   * @param connection
   * @param donationId The unique identifier (UUID) of the donation to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":donationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("donationId")
    donationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallDonation> {
    try {
      return await getShoppingMallAdminDonationsDonationId({
        admin,
        donationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing donation entry’s allowed fields (status, evidence,
   * notes) by its UUID.
   *
   * This operation allows the update of a donation record, identified by
   * donationId, in the shopping_mall_donations table. Typically used for
   * administrative or support-driven interventions—such as marking a donation
   * as confirmed, failed, refunded, or associating an updated evidence
   * reference or compliance note. For customers, access is strictly limited to
   * their own donations and is only allowed while the donation remains pending,
   * not after finalization.
   *
   * Validation rules ensure only eligible status transitions or field updates
   * are allowed per business policy and compliance. All update events generate
   * new audit logs, preserving traceability for legal and regulatory needs. The
   * update endpoint does not permit modifying the core donation actor, amount,
   * or target campaign; it is reserved for non-destructive mutations related to
   * status and evidence. Attempts to update finalized, deleted, or unauthorized
   * donations are rejected with a clear error message.
   *
   * @param connection
   * @param donationId The unique identifier (UUID) of the donation to update.
   * @param body Allowed update info: new status (pending, confirmed, failed,
   *   refunded), evidence link, or compliance note, subject to business
   *   policy.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":donationId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("donationId")
    donationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDonation.IUpdate,
  ): Promise<IShoppingMallDonation> {
    try {
      return await putShoppingMallAdminDonationsDonationId({
        admin,
        donationId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (soft remove) a donation by its UUID, retaining data for
   * evidence and compliance.
   *
   * This operation performs logical deletion (soft delete) of the specified
   * donation, referenced by donationId. Rather than removing the record from
   * the database, it sets the deleted_at timestamp to guarantee regulatory
   * evidence retention, auditability, and rollback capabilities. The deletion
   * is only permitted if the donation is not in a finalized or protected state
   * (e.g., after refund/settlement for certain jurisdictions per business
   * logic), and enforces authorization so only the owner or an admin may remove
   * the record.
   *
   * This operation complies with data governance requirements,
   * snapshot/evidence retention policies, and ensures consistency with the
   * system’s commitment to non-destructive removal. Attempting to delete a
   * protected, non-existent, or unauthorized donation results in a clear error,
   * with all actions logged for compliance. Use corresponding endpoints for
   * read/recovery as needed.
   *
   * @param connection
   * @param donationId The UUID of the donation to logically delete (soft
   *   remove).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":donationId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("donationId")
    donationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminDonationsDonationId({
        admin,
        donationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
