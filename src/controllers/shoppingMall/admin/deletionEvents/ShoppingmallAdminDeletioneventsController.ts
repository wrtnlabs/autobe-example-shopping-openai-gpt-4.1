import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminDeletionEvents } from "../../../../providers/patchShoppingMallAdminDeletionEvents";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminDeletionEventsDeletionEventId } from "../../../../providers/getShoppingMallAdminDeletionEventsDeletionEventId";

import { IPageIShoppingMallDeletionEvent } from "../../../../api/structures/IPageIShoppingMallDeletionEvent";
import { IShoppingMallDeletionEvent } from "../../../../api/structures/IShoppingMallDeletionEvent";

@Controller("/shoppingMall/admin/deletionEvents")
export class ShoppingmallAdminDeletioneventsController {
  /**
   * Search and retrieve a filtered, paginated list of entity deletion events
   * (shopping_mall_deletion_events) for compliance and audit.
   *
   * Retrieve a filtered and paginated list of deletion events from the shopping
   * mall's system-wide audit trail. This operation allows administrators to
   * query logical deletions across all managed business entities, supporting
   * advanced search criteria such as entity type (e.g., product, order,
   * review), deletion reason, deleted_by_id, date ranges, and linkage to entity
   * snapshots.
   *
   * The operation returns results in a paginated format, including relevant
   * metadata and references to snapshots for evidence or rollback scenarios. It
   * is intended for use by compliance and audit personnel to ensure data
   * removal actions are legitimate and traceable according to legal and
   * business policies.
   *
   * Security considerations require that this operation is restricted to
   * administrators with proper audit or data governance roles, preventing
   * unauthorized access to sensitive deletion records. Rate limiting, data
   * masking (where necessary for privacy), and full query audit logging are
   * recommended when implementing this API.
   *
   * This endpoint is directly backed by the shopping_mall_deletion_events
   * Prisma schema table, capturing all key fields for traceability, including
   * entity_type, entity_id, deleted_by_id, deletion_reason, snapshot_id, and
   * timestamps. The response structure mirrors the compliance and governance
   * needs defined in requirements, enabling legal export and robust analysis.
   *
   * @param connection
   * @param body Filter, search, and pagination criteria for deletion event
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallDeletionEvent.IRequest,
  ): Promise<IPageIShoppingMallDeletionEvent> {
    try {
      return await patchShoppingMallAdminDeletionEvents({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific deletion event
   * (shopping_mall_deletion_events) for audit and compliance review.
   *
   * Returns the full details of a single deletion event from the shopping
   * mall's data deletion audit log, based on the unique deletionEventId. This
   * operation is used by compliance, audit, or admin personnel to investigate
   * entity removals, including the type of entity affected, deleted_by_id
   * (actor), deletion_reason, and any related snapshot evidence.
   *
   * The operation strictly enforces admin-level access and is logged for
   * compliance traceability. Sensitive data may be masked if entity_type
   * warrants additional privacy measures (e.g., user accounts).
   *
   * This API is critical for fulfilling regulatory requirements and enabling
   * legal or governance queries about all logical removals. It is directly
   * based on the shopping_mall_deletion_events table schema with all
   * corresponding fields and relationships, providing an immutable record for
   * system-integrity and audit workflows.
   *
   * @param connection
   * @param deletionEventId Unique identifier of the target deletion event to be
   *   retrieved for audit or compliance review.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deletionEventId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("deletionEventId")
    deletionEventId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallDeletionEvent> {
    try {
      return await getShoppingMallAdminDeletionEventsDeletionEventId({
        admin,
        deletionEventId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
