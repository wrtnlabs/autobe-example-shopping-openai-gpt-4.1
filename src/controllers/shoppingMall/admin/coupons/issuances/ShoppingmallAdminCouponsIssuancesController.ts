import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminCouponsCouponIdIssuances } from "../../../../../providers/postShoppingMallAdminCouponsCouponIdIssuances";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminCouponsCouponIdIssuances } from "../../../../../providers/patchShoppingMallAdminCouponsCouponIdIssuances";
import { getShoppingMallAdminCouponsCouponIdIssuancesIssuanceId } from "../../../../../providers/getShoppingMallAdminCouponsCouponIdIssuancesIssuanceId";
import { putShoppingMallAdminCouponsCouponIdIssuancesIssuanceId } from "../../../../../providers/putShoppingMallAdminCouponsCouponIdIssuancesIssuanceId";
import { deleteShoppingMallAdminCouponsCouponIdIssuancesIssuanceId } from "../../../../../providers/deleteShoppingMallAdminCouponsCouponIdIssuancesIssuanceId";

import { IShoppingMallCouponIssuance } from "../../../../../api/structures/IShoppingMallCouponIssuance";
import { IPageIShoppingMallCouponIssuance } from "../../../../../api/structures/IPageIShoppingMallCouponIssuance";

@Controller("/shoppingMall/admin/coupons/:couponId/issuances")
export class ShoppingmallAdminCouponsIssuancesController {
  /**
   * Create a new issuance (assignment) for a coupon identified by couponId.
   *
   * Generates a new coupon issuance linked to the specified coupon ID. The
   * request body contains all required details about the recipient (if any),
   * issuance mode (bulk, public, one-time), validity period, and optional
   * custom meta. All business rule validations—such as per-coupon issuance
   * caps, per-user limits, eligible segmentation, and duplication checks—are
   * enforced at this step.
   *
   * The endpoint is accessed by admin roles or campaign managers who require
   * granular control over coupon distribution for marketing or customer
   * service. Side effects include notification delivery (if recipient is a
   * customer), update of analytic counters, and audit trail creation for
   * regulatory compliance.
   *
   * On error (e.g., exceeding issuance limits or failing validation), the
   * operation must return actionable business error codes. All creation
   * attempts are tracked for fraud, abuse prevention, and reporting.
   *
   * @param connection
   * @param couponId ID of the coupon to which this new issuance will be linked.
   * @param body Coupon issuance creation information—recipient (customerId,
   *   optional), mode, validity window, and any meta required for business
   *   rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCouponIssuance.ICreate,
  ): Promise<IShoppingMallCouponIssuance> {
    try {
      return await postShoppingMallAdminCouponsCouponIdIssuances({
        admin,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate coupon issuances for a specified coupon.
   *
   * This operation lists all issuances of a particular coupon, providing
   * advanced filtering by issuance status, recipient (customer), time range,
   * and other relevant meta fields. It supports pagination and sorting for
   * administrative review and high-volume campaign scenarios.
   *
   * Typical users include platform administrators or campaign managers, who
   * require comprehensive tools to audit coupon allocation, monitor usage
   * trends, or investigate fraud/abuse. The operation includes security
   * mechanisms in implementation to prevent leakage of customer PII and
   * enforces strict access controls. Large-scale queries may be rate-limited
   * for operational resilience.
   *
   * Error conditions include the invalid or non-existent couponId, improper
   * search criteria, or exceeding allowable result page sizes. All access to
   * this listing is logged for platform analytics and compliance.
   *
   * @param connection
   * @param couponId The UUID of the coupon whose issuances are being listed.
   * @param body Complex search, filter, pagination, and sort criteria for
   *   coupon issuances linked to the specified coupon.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCouponIssuance.IRequest,
  ): Promise<IPageIShoppingMallCouponIssuance> {
    try {
      return await patchShoppingMallAdminCouponsCouponIdIssuances({
        admin,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific coupon issuance by coupon and issuance ID.
   *
   * Retrieve comprehensive details about a particular coupon issuance,
   * identified by issuanceId within the context of a couponId. The response
   * includes recipient customer (if present), issuance and expiration
   * timestamps, usage status, linked coupon detail, and all relevant business
   * meta.
   *
   * This API is primarily for administrative users who need to review or manage
   * individual coupon issuance records for campaign management, dispute
   * resolution, or compliance checks. Implementation enforces robust permission
   * checks and may redact or mask sensitive customer fields for privacy.
   *
   * Common error cases include invalid or missing couponId or issuanceId, or
   * access attempts by unauthorized users. Extensive audit logging is
   * recommended for all read events to align with best practices in financial
   * coupon operations.
   *
   * @param connection
   * @param couponId The UUID of the coupon to which this issuance belongs.
   * @param issuanceId The UUID of the specific issuance to be retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":issuanceId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("issuanceId")
    issuanceId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCouponIssuance> {
    try {
      return await getShoppingMallAdminCouponsCouponIdIssuancesIssuanceId({
        admin,
        couponId,
        issuanceId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing coupon issuance by coupon and issuance ID in the
   * shopping_mall_coupon_issuances table.
   *
   * This API operation allows an authorized admin or business user to update
   * the details of a coupon issuance identified by both the parent coupon ID
   * and specific issuance ID. According to the shopping_mall_coupon_issuances
   * table, this is used to correct issuance parameters such as expiration date,
   * usage cap, or issuance status after the initial assignment.
   *
   * Security is paramount, so only users with administrative or advanced
   * business privileges should be permitted to update coupon issuances,
   * especially because these changes can have direct financial or promotional
   * impact. Request payloads must be validated to ensure no duplication or
   * invalid status transitions occur, and business rules about maximum
   * allowable changes or retroactive modifications must be enforced.
   *
   * Issuance records are linked to shopping_mall_coupons (for definition),
   * shopping_mall_customers (assignment), and downstream coupon usages. The API
   * must ensure referential integrity and consistency with the coupon's
   * business logic. Auditing must be implemented to track all changes for
   * regulatory and promotional compliance.
   *
   * Related operations may include creating new coupon issuances (POST),
   * reading details (GET), or revoking an issuance (DELETE). Error handling
   * must address missing or invalid IDs, conflicts with coupon constraints, and
   * authorization issues.
   *
   * @param connection
   * @param couponId The unique identifier of the parent coupon to which this
   *   issuance belongs.
   * @param issuanceId The unique identifier for the specific coupon issuance
   *   record to be updated.
   * @param body Fields to update for the coupon issuance, such as expires_at,
   *   usage_limit, and status. Structure must match
   *   IShoppingMallCouponIssuance.IUpdate DTO.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":issuanceId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("issuanceId")
    issuanceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCouponIssuance.IUpdate,
  ): Promise<IShoppingMallCouponIssuance> {
    try {
      return await putShoppingMallAdminCouponsCouponIdIssuancesIssuanceId({
        admin,
        couponId,
        issuanceId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (revoke) a coupon issuance by coupon and issuance ID from
   * the shopping_mall_coupon_issuances table.
   *
   * Through this API, an authorized admin can logically delete a specific
   * coupon issuance entity from the platform. According to the Prisma schema
   * comments on shopping_mall_coupon_issuances, the delete operation will
   * typically set the deleted_at timestamp, ensuring the record remains
   * available for audit and compliance review. Actual removal should not
   * physically erase the row to maintain evidence of all coupon activities.
   *
   * This is essential for cases such as mistakenly issued coupons, revoked
   * promotions, or correcting business errors. The system must enforce
   * referential integrity, preventing the deletion of issuances that have
   * already been redeemed or are linked to ongoing promotional analytics where
   * deletion could affect reporting.
   *
   * Error handling must address missing or invalid coupon IDs, non-existent or
   * already-deleted issuance records, and attempts to delete issuances that do
   * not satisfy business rules for revocation. Proper audit logs are to be
   * generated for each execution of this operation.
   *
   * Authorization is restricted to admin users, and related operations include
   * reading (GET), updating (PUT), and creating (POST) coupon issuances.
   * Soft-delete strategy is enforced for audit integrity.
   *
   * @param connection
   * @param couponId The unique identifier of the coupon to which the issuance
   *   belongs.
   * @param issuanceId The unique identifier for the specific coupon issuance
   *   record to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":issuanceId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("issuanceId")
    issuanceId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminCouponsCouponIdIssuancesIssuanceId({
        admin,
        couponId,
        issuanceId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
