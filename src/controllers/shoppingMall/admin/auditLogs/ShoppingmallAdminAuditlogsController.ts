import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminAuditLogs } from "../../../../providers/patchShoppingMallAdminAuditLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminAuditLogsAuditLogId } from "../../../../providers/getShoppingMallAdminAuditLogsAuditLogId";

import { IPageIShoppingMallAuditLog } from "../../../../api/structures/IPageIShoppingMallAuditLog";
import { IShoppingMallAuditLog } from "../../../../api/structures/IShoppingMallAuditLog";

@Controller("/shoppingMall/admin/auditLogs")
export class ShoppingmallAdminAuditlogsController {
  /**
   * Search system audit logs (shopping_mall_audit_logs) with advanced,
   * paginated filters for compliance tracing.
   *
   * Retrieve a filtered, paginated view of all business event and system audit
   * logs for the shopping mall backend. This operation leverages advanced
   * filters, allowing for queries by entity_type (such as order, product,
   * customer, etc.), entity_id, event_type (create, update, delete,
   * permission_granted, etc.), actor_id (who performed the action), event
   * result, and reference to associated snapshot records.
   *
   * The endpoint supports audit, compliance, and operational tracing –
   * essential for legal evidence, security monitoring, and business workflow
   * validation. Access to audit logs is restricted to administrators, as logs
   * may reference sensitive operational or user data. Large result volumes are
   * returned via a standard pagination pattern for performance and
   * scalability.
   *
   * This operation works over the 'shopping_mall_audit_logs' table as defined
   * in the Snapshots schema. It is closely related to entity snapshot
   * operations (PATCH /entitySnapshots) and provides event-level traceability
   * across the platform. Error handling includes permission checks, invalid
   * filter criteria, and malformed queries.
   *
   * @param connection
   * @param body Audit log search and pagination criteria.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAuditLog.IRequest,
  ): Promise<IPageIShoppingMallAuditLog> {
    try {
      return await patchShoppingMallAdminAuditLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full detailed context for a system audit log record
   * (shopping_mall_audit_logs).
   *
   * Retrieve complete event detail for a specific audit log entry in the
   * shopping mall platform’s system. This operation queries the
   * shopping_mall_audit_logs Prisma schema table, covering all aspects of the
   * target event: linked entity (entity_type, entity_id), actor_id, event_type,
   * event_result, event_message, associated snapshot reference, and time/event
   * audit metadata.
   *
   * This endpoint is secured for administrative use only, as audit log data may
   * reveal sensitive operational or security-related information. It is
   * essential for incident investigation, legal compliance requests, and
   * thorough validation of system integrity or business rule enforcement.
   *
   * The endpoint is intended for use alongside the general audit log search
   * endpoint, enabling system administrators or compliance officers to drill
   * down to the root cause or context of significant business system events.
   * Error responses include not found, forbidden access, or invalid
   * auditLogId.
   *
   * @param connection
   * @param auditLogId Unique identifier for the desired audit log event.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAuditLog> {
    try {
      return await getShoppingMallAdminAuditLogsAuditLogId({
        admin,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
