import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminAdminsAdminIdRoleEscalations } from "../../../../../providers/patchShoppingMallAdminAdminsAdminIdRoleEscalations";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminAdminsAdminIdRoleEscalationsEscalationId } from "../../../../../providers/getShoppingMallAdminAdminsAdminIdRoleEscalationsEscalationId";
import { putShoppingMallAdminAdminsAdminIdRoleEscalationsEscalationId } from "../../../../../providers/putShoppingMallAdminAdminsAdminIdRoleEscalationsEscalationId";
import { deleteShoppingMallAdminAdminsAdminIdRoleEscalationsEscalationId } from "../../../../../providers/deleteShoppingMallAdminAdminsAdminIdRoleEscalationsEscalationId";

import { IPageIShoppingMallAdminRoleEscalation } from "../../../../../api/structures/IPageIShoppingMallAdminRoleEscalation";
import { IShoppingMallAdminRoleEscalation } from "../../../../../api/structures/IShoppingMallAdminRoleEscalation";

@Controller("/shoppingMall/admin/admins/:adminId/roleEscalations")
export class ShoppingmallAdminAdminsRoleescalationsController {
  /**
   * List and search role escalation requests for a given admin
   * (shopping_mall_admin_role_escalations).
   *
   * Retrieve a paginated and filterable list of all role escalation requests
   * (such as customer→admin or seller→admin privilege changes) that are
   * associated with a target administrator. Each result includes status,
   * escalation type, reviewer, reasons, and relevant timestamps for audit and
   * compliance, leveraging the structure of the
   * shopping_mall_admin_role_escalations table.
   *
   * This operation is primarily used by administrators to manage and review
   * workflow status, approval/rejection history, and review escalation
   * evidence. Role-based security ensures only properly privileged admins can
   * access the escalation queue. Filtering may be done by requestor, escalation
   * type, status, or time range to facilitate rapid investigation or compliance
   * review.
   *
   * Pagination, search, and sorting are available; responses present summary
   * information suitable for list or dashboard views and are linked to full
   * escalation records. This endpoint supports regulatory compliance, audit
   * trails, and helps prevent privilege escalation abuse within the mall
   * platform.
   *
   * @param connection
   * @param adminId Unique identifier of the admin user to query role
   *   escalations for
   * @param body Request parameters for escalation list search, filters, and
   *   pagination options
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAdminRoleEscalation.IRequest,
  ): Promise<IPageIShoppingMallAdminRoleEscalation.ISummary> {
    try {
      return await patchShoppingMallAdminAdminsAdminIdRoleEscalations({
        admin,
        adminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific admin role escalation request
   * (shopping_mall_admin_role_escalations).
   *
   * Retrieve full, detailed information about a specific role escalation
   * request by its unique identifier for a given administrator. The response
   * includes all major columns and context from the
   * shopping_mall_admin_role_escalations entity, such as actors, workflow
   * status, reviewer, reason codes, timestamps, and references to any
   * supporting evidence or snapshots.
   *
   * Use this operation to support detailed step-through auditing, compliance
   * traceability, or business rule enforcement regarding admin privilege
   * escalation. Only administrators or privileged reviewers can access detailed
   * escalation data, ensuring sensitive escalation audit trails remain
   * protected from unauthorized access. Related operations may include POST/PUT
   * for escalation review or status update, and DELETE for log/audit
   * retention.
   *
   * @param connection
   * @param adminId Unique identifier of the admin user (context of the
   *   escalation)
   * @param escalationId Unique identifier for the specific role escalation
   *   request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":escalationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedParam("escalationId")
    escalationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAdminRoleEscalation> {
    try {
      return await getShoppingMallAdminAdminsAdminIdRoleEscalationsEscalationId(
        {
          admin,
          adminId,
          escalationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update information or status of an admin role escalation request
   * (shopping_mall_admin_role_escalations).
   *
   * Update the workflow status, add comments, assign a reviewer, or modify
   * other business logic fields of a specific admin role escalation request.
   * This operation allows administrators to review, approve, reject, or cancel
   * escalation requests, recording the action and context for compliance.
   *
   * All changes are subject to audit logging and may require supporting
   * commentary or reference to evidence. Authorization is strictly enforced, so
   * only privileged admin users may update escalation records. Updates support
   * granular traceability for regulatory and internal policy compliance.
   *
   * @param connection
   * @param adminId Unique identifier of the admin user (context for escalation
   *   modification)
   * @param escalationId Unique identifier for the role escalation request to
   *   update
   * @param body Fields to update for the target escalation (status, review
   *   reason, evidence refs, reviewer, etc)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":escalationId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedParam("escalationId")
    escalationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAdminRoleEscalation.IUpdate,
  ): Promise<IShoppingMallAdminRoleEscalation> {
    try {
      return await putShoppingMallAdminAdminsAdminIdRoleEscalationsEscalationId(
        {
          admin,
          adminId,
          escalationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific admin role escalation request
   * (shopping_mall_admin_role_escalations).
   *
   * Permanently remove a role escalation request from the
   * shopping_mall_admin_role_escalations table. This operation executes a hard
   * delete, completely removing the record from the database. The deletion is
   * irreversible and should only be performed by administrators in accordance
   * with business policy or error correction needs.
   *
   * Appropriate audit logging and authorization are required. Usage of this
   * endpoint should comply with internal and regulatory requirements for entity
   * removal and is intended only for exceptional cases where true deletion is
   * authorized. No response body is returned for this operation.
   *
   * @param connection
   * @param adminId Unique identifier of the admin user (who owns or manages the
   *   escalation)
   * @param escalationId Unique identifier for the role escalation request to
   *   permanently remove
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":escalationId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedParam("escalationId")
    escalationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminAdminsAdminIdRoleEscalationsEscalationId(
        {
          admin,
          adminId,
          escalationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
