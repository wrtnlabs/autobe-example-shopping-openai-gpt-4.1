import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallAdminAdmins } from "../../../../providers/patchShoppingMallAdminAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getShoppingMallAdminAdminsAdminId } from "../../../../providers/getShoppingMallAdminAdminsAdminId";
import { putShoppingMallAdminAdminsAdminId } from "../../../../providers/putShoppingMallAdminAdminsAdminId";
import { deleteShoppingMallAdminAdminsAdminId } from "../../../../providers/deleteShoppingMallAdminAdminsAdminId";

import { IPageIShoppingMallAdmin } from "../../../../api/structures/IPageIShoppingMallAdmin";
import { IShoppingMallAdmin } from "../../../../api/structures/IShoppingMallAdmin";

@Controller("/shoppingMall/admin/admins")
export class ShoppingmallAdminAdminsController {
  /**
   * Search and retrieve a paginated, filtered list of administrators from the
   * shopping_mall_admins table.
   *
   * Retrieve a filtered and paginated list of administrator profiles from the
   * platform. This endpoint provides searching, sorting, and filtering,
   * allowing system owners to review administrator accounts by various fields
   * such as email, status (active, suspended, pending), KYC verification
   * status, and creation date.
   *
   * Authorization is restricted to users with administrative privileges, as
   * administrator profile data is considered highly sensitive. Proper
   * authentication is required and the system should apply audit and
   * rate-limiting policies to this endpoint.
   *
   * This operation works directly with the shopping_mall_admins table in the
   * Prisma schema, referencing fields like email, name, status, kyc_status, and
   * audit metadata. It supports advanced filtering through its request body,
   * enabling use cases such as admin account reviews, compliance reporting,
   * escalation approval checks, and general user management.
   *
   * @param connection
   * @param body Search and filtering criteria for finding administrator
   *   accounts, including pagination and sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAdmin.IRequest,
  ): Promise<IPageIShoppingMallAdmin.ISummary> {
    try {
      return await patchShoppingMallAdminAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get the full, detailed profile for an administrator using their adminId
   * from shopping_mall_admins.
   *
   * Retrieve the full profile and account information of an administrator by
   * their unique identifier. This includes personal profile (name, email),
   * status (active, suspended, pending), KYC verification, and identity audit
   * fields necessary for role-based access management and compliance.
   *
   * This operation is strictly role-restricted: only users with admin-level
   * privileges can access this endpoint, due to the sensitive nature of
   * administrator data. All read activities are auditable and should be logged
   * for compliance.
   *
   * The underlying Prisma schema (shopping_mall_admins) defines the fields
   * returned, ensuring only valid, authorized data is included. The response
   * supports audit and management use cases, such as reviewing admin escalation
   * status or handling support tickets related to admin accounts.
   *
   * @param connection
   * @param adminId The unique ID of the administrator to retrieve profile
   *   information for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAdmin> {
    try {
      return await getShoppingMallAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update administrator account information by adminId (shopping_mall_admins).
   *
   * Update an administrator's account fields, including their contact
   * information, account status (active, pending, suspended), KYC verification
   * state, or password hash (for authentication rotation). This could be for
   * supporting privilege escalation, admin onboarding, or handling
   * security/compliance workflow.
   *
   * This endpoint is only accessible to administrators with sufficient
   * privileges. All actions via this endpoint are logged for audit and
   * compliance purposes. The request body follows the shopping_mall_admins
   * Prisma schema, supporting only updatable fields and rejecting immutable
   * ones (such as ID or audit/history fields).
   *
   * Use cases include onboarding/exiting admins, security credential rotations,
   * updating compliance information (KYC), and locking/unlocking admin
   * accounts.
   *
   * @param connection
   * @param adminId The unique ID of the administrator whose profile will be
   *   updated.
   * @param body Update payload for administrator fields allowed in
   *   shopping_mall_admins.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAdmin.IUpdate,
  ): Promise<IShoppingMallAdmin> {
    try {
      return await putShoppingMallAdminAdminsAdminId({
        admin,
        adminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete an administrator (soft delete by setting deleted_at) using
   * their adminId.
   *
   * Logically deletes an administrator account from the platform by setting the
   * deleted_at timestamp on the shopping_mall_admins record corresponding to
   * adminId. This soft-deletion keeps all history and audit fields intact for
   * compliance, rollback, and legal reasons. The record will not be purged, so
   * admins cannot be recovered by regular users but may be retained for audit.
   *
   * This operation is strictly privileged: it is available only to
   * authenticated administrative users. All delete actions must be logged and
   * auditable. This endpoint does not return a response body upon successful
   * completion. The operation is essential for offboarding, security, or
   * compliance situations where administrators must be deactivated from the
   * system.
   *
   * @param connection
   * @param adminId The unique ID of the administrator to logically delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
