import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallAdminMileages } from "../../../../providers/postShoppingMallAdminMileages";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchShoppingMallAdminMileages } from "../../../../providers/patchShoppingMallAdminMileages";
import { getShoppingMallAdminMileagesMileageId } from "../../../../providers/getShoppingMallAdminMileagesMileageId";
import { putShoppingMallAdminMileagesMileageId } from "../../../../providers/putShoppingMallAdminMileagesMileageId";
import { deleteShoppingMallAdminMileagesMileageId } from "../../../../providers/deleteShoppingMallAdminMileagesMileageId";

import { IShoppingMallMileage } from "../../../../api/structures/IShoppingMallMileage";
import { IPageIShoppingMallMileage } from "../../../../api/structures/IPageIShoppingMallMileage";

@Controller("/shoppingMall/admin/mileages")
export class ShoppingmallAdminMileagesController {
  /**
   * Create a new shopping mall mileage (loyalty/point) account entity for a
   * user or campaign.
   *
   * Creates a new mileage (loyalty/point system) account within the shopping
   * mall platform. The shopping_mall_mileages entity captures per-user loyalty
   * point balances and audit meta for all active mileage/point use. This
   * endpoint can be used to initialize a default mileage account for new
   * customers or issue a special loyalty account for bonus campaigns.
   * Permissions are restricted to administrators or business automation modules
   * to maintain regulatory and business integrity.
   *
   * All input values are validated per schema and business logic before record
   * creation—duplicate mileage accounts for a user are not allowed, and
   * status/expiry fields are checked for compliance. Success returns the full
   * mileage entity. Related endpoints include retrieval (GET), search (PATCH),
   * and transaction management. Error scenarios provide clear business
   * rationales (e.g., already initialized, bad status value, insufficient
   * permission).
   *
   * @param connection
   * @param body Payload for new mileage (loyalty point) account creation; must
   *   match schema and business rules for initial status, balance, customer
   *   link, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallMileage.ICreate,
  ): Promise<IShoppingMallMileage> {
    try {
      return await postShoppingMallAdminMileages({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of shopping mall
   * mileage/point accounts for administrative use.
   *
   * Fetches a list of all mileage (loyalty/point) accounts in the system
   * according to search, filter, and pagination parameters. The
   * shopping_mall_mileages table models each user's mileage/point balance
   * account, used for rewards, campaigns, and compliance audit. This endpoint
   * supports complex request bodies for multifaceted filter/search/sort; it
   * returns a paginated summary suitable for admin analytics dash boards and
   * operational view. Searchable fields typically include account status
   * (active, expired, frozen), expiry date, balance thresholds, and per-user
   * scoping. Only admin users can access all mileage accounts; this operation
   * never exposes raw PII, linking only on business identifiers. Related
   * endpoints include single account detail queries (GET), creation (POST), and
   * mileage transaction history (PATCH/GET on transactions).
   *
   * @param connection
   * @param body Complex search/filter/sort parameters for mileage (loyalty
   *   point) account retrieval and pagination; supports status, balance, and
   *   user-based filtering.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallMileage.IRequest,
  ): Promise<IPageIShoppingMallMileage.ISummary> {
    try {
      return await patchShoppingMallAdminMileages({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the detailed information of a specific mileage (loyalty point)
   * account by its ID.
   *
   * Fetches a detailed, non-editable view of a particular mileage
   * (loyalty/point system) account using its unique mileageId (UUID). The
   * shopping_mall_mileages entity provides per-user point balances, status, and
   * expiry/creation metadata for loyalty programs. This operation is important
   * for admin audit/compliance, support review, or before taking further action
   * on the account. Authorization is limited to administrative/business users;
   * personal account viewing for end customers is handled through user-specific
   * endpoints.
   *
   * If the account is not found (invalid or deleted ID) or user lacks
   * permission, the operation returns a clear error code and no account data.
   * Related endpoints include account searching (PATCH /mileages), creation
   * (POST), and transaction viewing. This operation enforces all business
   * security policies, masking or excluding sensitive data as per role and
   * context.
   *
   * @param connection
   * @param mileageId Unique identifier for the mileage account record; must be
   *   a valid UUID as per shopping_mall_mileages.id.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mileageId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallMileage> {
    try {
      return await getShoppingMallAdminMileagesMileageId({
        admin,
        mileageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the details of a mileage (loyalty/point) account in the
   * shopping_mall_mileages table.
   *
   * Update a specific mileage record by its UUID from the
   * shopping_mall_mileages table. This operation is used for administrative or
   * customer self-service adjustments to a user's mileage (loyalty point)
   * account, such as balance corrections, status changes (active, expired,
   * frozen), or setting of expiration dates.
   *
   * This API requires careful handling of concurrency and security, as altering
   * mileage balances can affect user experience and financial reconciliation.
   * Business rules may restrict who can update which fields, and all actions
   * are typically logged for compliance. The operation also checks the validity
   * of mileage status, ensures non-negative balances, and handles expiration
   * fields as defined in the schema.
   *
   * Authorization is enforced based on role: only account owners or
   * administrators may update their mileage. All updates are versioned and may
   * be snapshotted for audit and rollback. Related operations include
   * retrieving a mileage account, paging through transaction history, and
   * account creation or logical deletion. Validation errors should be
   * explicitly communicated, and all field changes require strict audit logging
   * and, where applicable, consent for critical changes (such as balance
   * adjustment).
   *
   * @param connection
   * @param mileageId The unique identifier of the mileage account to update.
   * @param body Updated mileage account information, including fields such as
   *   balance, status, and expiration as defined by the schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":mileageId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallMileage.IUpdate,
  ): Promise<IShoppingMallMileage> {
    try {
      return await putShoppingMallAdminMileagesMileageId({
        admin,
        mileageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (logically remove) a mileage account by marking deleted_at in
   * shopping_mall_mileages table.
   *
   * Soft-delete an existing mileage (loyalty/point) account given its UUID.
   * This operation is intended for either account owners or administrators to
   * deactivate or logically remove a mileage account without losing historical
   * data, as required for legal, financial, or user service reasons.
   *
   * The operation simply marks the deleted_at timestamp in accordance with the
   * schema-defined soft delete design. No data is permanently erased, ensuring
   * full audit trails and recoverability for regulatory compliance (such as
   * GDPR/CCPA erasure on proper approval). Only authorized users—typically the
   * owner of the mileage or administrators—may trigger this operation. Coupled
   * with business logic and permission checks, the API ensures no active
   * balance is lost or misaccounted. Related operations include restoring a
   * logically deleted mileage, listing active/inactive accounts, or querying
   * snapshot evidence for disputes.
   *
   * Implementation MUST NOT physically remove the record or affect associated
   * mileage transactions and analytics. All actions are strictly logged for
   * compliance.
   *
   * @param connection
   * @param mileageId The unique identifier of the mileage account to
   *   soft-delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":mileageId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallAdminMileagesMileageId({
        admin,
        mileageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
