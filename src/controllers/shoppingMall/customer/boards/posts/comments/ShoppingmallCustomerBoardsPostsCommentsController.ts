import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerBoardsBoardIdPostsPostIdComments } from "../../../../../../providers/postShoppingMallCustomerBoardsBoardIdPostsPostIdComments";
import { CustomerAuth } from "../../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerBoardsBoardIdPostsPostIdCommentsCommentId } from "../../../../../../providers/putShoppingMallCustomerBoardsBoardIdPostsPostIdCommentsCommentId";
import { deleteShoppingMallCustomerBoardsBoardIdPostsPostIdCommentsCommentId } from "../../../../../../providers/deleteShoppingMallCustomerBoardsBoardIdPostsPostIdCommentsCommentId";

import { IShoppingMallComment } from "../../../../../../api/structures/IShoppingMallComment";

@Controller("/shoppingMall/customer/boards/:boardId/posts/:postId/comments")
export class ShoppingmallCustomerBoardsPostsCommentsController {
  /**
   * Create a new comment on a specific board post (shopping_mall_comments).
   *
   * This endpoint enables users to submit new comments on a designated post
   * within a bulletin board, supporting threaded discussions and multi-role
   * interaction. Upon creation, the comment records authorship (customer,
   * seller, or admin), content, and relational references to the parent post.
   * Permission checks are applied to enforce who may comment based on board or
   * post visibility, and the initial moderation status is set
   * (pending/approved) depending on board configuration.
   *
   * The comment body supports Markdown formatting. The system ensures that the
   * new comment is correctly associated with the board and post by enforcing
   * integrity on boardId and postId. Moderation fields allow for workflows
   * where comments may require approval before publication, with clear tracking
   * of moderation status and explanations. Audit trails are written for each
   * comment creation for compliance and evidence purposes.
   *
   * Attachments to comments, if necessary, are handled by a separate attachment
   * API and are not part of this operation. Rate limits and anti-abuse measures
   * apply as required by business configuration. Related endpoints include
   * updating and deleting comments, listing thread comments, and managing
   * attachments.
   *
   * @param connection
   * @param boardId Unique identifier of the target board.
   * @param postId Unique identifier of the post to comment on.
   * @param body Information required to create a new comment under a specific
   *   post. Includes role-determined author fields and comment content.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallComment.ICreate,
  ): Promise<IShoppingMallComment> {
    try {
      return await postShoppingMallCustomerBoardsBoardIdPostsPostIdComments({
        customer,
        boardId,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing comment on a board post (shopping_mall_comments).
   *
   * This endpoint supports editing an existing comment associated with a
   * specific board post. The operation validates that the acting user is either
   * the comment author or an authorized moderator/admin, enforcing strict
   * permission and moderation policies. The update process supports changing
   * the comment body and may also include updating moderation status or reason
   * if initiated by an admin.
   *
   * Every update is snapshotted for audit and evidence retention by leveraging
   * the comment snapshot mechanism in the underlying schema. All
   * changes—whether by the user or moderator—are logged and versioned,
   * maintaining a full traceable history of the comment's edits for compliance
   * and potential rollback.
   *
   * Input validation ensures the edited comment adheres to permitted content
   * guidelines (Markdown, length, etc.). Related operations include comment
   * creation, deletion, moderation flagging, and listing thread comments.
   *
   * @param connection
   * @param boardId Unique identifier of the target board.
   * @param postId Unique identifier of the post containing the comment.
   * @param commentId Unique identifier of the comment to be updated.
   * @param body Information necessary for updating the content of an existing
   *   comment; supports author- or moderator-initiated changes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallComment.IUpdate,
  ): Promise<IShoppingMallComment> {
    try {
      return await putShoppingMallCustomerBoardsBoardIdPostsPostIdCommentsCommentId(
        {
          customer,
          boardId,
          postId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically (soft) delete an existing comment on a board post
   * (shopping_mall_comments).
   *
   * This endpoint logically removes (soft deletes) a specific comment from a
   * board post by setting the deleted_at timestamp in the corresponding comment
   * record. Deletion rights are restricted to the comment's author or users
   * with appropriate moderation privileges such as admins. Upon deletion, all
   * historical and audit data are preserved in compliance with evidence
   * retention policy.
   *
   * Soft deleted comments are no longer displayed in standard thread listings
   * but may be accessible to authorized staff for moderation, audit, or dispute
   * review. This action triggers an audit log entry and, if configured,
   * notifies relevant users of the deletion event. Attempts to delete already
   * deleted or unauthorized comments will be rejected with appropriate error
   * messages. Associated comment snapshot records remain for future legal
   * review or recovery.
   *
   * @param connection
   * @param boardId Unique identifier of the board containing the post and
   *   comment.
   * @param postId Unique identifier of the post containing the comment.
   * @param commentId Unique identifier of the comment to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerBoardsBoardIdPostsPostIdCommentsCommentId(
        {
          customer,
          boardId,
          postId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
