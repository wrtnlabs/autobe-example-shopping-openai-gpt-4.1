import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerReviews } from "../../../../providers/postShoppingMallCustomerReviews";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerReviews } from "../../../../providers/patchShoppingMallCustomerReviews";
import { getShoppingMallCustomerReviewsReviewId } from "../../../../providers/getShoppingMallCustomerReviewsReviewId";
import { putShoppingMallCustomerReviewsReviewId } from "../../../../providers/putShoppingMallCustomerReviewsReviewId";
import { deleteShoppingMallCustomerReviewsReviewId } from "../../../../providers/deleteShoppingMallCustomerReviewsReviewId";

import { IShoppingMallReview } from "../../../../api/structures/IShoppingMallReview";
import { IPageIShoppingMallReview } from "../../../../api/structures/IPageIShoppingMallReview";

@Controller("/shoppingMall/customer/reviews")
export class ShoppingmallCustomerReviewsController {
  /**
   * Create a new product review for a purchased product
   * (shopping_mall_reviews).
   *
   * This POST endpoint enables customers (and in limited cases, sellers or
   * admins) to submit a new product review. The request body must include the
   * product ID, order ID, reviewer (customer), rating, review text, and any
   * relevant metadata or attachments.
   *
   * Reviews are tied to a verified purchase—you must provide a valid order and
   * product association, and only one review is permitted per product per order
   * per customer, enforced by a unique constraint in the schema. Moderation
   * status is set according to platform policy, possibly requiring
   * administrative approval before publication.
   *
   * On successful creation, the API returns the full product review object,
   * including its database-generated ID, references, and all provided fields.
   * The system also triggers downstream workflows, such as review notification,
   * analytics update, and potential loyalty/mileage accrual. Errors are
   * returned if required constraints (verified purchase, single-review policy,
   * etc.) are violated.
   *
   * @param connection
   * @param body All relevant fields required to create a new product review:
   *   product ID, order ID, customer ID, rating, text, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallReview.ICreate,
  ): Promise<IShoppingMallReview> {
    try {
      return await postShoppingMallCustomerReviews({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of product review summaries
   * (shopping_mall_reviews).
   *
   * Use this endpoint to search and retrieve a paginated collection of product
   * review summaries. The operation leverages the shopping_mall_reviews table,
   * referencing all available review metadata, including associations to
   * products, orders, reviewers (customer or seller), and moderation status
   * fields.
   *
   * This endpoint is optimized for advanced filtering—clients can search or
   * sort review data by product, rating, moderation status, creation date,
   * reviewer, or associated order. Full pagination support allows efficient
   * data loading for dashboards, listing pages, and analytics.
   *
   * Security: Customers can only access their own reviews. Sellers access
   * reviews on their listed products. Admins may access all reviews system-wide
   * for moderation and reporting purposes.
   *
   * The response includes only summary details (not full review content or
   * thread), suitable for listing views or analytics screens. Related APIs
   * include review detail retrieval (GET /reviews/{reviewId}), creation, and
   * update endpoints.
   *
   * @param connection
   * @param body Search criteria, filters, and pagination parameters for
   *   retrieving product review summaries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallReview.IRequest,
  ): Promise<IPageIShoppingMallReview.ISummary> {
    try {
      return await patchShoppingMallCustomerReviews({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific product review
   * (shopping_mall_reviews).
   *
   * This endpoint is designed to fetch complete details for a single product
   * review, based on its unique reviewId. The review is identified by its
   * shopping_mall_reviews.id, which is a UUID.
   *
   * Returned details include all core fields of the review: product
   * association, order reference, reviewer (customer or seller), rating,
   * moderation status, timestamps, and any attached content or meta. Associated
   * fields such as notifications, moderation notes, and linked thread
   * references are also included in the response as available.
   *
   * Access control ensures that customers may only view their own reviews,
   * sellers may access reviews concerning their products, and administrators
   * may view any review for moderation purposes. If the review does not exist,
   * is deleted, or access is unauthorized, an appropriate error is returned.
   *
   * Related endpoints include list/search, creation, and update APIs for
   * product reviews.
   *
   * @param connection
   * @param reviewId Unique identifier for the target product review.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reviewId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallReview> {
    try {
      return await getShoppingMallCustomerReviewsReviewId({
        customer,
        reviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product review in the shopping mall
   * (shopping_mall_reviews table).
   *
   * This endpoint allows an authenticated customer (review author) or an admin
   * to update the content and rating of an existing product review. The
   * reviewId path parameter identifies which review to update. The review's
   * body, title, rating, and moderation_status can be changed within permitted
   * business rules. All modifications are snapshotted for compliance and
   * evidence, supporting rollback, dispute, and complete audit requirements
   * under platform policy.
   *
   * Security is enforced so only the review's creator (customer) or an admin
   * may perform updates, with stricter controls for sensitive moderation status
   * fields. Update requests that attempt to modify immutable fields, violate
   * review uniqueness, or lack appropriate permissions will result in an error
   * with a clear business error message. The endpoint supports full
   * internationalization and follows access control policies as defined in
   * system requirements.
   *
   * Related operations include review creation (POST /reviews), review
   * retrieval (GET /reviews/{reviewId}), and review moderation (PUT with admin
   * role). Edge cases include handling of reviews under moderation hold, denied
   * updates post soft-deletion, and audit snapshot triggers for every event.
   *
   * @param connection
   * @param reviewId Unique identifier of the review to update
   * @param body Review update payload: rating, title, body, moderation_status,
   *   etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reviewId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallReview.IUpdate,
  ): Promise<IShoppingMallReview> {
    try {
      return await putShoppingMallCustomerReviewsReviewId({
        customer,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (logical removal) of a review from the shopping mall
   * (shopping_mall_reviews table).
   *
   * This endpoint allows the author of the review (customer) or an admin to
   * logically delete (soft delete) a product review by setting its deleted_at
   * field. The reviewId path parameter uniquely identifies the review to be
   * deleted. The system enforces strict permission so that only the review's
   * creator or administrators can perform this action. Soft deletion hides the
   * review from user-facing APIs and search while preserving it in the database
   * for compliance, rollback, and dispute evidence. Logical deletions trigger a
   * snapshot and deletion event for regulatory traceability and audit.
   *
   * Attempting to delete a review that is already deleted, does not exist, or
   * where the user lacks permission results in a business logic error. Reviews
   * under legal or dispute hold may be exempt and return a specific error.
   * Related endpoints include review creation, update, retrieval, and the
   * review snapshot history API.
   *
   * @param connection
   * @param reviewId Unique identifier of the review to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reviewId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerReviewsReviewId({
        customer,
        reviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
