import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallCustomerCartsCartIdSnapshots } from "../../../../../providers/patchShoppingMallCustomerCartsCartIdSnapshots";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";

import { IPageIShoppingMallCartSnapshot } from "../../../../../api/structures/IPageIShoppingMallCartSnapshot";
import { IShoppingMallCartSnapshot } from "../../../../../api/structures/IShoppingMallCartSnapshot";

@Controller("/shoppingMall/customer/carts/:cartId/snapshots")
export class ShoppingmallCustomerCartsSnapshotsController {
  /**
   * Search paginated audit/history cart snapshots for a given cart
   * (IPageIShoppingMallCartSnapshot).
   *
   * This advanced search endpoint returns a paginated, filterable list of
   * snapshot history for a specific cart (cartId). The API interacts with the
   * shopping_mall_cart_snapshots table and supports rich queriesâ€”allowing
   * clients to filter by creation date, mutation type, or other audit fields as
   * implemented in the IShoppingMallCartSnapshot.IRequest DTO.
   *
   * Business rules verify that only the owner of the cart (or privileged staff)
   * can access these snapshots. The response includes an
   * IPageIShoppingMallCartSnapshot collection, allowing clients to implement
   * evidence trails, rollback views, or compliance reporting. The API enforces
   * evidence retention policies as required by the snapshot schema. Pagination,
   * filtering, and sorting parameters are respected according to DTO
   * capabilities.
   *
   * @param connection
   * @param cartId The unique identifier of the cart whose snapshot history is
   *   being queried.
   * @param body Snapshot query/filter/pagination options following
   *   IShoppingMallCartSnapshot.IRequest DTO structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartSnapshot.IRequest,
  ): Promise<IPageIShoppingMallCartSnapshot> {
    try {
      return await patchShoppingMallCustomerCartsCartIdSnapshots({
        customer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
