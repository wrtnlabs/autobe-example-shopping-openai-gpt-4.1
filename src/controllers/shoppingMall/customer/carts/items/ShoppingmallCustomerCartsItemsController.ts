import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerCartsCartIdItems } from "../../../../../providers/postShoppingMallCustomerCartsCartIdItems";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerCartsCartIdItems } from "../../../../../providers/patchShoppingMallCustomerCartsCartIdItems";
import { getShoppingMallCustomerCartsCartIdItemsCartItemId } from "../../../../../providers/getShoppingMallCustomerCartsCartIdItemsCartItemId";
import { putShoppingMallCustomerCartsCartIdItemsCartItemId } from "../../../../../providers/putShoppingMallCustomerCartsCartIdItemsCartItemId";
import { deleteShoppingMallCustomerCartsCartIdItemsCartItemId } from "../../../../../providers/deleteShoppingMallCustomerCartsCartIdItemsCartItemId";

import { IShoppingMallCartItem } from "../../../../../api/structures/IShoppingMallCartItem";
import { IPageIShoppingMallCartItem } from "../../../../../api/structures/IPageIShoppingMallCartItem";

@Controller("/shoppingMall/customer/carts/:cartId/items")
export class ShoppingmallCustomerCartsItemsController {
  /**
   * Add a new item to a shopping cart (IShoppingMallCartItem.ICreate).
   *
   * This endpoint allows a customer to add a new item to their shopping cart,
   * associating a given product (and optionally, specific product variant) with
   * a particular cartId. The API targets the shopping_mall_cart_items table and
   * is used during the add-to-cart flow for authenticated or guest users. The
   * operation supports specifying the product, variant (for selected options),
   * quantity, and a snapshot of the user's option selection for evidence and
   * validation.
   *
   * Business validations include checking the existence and status of the cart
   * (linked to shopping_mall_carts), verifying that the product and optional
   * variant exist and are available for sale, and ensuring that inventory is
   * sufficient for the requested quantity. The API must enforce that only the
   * authenticated user (owner of the cart) or permitted support staff may add
   * items. Any failure due to business rules (e.g., cart status is
   * 'checked_out', inventory shortage, or invalid variant) should return a
   * descriptive error message.
   *
   * If the addition is successful, the response returns the updated state of
   * the added cart item, including metadata for subsequent operations such as
   * validation or cart-to-order conversion. All operations must be logged for
   * audit purposes, and evidence retention is enforced for compliance and
   * traceability as outlined in shopping_mall_cart_items schema documentation.
   *
   * @param connection
   * @param cartId The unique identifier of the shopping cart to which the item
   *   will be added.
   * @param body Required information for adding a product (and optional
   *   variant/options/quantity) as a cart item, mapping to the
   *   IShoppingMallCartItem.ICreate DTO.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.ICreate,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await postShoppingMallCustomerCartsCartIdItems({
        customer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search all items in a specific cart (paginated, filterable;
   * shopping_mall_cart_items).
   *
   * Retrieves the complete list of items currently held within a specific
   * shopping cart, enabling the customer or authorized admin roles to see,
   * search, sort, or paginate through the cart's contents. Advanced filtering
   * can be applied based on product or variant, added time, or grouping labels
   * when batch features are enabled.
   *
   * The list is always scoped to a single cart via cartId, guaranteeing
   * isolation and privacy between different users' carts. The operation
   * integrates deep business rules, ensuring real-time item data consistency
   * with catalog status, inventory, or product updates (e.g., out-of-stock
   * products appear as inactive items). Results can support batch selection
   * (for example, for mass removal or checkout), with UI-level pagination and
   * sorting options.
   *
   * This endpoint ties directly into the cart/checkout workflow and supports
   * personalization/AI modules by providing comprehensive insight into
   * in-session cart activity. Error cases include invalid cartId, unauthorized
   * access, or filtering by fields that do not exist on cart items.
   *
   * @param connection
   * @param cartId Unique identifier for the cart whose items are to be listed.
   * @param body Search, filter, and paging parameters for the cart items within
   *   the given cart.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.IRequest,
  ): Promise<IPageIShoppingMallCartItem> {
    try {
      return await patchShoppingMallCustomerCartsCartIdItems({
        customer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single cart item with product and variant detail
   * (shopping_mall_cart_items).
   *
   * Fetches full details for a single item within a user's cart, using both
   * cartId and cartItemId to guarantee ownership and path-union context. The
   * returned information covers core relationships: the product, selected
   * variant, quantity, and relevant option/variant selections, along with the
   * added timestamp and current status (including inactive or invalid if
   * product status changed since addition).
   *
   * Security and business requirements ensure that only the owner or authorized
   * admin roles may access this resource. The endpoint returns up-to-date
   * product and variant metadata reflecting any catalog status, price, or
   * availability changes at the time of requestâ€”critical for checkout
   * validation. Error handling addresses cases such as missing or deleted cart
   * or item, or cross-user access attempts.
   *
   * This endpoint is an integral part of user session and checkout flows,
   * supporting UI and personalization logic, and adheres closely to
   * shopping_mall_cart_items table constraints documented in the Prisma
   * schema.
   *
   * @param connection
   * @param cartId Parent cart ID for ownership and access scoping.
   * @param cartItemId Cart item ID to identify the record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartItemId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await getShoppingMallCustomerCartsCartIdItemsCartItemId({
        customer,
        cartId,
        cartItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a cart item (IShoppingMallCartItem.IUpdate), e.g., quantity,
   * variant, options.
   *
   * This endpoint allows updating a specific item in a shopping cart,
   * referenced by cartId and cartItemId. It targets the
   * shopping_mall_cart_items table, supporting changes to properties such as
   * quantity, selected product variant, and option snapshot (for evidence and
   * after-sales). Business rules validate the cart's status, item existence,
   * and ensure that the updated variant/options are valid and in stock. Only
   * the owner of the cart can update items; support/admin may have elevated
   * rights for dispute resolution.
   *
   * Upon successful update, the API returns the updated cart item, reflecting
   * any changes to inventory or option configuration, and records the operation
   * for audit trail compliance per the shopping_mall_cart_items schema.
   * Attempts to update a cart item in an expired or checked out cart, or with
   * insufficient inventory, must provide context-aware error responses.
   *
   * @param connection
   * @param cartId The unique identifier of the shopping cart containing the
   *   item to update.
   * @param cartItemId The unique identifier of the cart item to update within
   *   the cart.
   * @param body Information for updating a cart item, following
   *   IShoppingMallCartItem.IUpdate DTO, supporting quantity, variant
   *   selection, and options snapshot update.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartItemId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCartItem.IUpdate,
  ): Promise<IShoppingMallCartItem> {
    try {
      return await putShoppingMallCustomerCartsCartIdItemsCartItemId({
        customer,
        cartId,
        cartItemId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft-delete) a cart item from a shopping cart
   * (IShoppingMallCartItem).
   *
   * This endpoint allows a user to remove (soft-delete) a specified item
   * (cartItemId) from a shopping cart (cartId). It updates the
   * shopping_mall_cart_items table's deleted_at field rather than hard-deleting
   * rows, in accordance with the schema, ensuring evidence retention for audit
   * and compliance.
   *
   * The operation verifies that the cart item exists, is currently active (not
   * already deleted), and that the parent cart is in a state permitting
   * modification. Only the cart owner or an authorized user may perform this
   * action. Attempts to remove items from a checked-out or expired cart should
   * fail with an appropriate error. All deletions are logged for
   * audit/recovery. The API returns a confirmation object or status, but no
   * cart item body on success.
   *
   * @param connection
   * @param cartId The unique identifier of the cart from which the item will be
   *   removed.
   * @param cartItemId The unique identifier of the cart item to remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartItemId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerCartsCartIdItemsCartItemId({
        customer,
        cartId,
        cartItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
