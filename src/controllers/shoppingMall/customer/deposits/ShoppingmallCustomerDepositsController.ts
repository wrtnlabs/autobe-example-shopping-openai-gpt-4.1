import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerDepositsDepositId } from "../../../../providers/getShoppingMallCustomerDepositsDepositId";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { putShoppingMallCustomerDepositsDepositId } from "../../../../providers/putShoppingMallCustomerDepositsDepositId";
import { deleteShoppingMallCustomerDepositsDepositId } from "../../../../providers/deleteShoppingMallCustomerDepositsDepositId";
import { postShoppingMallCustomerDeposits } from "../../../../providers/postShoppingMallCustomerDeposits";

import { IShoppingMallDeposit } from "../../../../api/structures/IShoppingMallDeposit";

@Controller("/shoppingMall/customer/deposits")
export class ShoppingmallCustomerDepositsController {
  /**
   * Get details of a specific deposit account by its ID from
   * shopping_mall_deposits table.
   *
   * Retrieve a single deposit account by its unique identifier. This API
   * provides detailed information on the balance, status, timestamps, and the
   * associated customer of the deposit account.
   *
   * This operation accesses the shopping_mall_deposits table. The data returned
   * includes both financial state (balance/status) and audit metadata (created,
   * updated, soft-deleted timestamps) as defined in the Prisma schema.
   *
   * Only the owner customer (authenticated) or administrators may use this
   * endpoint, enforced via authorization role in the response. Unauthorized
   * attempts are denied with standard permission errors. Error responses
   * include not-found for non-existent or inaccessible depositId, or forbidden
   * if access is outside permitted scope.
   *
   * Related APIs for deposit transactions and account ledgers are available but
   * not directly listed here.
   *
   * @param connection
   * @param depositId Unique identifier for the deposit account (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":depositId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallDeposit> {
    try {
      return await getShoppingMallCustomerDepositsDepositId({
        customer,
        depositId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing deposit account data by depositId in
   * shopping_mall_deposits.
   *
   * Update the status or other modifiable properties of an existing deposit
   * account using its depositId. This includes status transitions (e.g.,
   * active, frozen, under_review, closed) and, where permitted, balance
   * adjustments following regulatory or business-policy controls.
   *
   * Direct arbitrary changes to the balance field are restricted and require
   * proper audit/reason according to business process—this API should only be
   * used in the context of manual adjustments, administrative reviews, or
   * customer-initiated account status changes. Attempts to update non-existent
   * or soft-deleted deposits will result in not-found errors.
   *
   * All update actions are performed with full audit logging, and only
   * authorized actors (account owner or admin) are allowed. No other fields
   * beyond those allowed in IShoppingMallDeposit.IUpdate may be modified
   * through this operation.
   *
   * @param connection
   * @param depositId Unique identifier for the deposit account (UUID).
   * @param body Updated deposit account data (e.g., status, manual adjustments,
   *   or review outcome).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":depositId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDeposit.IUpdate,
  ): Promise<IShoppingMallDeposit> {
    try {
      return await putShoppingMallCustomerDepositsDepositId({
        customer,
        depositId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (logical removal) of deposit account by depositId in
   * shopping_mall_deposits table.
   *
   * Mark the specified deposit account as soft-deleted by setting the
   * deleted_at timestamp. This logical deletion ensures the record is retained
   * for audit and compliance purposes, in line with regulatory requirements for
   * financial systems.
   *
   * Only the owner (authenticated user) or an administrator can invoke this
   * delete operation. If the depositId does not exist, a not-found error is
   * returned. After soft deletion, all transactional activity (payments,
   * refunds) for this account are blocked, but historical data remains
   * queryable for evidence and compliance.
   *
   * Attempts to hard-delete the physical record are denied—only logical
   * deletion supported per schema. An audit trail records who, when, and why
   * the deletion occurred.
   *
   * Error handling includes business logic errors (e.g., trying to delete an
   * already-deleted deposit), and appropriate security checks for role-based
   * permission enforcement.
   *
   * @param connection
   * @param depositId Unique identifier for the deposit account (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":depositId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerDepositsDepositId({
        customer,
        depositId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new deposit account for a customer in shopping_mall_deposits
   * table.
   *
   * Create a new deposit account for a user. This endpoint receives account
   * initialization data—linking to the customer, setting initial balance, and
   * status. Validation checks include ensuring a customer does not already have
   * an existing active deposit account (enforced by Prisma unique constraint).
   * Attempts to create a duplicate will return a business conflict error.
   *
   * Only authenticated users are allowed to trigger deposit account creation
   * (role: customer). Audit fields (created_at, updated_at) are set by the
   * system. Responses include the new deposit account object as persisted in
   * the database.
   *
   * @param connection
   * @param body Initial deposit account creation data including customer
   *   linkage, balance, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallDeposit.ICreate,
  ): Promise<IShoppingMallDeposit> {
    try {
      return await postShoppingMallCustomerDeposits({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
