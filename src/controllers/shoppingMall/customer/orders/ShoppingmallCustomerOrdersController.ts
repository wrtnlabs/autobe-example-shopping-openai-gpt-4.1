import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putShoppingMallCustomerOrdersOrderId } from "../../../../providers/putShoppingMallCustomerOrdersOrderId";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { deleteShoppingMallCustomerOrdersOrderId } from "../../../../providers/deleteShoppingMallCustomerOrdersOrderId";

import { IShoppingMallOrder } from "../../../../api/structures/IShoppingMallOrder";

@Controller("/shoppingMall/customer/orders/:orderId")
export class ShoppingmallCustomerOrdersController {
  /**
   * Update an existing shopping mall order by ID.
   *
   * This API allows for the update of an order record by order ID. Orders in
   * the shoppingMall system represent the core business transaction structure
   * and include customer linkage, channel/section context, order status,
   * payment details, and audit data. Updates are restricted to appropriate
   * roles and only permitted when the order is not finalized, cancelled, or
   * deleted.
   *
   * The update process must enforce all relevant business logic, such as
   * checking for illegal state transitions (e.g., cannot move from delivered to
   * applied), and prevent updates to orders marked deleted. All modifications
   * will trigger storage of a pre-update snapshot in accordance with compliance
   * requirements, ensuring full traceability for disputes and audit. Attempts
   * to update locked, deleted, or read-only orders will result in clear,
   * actionable error messages.
   *
   * This operation interacts with the shopping_mall_orders table, referencing
   * comments in the schema regarding state transition, multi-seller support,
   * and evidence retention. It is designed to be used by users with order
   * management privileges and returns the updated order record.
   *
   * @param connection
   * @param orderId Order ID to update. Must be a valid UUID representing an
   *   order in the shopping_mall_orders table.
   * @param body Update information for the target shopping mall order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrder.IUpdate,
  ): Promise<IShoppingMallOrder> {
    try {
      return await putShoppingMallCustomerOrdersOrderId({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an existing shopping mall order by order ID.
   *
   * This API marks an order as deleted, enabling soft-delete functionality as
   * required for compliance and audit. Instead of removing the order data, the
   * system sets the deleted_at timestamp, ensuring the record remains
   * accessible for regulatory recovery and historical analysis.
   *
   * Deletion is only allowed when the order is in a deletable state as per
   * business rules â€” for example, not finalized, not associated with ongoing
   * shipments, or after permitted cancellation windows. Upon invocation, a
   * snapshot of the order will be saved for evidence, and deletion actions will
   * be logged in the audit trail.
   *
   * Attempts to delete orders in restricted or non-deletable states will result
   * in clear error messages. The endpoint enforces robust permission and status
   * logic based on schema comments for status and deletion fields.
   *
   * @param connection
   * @param orderId Order ID to soft delete. Must be a valid UUID of an existing
   *   order in shopping_mall_orders.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerOrdersOrderId({
        customer,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
