import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallCustomerOrdersOrderIdShipments } from "../../../../../providers/patchShoppingMallCustomerOrdersOrderIdShipments";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { getShoppingMallCustomerOrdersOrderIdShipmentsShipmentId } from "../../../../../providers/getShoppingMallCustomerOrdersOrderIdShipmentsShipmentId";

import { IPageIShoppingMallShipment } from "../../../../../api/structures/IPageIShoppingMallShipment";
import { IShoppingMallShipment } from "../../../../../api/structures/IShoppingMallShipment";

@Controller("/shoppingMall/customer/orders/:orderId/shipments")
export class ShoppingmallCustomerOrdersShipmentsController {
  /**
   * Retrieve a paginated list of shipment batches for a specific order from
   * shopping_mall_shipments.
   *
   * This endpoint allows an authenticated user (customer, seller, or admin) to
   * retrieve a paginated and optionally filtered set of all shipment records
   * for a given order (identified by orderId).
   *
   * Security permissions are enforced such that only actors with legitimate
   * access to the specified order can view its shipments. Customers can access
   * only their own orders, sellers only their handled items, and admins have
   * global access. The operation returns shipment summaries including status,
   * tracking numbers, delivery windows, seller info, and per-shipment
   * analytics. Detailed filtering options enable users to analyze fulfillment
   * performance, identify delays, or reconcile after-sales disputes.
   *
   * The operation is tightly coupled with the shopping_mall_shipments database
   * model, and supports integration with delivery and after-sales modules.
   * Errors such as unauthorized access or invalid orderId are handled with
   * appropriate status codes and audit logging. Results are returned as
   * paginated collections for performance, and may be used together with
   * shipment detail views or shipment update endpoints as part of a full order
   * management workflow.
   *
   * @param connection
   * @param orderId Unique identifier of the target order to get shipments for
   * @param body Search and filter options for shipment records, as well as
   *   pagination and sorting controls
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallShipment.IRequest,
  ): Promise<IPageIShoppingMallShipment.ISummary> {
    try {
      return await patchShoppingMallCustomerOrdersOrderIdShipments({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information on a specific order shipment
   * (shopping_mall_shipments).
   *
   * This endpoint provides granular shipment details for a specified shipmentId
   * within its parent order (orderId). It enforces strong security so that only
   * stakeholders associated with the order (customer, assigned seller, admin)
   * may retrieve the detail.
   *
   * The returned record includes the shipmentâ€™s status, all associated shipment
   * items, carrier/tracking links, timestamps for status transitions
   * (requested, shipped, delivered, etc), seller identity, and analytics/meta.
   * Error handling covers not-found, not-belonging-to-order, or unauthorized
   * access cases. This endpoint supports logistics traceability, customer
   * inquiry response, and after-sales case management. The result is primarily
   * consumed in shipment detail views and order history pages.
   *
   * @param connection
   * @param orderId Unique identifier of the order that includes the specified
   *   shipment
   * @param shipmentId Unique identifier for the shipment batch to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":shipmentId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("shipmentId")
    shipmentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallShipment> {
    try {
      return await getShoppingMallCustomerOrdersOrderIdShipmentsShipmentId({
        customer,
        orderId,
        shipmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
