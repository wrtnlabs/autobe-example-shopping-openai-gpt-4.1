import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerOrdersOrderIdDeliveries } from "../../../../../providers/postShoppingMallCustomerOrdersOrderIdDeliveries";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerOrdersOrderIdDeliveries } from "../../../../../providers/patchShoppingMallCustomerOrdersOrderIdDeliveries";
import { getShoppingMallCustomerOrdersOrderIdDeliveriesDeliveryId } from "../../../../../providers/getShoppingMallCustomerOrdersOrderIdDeliveriesDeliveryId";
import { putShoppingMallCustomerOrdersOrderIdDeliveriesDeliveryId } from "../../../../../providers/putShoppingMallCustomerOrdersOrderIdDeliveriesDeliveryId";
import { deleteShoppingMallCustomerOrdersOrderIdDeliveriesDeliveryId } from "../../../../../providers/deleteShoppingMallCustomerOrdersOrderIdDeliveriesDeliveryId";

import { IShoppingMallDelivery } from "../../../../../api/structures/IShoppingMallDelivery";
import { IPageIShoppingMallDelivery } from "../../../../../api/structures/IPageIShoppingMallDelivery";

@Controller("/shoppingMall/customer/orders/:orderId/deliveries")
export class ShoppingmallCustomerOrdersDeliveriesController {
  /**
   * Create a delivery address and recipient entry for an order
   * (ShoppingMallDeliveries table).
   *
   * Create a new delivery entry for a specific order by providing the necessary
   * recipient and address details. This operation is used during the order
   * fulfillment workflow to specify where and to whom the order (or split
   * portion) should be delivered.
   *
   * Security measures enforce that only users with associated rights to the
   * order (customers who placed the order, authorized staff, or system
   * processes) can perform this action. Business logic ensures that the
   * delivery address and recipient contact information are validated based on
   * locale-specific rules and compliance requirements, including restricted
   * address formats and real-name confirmation if mandated by region.
   *
   * Upon invocation, the operation links the delivery directly to the
   * designated order and supports integration with split/multi-shipment logic
   * where more than one delivery entry may exist per order. Error handling
   * covers missing or invalid address/contact info, unauthorized access, and
   * inconsistent order status (e.g., order already completed/cancelled).
   *
   * Related APIs: Typically used as part of an order-to-fulfillment flow,
   * followed by shipment creation and status updates. Designed for use with
   * audit and evidence preservation as required by the schema's
   * audit-compliance structure.
   *
   * @param connection
   * @param orderId Target order's ID for which the delivery record is to be
   *   created.
   * @param body Delivery information including recipient and address for the
   *   new delivery entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDelivery.ICreate,
  ): Promise<IShoppingMallDelivery> {
    try {
      return await postShoppingMallCustomerOrdersOrderIdDeliveries({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate deliveries associated with an order
   * (shopping_mall_deliveries table).
   *
   * Search and paginate deliveries (delivery windows/address records) for a
   * specific order. This is required for tracking multi-shipment orders, split
   * deliveries, and for enabling users to monitor overall delivery status on
   * complex orders.
   *
   * Advanced search filters—by status, shipmentId, recipient name, or time
   * period—are supported. Pagination allows efficient retrieval even for orders
   * with many delivery records (e.g., large B2B orders or split/partial
   * shipments). Security filters are applied: customers can view their own
   * orders, sellers can access deliveries related to their own goods, and
   * admins have global access.
   *
   * Returned fields include recipient information (with privacy controls),
   * delivery status, timing info, snapshot address as at delivery time,
   * shipment references, and any delivery messages (special instructions). The
   * operation is linked to after-sales workflows (returns/exchanges initiated
   * from delivered items) and audit/evidence modules for compliance. All search
   * parameters and response structures align with the shopping_mall_deliveries
   * schema.
   *
   * Related APIs include list/search of shipments for an order and detailed
   * delivery view (GET /orders/{orderId}/deliveries/{deliveryId}). Errors
   * include insufficient permission, non-existent order, or invalid filter
   * parameters.
   *
   * @param connection
   * @param orderId Unique identifier of the order for which deliveries are
   *   queried.
   * @param body Search filters, sorting, and pagination parameters for querying
   *   deliveries within an order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDelivery.IRequest,
  ): Promise<IPageIShoppingMallDelivery.ISummary> {
    try {
      return await patchShoppingMallCustomerOrdersOrderIdDeliveries({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a delivery for a specific order and deliveryId
   * (shopping_mall_deliveries table).
   *
   * Retrieve full details for a single delivery associated with an order. This
   * allows users to view address snapshot, recipient info, timing info,
   * delivery status, and evidence of the delivery event.
   *
   * Security is enforced to ensure only permitted actors may access delivery
   * data: customers are restricted to their own orders, sellers to their own
   * items, admins are unrestricted. The endpoint is essential for end-user
   * delivery tracking, support workflows (post-delivery disputes, after-sales
   * actions), and for building comprehensive audit trails.
   *
   * The response includes all shopping_mall_deliveries columns, including
   * address, recipient, delivery status, shipment associations, delivery
   * messages, confirmation state, and snapshot linkage for full evidentiary
   * support. Related APIs are the delivery list/search for an order, shipment
   * batching endpoints, and after-sales service initiation operations
   * (returns/exchanges). Error handling covers not found (invalid ID),
   * permission errors, and order-delivery mismatch scenarios. The API supports
   * internationalization and privacy controls for address and contact fields.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order.
   * @param deliveryId Unique identifier of the delivery record attached to the
   *   order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deliveryId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallDelivery> {
    try {
      return await getShoppingMallCustomerOrdersOrderIdDeliveriesDeliveryId({
        customer,
        orderId,
        deliveryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update delivery address or recipient information for an order delivery
   * (ShoppingMallDeliveries table).
   *
   * Update an existing delivery address or recipient info for a specific order
   * and delivery record. This is typically required if the user needs to
   * correct address details, change recipient information, or update delivery
   * instructions prior to shipment dispatch.
   *
   * Security and business logic ensure that only authorized users (typically,
   * the customer who owns the order or authorized staff/admin) can perform this
   * update. The operation validates that the delivery record is still in an
   * editable state (not yet delivered or confirmed), and all inputs must pass
   * stringent address/contact validation according to system and regulatory
   * rules.
   *
   * The system records a snapshot of the delivery state before and after the
   * update, preserving full audit history and supporting regulatory or
   * dispute-related rollback. Error cases include unauthorized update attempts,
   * invalid order/delivery IDs, and modification attempts after shipment
   * confirmation.
   *
   * This operation is part of the larger order fulfillment and shipment
   * workflow. It may be followed by shipment assignment, delivery status
   * tracking, or after-sales processes if changes are required post-dispatch.
   *
   * @param connection
   * @param orderId Target order's ID for which the delivery record is being
   *   updated.
   * @param deliveryId Unique delivery record ID to update.
   * @param body Updated delivery information (address, recipient,
   *   instructions).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":deliveryId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDelivery.IUpdate,
  ): Promise<IShoppingMallDelivery> {
    try {
      return await putShoppingMallCustomerOrdersOrderIdDeliveriesDeliveryId({
        customer,
        orderId,
        deliveryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (soft delete) a delivery address or recipient info for an
   * order (ShoppingMallDeliveries table).
   *
   * Logically delete (soft delete) a delivery record for an order by setting
   * the deleted_at field per the ShoppingMallDeliveries schema. This operation
   * is permissible only if shipment is not yet confirmed or delivered. Soft
   * deletion ensures the delivery record remains in the system for audit,
   * compliance, and dispute resolution, but is excluded from active workflows
   * and normal UI displays.
   *
   * Only the customer who placed the order or authorized admin/staff can invoke
   * this deletion, and logic enforces that only deliveries in a
   * cancellable/editable state can be deleted. The action triggers audit log
   * recording for compliance and may notify relevant stakeholders (user and
   * logistics, if applicable).
   *
   * Error cases cover: attempting to delete after shipment confirmation or
   * delivery, unauthorized access, and non-existent delivery IDs linked to the
   * specified order. No response body is returned; operation follows RESTful
   * standards with appropriate status code only.
   *
   * @param connection
   * @param orderId Target order's ID for which the delivery record is being
   *   deleted.
   * @param deliveryId Unique delivery record ID to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":deliveryId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerOrdersOrderIdDeliveriesDeliveryId({
        customer,
        orderId,
        deliveryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
