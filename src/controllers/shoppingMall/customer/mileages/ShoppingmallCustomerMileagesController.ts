import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putShoppingMallCustomerMileagesMileageId } from "../../../../providers/putShoppingMallCustomerMileagesMileageId";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { deleteShoppingMallCustomerMileagesMileageId } from "../../../../providers/deleteShoppingMallCustomerMileagesMileageId";

import { IShoppingMallMileage } from "../../../../api/structures/IShoppingMallMileage";

@Controller("/shoppingMall/customer/mileages/:mileageId")
export class ShoppingmallCustomerMileagesController {
  /**
   * Update the details of a mileage (loyalty/point) account in the
   * shopping_mall_mileages table.
   *
   * Update a specific mileage record by its UUID from the
   * shopping_mall_mileages table. This operation is used for administrative or
   * customer self-service adjustments to a user's mileage (loyalty point)
   * account, such as balance corrections, status changes (active, expired,
   * frozen), or setting of expiration dates.
   *
   * This API requires careful handling of concurrency and security, as altering
   * mileage balances can affect user experience and financial reconciliation.
   * Business rules may restrict who can update which fields, and all actions
   * are typically logged for compliance. The operation also checks the validity
   * of mileage status, ensures non-negative balances, and handles expiration
   * fields as defined in the schema.
   *
   * Authorization is enforced based on role: only account owners or
   * administrators may update their mileage. All updates are versioned and may
   * be snapshotted for audit and rollback. Related operations include
   * retrieving a mileage account, paging through transaction history, and
   * account creation or logical deletion. Validation errors should be
   * explicitly communicated, and all field changes require strict audit logging
   * and, where applicable, consent for critical changes (such as balance
   * adjustment).
   *
   * @param connection
   * @param mileageId The unique identifier of the mileage account to update.
   * @param body Updated mileage account information, including fields such as
   *   balance, status, and expiration as defined by the schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallMileage.IUpdate,
  ): Promise<IShoppingMallMileage> {
    try {
      return await putShoppingMallCustomerMileagesMileageId({
        customer,
        mileageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (logically remove) a mileage account by marking deleted_at in
   * shopping_mall_mileages table.
   *
   * Soft-delete an existing mileage (loyalty/point) account given its UUID.
   * This operation is intended for either account owners or administrators to
   * deactivate or logically remove a mileage account without losing historical
   * data, as required for legal, financial, or user service reasons.
   *
   * The operation simply marks the deleted_at timestamp in accordance with the
   * schema-defined soft delete design. No data is permanently erased, ensuring
   * full audit trails and recoverability for regulatory compliance (such as
   * GDPR/CCPA erasure on proper approval). Only authorized users—typically the
   * owner of the mileage or administrators—may trigger this operation. Coupled
   * with business logic and permission checks, the API ensures no active
   * balance is lost or misaccounted. Related operations include restoring a
   * logically deleted mileage, listing active/inactive accounts, or querying
   * snapshot evidence for disputes.
   *
   * Implementation MUST NOT physically remove the record or affect associated
   * mileage transactions and analytics. All actions are strictly logged for
   * compliance.
   *
   * @param connection
   * @param mileageId The unique identifier of the mileage account to
   *   soft-delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerMileagesMileageId({
        customer,
        mileageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
