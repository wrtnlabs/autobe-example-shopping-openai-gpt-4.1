import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallCustomerAttachmentsAttachmentId } from "../../../../providers/getShoppingMallCustomerAttachmentsAttachmentId";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { postShoppingMallCustomerAttachments } from "../../../../providers/postShoppingMallCustomerAttachments";

import { IShoppingMallAttachment } from "../../../../api/structures/IShoppingMallAttachment";

@Controller("/shoppingMall/customer/attachments")
export class ShoppingmallCustomerAttachmentsController {
  /**
   * Retrieve metadata and file info for a specific attachment by attachmentId
   * (shopping_mall_attachments).
   *
   * Fetches the current, latest metadata for a specific file attachment
   * identified by attachmentId. Metadata includes filename, extension, MIME
   * type, size, current CDN/server URL, permission scope, version management
   * links, hash for integrity, logical business source, description, and
   * time/ownership fields. The response can include a list or link to file
   * versions if versioning is enabled on the file.
   *
   * Callers use this to display, audit, or access downloadable resources within
   * the platform securely. Download permissions are enforced using the
   * permission_scope on the attachment, ensuring only qualified users, admins,
   * or entity owners can retrieve file links. Errors include 404 for invalid or
   * deleted files, 403 for unauthorized attempts, and audit trails for all
   * retrievals. Business logic may log access by actor ID and context for
   * compliance.
   *
   * @param connection
   * @param attachmentId ID of the file attachment to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":attachmentId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAttachment> {
    try {
      return await getShoppingMallCustomerAttachmentsAttachmentId({
        customer,
        attachmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Upload/create a new file attachment with metadata and version in
   * shopping_mall_attachments/shopping_mall_attachment_versions.
   *
   * Permits uploading a new file attachment to the platform. The request must
   * include a file reference (URI or temporary storage pointer after frontend
   * upload), business context fields (intended module/entity, expected
   * permission scope), and optional description tags. Uploaded files are
   * validated by type, size, and policy before being stored and indexed on the
   * backend. Upon success, metadata is created for the primary attachment
   * entity as well as the initial version in the version table.
   *
   * File uploads by users are permission checked: only authenticated actors
   * (customers, sellers, admins) may initiate uploads. Business logic applies
   * quota enforcement and extension/format validation, and performs
   * malware/virus scans and any compliance-related pre-processing. The
   * operation may generate public or restricted URLs based on permission_scope.
   * Errors include file invalidation (415), exceeded quota (429), or permission
   * failure (403). The response includes the full attachment metadata and
   * permitted download URLs for future use.
   *
   * @param connection
   * @param body Attachment creation/upload data including file reference,
   *   intended purpose, extension, and permissions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAttachment.ICreate,
  ): Promise<IShoppingMallAttachment> {
    try {
      return await postShoppingMallCustomerAttachments({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
