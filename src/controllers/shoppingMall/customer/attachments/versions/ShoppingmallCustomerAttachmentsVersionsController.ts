import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerAttachmentsAttachmentIdVersions } from "../../../../../providers/postShoppingMallCustomerAttachmentsAttachmentIdVersions";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";

import { IShoppingMallAttachmentVersion } from "../../../../../api/structures/IShoppingMallAttachmentVersion";

@Controller("/shoppingMall/customer/attachments/:attachmentId/versions")
export class ShoppingmallCustomerAttachmentsVersionsController {
  /**
   * Create a new version for a given attachment
   * (shopping_mall_attachment_versions table).
   *
   * Create a new file version for an existing attachment by supplying all
   * relevant metadata and the server URI for the uploaded file content. This
   * operation must be used when a user (customer, seller, or admin) uploads a
   * new version of an existing file for business entities (products, reviews,
   * orders, posts, etc.).
   *
   * Permission checks are enforced to ensure only authorized users can update
   * the target attachment. The system validates that the supplied URI points to
   * a compliant file (size, type, structure) and updates are only possible for
   * attachments where the current user has replacement privileges.
   *
   * All previous versions for the attachment are preserved and retrievable via
   * audit APIs. Every new version increments the version number sequentially
   * and forms a time-stamped chain of versions for evidence and regulatory
   * compliance. If compliance, retention, or GDPR rules require blocking
   * version updates, a detailed error is returned explaining the constraint.
   *
   * Related endpoints include listing all versions of an attachment, retrieving
   * a single version, and replacing file versions for attachments used in
   * shopping mall business entities. This operation cannot be used if the
   * parent attachment is soft/hard deleted; such requests return a business
   * logic error. On success, it returns the full attachment version metadata.
   *
   * @param connection
   * @param attachmentId Target attachment's unique identifier (UUID).
   * @param body Metadata required to create a new attachment version for an
   *   existing attachment. Includes server file URI, version info, and audit
   *   metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAttachmentVersion.ICreate,
  ): Promise<IShoppingMallAttachmentVersion> {
    try {
      return await postShoppingMallCustomerAttachmentsAttachmentIdVersions({
        customer,
        attachmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
