import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallCustomerFavoriteAddresses } from "../../../../providers/postShoppingMallCustomerFavoriteAddresses";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patchShoppingMallCustomerFavoriteAddresses } from "../../../../providers/patchShoppingMallCustomerFavoriteAddresses";
import { getShoppingMallCustomerFavoriteAddressesFavoriteAddressId } from "../../../../providers/getShoppingMallCustomerFavoriteAddressesFavoriteAddressId";
import { putShoppingMallCustomerFavoriteAddressesFavoriteAddressId } from "../../../../providers/putShoppingMallCustomerFavoriteAddressesFavoriteAddressId";
import { deleteShoppingMallCustomerFavoriteAddressesFavoriteAddressId } from "../../../../providers/deleteShoppingMallCustomerFavoriteAddressesFavoriteAddressId";

import { IShoppingMallFavoriteAddress } from "../../../../api/structures/IShoppingMallFavoriteAddress";
import { IPageIShoppingMallFavoriteAddress } from "../../../../api/structures/IPageIShoppingMallFavoriteAddress";

@Controller("/shoppingMall/customer/favoriteAddresses")
export class ShoppingmallCustomerFavoriteaddressesController {
  /**
   * Create a new favorited address for the authenticated customer
   * (shopping_mall_favorite_addresses).
   *
   * This operation allows an authenticated customer to mark one of their
   * addresses as a favorite, creating a record in
   * shopping_mall_favorite_addresses. The request requires the address ID
   * (UUID), optional organization/batch label, and notification preference.
   * Upon creation, a snapshot of the favorited address entity is captured and
   * referenced, ensuring complete evidence for audit, personalization, and
   * notification workflows.
   *
   * Business logic enforces customer authentication, ownership validation (only
   * the customer's own addresses are eligible), and checks for
   * duplicates—rejecting attempts to favorite the same address more than once.
   * If the address is not found or permission is violated, an appropriate error
   * code is returned. All operation steps are logged for compliance. Success
   * returns the created favorite address including metadata and the attached
   * snapshot reference.
   *
   * @param connection
   * @param body Data to create a new favorite address: address UUID,
   *   organization label (optional), and notification preference.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallFavoriteAddress.ICreate,
  ): Promise<IShoppingMallFavoriteAddress> {
    try {
      return await postShoppingMallCustomerFavoriteAddresses({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered and paginated list of favorite addresses for the
   * current customer (shopping_mall_favorite_addresses).
   *
   * Authenticated users may query their favorited addresses using this
   * endpoint, supporting advanced filtering (such as by label/tag/notification
   * state), pagination, and batch-friendly operations for organizing large
   * favorite lists. Each address record is linked to its evidence snapshot at
   * the time of favoriting, fulfilling both personalization input and
   * audit/evidence requirements.
   *
   * The underlying query only returns addresses owned by the authenticated
   * customer; attempting to query the favorites of others is strictly
   * prohibited by permission checks. Full pagination is implemented with
   * configurable page size and sort order. Errors are returned for invalid
   * search parameters or when the user is not authenticated.
   *
   * This operation is based on shopping_mall_favorite_addresses (lookup by
   * customer), and joins with shopping_mall_favorite_snapshots for historical
   * business data. All responses support localization and audit policies, and
   * returned records reflect exact field definitions in the DB schema.
   *
   * @param connection
   * @param body Search, filtering, and pagination criteria for retrieving
   *   favorite addresses.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallFavoriteAddress.IRequest,
  ): Promise<IPageIShoppingMallFavoriteAddress> {
    try {
      return await patchShoppingMallCustomerFavoriteAddresses({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific favorited address for the authenticated user, including
   * resolved address snapshot and notification metadata
   * (shopping_mall_favorite_addresses).
   *
   * This operation fetches all available detail about a single entry from the
   * shopping_mall_favorite_addresses table, matching the provided
   * favoriteAddressId. The client must be authenticated as a customer and may
   * only access their own favorited entries (permissions enforced). All address
   * favorite fields—including batch_label, notification_enabled, and links to
   * the immutable snapshot (at time of favorite creation)—are included in the
   * response. The snapshot entity preserves a historical record allowing audit,
   * rollback, or dispute evidence.
   *
   * Security checks ensure only the owning customer can retrieve the favorited
   * address, rejecting attempts to access non-owned or deleted entries. If the
   * favorite is logically deleted (deleted_at not null), the operation returns
   * a not-found error. If permission violation is detected, a 403 Forbidden
   * response is returned.
   *
   * Error handling covers invalid/missing UUID, non-existent resources, or
   * permission failures, returning standardized error codes and clarifying
   * context for the user. Related operations include the ability to list all
   * favorites, create new favorites, update labels/notification, or logically
   * remove favorite addresses; all actions are tracked for compliance and
   * personalization workflows.
   *
   * @param connection
   * @param favoriteAddressId Unique identifier for the favorite address to
   *   retrieve (UUID from shopping_mall_favorite_addresses.id)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":favoriteAddressId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteAddressId")
    favoriteAddressId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallFavoriteAddress> {
    try {
      return await getShoppingMallCustomerFavoriteAddressesFavoriteAddressId({
        customer,
        favoriteAddressId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update notification or batch metadata for a specific favorited address
   * (shopping_mall_favorite_addresses).
   *
   * This operation allows an authenticated customer to modify details of their
   * favorited address entry. Supported updates include toggling
   * notification_enabled (for entity change alerts) and editing batch_label
   * (for organizational purposes). The core favorite reference and snapshot
   * state are immutable, preserving audit integrity. Only the user who created
   * the favorite can perform this update; attempts to modify another user's
   * favorite address are denied with a 403 error.
   *
   * Validation enforces that the favoriteAddressId belongs to the authenticated
   * user and is not logically deleted. Changes are persisted, and the response
   * includes the full, now-updated favorite address entity (including snapshot
   * reference). Audit logs are created for evidence traceability, with all
   * modification attempts captured (successful or denied).
   *
   * @param connection
   * @param favoriteAddressId Unique identifier of the favorited address to
   *   update (UUID from shopping_mall_favorite_addresses.id)
   * @param body Payload including updatable fields for a favorited address:
   *   notification_enabled and batch_label.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":favoriteAddressId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteAddressId")
    favoriteAddressId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallFavoriteAddress.IUpdate,
  ): Promise<IShoppingMallFavoriteAddress> {
    try {
      return await putShoppingMallCustomerFavoriteAddressesFavoriteAddressId({
        customer,
        favoriteAddressId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft delete) a favorited address for the authenticated customer
   * (shopping_mall_favorite_addresses).
   *
   * This operation marks a favorited address for the currently authenticated
   * customer as deleted, performing a soft delete by setting the deleted_at
   * field in shopping_mall_favorite_addresses. After this operation, the
   * favorite is no longer shown in get/list operations or included in
   * notifications, but the full audit/snapshot history is preserved for
   * compliance, export, and dispute resolution. Attempts to remove a favorite
   * belonging to another user or an already-removed entry result in an error.
   *
   * Security controls strictly enforce ownership; unauthorized delete requests
   * receive a 403 Forbidden response. Deleted favorites remain present for
   * legal retention but are hidden from user-facing APIs. All soft-delete
   * actions are tracked in the audit log. This endpoint supports user-driven
   * address list organization and privacy management in compliance with
   * regulations.
   *
   * @param connection
   * @param favoriteAddressId Unique identifier of the favorite address to
   *   remove (UUID from shopping_mall_favorite_addresses.id)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":favoriteAddressId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteAddressId")
    favoriteAddressId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerFavoriteAddressesFavoriteAddressId(
        {
          customer,
          favoriteAddressId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
