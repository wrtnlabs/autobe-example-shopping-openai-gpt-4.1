import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallCustomerCustomersCustomerIdExternalAccounts } from "../../../../../providers/patchShoppingMallCustomerCustomersCustomerIdExternalAccounts";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { getShoppingMallCustomerCustomersCustomerIdExternalAccountsExternalAccountId } from "../../../../../providers/getShoppingMallCustomerCustomersCustomerIdExternalAccountsExternalAccountId";
import { putShoppingMallCustomerCustomersCustomerIdExternalAccountsExternalAccountId } from "../../../../../providers/putShoppingMallCustomerCustomersCustomerIdExternalAccountsExternalAccountId";
import { deleteShoppingMallCustomerCustomersCustomerIdExternalAccountsExternalAccountId } from "../../../../../providers/deleteShoppingMallCustomerCustomersCustomerIdExternalAccountsExternalAccountId";

import { IPageIShoppingMallExternalAccount } from "../../../../../api/structures/IPageIShoppingMallExternalAccount";
import { IShoppingMallExternalAccount } from "../../../../../api/structures/IShoppingMallExternalAccount";

@Controller("/shoppingMall/customer/customers/:customerId/externalAccounts")
export class ShoppingmallCustomerCustomersExternalaccountsController {
  /**
   * Search and retrieve all external accounts linked to a specific customer
   * (shopping_mall_external_accounts).
   *
   * This endpoint allows retrieval of all external OAuth/social accounts
   * associated with a single customer, referenced by {customerId}. It enables
   * customers to audit and manage their linked OAuth accounts (Google, Apple,
   * Kakao, Naver, etc), supporting re-linking, disconnection, or
   * troubleshooting.
   *
   * Customer authentication is required, and the system verifies that the
   * customer is querying only their own external accounts. Administrators may
   * use this operation for customer support/audit cases, subject to access
   * policy. Returned data includes provider name, linked status, timestamps,
   * and unique external account identifiers.
   *
   * Filtering options allow queries by provider, status (active, revoked,
   * pending), linkage date, or external account ID. Pagination and sorting are
   * supported for accounts with many links over time. Error handling includes
   * permission checks, invalid ID handling, and rate limiting for repeated
   * queries.
   *
   * @param connection
   * @param customerId Unique identifier of the target customer whose external
   *   accounts are being queried.
   * @param body Criteria for filtering, searching, and paginating the
   *   customer's linked external accounts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallExternalAccount.IRequest,
  ): Promise<IPageIShoppingMallExternalAccount.ISummary> {
    try {
      return await patchShoppingMallCustomerCustomersCustomerIdExternalAccounts(
        {
          customer,
          customerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve metadata for a single external account linked to a customer
   * (shopping_mall_external_accounts).
   *
   * This endpoint fetches detailed information about a specific external
   * OAuth/social account connected to a customer, identified by both
   * {customerId} and {externalAccountId}. Customers can use this to verify the
   * status or metadata of a particular external login.
   *
   * Only the owning customer (or an admin, under compliance) can access this
   * resource; role-based access control is enforced. Returned data includes
   * provider name, linked user ID, linkage date, and status.
   *
   * This operation provides transparency for multi-auth scenarios, helps users
   * troubleshoot login issues, and surfaces provider-specific metadata.
   * Security measures include strict path parameter validation and access
   * checks to prevent unauthorized access to another user's accounts. Errors
   * are returned for invalid IDs or insufficient permissions.
   *
   * @param connection
   * @param customerId Unique identifier of the customer who owns this external
   *   account association.
   * @param externalAccountId Unique identifier of the target external account
   *   entry to be retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":externalAccountId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("externalAccountId")
    externalAccountId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallExternalAccount> {
    try {
      return await getShoppingMallCustomerCustomersCustomerIdExternalAccountsExternalAccountId(
        {
          customer,
          customerId,
          externalAccountId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing external account linked to a customer
   * (shopping_mall_external_accounts).
   *
   * This endpoint allows the authenticated customer (or admin under compliance)
   * to update editable metadata on a specific external account association.
   * Supported updates include status (e.g., manual revocation, relinking),
   * annotation of provider-specific metadata, or customer preferences for
   * authentication notifications.
   *
   * Security measures ensure customers can only modify their account and not
   * others. Only fields allowed by business rules, compliance, and OAuth
   * provider policy may be updated. The request is rejected if attempted on
   * system-managed or immutable fields (e.g., provider, external_user_id). Full
   * auditing is enforced.
   *
   * This operation is used for user-initiated disconnect/revoke flows, recovery
   * from login issues, or syncing status with third-party OAuth identities.
   * Validation errors and forbidden field updates are properly surfaced. All
   * changes are logged for audit and compliance.
   *
   * @param connection
   * @param customerId Unique identifier of the customer who owns the external
   *   account to update.
   * @param externalAccountId Unique identifier of the external account record
   *   to be modified.
   * @param body Editable metadata for the external account such as status
   *   changes or customer-specific preferences or annotations.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":externalAccountId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("externalAccountId")
    externalAccountId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallExternalAccount.IUpdate,
  ): Promise<IShoppingMallExternalAccount> {
    try {
      return await putShoppingMallCustomerCustomersCustomerIdExternalAccountsExternalAccountId(
        {
          customer,
          customerId,
          externalAccountId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove or logically delete a linked external account from the customer
   * profile (shopping_mall_external_accounts).
   *
   * This endpoint allows a customer (or authorized admin) to remove the
   * association of an external OAuth/social account from their account/profile.
   * Only the owner can unlink external accounts unless a compliant admin
   * performs the action for risk or fraud reasons. The operation performs a
   * logical deletion by marking the deleted_at timestamp, preserving
   * auditability and GDPR/CCPA compliance.
   *
   * This operation is used for customer-driven unlink/revoke workflows (e.g.,
   * unlinking Google/Kakao), loss/theft scenarios, or access recovery. It
   * checks for active links before unlinking and prevents deletion of required
   * or system-managed associations. After successful operation, the account
   * remains in the audit history and is excluded from active linkage lists.
   * Forbidden or illegal requests prompt error logging and user-facing
   * feedback.
   *
   * @param connection
   * @param customerId Unique identifier of the customer requesting to remove an
   *   external association.
   * @param externalAccountId Unique identifier of the external account
   *   association to be removed.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":externalAccountId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("externalAccountId")
    externalAccountId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallCustomerCustomersCustomerIdExternalAccountsExternalAccountId(
        {
          customer,
          customerId,
          externalAccountId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
