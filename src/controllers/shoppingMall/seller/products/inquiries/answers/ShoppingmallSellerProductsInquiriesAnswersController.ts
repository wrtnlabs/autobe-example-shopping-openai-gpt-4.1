import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProductsProductIdInquiriesInquiryIdAnswers } from "../../../../../../providers/postShoppingMallSellerProductsProductIdInquiriesInquiryIdAnswers";
import { SellerAuth } from "../../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerProductsProductIdInquiriesInquiryIdAnswersAnswerId } from "../../../../../../providers/putShoppingMallSellerProductsProductIdInquiriesInquiryIdAnswersAnswerId";
import { deleteShoppingMallSellerProductsProductIdInquiriesInquiryIdAnswersAnswerId } from "../../../../../../providers/deleteShoppingMallSellerProductsProductIdInquiriesInquiryIdAnswersAnswerId";

import { IShoppingMallInquiryAnswer } from "../../../../../../api/structures/IShoppingMallInquiryAnswer";

@Controller(
  "/shoppingMall/seller/products/:productId/inquiries/:inquiryId/answers",
)
export class ShoppingmallSellerProductsInquiriesAnswersController {
  /**
   * Create a new answer for a product inquiry (shopping_mall_inquiry_answers).
   *
   * Creates a new answer to a product inquiry for a specified product.
   * Permitted actors are sellers (answering their own products/inquiries) or
   * admins (platform moderation or official responses). The schema records
   * responder (seller/admin), body, official-answer flag, and relation to the
   * target inquiry.
   *
   * Validation ensures that only authorized users can answer, that the inquiry
   * is still open and not already answered if exclusive, and that
   * moderation/notification flags are set correctly. The post is subject to
   * moderation workflow with audit trail created on submission. Any attached
   * files or thread context are referenced in the request body.
   *
   * @param connection
   * @param productId Target product's unique identifier (UUID)
   * @param inquiryId Target inquiry's unique identifier (UUID)
   * @param body Answer content, authorship info, moderation/meta for new answer
   *   creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallInquiryAnswer.ICreate,
  ): Promise<IShoppingMallInquiryAnswer> {
    try {
      return await postShoppingMallSellerProductsProductIdInquiriesInquiryIdAnswers(
        {
          seller,
          productId,
          inquiryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing answer to a product inquiry
   * (shopping_mall_inquiry_answers).
   *
   * Updates an existing product inquiry answer by its unique answerId for the
   * given product/inquiry context. Authorization checks ensure only the author
   * (seller/admin) or an admin with override rights can edit the answer.
   * Post-update, the system records a full snapshot for compliance/history.
   *
   * All moderated fields (body, official-answer flag, moderation status, etc.)
   * are eligible for update, subject to business validation. The operation
   * triggers moderation flows and audit logs, ensuring traceable compliance
   * under dispute or compliance requests. Historical versions of the answer are
   * accessible for admins.
   *
   * @param connection
   * @param productId Target product's unique identifier (UUID)
   * @param inquiryId Target inquiry's unique identifier (UUID)
   * @param answerId Target answer's unique identifier (UUID)
   * @param body Fields to update, including moderation state, content, and
   *   thread/meta
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":answerId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("answerId")
    answerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallInquiryAnswer.IUpdate,
  ): Promise<IShoppingMallInquiryAnswer> {
    try {
      return await putShoppingMallSellerProductsProductIdInquiriesInquiryIdAnswersAnswerId(
        {
          seller,
          productId,
          inquiryId,
          answerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently deletes a specific answer to a product inquiry
   * (shopping_mall_inquiry_answers).
   *
   * This endpoint is designed to delete a single answer from a product inquiry
   * within the system. It is associated with the shopping_mall_inquiry_answers
   * table in the Prisma schema, which tracks official answers provided by
   * sellers or administrators to inquiries posted about products.
   *
   * Deletion rights are typically restricted to the answer's author,
   * corresponding seller, or an administrator with moderation privileges. Since
   * soft delete is supported (via the 'deleted_at' field), this operation will
   * mark the record as deleted while retaining its history for evidence and
   * compliance purposes.
   *
   * To perform the operation, the requestor must specify the target productId,
   * inquiryId, and answerId in the path. Each ID must be a valid UUID,
   * corresponding to the hierarchy: product → inquiry → answer.
   *
   * Security: Only authenticated sellers (for their own products/inquiries) or
   * admins may execute this API. An audit log entry will be saved, and attempts
   * to delete unauthorized/nonexistent or already-deleted answers will result
   * in a relevant error.
   *
   * Related operations include creating, updating, or retrieving answers
   * through the respective endpoints. This deletion operation ensures
   * compliance by preserving the deleted state, enabling full legal
   * traceability and rollback if necessary.
   *
   * @param connection
   * @param productId Unique identifier for the target product.
   * @param inquiryId Unique identifier for the product inquiry.
   * @param answerId Unique identifier for the answer to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":answerId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("answerId")
    answerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductIdInquiriesInquiryIdAnswersAnswerId(
        {
          seller,
          productId,
          inquiryId,
          answerId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
