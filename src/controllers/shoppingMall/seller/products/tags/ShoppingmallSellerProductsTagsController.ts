import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProductsProductIdTags } from "../../../../../providers/postShoppingMallSellerProductsProductIdTags";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patchShoppingMallSellerProductsProductIdTags } from "../../../../../providers/patchShoppingMallSellerProductsProductIdTags";
import { getShoppingMallSellerProductsProductIdTagsTagId } from "../../../../../providers/getShoppingMallSellerProductsProductIdTagsTagId";
import { putShoppingMallSellerProductsProductIdTagsTagId } from "../../../../../providers/putShoppingMallSellerProductsProductIdTagsTagId";
import { deleteShoppingMallSellerProductsProductIdTagsTagId } from "../../../../../providers/deleteShoppingMallSellerProductsProductIdTagsTagId";

import { IShoppingMallProductTag } from "../../../../../api/structures/IShoppingMallProductTag";
import { IPageIShoppingMallProductTag } from "../../../../../api/structures/IPageIShoppingMallProductTag";

@Controller("/shoppingMall/seller/products/:productId/tags")
export class ShoppingmallSellerProductsTagsController {
  /**
   * Create and attach a new tag to a specific product
   * (shopping_mall_product_tags).
   *
   * Add a new tag to the specified product by submitting a tag value through
   * this endpoint. The operation supports business logic for cleaning,
   * normalizing, and validating tag input, including checks for maximum allowed
   * tags per product, uniqueness, forbidden character set, and length
   * limitations as defined in the system. Duplicates are prevented at both
   * database and logic layers.
   *
   * Only users authorized as the seller of the product or as administrators can
   * add tags. The new tag is stored in shopping_mall_product_tags, and if
   * successful, the created tag with metadata is returned for further business
   * processing (AI enrichment, search, campaign eligibility).
   *
   * Validation enforces product existence, permission, and tag constraints;
   * errors are handled for duplicate attempts, permission denials, or malformed
   * input. System logs and audits track all tag creation for compliance and
   * analytics.
   *
   * @param connection
   * @param productId Unique identifier (UUID) of the product to which the tag
   *   is being added.
   * @param body Creation payload defining the tag value and related business
   *   metadata for the product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductTag.ICreate,
  ): Promise<IShoppingMallProductTag> {
    try {
      return await postShoppingMallSellerProductsProductIdTags({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate all tags associated with a specific product
   * (shopping_mall_product_tags).
   *
   * Retrieve a filtered and paginated list of tags attached to a particular
   * product in the catalog. This operation supports advanced searching by tag
   * value, filtering by tag characteristics, and sorting for administrative or
   * UX needs.
   *
   * The operation is secured, allowing only users with at least seller
   * privileges to access tags for their own products or administrators to
   * access any product's tag list for moderation and SEO.
   *
   * It utilizes the shopping_mall_product_tags schema, joining to
   * shopping_mall_products for product context and providing tag-level metadata
   * to support downstream recommendation, personalization, or campaign
   * eligibility logic. Pagination, search, and sorting improve performance and
   * scalability for products with many tags.
   *
   * Validation ensures productId refers to a real and accessible product and
   * that only authorized actors can query or audit tag relationships. Error
   * handling covers invalid productId, permission denials, and query parameter
   * issues.
   *
   * @param connection
   * @param productId Unique identifier (UUID) of the product whose tags are to
   *   be retrieved.
   * @param body Search, filter, sort, and pagination options for product tag
   *   listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductTag.IRequest,
  ): Promise<IPageIShoppingMallProductTag.ISummary> {
    try {
      return await patchShoppingMallSellerProductsProductIdTags({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a detailed view of a single tag for a given product
   * (shopping_mall_product_tags).
   *
   * Fetch all metadata about a single tag assigned to a product, ensuring the
   * tagId reference is valid and belongs to the specified productId context.
   * This is used for administrative, seller, or automated review workflows,
   * supporting tasks like tag editing, compliance checks, or displaying full
   * tag info to backend systems.
   *
   * Security controls enforce that only sellers of the product or authorized
   * admins can view the tag details. The operation is implemented over the
   * shopping_mall_product_tags table, joining as needed for context.
   *
   * Validation ensures both productId and tagId are present, correspond to real
   * entities, and tagId is linked to the correct product. Errors are handled
   * for missing or mismatched tag-product relationships, permission issues, or
   * malformed identifiers.
   *
   * @param connection
   * @param productId Unique identifier (UUID) of the product being referenced.
   * @param tagId Unique identifier (UUID) of the tag linked to the product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":tagId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductTag> {
    try {
      return await getShoppingMallSellerProductsProductIdTagsTagId({
        seller,
        productId,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing tag on a product (shopping_mall_product_tags) by tagId.
   *
   * Edit the tag value or its business-related metadata for a given tag
   * attached to a product. This operation allows qualified sellers (owners) or
   * admin users to update tags for purposes such as correcting typos,
   * normalizing naming, supporting new campaigns, or moderating user-generated
   * tagging results. All updates are strictly validated for system business
   * rules: tag uniqueness within the product, name/character constraints, and
   * association integrity.
   *
   * Upon successful update, the operation returns the full, updated tag record
   * for audit and downstream system usage. Errors are handled for missing
   * product/tag references, permission issues, or tag input violations.
   *
   * Comprehensive audit logs record every change to ensure compliance and
   * enable rollback or traceability as needed for catalog, AI, or regulatory
   * needs.
   *
   * @param connection
   * @param productId Unique identifier (UUID) of the product whose tag is to be
   *   updated.
   * @param tagId Unique identifier (UUID) of the tag belonging to the product
   *   requiring update.
   * @param body Update payload with the new tag value and/or business metadata
   *   to apply to the product tag.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":tagId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductTag.IUpdate,
  ): Promise<IShoppingMallProductTag> {
    try {
      return await putShoppingMallSellerProductsProductIdTagsTagId({
        seller,
        productId,
        tagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a tag from a product (shopping_mall_product_tags).
   *
   * This operation allows an authenticated seller or admin to permanently
   * delete a tag from a target product. Calling this endpoint removes the tag
   * entry linked to the specified product and tagId in the
   * shopping_mall_product_tags table. The tag cannot be recovered once deleted,
   * and all downstream search, recommendation, and AI personalization logic
   * will reflect this change after the operation.
   *
   * Authorization is required for either the seller who owns the product or an
   * admin role with sufficient privileges; permission is checked against both
   * the product and tag relationship. Attempting to delete a tag that is not
   * associated with the product will result in an appropriate error response.
   *
   * This operation connects tightly to the system's tag-based search and
   * recommendation modules; removing a tag may impact search rankings, product
   * discoverability, and AI-driven personalization. All deletion events are
   * logged for audit and compliance, and only soft-deleted products may have
   * tags removed if their tag records still exist. Use with caution, as
   * deletion is irreversible.
   *
   * @param connection
   * @param productId Unique identifier of the product whose tag is being
   *   deleted.
   * @param tagId Unique identifier of the tag to delete from the product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":tagId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductIdTagsTagId({
        seller,
        productId,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
