import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallSellerProductsProductIdContent } from "../../../../../providers/getShoppingMallSellerProductsProductIdContent";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerProductsProductIdContent } from "../../../../../providers/putShoppingMallSellerProductsProductIdContent";

import { IShoppingMallProductContent } from "../../../../../api/structures/IShoppingMallProductContent";

@Controller("/shoppingMall/seller/products/:productId/content")
export class ShoppingmallSellerProductsContentController {
  /**
   * Retrieve product content for a specific product
   * (shopping_mall_product_content).
   *
   * This operation enables sellers and administrators to retrieve rich content
   * data for any product they own or manage. Information such as product
   * description (in Markdown/HTML), return policy, warranty details, and the
   * content locale are all returned as present in the
   * shopping_mall_product_content table. This is used to populate product edit
   * screens, preview product pages, or synchronize product information with
   * external platforms.
   *
   * Access checks enforce that the requester is the owner of the product
   * (seller role) or an authorized admin. The operation returns errors in cases
   * of missing product or content, or if the requester lacks sufficient
   * permission. All access to product content is logged for legal, compliance,
   * or audit purposes, and the endpoint does not allow modifications—purely
   * read-only access.
   *
   * The operation supports localization: the product content may be localized
   * to support multi-language catalogs. It outputs all configured content for
   * the product, supporting compliance with privacy, legal display, and
   * business QA workflows.
   *
   * @param connection
   * @param productId Unique identifier of the product to fetch content for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductContent> {
    try {
      return await getShoppingMallSellerProductsProductIdContent({
        seller,
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update rich content and policies for an existing shoppingMall product by
   * productId.
   *
   * Update the rich content of a shopping mall product, maintaining full
   * auditability and support for multilingual data, structured product
   * descriptions, return and warranty policy text. This operation enforces
   * permission checks, ensuring that only the product owner (seller) or
   * platform administrators can alter product content. It references the
   * product and content by their unique identifier (productId) as per the
   * Prisma schema, updating only allowable fields—content_markdown,
   * return_policy, warranty_policy, and locale.
   *
   * All changes result in snapshotting the prior state for audit and
   * compliance, preserving immutable historical versions as mandated by the
   * platform's evidence management requirements. Security logic ensures
   * rejection of updates for unauthorized users or for products in
   * finalized/immutable states. Validation includes Markdown/HTML correctness,
   * legal compliance for policy fields, and maximum length rules as defined in
   * the database schema. Any invalid update, role violation, or update to a
   * deleted/discontinued product is denied with an appropriate error code and
   * reason in the response.
   *
   * Related APIs include creation of product content when registering a new
   * product and retrieval of product content for read operations. This endpoint
   * purely performs update within the bounds of the defined product content
   * schema.
   *
   * @param connection
   * @param productId Unique identifier of the product being updated.
   * @param body Fields to update product's content (rich description,
   *   return/warranty policy, and locale) as per schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductContent.IUpdate,
  ): Promise<IShoppingMallProductContent> {
    try {
      return await putShoppingMallSellerProductsProductIdContent({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
