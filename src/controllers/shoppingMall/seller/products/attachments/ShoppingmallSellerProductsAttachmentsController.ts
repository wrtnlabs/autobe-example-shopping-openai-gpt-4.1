import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerProductsProductIdAttachments } from "../../../../../providers/postShoppingMallSellerProductsProductIdAttachments";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patchShoppingMallSellerProductsProductIdAttachments } from "../../../../../providers/patchShoppingMallSellerProductsProductIdAttachments";
import { getShoppingMallSellerProductsProductIdAttachmentsAttachmentLinkId } from "../../../../../providers/getShoppingMallSellerProductsProductIdAttachmentsAttachmentLinkId";
import { deleteShoppingMallSellerProductsProductIdAttachmentsAttachmentLinkId } from "../../../../../providers/deleteShoppingMallSellerProductsProductIdAttachmentsAttachmentLinkId";

import { IShoppingMallProductAttachmentLink } from "../../../../../api/structures/IShoppingMallProductAttachmentLink";
import { IPageIShoppingMallProductAttachmentLink } from "../../../../../api/structures/IPageIShoppingMallProductAttachmentLink";

@Controller("/shoppingMall/seller/products/:productId/attachments")
export class ShoppingmallSellerProductsAttachmentsController {
  /**
   * Add a new attachment link (image, gallery, or file) to a shoppingMall
   * product by productId.
   *
   * Create a new association between an existing file attachment and a product.
   * The endpoint requires the caller to specify the productId, attachmentId,
   * usage context (purpose), and position/order. The underlying Prisma schema
   * ensures referential integrity to both product and attachment and enforces
   * uniqueness for each attachment-per-purpose combination.
   *
   * Permission logic ensures that only the product's seller or administrators
   * may add attachment links to a product. The request body is validated
   * against the IShoppingMallProductAttachmentLink.ICreate DTO, including
   * checks that the product exists, the attachment is valid, and that no
   * conflicting links for the same purpose exist for the target product. Upon
   * success, the response contains the newly created attachment link metadata,
   * referencing both the product and the attachment details.
   *
   * If any referenced entity does not exist, or permission is insufficient, a
   * comprehensive error message is returned. This does NOT upload the file
   * itself; it only establishes linkage between product and an already
   * registered attachment file.
   *
   * @param connection
   * @param productId Unique identifier for the product to which the attachment
   *   will be linked.
   * @param body Attachment link creation data for associating existing
   *   attachments to a product as gallery, spec sheet, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductAttachmentLink.ICreate,
  ): Promise<IShoppingMallProductAttachmentLink> {
    try {
      return await postShoppingMallSellerProductsProductIdAttachments({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List file attachment links for a shoppingMall product by productId with
   * pagination and search.
   *
   * Returns a structured list of all file attachment links belonging to a
   * product identified by productId. This endpoint allows querying, searching
   * by usage context (purpose), sorting (e.g., by display order or created_at),
   * and supporting pagination parameters (such as page size, offset). Returned
   * data includes all relevant attachment metadata, position/order for gallery
   * usage, and URI for secure access.
   *
   * Security checks restrict access to attachments on unpublished or restricted
   * products—authorization roles (seller/admin) are validated against the
   * product's seller ownership or platform administration. Read-only
   * operation—does not allow modification or upload of new files.
   *
   * The results conform to the IPageIShoppingMallProductAttachmentLink summary
   * DTO, ensuring compatibility with standardized response containers. Error
   * responses are returned when the product is not found, access is denied, or
   * query parameters are invalid.
   *
   * @param connection
   * @param productId Unique identifier of the product whose attachments are to
   *   be listed.
   * @param body Query and pagination options for listing product attachments
   *   (filter by purpose, pagination, sort, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductAttachmentLink.IRequest,
  ): Promise<IPageIShoppingMallProductAttachmentLink.ISummary> {
    try {
      return await patchShoppingMallSellerProductsProductIdAttachments({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get metadata for a specific product attachment link for a shoppingMall
   * product by productId and attachmentLinkId.
   *
   * Retrieve the detailed metadata for a specific product attachment link,
   * including file purpose (e.g., main_image, gallery), order, relation to the
   * product, and secure file reference. This endpoint enforces permission
   * checks, allowing only the product's seller or administrators to access this
   * information. The Prisma schema ensures that each attachment link record is
   * associated with a product and contains metadata for the file, including
   * reference to the underlying attachment.
   *
   * Security checks confirm the existence of both the product and attachment
   * link, enforcing error returns for unauthorized access, non-existent IDs, or
   * attempts to access attachments on deleted/discontinued products. Related
   * endpoints allow batch listing or modification of attachment links per
   * product. No file content is returned—this endpoint is purely for metadata
   * and linkage info.
   *
   * If the specified attachment link does not exist, an appropriate error
   * message and code are returned. Use this operation to display detailed info
   * in admin/product management screens or prepare for file delete/update
   * actions.
   *
   * @param connection
   * @param productId Unique identifier of the product whose attachment is being
   *   accessed.
   * @param attachmentLinkId Unique identifier of the attachment link to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":attachmentLinkId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("attachmentLinkId")
    attachmentLinkId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductAttachmentLink> {
    try {
      return await getShoppingMallSellerProductsProductIdAttachmentsAttachmentLinkId(
        {
          seller,
          productId,
          attachmentLinkId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific product-attachment link for a product
   * (shopping_mall_product_attachment_links table).
   *
   * This endpoint provides the ability to sever the association between a
   * specific product and an attachment by deleting a row from the
   * shopping_mall_product_attachment_links table. Consistent with business
   * rules, this deletion is limited to authorized actors: product owners
   * (sellers) of the relevant product or administrators with suitable
   * privileges.
   *
   * Security and audit are critical: each action is logged for compliance, and
   * attempts by unauthorized actors are denied with actionable error messages.
   * The operation does not affect the underlying attachment file, nor does it
   * alter or remove the product entity—only the join link between them is
   * targeted. Requests must supply both a valid productId and an
   * attachmentLinkId as path parameters, both in UUID format.
   *
   * There is no soft-delete for links in the schema, so this operation performs
   * a permanent removal. Since the action potentially affects evidence
   * preservation, downstream Audit and Snapshot workflows must be considered
   * for compliance. Related operations include adding new product/attachment
   * links or listing current attachments for a product, which allow users to
   * manage media associations effectively. In case of database integrity or
   * constraint errors, appropriate error messages are surfaced, and no partial
   * deletions are performed.
   *
   * @param connection
   * @param productId Unique identifier of the product from which to remove the
   *   attachment link.
   * @param attachmentLinkId Unique identifier of the attachment link to be
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":attachmentLinkId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("attachmentLinkId")
    attachmentLinkId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerProductsProductIdAttachmentsAttachmentLinkId(
        {
          seller,
          productId,
          attachmentLinkId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
