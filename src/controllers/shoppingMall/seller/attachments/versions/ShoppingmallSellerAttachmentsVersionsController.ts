import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerAttachmentsAttachmentIdVersions } from "../../../../../providers/postShoppingMallSellerAttachmentsAttachmentIdVersions";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { putShoppingMallSellerAttachmentsAttachmentIdVersionsVersionId } from "../../../../../providers/putShoppingMallSellerAttachmentsAttachmentIdVersionsVersionId";

import { IShoppingMallAttachmentVersion } from "../../../../../api/structures/IShoppingMallAttachmentVersion";

@Controller("/shoppingMall/seller/attachments/:attachmentId/versions")
export class ShoppingmallSellerAttachmentsVersionsController {
  /**
   * Create a new version for a given attachment
   * (shopping_mall_attachment_versions table).
   *
   * Create a new file version for an existing attachment by supplying all
   * relevant metadata and the server URI for the uploaded file content. This
   * operation must be used when a user (customer, seller, or admin) uploads a
   * new version of an existing file for business entities (products, reviews,
   * orders, posts, etc.).
   *
   * Permission checks are enforced to ensure only authorized users can update
   * the target attachment. The system validates that the supplied URI points to
   * a compliant file (size, type, structure) and updates are only possible for
   * attachments where the current user has replacement privileges.
   *
   * All previous versions for the attachment are preserved and retrievable via
   * audit APIs. Every new version increments the version number sequentially
   * and forms a time-stamped chain of versions for evidence and regulatory
   * compliance. If compliance, retention, or GDPR rules require blocking
   * version updates, a detailed error is returned explaining the constraint.
   *
   * Related endpoints include listing all versions of an attachment, retrieving
   * a single version, and replacing file versions for attachments used in
   * shopping mall business entities. This operation cannot be used if the
   * parent attachment is soft/hard deleted; such requests return a business
   * logic error. On success, it returns the full attachment version metadata.
   *
   * @param connection
   * @param attachmentId Target attachment's unique identifier (UUID).
   * @param body Metadata required to create a new attachment version for an
   *   existing attachment. Includes server file URI, version info, and audit
   *   metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAttachmentVersion.ICreate,
  ): Promise<IShoppingMallAttachmentVersion> {
    try {
      return await postShoppingMallSellerAttachmentsAttachmentIdVersions({
        seller,
        attachmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata for an existing attachment version
   * (shopping_mall_attachment_versions table).
   *
   * Update mutable business metadata for a specific version of an attachment
   * file, such as filename, description, or permission settings. This action is
   * only available for users with edit rights (admin, original uploader, or
   * authorized party) and for attachment versions that are neither deleted nor
   * locked for compliance reasons.
   *
   * Persistence of updates is permanent: the modification is logged, and past
   * versions are recoverable via snapshot and audit subsystems. If any business
   * constraint blocks the update (e.g., immutable fields, soft/hard deleted
   * file, policy violation), the system returns an error explaining why the
   * operation was denied.
   *
   * This endpoint may be used in conjunction with version listing, retrieval,
   * or replacement APIs as part of a broader attachment/file management
   * workflow.
   *
   * @param connection
   * @param attachmentId UUID of the parent attachment.
   * @param versionId UUID of the version of the attachment file to update.
   * @param body Update payload for the attachment version, only allowing fields
   *   that are strictly mutable per compliance.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":versionId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedParam("versionId")
    versionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAttachmentVersion.IUpdate,
  ): Promise<IShoppingMallAttachmentVersion> {
    try {
      return await putShoppingMallSellerAttachmentsAttachmentIdVersionsVersionId(
        {
          seller,
          attachmentId,
          versionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
