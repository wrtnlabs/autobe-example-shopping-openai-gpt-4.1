import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallSellerReviews } from "../../../../providers/patchShoppingMallSellerReviews";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { getShoppingMallSellerReviewsReviewId } from "../../../../providers/getShoppingMallSellerReviewsReviewId";

import { IPageIShoppingMallReview } from "../../../../api/structures/IPageIShoppingMallReview";
import { IShoppingMallReview } from "../../../../api/structures/IShoppingMallReview";

@Controller("/shoppingMall/seller/reviews")
export class ShoppingmallSellerReviewsController {
  /**
   * Retrieve a filtered, paginated list of product review summaries
   * (shopping_mall_reviews).
   *
   * Use this endpoint to search and retrieve a paginated collection of product
   * review summaries. The operation leverages the shopping_mall_reviews table,
   * referencing all available review metadata, including associations to
   * products, orders, reviewers (customer or seller), and moderation status
   * fields.
   *
   * This endpoint is optimized for advanced filteringâ€”clients can search or
   * sort review data by product, rating, moderation status, creation date,
   * reviewer, or associated order. Full pagination support allows efficient
   * data loading for dashboards, listing pages, and analytics.
   *
   * Security: Customers can only access their own reviews. Sellers access
   * reviews on their listed products. Admins may access all reviews system-wide
   * for moderation and reporting purposes.
   *
   * The response includes only summary details (not full review content or
   * thread), suitable for listing views or analytics screens. Related APIs
   * include review detail retrieval (GET /reviews/{reviewId}), creation, and
   * update endpoints.
   *
   * @param connection
   * @param body Search criteria, filters, and pagination parameters for
   *   retrieving product review summaries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallReview.IRequest,
  ): Promise<IPageIShoppingMallReview.ISummary> {
    try {
      return await patchShoppingMallSellerReviews({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific product review
   * (shopping_mall_reviews).
   *
   * This endpoint is designed to fetch complete details for a single product
   * review, based on its unique reviewId. The review is identified by its
   * shopping_mall_reviews.id, which is a UUID.
   *
   * Returned details include all core fields of the review: product
   * association, order reference, reviewer (customer or seller), rating,
   * moderation status, timestamps, and any attached content or meta. Associated
   * fields such as notifications, moderation notes, and linked thread
   * references are also included in the response as available.
   *
   * Access control ensures that customers may only view their own reviews,
   * sellers may access reviews concerning their products, and administrators
   * may view any review for moderation purposes. If the review does not exist,
   * is deleted, or access is unauthorized, an appropriate error is returned.
   *
   * Related endpoints include list/search, creation, and update APIs for
   * product reviews.
   *
   * @param connection
   * @param reviewId Unique identifier for the target product review.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reviewId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallReview> {
    try {
      return await getShoppingMallSellerReviewsReviewId({
        seller,
        reviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
