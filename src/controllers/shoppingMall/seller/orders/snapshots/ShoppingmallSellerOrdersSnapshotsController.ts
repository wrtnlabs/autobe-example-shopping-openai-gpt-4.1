import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallSellerOrdersOrderIdSnapshots } from "../../../../../providers/patchShoppingMallSellerOrdersOrderIdSnapshots";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";

import { IPageIShoppingMallOrderSnapshot } from "../../../../../api/structures/IPageIShoppingMallOrderSnapshot";
import { IShoppingMallOrderSnapshot } from "../../../../../api/structures/IShoppingMallOrderSnapshot";

@Controller("/shoppingMall/seller/orders/:orderId/snapshots")
export class ShoppingmallSellerOrdersSnapshotsController {
  /**
   * List paginated order snapshot history for a specific order
   * (shopping_mall_order_snapshots).
   *
   * Use this endpoint to retrieve a filtered and paginated list of all
   * historical state snapshots for a specific order. Snapshots are created on
   * each key state transition for shopping_mall_orders, preserving the complete
   * serialized order object for audit, compliance, and evidence purposes.
   *
   * Request body supports advanced search, pagination, and sorting
   * capabilities, using IShoppingMallOrderSnapshot.IRequest to specify filters
   * such as snapshot event time, snapshot_reason, or actor. The response is a
   * paginated list of snapshots (IPageIShoppingMallOrderSnapshot), facilitating
   * legal, audit, and business investigations.
   *
   * Authorization checks allow access for order owners (customers), relevant
   * sellers, and platform admins. Sensitive details are filtered according to
   * role permissions, supporting regional compliance regulations.
   *
   * @param connection
   * @param orderId Identifier of the order to retrieve snapshots for (UUID)
   * @param body Filtering, sorting, and pagination parameters for order
   *   snapshot retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderSnapshot.IRequest,
  ): Promise<IPageIShoppingMallOrderSnapshot> {
    try {
      return await patchShoppingMallSellerOrdersOrderIdSnapshots({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
