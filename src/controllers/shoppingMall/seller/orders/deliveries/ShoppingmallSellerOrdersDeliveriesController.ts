import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallSellerOrdersOrderIdDeliveries } from "../../../../../providers/patchShoppingMallSellerOrdersOrderIdDeliveries";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { getShoppingMallSellerOrdersOrderIdDeliveriesDeliveryId } from "../../../../../providers/getShoppingMallSellerOrdersOrderIdDeliveriesDeliveryId";

import { IPageIShoppingMallDelivery } from "../../../../../api/structures/IPageIShoppingMallDelivery";
import { IShoppingMallDelivery } from "../../../../../api/structures/IShoppingMallDelivery";

@Controller("/shoppingMall/seller/orders/:orderId/deliveries")
export class ShoppingmallSellerOrdersDeliveriesController {
  /**
   * Search and paginate deliveries associated with an order
   * (shopping_mall_deliveries table).
   *
   * Search and paginate deliveries (delivery windows/address records) for a
   * specific order. This is required for tracking multi-shipment orders, split
   * deliveries, and for enabling users to monitor overall delivery status on
   * complex orders.
   *
   * Advanced search filters—by status, shipmentId, recipient name, or time
   * period—are supported. Pagination allows efficient retrieval even for orders
   * with many delivery records (e.g., large B2B orders or split/partial
   * shipments). Security filters are applied: customers can view their own
   * orders, sellers can access deliveries related to their own goods, and
   * admins have global access.
   *
   * Returned fields include recipient information (with privacy controls),
   * delivery status, timing info, snapshot address as at delivery time,
   * shipment references, and any delivery messages (special instructions). The
   * operation is linked to after-sales workflows (returns/exchanges initiated
   * from delivered items) and audit/evidence modules for compliance. All search
   * parameters and response structures align with the shopping_mall_deliveries
   * schema.
   *
   * Related APIs include list/search of shipments for an order and detailed
   * delivery view (GET /orders/{orderId}/deliveries/{deliveryId}). Errors
   * include insufficient permission, non-existent order, or invalid filter
   * parameters.
   *
   * @param connection
   * @param orderId Unique identifier of the order for which deliveries are
   *   queried.
   * @param body Search filters, sorting, and pagination parameters for querying
   *   deliveries within an order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallDelivery.IRequest,
  ): Promise<IPageIShoppingMallDelivery.ISummary> {
    try {
      return await patchShoppingMallSellerOrdersOrderIdDeliveries({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a delivery for a specific order and deliveryId
   * (shopping_mall_deliveries table).
   *
   * Retrieve full details for a single delivery associated with an order. This
   * allows users to view address snapshot, recipient info, timing info,
   * delivery status, and evidence of the delivery event.
   *
   * Security is enforced to ensure only permitted actors may access delivery
   * data: customers are restricted to their own orders, sellers to their own
   * items, admins are unrestricted. The endpoint is essential for end-user
   * delivery tracking, support workflows (post-delivery disputes, after-sales
   * actions), and for building comprehensive audit trails.
   *
   * The response includes all shopping_mall_deliveries columns, including
   * address, recipient, delivery status, shipment associations, delivery
   * messages, confirmation state, and snapshot linkage for full evidentiary
   * support. Related APIs are the delivery list/search for an order, shipment
   * batching endpoints, and after-sales service initiation operations
   * (returns/exchanges). Error handling covers not found (invalid ID),
   * permission errors, and order-delivery mismatch scenarios. The API supports
   * internationalization and privacy controls for address and contact fields.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order.
   * @param deliveryId Unique identifier of the delivery record attached to the
   *   order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deliveryId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallDelivery> {
    try {
      return await getShoppingMallSellerOrdersOrderIdDeliveriesDeliveryId({
        seller,
        orderId,
        deliveryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
