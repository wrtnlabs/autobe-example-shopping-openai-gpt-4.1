import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerOrdersOrderIdItems } from "../../../../../providers/postShoppingMallSellerOrdersOrderIdItems";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patchShoppingMallSellerOrdersOrderIdItems } from "../../../../../providers/patchShoppingMallSellerOrdersOrderIdItems";
import { getShoppingMallSellerOrdersOrderIdItemsItemId } from "../../../../../providers/getShoppingMallSellerOrdersOrderIdItemsItemId";
import { putShoppingMallSellerOrdersOrderIdItemsItemId } from "../../../../../providers/putShoppingMallSellerOrdersOrderIdItemsItemId";
import { deleteShoppingMallSellerOrdersOrderIdItemsItemId } from "../../../../../providers/deleteShoppingMallSellerOrdersOrderIdItemsItemId";

import { IShoppingMallOrderItem } from "../../../../../api/structures/IShoppingMallOrderItem";
import { IPageIShoppingMallOrderItem } from "../../../../../api/structures/IPageIShoppingMallOrderItem";

@Controller("/shoppingMall/seller/orders/:orderId/items")
export class ShoppingmallSellerOrdersItemsController {
  /**
   * Add a new item to an existing shopping mall order
   * (shopping_mall_order_items).
   *
   * Use this endpoint to append a new item to an existing order before the
   * order is finalized and processed for fulfillment. It requires the orderId
   * as a path parameter and expects a request body conforming to
   * IShoppingMallOrderItem.ICreate, defining the product, optional variant,
   * quantity, pricing, and discount snapshot information.
   *
   * The operation enforces business logic to prevent addition once an order has
   * reached a non-editable state (e.g., after shipping/fulfillment). It
   * verifies that the selected product and variant are valid for the specified
   * order context (e.g., available in the order's channel, not discontinued,
   * within stock constraints) before item creation. The order and its customer,
   * seller, and channel context are cross-checked.
   *
   * Authorization checks ensure that only users with the correct relationship
   * to the order (customer who placed it, seller fulfilling it, or admin) may
   * add items. Security controls, order status validation, and audit trail
   * integration are implemented as per shopping_mall_orders and
   * shopping_mall_order_items table comments. If successful, returns the newly
   * created order item.
   *
   * Relevant errors include status transition violations, stock or eligibility
   * failures, or access control denial.
   *
   * @param connection
   * @param orderId Target order's unique identifier (UUID)
   * @param body Details of the order item to create, including product,
   *   quantity, variant, price, and discount snapshot
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.ICreate,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await postShoppingMallSellerOrdersOrderIdItems({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List all items for a specific shopping mall order with filtering,
   * pagination, and sorting.
   *
   * This API returns a paginated, filterable list of order items for a given
   * order, identified by its order ID. It is used to provide detailed
   * breakdowns of ordered products, their statuses, quantities, pricing, and
   * discount snapshot details as defined in the shopping_mall_order_items
   * schema. Each order item is linked to a product, variant, and fulfillment
   * logic.
   *
   * The request body supports complex filtering (e.g., by status, product ID),
   * including pagination and sorting of results for user interfaces.
   * Permissions are enforced so that only authorized users (order owners or
   * privileged staff) can access item details for a given order.
   *
   * All fields in the response follow the schema comments: unit_price,
   * final_price, discount_snapshot, and status. The operation does not expose
   * deleted or inaccessible items and is optimized for audit/compliance
   * traceability. Error handling ensures that requests to non-existent or
   * restricted orders return clear feedback.
   *
   * @param connection
   * @param orderId The order ID to retrieve items for. Must be a valid UUID of
   *   an existing order.
   * @param body Filtering, pagination, and sort criteria for retrieving order
   *   items.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.IRequest,
  ): Promise<IPageIShoppingMallOrderItem> {
    try {
      return await patchShoppingMallSellerOrdersOrderIdItems({
        seller,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific shopping mall order item by
   * orderId/itemId.
   *
   * This endpoint fetches detailed information about a specific order item
   * belonging to a particular order. Based on the shopping_mall_order_items
   * schema, the operation delivers all key business fields (product linkage,
   * quantity, price, discount snapshot, status, audit fields, etc.) and relates
   * them with the parent order, seller, and product as required for business
   * logic and compliance.
   *
   * Permission and access-level checks ensure that only users who own the order
   * or staff with the appropriate role can see item details. If the specified
   * order or item does not exist or is not accessible due to status/deletion, a
   * relevant error is returned.
   *
   * The response DTO matches the schema, including unit/discounted price,
   * quantity, product and variant references, and status. This operation is
   * critical for order management workflows and after-sales scenarios.
   *
   * @param connection
   * @param orderId The order ID to which the order item belongs. Must be a
   *   valid UUID.
   * @param itemId The unique ID of the order item to retrieve. Must be a valid
   *   UUID of an item in shopping_mall_order_items.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":itemId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await getShoppingMallSellerOrdersOrderIdItemsItemId({
        seller,
        orderId,
        itemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing shopping mall order item by ID
   * (shopping_mall_order_items).
   *
   * This endpoint is used to update an existing order item before it has been
   * processed for fulfillment. Can be used to change the product variant,
   * adjust quantity, update pricing or discount snapshots, or other modifiable
   * attributes defined in IShoppingMallOrderItem.IUpdate. The orderId and
   * itemId path parameters uniquely identify the order and the specific order
   * item to update.
   *
   * Business logic checks verify that the item is eligible for modification
   * (status allows updating, not yet shipped/fulfilled/cancelled) and that
   * changes conform to quantity, pricing, and inventory constraints. Mutation
   * triggers a snapshot/audit entry for compliance and traceability, per
   * shopping_mall_order_items and related snapshot tables.
   *
   * Authorization ensures only permitted users—order owner (customer), involved
   * seller, or admin—may update. Related workflows ensure inventory adjustment
   * and downstream delivery/payment status changes follow business rules.
   * Returns the updated order item on success.
   *
   * @param connection
   * @param orderId Unique identifier for the target order (UUID)
   * @param itemId Unique identifier for the order item to update (UUID)
   * @param body Order item update fields: quantity, variant, price, discounts,
   *   etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":itemId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallOrderItem.IUpdate,
  ): Promise<IShoppingMallOrderItem> {
    try {
      return await putShoppingMallSellerOrdersOrderIdItemsItemId({
        seller,
        orderId,
        itemId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove an order item from an order by ID (shopping_mall_order_items).
   *
   * Removes an order item by its unique itemId from the specified order, if
   * business and workflow rules allow (e.g., order not yet fulfilled or in
   * shipping). This actions a hard delete—data is completely removed from the
   * shopping_mall_order_items table, per schema, and triggers audit
   * trail/logging for tracking and compliance.
   *
   * The endpoint requires both orderId and itemId as path parameters. It
   * validates item eligibility for deletion (e.g., item is not already
   * delivered, paid, or processed) and enforces access control (allowed for
   * order owner, seller, or admins). Improper attempts (on shipped, paid, or
   * finalized items) result in error.
   *
   * No request or response body is needed. Upon successful deletion, deletion
   * event is recorded in audit log per compliance rules described in the
   * shopping_mall_order_items and related tables.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order (UUID)
   * @param itemId Unique identifier of the order item to be removed (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":itemId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteShoppingMallSellerOrdersOrderIdItemsItemId({
        seller,
        orderId,
        itemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
