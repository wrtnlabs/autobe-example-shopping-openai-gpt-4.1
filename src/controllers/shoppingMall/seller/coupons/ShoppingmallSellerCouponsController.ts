import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postShoppingMallSellerCoupons } from "../../../../providers/postShoppingMallSellerCoupons";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { patchShoppingMallSellerCoupons } from "../../../../providers/patchShoppingMallSellerCoupons";
import { getShoppingMallSellerCouponsCouponId } from "../../../../providers/getShoppingMallSellerCouponsCouponId";
import { putShoppingMallSellerCouponsCouponId } from "../../../../providers/putShoppingMallSellerCouponsCouponId";

import { IShoppingMallCoupon } from "../../../../api/structures/IShoppingMallCoupon";
import { IPageIShoppingMallCoupon } from "../../../../api/structures/IPageIShoppingMallCoupon";

@Controller("/shoppingMall/seller/coupons")
export class ShoppingmallSellerCouponsController {
  /**
   * Create a new coupon definition (Post, shopping_mall_coupons).
   *
   * Insert a new coupon into the shopping mall's coupon system. The request
   * body follows the IShoppingMallCoupon.ICreate DTO matching the
   * shopping_mall_coupons table structure, including all policy configuration,
   * targeting, stackable/exclusive logic, usage caps, validity period, and
   * descriptive meta fields for campaign or individual usage.
   *
   * Business rules enforce unique code, proper stack/exclusive flags, and all
   * validation on required fields and discount configuration. The operation is
   * available only to admin or seller accounts with appropriate privileges.
   * Upon success, the API returns the complete coupon resource as created.
   * Errors are returned for invalid input, code collisions, or insufficient
   * permissions. An audit snapshot is created for legal/compliance
   * traceability.
   *
   * @param connection
   * @param body Information for new coupon creation, including code, discount
   *   properties, targeting, stack/exclusivity, issuance limits, and validity
   *   period.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallCoupon.ICreate,
  ): Promise<IShoppingMallCoupon> {
    try {
      return await postShoppingMallSellerCoupons({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and filter shopping mall coupons with advanced criteria (Patch,
   * shopping_mall_coupons).
   *
   * Retrieve a paginated and filterable list of coupons defined in the shopping
   * mall system. This operation references the shopping_mall_coupons table,
   * supporting selection by code, type (public, private, one-time), discount
   * type, stackability, exclusivity, min/max order amounts, status (active,
   * expired, draft), and issuance/usage statistics.
   *
   * Intended for administrative and seller roles managing promotions,
   * targeting, audit, or campaign effectiveness. Highly granular search enables
   * easy analysis and monitoring of promotional campaigns across all or
   * segmented business contexts.
   *
   * Security requires the requesting user to have admin or seller privileges in
   * the platform. Pagination and sorting supported for efficient UI and
   * analytics display. Response delivers a page encapsulating summary data for
   * matching coupons, including key identifiers and basic promotional
   * characteristics. Error handling covers invalid filter parameters, overbroad
   * searches, and permission issues.
   *
   * @param connection
   * @param body Advanced search/request parameters for coupon retrieval,
   *   including filters, pagination, and sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallCoupon.IRequest,
  ): Promise<IPageIShoppingMallCoupon.ISummary> {
    try {
      return await patchShoppingMallSellerCoupons({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a single coupon by ID (Get,
   * shopping_mall_coupons).
   *
   * Return the full set of attributes and configuration details for a single
   * coupon in the shopping mall backend. References the shopping_mall_coupons
   * table, allowing authorized admin or seller roles to inspect code, title,
   * description, coupon type, discount logic, eligibility, stack/exclusive
   * flags, usage and issuance caps, dates, business status, targeting, and
   * analytics fields.
   *
   * Security requires the user to be an admin or seller with appropriate
   * permissions. Used for campaign effectiveness review, business rule
   * validation, or auditing promotional logic. Returns rich detail, supporting
   * both operational and compliance needs.
   *
   * If the couponId does not exist, or access is not permitted for the current
   * user/role, an error indicating 'not found' or 'forbidden' will be
   * returned.
   *
   * @param connection
   * @param couponId Unique identifier of the coupon to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":couponId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallCoupon> {
    try {
      return await getShoppingMallSellerCouponsCouponId({
        seller,
        couponId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing coupon definition by ID (Put, shopping_mall_coupons).
   *
   * Modify a coupon resource by its unique ID, providing all fields allowed for
   * update on the shopping_mall_coupons table according to business and
   * campaign rules. The IShoppingMallCoupon.IUpdate request body provides the
   * full configuration scope, including stackable/exclusive, targeting,
   * discount logic, usage/issuance settings, status, and descriptive/campaign
   * meta.
   *
   * Intended exclusively for admin or seller roles with sufficient privileges.
   * Any changes are validated for correctness and business logic adherence,
   * including uniqueness for code and proper numerical bounds. Operation
   * ensures audit record and compliance chain for all mutations.
   *
   * If the couponId does not match any existing record, a not found error is
   * returned. Permission denial triggers forbidden errors. Validation failures
   * (e.g., invalid stack/exclusive conflict, illegal discount type,
   * out-of-bound parameters) result in error responses with field-level
   * feedback. On success, returns the fully updated coupon resource.
   *
   * @param connection
   * @param couponId ID of the coupon to update.
   * @param body Update fields for target coupon definition (discount policy,
   *   duration, stack/exclusive, campaign meta, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":couponId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallCoupon.IUpdate,
  ): Promise<IShoppingMallCoupon> {
    try {
      return await putShoppingMallSellerCouponsCouponId({
        seller,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
