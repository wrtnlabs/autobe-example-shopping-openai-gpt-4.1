import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallProducts } from "../../../providers/patchShoppingMallProducts";
import { getShoppingMallProductsProductId } from "../../../providers/getShoppingMallProductsProductId";

import { IPageIShoppingMallProduct } from "../../../api/structures/IPageIShoppingMallProduct";
import { IShoppingMallProduct } from "../../../api/structures/IShoppingMallProduct";

@Controller("/shoppingMall/products")
export class ShoppingmallProductsController {
  /**
   * Search and retrieve products from the shopping mall catalog with advanced
   * filtering, pagination, and sorting. (shopping_mall_products).
   *
   * Retrieve a filtered and paginated list of products from the system catalog.
   * This operation allows advanced searching, sorting, and filtering by
   * multiple criteria including seller, channel, section, category, product
   * code, status, and textual search on product names. Supports pagination
   * (page/size), sorting by creation/update time, name, or status, and optional
   * fuzzy matching for enhanced discovery experiences.
   *
   * Security and permission logic requires that results respect channel and
   * seller access rights, with potential masking of restricted fields dependent
   * on caller role (customer, seller, admin). Only products marked as Active
   * (or other visible statuses) are shown to customers; sellers and admins may
   * search broader sets, including paused/discontinued products for operational
   * workflows.
   *
   * Integrates directly with the shopping_mall_products table described in the
   * Prisma schema—leveraging all search-relevant fields and associated
   * relationships for filter enrichment. Robust error handling returns detailed
   * feedback on invalid query parameters or permission denials. Designed to be
   * audited and extensible for future field expansions or integration with
   * analytics/personalization engines.
   *
   * @param connection
   * @param body Search, filter, sort, and pagination parameters for product
   *   catalog queries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallProduct.IRequest,
  ): Promise<IPageIShoppingMallProduct.ISummary> {
    try {
      return await patchShoppingMallProducts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific product by productId.
   * (shopping_mall_products).
   *
   * Fetch detailed information for a specific product identified by productId,
   * including all main attributes—name, code, status, business workflow state,
   * price, seller and channel association, section/category membership, and
   * creation/update timestamps. Optionally include linked product content,
   * variants/options, bundles, tags, SEO metadata, and attachments for
   * comprehensive data.
   *
   * Permission and visibility are determined by product status, workflow state,
   * and role; only appropriately authorized users (customers for public items,
   * sellers for their own listings, admins for global view) may access certain
   * sensitive or operational fields. Handles cases where the product is paused,
   * discontinued, or deleted (soft delete), providing appropriate error or
   * masked response where business rules require. Fully aligns with the
   * shopping_mall_products and its related Prisma schema definitions to ensure
   * all entity fields and relationships are reflected accurately.
   *
   * Complementary to product list or search endpoints, this API enables direct
   * navigation to individual product detail pages for purchase, review,
   * management, or review. Returns error if productId does not exist or the
   * resource is not visible to the caller.
   *
   * @param connection
   * @param productId Unique identifier for the product to retrieve from the
   *   shopping mall catalog.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":productId")
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProduct> {
    try {
      return await getShoppingMallProductsProductId({
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
