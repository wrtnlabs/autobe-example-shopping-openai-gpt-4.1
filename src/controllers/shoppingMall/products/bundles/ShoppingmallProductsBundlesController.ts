import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getShoppingMallProductsProductIdBundlesBundleId } from "../../../../providers/getShoppingMallProductsProductIdBundlesBundleId";

import { IShoppingMallProductBundle } from "../../../../api/structures/IShoppingMallProductBundle";

@Controller("/shoppingMall/products/:productId/bundles/:bundleId")
export class ShoppingmallProductsBundlesController {
  /**
   * Retrieve details of a specific product bundle under a product
   * (shopping_mall_product_bundles table).
   *
   * This API operation fetches the full details of a single product bundle
   * belonging to a specific product. The operation utilizes the
   * shopping_mall_product_bundles table in the Prisma schema, referencing the
   * parent product's unique productId and the bundle's bundleId as URL path
   * parameters.
   *
   * The response includes all business-critical metadata for the bundle, such
   * as its display name, type (fixed or optional), description, and the
   * bundle's configured position within the product's bundle sequence.
   * Additionally, related bundle items (composition) and their ordering are
   * typically included in the response object for comprehensive viewing or
   * editing scenarios.
   *
   * Authorization is based on requester roles: customers can generally view
   * bundle information for browsing and purchase; sellers may access their own
   * bundles for management; and admins have global read access. Proper
   * permission enforcement ensures that only authorized users can access
   * restricted or draft bundles where business rules apply.
   *
   * Business logic ensures bundles returned by this operation are active and
   * viewable per product status and channel/section scoping. Any error in
   * locating the product or bundle results in a 404 with a clear error
   * message.
   *
   * This operation is closely related to bundle creation, update, and deletion
   * endpoints, which manage the lifecycle of bundles under the same product
   * context.
   *
   * @param connection
   * @param productId ID of the product to which the bundle belongs (UUID,
   *   shopping_mall_products.id).
   * @param bundleId Unique identifier of the product bundle (UUID,
   *   shopping_mall_product_bundles.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bundleId")
    bundleId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallProductBundle> {
    try {
      return await getShoppingMallProductsProductIdBundlesBundleId({
        productId,
        bundleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
