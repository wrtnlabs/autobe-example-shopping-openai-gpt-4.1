import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallProductsProductIdInquiriesInquiryIdAnswers } from "../../../../../providers/patchShoppingMallProductsProductIdInquiriesInquiryIdAnswers";
import { getShoppingMallProductsProductIdInquiriesInquiryIdAnswersAnswerId } from "../../../../../providers/getShoppingMallProductsProductIdInquiriesInquiryIdAnswersAnswerId";

import { IPageIShoppingMallInquiryAnswer } from "../../../../../api/structures/IPageIShoppingMallInquiryAnswer";
import { IShoppingMallInquiryAnswer } from "../../../../../api/structures/IShoppingMallInquiryAnswer";

@Controller("/shoppingMall/products/:productId/inquiries/:inquiryId/answers")
export class ShoppingmallProductsInquiriesAnswersController {
  /**
   * Retrieve paginated, filtered answers for a product inquiry
   * (shopping_mall_inquiry_answers).
   *
   * This endpoint retrieves paginated, filtered, and sorted answers for a
   * specified product's inquiry. It supports advanced search and list options,
   * including author type (seller/admin), moderation status, official answer
   * flag, and full audit compliance.
   *
   * Role-specific responses are enabled, showing full detail for sellers/admins
   * and privacy-protected fields for ordinary users. Pagination, query, and
   * sorting enhance usability for large boards. Only authorized users can view
   * private or restricted answers, and related moderation states are
   * considered.
   *
   * This leverages the shopping_mall_inquiry_answers schema—each answer
   * includes references to seller/admin authorship, main body, moderation
   * state, timestamps, and official-answer flag. Filtering supports status,
   * author, and meta-search (such as pending moderation or official answers
   * only).
   *
   * @param connection
   * @param productId Target product's unique identifier (UUID)
   * @param inquiryId Target inquiry's unique identifier (UUID)
   * @param body Search and pagination/filtering criteria for inquiry answers
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallInquiryAnswer.IRequest,
  ): Promise<IPageIShoppingMallInquiryAnswer> {
    try {
      return await patchShoppingMallProductsProductIdInquiriesInquiryIdAnswers({
        productId,
        inquiryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific product inquiry answer
   * (shopping_mall_inquiry_answers).
   *
   * Fetch the full answer detail for a single product inquiry's answer.
   * Requires authorization—ordinary users may only view public or their own
   * answers, while sellers and admins may access additional metadata such as
   * moderation status or reviewer information.
   *
   * The schema supports threading (parent/child linkage), official-answer
   * flags, author (seller or admin), moderation and notification information.
   * The response provides all answer content and meta except for internal
   * moderation data if requester lacks privilege. Used in moderation, thread
   * display, or evidence presentation workflows.
   *
   * This references the shopping_mall_inquiry_answers schema: answerId uniquely
   * selects the answer row for the target inquiry/product.
   *
   * @param connection
   * @param productId Target product's unique identifier (UUID)
   * @param inquiryId Target inquiry's unique identifier (UUID)
   * @param answerId Target answer's unique identifier (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":answerId")
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("answerId")
    answerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallInquiryAnswer> {
    try {
      return await getShoppingMallProductsProductIdInquiriesInquiryIdAnswersAnswerId(
        {
          productId,
          inquiryId,
          answerId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
