import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallProductsProductIdInquiries } from "../../../../providers/patchShoppingMallProductsProductIdInquiries";

import { IPageIShoppingMallProductInquiry } from "../../../../api/structures/IPageIShoppingMallProductInquiry";
import { IShoppingMallProductInquiry } from "../../../../api/structures/IShoppingMallProductInquiry";

@Controller("/shoppingMall/products/:productId/inquiries")
export class ShoppingmallProductsInquiriesController {
  /**
   * List and search product inquiries (shopping_mall_product_inquiries) for a
   * specific product with advanced filtering.
   *
   * This endpoint returns a searched and paginated list of inquiries attached
   * to a particular product, enabling features such as advanced filtering
   * (e.g., only show unanswered questions, author role filtering, date-based
   * ranges, or visibility-level selection). The operation optimizes frontend
   * rendering by returning summary records rather than full inquiry objects and
   * supports efficient search/list experience for customers, sellers, and
   * admins.
   *
   * The operation enforces access and privacy restrictions based on author and
   * viewer roles. For example, private inquiries are only listable by authors,
   * responders, or admins, while public inquiries are visible according to
   * product and site business rules. The filter request body supports
   * specifying page size, sort, author, status, and additional inquiry
   * properties. This operation is designed to integrate with inquiry creation,
   * detail retrieval, and answer submission endpoints as part of the full Q&A
   * board feature set.
   *
   * @param connection
   * @param productId Unique identifier of the product whose inquiries are being
   *   retrieved.
   * @param body Criteria for filtering, sorting, and paginating product
   *   inquiries associated with a product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallProductInquiry.IRequest,
  ): Promise<IPageIShoppingMallProductInquiry.ISummary> {
    try {
      return await patchShoppingMallProductsProductIdInquiries({
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
