import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallBoardsBoardIdPostsPostIdComments } from "../../../../../providers/patchShoppingMallBoardsBoardIdPostsPostIdComments";
import { getShoppingMallBoardsBoardIdPostsPostIdCommentsCommentId } from "../../../../../providers/getShoppingMallBoardsBoardIdPostsPostIdCommentsCommentId";

import { IPageIShoppingMallComment } from "../../../../../api/structures/IPageIShoppingMallComment";
import { IShoppingMallComment } from "../../../../../api/structures/IShoppingMallComment";

@Controller("/shoppingMall/boards/:boardId/posts/:postId/comments")
export class ShoppingmallBoardsPostsCommentsController {
  /**
   * Retrieve a paginated list of comments for a board post
   * (shopping_mall_comments).
   *
   * Fetch, filter, and paginate comments linked to a specific board post as
   * identified by boardId and postId. The operation enables board viewers to
   * access ongoing comment threads according to sorting and visibility logic.
   * Integrated security checks apply, ensuring that only comments appropriate
   * to the viewer's permissions are returned according to the visibility and
   * moderation status fields in shopping_mall_comments.
   *
   * Business logic includes full support for search and advanced filters,
   * including reply thread level, moderation status, authorship, and time
   * ranges. Response objects only include non-deleted comments by default;
   * admin users may see all, including soft-deleted items for moderation and
   * audit workflows. Pagination and sorting parameters must follow
   * platform-wide standards for UI consistency and high-volume support. This
   * operation is essential for board UIs, moderation interfaces, and compliance
   * review.
   *
   * The Prisma schema's threaded and multi-role author structure is respected,
   * and detailed relationships to parent comments, posts, and moderation fields
   * are reflected in both search and response formats.
   *
   * @param connection
   * @param boardId Unique ID of the board.
   * @param postId Unique ID of the post whose comments are requested.
   * @param body Filter, sort, search, and pagination parameters for comment
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallComment.IRequest,
  ): Promise<IPageIShoppingMallComment.ISummary> {
    try {
      return await patchShoppingMallBoardsBoardIdPostsPostIdComments({
        boardId,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific comment on a board post by its ID (shopping_mall_comments).
   *
   * Retrieve the full detail of a comment associated with a specific board post
   * and comment ID. Permissions and data masking are enforced according to
   * comment authorship, parent board post visibility, thread level, and post
   * moderation status, as specified in the shopping_mall_comments Prisma schema
   * and business requirement documents.
   *
   * This operation supports clients needing to display an individual comment,
   * including all main fields, author role (customer, seller, admin), threading
   * metadata, moderation status, and any associated audit or compliance data.
   * It also manages logic for content masking when comments are marked as
   * private, moderated, or deleted, showing limited or redacted results based
   * on the requesting user's permissions. Error handling covers not found,
   * access denied, or redacted content scenarios.
   *
   * Clients should use this endpoint for comment detail view, compliance
   * resolution workflows, or threaded UI navigation.
   *
   * @param connection
   * @param boardId Unique ID of the board.
   * @param postId Unique ID of the post the comment belongs to.
   * @param commentId Unique ID of the comment to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallComment> {
    try {
      return await getShoppingMallBoardsBoardIdPostsPostIdCommentsCommentId({
        boardId,
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
