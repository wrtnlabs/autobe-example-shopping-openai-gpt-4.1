import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchShoppingMallBoards } from "../../../providers/patchShoppingMallBoards";
import { getShoppingMallBoardsBoardId } from "../../../providers/getShoppingMallBoardsBoardId";

import { IPageIShoppingMallBoard } from "../../../api/structures/IPageIShoppingMallBoard";
import { IShoppingMallBoard } from "../../../api/structures/IShoppingMallBoard";

@Controller("/shoppingMall/boards")
export class ShoppingmallBoardsController {
  /**
   * Search and retrieve a paginated, filtered list of bulletin boards.
   *
   * This operation retrieves a list of boards configured in the shopping mall
   * platform, allowing clients to filter by channel, section, visibility,
   * moderation settings, or keywords in the title and description. Returned
   * board data includes all visible boards matching search criteria, with full
   * pagination and sorting control for scalable UIs.
   *
   * Security and access to individual board metadata are governed by user role,
   * board visibility (public/private/role-restricted), and moderation state.
   * Only boards not soft-deleted (deleted_at is null) are included in results.
   *
   * Supports auditing and compliance requirements by only exposing board
   * metadata as allowed by platform policies, and provides essential building
   * blocks for board, inquiry, or review navigation endpoints.
   *
   * This aligns with the shopping_mall_boards schema; board, channel, and
   * section identifiers are validated against existing relationships. Bad or
   * unauthorized queries result in errors with reason codes and business logic
   * feedback. Filtering on soft/hard deletes, section/channel validity, or
   * role-based visibility is strictly enforced.
   *
   * @param connection
   * @param body Filtering, search, and pagination criteria for board list
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallBoard.IRequest,
  ): Promise<IPageIShoppingMallBoard.ISummary> {
    try {
      return await patchShoppingMallBoards({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a single bulletin board by ID.
   *
   * This operation retrieves full detail about a specified board, including
   * display configuration, description, visibility rules, moderation
   * requirements, and linkage to channel/section. Supports localization and
   * role-based access (e.g., hides private boards or restricted metadata from
   * unauthorized users).
   *
   * Access is tightly controlled: only boards not soft-deleted (deleted_at is
   * null) and accessible to the requesting user (based on their role and the
   * board visibility/permissions column) are returned. Unauthorized access
   * attempts are rejected with error codes.
   *
   * Board metadata integrates with board and post APIs for seamless
   * construction of Q&A, inquiry, or review UIs. All data accurately reflects
   * the shopping_mall_boards schema, ensuring auditability and compliance with
   * evidence policies.
   *
   * @param connection
   * @param boardId Unique identifier of the bulletin board to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":boardId")
  public async at(
    @TypedParam("boardId")
    boardId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallBoard> {
    try {
      return await getShoppingMallBoardsBoardId({
        boardId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
