import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getaiCommerceBuyerAttachmentsAttachmentId } from "../../../../providers/getaiCommerceBuyerAttachmentsAttachmentId";
import { BuyerAuth } from "../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../decorators/payload/BuyerPayload";
import { putaiCommerceBuyerAttachmentsAttachmentId } from "../../../../providers/putaiCommerceBuyerAttachmentsAttachmentId";
import { deleteaiCommerceBuyerAttachmentsAttachmentId } from "../../../../providers/deleteaiCommerceBuyerAttachmentsAttachmentId";
import { postaiCommerceBuyerAttachments } from "../../../../providers/postaiCommerceBuyerAttachments";

import { IAiCommerceAttachment } from "../../../../api/structures/IAiCommerceAttachment";

@Controller("/aiCommerce/buyer/attachments")
export class AicommerceBuyerAttachmentsController {
  /**
   * Retrieve metadata and access info for an attachment
   * (ai_commerce_attachments table).
   *
   * This operation retrieves the detailed metadata and file access information
   * for a single attachment, identified by its unique attachmentId. The
   * ai_commerce_attachments table, as outlined in the schema, tracks file
   * ownership, filename, business context, status, and timestamps, supporting
   * buyers and sellers in uploading and managing their asset files.
   *
   * When an attachment is accessed, the system verifies user role and
   * attachment association to ensure access control. Buyers can access only
   * their own files, while sellers and admins have broader rights based on
   * entity linkage. The operation only returns metadata and access URI; actual
   * file retrieval obeys further permissions and CDN integration logic. All
   * accesses are audited in the ai_commerce_attachment_access_audit table for
   * compliance monitoring.
   *
   * Authorization is enforced at the controller level. Read-only; modification
   * and deletion are handled by other endpoints. This endpoint does not provide
   * direct download but returns the required URI and metadata for file
   * management within the commerce platform.
   *
   * @param connection
   * @param attachmentId Unique identifier for the target attachment file
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":attachmentId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceAttachment> {
    try {
      return await getaiCommerceBuyerAttachmentsAttachmentId({
        buyer,
        attachmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update attachment metadata (not file content) in ai_commerce_attachments
   * table.
   *
   * This operation updates the properties of an attachment, excluding the
   * file's binary content, as per the ai_commerce_attachments schema. Allowed
   * updates include filename (renaming), business_type (e.g.,
   * favorite_screenshot, notification_attachment), and status (active,
   * quarantined, deleted) if permitted by business logic. The operation
   * enforces role-based access, ensuring only file owners or admins can update
   * the record. Each modification is logged in the
   * ai_commerce_attachment_access_audit table for evidence.
   *
   * Renaming and status changes are validated to avoid business logic conflicts
   * (e.g., status cannot be set to quarantined without system scan result). The
   * operation strictly prohibits file content/version uploads, which are
   * managed by different endpoints.
   *
   * Returns the updated attachment metadata and URI. Invocation may fail due to
   * access control, invalid status transitions, or missing record. The
   * operation supports recovery, evidence, and business context management.
   *
   * @param connection
   * @param attachmentId Unique identifier for the attachment to update
   * @param body The fields to update in the attachment record (metadata,
   *   status, association)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":attachmentId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceAttachment.IUpdate,
  ): Promise<IAiCommerceAttachment> {
    try {
      return await putaiCommerceBuyerAttachmentsAttachmentId({
        buyer,
        attachmentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an attachment file (ai_commerce_attachments table) by marking
   * deleted_at timestamp.
   *
   * This operation performs a soft delete of an attachment as described in the
   * ai_commerce_attachments schema. Rather than physically erasing the file,
   * the system updates the deleted_at field to the current timestamp,
   * effectively hiding the attachment from standard user access, while
   * retaining it for evidence, legal, or audit purposes. Only the file's owner
   * or platform admins can erase an attachment.
   *
   * Soft deletion is necessary for compliance with privacy, audit, and
   * right-to-forget business rules. The erase operation ensures data integrity,
   * logs all actions, and triggers downstream processes such as scheduled
   * physical deletion or restoration handling if required by compliance.
   *
   * Invocation requires authentication and verifies ownership/permissions
   * before updating the attachment record. This ensures no unauthorized
   * deletions occur. Cannot be used to erase files referenced by compliance
   * holds or in active legal cases. No content is returned, as the attachment
   * is logically removed.
   *
   * @param connection
   * @param attachmentId Unique identifier for the attachment to erase
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":attachmentId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerAttachmentsAttachmentId({
        buyer,
        attachmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a file attachment (ai_commerce_attachments table) and return
   * metadata/URI.
   *
   * This operation creates a new attachment record as specified in the
   * ai_commerce_attachments schema. Buyers or sellers call this endpoint to
   * upload a file for use in products, inquiries, reviews, comments, or
   * notifications. The request body must include all required metadata, such as
   * filename, business context (e.g., favorite_screenshot,
   * notification_attachment), and reference to user ownership.
   *
   * The operation performs access control checks, ensures that the user has the
   * necessary role to upload in the given context, and starts the standard
   * scan/validation process for the file. The attached file itself should be
   * referenced by a URI as string, not binary upload. Metadata, including
   * status and version, are stored for compliance and recovery. All uploads are
   * appended to the audit trail.
   *
   * Returns the created attachment's metadata and accessible link as per
   * business rules defined in the schema. Errors may result from validation
   * failure, file type or size limits, or permissions issues. This endpoint is
   * central for enabling users to personalize and evidence their business
   * entities securely.
   *
   * @param connection
   * @param body Attachment information, including file metadata and business
   *   association, for upload
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceAttachment.ICreate,
  ): Promise<IAiCommerceAttachment> {
    try {
      return await postaiCommerceBuyerAttachments({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
