import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerReviewsReviewIdComments } from "../../../../../providers/postaiCommerceBuyerReviewsReviewIdComments";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerReviewsReviewIdComments } from "../../../../../providers/patchaiCommerceBuyerReviewsReviewIdComments";
import { getaiCommerceBuyerReviewsReviewIdCommentsCommentId } from "../../../../../providers/getaiCommerceBuyerReviewsReviewIdCommentsCommentId";
import { putaiCommerceBuyerReviewsReviewIdCommentsCommentId } from "../../../../../providers/putaiCommerceBuyerReviewsReviewIdCommentsCommentId";
import { deleteaiCommerceBuyerReviewsReviewIdCommentsCommentId } from "../../../../../providers/deleteaiCommerceBuyerReviewsReviewIdCommentsCommentId";

import { IAiCommerceComment } from "../../../../../api/structures/IAiCommerceComment";
import { IAiCommercePageIComment } from "../../../../../api/structures/IAiCommercePageIComment";

@Controller("/aiCommerce/buyer/reviews/:reviewId/comments")
export class AicommerceBuyerReviewsCommentsController {
  /**
   * Create a new comment on the specified review (ai_commerce_comments table).
   *
   * Authenticated buyers, sellers, or admins can create a new comment attached
   * to a given review via this endpoint. The request body includes the comment
   * text, optional parentId for thread structure, and visibility/status entries
   * compliant with community and business rules.
   *
   * Input validation ensures the reviewId exists, is visible to the caller, and
   * the posted comment meets content, length, and moderation requirements. Upon
   * success, the comment is recorded in ai_commerce_comments, a snapshot/audit
   * log entry is created, and notification routines are triggered for relevant
   * recipients.
   *
   * Reply nesting is supported through parentId; moderation and alert logic
   * apply according to comment content and role. The response returns the full
   * IAiCommerceComment object for UI confirmation and immediate display/use.
   * Any errors, such as non-existent review, thread limit exceeded, or
   * violation of posting rights, are reported in detail. Use this in
   * combination with comment listing and detail APIs for full
   * discussion/messaging features.
   *
   * @param connection
   * @param reviewId Review identifier to which the comment is being attached.
   * @param body Required fields for creating a new review comment
   *   (IAiCommerceComment.ICreate).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceComment.ICreate,
  ): Promise<IAiCommerceComment> {
    try {
      return await postaiCommerceBuyerReviewsReviewIdComments({
        buyer,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve and filter comments for a specific review (ai_commerce_comments
   * table).
   *
   * Enables buyers, sellers, or admins to fetch and filter the list of comments
   * for an identified review. The operation supports pagination, search, and
   * filtering based on the IAiCommerceComment.IRequest input, including fields
   * like status, authorId, and comment update time. Output is standardized as
   * IAiCommercePageIComment.ISummary, providing a digestible, paginated, and
   * sortable list for user interfaces or moderation tools.
   *
   * Access is governed by review/comment visibility and user role: buyers can
   * see and search comments for reviews they are entitled to read; sellers can
   * view comments on reviews of their products; admins have global access. All
   * requests are logged for compliance.
   *
   * Validation ensures the review exists, has not been deleted, and comment
   * filters are within expected ranges. In the case of errors (review not found
   * or access violation), detailed responses outline the failure reason. This
   * endpoint complements comment creation, update, and deletion endpoints, and
   * underpins comment moderation/audit workflows.
   *
   * @param connection
   * @param reviewId Unique identifier for the parent review whose comments are
   *   being queried.
   * @param body Comment query filters, search string, and pagination parameters
   *   (see IAiCommerceComment.IRequest).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceComment.IRequest,
  ): Promise<IAiCommercePageIComment.ISummary> {
    try {
      return await patchaiCommerceBuyerReviewsReviewIdComments({
        buyer,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a single comment for a review (ai_commerce_comments table).
   *
   * This endpoint retrieves the details for an identified comment that belongs
   * to a specific review. It ensures both reviewId and commentId exist and are
   * associated, handling authorization for buyers, sellers, or admins according
   * to their roles and the comment's visibility/privacy settings.
   *
   * The response includes the full IAiCommerceComment object (author, content,
   * status, timestamps, moderation flags) as appropriate for the role's access
   * rights. The operation defines validation for comment existence, association
   * with the given review, and the review's non-deleted state. In case of error
   * (comment not found, review deleted, authorization failure), a detailed
   * error is returned.
   *
   * Typical use cases include comment detail pages, moderation audits, or
   * notification deep-links. All access is audited as required by UGC
   * compliance rules.
   *
   * @param connection
   * @param reviewId Unique identifier for the parent review.
   * @param commentId Unique identifier for the comment to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceComment> {
    try {
      return await getaiCommerceBuyerReviewsReviewIdCommentsCommentId({
        buyer,
        reviewId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the content or status of an existing comment (ai_commerce_comments
   * table).
   *
   * Allows buyers, sellers, or admins who own or are entitled to manage the
   * comment to update its content, visibility, or status. All edits must comply
   * with system moderation and history requirements, including maximum
   * nesting/threading and permissible content types defined by platform
   * settings.
   *
   * The operation performs validation on comment existence, association with
   * the specified reviewId, edit permissions by role, and status. Updates are
   * snapshotted in audit trails. Any changes immediately trigger notification
   * workflows for the involved users as dictated by the underlying business
   * rules. Error responses detail insufficient permission, unauthorized access,
   * or content validation failures.
   *
   * This should be used together with the comment detail, history, and
   * moderation endpoints for full-featured comment management.
   *
   * @param connection
   * @param reviewId Parent review identifier for the comment.
   * @param commentId Unique identifier for the comment to update.
   * @param body Fields to update on a comment (see IAiCommerceComment.IUpdate).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceComment.IUpdate,
  ): Promise<IAiCommerceComment> {
    try {
      return await putaiCommerceBuyerReviewsReviewIdCommentsCommentId({
        buyer,
        reviewId,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (soft delete) a comment from a review
   * (ai_commerce_comments table).
   *
   * Authenticated buyers, sellers, or admins can mark a comment as deleted
   * using this operation. It records the deleted_at timestamp for the given
   * comment and audit logs this action. Hard deletion is not performed in order
   * to preserve platform evidence for disputes and moderation.
   *
   * Role checks ensure only the comment owner, associated seller, or admin can
   * execute this operation; attempts to delete a comment not owned or managed
   * by the requesting user will fail with an error. Associated notifications
   * are sent to relevant users where configured. The endpoint supports all
   * compliance, moderation, and UGC history requirements, complementing the
   * standard create, update, and list comment flows.
   *
   * Deleted comments may be displayed for admins or in audit logs, but are not
   * shown to regular users. Detailed errors are returned for missing,
   * unauthorized, or already deleted comments.
   *
   * @param connection
   * @param reviewId Parent review identifier for the comment.
   * @param commentId Unique identifier for the comment to logically delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerReviewsReviewIdCommentsCommentId({
        buyer,
        reviewId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
