import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerReviews } from "../../../../providers/postaiCommerceBuyerReviews";
import { BuyerAuth } from "../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerReviews } from "../../../../providers/patchaiCommerceBuyerReviews";
import { getaiCommerceBuyerReviewsReviewId } from "../../../../providers/getaiCommerceBuyerReviewsReviewId";
import { putaiCommerceBuyerReviewsReviewId } from "../../../../providers/putaiCommerceBuyerReviewsReviewId";
import { deleteaiCommerceBuyerReviewsReviewId } from "../../../../providers/deleteaiCommerceBuyerReviewsReviewId";

import { IAiCommerceReview } from "../../../../api/structures/IAiCommerceReview";
import { IPageIAiCommerceReview } from "../../../../api/structures/IPageIAiCommerceReview";

@Controller("/aiCommerce/buyer/reviews")
export class AicommerceBuyerReviewsController {
  /**
   * Create a new review for an order item (ai_commerce_reviews).
   *
   * Creates a review for a purchased product under ai_commerce_reviews,
   * referencing a completed order item. Verifies eligibility and ownership,
   * validates required fields (text body, numeric rating, visibility), and
   * links the review to the order item. Prevents duplicate reviews per order
   * item as per schema uniqueness constraint.
   *
   * Buyers may only create reviews for their own completed purchases. Sellers
   * and admins cannot create reviews through this endpoint. The system enforces
   * business rules, executes moderation checks, logs the event for compliance,
   * and triggers notification or incentives as necessary. Validation errors,
   * unauthorized, or business rule violations result in descriptive error
   * responses.
   *
   * The response returns all review fields, suitable for immediate display or
   * further moderation/feedback workflows.
   *
   * @param connection
   * @param body Fields required to create a review, including order item,
   *   rating, body, and metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceReview.ICreate,
  ): Promise<IAiCommerceReview> {
    try {
      return await postaiCommerceBuyerReviews({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list reviews with advanced filtering (ai_commerce_reviews).
   *
   * Returns a paginated, filtered list of reviews. The request body supports
   * search on ai_commerce_reviews fields such as author_id, order_item_id,
   * product, status, rating, as well as pagination and sort order. For buyers,
   * the results are filtered to reviews they've authored; sellers see reviews
   * on their products; admins can query all reviews.
   *
   * Business logic supports integration with moderation and reply flows.
   * Sensitive fields such as seller responses may be included/excluded based on
   * requester role. Errors cover invalid filters, unauthorized access, or
   * database issues. The response is designed for UI summary display but can be
   * expanded with query flags as permitted by business rules.
   *
   * The operation is often used in conjunction with review creation or detail
   * endpoints in review dashboards.
   *
   * @param connection
   * @param body Review filter/search parameters and pagination/sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceReview.IRequest,
  ): Promise<IPageIAiCommerceReview.ISummary> {
    try {
      return await patchaiCommerceBuyerReviews({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detail of a specific review (ai_commerce_reviews).
   *
   * Fetches a single review from ai_commerce_reviews using the provided
   * reviewId. Enforces permission based on user role and resource ownership:
   * buyers access their own reviews, sellers their product reviews, admins all
   * reviews. The response includes all base fields and related data such as
   * order_item_id, timestamps, statuses, reply if any, and compliance
   * information.
   *
   * Handles business validation for existence, access, and context. Errors are
   * returned when review is missing, permission is denied, or lookup fails.
   * This operation is integral to review detail UIs and supports chaining with
   * comment and moderation functionality.
   *
   * Complies with all audit/logging requirements, and supports future
   * extensibility for reply threads or media attachments if permitted.
   *
   * @param connection
   * @param reviewId Unique identifier of the review to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":reviewId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceReview> {
    try {
      return await getaiCommerceBuyerReviewsReviewId({
        buyer,
        reviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the content, rating, or seller response of a review
   * (ai_commerce_reviews table).
   *
   * This API allows an authenticated user (buyer, seller, or admin) to update
   * an existing review, altering its content, numeric score, visibility, or, in
   * the case of sellers, providing a response.
   *
   * The operation enforces role-based permissions: buyers can only update their
   * own reviews, sellers can set/edit their response only for reviews written
   * about their products, and admins can perform global moderation. It requires
   * full verification that the review exists, has not been deleted, and that
   * the acting user has sufficient rights. All modifications are snapshotted
   * for audit, version history, and legal recovery.
   *
   * Validation ensures the rating falls within accepted bounds (as governed by
   * the UI/system config), the comment length is reasonable, and all edits
   * comply with platform community guidelines. In case of failure (e.g.,
   * editing a non-existent or already deleted review, or insufficient
   * permissions), the API returns a detailed error conforming to
   * compliance/error-handling requirements.
   *
   * This endpoint works in conjunction with the review editing history,
   * notification, and moderation logic. Any update will trigger history
   * recording and downstream notification workflows according to user
   * preferences and audit rules.
   *
   * @param connection
   * @param reviewId Unique identifier for the review to be updated.
   * @param body Review update data (content, rating, visibility, seller
   *   response, etc) as per IAiCommerceReview.IUpdate schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":reviewId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceReview.IUpdate,
  ): Promise<IAiCommerceReview> {
    try {
      return await putaiCommerceBuyerReviewsReviewId({
        buyer,
        reviewId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete a review by marking it as deleted (ai_commerce_reviews
   * table).
   *
   * This API allows an authenticated buyer, seller, or admin to logically
   * remove a review by updating its deleted_at timestamp, ensuring that deleted
   * reviews are retained for legal, compliance, and audit purposes.
   *
   * Buyers are restricted to deleting their own reviews; sellers can only
   * delete reviews of their own products (typically for moderation within
   * policy), and admins can execute deletions globally. Successful invocation
   * sets the deleted_at field rather than fully removing the underlying record,
   * in accordance with platform UGC policies and audit guidelines.
   *
   * This operation supports platform compliance rules, making logically deleted
   * reviews unavailable for standard user queries but preserving them in the
   * system for evidence recovery. Detailed error codes are returned if the
   * review does not exist, is already deleted, or the calling party lacks
   * sufficient privileges. The deletion event is snapshotted and added to the
   * review's audit/edit history for forensics.
   *
   * Use in conjunction with review restoration or audit APIs as dictated by
   * legal recovery, compliance, or investigative workflows.
   *
   * @param connection
   * @param reviewId Unique identifier for the review to be logically deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":reviewId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("reviewId")
    reviewId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerReviewsReviewId({
        buyer,
        reviewId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
