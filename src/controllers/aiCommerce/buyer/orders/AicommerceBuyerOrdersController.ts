import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerOrders } from "../../../../providers/postaiCommerceBuyerOrders";
import { BuyerAuth } from "../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerOrders } from "../../../../providers/patchaiCommerceBuyerOrders";
import { getaiCommerceBuyerOrdersOrderId } from "../../../../providers/getaiCommerceBuyerOrdersOrderId";
import { putaiCommerceBuyerOrdersOrderId } from "../../../../providers/putaiCommerceBuyerOrdersOrderId";
import { deleteaiCommerceBuyerOrdersOrderId } from "../../../../providers/deleteaiCommerceBuyerOrdersOrderId";

import { IAiCommerceOrder } from "../../../../api/structures/IAiCommerceOrder";
import { IPageIAiCommerceOrder } from "../../../../api/structures/IPageIAiCommerceOrder";

@Controller("/aiCommerce/buyer/orders")
export class AicommerceBuyerOrdersController {
  /**
   * Create a new purchase order from cart (ai_commerce_orders table).
   *
   * Create a new purchase order for the buyer, using their current cart and
   * supplied checkout information (address, payment, channel). This operation
   * validates cart contents for availability, compliance, and pricing, then
   * locks in the snapshot of products and prices for legal evidence and
   * fulfillment. An address snapshot is stored to guarantee delivery integrity
   * regardless of future updates. Fulfillment status is initialized as per the
   * business workflow.
   *
   * Buyers must be authenticated to create orders; visitors are required to
   * register first. Security is handled to ensure only legitimate, non-expired
   * sessions can create orders. The creation request body is validated against
   * the full requirements for initial order setup, and actionable errors are
   * provided on failure, e.g., insufficient stock, pricing changes, or policy
   * violations.
   *
   * Upon success, the complete order record is returned for confirmation,
   * payment, and user tracking. This operation is based on ai_commerce_orders
   * and related child schema tables.
   *
   * @param connection
   * @param body Complete checkout and order creation payload including cart
   *   reference, address, payment, and buyer info.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceOrder.ICreate,
  ): Promise<IAiCommerceOrder> {
    try {
      return await postaiCommerceBuyerOrders({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of purchase orders (ai_commerce_orders
   * table).
   *
   * Retrieve a filtered and paginated list of purchase orders from the
   * aiCommerce system, supporting advanced search capabilities by order status,
   * buyer, channel, and date. This operation provides both buyers and
   * administrators the ability to locate orders based on a wide range of
   * criteria, including but not limited to order codes, creation/update time,
   * fulfillment states, price ranges, and specific buyer or channel linkage.
   *
   * Paging parameters ensure manageable result sets for large datasets, and
   * sorting options are available for recency, order value, or delivery status
   * in either direction. The response returns a list of order summaries with
   * key details optimized for history or management screen display.
   *
   * Security considerations include restricting access to one's own orders for
   * buyers and unrestricted access for admins, with all queries subject to rate
   * limiting and audit logging for compliance. This operation is based on the
   * ai_commerce_orders Prisma schema and returns summary information only â€“
   * detailed views must use the 'at' operation.
   *
   * Validation ensures that all search parameters conform with business
   * requirements; unsupported or malformed requests are rejected with
   * actionable errors.
   *
   * @param connection
   * @param body Advanced search and pagination parameters for order retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceOrder.IRequest,
  ): Promise<IPageIAiCommerceOrder.ISummary> {
    try {
      return await patchaiCommerceBuyerOrders({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific order (ai_commerce_orders
   * table) by UUID.
   *
   * Get full details of a specific purchase order by its unique orderId,
   * including all relational data such as buyer, associated items, statuses,
   * pricing, and fulfillment steps. This operation provides a complete view of
   * the given order, necessary for display in detailed order screens, dispute
   * management, audit, and after-sales support workflows.
   *
   * Authorization is enforced: buyers may only access their own orders; admins
   * have global access. All access attempts are logged for compliance,
   * especially regarding sensitive fields (address snapshots, payment
   * references, after-sales states).
   *
   * Based on the ai_commerce_orders Prisma schema, this operation validates the
   * provided UUID, ensures the record exists and is accessible by the
   * authenticated user. Malformed identifiers or unauthorized access are
   * rejected with appropriate error messages. Returns the complete order object
   * for downstream application needs.
   *
   * @param connection
   * @param orderId The UUID of the target purchase order to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrder> {
    try {
      return await getaiCommerceBuyerOrdersOrderId({
        buyer,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update permitted details of a specific order (ai_commerce_orders table) by
   * UUID.
   *
   * Update fields on an existing order by its UUID, such as recipient address,
   * payment method, scheduled delivery, or business status as permitted at the
   * current status stage. All modifications are validated to ensure only
   * allowed transitions (e.g., no edits after fulfillment, only allowed fields
   * per order status).
   *
   * Only the owner (buyer) or administrators can execute this operation. All
   * updates are logged, and any field with legal or compliance impact is
   * snapshotted prior to mutation. Unauthorized or improper update attempts
   * return actionable errors depending on context (e.g., invalid transition,
   * locked order, missing permissions).
   *
   * Based on field-level update logic in ai_commerce_orders; operation ensures
   * strict business compliance and full audit trail.
   *
   * @param connection
   * @param orderId The UUID of the target order to update.
   * @param body Payload containing allowed updates for the specified order
   *   according to its current lifecycle status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrder.IUpdate,
  ): Promise<IAiCommerceOrder> {
    try {
      return await putaiCommerceBuyerOrdersOrderId({
        buyer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically (soft) delete a specific order by UUID (ai_commerce_orders
   * table).
   *
   * Permanently remove an order record identified by a UUID by marking its
   * deleted_at timestamp, retaining the record for historical, audit, and
   * compliance purposes. The order must not have settled payment, fulfilled
   * shipping, or compliance holds; business logic validation will reject any
   * attempt to erase orders that are not eligible.
   *
   * Deletion is restricted to the owner (buyer) or administrators, following
   * the platform lifecycle management rules. All delete actions are snapshotted
   * prior to marking as deleted. Unauthorized, invalid, or unsuccessful
   * attempts are returned with clear error messages. The deletion process
   * ensures that no business integrity is lost and compliance auditability is
   * maintained at all times.
   *
   * Based on ai_commerce_orders schema, this operation upholds full data
   * integrity, evidence policy, and regulatory conformance for archival.
   *
   * @param connection
   * @param orderId The UUID of the target order to logically delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerOrdersOrderId({
        buyer,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
