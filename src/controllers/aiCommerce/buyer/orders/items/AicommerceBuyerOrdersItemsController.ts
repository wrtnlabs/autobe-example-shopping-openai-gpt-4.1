import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceBuyerOrdersOrderIdItems } from "../../../../../providers/patchaiCommerceBuyerOrdersOrderIdItems";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { getaiCommerceBuyerOrdersOrderIdItemsItemId } from "../../../../../providers/getaiCommerceBuyerOrdersOrderIdItemsItemId";

import { IPageIAiCommerceOrderItem } from "../../../../../api/structures/IPageIAiCommerceOrderItem";
import { IAiCommerceOrderItem } from "../../../../../api/structures/IAiCommerceOrderItem";

@Controller("/aiCommerce/buyer/orders/:orderId/items")
export class AicommerceBuyerOrdersItemsController {
  /**
   * Search and retrieve a paginated, filtered list of order items for a
   * specific order (ai_commerce_order_items).
   *
   * This API operation enables retrieval of a paginated list of order items
   * under a specific order by its unique orderId. It supports advanced
   * searching and filtering on fields such as product name, status, seller, and
   * quantity. Access control applies based on the user's role and ownership:
   * buyers may only access their own orders, admins may access any order items,
   * and sellers are restricted to their own segments of a split order,
   * depending on business implementation.
   *
   * The underlying ai_commerce_order_items table captures each product or
   * variant within an order, including associated product/variant references,
   * seller information for multi-vendor use cases, item status, pricing at
   * purchase, and related analytics. Pagination and filtering are supported by
   * supplying a structured request body.
   *
   * Business rules enforce referential integrity to the parent order, return
   * only items belonging to the specified orderId, and optionally restrict
   * access based on account role (buyer, seller, admin). Error handling and
   * validation ensure valid UUIDs and respect for row-level permissions and
   * privacy rules.
   *
   * This operation supports order item histories, analytics, after-sales
   * eligibility, and is typically paired with GET
   * /orders/{orderId}/items/{itemId} for details; buyers and sellers use this
   * to track, manage, and resolve issues with specific order items.
   *
   * @param connection
   * @param orderId Unique identifier of the order whose items are being
   *   queried.
   * @param body Search, filter, and pagination parameters for order item
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderItem.IRequest,
  ): Promise<IPageIAiCommerceOrderItem> {
    try {
      return await patchaiCommerceBuyerOrdersOrderIdItems({
        buyer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the full details of a specific order item within an order
   * (ai_commerce_order_items).
   *
   * This API operation fetches a single order item's details, including
   * quantities, pricing, seller information, variant/product references,
   * fulfillment and delivery status, and linked after-sales eligibility. The
   * operation enforces that only authorized users—buyers who own the parent
   * order, relevant sellers tied to the ordered item, or platform admins—may
   * access the record.
   *
   * The ai_commerce_order_items table anchors the response, joined by foreign
   * keys to product, variant, and seller details for context (not expanded
   * inline unless specified in the response DTO). If either the orderId or
   * itemId does not correspond to a valid order or item, or if the user lacks
   * permission, the operation returns a not-found or unauthorized error.
   *
   * Related APIs include PATCH /orders/{orderId}/items for item search and
   * access, and PUT or DELETE for updates and removals. This endpoint is
   * critical for after-sales processes, dispute resolution, and customer
   * support.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order.
   * @param itemId Unique identifier of the target order item.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":itemId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrderItem> {
    try {
      return await getaiCommerceBuyerOrdersOrderIdItemsItemId({
        buyer,
        orderId,
        itemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
