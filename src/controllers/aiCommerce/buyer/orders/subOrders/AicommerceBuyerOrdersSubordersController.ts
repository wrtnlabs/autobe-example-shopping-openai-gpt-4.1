import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceBuyerOrdersOrderIdSubOrders } from "../../../../../providers/patchaiCommerceBuyerOrdersOrderIdSubOrders";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { getaiCommerceBuyerOrdersOrderIdSubOrdersSubOrderId } from "../../../../../providers/getaiCommerceBuyerOrdersOrderIdSubOrdersSubOrderId";

import { IPageIAiCommerceSubOrder } from "../../../../../api/structures/IPageIAiCommerceSubOrder";
import { IAiCommerceSubOrder } from "../../../../../api/structures/IAiCommerceSubOrder";

@Controller("/aiCommerce/buyer/orders/:orderId/subOrders")
export class AicommerceBuyerOrdersSubordersController {
  /**
   * Retrieve a paginated, filtered list of sub-orders for an order
   * (ai_commerce_sub_orders).
   *
   * This API retrieves a filtered and paginated list of sub-orders belonging to
   * the parent order indicated by orderId. Sub-orders correspond to segmented
   * fulfillment units—such as by seller, warehouse, or shipping
   * method—generated automatically or administratively during order
   * processing.
   *
   * The ai_commerce_sub_orders table records the linkage between the primary
   * order and its sub-entities, including independent status, pricing, and
   * fulfillment details. The operation aids buyers and administrators in
   * tracking partial shipments, seller-specific delivery, and vendor resolution
   * cases. Filtering and paging options are passed in the request body
   * following the IAiCommerceSubOrder.IRequest DTO, and strict security ensures
   * only authorized actors (buyers for their own orders, sellers for their own
   * sub-orders, admins globally) can access these lists.
   *
   * Related APIs include GET for individual sub-order detail and POST for
   * administering new segments. Typical business rules limit creation to the
   * system or administrator roles, not end users, for compliance and
   * operational clarity.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order for which sub-orders
   *   are listed.
   * @param body Search, filter, and paging parameters for sub-order retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSubOrder.IRequest,
  ): Promise<IPageIAiCommerceSubOrder> {
    try {
      return await patchaiCommerceBuyerOrdersOrderIdSubOrders({
        buyer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific sub-order for an order
   * (ai_commerce_sub_orders).
   *
   * The endpoint fetches all business-relevant details for a single sub-order,
   * identified by both the parent orderId and the subOrderId. These may include
   * fulfillment status, pricing breakdown, seller and channel context, and
   * shipping/tracking references. Business rules enforce permissions based on
   * account type and order relationship. Buyers may access their own
   * sub-orders, sellers only their own, and administrators any, with
   * role-specific views for sensitive/aggregated fields.
   *
   * Underlying storage comes from the ai_commerce_sub_orders table, which links
   * each segmented order to its top-level order and responsible seller. Not
   * found or permission errors are handled according to privacy and compliance
   * policies. Use with PATCH for sub-order index and POST for creation. This
   * operation is required for operational tracking, partial fulfillment, and
   * customer care representing complex orders.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order.
   * @param subOrderId Unique identifier of the target sub-order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":subOrderId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("subOrderId")
    subOrderId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSubOrder> {
    try {
      return await getaiCommerceBuyerOrdersOrderIdSubOrdersSubOrderId({
        buyer,
        orderId,
        subOrderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
