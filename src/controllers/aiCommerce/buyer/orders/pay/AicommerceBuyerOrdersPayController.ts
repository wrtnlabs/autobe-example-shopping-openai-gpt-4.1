import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerOrdersOrderIdPay } from "../../../../../providers/postaiCommerceBuyerOrdersOrderIdPay";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";

import { IAiCommercePayments } from "../../../../../api/structures/IAiCommercePayments";

@Controller("/aiCommerce/buyer/orders/:orderId/pay")
export class AicommerceBuyerOrdersPayController {
  /**
   * Initiate payment for an order by creating a payment record
   * (ai_commerce_payments).
   *
   * This operation starts the payment process for a specific order. The
   * endpoint is intended for the buyer who owns the order
   * (ai_commerce_orders.buyer_id). The buyer submits payment information
   * (method, amount, provider details) that is then validated against order
   * status (only allowed when order is in a 'payment_pending' state), amount,
   * and business rules.
   *
   * Upon valid request, a new ai_commerce_payments entry is created and linked
   * to the order via ai_commerce_order_payments. The operation is audit-logged
   * for compliance and traceability. If the order is ineligible for payment
   * (already paid, cancelled, etc.), an error is returned with a descriptive
   * business reason.
   *
   * All payment attempts, successes, and failures are recorded for legal
   * evidence and refund/audit purposes. Only the owner (buyer) of the order may
   * submit payment using this endpoint.
   *
   * @param connection
   * @param orderId Order ID for which payment is being initiated
   *   (ai_commerce_orders.id).
   * @param body Payment initiation payload: method, amount, provider info, and
   *   related fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommercePayments.ICreate,
  ): Promise<IAiCommercePayments> {
    try {
      return await postaiCommerceBuyerOrdersOrderIdPay({
        buyer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
