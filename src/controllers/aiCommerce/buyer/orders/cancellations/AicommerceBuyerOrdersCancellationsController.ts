import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerOrdersOrderIdCancellations } from "../../../../../providers/postaiCommerceBuyerOrdersOrderIdCancellations";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerOrdersOrderIdCancellations } from "../../../../../providers/patchaiCommerceBuyerOrdersOrderIdCancellations";
import { getaiCommerceBuyerOrdersOrderIdCancellationsCancellationId } from "../../../../../providers/getaiCommerceBuyerOrdersOrderIdCancellationsCancellationId";
import { putaiCommerceBuyerOrdersOrderIdCancellationsCancellationId } from "../../../../../providers/putaiCommerceBuyerOrdersOrderIdCancellationsCancellationId";

import { IAiCommerceOrderCancellation } from "../../../../../api/structures/IAiCommerceOrderCancellation";
import { IPageIAiCommerceOrderCancellation } from "../../../../../api/structures/IPageIAiCommerceOrderCancellation";

@Controller("/aiCommerce/buyer/orders/:orderId/cancellations")
export class AicommerceBuyerOrdersCancellationsController {
  /**
   * Create a new order cancellation request (ai_commerce_order_cancellations).
   *
   * Allows an eligible actor (order buyer, or associated seller) to submit a
   * new cancellation for an order as per the ai_commerce_order_cancellations
   * schema. All input fields are validated: association between order, items,
   * actor is checked, and business/permissions logic ensures duplicates or
   * erroneous states are rejected.
   *
   * The input includes cancellation reason, relevant item info, and is created
   * with proper linkage. Upon creation, returns the full record with associated
   * IDs, status, time markers, and rationale. Audit records and workflow
   * triggers are updated as required by compliance.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order for which a
   *   cancellation is being created.
   * @param body Order cancellation creation data, as per
   *   IAiCommerceOrderCancellation.ICreate DTO structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderCancellation.ICreate,
  ): Promise<IAiCommerceOrderCancellation> {
    try {
      return await postaiCommerceBuyerOrdersOrderIdCancellations({
        buyer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list order cancellations for an order
   * (ai_commerce_order_cancellations).
   *
   * This operation enables users (order owner, involved seller, or admin) to
   * search, filter, paginate, and sort cancellation requests associated with a
   * specific order. Leveraging the ai_commerce_order_cancellations schema,
   * search criteria can include status, requester,
   * creation/approval/finalization times, and free-text in reason fields.
   *
   * Advanced search supports flexible queries as per business needs, including
   * full or partial field matching, time range, and status logic. Permission
   * logic restricts access to users authorized for the target order. The
   * response is a paginated list, structured for efficient UI display,
   * analytics, or workflow follow-up.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) for the parent order whose
   *   cancellations are being queried.
   * @param body Search criteria, sorting, and pagination info as per
   *   IAiCommerceOrderCancellation.IRequest DTO structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderCancellation.IRequest,
  ): Promise<IPageIAiCommerceOrderCancellation> {
    try {
      return await patchaiCommerceBuyerOrdersOrderIdCancellations({
        buyer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific order cancellation record
   * (ai_commerce_order_cancellations).
   *
   * Allows an authorized user (order buyer, associated seller for item(s), or
   * admin) to fetch complete information for a particular order cancellation
   * record. The ai_commerce_order_cancellations table is the backing schema.
   * Enforces strict validation: verifies the cancellation record exists,
   * matches the requested order, and that the caller is entitled (as owner,
   * seller, or admin) to view it.
   *
   * Returned data includes all business fieldsâ€”status, time markers, actor and
   * order IDs, reason for cancellation, and related workflow/context fields.
   * Used for timeline and audit review in service and compliance flows or UI
   * detail pages.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the parent order which the
   *   cancellation is tied to.
   * @param cancellationId Unique identifier (UUID) of the cancellation record
   *   being requested.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cancellationId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationId")
    cancellationId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrderCancellation> {
    try {
      return await getaiCommerceBuyerOrdersOrderIdCancellationsCancellationId({
        buyer,
        orderId,
        cancellationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an order cancellation request (ai_commerce_order_cancellations).
   *
   * Permits an authorized user (owner, associated seller, or admin) to update
   * fields in a specific order cancellation record for a given order. The
   * ai_commerce_order_cancellations schema supports updates to status, reason,
   * workflow data, subject to business validation (e.g., cannot update after
   * finalization).
   *
   * Permission logic restricts modifications to appropriate states and roles.
   * Full validation ensures record exists, is associated with the order, caller
   * is allowed, and update complies with workflow. The updated record is
   * returned upon success, with audit trace.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order associated with the
   *   cancellation being updated.
   * @param cancellationId Unique identifier (UUID) for the cancellation record
   *   being modified.
   * @param body Update payload for the cancellation record
   *   (IAiCommerceOrderCancellation.IUpdate DTO structure).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cancellationId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationId")
    cancellationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderCancellation.IUpdate,
  ): Promise<IAiCommerceOrderCancellation> {
    try {
      return await putaiCommerceBuyerOrdersOrderIdCancellationsCancellationId({
        buyer,
        orderId,
        cancellationId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
