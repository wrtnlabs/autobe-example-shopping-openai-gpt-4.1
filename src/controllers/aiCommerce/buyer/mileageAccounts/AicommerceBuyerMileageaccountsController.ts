import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceBuyerMileageAccounts } from "../../../../providers/patchaiCommerceBuyerMileageAccounts";
import { BuyerAuth } from "../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../decorators/payload/BuyerPayload";
import { getaiCommerceBuyerMileageAccountsMileageAccountId } from "../../../../providers/getaiCommerceBuyerMileageAccountsMileageAccountId";

import { IPageIAiCommerceMileageAccount } from "../../../../api/structures/IPageIAiCommerceMileageAccount";
import { IAiCommerceMileageAccount } from "../../../../api/structures/IAiCommerceMileageAccount";

@Controller("/aiCommerce/buyer/mileageAccounts")
export class AicommerceBuyerMileageaccountsController {
  /**
   * Paginated and filtered search of mileage accounts for loyalty point
   * balances, by user or admin.
   *
   * Retrieve a paginated, filtered list of mileage accounts associated with
   * users from ai_commerce_mileage_accounts.
   *
   * Query parameters include user ID, account status, creation/update date
   * range, and balance filters. The endpoint supports advanced analytics
   * actions for admins and lets authenticated users review their own loyalty
   * balances, with field masking and row-level permissions according to role.
   *
   * Security is strictly enforced: only users may access their own mileage
   * accounts; admins have unrestricted analytics access. All search criteria
   * and results are auditable, and access is logged for fraud/compliance
   * review.
   *
   * Use cases include loyalty point review, reward analytics, and admin
   * audit/compliance activities. Related operations: account detail view,
   * transaction history for a mileage account, account management, and account
   * auditing.
   *
   * @param connection
   * @param body Criteria and paging controls for mileage account search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceMileageAccount.IRequest,
  ): Promise<IPageIAiCommerceMileageAccount> {
    try {
      return await patchaiCommerceBuyerMileageAccounts({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific mileage account by its unique
   * identifier.
   *
   * This operation retrieves the full set of details for a specific mileage
   * account, referenced by its unique identifier (mileageAccountId). It
   * includes all fields as defined in the ai_commerce_mileage_accounts table:
   * account_code, user_id, balance, currency_code, status, created_at,
   * updated_at, and deleted_at if present.
   *
   * The function is permissioned such that only the account owner, relevant
   * seller, or platform administrator can access this information. This ensures
   * privacy and security for sensitive account data.
   *
   * Mileage account data is critical for both business operations and
   * regulatory compliance, as the account maintains a running history of all
   * reward/incentive points, deductions, and status changes. Any queries to
   * this endpoint should be carefully audited and logged for security
   * purposes.
   *
   * @param connection
   * @param mileageAccountId Unique identifier for the target mileage account.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mileageAccountId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("mileageAccountId")
    mileageAccountId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceMileageAccount> {
    try {
      return await getaiCommerceBuyerMileageAccountsMileageAccountId({
        buyer,
        mileageAccountId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
