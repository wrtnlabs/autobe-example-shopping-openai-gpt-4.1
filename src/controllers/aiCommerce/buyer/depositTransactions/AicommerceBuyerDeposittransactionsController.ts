import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerDepositTransactions } from "../../../../providers/postaiCommerceBuyerDepositTransactions";
import { BuyerAuth } from "../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerDepositTransactions } from "../../../../providers/patchaiCommerceBuyerDepositTransactions";
import { getaiCommerceBuyerDepositTransactionsDepositTransactionId } from "../../../../providers/getaiCommerceBuyerDepositTransactionsDepositTransactionId";

import { IAiCommerceDepositTransaction } from "../../../../api/structures/IAiCommerceDepositTransaction";
import { IPageIAiCommerceDepositTransaction } from "../../../../api/structures/IPageIAiCommerceDepositTransaction";

@Controller("/aiCommerce/buyer/depositTransactions")
export class AicommerceBuyerDeposittransactionsController {
  /**
   * Create a new deposit transaction (recharge, withdrawal, payment, refund)
   * for an account with proper validation and audit.
   *
   * This endpoint creates a new deposit transaction, such as a top-up
   * (recharge), withdrawal, payment, or refund, and adds the corresponding
   * entry in the ai_commerce_deposit_transactions table.
   *
   * Each creation is subject to business rule validation: only supported
   * transaction types are allowed, the affected deposit account must exist and
   * be active, balances are checked for withdrawals/payments, and excessive
   * operations are prevented for anti-fraud and abuse safeguard.
   *
   * Insertions generate an immutable, auditable event, with full details such
   * as type, account, amount, time, and counterparty reference. All actions are
   * logged and propagate updates to account balances atomically. Admins can
   * create transactions for any account; authenticated users can create
   * transactions for their linked account, subject to business logic.
   *
   * Expected error cases: insufficient balance, invalid account, unsupported
   * type, or business rule violation. Related APIs: transaction list/search,
   * account management, transaction audit.
   *
   * @param connection
   * @param body Deposit transaction creation data, including account, type,
   *   amount, and context.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceDepositTransaction.ICreate,
  ): Promise<IAiCommerceDepositTransaction> {
    try {
      return await postaiCommerceBuyerDepositTransactions({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filtered list of deposit transactions using search
   * criteria (for account, type, date, etc).
   *
   * This operation searches for deposit transactions using advanced filtering
   * criteria and returns a paginated result set of transactions from
   * ai_commerce_deposit_transactions.
   *
   * Supported query parameters include account ID, transaction type (recharge,
   * withdraw, payment, refund), status, date ranges, and search keywords.
   * Pagination and sorting options are required for high-volume account
   * histories.
   *
   * Security: Buyers or account owners may view their own transaction history;
   * finance staff and admins have broader access. Role-based field masking and
   * permission checks are enforced.
   *
   * Full audit is available via the transaction's immutable records, with every
   * transaction tied to a specific account and event. Error handling is based
   * on invalid filters, type errors, or exceeding permitted result window
   * sizes.
   *
   * @param connection
   * @param body Criteria for deposit transaction search (account, type, period,
   *   status, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceDepositTransaction.IRequest,
  ): Promise<IPageIAiCommerceDepositTransaction> {
    try {
      return await patchaiCommerceBuyerDepositTransactions({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for one deposit transaction (by UUID) from the
   * ai_commerce_deposit_transactions table.
   *
   * This API returns full details for one deposit transaction, uniquely
   * identified by its UUID primary key.
   *
   * The transaction is sourced from the ai_commerce_deposit_transactions table,
   * containing all business metadata, links to account, event type, time, and
   * status. Intended use cases include transaction detail presentation,
   * evidence for audits or disputes, and system financial reporting.
   *
   * Access is limited by role: the account owner may view their own data;
   * admins and finance roles may access any transaction. Security and privacy
   * are strictly enforced, with all lookups generating audit trail entries.
   *
   * If the record is not found or is soft-deleted, an error or not-found
   * response is returned. Related operations: transaction search, account
   * retrieval, transaction audit log query.
   *
   * @param connection
   * @param depositTransactionId UUID identifier for the deposit transaction to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":depositTransactionId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("depositTransactionId")
    depositTransactionId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceDepositTransaction> {
    try {
      return await getaiCommerceBuyerDepositTransactionsDepositTransactionId({
        buyer,
        depositTransactionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
