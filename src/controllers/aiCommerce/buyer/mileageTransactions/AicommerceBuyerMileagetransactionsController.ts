import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceBuyerMileageTransactions } from "../../../../providers/patchaiCommerceBuyerMileageTransactions";
import { BuyerAuth } from "../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../decorators/payload/BuyerPayload";
import { getaiCommerceBuyerMileageTransactionsMileageTransactionId } from "../../../../providers/getaiCommerceBuyerMileageTransactionsMileageTransactionId";

import { IPageIAiCommerceMileageTransaction } from "../../../../api/structures/IPageIAiCommerceMileageTransaction";
import { IAiCommerceMileageTransaction } from "../../../../api/structures/IAiCommerceMileageTransaction";

@Controller("/aiCommerce/buyer/mileageTransactions")
export class AicommerceBuyerMileagetransactionsController {
  /**
   * List and search mileage transactions with filtering and pagination.
   *
   * This operation searches and returns a paginated list of mileage
   * transactions, including accrual, redemption, adjustment, and expiration
   * events. It leverages parameters specified in
   * IAiCommerceMileageTransaction.IRequest to filter by type, date,
   * user/account, status, and reference entity as appropriate.
   *
   * Designed for both user self-audit and administrative/business use, this
   * operation supports compliance and account analytics use cases. Role-based
   * filtering is applied to ensure that users only see their own transactions,
   * while admins may filter globally or per user.
   *
   * Results are tailored for performance and summary, and detailed event or
   * audit data may be included based on role and business rule logic. Standard
   * pagination and sorting fields are supported.
   *
   * @param connection
   * @param body Query criteria for mileage transactions, including filtering
   *   and pagination parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceMileageTransaction.IRequest,
  ): Promise<IPageIAiCommerceMileageTransaction> {
    try {
      return await patchaiCommerceBuyerMileageTransactions({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details of a mileage transaction by unique ID.
   *
   * This operation fetches the details of an individual mileage transaction,
   * such as accrual, usage/redemption, adjustment, or expiration events for
   * audit or user self-service purposes. Data fields include transaction type
   * (accrual, redemption, adjustment), amount, status, date, reference entity,
   * and audit metadata as stored in the ai_commerce_mileage_transactions
   * table.
   *
   * Access is limited to the transaction owner (buyer or seller) and
   * administrator roles, with privacy and compliance strictly enforced. All
   * query actions are logged for security and auditability. Results include all
   * business-critical metadata and fields established in the database schema.
   *
   * @param connection
   * @param mileageTransactionId Unique identifier for the mileage transaction
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mileageTransactionId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("mileageTransactionId")
    mileageTransactionId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceMileageTransaction> {
    try {
      return await getaiCommerceBuyerMileageTransactionsMileageTransactionId({
        buyer,
        mileageTransactionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
