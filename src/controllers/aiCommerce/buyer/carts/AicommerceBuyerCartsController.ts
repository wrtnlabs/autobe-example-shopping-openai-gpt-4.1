import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerCarts } from "../../../../providers/postaiCommerceBuyerCarts";
import { BuyerAuth } from "../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerCarts } from "../../../../providers/patchaiCommerceBuyerCarts";
import { getaiCommerceBuyerCartsCartId } from "../../../../providers/getaiCommerceBuyerCartsCartId";
import { putaiCommerceBuyerCartsCartId } from "../../../../providers/putaiCommerceBuyerCartsCartId";
import { deleteaiCommerceBuyerCartsCartId } from "../../../../providers/deleteaiCommerceBuyerCartsCartId";

import { IAiCommerceCart } from "../../../../api/structures/IAiCommerceCart";
import { IPageIAiCommerceCart } from "../../../../api/structures/IPageIAiCommerceCart";

@Controller("/aiCommerce/buyer/carts")
export class AicommerceBuyerCartsController {
  /**
   * Create a new shopping cart (ai_commerce_carts) for buyer or guest session.
   *
   * This operation initializes a new shopping cart in the ai_commerce_carts
   * table for either an authenticated buyer (user) or a guest (using session
   * tracking). Optionally, the request may specify a linked store for
   * store-centric checkout.
   *
   * Carts automatically attach default status and timestamps, and are unique
   * per buyer session. For guests, device/cookie/session token associations are
   * provisioned. Cart creation logic includes audit record and supports cart
   * merging if a previous draft exists for this user/session.
   *
   * Upon successful creation, returns the full cart model, including primary
   * key and relevant metadata. Access, privacy, and session logic follow
   * platform data protections and audit trails.
   *
   * @param connection
   * @param body Shopping cart creation request—may include buyer/store/session
   *   references as needed.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceCart.ICreate,
  ): Promise<IAiCommerceCart> {
    try {
      return await postaiCommerceBuyerCarts({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of shopping carts (ai_commerce_carts)
   * with advanced filtering.
   *
   * This operation returns a paginated, optionally filtered collection of
   * shopping cart records from the ai_commerce_carts table. Carts may belong to
   * registered buyers or represent guest/anonymous sessions, with data filtered
   * according to the user's role and permissions.
   *
   * Supports searching by status (active, draft, checked_out, expired), total
   * quantity, store association, timestamps, and buyer identity (where
   * permitted). Multiple query filters and sorting can be applied for analytics
   * or cross-device cart management.
   *
   * The response provides summary information (cart id, status, total items,
   * associated store and buyer if applicable, timestamps) to support shopping
   * experiences and administrative management. Security is handled to ensure no
   * unauthorized cart cross-access; buyers may view only their own carts,
   * admins can search across all records.
   *
   * Audit trails and data privacy policies are enforced in the query logic, in
   * accordance with platform rules.
   *
   * @param connection
   * @param body Filtering and pagination options for searching shopping carts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceCart.IRequest,
  ): Promise<IPageIAiCommerceCart.ISummary> {
    try {
      return await patchaiCommerceBuyerCarts({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single shopping cart detail by ID (ai_commerce_carts) for owner
   * or admin.
   *
   * This operation returns the full shopping cart record for a given cartId
   * (ai_commerce_carts primary key), including buyer details (if present),
   * associated store info, cart item list, and audit-compliant timestamps.
   * Intended for enabling the buyer's multi-session shopping continuity,
   * cross-device recovery, or admin purposes.
   *
   * Buyers may use this endpoint to resume, review, or recover their own
   * pending/active cart. Admins may use it for diagnostics or support. Strict
   * access control ensures cart data remains private to the owner; guest carts
   * require secure session tracking. Inactive/deleted/expired carts are
   * presented only if platform policy allows.
   *
   * Relations—cart items, buyer/store references—are eager-loaded to minimize
   * round trips in client UX.
   *
   * Security, privacy consent, and audit logging are followed in line with
   * platform compliance. Errors are returned for unauthorized access, missing
   * or invalid cart IDs.
   *
   * @param connection
   * @param cartId UUID of the shopping cart to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCart> {
    try {
      return await getaiCommerceBuyerCartsCartId({
        buyer,
        cartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update attributes of an existing shopping cart (ai_commerce_carts) by ID.
   *
   * This operation updates the main properties of an existing cart
   * (ai_commerce_carts) including status (e.g., activating, expiring),
   * associated store reference, or cart-level notes (if platform supports). Not
   * intended for adding/removing items—use item endpoints for those actions.
   *
   * Only the cart owner (buyer) or an admin may update their cart. Platform
   * rules enforce that only valid status transitions, and denial of concurrent
   * conflicting changes, are permitted. All updates produce audit log entries
   * for legal and troubleshooting purposes. Error responses are returned for
   * unauthorized updates, invalid status transitions, or data constraint
   * violations.
   *
   * @param connection
   * @param cartId UUID of the shopping cart to update.
   * @param body Fields to update in the shopping cart (status, store, or
   *   allowed modifications).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCart.IUpdate,
  ): Promise<IAiCommerceCart> {
    try {
      return await putaiCommerceBuyerCartsCartId({
        buyer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (logical removal) of a shopping cart (ai_commerce_carts) by ID,
   * preserving for audit/compliance.
   *
   * This operation marks a shopping cart as deleted (ai_commerce_carts),
   * performing a soft delete by setting the deleted_at timestamp without
   * physically erasing the row from the database. Only the cart's owner (buyer)
   * or a platform admin may initiate this removal.
   *
   * The logical deletion preserves the cart for possible recovery, platform
   * analytics, and legal evidence retention per privacy law. All delete
   * operations are entered into the audit log with actor and before/after state
   * snapshots. If a cart is referenced by orders, merges, or other entities,
   * deletion is allowed only if business integrity is unaffected. Errors result
   * for unauthorized or invalid delete actions.
   *
   * @param connection
   * @param cartId UUID of the shopping cart to delete (soft-delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerCartsCartId({
        buyer,
        cartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
