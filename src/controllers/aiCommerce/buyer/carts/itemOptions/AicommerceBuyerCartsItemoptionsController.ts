import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerCartsCartIdItemOptions } from "../../../../../providers/postaiCommerceBuyerCartsCartIdItemOptions";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerCartsCartIdItemOptions } from "../../../../../providers/patchaiCommerceBuyerCartsCartIdItemOptions";
import { getaiCommerceBuyerCartsCartIdItemOptionsItemOptionId } from "../../../../../providers/getaiCommerceBuyerCartsCartIdItemOptionsItemOptionId";
import { putaiCommerceBuyerCartsCartIdItemOptionsItemOptionId } from "../../../../../providers/putaiCommerceBuyerCartsCartIdItemOptionsItemOptionId";
import { deleteaiCommerceBuyerCartsCartIdItemOptionsItemOptionId } from "../../../../../providers/deleteaiCommerceBuyerCartsCartIdItemOptionsItemOptionId";

import { IAiCommerceCartItemOption } from "../../../../../api/structures/IAiCommerceCartItemOption";
import { IPageIAiCommerceCartItemOption } from "../../../../../api/structures/IPageIAiCommerceCartItemOption";

@Controller("/aiCommerce/buyer/carts/:cartId/itemOptions")
export class AicommerceBuyerCartsItemoptionsController {
  /**
   * Add a new cart item option (ai_commerce_cart_item_options) for a specific
   * cart.
   *
   * Buyers can add a new cart item option (e.g., size/color) by posting to
   * their cart's itemOptions subroute. The body
   * (IAiCommerceCartItemOption.ICreate) provides option details (option name,
   * value, associated cartItem, etc.). Security: only the cart owner may use
   * this, and product/option validations are enforced. Errors for unauthorized
   * access, invalid options, or business-rule conflicts. On success, returns
   * the newly created option object as defined in schema.
   *
   * @param connection
   * @param cartId Identifier of the shopping cart to which the option is being
   *   added.
   * @param body Information about the cart item option to be created (option
   *   name/value, associated cart item, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartItemOption.ICreate,
  ): Promise<IAiCommerceCartItemOption> {
    try {
      return await postaiCommerceBuyerCartsCartIdItemOptions({
        buyer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list cart item options (ai_commerce_cart_item_options) for a
   * specific cart.
   *
   * Given a cart ID, an authenticated buyer can fetch a paginated/searchable
   * list of item option selections. Filtering and sorting logic are supplied in
   * a request body object per schema (IAiCommerceCartItemOption.IRequest).
   * Enforces buyer ownership, cart status, and security. The endpoint uses
   * ai_commerce_cart_item_options for the result, with audit-compliant business
   * logic. Proper path parameters, types, and role assignment ensure schema
   * conformance.
   *
   * @param connection
   * @param cartId Identifier of the shopping cart to retrieve item options
   *   from.
   * @param body Search, filter, and pagination criteria for listing cart item
   *   options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartItemOption.IRequest,
  ): Promise<IPageIAiCommerceCartItemOption> {
    try {
      return await patchaiCommerceBuyerCartsCartIdItemOptions({
        buyer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific cart item option (ai_commerce_cart_item_options)
   * by ID.
   *
   * A buyer can look up details for a specific item option in their cart by
   * providing both the parent cartId and optionId. The handler validates cart
   * existence, option presence, and buyer ownership. Returns full option data
   * if found and accessible. Denies or errors if the references are invalid,
   * item is deleted, or the buyer is unauthorized. All structure, access, and
   * output types match schema requirements.
   *
   * @param connection
   * @param cartId Identifier of the shopping cart containing the option.
   * @param itemOptionId Identifier of the specific cart item option to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":itemOptionId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("itemOptionId")
    itemOptionId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCartItemOption> {
    try {
      return await getaiCommerceBuyerCartsCartIdItemOptionsItemOptionId({
        buyer,
        cartId,
        itemOptionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a cart item option (ai_commerce_cart_item_options) in a specific
   * cart.
   *
   * Buyers may update a specific cart item option, such as changing value or
   * name (e.g., from 'Red' to 'Blue' for color, or updating size). Requires
   * both cartId and optionId as path params, verifies identities, and enforces
   * buyer-only access. Only allowed option names/values (per item/product) are
   * accepted. Output is the fully updated item option record, all
   * structure/statistics per schema.
   *
   * @param connection
   * @param cartId Identifier of the cart containing the option.
   * @param itemOptionId Identifier of the cart item option to update.
   * @param body Fields to update for the cart item option (option name, value,
   *   etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":itemOptionId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("itemOptionId")
    itemOptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartItemOption.IUpdate,
  ): Promise<IAiCommerceCartItemOption> {
    try {
      return await putaiCommerceBuyerCartsCartIdItemOptionsItemOptionId({
        buyer,
        cartId,
        itemOptionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft delete) a cart item option (ai_commerce_cart_item_options)
   * from a cart.
   *
   * Buyers may delete a previously chosen cart item option by providing the
   * cartId and itemOptionId. The item is soft-deleted for compliance/audit
   * (preserved, not erased). Must be a valid cart/option and owned by the
   * buyer. Deny if ID invalid, ownership not present, or already
   * deleted/checked out. Confirms deletion by status (no body).
   *
   * @param connection
   * @param cartId ID of the shopping cart containing the option.
   * @param itemOptionId ID of the cart item option to remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":itemOptionId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("itemOptionId")
    itemOptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerCartsCartIdItemOptionsItemOptionId({
        buyer,
        cartId,
        itemOptionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
