import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerCartsCartIdItems } from "../../../../../providers/postaiCommerceBuyerCartsCartIdItems";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerCartsCartIdItems } from "../../../../../providers/patchaiCommerceBuyerCartsCartIdItems";
import { getaiCommerceBuyerCartsCartIdItemsCartItemId } from "../../../../../providers/getaiCommerceBuyerCartsCartIdItemsCartItemId";
import { putaiCommerceBuyerCartsCartIdItemsCartItemId } from "../../../../../providers/putaiCommerceBuyerCartsCartIdItemsCartItemId";
import { deleteaiCommerceBuyerCartsCartIdItemsCartItemId } from "../../../../../providers/deleteaiCommerceBuyerCartsCartIdItemsCartItemId";

import { IAiCommerceCartItem } from "../../../../../api/structures/IAiCommerceCartItem";
import { IPageIAiCommerceCartItem } from "../../../../../api/structures/IPageIAiCommerceCartItem";

@Controller("/aiCommerce/buyer/carts/:cartId/items")
export class AicommerceBuyerCartsItemsController {
  /**
   * Add a new item (ai_commerce_cart_items) to a shopping cart by cartId
   * (ai_commerce_carts).
   *
   * Creates a new cart item in ai_commerce_cart_items for a specified cart (by
   * cartId). Request specifies product/variant, quantity, and option selections
   * if applicable. The operation validates product existence, inventory, cart
   * status (must be open), and merges with existing item if same
   * product/variant/options already present, incrementing quantity up to
   * limits.
   *
   * Triggers cart-level recalculation for total quantity and status, returns
   * the newly created/merged cart item as confirmation. Only the cart's owner
   * (buyer) or admin can add items. Audit trails, error scenarios (insufficient
   * inventory/invalid product) handled as per business logic.
   *
   * @param connection
   * @param cartId UUID of the cart to add the item to.
   * @param body Details of the item to add to the cart, including
   *   product/variant reference, options, and quantity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartItem.ICreate,
  ): Promise<IAiCommerceCartItem> {
    try {
      return await postaiCommerceBuyerCartsCartIdItems({
        buyer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filterable list of cart items
   * (ai_commerce_cart_items) from a specific cart.
   *
   * This operation lists or searches the set of items present in the specified
   * shopping cart (specified by cartId, referencing ai_commerce_cart_items for
   * that cart). Returns paginated detail including item product/variant
   * associations, selected options, quantity, price snapshot, and status.
   *
   * Useful for client UIs, analytics, pre-checkout validation, or cart content
   * auditing. Query filters (by product, variant, status) and pagination
   * controls support performance for carts with large item counts. Buyers see
   * only their own cart's contents; admins may use for diagnostics. Errors are
   * returned for ownership mismatch or invalid cart reference.
   *
   * @param connection
   * @param cartId UUID of the cart whose items you want to list.
   * @param body Query parameters and filters for cart item search or paging.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartItem.IRequest,
  ): Promise<IPageIAiCommerceCartItem.ISummary> {
    try {
      return await patchaiCommerceBuyerCartsCartIdItems({
        buyer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single cart item detail (ai_commerce_cart_items) by cartId/itemId.
   *
   * Returns a detailed record for one cart item, by cartId and cartItemId.
   * Includes product/variant data, selected options, pricing at time of
   * addition, quantity, and audit timestamps. Owner (buyer) or admin can fetch
   * their own cart's item. Use for rendering cart item inspection screens or
   * preparing for item update/deletion.
   *
   * Access is limited to the cart owner (buyer) or admins. Error cases include
   * invalid IDs, mismatched cart ownership, or unauthorized access. The
   * operation loads all relevant relations, so clients need not fetch product
   * separately.
   *
   * @param connection
   * @param cartId UUID of the cart which owns the item.
   * @param cartItemId UUID of the cart item to fetch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartItemId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCartItem> {
    try {
      return await getaiCommerceBuyerCartsCartIdItemsCartItemId({
        buyer,
        cartId,
        cartItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific shopping cart item (ai_commerce_cart_items) for a buyer.
   *
   * Buyers can update a specific cart item by providing both the parent cart ID
   * and the cart item ID as path parameters. Modifiable fields generally
   * include variant (if applicable) and quantity. Validation ensures the cart
   * and item are active, ownership is correct, and that the new
   * product/variant/quantity are allowed and available. Errors result if the
   * references are invalid, the item is no longer editable (e.g., already
   * checked out/deleted), or the buyer does not have ownership. The operation
   * produces a fully updated cart item on success. All business and audit rules
   * are respected.
   *
   * @param connection
   * @param cartId Unique ID of the parent shopping cart to which the item
   *   belongs.
   * @param cartItemId Unique ID of the cart item to update within the cart.
   * @param body Payload containing fields to update in the cart item, such as
   *   variant ID and quantity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartItemId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartItem.IUpdate,
  ): Promise<IAiCommerceCartItem> {
    try {
      return await putaiCommerceBuyerCartsCartIdItemsCartItemId({
        buyer,
        cartId,
        cartItemId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft delete) a cart item from a shopping cart
   * (ai_commerce_cart_items).
   *
   * Buyers can remove an item from their shopping cart by specifying both cart
   * ID and cart item ID. The operation marks the item as deleted, does not
   * physically remove it (supports audit traceability/compliance), and only
   * succeeds if the cart/item are valid and actively owned by the buyer. Errors
   * and denials occur for invalid references, unauthorized access, or
   * business-rule violations such as trying to delete already checked out
   * items. Maintains audit logs as required.
   *
   * @param connection
   * @param cartId Unique ID of the shopping cart.
   * @param cartItemId Unique ID of the cart item to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartItemId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("cartItemId")
    cartItemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerCartsCartIdItemsCartItemId({
        buyer,
        cartId,
        cartItemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
