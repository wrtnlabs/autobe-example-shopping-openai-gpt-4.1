import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerInquiries } from "../../../../providers/postaiCommerceBuyerInquiries";
import { BuyerAuth } from "../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../decorators/payload/BuyerPayload";
import { putaiCommerceBuyerInquiriesInquiryId } from "../../../../providers/putaiCommerceBuyerInquiriesInquiryId";
import { deleteaiCommerceBuyerInquiriesInquiryId } from "../../../../providers/deleteaiCommerceBuyerInquiriesInquiryId";

import { IAiCommerceInquiry } from "../../../../api/structures/IAiCommerceInquiry";

@Controller("/aiCommerce/buyer/inquiries")
export class AicommerceBuyerInquiriesController {
  /**
   * Create a new product inquiry (ai_commerce_inquiries table).
   *
   * Enables buyers to post a new inquiry about a product. The operation is
   * authenticated and tied to the buyer's identity for accountability and
   * follow-up communication. The inquiry content is validated against platform
   * moderation rules before persistence.
   *
   * Mandatory fields include the product being asked about, the inquiry text,
   * and intended visibility (public/private) as allowed. The system creates the
   * inquiry with appropriate status, links to the involved product and user,
   * and initializes audit trails.
   *
   * The detailed inquiry object, complete with metadata and association, is
   * returned upon success. Possible errors include missing required fields,
   * unauthorized access, or failed validation (e.g., moderation block).
   *
   * @param connection
   * @param body Information to create a new inquiry, including product,
   *   question, visibility, etc. per IAiCommerceInquiry.ICreate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceInquiry.ICreate,
  ): Promise<IAiCommerceInquiry> {
    try {
      return await postaiCommerceBuyerInquiries({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a product inquiry (ai_commerce_inquiries table).
   *
   * Allows the original inquiry author (buyer) or an administrator to update
   * details of a product inquiry. The inquiryId path parameter identifies the
   * record to update, and the request body supplies the fields to modify (such
   * as question text or visibility status).
   *
   * Permissions are strictly enforced; only the original author or admins may
   * update the inquiry, and the operation fails if the user lacks rights or if
   * moderation locks the inquiry. Each update action logs an immutable snapshot
   * for compliance.
   *
   * The updated inquiry entity is returned, showing new and unchanged fields.
   * Errors return reasons such as field validation, non-existent inquiry, or
   * permission issues.
   *
   * @param connection
   * @param inquiryId Unique identifier of the inquiry to update.
   * @param body Fields to update in the inquiry, such as content, visibility,
   *   etc., formatted as IAiCommerceInquiry.IUpdate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":inquiryId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceInquiry.IUpdate,
  ): Promise<IAiCommerceInquiry> {
    try {
      return await putaiCommerceBuyerInquiriesInquiryId({
        buyer,
        inquiryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (logically) a product inquiry (soft delete via ai_commerce_inquiries
   * table).
   *
   * This endpoint enables a user to mark an inquiry as deleted by setting its
   * deleted_at timestamp (soft delete). Only the creator of the inquiry or an
   * admin is allowed to perform this action, ensuring accountability and
   * traceability.
   *
   * The soft delete operation leaves the inquiry in the database for evidence,
   * audit, and future review, but it is not returned in normal user or search
   * queries. Attempts to delete an inquiry by an unauthorized actor or if the
   * inquiry does not exist will result in a precise error response.
   *
   * The deletion is logged in the audit trail, including the user identity and
   * timestamp. No response body is returned on success, but errors convey
   * validation or authorization issues.
   *
   * @param connection
   * @param inquiryId Unique identifier of the inquiry to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":inquiryId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerInquiriesInquiryId({
        buyer,
        inquiryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
