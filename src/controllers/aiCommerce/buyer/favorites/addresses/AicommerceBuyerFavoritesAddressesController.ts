import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerFavoritesAddresses } from "../../../../../providers/postaiCommerceBuyerFavoritesAddresses";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerFavoritesAddresses } from "../../../../../providers/patchaiCommerceBuyerFavoritesAddresses";
import { getaiCommerceBuyerFavoritesAddressesFavoriteAddressId } from "../../../../../providers/getaiCommerceBuyerFavoritesAddressesFavoriteAddressId";
import { putaiCommerceBuyerFavoritesAddressesFavoriteAddressId } from "../../../../../providers/putaiCommerceBuyerFavoritesAddressesFavoriteAddressId";
import { deleteaiCommerceBuyerFavoritesAddressesFavoriteAddressId } from "../../../../../providers/deleteaiCommerceBuyerFavoritesAddressesFavoriteAddressId";

import { IAiCommerceFavoritesAddress } from "../../../../../api/structures/IAiCommerceFavoritesAddress";
import { IPageIAiCommerceFavoritesAddress } from "../../../../../api/structures/IPageIAiCommerceFavoritesAddress";

@Controller("/aiCommerce/buyer/favorites/addresses")
export class AicommerceBuyerFavoritesAddressesController {
  /**
   * Add a new favorite address for the current user
   * (ai_commerce_favorites_addresses).
   *
   * Register a user address as a favorite, storing a snapshot of the address
   * state and optional organizational information such as folder and label.
   * Business logic ensures no duplicate favoriting of the same address per
   * user. On success, a snapshot record is created for auditing/compliance.
   *
   * Authorization: Only available to buyers or sellers for their own addresses.
   * Attempts to favorite someone else's address or re-favorite the same address
   * are rejected with errors. All new entries reference the current state for
   * snapshot integrity.
   *
   * Based on ai_commerce_favorites_addresses. The request follows
   * IAiCommerceFavoritesAddress.ICreate, and the response includes the newly
   * created favorite record (IAiCommerceFavoritesAddress).
   *
   * @param connection
   * @param body Request body containing address ID and optional folder/label
   *   for favoriting
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesAddress.ICreate,
  ): Promise<IAiCommerceFavoritesAddress> {
    try {
      return await postaiCommerceBuyerFavoritesAddresses({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve favorite addresses for the current user
   * (ai_commerce_favorites_addresses).
   *
   * Fetch a list of favorite addresses belonging to the authenticated buyer or
   * seller with support for advanced searching, sorting, and pagination.
   * Filters can include folder assignment, labels, and primary address status.
   * The request body follows IAiCommerceFavoritesAddress.IRequest, and results
   * are returned as paginated summaries.
   *
   * Security: Accessible exclusively to authenticated buyers or sellers. Each
   * result only includes addresses favorited by the current user. Sensitive
   * information is filtered based on user permissions. Audit logging applies
   * per compliance rules.
   *
   * Underlying Prisma entity is ai_commerce_favorites_addresses, supporting
   * compliance, snapshotting, and organization via folders. Edge cases such as
   * unauthorized access or data not existing are handled appropriately.
   *
   * @param connection
   * @param body Criteria for filtering, sorting, and paginating the favorite
   *   addresses of the current user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesAddress.IRequest,
  ): Promise<IPageIAiCommerceFavoritesAddress.ISummary> {
    try {
      return await patchaiCommerceBuyerFavoritesAddresses({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific favorite address with snapshot and metadata
   * (ai_commerce_favorites_addresses).
   *
   * Fetch the detailed information for a user's favorite address, including all
   * snapshot metadata, folder assignment, label, and primary status. This
   * operation checks the ownership of the favorite before exposing any
   * information, referencing deleted_at for soft-deleted records.
   *
   * Security: Only the buyer or seller who owns the favorite can access the
   * information. Non-owners or unauthenticated callers are denied access.
   * Includes compliance-required details for audit/logging.
   *
   * This operation is based on the ai_commerce_favorites_addresses schema,
   * using the favoriteAddressId as the primary lookup. Errors are handled for
   * non-existent or unauthorized records. Snapshot audit is maintained.
   *
   * @param connection
   * @param favoriteAddressId Unique identifier for the favorite address record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":favoriteAddressId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteAddressId")
    favoriteAddressId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceFavoritesAddress> {
    try {
      return await getaiCommerceBuyerFavoritesAddressesFavoriteAddressId({
        buyer,
        favoriteAddressId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update organization or metadata of an existing favorite address
   * (ai_commerce_favorites_addresses).
   *
   * Modify a user's favorite address, such as moving it to a different folder,
   * changing the label, or toggling its primary status. The operation checks
   * favorite ownership, ensuring only the owning buyer or seller can update
   * their favorites. Any changes are snapshot-audited for compliance purposes.
   *
   * Security: Buyers or sellers can only modify favorites they own. Setting
   * multiple primary favorites or organizing into non-existent folders is
   * validated and rejected as needed. The updatedAt field of
   * ai_commerce_favorites_addresses is updated.
   *
   * Complies with the business organization's logic described in
   * IAiCommerceFavoritesAddress.IUpdate request body schema, responding with
   * the updated favorite's detailed info.
   *
   * @param connection
   * @param favoriteAddressId Unique identifier of the favorite address to
   *   update
   * @param body Changes to apply to folder, label, primary status, or
   *   organization for an address favorite
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":favoriteAddressId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteAddressId")
    favoriteAddressId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceFavoritesAddress.IUpdate,
  ): Promise<IAiCommerceFavoritesAddress> {
    try {
      return await putaiCommerceBuyerFavoritesAddressesFavoriteAddressId({
        buyer,
        favoriteAddressId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft delete) a favorite address for the user
   * (ai_commerce_favorites_addresses).
   *
   * Logically deletes a favorite address belonging to the requesting buyer or
   * seller. This operation performs a soft delete (setting deleted_at) in
   * accordance with compliance and business requirements. Users can only delete
   * their own favorites; unauthorized or already-deleted records trigger
   * errors.
   *
   * Audit trail and compliance rules are enforced. The favorite is not
   * physically erased, retaining snapshot and traceability for legal/audit
   * scenarios. The AICommerceFavoritesAddress schema is referenced throughout
   * the business operation.
   *
   * @param connection
   * @param favoriteAddressId ID of the favorite address to remove
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":favoriteAddressId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteAddressId")
    favoriteAddressId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerFavoritesAddressesFavoriteAddressId({
        buyer,
        favoriteAddressId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
