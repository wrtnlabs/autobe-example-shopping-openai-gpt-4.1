import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerFavoritesFolders } from "../../../../../providers/postaiCommerceBuyerFavoritesFolders";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerFavoritesFolders } from "../../../../../providers/patchaiCommerceBuyerFavoritesFolders";
import { getaiCommerceBuyerFavoritesFoldersFolderId } from "../../../../../providers/getaiCommerceBuyerFavoritesFoldersFolderId";
import { putaiCommerceBuyerFavoritesFoldersFolderId } from "../../../../../providers/putaiCommerceBuyerFavoritesFoldersFolderId";
import { deleteaiCommerceBuyerFavoritesFoldersFolderId } from "../../../../../providers/deleteaiCommerceBuyerFavoritesFoldersFolderId";

import { IAiCommerceFavoritesFolder } from "../../../../../api/structures/IAiCommerceFavoritesFolder";
import { IPageIAiCommerceFavoritesFolder } from "../../../../../api/structures/IPageIAiCommerceFavoritesFolder";

@Controller("/aiCommerce/buyer/favorites/folders")
export class AicommerceBuyerFavoritesFoldersController {
  /**
   * Create a new favorites folder for grouping saved items for a buyer
   * (ai_commerce_favorites_folders table).
   *
   * This API endpoint allows an authenticated buyer to create an organizational
   * folder in their favorites collection.
   *
   * Upon invocation, the system ensures the provided folder name is unique to
   * the user and links the folder to the requesting buyer's account.
   * Descriptions (optional) support explanatory or categorizing detail. The
   * operation implements strict validation against duplicate names, prohibited
   * characters, and length limits. When successful, the new folder is
   * immediately available for organizing product, inquiry, or address
   * favorites.
   *
   * Security is enforceable by 'buyer' role authentication. Attempts by
   * unauthorized roles are rejected. The operation references the
   * ai_commerce_favorites_folders table and follows all historical audit and
   * update mechanisms as specified in the Prisma schema commentary.
   *
   * Error handling covers name collisions, forbidden values, and authentication
   * failures. The folder is fully compliant with audit trails and
   * organizational enforcement for user management of favorites. Follow-up
   * actions may include batch organization of existing or future favorites
   * using the new folder.
   *
   * @param connection
   * @param body Information required to create a new favorites folder,
   *   including folder name and description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesFolder.ICreate,
  ): Promise<IAiCommerceFavoritesFolder> {
    try {
      return await postaiCommerceBuyerFavoritesFolders({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve favorite folders for the authenticated user
   * (ai_commerce_favorites_folders).
   *
   * Returns a list of folders used to organize address, product, and inquiry
   * favorites for the current authenticated buyer or seller. Supports searching
   * by folder name, filtering, and advanced organizational structures.
   * Pagination and sorting options are included as per business needs. Each
   * folder shown is owned by the current user only.
   *
   * Security: Buyers or sellers are limited to viewing/managing their folders.
   * Edge cases like non-existent or already-deleted folders are handled
   * transparently, with audit logging as needed.
   *
   * The operation supports compliance requirements for organization, privacy,
   * and user experience business logic. It follows
   * IAiCommerceFavoritesFolder.IRequest request body and returns paginated
   * IAiCommerceFavoritesFolder.ISummary responses.
   *
   * @param connection
   * @param body Folder search, filter, and pagination criteria
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesFolder.IRequest,
  ): Promise<IPageIAiCommerceFavoritesFolder.ISummary> {
    try {
      return await patchaiCommerceBuyerFavoritesFolders({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific favorite folder by ID
   * (ai_commerce_favorites_folders).
   *
   * Fetches metadata and detailed information for a user's favorite folder,
   * including name, description, and organizational state. Ownership is
   * verified, and access is limited to the authenticated buyer or seller who
   * owns the folder. The operation ensures compliance and audit logging.
   *
   * Based on ai_commerce_favorites_folders, and keyed by folderId. Soft-deleted
   * or unauthorized access returns descriptive errors. Audit logic is in place
   * as needed for traceability.
   *
   * @param connection
   * @param folderId Unique identifier for the favorite folder record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":folderId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("folderId")
    folderId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceFavoritesFolder> {
    try {
      return await getaiCommerceBuyerFavoritesFoldersFolderId({
        buyer,
        folderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the name or description of a buyer-owned favorites folder
   * (ai_commerce_favorites_folders).
   *
   * This endpoint allows an authenticated buyer to update the organizational
   * metadata of one of their existing favorites folders by folderId.
   *
   * The system verifies that the buyer owns the folder, prevents renaming to a
   * name already in use in another of the buyer's folders, and enforces all
   * data integrity rules noted in the table documentation. Edits may include
   * changing the folder name or description. Updates use server-side validation
   * for field limits, uniqueness, and character constraints.
   *
   * Audit logging records all updates for compliance and organizational
   * tracking. Ownership is strictly enforced, and any unauthorized update
   * attempt (wrong buyer or insufficient permissions) is rejected. The
   * operation relies on the ai_commerce_favorites_folders schema described in
   * the Prisma file.
   *
   * Successful updates enable buyers to dynamically re-organize their saved
   * content. Errors include unauthorized access, duplicate folder names, or
   * validation issues with the updated data.
   *
   * @param connection
   * @param folderId Unique identifier of the favorites folder to update.
   * @param body Updated folder information: new name and/or description for the
   *   favorites folder.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":folderId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("folderId")
    folderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceFavoritesFolder.IUpdate,
  ): Promise<IAiCommerceFavoritesFolder> {
    try {
      return await putaiCommerceBuyerFavoritesFoldersFolderId({
        buyer,
        folderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft delete) a buyer-owned favorites folder from the system
   * (ai_commerce_favorites_folders).
   *
   * This API endpoint enables a buyer to remove one of their organizing folders
   * from favorites using the folderId parameter. Rather than physical deletion,
   * this is a soft delete, where the deleted_at field is set to the current
   * timestamp, making the folder unavailable for future organization operations
   * but retaining it for compliance/audit.
   *
   * The system checks for buyer ownership before proceeding and reassigns or
   * un-links contained favorites as prescribed by business rules (such as
   * moving favorites to a default folder or leaving them ungrouped).
   *
   * Security is enforced such that only the owner can delete their folder.
   * Audit trails reflect the action, including actor, timestamp, and
   * before/after folder state. The operation references the
   * ai_commerce_favorites_folders schema's description and policy for safe,
   * reversible data deletion and traceability.
   *
   * Error scenarios include attempts to delete non-owned folders, invalid IDs,
   * or folders already deleted. No response body is provided on success.
   *
   * @param connection
   * @param folderId Unique identifier of the favorites folder to remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":folderId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("folderId")
    folderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerFavoritesFoldersFolderId({
        buyer,
        folderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
