import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerFavoritesProducts } from "../../../../../providers/postaiCommerceBuyerFavoritesProducts";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerFavoritesProducts } from "../../../../../providers/patchaiCommerceBuyerFavoritesProducts";
import { getaiCommerceBuyerFavoritesProductsFavoriteProductId } from "../../../../../providers/getaiCommerceBuyerFavoritesProductsFavoriteProductId";
import { putaiCommerceBuyerFavoritesProductsFavoriteProductId } from "../../../../../providers/putaiCommerceBuyerFavoritesProductsFavoriteProductId";
import { deleteaiCommerceBuyerFavoritesProductsFavoriteProductId } from "../../../../../providers/deleteaiCommerceBuyerFavoritesProductsFavoriteProductId";

import { IAiCommerceFavoritesProducts } from "../../../../../api/structures/IAiCommerceFavoritesProducts";
import { IAiCommercePageIFavoritesProduct } from "../../../../../api/structures/IAiCommercePageIFavoritesProduct";
import { IAiCommerceFavoritesProduct } from "../../../../../api/structures/IAiCommerceFavoritesProduct";

@Controller("/aiCommerce/buyer/favorites/products")
export class AicommerceBuyerFavoritesProductsController {
  /**
   * Create a new product favorite and return the record with snapshot and
   * folder data.
   *
   * Create a new product favorite entry for an authenticated user, storing an
   * association between the user and a target product along with organizational
   * metadata (folder, label) and a product snapshot at the time of favoriting.
   * The favorite is unique per user-product pair, and attempts to favorite the
   * same product twice will result in a validation error.
   *
   * The operation supports batch notification triggers and alert configurations
   * following successful creation. Only logged-in users can favorite products.
   * Favorite creation is essential for supporting personalized product
   * recommendations, notifications, and future product status comparisons.
   *
   * Upon success, the operation returns the favorite entry as stored, including
   * references to the snapshot, any folder or label, and timestamps.
   *
   * @param connection
   * @param body Details for creating a new product favorite, including product
   *   ID and optional organization settings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesProducts.ICreate,
  ): Promise<IAiCommerceFavoritesProducts> {
    try {
      return await postaiCommerceBuyerFavoritesProducts({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate a user's product favorites
   * (ai_commerce_favorites_products table).
   *
   * Allows authenticated users to retrieve a paginated, filtered, and
   * optionally sorted list of their product favorites for display,
   * organization, and further action. Users may filter by product_id, creation
   * date, label, folder, or other summary fields as per business rules. This
   * operation is scoped to only the favorites accessible to the calling user
   * unless executed by an admin.
   *
   * All filtering and paging fields must match the
   * IAiCommerceFavoritesProduct.IRequest schema. Output is always a paginated
   * summary for efficient UI consumption and analytics.
   *
   * Errors include unauthorized access, invalid search parameters, or failures
   * to locate matching records. This endpoint enables user-friendly favorites
   * list UI as well as batch organization, alert setup, and cross-linking with
   * recommendations or notification logic. It should be used together with
   * favorites add, remove, and detail APIs for full-featured personalization.
   *
   * @param connection
   * @param body Favorite product filter/search and pagination request
   *   parameters (IAiCommerceFavoritesProduct.IRequest).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesProduct.IRequest,
  ): Promise<IAiCommercePageIFavoritesProduct.ISummary> {
    try {
      return await patchaiCommerceBuyerFavoritesProducts({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific product favorite by favoriteProductId from
   * ai_commerce_favorites_products.
   *
   * Retrieve information on a single product favorite using its unique ID from
   * the ai_commerce_favorites_products table.
   *
   * This operation fetches not only the favorite linkage, but also related
   * snapshot information, label or folder organization, and creation or update
   * timestamps. Only authenticated users can access their own favorites. The
   * result provides a precise reflection of the favorited product's state at
   * the moment it was favorited, supporting UX personalization and compliance
   * evidence requirements.
   *
   * Errors occur if the favorite is not found, if it belongs to another user,
   * or if the favorite has been deleted. This operation is commonly used in
   * conjunction with organization, alert, or notification flows for user
   * favorites.
   *
   * @param connection
   * @param favoriteProductId Unique identifier of the product favorite to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":favoriteProductId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceFavoritesProducts> {
    try {
      return await getaiCommerceBuyerFavoritesProductsFavoriteProductId({
        buyer,
        favoriteProductId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata for an existing product favorite by favoriteProductId.
   *
   * Update the metadata for a product favorite (such as label or folder
   * assignment) without modifying the fundamental favorite-product linkage or
   * the product snapshot. The operation works exclusively on the user's own
   * favorites and will fail if the favoriteProductId does not exist or is
   * already deleted.
   *
   * Only permitted fields such as label, folder, or alert configuration are
   * editable; the associated product and original snapshot remain immutable for
   * audit and compliance.
   *
   * Upon success, the operation returns the updated favorite entry. If the
   * favorite is not found or does not belong to the user, a 404 error is
   * returned.
   *
   * @param connection
   * @param favoriteProductId Unique identifier of the product favorite to
   *   update.
   * @param body Fields for updating the product favorite's label, folder, or
   *   alert configuration.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":favoriteProductId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceFavoritesProducts.IUpdate,
  ): Promise<IAiCommerceFavoritesProducts> {
    try {
      return await putaiCommerceBuyerFavoritesProductsFavoriteProductId({
        buyer,
        favoriteProductId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (soft delete) a specified product favorite by favoriteProductId.
   *
   * Erase (soft delete) the specified product favorite using its unique ID.
   * After this operation, the favorite will not appear in personalized product
   * or favorites lists, and no new notifications or alerts will be sent. The
   * record is retained for audit purposes, and the product snapshot remains
   * available for compliance.
   *
   * Users can only erase their own favorites, and attempts to erase a
   * nonexistent or another user's favorite will result in an error.
   *
   * @param connection
   * @param favoriteProductId Unique identifier of the product favorite to erase
   *   (soft delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":favoriteProductId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerFavoritesProductsFavoriteProductId({
        buyer,
        favoriteProductId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
