import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceBuyerFavoritesProductsFavoriteProductIdNotifications } from "../../../../../../providers/patchaiCommerceBuyerFavoritesProductsFavoriteProductIdNotifications";
import { BuyerAuth } from "../../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../../decorators/payload/BuyerPayload";
import { getaiCommerceBuyerFavoritesProductsFavoriteProductIdNotificationsNotificationId } from "../../../../../../providers/getaiCommerceBuyerFavoritesProductsFavoriteProductIdNotificationsNotificationId";

import { IPageIAiCommerceFavoritesProductNotification } from "../../../../../../api/structures/IPageIAiCommerceFavoritesProductNotification";
import { IAiCommerceFavoritesProductNotification } from "../../../../../../api/structures/IAiCommerceFavoritesProductNotification";

@Controller(
  "/aiCommerce/buyer/favorites/products/:favoriteProductId/notifications",
)
export class AicommerceBuyerFavoritesProductsNotificationsController {
  /**
   * Search and retrieve a paginated list of notifications for a user's
   * favorited product (ai_commerce_favorites_products and
   * ai_commerce_favorites_notifications).
   *
   * This operation enables a user to retrieve a paginated, searchable, and
   * sortable list of notification events associated with a specific favorited
   * product. These notifications keep a user informed about important updates,
   * such as price changes, stock status, or promotional events tied to the
   * product they have favorited.
   *
   * Access to this information is restricted to authenticated users who own the
   * favorite product reference, with robust permission enforcement. The
   * endpoint supports pagination and advanced search queries (e.g., filtering
   * by notification type, date range, read/unread status), enabling efficient
   * notification management by the user. Notification data returned includes
   * the notification type, timestamps for creation, delivery, and read status,
   * along with associated metadata for the favorited product.
   *
   * Underlying data is read from ai_commerce_favorites_products (for favorite
   * identification) and ai_commerce_favorites_notifications (for event
   * records). Sensitive notification content is accessible only by the user who
   * favorited the product. Excessive retrieval or abuse of this API may be rate
   * limited, and all access events are logged for audit purposes.
   *
   * Related operations may include marking notifications as read or deleting
   * specific notifications for housekeeping. Error handling ensures that access
   * is denied if the favorite product entry does not belong to the requesting
   * user, or if it has been deleted or revoked.
   *
   * @param connection
   * @param favoriteProductId The unique identifier of the favorited product for
   *   which to retrieve notifications.
   * @param body Search/query parameters for filtering, sorting, and paginating
   *   notification events.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceFavoritesProductNotification.IRequest,
  ): Promise<IPageIAiCommerceFavoritesProductNotification> {
    try {
      return await patchaiCommerceBuyerFavoritesProductsFavoriteProductIdNotifications(
        {
          buyer,
          favoriteProductId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific notification for a user's
   * favorited product (ai_commerce_favorites_products and
   * ai_commerce_favorites_notifications).
   *
   * This operation enables a user to retrieve all available detail for a single
   * notification event associated with one of their favorited products.
   * Information returned includes type of notification (e.g., price drop,
   * restock, sale), status (delivered, read), timestamp history, related
   * product snapshot, and any contextual or business metadata.
   *
   * Only the owner of the favorited product entry can access notification
   * detail, and access is further restricted if the favorite has been deleted
   * or revoked. The API ensures secure handling by verifying the user's rights
   * to the favorite/notification pairing. If the notification entry is not
   * found or does not belong to the user's favorite, an appropriate error is
   * returned.
   *
   * Underlying tables are ai_commerce_favorites_products and
   * ai_commerce_favorites_notifications. This endpoint supports use cases such
   * as custom notification interfaces, personal notification auditing, and
   * user-facing notification detail screens. Access and retrieval are logged to
   * support audit trails and system monitoring.
   *
   * @param connection
   * @param favoriteProductId The unique identifier of the favorited product to
   *   which the notification belongs.
   * @param notificationId The unique identifier of the notification event to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":notificationId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceFavoritesProductNotification> {
    try {
      return await getaiCommerceBuyerFavoritesProductsFavoriteProductIdNotificationsNotificationId(
        {
          buyer,
          favoriteProductId,
          notificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
