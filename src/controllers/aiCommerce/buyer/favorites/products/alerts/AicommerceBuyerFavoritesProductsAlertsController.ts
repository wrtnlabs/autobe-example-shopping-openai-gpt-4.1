import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerFavoritesProductsFavoriteProductIdAlerts } from "../../../../../../providers/postaiCommerceBuyerFavoritesProductsFavoriteProductIdAlerts";
import { BuyerAuth } from "../../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerFavoritesProductsFavoriteProductIdAlerts } from "../../../../../../providers/patchaiCommerceBuyerFavoritesProductsFavoriteProductIdAlerts";
import { getaiCommerceBuyerFavoritesProductsFavoriteProductIdAlertsAlertId } from "../../../../../../providers/getaiCommerceBuyerFavoritesProductsFavoriteProductIdAlertsAlertId";
import { putaiCommerceBuyerFavoritesProductsFavoriteProductIdAlertsAlertId } from "../../../../../../providers/putaiCommerceBuyerFavoritesProductsFavoriteProductIdAlertsAlertId";
import { deleteaiCommerceBuyerFavoritesProductsFavoriteProductIdAlertsAlertId } from "../../../../../../providers/deleteaiCommerceBuyerFavoritesProductsFavoriteProductIdAlertsAlertId";

import { IAiCommerceFavoritesAlert } from "../../../../../../api/structures/IAiCommerceFavoritesAlert";

@Controller("/aiCommerce/buyer/favorites/products/:favoriteProductId/alerts")
export class AicommerceBuyerFavoritesProductsAlertsController {
  /**
   * Create a new alert trigger for a favorited product
   * (ai_commerce_favorites_alerts).
   *
   * When invoked, this endpoint allows the authenticated buyer to create an
   * additional alert configuration for a given favorited product, specifying
   * the alert trigger type (e.g., price_drop, restocked) and whether it should
   * be enabled.
   *
   * The system associates the new alert with both the favorite product and the
   * specific buyer, validating that no identical alert type already exists for
   * this favorite (as enforced by business uniqueness constraints). All
   * provided values are validated for correctness and compliance with the
   * ai_commerce_favorites_alerts schema commentary.
   *
   * Security checks ensure that only the owner of the favorite can add new
   * alerts, and all creations are fully audit logged. The resulting alert
   * configuration is returned in detail for immediate UI feedback or
   * confirmation to the buyer. Error cases cover forbidden IDs, invalid request
   * types, or attempts to create duplicate alert triggers for the same
   * favorite.
   *
   * @param connection
   * @param favoriteProductId ID of the product favorite for alert creation.
   * @param body Details for a new alert trigger on a favorite product,
   *   including type and state (enabled/disabled).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createAlert(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceFavoritesAlert.ICreate,
  ): Promise<IAiCommerceFavoritesAlert> {
    try {
      return await postaiCommerceBuyerFavoritesProductsFavoriteProductIdAlerts({
        buyer,
        favoriteProductId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Configure or update alert trigger settings for a favorited product
   * (ai_commerce_favorites_alerts).
   *
   * This endpoint allows a buyer to configure or update alert settings on a
   * favorited product, such as enabling alerts for price changes, restocks, or
   * other defined business events.
   *
   * The system ensures the operation targets a favorite product record
   * belonging to the current buyer, validates changes to alert settings, and
   * applies them on the ai_commerce_favorites_alerts record(s). The underlying
   * table supports various alert types, enabling personalized notification for
   * product changes. All updates are strictly tied to favoriteProductId
   * ownership and enforce existing business and data integrity rules from the
   * schema.
   *
   * Security is ensured by verifying buyer authentication and record ownership;
   * attempts to alter alert settings for others' favorites are denied. The
   * result includes the list of updated alert configurations. Detailed audit
   * logs record alert configuration changes for buyer accountability and
   * historical inspection.
   *
   * @param connection
   * @param favoriteProductId ID of the product favorite on which to update
   *   alert settings.
   * @param body List of updated alert configurations (enable/disable specific
   *   triggers) for the specified favorite product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async updateAlerts(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceFavoritesAlert.IUpdateRequest,
  ): Promise<IAiCommerceFavoritesAlert.IList> {
    try {
      return await patchaiCommerceBuyerFavoritesProductsFavoriteProductIdAlerts(
        {
          buyer,
          favoriteProductId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * View the details of a specific alert trigger on a favorited product
   * (ai_commerce_favorites_alerts).
   *
   * This API endpoint allows the buyer to view the details (trigger type,
   * enabled state, recent activity) of a specific notification alert configured
   * for a favorite product. Both favoriteProductId and alertId must be provided
   * for context and strict access validation, ensuring buyers cannot read alert
   * configurations on others' favorites.
   *
   * The response includes full metadata on the alert, such as trigger type,
   * state, and last triggered/modified information. Strong validation against
   * buyer ownership, valid IDs, and access rights is enforced, with any
   * violation resulting in a denied request.
   *
   * Audit logging records all data access for compliance. This operation
   * references the ai_commerce_favorites_alerts Prisma schema comments
   * regarding structure, relationships, and evidence requirements.
   *
   * @param connection
   * @param favoriteProductId ID of the product favorite related to the alert.
   * @param alertId ID of the specific alert configuration for this favorite
   *   product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":alertId")
  public async atAlert(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
    @TypedParam("alertId")
    alertId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceFavoritesAlert> {
    try {
      return await getaiCommerceBuyerFavoritesProductsFavoriteProductIdAlertsAlertId(
        {
          buyer,
          favoriteProductId,
          alertId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing alert configuration for a favorite product
   * (ai_commerce_favorites_alerts).
   *
   * This endpoint allows a buyer to update any configurable properties for an
   * existing alert on a favorited product, specified by both favoriteProductId
   * and alertId.
   *
   * The operation enforces that the alert is bound to the calling buyer and the
   * specified favorite product, and changes apply only to mutable fields (e.g.,
   * enabling/disabling, changing trigger type). Strict schema-driven validation
   * and business constraints (no duplicate alerts per type) are applied.
   *
   * Security is handled through ownership checks and record validation; all
   * actions are fully audit-logged for compliance. The updated alert
   * configuration is returned in the response on success. Possible error cases
   * include lack of ownership, forbidden edits, or constraint violations.
   *
   * @param connection
   * @param favoriteProductId ID of the product favorite associated with the
   *   alert to update.
   * @param alertId ID of the alert configuration to update.
   * @param body Updated alert trigger settings (enabled/disabled, type) for
   *   this favorite product alert.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":alertId")
  public async updateAlert(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
    @TypedParam("alertId")
    alertId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceFavoritesAlert.IUpdate,
  ): Promise<IAiCommerceFavoritesAlert> {
    try {
      return await putaiCommerceBuyerFavoritesProductsFavoriteProductIdAlertsAlertId(
        {
          buyer,
          favoriteProductId,
          alertId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove (soft delete) an alert trigger from a buyerâ€™s favorite product
   * (ai_commerce_favorites_alerts).
   *
   * This API endpoint allows a buyer to remove an alert trigger from a favorite
   * product. Both the favorite product ID and alert configuration ID must be
   * provided, and the operation requires that the alert belongs to the buyer
   * and the correct favorite.
   *
   * Instead of a hard/physical delete, a soft delete approach sets the
   * deleted_at timestamp so that audit history and event evidence are
   * preserved. Security validation denies attempts by non-owners or mismatched
   * favorite/alert pairs. The operation follows the data integrity, audit, and
   * compliance commentary of the ai_commerce_favorites_alerts table.
   *
   * Typical errors handled include not-found pairs, unauthorized access, or
   * redundant deletions. No response body is returned for successful deletes.
   *
   * @param connection
   * @param favoriteProductId ID of the product favorite whose alert trigger
   *   should be deleted.
   * @param alertId Unique identifier of the alert trigger to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":alertId")
  public async eraseAlert(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteProductId")
    favoriteProductId: string & tags.Format<"uuid">,
    @TypedParam("alertId")
    alertId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerFavoritesProductsFavoriteProductIdAlertsAlertId(
        {
          buyer,
          favoriteProductId,
          alertId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
