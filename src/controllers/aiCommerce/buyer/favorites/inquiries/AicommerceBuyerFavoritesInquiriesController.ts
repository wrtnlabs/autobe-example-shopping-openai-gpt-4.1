import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerFavoritesInquiries } from "../../../../../providers/postaiCommerceBuyerFavoritesInquiries";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { patchaiCommerceBuyerFavoritesInquiries } from "../../../../../providers/patchaiCommerceBuyerFavoritesInquiries";
import { getaiCommerceBuyerFavoritesInquiriesFavoriteInquiryId } from "../../../../../providers/getaiCommerceBuyerFavoritesInquiriesFavoriteInquiryId";
import { putaiCommerceBuyerFavoritesInquiriesFavoriteInquiryId } from "../../../../../providers/putaiCommerceBuyerFavoritesInquiriesFavoriteInquiryId";
import { deleteaiCommerceBuyerFavoritesInquiriesFavoriteInquiryId } from "../../../../../providers/deleteaiCommerceBuyerFavoritesInquiriesFavoriteInquiryId";

import { IAiCommerceFavoritesInquiries } from "../../../../../api/structures/IAiCommerceFavoritesInquiries";
import { IPageIAiCommerceFavoritesInquiries } from "../../../../../api/structures/IPageIAiCommerceFavoritesInquiries";

@Controller("/aiCommerce/buyer/favorites/inquiries")
export class AicommerceBuyerFavoritesInquiriesController {
  /**
   * Create a new inquiry favorite and return the stored record (with snapshot
   * and folder if assigned).
   *
   * Add a new favorite inquiry for the authenticated user. The request
   * specifies the inquiry ID to favorite, optional folder and label, and
   * creates a snapshot of the current state of the inquiry for evidence
   * purposes. Uniqueness is enforced per user and inquiry; attempting to
   * favorite the same inquiry twice triggers a validation error.
   *
   * Favoriting an inquiry powers features such as notification of answers,
   * rapid lookup, and organizational flows for the user. Only logged-in users
   * may favorite inquiries. The result includes the created favorite record,
   * its snapshot, and metadata.
   *
   * @param connection
   * @param body Required and optional data for favoriting a product inquiry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesInquiries.ICreate,
  ): Promise<IAiCommerceFavoritesInquiries> {
    try {
      return await postaiCommerceBuyerFavoritesInquiries({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List/search favorited product inquiries for the authenticated user.
   *
   * List or search the authenticated user's favorited product inquiries,
   * allowing filtering by folder, label, or inquiry state. The results are
   * paginated and optimized for user UX, enabling quick lookup and management.
   * This operation returns summary information suitable for lists, rather than
   * detailed inquiry content.
   *
   * Commonly paired with alert configuration, favorited inquiry notification
   * flows, and organizational management UIs. The operation only returns the
   * user's own favorites; unauthorized access returns an empty or error
   * result.
   *
   * Errors occur for invalid filters or if the user is not authenticated. The
   * default sort order is by created date descending.
   *
   * @param connection
   * @param body Filtering and pagination options for favorited inquiries
   *   search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesInquiries.IRequest,
  ): Promise<IPageIAiCommerceFavoritesInquiries.ISummary> {
    try {
      return await patchaiCommerceBuyerFavoritesInquiries({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific inquiry favorite by
   * favoriteInquiryId.
   *
   * Fetch a specific inquiry favorite by its favoriteInquiryId, returning the
   * full detail as stored in ai_commerce_favorites_inquiries, including
   * organizational folder assignment, snapshot, and timestamps.
   *
   * This API supports per-user favorite management, compliance snapshot
   * linking, alert review, and organization. Only authenticated users can
   * access their own favorites, and errors are returned for missing, deleted,
   * or unauthorized favorites.
   *
   * The operation is commonly used to display favorite inquiry detail screens
   * and to support favorite update or notification review interfaces.
   *
   * @param connection
   * @param favoriteInquiryId The unique identifier for the inquiry favorite to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":favoriteInquiryId")
  public async at(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteInquiryId")
    favoriteInquiryId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceFavoritesInquiries> {
    try {
      return await getaiCommerceBuyerFavoritesInquiriesFavoriteInquiryId({
        buyer,
        favoriteInquiryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update label, folder, or alert settings for an existing inquiry favorite by
   * favoriteInquiryId.
   *
   * Allows an authenticated user to update organizational metadata for an
   * inquiry favorite, such as changing its folder, updating a label, or
   * adjusting alert preferences. User authorization is required, and attempts
   * to edit another user's favorite or a deleted entry will fail.
   *
   * Content and snapshot linkage remain read-only for audit and compliance.
   * Updated records are returned in full, allowing front ends to reflect new
   * organization, alerts, or preferences immediately.
   *
   * @param connection
   * @param favoriteInquiryId The unique identifier of the inquiry favorite to
   *   update.
   * @param body Updatable organizational data for the inquiry favorite.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":favoriteInquiryId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteInquiryId")
    favoriteInquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceFavoritesInquiries.IUpdate,
  ): Promise<IAiCommerceFavoritesInquiries> {
    try {
      return await putaiCommerceBuyerFavoritesInquiriesFavoriteInquiryId({
        buyer,
        favoriteInquiryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a favorite inquiry (soft delete) for the authenticated user
   * (ai_commerce_favorites_inquiries).
   *
   * Delete a user's favorite inquiry by marking it as deleted. The operation
   * verifies user permissions, favorite inquiry ownership, and ensures the
   * operation is auditable and compliant with the business logic in
   * ai_commerce_favorites_inquiries.
   *
   * Security consideration: Accessible only to authenticated buyers or sellers
   * who own the favorite inquiry. Soft deletion preserves record integrity and
   * audit logging for evidence.
   *
   * This operation references the Prisma schema's
   * ai_commerce_favorites_inquiries table, specifically utilizing the
   * deleted_at column for soft removal. No data is physically erased,
   * satisfying compliance requirements for privacy and legal retention.
   *
   * Business logic and ownership validation are enforced. Errors are returned
   * if the favorite does not exist, does not belong to the user, or has already
   * been deleted.
   *
   * @param connection
   * @param favoriteInquiryId Unique identifier of the favorite inquiry to
   *   remove
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":favoriteInquiryId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("favoriteInquiryId")
    favoriteInquiryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerFavoritesInquiriesFavoriteInquiryId({
        buyer,
        favoriteInquiryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
