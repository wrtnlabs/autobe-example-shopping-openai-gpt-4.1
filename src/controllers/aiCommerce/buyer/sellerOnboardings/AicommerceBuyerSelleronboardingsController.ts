import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postaiCommerceBuyerSellerOnboardings } from "../../../../providers/postaiCommerceBuyerSellerOnboardings";
import { BuyerAuth } from "../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../decorators/payload/BuyerPayload";

import { IAiCommerceSellerOnboarding } from "../../../../api/structures/IAiCommerceSellerOnboarding";

@Controller("/aiCommerce/buyer/sellerOnboardings")
export class AicommerceBuyerSelleronboardingsController {
  /**
   * Create new seller onboarding application (ai_commerce_seller_onboarding
   * table).
   *
   * This operation creates a new seller onboarding application record as
   * specified in ai_commerce_seller_onboarding. It is invoked by a buyer user
   * seeking to become a seller and submit all required application data for
   * onboarding, including KYC documentation, legal disclosures, and business
   * details packed in application_data. The system validates the request,
   * assigns the appropriate onboarding_status, and stores all necessary
   * compliance evidence.
   *
   * Initiation triggers onboarding workflow and KYC checks. On success, the
   * onboarding application is ready for review by compliance/admin personnel.
   * On failure, errors may result from validation, missing documents, or
   * business rule mismatches. After creation, the user can track onboarding
   * progress and participate in further onboarding steps (e.g., KYC submission,
   * media uploads, escalation).
   *
   * Admin, seller, and compliance roles may reference onboarding status for
   * approval or escalation.
   *
   * @param connection
   * @param body Information for new onboarding application (application_data,
   *   applicant, business disclosure)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedBody()
    body: IAiCommerceSellerOnboarding.ICreate,
  ): Promise<IAiCommerceSellerOnboarding> {
    try {
      return await postaiCommerceBuyerSellerOnboardings({
        buyer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
