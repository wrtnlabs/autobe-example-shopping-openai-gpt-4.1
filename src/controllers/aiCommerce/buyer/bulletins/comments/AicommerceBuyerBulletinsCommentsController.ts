import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceBuyerBulletinsBulletinIdComments } from "../../../../../providers/postaiCommerceBuyerBulletinsBulletinIdComments";
import { BuyerAuth } from "../../../../../decorators/BuyerAuth";
import { BuyerPayload } from "../../../../../decorators/payload/BuyerPayload";
import { putaiCommerceBuyerBulletinsBulletinIdCommentsCommentId } from "../../../../../providers/putaiCommerceBuyerBulletinsBulletinIdCommentsCommentId";
import { deleteaiCommerceBuyerBulletinsBulletinIdCommentsCommentId } from "../../../../../providers/deleteaiCommerceBuyerBulletinsBulletinIdCommentsCommentId";

import { IAiCommerceComment } from "../../../../../api/structures/IAiCommerceComment";

@Controller("/aiCommerce/buyer/bulletins/:bulletinId/comments")
export class AicommerceBuyerBulletinsCommentsController {
  /**
   * Create a new comment on a specific bulletin (ai_commerce_comments table).
   *
   * This endpoint allows an authenticated user (buyer) to create a comment on a
   * specific bulletin post. The user must provide the bulletinId of the target
   * bulletin, and the request body should include the content of the comment
   * and optional threading metadata (e.g., parentCommentId for replies).
   *
   * Security is enforced by restricting creation to authenticated buyers only,
   * ensuring accountability and audit log traceability. The request payload is
   * validated to ensure that content is non-empty and free from prohibited
   * terms as per platform rules; moderation and content filtering may be
   * triggered automatically for certain keywords.
   *
   * Each created comment is linked to the bulletin, the posting user, and
   * supports reply/threaded structure if a parentCommentId is given. Upon
   * successful creation, the response returns the detailed comment entity as
   * stored in the system, including timestamps and status. Errors are returned
   * for invalid input, unauthorized access, or if the bulletin is not found or
   * not accepting comments.
   *
   * @param connection
   * @param bulletinId Unique identifier of the target bulletin post to which
   *   the comment will be attached.
   * @param body Information required to create a comment under a bulletin,
   *   including content, optional parentCommentId for threading, and
   *   visibility/status as defined in IAiCommerceComment.ICreate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("bulletinId")
    bulletinId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceComment.ICreate,
  ): Promise<IAiCommerceComment> {
    try {
      return await postaiCommerceBuyerBulletinsBulletinIdComments({
        buyer,
        bulletinId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing comment for a given bulletin (ai_commerce_comments
   * table).
   *
   * Allows the author of a comment (buyer) or an administrator to update the
   * content or visibility status of a specific comment on a bulletin post. The
   * operation references both the bulletinId and commentId to uniquely identify
   * the comment.
   *
   * Input validation ensures that the editor is authorized, that provided
   * content is not blank and complies with moderation policies, and that the
   * comment is still editable (e.g., not locked by moderation or older than an
   * allowed edit window). Edits are saved with an immutable snapshot in the
   * edit history for compliance and auditability.
   *
   * On success, the updated comment entity reflecting all changes is returned.
   * Errors will be raised if the requestor lacks permission, if comment or
   * bulletin does not exist, or if a validation rule is violated.
   *
   * @param connection
   * @param bulletinId Identifier of the bulletin which the comment belongs to.
   * @param commentId Unique identifier of the comment to update.
   * @param body Updated information for the comment, such as content or status,
   *   formatted as IAiCommerceComment.IUpdate.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("bulletinId")
    bulletinId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceComment.IUpdate,
  ): Promise<IAiCommerceComment> {
    try {
      return await putaiCommerceBuyerBulletinsBulletinIdCommentsCommentId({
        buyer,
        bulletinId,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (logically) a specific comment on a bulletin (soft delete via
   * ai_commerce_comments table).
   *
   * This endpoint allows an authorized user (the comment author or an
   * administrator) to mark a comment on a bulletin as deleted. Instead of
   * physically erasing the comment, the deleted_at timestamp is set for logical
   * deletion, enabling recovery or audit retrieval. The comment remains in the
   * database for compliance and evidence but is no longer displayed to standard
   * users.
   *
   * Permission checks ensure only the comment's author or users with the
   * appropriate administrative privileges can perform this operation. Attempts
   * by unauthorized users will result in error responses and may trigger audit
   * alerts.
   *
   * The deletion action is always recorded in the platform's audit log,
   * including the actor's identity, reason, and the timestamp. In case of
   * failure (e.g., comment not found, insufficient rights), the response will
   * convey the reason to the client.
   *
   * @param connection
   * @param bulletinId Identifier of the bulletin which contains the comment.
   * @param commentId Unique identifier of the comment to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @BuyerAuth()
    buyer: BuyerPayload,
    @TypedParam("bulletinId")
    bulletinId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceBuyerBulletinsBulletinIdCommentsCommentId({
        buyer,
        bulletinId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
