import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postaiCommerceSellerSellerKyc } from "../../../../providers/postaiCommerceSellerSellerKyc";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";

import { IAiCommerceSellerKyc } from "../../../../api/structures/IAiCommerceSellerKyc";

@Controller("/aiCommerce/seller/sellerKyc")
export class AicommerceSellerSellerkycController {
  /**
   * Create a new seller KYC verification submission (onboarding, compliance).
   *
   * This API operation allows a seller or an authorized onboarding workflow to
   * create a new KYC submission by providing necessary KYC data in the request
   * body. The sent data includes details like document type, provided metadata,
   * and onboarding references, as required by the ai_commerce_seller_kyc
   * schema.
   *
   * Upon submission, the record is stored with status field set to a
   * workflow-appropriate initial value (such as 'pending'). Further processing,
   * review, or approval will follow according to compliance workflow. All
   * fields and relationships from the schema must be supplied.
   *
   * This operation can be used by the onboarding automation system or
   * authorized sellers. Access control should prevent unauthorized KYC creation
   * by limiting to sellers in the onboarding stage or admins acting on behalf
   * of applicants.
   *
   * @param connection
   * @param body KYC document and metadata as required for
   *   ai_commerce_seller_kyc creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceSellerKyc.ICreate,
  ): Promise<IAiCommerceSellerKyc> {
    try {
      return await postaiCommerceSellerSellerKyc({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
