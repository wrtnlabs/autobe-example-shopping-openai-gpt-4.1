import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getaiCommerceSellerMileageAccountsMileageAccountId } from "../../../../providers/getaiCommerceSellerMileageAccountsMileageAccountId";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";

import { IAiCommerceMileageAccount } from "../../../../api/structures/IAiCommerceMileageAccount";

@Controller("/aiCommerce/seller/mileageAccounts/:mileageAccountId")
export class AicommerceSellerMileageaccountsController {
  /**
   * Retrieve detailed information for a specific mileage account by its unique
   * identifier.
   *
   * This operation retrieves the full set of details for a specific mileage
   * account, referenced by its unique identifier (mileageAccountId). It
   * includes all fields as defined in the ai_commerce_mileage_accounts table:
   * account_code, user_id, balance, currency_code, status, created_at,
   * updated_at, and deleted_at if present.
   *
   * The function is permissioned such that only the account owner, relevant
   * seller, or platform administrator can access this information. This ensures
   * privacy and security for sensitive account data.
   *
   * Mileage account data is critical for both business operations and
   * regulatory compliance, as the account maintains a running history of all
   * reward/incentive points, deductions, and status changes. Any queries to
   * this endpoint should be carefully audited and logged for security
   * purposes.
   *
   * @param connection
   * @param mileageAccountId Unique identifier for the target mileage account.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("mileageAccountId")
    mileageAccountId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceMileageAccount> {
    try {
      return await getaiCommerceSellerMileageAccountsMileageAccountId({
        seller,
        mileageAccountId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
