import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getaiCommerceSellerOrdersOrderIdAnalytics } from "../../../../../providers/getaiCommerceSellerOrdersOrderIdAnalytics";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";

import { IAiCommerceOrderAnalytics } from "../../../../../api/structures/IAiCommerceOrderAnalytics";

@Controller("/aiCommerce/seller/orders/:orderId/analytics")
export class AicommerceSellerOrdersAnalyticsController {
  /**
   * Get order analytics and performance statistics by orderId from
   * ai_commerce_order_analytics.
   *
   * Retrieve the analytics information and performance statistics for a given
   * order, based on orderId. The API returns aggregated and real-time metrics
   * including order value, item count, total refunds, after-sales incidents,
   * completion timing, and the last known order status. The
   * ai_commerce_order_analytics table is the data source but output is filtered
   * based on role: the buyer, related seller, or admin can retrieve metrics
   * suitable to business needs.
   *
   * Analytics endpoints support after-sales decision making, compliance
   * reviews, operational analysis, and customer reporting. Data is filtered to
   * ensure privacy (e.g., only the buyer can access their own order, sellers
   * only see their own fulfillment analytics, and only admins can retrieve full
   * analytics).
   *
   * If the order ID does not exist or is not associated with the requester,
   * explicit business error responses are returned. All access is audit-logged
   * to meet compliance and performance requirements.
   *
   * @param connection
   * @param orderId Unique identifier of the order whose analytics are being
   *   requested. Must be a UUID string referencing ai_commerce_orders.id.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrderAnalytics> {
    try {
      return await getaiCommerceSellerOrdersOrderIdAnalytics({
        seller,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
