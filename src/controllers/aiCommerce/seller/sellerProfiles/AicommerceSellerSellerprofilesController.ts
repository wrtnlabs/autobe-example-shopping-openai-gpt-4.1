import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceSellerSellerProfiles } from "../../../../providers/postaiCommerceSellerSellerProfiles";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { putaiCommerceSellerSellerProfilesSellerProfileId } from "../../../../providers/putaiCommerceSellerSellerProfilesSellerProfileId";
import { deleteaiCommerceSellerSellerProfilesSellerProfileId } from "../../../../providers/deleteaiCommerceSellerSellerProfilesSellerProfileId";

import { IAiCommerceSellerProfiles } from "../../../../api/structures/IAiCommerceSellerProfiles";

@Controller("/aiCommerce/seller/sellerProfiles")
export class AicommerceSellerSellerprofilesController {
  /**
   * Create a new seller profile (ai_commerce_seller_profiles table) for a
   * verified seller user.
   *
   * This endpoint creates a new seller profile for an authenticated seller. The
   * seller profile is crucial for establishing a seller's business presence on
   * the platform, including branding, regulatory disclosures, and approval
   * workflow management.
   *
   * Security is enforced so that only authenticated users who have passed
   * onboarding and are escalated to seller status (see ai_commerce_seller) can
   * use this API. The profile contains fields like display_name,
   * profile_metadata, approval_status (defaulted to 'pending' or as per
   * business rules), and optionally suspension_reason.
   *
   * The underlying entity, ai_commerce_seller_profiles, uses user_id (tied to
   * ai_commerce_user_authentications) as a unique reference. Business rules
   * ensure that only one active profile exists per seller and that re-creation
   * after suspension/termination follows compliance workflows.
   *
   * Upon successful creation, the detailed profile is returned. Attempting to
   * create a duplicate seller profile or providing incomplete/invalid business
   * information will result in a validation error. Full creation is audit
   * logged for compliance and future review.
   *
   * @param connection
   * @param body Seller profile creation payload, including display_name,
   *   metadata, and initial approval status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceSellerProfiles.ICreate,
  ): Promise<IAiCommerceSellerProfiles> {
    try {
      return await postaiCommerceSellerSellerProfiles({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing seller profile (ai_commerce_seller_profiles table) for
   * the specified sellerProfileId.
   *
   * This API endpoint allows a seller (or platform admin) to update their
   * profile information, such as display_name, profile_metadata,
   * approval_status, and suspension_reason if needed. All field changes are
   * subject to validation according to the database schema constraints,
   * ensuring required fields and uniqueness are preserved.
   *
   * Security and permission checks require that the requesting user be the
   * profile owner (seller) or an admin operator, with actions fully audit
   * logged. Business rules may enforce further restrictions based on approval
   * status or suspension state.
   *
   * On success, the full updated seller profile is returned. If the profile is
   * not found, or if the user is unauthorized or submits invalid data, the
   * system returns appropriate business or validation errors. The update is
   * strictly recorded for audit and compliance purposes.
   *
   * @param connection
   * @param sellerProfileId Unique identifier for the seller profile being
   *   updated.
   * @param body Payload of fields to update in the seller profile, according to
   *   the DB schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sellerProfileId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerProfileId")
    sellerProfileId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSellerProfiles.IUpdate,
  ): Promise<IAiCommerceSellerProfiles> {
    try {
      return await putaiCommerceSellerSellerProfilesSellerProfileId({
        seller,
        sellerProfileId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete (hard remove) a seller profile for the specified
   * sellerProfileId.
   *
   * This API operation performs a hard deletion of a seller profile from the
   * ai_commerce_seller_profiles table, identified by sellerProfileId. No soft
   * delete exists for this entity, so deletion is irreversible and data is
   * fully removed from the database. This API can only be used by the owning
   * seller or an administrator following explicit business rules and audit
   * protocols.
   *
   * Before deletion, the system checks for related dependencies to prevent
   * referential integrity violations (e.g., linked stores, analytics).
   * Authorization enforcement is strict and every delete operation is audit
   * logged for regulatory and legal compliance.
   *
   * If the profile exists and is deletable, the operation completes without
   * returning a body. Errors are raised if the profile is not found, the user
   * is unauthorized, or dependent references prevent deletion. This endpoint is
   * not used for soft-deletion scenarios.
   *
   * @param connection
   * @param sellerProfileId Unique identifier for the seller profile to delete
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sellerProfileId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerProfileId")
    sellerProfileId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceSellerSellerProfilesSellerProfileId({
        seller,
        sellerProfileId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
