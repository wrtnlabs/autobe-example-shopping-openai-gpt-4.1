import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceSellerSellerAppeals } from "../../../../providers/postaiCommerceSellerSellerAppeals";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { patchaiCommerceSellerSellerAppeals } from "../../../../providers/patchaiCommerceSellerSellerAppeals";
import { getaiCommerceSellerSellerAppealsSellerAppealId } from "../../../../providers/getaiCommerceSellerSellerAppealsSellerAppealId";
import { putaiCommerceSellerSellerAppealsSellerAppealId } from "../../../../providers/putaiCommerceSellerSellerAppealsSellerAppealId";
import { deleteaiCommerceSellerSellerAppealsSellerAppealId } from "../../../../providers/deleteaiCommerceSellerSellerAppealsSellerAppealId";

import { IAiCommerceSellerAppeal } from "../../../../api/structures/IAiCommerceSellerAppeal";
import { IPageIAiCommerceSellerAppeal } from "../../../../api/structures/IPageIAiCommerceSellerAppeal";

@Controller("/aiCommerce/seller/sellerAppeals")
export class AicommerceSellerSellerappealsController {
  /**
   * Submit a new seller appeal regarding penalties, workflow actions, or payout
   * holds (ai_commerce_seller_appeals).
   *
   * This API endpoint enables a seller to formally submit an appeal regarding
   * platform actions such as rejections, penalties, demotions, payout blocks,
   * or other negative workflow outcomes. Submissions are recorded in the
   * ai_commerce_seller_appeals table, including the type of appeal, supporting
   * evidence (as JSON), and an open status pending admin or business review.
   *
   * User permissions are checked to ensure that only the owner of the seller
   * profile may appeal on their own account. The platform retains full audit
   * trails and evidence snapshots to support compliance and business reporting.
   * The operation ensures the completeness of appeal data and enforces one
   * appeal per unique case, per seller, preventing duplicate submissions for
   * the same workflow event.
   *
   * Related business APIs may include endpoints to retrieve the status of
   * current appeals, administrative review flows, and dispute documentation
   * uploads. Appeal workflow logic is aligned with the requirements for
   * immutable audit logs, allowing for reproducible evidence handling and
   * eventual notification of resolution outcomes to the appellant.
   *
   * @param connection
   * @param body Details of the seller appeal to be submitted, including type,
   *   attached evidence, and explanation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceSellerAppeal.ICreate,
  ): Promise<IAiCommerceSellerAppeal> {
    try {
      return await postaiCommerceSellerSellerAppeals({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list seller appeal cases (ai_commerce_seller_appeals) with
   * advanced filtering.
   *
   * Search and list seller appeal cases by various filtering parameters
   * (status, appeal type, date, and seller profile) with pagination and
   * sorting. Provides all details needed for fair review and timely dispute
   * resolution, including the original appeal reason, evidence, current status,
   * and admin/seller outcome notes.
   *
   * Role-based security: sellers may only access records concerning their own
   * profile; administrators can view all appeals platform-wide. All actions and
   * responses are appropriately logged for compliance. Output is designed for
   * efficient case triage, review, and audit workflows.
   *
   * @param connection
   * @param body Filter criteria and pagination settings for listing seller
   *   appeals.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceSellerAppeal.IRequest,
  ): Promise<IPageIAiCommerceSellerAppeal> {
    try {
      return await patchaiCommerceSellerSellerAppeals({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific seller appeal case by ID (ai_commerce_seller_appeals).
   *
   * Fetch all available information for a seller appeal by its unique
   * identifier. Includes the appeal reason, type, evidence, timeline,
   * administrator notes, and all relevant workflow status fields as recorded in
   * the database. Used for real-time dispute investigation, compliance
   * documentation, and resolution workflows.
   *
   * Strict role controls apply: only the seller involved and administrators
   * have access to this operation. Record access and case review events are
   * audit-logged. If the provided sellerAppealId does not exist, an appropriate
   * error is returned.
   *
   * @param connection
   * @param sellerAppealId Unique identifier for the seller appeal record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerAppealId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerAppealId")
    sellerAppealId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSellerAppeal> {
    try {
      return await getaiCommerceSellerSellerAppealsSellerAppealId({
        seller,
        sellerAppealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a pending seller appeal (ai_commerce_seller_appeals) by ID.
   *
   * This API endpoint allows for modifications to an open seller appeal entry,
   * identified by sellerAppealId. Updates can be made to the supporting
   * evidence, explanation, or appeal data fields, as long as the appeal has not
   * reached a 'closed' or 'finalized' status. The operation is strictly tracked
   * via immutable audit logs for dispute, compliance, and business workflow
   * traceability.
   *
   * Security logic ensures only the original appellant (seller) or an admin can
   * perform updates; role checks are enforced at the application layer. The
   * operation references the ai_commerce_seller_appeals table and its fields
   * for updating records while preserving all prior versions for compliance.
   *
   * Validation logic may include checks for non-modifiable appeal statuses,
   * evidence data formatting, and preventing overwriting resolved cases. Error
   * responses are returned for forbidden, locked, or invalid state transitions.
   * This endpoint should be used in conjunction with GET/detail and admin
   * review APIs in the broader dispute resolution workflow.
   *
   * @param connection
   * @param sellerAppealId Unique identifier of the seller appeal to update.
   * @param body Updated seller appeal data, evidence, or status information (if
   *   permitted).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sellerAppealId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerAppealId")
    sellerAppealId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSellerAppeal.IUpdate,
  ): Promise<IAiCommerceSellerAppeal> {
    try {
      return await putaiCommerceSellerSellerAppealsSellerAppealId({
        seller,
        sellerAppealId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Withdraw (soft delete) a pending seller appeal (ai_commerce_seller_appeals)
   * by ID.
   *
   * This API operation enables a seller to withdraw their own appeal for cases
   * where the issue has been resolved or the appeal is no longer relevant. The
   * soft delete is applied by setting the deleted_at timestamp for the record
   * in ai_commerce_seller_appeals, preserving the audit trail and evidentiary
   * requirements for compliance.
   *
   * Only appeals with open or reviewable status may be withdrawn by the
   * original appellant (seller); appeals in finalized, resolved, or locked
   * states cannot be overwritten or removed without admin intervention. Error
   * responses inform users of ineligible status transitions or lack of access
   * rights. This API must interoperate with audit logging and notification
   * mechanisms to keep all parties informed of appeal record changes.
   *
   * Platform admins can restore or permanently erase appeals as per escalation
   * procedures, but sellers are limited to soft-deleting their own unresolved
   * appeals.
   *
   * @param connection
   * @param sellerAppealId Unique identifier of the seller appeal to withdraw
   *   (soft delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sellerAppealId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerAppealId")
    sellerAppealId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceSellerSellerAppealsSellerAppealId({
        seller,
        sellerAppealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
