import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceSellerProductTags } from "../../../../providers/postaiCommerceSellerProductTags";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { putaiCommerceSellerProductTagsProductTagId } from "../../../../providers/putaiCommerceSellerProductTagsProductTagId";
import { deleteaiCommerceSellerProductTagsProductTagId } from "../../../../providers/deleteaiCommerceSellerProductTagsProductTagId";

import { IAiCommerceProductTag } from "../../../../api/structures/IAiCommerceProductTag";

@Controller("/aiCommerce/seller/productTags")
export class AicommerceSellerProducttagsController {
  /**
   * Create a new product-tag binding (ai_commerce_product_tags).
   *
   * Create a new product-tag binding in the ai_commerce_product_tags table.
   * This operation links a tag to a product, enhancing search/discovery
   * features and supporting marketing or analytic initiatives.
   *
   * The input includes identifiers for both product and tag, and may also
   * include meta or business context. Permissions apply: sellers can only tag
   * their own products; admins can create any binding. Error scenarios are
   * duplicate bindings, non-existent product/tag, or permission errors.
   *
   * @param connection
   * @param body The product-tag binding creation payload with product, tag, and
   *   context info.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceProductTag.ICreate,
  ): Promise<IAiCommerceProductTag> {
    try {
      return await postaiCommerceSellerProductTags({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product-tag binding (ai_commerce_product_tags).
   *
   * Update an existing product-tag binding in ai_commerce_product_tags. This is
   * used to reclassify the tag or product association, update meta/context
   * info, or correct earlier mistakes. Only admins or the owning seller may
   * perform this action.
   *
   * All changes are tracked and auditable for compliance and analytics history.
   * The operation requires the unique productTagId, and the request body
   * details the fields to update. Security: Only permitted users may update
   * their own products' tag bindings; error handling includes lack of
   * permission, invalid IDs, or data conflicts.
   *
   * @param connection
   * @param productTagId The unique identifier of the product-tag binding to
   *   update.
   * @param body Updated fields for the product-tag binding.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":productTagId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productTagId")
    productTagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductTag.IUpdate,
  ): Promise<IAiCommerceProductTag> {
    try {
      return await putaiCommerceSellerProductTagsProductTagId({
        seller,
        productTagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a product-tag binding (ai_commerce_product_tags).
   *
   * Delete (erase) a product-tag binding from the ai_commerce_product_tags
   * table. This removes the tag-product association, affecting search/discovery
   * on the platform. Only admins or owners can perform this.
   *
   * The operation takes the unique productTagId. Once erased, the association
   * is lost and cannot be immediately recovered unless re-created. Compliance
   * and audit logging applies. Errors include invalid binding ID, insufficient
   * permissions, or attempting to delete protected/tagged associations.
   *
   * @param connection
   * @param productTagId The unique identifier of the product-tag binding to
   *   erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":productTagId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productTagId")
    productTagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceSellerProductTagsProductTagId({
        seller,
        productTagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
