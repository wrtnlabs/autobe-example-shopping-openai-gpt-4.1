import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getaiCommerceSellerStoreBankingStoreBankingId } from "../../../../providers/getaiCommerceSellerStoreBankingStoreBankingId";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { putaiCommerceSellerStoreBankingStoreBankingId } from "../../../../providers/putaiCommerceSellerStoreBankingStoreBankingId";
import { deleteaiCommerceSellerStoreBankingStoreBankingId } from "../../../../providers/deleteaiCommerceSellerStoreBankingStoreBankingId";
import { postaiCommerceSellerStoreBanking } from "../../../../providers/postaiCommerceSellerStoreBanking";

import { IAiCommerceStoreBanking } from "../../../../api/structures/IAiCommerceStoreBanking";

@Controller("/aiCommerce/seller/storeBanking")
export class AicommerceSellerStorebankingController {
  /**
   * Retrieve seller store banking details by banking record ID
   * (ai_commerce_store_banking).
   *
   * Fetch detailed store banking information linked to a specific seller's
   * store.
   *
   * The operation targets ai_commerce_store_banking by requiring a unique
   * banking record identifier (storeBankingId) in the URL path. Response
   * includes all fields for bank identification and payout configuration, along
   * with the compliance and verification status as maintained in the database.
   *
   * Security enforcement ensures only the authenticated owner (seller) of the
   * store, or an administrator, can access the full banking record; others are
   * denied. Sensitive fields such as account numbers are handled in properly
   * permissioned views. All access is logged for auditability.
   *
   * @param connection
   * @param storeBankingId Unique identifier for the store banking record to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":storeBankingId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("storeBankingId")
    storeBankingId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceStoreBanking> {
    try {
      return await getaiCommerceSellerStoreBankingStoreBankingId({
        seller,
        storeBankingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update store banking details for a seller’s store by banking record ID
   * (ai_commerce_store_banking).
   *
   * Modify an existing store banking configuration by supplying the banking
   * record ID and new field values. All updates are validated against both
   * compliance and business rules before changes are persisted. Updates could
   * trigger re-verification and temporary suspension of payout until approval
   * if sensitive fields (bank account, routing, etc.) change.
   *
   * Only the store’s verified owner or administrators are permitted to update
   * banking records. All modifications are logged for compliance and audit
   * reasons. Sensitive data is stored securely according to industry standards,
   * and changes to critical fields can require additional identity verification
   * or trigger workflow notifications.
   *
   * @param connection
   * @param storeBankingId Unique identifier for the store banking record to
   *   update
   * @param body Updated store banking information. Only modifiable fields in
   *   compliance with business rules are accepted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":storeBankingId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("storeBankingId")
    storeBankingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceStoreBanking.IUpdate,
  ): Promise<IAiCommerceStoreBanking> {
    try {
      return await putaiCommerceSellerStoreBankingStoreBankingId({
        seller,
        storeBankingId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a store banking record by banking record ID
   * (ai_commerce_store_banking).
   *
   * Delete (permanently) a store banking configuration associated with a
   * seller's store, using the unique storeBankingId. This action is
   * irreversible in the absence of a soft delete column—physical removal occurs
   * unless business policy mandates logical retention for legal or compliance
   * reasons.
   *
   * Only the store’s authorized owner or an administrator may perform this
   * action, and all delete events are strictly logged for compliance. If the
   * record is referenced in unresolved payout actions or required for audit,
   * deletion may be denied or delayed subject to platform rules. Attempts to
   * delete non-existent or unauthorized records will result in clear error
   * messages.
   *
   * @param connection
   * @param storeBankingId Unique identifier for the store banking record to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":storeBankingId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("storeBankingId")
    storeBankingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceSellerStoreBankingStoreBankingId({
        seller,
        storeBankingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new store banking/payout record for a seller’s store
   * (ai_commerce_store_banking).
   *
   * Register new banking details for a seller’s store, providing all
   * compliance-required fields like bank name, account number, account holder's
   * name, and routing code. Upon submission, the banking record is stored
   * pending verification and compliance checks. Only the authenticated store
   * owner or administrators may create new banking configurations.
   *
   * All input fields are validated for financial industry compliance and
   * business logic requirements. Sensitive information is encrypted at rest and
   * only surfaced to permissioned users. Creation events are audit-logged for
   * legal and dispute resolution needs. Automated verification status and
   * verification flags are updated post-creation according to business rules.
   *
   * @param connection
   * @param body Information required to create a new store banking
   *   configuration record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceStoreBanking.ICreate,
  ): Promise<IAiCommerceStoreBanking> {
    try {
      return await postaiCommerceSellerStoreBanking({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
