import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceSellerCouponUses } from "../../../../providers/postaiCommerceSellerCouponUses";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { patchaiCommerceSellerCouponUses } from "../../../../providers/patchaiCommerceSellerCouponUses";
import { getaiCommerceSellerCouponUsesCouponUseId } from "../../../../providers/getaiCommerceSellerCouponUsesCouponUseId";
import { putaiCommerceSellerCouponUsesCouponUseId } from "../../../../providers/putaiCommerceSellerCouponUsesCouponUseId";
import { deleteaiCommerceSellerCouponUsesCouponUseId } from "../../../../providers/deleteaiCommerceSellerCouponUsesCouponUseId";

import { IAiCommerceCouponUse } from "../../../../api/structures/IAiCommerceCouponUse";
import { IPageIAiCommerceCouponUse } from "../../../../api/structures/IPageIAiCommerceCouponUse";

@Controller("/aiCommerce/seller/couponUses")
export class AicommerceSellerCouponusesController {
  /**
   * Redeem a valid issued coupon by creating an ai_commerce_coupon_uses record.
   *
   * Authenticated users (admin, seller, or the end user with coupon) can redeem
   * a valid, issued coupon by creating a new coupon use (redemption) entry. The
   * endpoint validates eligibility (coupon status, expiry, user, order
   * context), ensures usage quota is not exceeded, and locks the usage event
   * for audit.
   *
   * The coupon issue status is atomically updated to reflect redemption, and
   * cross-entity updates are made to ensure accurate incentive accounting.
   * Related APIs include coupon issuance, query issued coupons (for a user or
   * campaign), and reporting coupon usage. All redemptions are logged for
   * compliance and analytics; abuses are rejected with a descriptive error.
   * Coupon cannot be redeemed twice or by unauthorized actors.
   *
   * @param connection
   * @param body Redemption details: coupon issue, user, order/context, and
   *   event metadata for recording the usage.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceCouponUse.ICreate,
  ): Promise<IAiCommerceCouponUse> {
    try {
      return await postaiCommerceSellerCouponUses({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated coupon use events from
   * ai_commerce_coupon_uses for admin/seller analytics.
   *
   * Authenticated administrators or sellers can query coupon redemption events
   * with advanced filters: user, coupon code, order reference, status,
   * redemption date, campaign reference, or usage window. The operation
   * supports sorting, pagination, and status breakdowns to surface trends,
   * redemption velocity, and anomalies.
   *
   * Sensitive details (such as user IDs and campaign linkage) are only shown to
   * privileged users. Returned records include linked coupon issuance data, the
   * affected user/account, and a summary of redemption context. Error handling
   * includes validation for non-existent filter keys, excessive search window
   * size, or unauthorized filter scopes.
   *
   * Typical use cases include tracking which coupons were redeemed in a
   * campaign, investigating coupon abuse, and reviewing redemption history for
   * a given buyer or order. All query actions are logged for audit, and
   * real-time performance is optimized. Updates and deletions must use separate
   * endpoints.
   *
   * Business logic enforces that only active, valid coupon usage events are
   * included for general use; deleted or revoked uses appear only to admins for
   * compliance analysis.
   *
   * @param connection
   * @param body Search criteria—user, coupon, order, status, or campaign—plus
   *   pagination/sort fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceCouponUse.IRequest,
  ): Promise<IPageIAiCommerceCouponUse> {
    try {
      return await patchaiCommerceSellerCouponUses({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch details of a specific coupon use event from ai_commerce_coupon_uses
   * by couponUseId.
   *
   * The endpoint fetches a single coupon usage record by its unique
   * couponUseId, returning full context including the issuing coupon, redeemed
   * user, order, status, redemption date, and campaign linkage/tag.
   *
   * Role-based access ensures only admins, authorized sellers, or the involved
   * user can view the record. If the coupon use is not found or inaccessible,
   * the API returns an appropriate error. Use cases include support
   * investigation, abuse review, and verifying entitlement in support cases.
   * All requests are audit-logged for legal traceability. Related endpoints
   * include listing coupon uses and searching by campaign or user.
   *
   * @param connection
   * @param couponUseId Unique identifier of the coupon usage/redemption event
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":couponUseId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("couponUseId")
    couponUseId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCouponUse> {
    try {
      return await getaiCommerceSellerCouponUsesCouponUseId({
        seller,
        couponUseId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a coupon use/redemption in ai_commerce_coupon_uses by couponUseId,
   * for admin/seller corrections.
   *
   * Authorized administrators (and, where policy allows, issuing sellers) may
   * update a coupon usage record by couponUseId, changing its status (e.g.,
   * revoke, mark as refunded), event metadata, or associated order/context.
   * This is only allowed before settlement/finalization or as part of a fraud
   * investigation. Updates are strictly validated against current status,
   * redemption history, and business constraints; only allowed transitions are
   * permitted.
   *
   * Attempting to modify a finalized, expired, or audited usage event is
   * denied. All update operations are trace-logged for compliance, and only
   * authorized actors can update another user's redemption record. Related APIs
   * include coupon use creation (redeem), listing, and deletion/revocation
   * endpoints.
   *
   * @param connection
   * @param couponUseId Unique id of the coupon usage event to be updated.
   * @param body Update fields for the coupon use event: status, order, event
   *   metadata, or administrative correction.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":couponUseId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("couponUseId")
    couponUseId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCouponUse.IUpdate,
  ): Promise<IAiCommerceCouponUse> {
    try {
      return await putaiCommerceSellerCouponUsesCouponUseId({
        seller,
        couponUseId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a coupon use record in ai_commerce_coupon_uses by
   * couponUseId.
   *
   * Role-restricted users (admin, authorized seller) can delete a coupon use
   * record by couponUseId, intended for compliance, privacy, or administrative
   * correction (e.g., fraud cases or duplicate issue/usage correction).
   *
   * Before deletion, the system checks status and financial settlement: only
   * unfinalized uses may be deleted. Attempts to delete post-settlement or
   * previously audited records result in a validation error. Audit trails of
   * all deletion actions are maintained, including actor, context, and
   * timestamp for audit.
   *
   * Physical data removal is enforced; this operation does not perform logical
   * delete. Only privileged roles may invoke this operation.
   *
   * @param connection
   * @param couponUseId ID of coupon use/redemption record to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":couponUseId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("couponUseId")
    couponUseId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceSellerCouponUsesCouponUseId({
        seller,
        couponUseId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
