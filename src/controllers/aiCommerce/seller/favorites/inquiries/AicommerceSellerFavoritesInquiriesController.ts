import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteaiCommerceSellerFavoritesInquiriesFavoriteInquiryId } from "../../../../../providers/deleteaiCommerceSellerFavoritesInquiriesFavoriteInquiryId";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";

@Controller("/aiCommerce/seller/favorites/inquiries/:favoriteInquiryId")
export class AicommerceSellerFavoritesInquiriesController {
  /**
   * Remove a favorite inquiry (soft delete) for the authenticated user
   * (ai_commerce_favorites_inquiries).
   *
   * Delete a user's favorite inquiry by marking it as deleted. The operation
   * verifies user permissions, favorite inquiry ownership, and ensures the
   * operation is auditable and compliant with the business logic in
   * ai_commerce_favorites_inquiries.
   *
   * Security consideration: Accessible only to authenticated buyers or sellers
   * who own the favorite inquiry. Soft deletion preserves record integrity and
   * audit logging for evidence.
   *
   * This operation references the Prisma schema's
   * ai_commerce_favorites_inquiries table, specifically utilizing the
   * deleted_at column for soft removal. No data is physically erased,
   * satisfying compliance requirements for privacy and legal retention.
   *
   * Business logic and ownership validation are enforced. Errors are returned
   * if the favorite does not exist, does not belong to the user, or has already
   * been deleted.
   *
   * @param connection
   * @param favoriteInquiryId Unique identifier of the favorite inquiry to
   *   remove
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("favoriteInquiryId")
    favoriteInquiryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceSellerFavoritesInquiriesFavoriteInquiryId({
        seller,
        favoriteInquiryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
