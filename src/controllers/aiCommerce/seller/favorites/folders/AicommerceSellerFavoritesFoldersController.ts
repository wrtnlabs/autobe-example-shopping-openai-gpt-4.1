import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceSellerFavoritesFolders } from "../../../../../providers/patchaiCommerceSellerFavoritesFolders";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { getaiCommerceSellerFavoritesFoldersFolderId } from "../../../../../providers/getaiCommerceSellerFavoritesFoldersFolderId";

import { IPageIAiCommerceFavoritesFolder } from "../../../../../api/structures/IPageIAiCommerceFavoritesFolder";
import { IAiCommerceFavoritesFolder } from "../../../../../api/structures/IAiCommerceFavoritesFolder";

@Controller("/aiCommerce/seller/favorites/folders")
export class AicommerceSellerFavoritesFoldersController {
  /**
   * Search and retrieve favorite folders for the authenticated user
   * (ai_commerce_favorites_folders).
   *
   * Returns a list of folders used to organize address, product, and inquiry
   * favorites for the current authenticated buyer or seller. Supports searching
   * by folder name, filtering, and advanced organizational structures.
   * Pagination and sorting options are included as per business needs. Each
   * folder shown is owned by the current user only.
   *
   * Security: Buyers or sellers are limited to viewing/managing their folders.
   * Edge cases like non-existent or already-deleted folders are handled
   * transparently, with audit logging as needed.
   *
   * The operation supports compliance requirements for organization, privacy,
   * and user experience business logic. It follows
   * IAiCommerceFavoritesFolder.IRequest request body and returns paginated
   * IAiCommerceFavoritesFolder.ISummary responses.
   *
   * @param connection
   * @param body Folder search, filter, and pagination criteria
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesFolder.IRequest,
  ): Promise<IPageIAiCommerceFavoritesFolder.ISummary> {
    try {
      return await patchaiCommerceSellerFavoritesFolders({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific favorite folder by ID
   * (ai_commerce_favorites_folders).
   *
   * Fetches metadata and detailed information for a user's favorite folder,
   * including name, description, and organizational state. Ownership is
   * verified, and access is limited to the authenticated buyer or seller who
   * owns the folder. The operation ensures compliance and audit logging.
   *
   * Based on ai_commerce_favorites_folders, and keyed by folderId. Soft-deleted
   * or unauthorized access returns descriptive errors. Audit logic is in place
   * as needed for traceability.
   *
   * @param connection
   * @param folderId Unique identifier for the favorite folder record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":folderId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("folderId")
    folderId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceFavoritesFolder> {
    try {
      return await getaiCommerceSellerFavoritesFoldersFolderId({
        seller,
        folderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
