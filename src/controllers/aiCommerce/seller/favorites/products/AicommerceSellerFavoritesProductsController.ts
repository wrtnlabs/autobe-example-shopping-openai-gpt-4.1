import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchaiCommerceSellerFavoritesProducts } from "../../../../../providers/patchaiCommerceSellerFavoritesProducts";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";

import { IAiCommercePageIFavoritesProduct } from "../../../../../api/structures/IAiCommercePageIFavoritesProduct";
import { IAiCommerceFavoritesProduct } from "../../../../../api/structures/IAiCommerceFavoritesProduct";

@Controller("/aiCommerce/seller/favorites/products")
export class AicommerceSellerFavoritesProductsController {
  /**
   * Search and paginate a user's product favorites
   * (ai_commerce_favorites_products table).
   *
   * Allows authenticated users to retrieve a paginated, filtered, and
   * optionally sorted list of their product favorites for display,
   * organization, and further action. Users may filter by product_id, creation
   * date, label, folder, or other summary fields as per business rules. This
   * operation is scoped to only the favorites accessible to the calling user
   * unless executed by an admin.
   *
   * All filtering and paging fields must match the
   * IAiCommerceFavoritesProduct.IRequest schema. Output is always a paginated
   * summary for efficient UI consumption and analytics.
   *
   * Errors include unauthorized access, invalid search parameters, or failures
   * to locate matching records. This endpoint enables user-friendly favorites
   * list UI as well as batch organization, alert setup, and cross-linking with
   * recommendations or notification logic. It should be used together with
   * favorites add, remove, and detail APIs for full-featured personalization.
   *
   * @param connection
   * @param body Favorite product filter/search and pagination request
   *   parameters (IAiCommerceFavoritesProduct.IRequest).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceFavoritesProduct.IRequest,
  ): Promise<IAiCommercePageIFavoritesProduct.ISummary> {
    try {
      return await patchaiCommerceSellerFavoritesProducts({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
