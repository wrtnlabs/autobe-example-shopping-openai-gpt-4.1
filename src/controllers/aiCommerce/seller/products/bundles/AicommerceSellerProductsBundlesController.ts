import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceSellerProductsProductIdBundles } from "../../../../../providers/postaiCommerceSellerProductsProductIdBundles";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patchaiCommerceSellerProductsProductIdBundles } from "../../../../../providers/patchaiCommerceSellerProductsProductIdBundles";
import { getaiCommerceSellerProductsProductIdBundlesBundleId } from "../../../../../providers/getaiCommerceSellerProductsProductIdBundlesBundleId";
import { putaiCommerceSellerProductsProductIdBundlesBundleId } from "../../../../../providers/putaiCommerceSellerProductsProductIdBundlesBundleId";
import { deleteaiCommerceSellerProductsProductIdBundlesBundleId } from "../../../../../providers/deleteaiCommerceSellerProductsProductIdBundlesBundleId";

import { IAiCommerceProductBundle } from "../../../../../api/structures/IAiCommerceProductBundle";
import { IPageIAiCommerceProductBundle } from "../../../../../api/structures/IPageIAiCommerceProductBundle";

@Controller("/aiCommerce/seller/products/:productId/bundles")
export class AicommerceSellerProductsBundlesController {
  /**
   * Create a new product bundle for a product (ai_commerce_product_bundles
   * table).
   *
   * This operation enables a seller to create a new bundle for a product. The
   * supplied data specifies bundle code, name, description, pricing, and
   * constituent items (child products or variants and their quantities/order).
   * Creation requests are validated for allowed number of bundles, uniqueness
   * of bundle code, and required link to the parent product.
   *
   * The input follows the schema and supports advanced use cases such as
   * optional/required child items. Audit events are generated for compliance,
   * and the association to the parent product is mandatory. Errors are returned
   * for any violations of uniqueness, permissions, or data completeness. The
   * operation is limited to sellers with ownership of the product.
   *
   * @param connection
   * @param productId UUID of the parent product to which the bundle should be
   *   added.
   * @param body Bundle creation fields, includes item composition and pricing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductBundle.ICreate,
  ): Promise<IAiCommerceProductBundle> {
    try {
      return await postaiCommerceSellerProductsProductIdBundles({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve/paginate all bundles for a product (ai_commerce_product_bundles
   * table).
   *
   * This operation retrieves a paginated list of bundles linked to the
   * specified product. Bundles represent composite products that include
   * multiple child items. Sellers utilize this endpoint to view all bundles
   * under their product, with support for filtering by status, name, or other
   * criteria.
   *
   * The list is paginated and may be filtered by active status, name, or other
   * metadata as supported in the request DTO. The result includes summary
   * information suitable for listing in UI or further management. Only
   * authorized users (owners of the product or platform admins) can access this
   * information.
   *
   * Validation includes checking product existence and seller/admin
   * permissions. The ai_commerce_product_bundles table is the main reference,
   * but relationships to child products/variants may be included in the summary
   * DTO. Errors are raised for missing product or insufficient permissions.
   *
   * @param connection
   * @param productId UUID of the product whose bundles are being listed.
   * @param body Query, filter, and pagination parameters for getting bundles.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductBundle.IRequest,
  ): Promise<IPageIAiCommerceProductBundle.ISummary> {
    try {
      return await patchaiCommerceSellerProductsProductIdBundles({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific product bundle (ai_commerce_product_bundles
   * table).
   *
   * This endpoint retrieves the complete details of a bundle, including all
   * product/variant items, pricing, metadata, and status. Used in product
   * detail pages, editing workflows, or for preparing updates. Sellers must own
   * the parent product or have explicit permission to view.
   *
   * The GET operation fully populates all relevant bundle fields per the
   * ai_commerce_product_bundles schema and provides comprehensive information
   * for decision making or editing. Errors are returned if the combination of
   * productId and bundleId does not exist or if the requester lacks
   * authorization. See also: update bundle, erase bundle, and bundle listing
   * endpoints.
   *
   * @param connection
   * @param productId The unique identifier of the parent product.
   * @param bundleId The unique identifier of the bundle to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":bundleId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bundleId")
    bundleId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductBundle> {
    try {
      return await getaiCommerceSellerProductsProductIdBundlesBundleId({
        seller,
        productId,
        bundleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product bundle for a product
   * (ai_commerce_product_bundles table).
   *
   * This endpoint allows sellers to update bundle information, including
   * metadata, price, bundle composition, and statuses for a specific bundle
   * associated with a product. The seller must own the product/bundle.
   *
   * Input data is checked for validity in reference to the
   * ai_commerce_product_bundles schema, and changes are subject to
   * audit/snapshot processes. Uniqueness of bundle code, valid status
   * transitions, and logical update of bundle items are checked. Errors are
   * returned for invalid ids, lack of permission, or violations of business
   * rules.
   *
   * @param connection
   * @param productId UUID of the parent product.
   * @param bundleId UUID of the bundle to update.
   * @param body Update fields for the bundle, including item composition,
   *   price, and status changes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":bundleId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bundleId")
    bundleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductBundle.IUpdate,
  ): Promise<IAiCommerceProductBundle> {
    try {
      return await putaiCommerceSellerProductsProductIdBundlesBundleId({
        seller,
        productId,
        bundleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (soft/hard) a product bundle from a product
   * (ai_commerce_product_bundles table).
   *
   * This operation deletes a bundle from a product, subject to verification of
   * ownership and compliance with business rules. If the schema supports soft
   * deletion (deleted_at field), the operation marks the bundle as deleted but
   * does not physically erase it, retaining history for audit/compliance. If
   * the bundle is referenced in active orders or promotions, deletion may be
   * blocked.
   *
   * All deletions are audit-logged, and the operation is allowed only for
   * sellers who own the parent product and bundle. Deleting a non-existent or
   * already deleted bundle returns an error. Related endpoints: create, update,
   * at (get bundle).
   *
   * @param connection
   * @param productId UUID of the parent product.
   * @param bundleId UUID of the bundle to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":bundleId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bundleId")
    bundleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceSellerProductsProductIdBundlesBundleId({
        seller,
        productId,
        bundleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
