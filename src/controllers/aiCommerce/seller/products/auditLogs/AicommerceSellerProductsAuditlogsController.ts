import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceSellerProductsProductIdAuditLogs } from "../../../../../providers/patchaiCommerceSellerProductsProductIdAuditLogs";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";

import { IPageIAiCommerceProductAuditLog } from "../../../../../api/structures/IPageIAiCommerceProductAuditLog";
import { IAiCommerceProductAuditLog } from "../../../../../api/structures/IAiCommerceProductAuditLog";

@Controller("/aiCommerce/seller/products/:productId/auditLogs")
export class AicommerceSellerProductsAuditlogsController {
  /**
   * Search and retrieve audit logs of a product
   * (ai_commerce_product_audit_logs).
   *
   * This operation allows authorized sellers or admins to review the complete
   * audit history for a product, using advanced search, filter, and pagination
   * parameters passed in IAiCommerceProductAuditLog.IRequest. The endpoint
   * returns IPageIAiCommerceProductAuditLog, detailing each audit event, its
   * source/actor, what changed, and when.
   *
   * All accesses must be logged as read operations for compliance. No data is
   * modified by this method. Audit logs are critical for legal compliance,
   * security, forensic analysis, and dispute investigations, so business logic
   * must ensure only properly authorized users have access. When requested,
   * highly sensitive or private changes may be subject to further masking or
   * redaction based on platform compliance policy.
   *
   * @param connection
   * @param productId UUID of the product whose audit logs will be retrieved.
   * @param body Advanced filtering and pagination options for product audit
   *   logs retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductAuditLog.IRequest,
  ): Promise<IPageIAiCommerceProductAuditLog> {
    try {
      return await patchaiCommerceSellerProductsProductIdAuditLogs({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
