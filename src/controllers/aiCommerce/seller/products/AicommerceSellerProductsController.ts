import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceSellerProducts } from "../../../../providers/postaiCommerceSellerProducts";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { putaiCommerceSellerProductsProductId } from "../../../../providers/putaiCommerceSellerProductsProductId";

import { IAiCommerceProduct } from "../../../../api/structures/IAiCommerceProduct";

@Controller("/aiCommerce/seller/products")
export class AicommerceSellerProductsController {
  /**
   * Create a new product with business, inventory, and compliance details in
   * ai_commerce_products.
   *
   * Register a new product to the system as a seller or admin. Input data must
   * conform to IAiCommerceProduct.ICreate, including required business business
   * attributes (name, description), seller and store association, product
   * code/SKU, category assignments, base price, inventory details, and
   * compliance fields as mandated by platform policy. Optional variant/option
   * definitions may be specified at create time.
   *
   * Created products are initially saved as draft or require admin approval
   * depending on business workflow. The operation ensures all core validations:
   * required fields are present, price and inventory are within allowed limits,
   * SKU uniqueness is enforced, and regulatory requirements (certifications,
   * compliance region) are satisfied. Compliance status, legal snapshots, and
   * business rules are enforced according to the ai_commerce_products schema
   * and associated tables.
   *
   * Audit trails are generated for create events and reference all
   * actor/ownership information. The new product record is returned in detail
   * (IAiCommerceProduct DTO) after successful creation. Related endpoints
   * include product search (PATCH /products), detail (GET
   * /products/{productId}), and update (PUT /products/{productId}).
   *
   * @param connection
   * @param body Required information for new product registration, including
   *   business fields, inventory, and compliance.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceProduct.ICreate,
  ): Promise<IAiCommerceProduct> {
    try {
      return await postaiCommerceSellerProducts({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update product information and attributes for a specific productId in
   * ai_commerce_products.
   *
   * Edit or update fields of a product record identified by productId, using
   * IAiCommerceProduct.IUpdate to specify modified values. All modifications
   * are subject to role-based access control: sellers can only update their own
   * products, while admins may edit any product for correction/audit. Supported
   * fields include business attributes, pricing, inventory quantities, product
   * content, attachments, category/section bindings, variant/option
   * configurations, and compliance/certification fields.
   *
   * The operation enforces SKU uniqueness, pricing and inventory limits, and
   * legal compliance by validating updates per the ai_commerce_products schema
   * and regulatory requirements. On successful update, an audit snapshot is
   * captured for traceability. Error handling includes invalid productId,
   * unauthorized access, edit attempts for locked or deleted products, or
   * validation failures on submitted data. Related endpoints are GET
   * /products/{productId} (read), POST /products (create), and DELETE
   * /products/{productId} (deletion).
   *
   * @param connection
   * @param productId Unique identifier (UUID) of the product to update.
   * @param body Product update information: only the fields to modify are
   *   required, others may be omitted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":productId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProduct.IUpdate,
  ): Promise<IAiCommerceProduct> {
    try {
      return await putaiCommerceSellerProductsProductId({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
