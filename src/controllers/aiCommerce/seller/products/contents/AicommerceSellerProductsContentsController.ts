import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceSellerProductsProductIdContents } from "../../../../../providers/postaiCommerceSellerProductsProductIdContents";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patchaiCommerceSellerProductsProductIdContents } from "../../../../../providers/patchaiCommerceSellerProductsProductIdContents";
import { getaiCommerceSellerProductsProductIdContentsContentId } from "../../../../../providers/getaiCommerceSellerProductsProductIdContentsContentId";
import { putaiCommerceSellerProductsProductIdContentsContentId } from "../../../../../providers/putaiCommerceSellerProductsProductIdContentsContentId";
import { deleteaiCommerceSellerProductsProductIdContentsContentId } from "../../../../../providers/deleteaiCommerceSellerProductsProductIdContentsContentId";

import { IAiCommerceProductContent } from "../../../../../api/structures/IAiCommerceProductContent";
import { IPageIAiCommerceProductContent } from "../../../../../api/structures/IPageIAiCommerceProductContent";

@Controller("/aiCommerce/seller/products/:productId/contents")
export class AicommerceSellerProductsContentsController {
  /**
   * Create a new structured content record for a given product in
   * ai_commerce_product_contents.
   *
   * Adds a new structured business content record to a product based on a
   * POSTed IAiCommerceProductContent.ICreate DTO. The request captures required
   * fields such as content_type, format, locale, content_body, and
   * display_order. Sellers can thus manage multiple languages, detail blocks,
   * or technical instructions under a product.
   *
   * Admin/seller privileges are required for this action, and business logic
   * checks for duplicate content types/locale per product. The operation
   * ensures that the product is active and not locked. On success, returns the
   * newly created entity for immediate UI rendering. Validation/enforcement of
   * unique constraints and field lengths must follow the schema. Error
   * scenarios cover access denied, failed validation, or immutable product
   * state.
   *
   * @param connection
   * @param productId ID of the product to which content will be added
   * @param body New content record data for the target product
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductContent.ICreate,
  ): Promise<IAiCommerceProductContent> {
    try {
      return await postaiCommerceSellerProductsProductIdContents({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate content records for a product from
   * ai_commerce_product_contents.
   *
   * Retrieves a filtered and paginated list of product content records for a
   * specified product. The PATCH method with request body allows complex search
   * queries: filter by content_type, locale, text, or sort_order as per
   * IAiCommerceProductContent.IRequest DTO specification.
   *
   * Accessible to sellers and admins for their own products, this endpoint
   * supports listing descriptions, specs, and other structured content.
   * Pagination rules and search term filtering are applied, limiting result
   * size per business requirements and performance constraints. Security
   * requires seller ownership or admin rights, and logic validates product
   * existence and permissions.
   *
   * The response delivers a page object (IPageIAiCommerceProductContent) with
   * pagination metadata and summary content for display or editing UIs. Errors
   * for access denied or product not found are covered.
   *
   * @param connection
   * @param productId Target product's ID for searching content records
   * @param body Search criteria and pagination options for content record
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductContent.IRequest,
  ): Promise<IPageIAiCommerceProductContent> {
    try {
      return await patchaiCommerceSellerProductsProductIdContents({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific content record for a product from
   * ai_commerce_product_contents.
   *
   * Fetches a single structured business content entry for a product, which
   * could be a marketing description, instruction, or technical detail, as
   * outlined in the ai_commerce_product_contents table. Path parameters specify
   * the parent product and content record.
   *
   * Returns the complete entity with fields including id, product_id,
   * content_type, format, locale, content_body, and display_order. Security
   * requires seller ownership or admin privileges for modification; public
   * access is allowed for published content per business logic. Error handling
   * covers not found, access denied, or deleted records. No request body is
   * required.
   *
   * @param connection
   * @param productId Parent product for the content record
   * @param contentId Unique ID for the content record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":contentId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductContent> {
    try {
      return await getaiCommerceSellerProductsProductIdContentsContentId({
        seller,
        productId,
        contentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific product content record in ai_commerce_product_contents.
   *
   * Permits a seller or admin to fully update an existing structured product
   * content record (such as a marketing description, usage instruction, or
   * technical spec). The IAiCommerceProductContent.IUpdate DTO request body
   * allows field-by-field replacement. Path parameters specify the product and
   * the target content.
   *
   * Business logic validates that the product/content pair exists and is
   * modifiable (not locked or published, if such restrictions exist). On
   * success, a refreshed entity is returned to the client. Permission checks
   * enforce that only the product owner or admin can update content. Validation
   * covers uniqueness, required fields, and correct localization. Errors
   * include not found, forbidden, or immutable state failures.
   *
   * @param connection
   * @param productId ID of the parent product for the content record
   * @param contentId Target content record's unique identifier
   * @param body Field data for updating a product content record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":contentId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductContent.IUpdate,
  ): Promise<IAiCommerceProductContent> {
    try {
      return await putaiCommerceSellerProductsProductIdContentsContentId({
        seller,
        productId,
        contentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a product content entity associated with a specific product in
   * ai_commerce_product_contents.
   *
   * The DELETE /products/{productId}/contents/{contentId} endpoint allows a
   * seller or admin to remove a single product content entity (such as a
   * detailed description, technical spec, or how-to guide) associated with the
   * specified product.
   *
   * Security is enforced based on product ownership; only the seller who owns
   * the product or an admin with global privileges can execute this operation.
   *
   * Upon invocation, the service identifies the target product and verifies the
   * contentId exists and is associated with the productId. The content record
   * is marked as deleted in the database (soft deletion performed by updating
   * the deleted_at timestamp rather than physical removal), maintaining a full
   * audit trail for compliance and recovery purposes.
   *
   * This operation logs a compliance record, capturing a snapshot of the
   * content before deletion for legal, regulatory, and dispute evidence. If the
   * content is referenced by downstream flows such as SEO or merchandising,
   * associated services are notified of the deletion event for real-time update
   * propagation.
   *
   * If the resource does not exist or is already deleted, the operation returns
   * an appropriate error. The endpoint does not accept a request body and does
   * not return any response body upon successful execution, returning a 204 No
   * Content status code. Any errors trigger clearly defined error responses
   * indicating missing resources or unauthorized action.
   *
   * @param connection
   * @param productId Unique identifier for the target product whose content is
   *   to be deleted.
   * @param contentId Unique identifier of the product content entity to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":contentId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("contentId")
    contentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceSellerProductsProductIdContentsContentId({
        seller,
        productId,
        contentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
