import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceSellerCartTemplates } from "../../../../providers/postaiCommerceSellerCartTemplates";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { patchaiCommerceSellerCartTemplates } from "../../../../providers/patchaiCommerceSellerCartTemplates";
import { getaiCommerceSellerCartTemplatesCartTemplateId } from "../../../../providers/getaiCommerceSellerCartTemplatesCartTemplateId";
import { putaiCommerceSellerCartTemplatesCartTemplateId } from "../../../../providers/putaiCommerceSellerCartTemplatesCartTemplateId";

import { IAiCommerceCartTemplate } from "../../../../api/structures/IAiCommerceCartTemplate";
import { IPageIAiCommerceCartTemplate } from "../../../../api/structures/IPageIAiCommerceCartTemplate";

@Controller("/aiCommerce/seller/cartTemplates")
export class AicommerceSellerCarttemplatesController {
  /**
   * Create a new cart template in ai_commerce_cart_templates.
   *
   * Registers a new cart template for a seller or administrator in
   * ai_commerce_cart_templates. All fields validated for requiredness,
   * uniqueness, and role constraints. Buyers may not use this endpoint. Success
   * returns the complete new template as created.
   *
   * @param connection
   * @param body Request body for cart template creation
   *   (IAiCommerceCartTemplate.ICreate), defining all template and association
   *   fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceCartTemplate.ICreate,
  ): Promise<IAiCommerceCartTemplate> {
    try {
      return await postaiCommerceSellerCartTemplates({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate ai_commerce_cart_templates (cart templates).
   *
   * Searches, filters, and paginates cart templates using criteria like name,
   * creator, store, and status from ai_commerce_cart_templates. Sellers only
   * see their own; admins have global audit access. Supports partial matches
   * and sort order. Pagination metadata in response. Intended for template
   * management, campaign support, or troubleshooting rollouts.
   *
   * @param connection
   * @param body Request body with filters/pagination for searching cart
   *   templates, per IAiCommerceCartTemplate.IRequest.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IAiCommerceCartTemplate.IRequest,
  ): Promise<IPageIAiCommerceCartTemplate.ISummary> {
    try {
      return await patchaiCommerceSellerCartTemplates({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed cart template by cartTemplateId from
   * ai_commerce_cart_templates.
   *
   * Returns all properties of the ai_commerce_cart_templates row for the
   * cartTemplateId. If a seller, they must own the template; admins can
   * retrieve any. Used for review, configuration, edit flows. Returns error on
   * not-found or unauthorized access.
   *
   * @param connection
   * @param cartTemplateId Unique identifier of the cart template to fetch, as
   *   UUID.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartTemplateId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("cartTemplateId")
    cartTemplateId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCartTemplate> {
    try {
      return await getaiCommerceSellerCartTemplatesCartTemplateId({
        seller,
        cartTemplateId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update properties of an existing cart template by cartTemplateId.
   *
   * Permits the updater (admin or owning seller) to change template properties
   * (name, description, config, assignment, status) for an entity in
   * ai_commerce_cart_templates. Handles audit, naming, uniqueness, and
   * ownership per business rules. Denies requests lacking permission or
   * validity.
   *
   * @param connection
   * @param cartTemplateId Unique identifier for cart template update, as UUID.
   * @param body Fields to update on the target template
   *   (IAiCommerceCartTemplate.IUpdate).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartTemplateId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("cartTemplateId")
    cartTemplateId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartTemplate.IUpdate,
  ): Promise<IAiCommerceCartTemplate> {
    try {
      return await putaiCommerceSellerCartTemplatesCartTemplateId({
        seller,
        cartTemplateId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
