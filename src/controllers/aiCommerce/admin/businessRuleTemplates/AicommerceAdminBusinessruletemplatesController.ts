import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminBusinessRuleTemplates } from "../../../../providers/postaiCommerceAdminBusinessRuleTemplates";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminBusinessRuleTemplates } from "../../../../providers/patchaiCommerceAdminBusinessRuleTemplates";
import { getaiCommerceAdminBusinessRuleTemplatesRuleId } from "../../../../providers/getaiCommerceAdminBusinessRuleTemplatesRuleId";
import { putaiCommerceAdminBusinessRuleTemplatesRuleId } from "../../../../providers/putaiCommerceAdminBusinessRuleTemplatesRuleId";
import { deleteaiCommerceAdminBusinessRuleTemplatesRuleId } from "../../../../providers/deleteaiCommerceAdminBusinessRuleTemplatesRuleId";

import { IAiCommerceBusinessRuleTemplates } from "../../../../api/structures/IAiCommerceBusinessRuleTemplates";
import { IPageIAiCommerceBusinessRuleTemplate } from "../../../../api/structures/IPageIAiCommerceBusinessRuleTemplate";
import { IAiCommerceBusinessRuleTemplate } from "../../../../api/structures/IAiCommerceBusinessRuleTemplate";

@Controller("/aiCommerce/admin/businessRuleTemplates")
export class AicommerceAdminBusinessruletemplatesController {
  /**
   * Create a new business rule template (ai_commerce_business_rule_templates).
   *
   * Create a new business rule template by specifying the required code, name,
   * version, rules/configuration data, business status, and timestamps.
   * Business rule templates can be attached to channels, sections, or
   * categories, and are versioned for audit and compliance. Only administrators
   * are authorized to create new rule templates, and each template code must be
   * unique per version. This operation collects all necessary properties (code,
   * name, version, template_data, business_status, created_at, updated_at) as
   * defined in the ai_commerce_business_rule_templates schema.
   *
   * Security is enforced such that only users with the admin role are permitted
   * to call this endpoint. Upon creation, the template becomes available for
   * linking to channel/section/category configurations.
   *
   * Validation rules include uniqueness of code/version and non-null config
   * fields. Errors occur for missing required fields or conflicts in
   * code/version pairs.
   *
   * @param connection
   * @param body Business rule template creation payload. Required: code, name,
   *   version, template_data, business_status, created_at, updated_at.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceBusinessRuleTemplates.ICreate,
  ): Promise<IAiCommerceBusinessRuleTemplates> {
    try {
      return await postaiCommerceAdminBusinessRuleTemplates({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve business rule templates (paginated) from
   * ai_commerce_business_rule_templates.
   *
   * Retrieves a paginated, filterable, and sortable list of business rule
   * templates from the ai_commerce_business_rule_templates table. The response
   * provides summary metadata for each template, including code, version,
   * business status, creation dates, and approval flows, facilitating
   * management by platform administrators.
   *
   * Authorization is restricted to admin users to protect core business/process
   * logic. All accesses are logged for compliance. Searching can be applied by
   * template code, status, version, or business context fields. Sorting and
   * pagination are supported as per CMS-integrated UI requirements.
   *
   * Failures due to invalid filters or pagination return actionable error
   * messages. This list operation is commonly paired with template detail,
   * create, update, and delete endpoints for full template lifecycle
   * management.
   *
   * @param connection
   * @param body Search criteria and pagination settings for business rule
   *   templates.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceBusinessRuleTemplate.IRequest,
  ): Promise<IPageIAiCommerceBusinessRuleTemplate.ISummary> {
    try {
      return await patchaiCommerceAdminBusinessRuleTemplates({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a business rule template by ruleId from
   * ai_commerce_business_rule_templates.
   *
   * Fetches the detailed information for a business rule template, including
   * code, version, serialized rule logic, statuses, and audit fields, based on
   * the provided ruleId path parameter. The operation enables administrator
   * users to fully inspect the template's configuration, business logic, and
   * workflow context before making edits or changes.
   *
   * Authorization is strictly reserved for admins to safeguard process
   * configuration. All accesses are audit-logged. Attempting to retrieve a
   * non-existent or inaccessible ruleId will result in a clear error message.
   * Typically paired with create, update, and delete operations for
   * comprehensive template management.
   *
   * @param connection
   * @param ruleId The UUID of the business rule template to fetch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":ruleId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceBusinessRuleTemplate> {
    try {
      return await getaiCommerceAdminBusinessRuleTemplatesRuleId({
        admin,
        ruleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing business rule template
   * (ai_commerce_business_rule_templates).
   *
   * Update a business rule template by specifying its ruleId and providing new
   * configuration values for name, template data, status, or version. The
   * ai_commerce_business_rule_templates schema governs the modifiable
   * properties and requires all updates to be audit-logged. Only administrators
   * can perform updates, and the ruleId must be valid and correspond to an
   * existing record.
   *
   * This operation enforces data validation on editable fields, ensures
   * uniqueness of (code, version), and maintains audit trails according to
   * business compliance needs. Errors may occur if the ruleId is invalid, the
   * template does not exist, or updates violate uniqueness constraints.
   *
   * @param connection
   * @param ruleId Unique identifier of the business rule template to update.
   * @param body Update details for the business rule template.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":ruleId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceBusinessRuleTemplates.IUpdate,
  ): Promise<IAiCommerceBusinessRuleTemplates> {
    try {
      return await putaiCommerceAdminBusinessRuleTemplatesRuleId({
        admin,
        ruleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a business rule template permanently
   * (ai_commerce_business_rule_templates).
   *
   * Delete an existing business rule template by providing the ruleId. This
   * operation removes the template record from the database, and is limited to
   * administrative users to ensure compliance and avoid accidental loss of
   * critical business logic. The ruleId parameter must reference a valid
   * template. The operation performs a hard deleteâ€”template records are
   * permanently removed and cannot be recovered. The deletion is disallowed if
   * the template is referenced by a live configuration.
   *
   * Operation is fully audit-logged, and errors are returned if the template is
   * referenced elsewhere or the ruleId is invalid.
   *
   * @param connection
   * @param ruleId Unique identifier for the business rule template to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":ruleId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminBusinessRuleTemplatesRuleId({
        admin,
        ruleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
