import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminStoreSettings } from "../../../../providers/postaiCommerceAdminStoreSettings";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminStoreSettings } from "../../../../providers/patchaiCommerceAdminStoreSettings";
import { getaiCommerceAdminStoreSettingsStoreSettingId } from "../../../../providers/getaiCommerceAdminStoreSettingsStoreSettingId";
import { putaiCommerceAdminStoreSettingsStoreSettingId } from "../../../../providers/putaiCommerceAdminStoreSettingsStoreSettingId";
import { deleteaiCommerceAdminStoreSettingsStoreSettingId } from "../../../../providers/deleteaiCommerceAdminStoreSettingsStoreSettingId";

import { IAiCommerceStoreSetting } from "../../../../api/structures/IAiCommerceStoreSetting";
import { IPageIAiCommerceStoreSetting } from "../../../../api/structures/IPageIAiCommerceStoreSetting";

@Controller("/aiCommerce/admin/storeSettings")
export class AicommerceAdminStoresettingsController {
  /**
   * Create a new store setting (ai_commerce_store_settings).
   *
   * Create a new store setting for a given store, specifying key configuration
   * details such as key, value, and metadata. Business rules enforce that each
   * setting key must be unique within its store and that all required fields
   * (store_id, key, value) are present and correctly formatted according to the
   * system configuration policy.
   *
   * Only users with admin role are allowed to create settings via this
   * operation. Upon success, an audit log entry is generated for compliance and
   * forensic traceability.
   *
   * Error scenarios include attempts to duplicate a key for a store, invalid
   * format submissions, and lack of permission. All setting creation events are
   * immutable and tracked as prescribed by business compliance requirements.
   *
   * @param connection
   * @param body Information for creation of store setting (must specify
   *   store_id, key, value, and any business-required metadata).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceStoreSetting.ICreate,
  ): Promise<IAiCommerceStoreSetting> {
    try {
      return await postaiCommerceAdminStoreSettings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of store settings
   * (ai_commerce_store_settings).
   *
   * Retrieve a filtered and paginated list of store settings for the commerce
   * platform. This API supports admin-level oversight and seller-level
   * self-management, enabling advanced search, filtering by store, active
   * status, and configuration parameter values.
   *
   * Each returned result includes the unique setting ID, belonging store,
   * configuration key, value, status, and timestamps for creation and last
   * update. Sellers are limited to viewing their own stores' settings, while
   * admins can view all. Audit logging is enabled for all accesses via this
   * endpoint, in compliance with platform governance and evidentiary rules
   * referenced in the business requirements.
   *
   * Security is enforced through role-based access such that only authorized
   * admins or store owners can query this list. Performance is optimized
   * through indexed search on store_id, key, and active status. Errors (such as
   * filter collisions or unauthorized access) are clearly returned with
   * actionable error codes.
   *
   * @param connection
   * @param body Search filters, pagination, and sorting options for store
   *   settings list retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceStoreSetting.IRequest,
  ): Promise<IPageIAiCommerceStoreSetting.ISummary> {
    try {
      return await patchaiCommerceAdminStoreSettings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific store setting
   * (ai_commerce_store_settings).
   *
   * Retrieve full details for a single store setting by its unique identifier.
   * Includes all columns (id, store_id, key, value, created_at, updated_at,
   * deleted_at) and relation references (linked store if required).
   *
   * Permissions are strictly enforced so that sellers may only access settings
   * associated with their own stores, while admins have unrestricted access.
   * The API is intended for use in admin or store owner dashboards,
   * configuration debugging, or compliance reviews. Errors are returned for
   * invalid IDs or forbidden access according to platform compliance rules.
   *
   * All accesses are audit-logged for governance and traceability, supporting
   * the evidentiary protocols set forth in the business and compliance
   * documents.
   *
   * @param connection
   * @param storeSettingId Unique identifier of the target store setting (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":storeSettingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("storeSettingId")
    storeSettingId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceStoreSetting> {
    try {
      return await getaiCommerceAdminStoreSettingsStoreSettingId({
        admin,
        storeSettingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a store setting by ID (ai_commerce_store_settings).
   *
   * Update an existing store setting for any store, identified by its unique
   * storeSettingId. Supported fields for update include configuration key,
   * value, and supporting metadata. Each update is validated to ensure that the
   * updated key remains unique within its store and that all values conform to
   * business policy.
   *
   * The operation is strictly limited to admin users, with full auditability
   * for each change. Updates produce immutable audit trail entries in line with
   * governance requirements. Sellers may not use this operation as platform
   * configuration settings are admin-defined for integrity.
   *
   * Error handling includes forbidden attempts, invalid IDs, or format
   * violations. Successful updates synchronize configuration across related
   * subsystems per compliance mandates.
   *
   * @param connection
   * @param storeSettingId Unique identifier of the target store setting (UUID).
   * @param body Updated store setting data, such as key, value, or status. Must
   *   conform with unique constraints and configuration policies.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":storeSettingId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("storeSettingId")
    storeSettingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceStoreSetting.IUpdate,
  ): Promise<IAiCommerceStoreSetting> {
    try {
      return await putaiCommerceAdminStoreSettingsStoreSettingId({
        admin,
        storeSettingId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (hard) a store setting by ID (ai_commerce_store_settings).
   *
   * Permanently delete a store setting by its unique storeSettingId. This
   * operation completely removes the record from the database, as no soft
   * delete field is present.
   *
   * Admin role is required and all deletions are audit-logged. Business
   * safeguards ensure that the configuration is not in use or required for
   * active business flows before permitting deletion. Attempts to delete
   * settings in use or where access is forbidden will be rejected with
   * informative error messages, fulfilling data integrity standards and
   * compliance requirements.
   *
   * Error handling includes invalid ID, permission denial, and attempts to
   * delete active/locked configuration. Successful deletions report
   * confirmation and are traceable via audit logs for legal/conformance
   * reviews.
   *
   * @param connection
   * @param storeSettingId Unique identifier of the store setting to delete
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":storeSettingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("storeSettingId")
    storeSettingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminStoreSettingsStoreSettingId({
        admin,
        storeSettingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
