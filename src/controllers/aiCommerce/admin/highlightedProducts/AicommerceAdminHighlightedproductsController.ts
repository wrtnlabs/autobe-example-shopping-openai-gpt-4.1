import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminHighlightedProducts } from "../../../../providers/postaiCommerceAdminHighlightedProducts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putaiCommerceAdminHighlightedProductsHighlightedProductId } from "../../../../providers/putaiCommerceAdminHighlightedProductsHighlightedProductId";
import { deleteaiCommerceAdminHighlightedProductsHighlightedProductId } from "../../../../providers/deleteaiCommerceAdminHighlightedProductsHighlightedProductId";

import { IAiCommerceHighlightedProduct } from "../../../../api/structures/IAiCommerceHighlightedProduct";

@Controller("/aiCommerce/admin/highlightedProducts")
export class AicommerceAdminHighlightedproductsController {
  /**
   * Create a new highlighted product record (ai_commerce_highlighted_products).
   *
   * Add a new highlighted product record to ai_commerce_highlighted_products,
   * specifying product, schedule, curation reason, and creator identity. Only
   * users with sufficient privileges may access this operation. Input
   * validation ensures that a valid, promoted product is selected with
   * appropriate schedule (start/end), and that duplication or overlap with
   * other campaigns is prevented.
   *
   * Highlights may power homepage rotations, promotional events, or curated
   * category spotlights. All operations are logged for compliance, and actions
   * may trigger downstream campaign processes or analytics updates. Failures
   * may include date conflicts, ineligible product IDs, or access control
   * violations.
   *
   * @param connection
   * @param body Data to create a new highlighted product, including product and
   *   schedule info.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceHighlightedProduct.ICreate,
  ): Promise<IAiCommerceHighlightedProduct> {
    try {
      return await postaiCommerceAdminHighlightedProducts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific highlighted product entry in the discovery business
   * table.
   *
   * This operation modifies an existing highlighted product, allowing changes
   * to the highlight time frame, manual highlight reasons, and related campaign
   * or business context data.
   *
   * Security is enforced so that only users with appropriate admin or seller
   * privileges can update highlights that were created by them or that belong
   * to their marketplace segment. Each update is audit-logged according to
   * compliance and marketing rules.
   *
   * Inputs are validated against the business schema for correct scheduling
   * (start and end times), reason annotation, and relational integrity with
   * product and curator. Conflicting updates, such as overlapping scheduled
   * highlights, are rejected with actionable errors.
   *
   * For recovery and evidence, every update produces a new audit trail entry
   * and updates the status of any related notifications or analytics
   * dashboards.
   *
   * @param connection
   * @param highlightedProductId Unique identifier for the highlighted product
   *   record being updated
   * @param body Fields to update in the highlighted product (window, curator
   *   ID, reason, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":highlightedProductId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("highlightedProductId")
    highlightedProductId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceHighlightedProduct.IUpdate,
  ): Promise<IAiCommerceHighlightedProduct> {
    try {
      return await putaiCommerceAdminHighlightedProductsHighlightedProductId({
        admin,
        highlightedProductId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a highlighted product from discovery curation registry.
   *
   * This endpoint performs a logical deletion on a highlighted product record:
   * the entry is marked as deleted (timestamped), but not physically removed,
   * to preserve historical and analytic integrity.
   *
   * Only authorized admins or the original seller curator (with sufficient
   * privileges) may perform this operation. Every removal is audit-logged with
   * timestamp, actor, and the pre-deletion state for compliance and recovery.
   * The audit trail ensures the recovery path, and analytic dashboards are
   * updated to exclude deleted highlights from live curation views but retain
   * history.
   *
   * Deletion requests that violate campaign schedule requirements or attempt to
   * delete active/in-use highlights may be rejected with detailed error
   * messaging. All soft-deleted records remain available for evidence,
   * rollback, or audit queries by authorized personnel.
   *
   * @param connection
   * @param highlightedProductId Unique identifier for the highlighted product
   *   to remove from the registry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":highlightedProductId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("highlightedProductId")
    highlightedProductId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminHighlightedProductsHighlightedProductId(
        {
          admin,
          highlightedProductId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
