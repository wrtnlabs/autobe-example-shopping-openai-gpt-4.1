import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminCouponIssues } from "../../../../providers/postaiCommerceAdminCouponIssues";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminCouponIssues } from "../../../../providers/patchaiCommerceAdminCouponIssues";
import { getaiCommerceAdminCouponIssuesCouponIssueId } from "../../../../providers/getaiCommerceAdminCouponIssuesCouponIssueId";
import { putaiCommerceAdminCouponIssuesCouponIssueId } from "../../../../providers/putaiCommerceAdminCouponIssuesCouponIssueId";
import { deleteaiCommerceAdminCouponIssuesCouponIssueId } from "../../../../providers/deleteaiCommerceAdminCouponIssuesCouponIssueId";

import { IAiCommerceCouponIssue } from "../../../../api/structures/IAiCommerceCouponIssue";
import { IPageIAiCommerceCouponIssue } from "../../../../api/structures/IPageIAiCommerceCouponIssue";

@Controller("/aiCommerce/admin/couponIssues")
export class AicommerceAdminCouponissuesController {
  /**
   * Issue a new coupon to a user (ai_commerce_coupon_issues table) for admin or
   * seller campaigns.
   *
   * This operation enables platform administrators, sellers (for their own
   * coupons), or the automated incentive engine to grant a coupon to a specific
   * user by creating a new record in the ai_commerce_coupon_issues table.
   *
   * The request enforces business rules such as coupon validity period, max
   * usage/quota, restrictions on overlapping coupon campaigns, and user
   * eligibility. Only coupons presently active and not expired may be issued.
   * The operation ensures that a single coupon cannot be issued multiple times
   * to the same user beyond quota constraints.
   *
   * Error scenarios include invalid coupon codes, user not found or not
   * eligible, quota/issuance limit exceeded, expired coupons, or violation of
   * business restrictions. All successful and failed issuance attempts are
   * audit-logged for compliance and analytics.
   *
   * Related operations include coupon usage/redeem (couponUses), coupon issue
   * update (e.g., status adjustment), and searching existing issues for a given
   * user or campaign. All coupon issue data is ultimately linked to coupon
   * usage for tracking and incentive analytics.
   *
   * User role permissions restrict coupon issuance to admins for all coupons
   * and sellers for coupons they own, while public users cannot invoke this
   * operation directly. System-dispatched automated issuance must comply with
   * full business validation rules.
   *
   * @param connection
   * @param body Details of the coupon issuance to a user account, including
   *   coupon, recipient, issuance status, expiry, and campaign info.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCouponIssue.ICreate,
  ): Promise<IAiCommerceCouponIssue> {
    try {
      return await postaiCommerceAdminCouponIssues({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list coupon issues to users (admin only) from
   * ai_commerce_coupon_issues.
   *
   * Search and retrieve coupon issues (user-assigned coupons), supporting
   * advanced filtering and pagination for analytics and compliance reviews. The
   * operation allows admins to see which users have been issued specific
   * coupons, their usage, expiration, and redemption status.
   *
   * Coupon issues represent the individual assignment of platform or seller
   * coupons to buyers or accounts, and are linked to campaign details and
   * business events. Supports searching by coupon attributes, user/account,
   * status (issued, redeemed, expired, revoked), and by issuance or usage
   * period.
   *
   * Response is paginated and returns summary records only. Only admin users
   * may call this operation to protect sensitive financial and analytics
   * records.
   *
   * @param connection
   * @param body Criteria for searching coupon issue records including status,
   *   period, and user/coupon relation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCouponIssue.IRequest,
  ): Promise<IPageIAiCommerceCouponIssue.ISummary> {
    try {
      return await patchaiCommerceAdminCouponIssues({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full detail for a coupon issue (admin only) from
   * ai_commerce_coupon_issues.
   *
   * Returns a specific coupon issue record (user-assigned coupon) from the
   * 'ai_commerce_coupon_issues' table, found by couponIssueId. Information
   * includes coupon entity reference, user/account, issuance/expiry dates,
   * redemption status, and relevant campaign attribution or batch info.
   *
   * This endpoint is vital for support, compliance, and business investigation
   * scenarios where an individual coupon's journey through issuance and usage
   * must be audited and traced. Only admin users may access per-issue detail,
   * as assignment and redemption pathways are sensitive.
   *
   * Handles not found, permission, and record status errors gracefully for
   * robust operational integration.
   *
   * @param connection
   * @param couponIssueId The unique identifier of the coupon issue to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":couponIssueId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponIssueId")
    couponIssueId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCouponIssue> {
    try {
      return await getaiCommerceAdminCouponIssuesCouponIssueId({
        admin,
        couponIssueId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an issued coupon's status or expiry by couponIssueId
   * (ai_commerce_coupon_issues table).
   *
   * The operation allows an authorized administrator or the owning seller to
   * update fields of a coupon issue, identified by its couponIssueId. Typical
   * use cases include manual revocation of unredeemed coupons, expiry extension
   * due to campaign adjustments, or correction of campaign metadata.
   *
   * Update actions are governed by business rules: only coupons in specific
   * states (e.g., issued, not yet redeemed or expired) may be updated.
   * Attempting to update redeemed, revoked, or expired coupon issues is
   * rejected with a validation error, and all update attempts are recorded in
   * the audit log for compliance and evidence.
   *
   * The operation carefully validates date and status transitions to avoid
   * retroactive benefit extension or unauthorized coupon reactivation. Related
   * APIs include coupon issuance, coupon usage, and querying coupon status for
   * given users.
   *
   * @param connection
   * @param couponIssueId The unique identifier of the coupon issue to update.
   * @param body Fields to update for the issued coupon, such as status, expiry,
   *   or batch association.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":couponIssueId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponIssueId")
    couponIssueId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCouponIssue.IUpdate,
  ): Promise<IAiCommerceCouponIssue> {
    try {
      return await putaiCommerceAdminCouponIssuesCouponIssueId({
        admin,
        couponIssueId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an unredeemed, unexpired coupon issue by couponIssueId
   * (ai_commerce_coupon_issues).
   *
   * Authorized users (admin or the issuer seller) may delete a coupon issue.
   * This ensures compliance with privacy and audit policies while preserving
   * historical records elsewhere for regulatory review and analytics.
   *
   * Before performing deletion, the system checks that the coupon issue is
   * unused (not redeemed) and not already expired. Attempts to delete already
   * used, redeemed, or expired coupons are rejected to maintain auditability.
   * Audit trails of all deletion actions are maintained, including actor,
   * timestamp, and associated campaign/context metadata.
   *
   * End users cannot delete coupon issues directly; only privileged roles can
   * initiate revocation. Related API operations include issuing, updating, and
   * redeeming coupons, each of which enforces business rules for legal and
   * audit compliance.
   *
   * @param connection
   * @param couponIssueId The unique ID of the coupon issue to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":couponIssueId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponIssueId")
    couponIssueId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminCouponIssuesCouponIssueId({
        admin,
        couponIssueId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
