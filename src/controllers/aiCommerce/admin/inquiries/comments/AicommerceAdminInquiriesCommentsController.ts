import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminInquiriesInquiryIdComments } from "../../../../../providers/postaiCommerceAdminInquiriesInquiryIdComments";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminInquiriesInquiryIdComments } from "../../../../../providers/patchaiCommerceAdminInquiriesInquiryIdComments";
import { getaiCommerceAdminInquiriesInquiryIdCommentsCommentId } from "../../../../../providers/getaiCommerceAdminInquiriesInquiryIdCommentsCommentId";
import { putaiCommerceAdminInquiriesInquiryIdCommentsCommentId } from "../../../../../providers/putaiCommerceAdminInquiriesInquiryIdCommentsCommentId";
import { deleteaiCommerceAdminInquiriesInquiryIdCommentsCommentId } from "../../../../../providers/deleteaiCommerceAdminInquiriesInquiryIdCommentsCommentId";

import { IAiCommerceComment } from "../../../../../api/structures/IAiCommerceComment";
import { IPageIAiCommerceComment } from "../../../../../api/structures/IPageIAiCommerceComment";

@Controller("/aiCommerce/admin/inquiries/:inquiryId/comments")
export class AicommerceAdminInquiriesCommentsController {
  /**
   * Create a comment under a specific inquiry (ai_commerce_comments).
   *
   * This operation creates a new comment and attaches it to the given inquiry,
   * using fields from ai_commerce_comments such as author_id, inquiry_id, body,
   * status (draft/published), and timestamps. The system validates input
   * (including non-empty content, permission to post, and correct relationship
   * to inquiry), checks spam/moderation rules, and returns the new comment's
   * full record.
   *
   * Buyers may only respond to their own or public inquiries; sellers may reply
   * to inquiries about their products; admins may post on any inquiry. Threaded
   * replies (comments on comments) are supported. Error handling covers invalid
   * inquiry, permission denial (unauthorized), input validation errors, or
   * moderation queue results.
   *
   * This endpoint integrates with moderation, notification, and history
   * endpoints for a full comment-on-inquiry workflow.
   *
   * @param connection
   * @param inquiryId The inquiry to attach the new comment to.
   * @param body Required and optional fields to create a new inquiry comment,
   *   including body, optional replied-to comment, and metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceComment.ICreate,
  ): Promise<IAiCommerceComment> {
    try {
      return await postaiCommerceAdminInquiriesInquiryIdComments({
        admin,
        inquiryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get paginated list of comments under a specific inquiry
   * (ai_commerce_comments).
   *
   * Retrieve a paginated, filtered list of comments for a given inquiry from
   * the ai_commerce_comments table. This supports advanced querying on
   * properties like author, status (published/moderated), timestamp, and text
   * content. Only comments directly attached to the specified inquiry
   * (inquiryId) are included.
   *
   * Security ensures that buyers see public or their own comments, sellers see
   * comments on their products' inquiries, and admins have full access. The
   * operation checks for inquiry existence and user authorization. Results are
   * paginated to support UI performance, and include summary information
   * suitable for listing. Errors include not found, unauthorized access, or
   * invalid parameters.
   *
   * The endpoint supports integration with moderation tools and may be combined
   * with comment creation or detail endpoints for a complete inquiry comment
   * workflow.
   *
   * @param connection
   * @param inquiryId The unique identifier of the target inquiry to retrieve
   *   comments for.
   * @param body Advanced search, filter, and pagination options for listing
   *   comments on an inquiry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceComment.IRequest,
  ): Promise<IPageIAiCommerceComment.ISummary> {
    try {
      return await patchaiCommerceAdminInquiriesInquiryIdComments({
        admin,
        inquiryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detail of a single comment for a specific inquiry
   * (ai_commerce_comments).
   *
   * Fetch a single comment by its commentId within the context of an inquiry
   * (inquiryId). Ensures the referenced comment not only exists but is linked
   * to the provided inquiry. Reads all primary fields of the
   * ai_commerce_comments table, including body, author, timestamps, status, and
   * parent (if threaded).
   *
   * Authorization assures that only viewers who have permission on the inquiry
   * (e.g., the author, related seller, admin) may access private or non-public
   * comments. Returns all detail fields, as well as any moderation or reply
   * links if authorized. Errors include not found (for comment or parent
   * inquiry) or insufficient privileges.
   *
   * This endpoint is commonly used in UI detail pages and as a dependency for
   * moderation or editing endpoints.
   *
   * @param connection
   * @param inquiryId The unique identifier of the parent inquiry this comment
   *   belongs to.
   * @param commentId The unique identifier of the comment to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceComment> {
    try {
      return await getaiCommerceAdminInquiriesInquiryIdCommentsCommentId({
        admin,
        inquiryId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific comment for an inquiry (ai_commerce_comments).
   *
   * This operation allows the author (or authorized moderator/admin) to edit a
   * comment's contents or metadata. The system ensures that the new data for
   * body/status is properly validated (non-empty, no prohibited content),
   * records change history (old vs. new), and triggers moderation or
   * notification logic as appropriate.
   *
   * CommentId must belong to the specified inquiryId, and the editor must be
   * the comment author or have edit privileges (admin). Status changes are
   * allowed only for authorized actors. Failure modes include non-existent
   * inquiry or comment, unauthorized edit attempt, or input validation
   * failure.
   *
   * This operation supports revision/audit trails for compliance, and is often
   * paired with comment retrieval or listing endpoints for seamless user
   * flows.
   *
   * @param connection
   * @param inquiryId The unique identifier of the inquiry containing the
   *   comment to update.
   * @param commentId The unique identifier of the comment to update.
   * @param body Patch object with modifiable comment fields such as
   *   content/body and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceComment.IUpdate,
  ): Promise<IAiCommerceComment> {
    try {
      return await putaiCommerceAdminInquiriesInquiryIdCommentsCommentId({
        admin,
        inquiryId,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a comment from a specific inquiry (ai_commerce_comments, hard
   * delete).
   *
   * Removes a comment referenced by commentId from under the specified
   * inquiryId, only if the user is the owner or an authorized moderator. The
   * operation checks that the comment is linked to the inquiry, and executes a
   * permanent database deletion (not soft delete), as the ai_commerce_comments
   * schema lacks a soft delete field.
   *
   * Audit logs and moderation histories are retained for legal compliance
   * regardless of record removal. Authorization failures, non-existent
   * resources, or violation of policy (e.g., removing comments under dispute)
   * return appropriate errors.
   *
   * This endpoint does not return the comment body, only a deletion
   * confirmation. Useful for comment management UIs and compliance/appeal
   * workflows.
   *
   * @param connection
   * @param inquiryId The inquiry containing the comment to delete.
   * @param commentId The comment to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminInquiriesInquiryIdCommentsCommentId({
        admin,
        inquiryId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
