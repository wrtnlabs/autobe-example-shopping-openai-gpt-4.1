import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminPaymentFraudEvents } from "../../../../providers/postaiCommerceAdminPaymentFraudEvents";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminPaymentFraudEvents } from "../../../../providers/patchaiCommerceAdminPaymentFraudEvents";
import { getaiCommerceAdminPaymentFraudEventsPaymentFraudEventId } from "../../../../providers/getaiCommerceAdminPaymentFraudEventsPaymentFraudEventId";
import { putaiCommerceAdminPaymentFraudEventsPaymentFraudEventId } from "../../../../providers/putaiCommerceAdminPaymentFraudEventsPaymentFraudEventId";
import { deleteaiCommerceAdminPaymentFraudEventsPaymentFraudEventId } from "../../../../providers/deleteaiCommerceAdminPaymentFraudEventsPaymentFraudEventId";

import { IAiCommercePaymentFraudEvent } from "../../../../api/structures/IAiCommercePaymentFraudEvent";
import { IPageIAiCommercePaymentFraudEvent } from "../../../../api/structures/IPageIAiCommercePaymentFraudEvent";

@Controller("/aiCommerce/admin/paymentFraudEvents")
export class AicommerceAdminPaymentfraudeventsController {
  /**
   * Insert a new payment fraud audit event entry into
   * ai_commerce_payment_fraud_events.
   *
   * Allows compliance or security teams to log a new fraud event into the
   * platform audit trail, either due to externally detected fraud, review team
   * identification, or API-driven risk triggers. Accepted data includes the
   * fraud event code, entity type/ID, status, detailed description, and
   * detection timestamp. All required validations, business process triggers,
   * and timestamping must be strictly enforced.
   *
   * This is a privileged administrative operation. Public or regular
   * user-facing flows must never create fraud audit events. Entries are
   * immutable once created and form the source of truth for audit, compliance,
   * and compensation/recovery actions.
   *
   * @param connection
   * @param body Fraud event details for creation, including event code, entity
   *   type, IDs, description, status, and detection time.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePaymentFraudEvent.ICreate,
  ): Promise<IAiCommercePaymentFraudEvent> {
    try {
      return await postaiCommerceAdminPaymentFraudEvents({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate payment fraud events from
   * ai_commerce_payment_fraud_events.
   *
   * This operation enables fraud investigators, compliance teams, and admin
   * users to retrieve a filtered, paginated list of detected fraud events
   * associated with payments, coupons, deposits, or mileage. Query parameters
   * allow filtering by fraud event code (e.g., MULTI_REDEMPTION, ABUSE), entity
   * type (payment, coupon, deposit, mileage, transaction), status (detected,
   * under_review, confirmed, dismissed), time range, and search by pattern in
   * the description field.
   *
   * The ai_commerce_payment_fraud_events table is append-only, with each entry
   * capturing critical forensic data for audit, reporting, legal proceedings,
   * and platform abuse monitoring.
   *
   * This API is intended for back-office staff with elevated privileges; client
   * access should be strictly authenticated and logged. Outputs are suitable
   * for compliance reporting, fraud dashboard integration, and operational
   * analytics, supporting business workflow and regulatory obligations.
   *
   * @param connection
   * @param body Advanced search, filter, and pagination criteria for finding
   *   fraud events.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePaymentFraudEvent.IRequest,
  ): Promise<IPageIAiCommercePaymentFraudEvent> {
    try {
      return await patchaiCommerceAdminPaymentFraudEvents({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a payment fraud event log record by its unique ID from
   * ai_commerce_payment_fraud_events.
   *
   * Returns a single payment fraud event record from the
   * ai_commerce_payment_fraud_events audit table, identified by
   * paymentFraudEventId. Used by back-office or admin users for deep dive
   * analysis, incident investigation, or compliance export requirements.
   *
   * The ai_commerce_payment_fraud_events entity is immutable (never manually
   * edited or deleted), and stores complete details of
   * rule-based/manual/AI-detected fraud, including event codes, entity type,
   * description, timestamps, and resolution state. This endpoint facilitates
   * high-trust workflows, such as regulatory filings, business analytics, or
   * legal evidence extraction.
   *
   * Strict role-based access control must be applied. The returned object
   * contains all event fields as defined in the schema.
   *
   * @param connection
   * @param paymentFraudEventId Unique identifier for the target payment fraud
   *   event audit record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentFraudEventId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentFraudEventId")
    paymentFraudEventId: string & tags.Format<"uuid">,
  ): Promise<IAiCommercePaymentFraudEvent> {
    try {
      return await getaiCommerceAdminPaymentFraudEventsPaymentFraudEventId({
        admin,
        paymentFraudEventId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the status or business fields of a payment fraud event audit record.
   *
   * Updates an existing payment fraud event, such as marking an event as
   * confirmed, dismissed, resolved, or updating its resolution details. This
   * operation is strictly limited to back-office, security, or compliance
   * administrators for correcting audit records, closing out fraud
   * investigations, or supporting business/compliance reporting. It performs
   * full validation of the update and overwrites only permitted fields such as
   * status, reviewed_at, description, or resolution note.
   *
   * As ai_commerce_payment_fraud_events is an immutable audit log for most
   * workflows, manual update privileges should be stringently logged and
   * monitored in production. Regular user interfaces must never expose this
   * mutation.
   *
   * @param connection
   * @param paymentFraudEventId Unique ID of the payment fraud event to update.
   * @param body Fields to update in the fraud event record, such as status,
   *   review note, or event details.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":paymentFraudEventId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentFraudEventId")
    paymentFraudEventId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommercePaymentFraudEvent.IUpdate,
  ): Promise<IAiCommercePaymentFraudEvent> {
    try {
      return await putaiCommerceAdminPaymentFraudEventsPaymentFraudEventId({
        admin,
        paymentFraudEventId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a payment fraud event audit record by its ID from
   * ai_commerce_payment_fraud_events.
   *
   * This endpoint executes a permanent, hard deletion of a payment fraud event
   * audit entry, identified by paymentFraudEventId. Deletion is restricted to
   * senior compliance/admin staff for rare cases where legal, privacy, or
   * evidence-compromising circumstances arise (i.e., GDPR
   * right-to-be-forgotten, proven false positive). The operation ensures proper
   * logging and should be auditable at every step.
   *
   * Under normal operational and compliance policy, audit log entries should
   * not be deleted. Forensic, reporting, and compensation/recovery logic rely
   * on complete audit trails. Non-admin or regular user actions must never
   * expose this operation.
   *
   * @param connection
   * @param paymentFraudEventId Unique ID of the payment fraud event record to
   *   be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":paymentFraudEventId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentFraudEventId")
    paymentFraudEventId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminPaymentFraudEventsPaymentFraudEventId({
        admin,
        paymentFraudEventId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
