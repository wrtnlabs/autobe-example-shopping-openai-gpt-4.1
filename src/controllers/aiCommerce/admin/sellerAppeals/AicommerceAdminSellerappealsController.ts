import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminSellerAppeals } from "../../../../providers/patchaiCommerceAdminSellerAppeals";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminSellerAppealsSellerAppealId } from "../../../../providers/getaiCommerceAdminSellerAppealsSellerAppealId";

import { IPageIAiCommerceSellerAppeal } from "../../../../api/structures/IPageIAiCommerceSellerAppeal";
import { IAiCommerceSellerAppeal } from "../../../../api/structures/IAiCommerceSellerAppeal";

@Controller("/aiCommerce/admin/sellerAppeals")
export class AicommerceAdminSellerappealsController {
  /**
   * Search and list seller appeal cases (ai_commerce_seller_appeals) with
   * advanced filtering.
   *
   * Search and list seller appeal cases by various filtering parameters
   * (status, appeal type, date, and seller profile) with pagination and
   * sorting. Provides all details needed for fair review and timely dispute
   * resolution, including the original appeal reason, evidence, current status,
   * and admin/seller outcome notes.
   *
   * Role-based security: sellers may only access records concerning their own
   * profile; administrators can view all appeals platform-wide. All actions and
   * responses are appropriately logged for compliance. Output is designed for
   * efficient case triage, review, and audit workflows.
   *
   * @param connection
   * @param body Filter criteria and pagination settings for listing seller
   *   appeals.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSellerAppeal.IRequest,
  ): Promise<IPageIAiCommerceSellerAppeal> {
    try {
      return await patchaiCommerceAdminSellerAppeals({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific seller appeal case by ID (ai_commerce_seller_appeals).
   *
   * Fetch all available information for a seller appeal by its unique
   * identifier. Includes the appeal reason, type, evidence, timeline,
   * administrator notes, and all relevant workflow status fields as recorded in
   * the database. Used for real-time dispute investigation, compliance
   * documentation, and resolution workflows.
   *
   * Strict role controls apply: only the seller involved and administrators
   * have access to this operation. Record access and case review events are
   * audit-logged. If the provided sellerAppealId does not exist, an appropriate
   * error is returned.
   *
   * @param connection
   * @param sellerAppealId Unique identifier for the seller appeal record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerAppealId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerAppealId")
    sellerAppealId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSellerAppeal> {
    try {
      return await getaiCommerceAdminSellerAppealsSellerAppealId({
        admin,
        sellerAppealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
