import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminAuditLogsSystem } from "../../../../providers/patchaiCommerceAdminAuditLogsSystem";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminAuditLogsSystemLogId } from "../../../../providers/getaiCommerceAdminAuditLogsSystemLogId";

import { IPageIAiCommerceAuditLogsSystem } from "../../../../api/structures/IPageIAiCommerceAuditLogsSystem";
import { IAiCommerceAuditLogsSystem } from "../../../../api/structures/IAiCommerceAuditLogsSystem";

@Controller("/aiCommerce/admin/auditLogsSystem")
export class AicommerceAdminAuditlogssystemController {
  /**
   * Search and retrieve system audit logs (ai_commerce_audit_logs_system).
   *
   * Provides advanced search/filter capabilities to discover audit log entries
   * according to parameters such as event type, actor, target table, or
   * creation date. All audit events (creation, edit, deletion related to
   * config/templates/channels/categories, etc.) are included. The request
   * supports complex query filters, pagination, and sorting as per the
   * ai_commerce_audit_logs_system schema.
   *
   * Only admin role users may access full audit log data. Sensitive content is
   * filtered or redacted according to business compliance policy. The response
   * includes a paginated list of audit log entries with complete event details
   * and metadata as defined by the ai_commerce_audit_logs_system model. Errors
   * are returned on malformed filters or pagination parameters.
   *
   * @param connection
   * @param body Search criteria and pagination info for audit logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceAuditLogsSystem.IRequest,
  ): Promise<IPageIAiCommerceAuditLogsSystem> {
    try {
      return await patchaiCommerceAdminAuditLogsSystem({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a single system audit log (ai_commerce_audit_logs_system).
   *
   * Retrieve all details for a single audit log event identified by logId,
   * including type of event, actor, before/after data snapshots, and the
   * timestamp. Useful for forensic review or as legal evidence of configuration
   * changes. The logId parameter must be a valid UUID referencing an existing
   * audit entry.
   *
   * Authorization is restricted to admins. The retrieved data includes full
   * event context as stored in the ai_commerce_audit_logs_system table. Errors
   * are returned if logId is invalid or if the log entry does not exist.
   *
   * @param connection
   * @param logId Unique identifier for the audit log entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":logId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("logId")
    logId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceAuditLogsSystem> {
    try {
      return await getaiCommerceAdminAuditLogsSystemLogId({
        admin,
        logId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
