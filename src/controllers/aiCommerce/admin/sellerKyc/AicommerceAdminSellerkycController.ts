import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminSellerKyc } from "../../../../providers/postaiCommerceAdminSellerKyc";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminSellerKyc } from "../../../../providers/patchaiCommerceAdminSellerKyc";
import { getaiCommerceAdminSellerKycSellerKycId } from "../../../../providers/getaiCommerceAdminSellerKycSellerKycId";
import { putaiCommerceAdminSellerKycSellerKycId } from "../../../../providers/putaiCommerceAdminSellerKycSellerKycId";
import { deleteaiCommerceAdminSellerKycSellerKycId } from "../../../../providers/deleteaiCommerceAdminSellerKycSellerKycId";

import { IAiCommerceSellerKyc } from "../../../../api/structures/IAiCommerceSellerKyc";
import { IPageIAiCommerceSellerKyc } from "../../../../api/structures/IPageIAiCommerceSellerKyc";

@Controller("/aiCommerce/admin/sellerKyc")
export class AicommerceAdminSellerkycController {
  /**
   * Create a new seller KYC verification submission (onboarding, compliance).
   *
   * This API operation allows a seller or an authorized onboarding workflow to
   * create a new KYC submission by providing necessary KYC data in the request
   * body. The sent data includes details like document type, provided metadata,
   * and onboarding references, as required by the ai_commerce_seller_kyc
   * schema.
   *
   * Upon submission, the record is stored with status field set to a
   * workflow-appropriate initial value (such as 'pending'). Further processing,
   * review, or approval will follow according to compliance workflow. All
   * fields and relationships from the schema must be supplied.
   *
   * This operation can be used by the onboarding automation system or
   * authorized sellers. Access control should prevent unauthorized KYC creation
   * by limiting to sellers in the onboarding stage or admins acting on behalf
   * of applicants.
   *
   * @param connection
   * @param body KYC document and metadata as required for
   *   ai_commerce_seller_kyc creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSellerKyc.ICreate,
  ): Promise<IAiCommerceSellerKyc> {
    try {
      return await postaiCommerceAdminSellerKyc({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list ai_commerce_seller_kyc records (admin, compliance only).
   *
   * This API operation retrieves a paginated and filtered list of seller KYC
   * records from the ai_commerce_seller_kyc table for administrative review and
   * compliance operations. It allows administrators to apply complex filtering
   * on KYC status (such as verified, pending, rejected), document types, and
   * onboarding relationships, while supporting sort and pagination parameters
   * for scalable processing of large volumes of KYC submissions.
   *
   * Returned results provide the essential details for each KYC record
   * including status, document types, and associated onboarding application
   * context. The provider/service layer is expected to apply result filtering
   * according to authorization, ensuring that only users with the necessary
   * roles (admin) can access sensitive KYC documents and compliance evidence,
   * in line with privacy and security policy.
   *
   * Validation is applied to ensure request parameters are within acceptable
   * range and result size is constrained to prevent over-fetching. This
   * operation is critical for periodic compliance audits and legal
   * investigations.
   *
   * @param connection
   * @param body Request parameters for filtering, searching, and paginating
   *   ai_commerce_seller_kyc records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSellerKyc.IRequest,
  ): Promise<IPageIAiCommerceSellerKyc> {
    try {
      return await patchaiCommerceAdminSellerKyc({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full details of a seller KYC record by its ID.
   *
   * This operation retrieves the full detail of a single seller KYC record from
   * the ai_commerce_seller_kyc table based on the provided KYC ID. It is used
   * during compliance reviews, audits, or investigations where the
   * administrator or compliance officer must examine document metadata,
   * reviewer notes, resolved status, and supporting evidence as recorded in the
   * KYC record. Returns all available fields for the KYC submission for
   * forensic and compliance purposes.
   *
   * Access to this operation is strictly limited to authorized admin or
   * compliance personnel, as KYC records contain highly sensitive identity
   * documents and business information. Role-based access control and logging
   * are enforced by the service provider.
   *
   * Any attempts to retrieve a non-existent KYC ID or one not available to the
   * requester due to missing permissions must result in an error and audit
   * logging.
   *
   * @param connection
   * @param sellerKycId Unique identifier of the seller KYC record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerKycId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerKycId")
    sellerKycId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSellerKyc> {
    try {
      return await getaiCommerceAdminSellerKycSellerKycId({
        admin,
        sellerKycId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing seller KYC verification record for compliance review.
   *
   * This operation updates an existing seller KYC submission with new status
   * (such as 'verified', 'rejected', etc.), document metadata, or compliance
   * notes. Typically executed by a compliance admin, this endpoint ensures all
   * updates are audited and retain previous KYC state for legal evidence.
   *
   * The input must reference an existing seller KYC ID and provide updated
   * information as per business rules. Validation rules ensure status
   * transitions follow compliance policy and all updates are consistent with
   * previous audit trail.
   *
   * Only admin roles may update KYC records, as these represent sensitive
   * compliance evidence. All updates must be logged, and any unauthorized
   * attempt should return an error, preserving audit integrity.
   *
   * @param connection
   * @param sellerKycId Unique identifier of the seller KYC record to update
   * @param body Fields and values to update in the ai_commerce_seller_kyc
   *   submission.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sellerKycId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerKycId")
    sellerKycId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSellerKyc.IUpdate,
  ): Promise<IAiCommerceSellerKyc> {
    try {
      return await putaiCommerceAdminSellerKycSellerKycId({
        admin,
        sellerKycId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a seller KYC record for audit/audit-compliance.
   *
   * This operation marks a seller KYC record as deleted in the
   * ai_commerce_seller_kyc table by setting the deleted_at timestamp field.
   * This is used by admins when a KYC record is found to be a duplicate,
   * incomplete, or submitted in error, and preserves all evidence for legal and
   * audit purposes. The record is not physically deleted but excluded from most
   * business queries, ensuring privacy and compliance.
   *
   * Only admin-level users can perform this operation, as it represents a
   * sensitive compliance operation that must be carefully controlled. Attempts
   * to delete KYC records that are under investigation or legal hold must
   * result in validation errors; all actions are audited by the
   * provider/service layer.
   *
   * @param connection
   * @param sellerKycId Unique identifier of the seller KYC record to soft
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sellerKycId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerKycId")
    sellerKycId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminSellerKycSellerKycId({
        admin,
        sellerKycId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
