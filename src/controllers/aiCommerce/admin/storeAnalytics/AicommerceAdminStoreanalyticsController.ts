import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminStoreAnalytics } from "../../../../providers/patchaiCommerceAdminStoreAnalytics";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminStoreAnalyticsStoreAnalyticsId } from "../../../../providers/getaiCommerceAdminStoreAnalyticsStoreAnalyticsId";

import { IPageIAiCommerceStoreAnalytics } from "../../../../api/structures/IPageIAiCommerceStoreAnalytics";
import { IAiCommerceStoreAnalytics } from "../../../../api/structures/IAiCommerceStoreAnalytics";

@Controller("/aiCommerce/admin/storeAnalytics")
export class AicommerceAdminStoreanalyticsController {
  /**
   * Search and retrieve paginated store analytics
   * (ai_commerce_store_analytics).
   *
   * Retrieve a filtered, paginated set of analytics records for stores,
   * supporting queries by store ID, time period (date_bucket), and core metrics
   * like sales volume, orders count, and conversion rates. This enables
   * comprehensive reporting and insight into store performance for both
   * administrative and seller-centric dashboards.
   *
   * Role enforcement ensures that sellers may only see analytics of their own
   * stores, while admins access all records. The API is designed for
   * integration into analytical dashboards, compliance auditing, and
   * operational optimization workflows. Requested filters and sorting are
   * processed using database indexes for optimal performance.
   *
   * Errors for invalid filters or unauthorized access trigger descriptive error
   * messages and full audit logging in line with compliance standards.
   *
   * @param connection
   * @param body Analytics filtering criteria, such as storeId, analytics
   *   period, metrics, and pagination.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceStoreAnalytics.IRequest,
  ): Promise<IPageIAiCommerceStoreAnalytics.ISummary> {
    try {
      return await patchaiCommerceAdminStoreAnalytics({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed analytics record (ai_commerce_store_analytics) for a
   * store.
   *
   * Retrieve full analytics information for a single store by its unique
   * analytics record ID. Returns all key performance indicators, sales volume,
   * visitor count, and any additional metrics stored for the selected date
   * period and store.
   *
   * Admin roles have unrestricted access while store owners are limited to
   * their own analytics. This API supports monitoring, finance audits,
   * reporting, and troubleshooting workflows, providing all available fields
   * from the analytics table. Access attempts are recorded for audit
   * compliance.
   *
   * Errors for failed lookups or violations of access control policy trigger
   * clear error messages as per business and compliance documentation.
   *
   * @param connection
   * @param storeAnalyticsId Unique identifier of the analytics record (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":storeAnalyticsId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("storeAnalyticsId")
    storeAnalyticsId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceStoreAnalytics> {
    try {
      return await getaiCommerceAdminStoreAnalyticsStoreAnalyticsId({
        admin,
        storeAnalyticsId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
