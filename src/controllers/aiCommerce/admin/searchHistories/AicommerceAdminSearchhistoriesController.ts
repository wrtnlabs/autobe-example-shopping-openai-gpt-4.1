import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminSearchHistories } from "../../../../providers/patchaiCommerceAdminSearchHistories";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminSearchHistoriesSearchHistoryId } from "../../../../providers/getaiCommerceAdminSearchHistoriesSearchHistoryId";

import { IPageIAiCommerceSearchHistory } from "../../../../api/structures/IPageIAiCommerceSearchHistory";
import { IAiCommerceSearchHistory } from "../../../../api/structures/IAiCommerceSearchHistory";

@Controller("/aiCommerce/admin/searchHistories")
export class AicommerceAdminSearchhistoriesController {
  /**
   * Search, filter, and paginate user search histories for discovery analytics.
   *
   * This endpoint enables analytics teams or authorized admins to query search
   * histories by text query, user, filter context (e.g. device, locale), and
   * date range, supporting rich business insights about discovery behavior and
   * trends.
   *
   * Because of the sensitivity of search histories, especially those tied to
   * PII, access is restricted to admins with analytics, support, or compliance
   * needsâ€”it is not available to general users. Advanced parameters support
   * filtering by user, anonymization state, and aggregate calculation when
   * paginated over larger datasets.
   *
   * The response is a paginated, filtered dataset with summary stats as well as
   * individual logs for inspection or downstream analysis. Failed or
   * unauthorized access attempts are recorded, and rate-limiting/batch controls
   * are enforced for system stability.
   *
   * @param connection
   * @param body Filtering, sorting, and pagination criteria to search discovery
   *   histories
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSearchHistory.IRequest,
  ): Promise<IPageIAiCommerceSearchHistory> {
    try {
      return await patchaiCommerceAdminSearchHistories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detail of a specific user search history event for analytics or
   * compliance review.
   *
   * This endpoint retrieves a single search history event, identified by its
   * unique ID, including all relevant metadata: query string, filters used,
   * result count, timestamps, and user/session context.
   *
   * Access is strictly limited to admin users for compliance and analytic
   * traceability. All accesses are audit-logged with timestamp and identity of
   * reviewer to meet privacy and legal requirements. User context information
   * is only included when the corresponding legal basis exists (e.g., PII
   * access rights for compliance responds to legitimate business needs).
   *
   * The operation may redact or anonymize sensitive fields, depending on the
   * requesting user's permission and system configuration. Error handling
   * includes not found, unauthorized, or redacted scenarios, and all read
   * accesses are tracked for evidence and reporting.
   *
   * @param connection
   * @param searchHistoryId Unique identifier for the search history event to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":searchHistoryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("searchHistoryId")
    searchHistoryId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSearchHistory> {
    try {
      return await getaiCommerceAdminSearchHistoriesSearchHistoryId({
        admin,
        searchHistoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
