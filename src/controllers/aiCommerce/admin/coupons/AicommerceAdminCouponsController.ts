import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminCoupons } from "../../../../providers/postaiCommerceAdminCoupons";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminCoupons } from "../../../../providers/patchaiCommerceAdminCoupons";
import { getaiCommerceAdminCouponsCouponId } from "../../../../providers/getaiCommerceAdminCouponsCouponId";
import { putaiCommerceAdminCouponsCouponId } from "../../../../providers/putaiCommerceAdminCouponsCouponId";
import { deleteaiCommerceAdminCouponsCouponId } from "../../../../providers/deleteaiCommerceAdminCouponsCouponId";

import { IAiCommerceCoupon } from "../../../../api/structures/IAiCommerceCoupon";
import { IPageIAiCommerceCoupon } from "../../../../api/structures/IPageIAiCommerceCoupon";

@Controller("/aiCommerce/admin/coupons")
export class AicommerceAdminCouponsController {
  /**
   * Create a new coupon entry in ai_commerce_coupons (admin only).
   *
   * Register a new coupon in the 'ai_commerce_coupons' table, fully defining
   * its campaign, business rules, and configuration. The creation request
   * provides type (amount, percent, shipping, etc.), usage limits, validity
   * periods, assigned issuer (admin or seller), code generation rules, and
   * validation logic.
   *
   * Only admin users are permitted to create coupons, as coupons affect
   * financial liability and cross-platform incentives. Errors arise if invalid
   * details are entered, such as date collisions, overlimit values, or
   * duplicating codes. Coupon creation events are fully audited for compliance
   * and review.
   *
   * The new coupon will become available for issuance once validation passes
   * and business rules are confirmed. Response includes the created coupon
   * entity in full detail.
   *
   * @param connection
   * @param body Coupon creation business logic covering code, validity, limits,
   *   and rules
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCoupon.ICreate,
  ): Promise<IAiCommerceCoupon> {
    try {
      return await postaiCommerceAdminCoupons({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list platform coupons with filtering and pagination (admin only)
   * from ai_commerce_coupons.
   *
   * Retrieve a paginated, searchable list of coupons from the platform's coupon
   * master table. This operation returns coupon metadata, issuance, validity
   * periods, usage limits, status, and other business properties, filtered and
   * sorted using powerful query capabilities.
   *
   * Admin users can search by fields such as type, status, validity period, or
   * partial code/name. Paging and sorting are supported, enabling large-scale
   * analytics and reporting for management and campaign performance reviews.
   * This operation operates on the ai_commerce_coupons table in the Prisma
   * schema.
   *
   * Permissions are restricted to admin users, as coupon intelligence could
   * expose commercial strategy data. Attempts by unauthorized users receive
   * access denied errors; empty search results are handled gracefully.
   *
   * @param connection
   * @param body Search and filter criteria for querying coupon records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCoupon.IRequest,
  ): Promise<IPageIAiCommerceCoupon.ISummary> {
    try {
      return await patchaiCommerceAdminCoupons({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a single coupon from ai_commerce_coupons
   * (admin only).
   *
   * Provides full detail for a coupon from the 'ai_commerce_coupons' table,
   * retrieved by couponId. Information returned includes code, issuance and
   * expiry, coupon type (amount/percent/shipping), usage limits, conditions,
   * campaign info, and the business logic fields used for validation and
   * auditing.
   *
   * Full coupon details are sensitive and valuable for evaluating promotion
   * campaign efficacy or compliance. Only admin users are authorized to access
   * single coupon details. Error handling includes not found, permission
   * denied, or deleted records by validating couponId accurately.
   *
   * Relies on the underlying coupon entity and all its data for further
   * downstream operations (such as update, usage audit, or campaign
   * reporting).
   *
   * @param connection
   * @param couponId The unique identifier of the coupon to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":couponId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCoupon> {
    try {
      return await getaiCommerceAdminCouponsCouponId({
        admin,
        couponId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing coupon entry in ai_commerce_coupons (admin only).
   *
   * Edit an existing coupon in the 'ai_commerce_coupons' table, referenced by
   * couponId. Permissible updates include changing campaign settings, business
   * rules, limits, effective periods, or revising the coupon status for
   * governance.
   *
   * Admin users can only update coupons that are not expired or deleted. All
   * update actions are logged for business records and compliance. Update
   * process performs full validation to ensure the coupon remains within
   * platform and legal limits.
   *
   * Permission checks and audit logging ensure only authorized staff can edit
   * coupons, and that rollback/history is available for compliance or
   * reconciliation.
   *
   * @param connection
   * @param couponId Unique identifier of the coupon to update
   * @param body Updated business and configuration data for the coupon
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":couponId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCoupon.IUpdate,
  ): Promise<IAiCommerceCoupon> {
    try {
      return await putaiCommerceAdminCouponsCouponId({
        admin,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a coupon record from ai_commerce_coupons (admin only, soft delete).
   *
   * Remove a coupon from active use by setting its soft delete field
   * ('deleted_at') in the 'ai_commerce_coupons' table, found via couponId. The
   * action is restricted to admin users, and the record remains available for
   * business auditing or compliance reviews.
   *
   * Coupons may be erased due to campaign closure, error in issuance, or legal
   * requirements. The soft delete maintains all references and evidence,
   * supporting full rollback or legal inquiry as required.
   *
   * Non-admin users will receive access denied errors. Record not found errors
   * or already-deleted coupons return appropriate error responses.
   *
   * @param connection
   * @param couponId The unique identifier of the coupon to erase
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":couponId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminCouponsCouponId({
        admin,
        couponId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
