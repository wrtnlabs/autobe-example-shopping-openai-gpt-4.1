import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminPaymentMethods } from "../../../../providers/postaiCommerceAdminPaymentMethods";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminPaymentMethods } from "../../../../providers/patchaiCommerceAdminPaymentMethods";
import { getaiCommerceAdminPaymentMethodsPaymentMethodId } from "../../../../providers/getaiCommerceAdminPaymentMethodsPaymentMethodId";
import { putaiCommerceAdminPaymentMethodsPaymentMethodId } from "../../../../providers/putaiCommerceAdminPaymentMethodsPaymentMethodId";
import { deleteaiCommerceAdminPaymentMethodsPaymentMethodId } from "../../../../providers/deleteaiCommerceAdminPaymentMethodsPaymentMethodId";

import { IAiCommercePaymentMethod } from "../../../../api/structures/IAiCommercePaymentMethod";
import { IPageIAiCommercePaymentMethod } from "../../../../api/structures/IPageIAiCommercePaymentMethod";

@Controller("/aiCommerce/admin/paymentMethods")
export class AicommerceAdminPaymentmethodsController {
  /**
   * Create a new payment method in the ai_commerce_payment_methods table.
   *
   * This operation allows an administrator to create a new payment method,
   * which is added to the ai_commerce_payment_methods table. The provided
   * method code must be unique across all payment methods, as it will be used
   * for referencing this method in payment flows, analytics, and configuration
   * mapping. Administrators need to provide a clear display name for the
   * payment method, enabling buyers to identify the method in UI forms.
   *
   * Internally, if external API or gateway configuration is needed, details are
   * stored in the configuration field for future use. Active status is set to
   * true by default for new methods but can later be toggled with the update
   * endpoint.
   *
   * Only administrators can perform this action, supporting strict control of
   * which payment methods are exposed to users and ensuring platform
   * compliance. Errors are raised if a duplicate method_code is provided. All
   * creation events are audit logged for platform compliance, enabling
   * traceability for all changes in available payment methods.
   *
   * @param connection
   * @param body Payment method creation details, including unique method code,
   *   display name, and optional configuration.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePaymentMethod.ICreate,
  ): Promise<IAiCommercePaymentMethod> {
    try {
      return await postaiCommerceAdminPaymentMethods({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and filter all payment methods with full metadata from the
   * ai_commerce_payment_methods table.
   *
   * This operation allows admins to search and page through all currently
   * defined payment methods, as captured in the ai_commerce_payment_methods
   * table. Results include method codes, display names, activation flags, and
   * (optionally) gateway integration or configuration metadata.
   *
   * Used for configuring payment options, managing system status, or diagnosing
   * payment setup issues. The list can be filtered by active status, method
   * code, or configuration, and supports analytics about payment method usage
   * on the platform. Typical admin-only endpoint, supporting both operational
   * and financial configuration needs.
   *
   * @param connection
   * @param body Search, filtering, and pagination parameters for listing
   *   payment methods.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePaymentMethod.IRequest,
  ): Promise<IPageIAiCommercePaymentMethod> {
    try {
      return await patchaiCommerceAdminPaymentMethods({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve metadata/details for a single payment method from the
   * ai_commerce_payment_methods table.
   *
   * This endpoint returns the metadata and configuration details for a single
   * payment method identified by paymentMethodId in the
   * ai_commerce_payment_methods table. Data includes method code, name,
   * activation, configuration, and audit fields for administrative review and
   * troubleshooting.
   *
   * This is useful for platform admins reviewing payment integrations, updating
   * gateways, or analyzing usage of specific payment methods. Data access is
   * admin-restricted and may link to further system configuration or payment
   * analytics endpoints.
   *
   * @param connection
   * @param paymentMethodId ID of the payment method to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentMethodId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentMethodId")
    paymentMethodId: string & tags.Format<"uuid">,
  ): Promise<IAiCommercePaymentMethod> {
    try {
      return await getaiCommerceAdminPaymentMethodsPaymentMethodId({
        admin,
        paymentMethodId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing payment method in the ai_commerce_payment_methods table.
   *
   * An administrator can update the properties of an existing payment method in
   * the ai_commerce_payment_methods table. Changing the display_name allows for
   * improved buyer understanding, while setting is_active can disable methods
   * that are being retired. Complex configuration changes (for example,
   * credentials or integration details) are performed by providing a new
   * configuration payload.
   *
   * The endpoint performs validation on incoming configuration and status,
   * checks for unique constraints, and will return detailed errors on any
   * violation. All updates are strictly logged for compliance, preserving
   * before and after states for audit requirements. Only users with admin
   * authority can perform this operation, and any attempt to update a
   * non-existent paymentMethodId will return an appropriate error.
   *
   * @param connection
   * @param paymentMethodId Unique identifier of the payment method to update.
   * @param body Fields to update for the payment method, such as display name,
   *   status, or configuration.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":paymentMethodId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentMethodId")
    paymentMethodId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommercePaymentMethod.IUpdate,
  ): Promise<IAiCommercePaymentMethod> {
    try {
      return await putaiCommerceAdminPaymentMethodsPaymentMethodId({
        admin,
        paymentMethodId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an existing payment method by paymentMethodId (hard delete) from
   * ai_commerce_payment_methods.
   *
   * When an admin invokes this API to delete a payment method, the payment
   * method is permanently removed from the ai_commerce_payment_methods table.
   * This removal is a hard delete since the deleted_at field is present for
   * compliance and auditing but does not prevent complete deletion if business
   * policy requires. The operation enforces referential integrity, ensuring
   * active payments linked to this method must be resolved or migrated before
   * deletion.
   *
   * All deletions are audit logged, including the actor, timestamp, and
   * affected payment method. Attempts to delete a non-existent paymentMethodId
   * yield an error. Only administrative users have access to delete payment
   * method definitions.
   *
   * @param connection
   * @param paymentMethodId Unique identifier for the payment method to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":paymentMethodId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentMethodId")
    paymentMethodId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminPaymentMethodsPaymentMethodId({
        admin,
        paymentMethodId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
