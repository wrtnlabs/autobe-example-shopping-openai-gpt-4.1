import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminTrendingProducts } from "../../../../providers/postaiCommerceAdminTrendingProducts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putaiCommerceAdminTrendingProductsTrendingProductId } from "../../../../providers/putaiCommerceAdminTrendingProductsTrendingProductId";
import { deleteaiCommerceAdminTrendingProductsTrendingProductId } from "../../../../providers/deleteaiCommerceAdminTrendingProductsTrendingProductId";

import { IAiCommerceTrendingProduct } from "../../../../api/structures/IAiCommerceTrendingProduct";

@Controller("/aiCommerce/admin/trendingProducts")
export class AicommerceAdminTrendingproductsController {
  /**
   * Create a new trending product entry (ai_commerce_trending_products).
   *
   * Create a new trending product entry in ai_commerce_trending_products,
   * enabling an admin user to promote a product to trending status manually,
   * override analytics, or seed initial trending campaigns. Required input
   * includes product reference, analytics score, manual override flag, and
   * timing information in accordance with business rules.
   *
   * Only users with administrative privileges can access this operation. All
   * creation actions are rigorously logged for compliance and future audit.
   * Input validation ensures that only products eligible for trending are
   * accepted (e.g., status, availability, non-duplication). Manual overrides
   * are prominent, so downstream business rules show these entries with higher
   * priority for the specified time period.
   *
   * This endpoint may be used in conjunction with analytics engine outputs,
   * automated recommendation triggers, or marketing campaigns. Failure
   * scenarios include duplicate trending entries, ineligible product IDs, or
   * invalid score/override states.
   *
   * @param connection
   * @param body Trending product creation data including product reference,
   *   score, and override flags.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceTrendingProduct.ICreate,
  ): Promise<IAiCommerceTrendingProduct> {
    try {
      return await postaiCommerceAdminTrendingProducts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of an existing trending product
   * (ai_commerce_trending_products).
   *
   * Update trending analytics, override status, or supplemental metadata for an
   * existing entry in ai_commerce_trending_products. This API supports
   * fine-tuned control over discovery, allowing admins to manually sustain or
   * suppress product trending state beyond purely analytics-driven assignment.
   *
   * The operation requires trendingProductId as a path parameter and a body
   * containing the fields to update (e.g., updated score, override flag,
   * rationale, and timing). All changes are logged for compliance and can have
   * downstream effects on user feeds or homepage segments. Only users with
   * admin role can access this operation, enforcing rigorous access control for
   * trend manipulation.
   *
   * Related API operations include trending product creation, detailed
   * retrieval, and listing endpoints. Error handling covers not found,
   * forbidden, invalid parameters, and update failures due to immutable or
   * out-of-date records.
   *
   * @param connection
   * @param trendingProductId Unique identifier of the trending product record
   *   to update.
   * @param body Fields to update for the selected trending product, such as
   *   score or override flags.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":trendingProductId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("trendingProductId")
    trendingProductId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceTrendingProduct.IUpdate,
  ): Promise<IAiCommerceTrendingProduct> {
    try {
      return await putaiCommerceAdminTrendingProductsTrendingProductId({
        admin,
        trendingProductId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a trending product entry by ID (ai_commerce_trending_products).
   *
   * Delete a trending product record identified by trendingProductId from
   * ai_commerce_trending_products. This action immediately removes the trending
   * status from the associated product and propagates changes to related
   * discovery channels and analytics flows. Only admins have access, and
   * actions are logged for audit. Permanent deletion may have cascading
   * implications for current and historical analytics, recommendation results,
   * and business reporting.
   *
   * The trendingProductId is a required UUID path parameter that uniquely
   * identifies the trending entry to be deleted. Associated analytics and
   * discovery modules may respond by recalculating feed inputs following
   * deletion. Common error cases include not found, forbidden, and attempted
   * deletion of protected records.
   *
   * @param connection
   * @param trendingProductId Unique identifier of the trending product record
   *   to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":trendingProductId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("trendingProductId")
    trendingProductId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminTrendingProductsTrendingProductId({
        admin,
        trendingProductId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
