import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminRecommendationSnapshots } from "../../../../providers/patchaiCommerceAdminRecommendationSnapshots";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminRecommendationSnapshotsRecommendationSnapshotId } from "../../../../providers/getaiCommerceAdminRecommendationSnapshotsRecommendationSnapshotId";

import { IPageIAiCommerceRecommendationSnapshot } from "../../../../api/structures/IPageIAiCommerceRecommendationSnapshot";
import { IAiCommerceRecommendationSnapshot } from "../../../../api/structures/IAiCommerceRecommendationSnapshot";

@Controller("/aiCommerce/admin/recommendationSnapshots")
export class AicommerceAdminRecommendationsnapshotsController {
  /**
   * Search and filter recommendation snapshot logs for audit and AI analysis.
   *
   * Authorized analytics teams and admins can query recommendation snapshots
   * generated by the personalized AI engine. Snapshots include linked user
   * context, full recommendation data, computed reason/ranking, and contextual
   * evidence for model explainability and compliance audits.
   *
   * Advanced search supports filtering by user, snapshot timestamp, and
   * rank/context filters. The operation ensures all returned data is tied to
   * audit trails for privacy and compliance. Results may be redacted to
   * anonymize personal information as required by business logic and legal
   * obligations.
   *
   * The endpoint enforces rate limits and logging for access control, and
   * returns a paginated, detailed summary set for further inspection or
   * evidence gathering.
   *
   * @param connection
   * @param body Complex filters and pagination options for recommendation
   *   snapshot query
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceRecommendationSnapshot.IRequest,
  ): Promise<IPageIAiCommerceRecommendationSnapshot> {
    try {
      return await patchaiCommerceAdminRecommendationSnapshots({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the detail of a specific recommendation snapshot entry for model
   * audit or compliance.
   *
   * Retrieves a full snapshot event log for a specific recommendation issued to
   * a user, identified by its unique recommendationSnapshotId. Includes
   * context, full output, AI model scoring, and user linkage for
   * explainability, audit, and legal trace.
   *
   * The operation is only accessible to analytics team members or admins with
   * proper audit rights, and every access is recorded in the security audit
   * log. Personal information in the snapshot is anonymized or redacted in
   * accordance with data privacy policies and audit requirements.
   *
   * If the requested snapshot is not found, was already redacted, or access is
   * denied, the API returns actionable error feedback, and all such queries are
   * monitored for compliance reporting.
   *
   * @param connection
   * @param recommendationSnapshotId ID of the recommendation snapshot to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":recommendationSnapshotId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("recommendationSnapshotId")
    recommendationSnapshotId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceRecommendationSnapshot> {
    try {
      return await getaiCommerceAdminRecommendationSnapshotsRecommendationSnapshotId(
        {
          admin,
          recommendationSnapshotId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
