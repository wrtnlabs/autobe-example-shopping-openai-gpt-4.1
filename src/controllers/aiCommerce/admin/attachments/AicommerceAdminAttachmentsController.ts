import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchaiCommerceAdminAttachments } from "../../../../providers/patchaiCommerceAdminAttachments";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IPageIAiCommerceAttachments } from "../../../../api/structures/IPageIAiCommerceAttachments";
import { IAiCommerceAttachments } from "../../../../api/structures/IAiCommerceAttachments";

@Controller("/aiCommerce/admin/attachments")
export class AicommerceAdminAttachmentsController {
  /**
   * Search and paginate uploaded attachments for review
   * (ai_commerce_attachments).
   *
   * Retrieves a paginated list of attachments, filtering by attributes such as
   * status, business type, user, or created_at timestamp. This is used for
   * compliance review, file management, and can also support user reports of
   * attachments. The request supports advanced filters and complex paging as
   * per the ai_commerce_attachments schema.
   *
   * This endpoint is strictly admin-only for system-wide attachment management.
   * Sensitive data is appropriately redacted in the results. Errors are
   * returned if filters are malformed or required parameters are missing.
   *
   * @param connection
   * @param body Filtering and paging criteria for attachment search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceAttachments.IRequest,
  ): Promise<IPageIAiCommerceAttachments> {
    try {
      return await patchaiCommerceAdminAttachments({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
