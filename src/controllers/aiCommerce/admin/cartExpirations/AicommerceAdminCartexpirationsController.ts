import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminCartExpirations } from "../../../../providers/patchaiCommerceAdminCartExpirations";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminCartExpirationsCartExpirationId } from "../../../../providers/getaiCommerceAdminCartExpirationsCartExpirationId";

import { IPageIAiCommerceCartExpiration } from "../../../../api/structures/IPageIAiCommerceCartExpiration";
import { IAiCommerceCartExpiration } from "../../../../api/structures/IAiCommerceCartExpiration";

@Controller("/aiCommerce/admin/cartExpirations")
export class AicommerceAdminCartexpirationsController {
  /**
   * Search and retrieve paginated cart expiration/recovery event records.
   *
   * Retrieve a filtered and paginated collection of cart expiration and
   * recovery records. This operation interfaces with
   * ai_commerce_cart_expirations to support business insights, troubleshooting,
   * and compliance reporting.
   *
   * Filters include expiration type (expiration, recovery, retry, auto_reopen),
   * cart ID, actor ID, and date/time range. All outputs are structured in a
   * paginated format and conform to system audit policies. Authorization is
   * required for access to privacy-sensitive fields, and only users with audit
   * or support privileges are permitted to use this endpoint.
   *
   * Searches with invalid input parameters, or requests exceeding result size
   * limits, are properly rejected with errors conforming to platform policies.
   * All relevant queries and results are logged for compliance and evidence
   * purposes.
   *
   * @param connection
   * @param body Request parameters for filtered search and pagination of cart
   *   expiration records, supporting event type, cart ID, actor ID, and
   *   temporal window.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCartExpiration.IRequest,
  ): Promise<IPageIAiCommerceCartExpiration.ISummary> {
    try {
      return await patchaiCommerceAdminCartExpirations({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific cart expiration/recovery
   * event.
   *
   * Fetch detailed information for a specific cart expiration or recovery event
   * by cartExpirationId. The ai_commerce_cart_expirations table holds
   * append-only audit records for expiration logic enforcement, user support,
   * and compliance.
   *
   * Role-based permissions restrict this operation to audit or administrative
   * users. The returned data includes the event type, cart ID, actor (if any),
   * business reason, and a timestamp. If no record is found, a descriptive
   * not-found error is returned. All access attempts are audit-logged for later
   * review.
   *
   * Output fields will mask or redact sensitive details as necessary for
   * compliance or data privacy regulation, and underlying storage of audit/log
   * data ensures data integrity and non-repudiation.
   *
   * @param connection
   * @param cartExpirationId Unique identifier of the cart expiration or
   *   recovery event record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartExpirationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartExpirationId")
    cartExpirationId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCartExpiration> {
    try {
      return await getaiCommerceAdminCartExpirationsCartExpirationId({
        admin,
        cartExpirationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
