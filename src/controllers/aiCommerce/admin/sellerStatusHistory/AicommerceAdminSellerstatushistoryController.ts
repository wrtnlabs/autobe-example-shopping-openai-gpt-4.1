import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminSellerStatusHistory } from "../../../../providers/patchaiCommerceAdminSellerStatusHistory";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminSellerStatusHistorySellerStatusHistoryId } from "../../../../providers/getaiCommerceAdminSellerStatusHistorySellerStatusHistoryId";

import { IPageIAiCommerceSellerStatusHistory } from "../../../../api/structures/IPageIAiCommerceSellerStatusHistory";
import { IAiCommerceSellerStatusHistory } from "../../../../api/structures/IAiCommerceSellerStatusHistory";

@Controller("/aiCommerce/admin/sellerStatusHistory")
export class AicommerceAdminSellerstatushistoryController {
  /**
   * Search/filter the seller status history records
   * (ai_commerce_seller_status_history).
   *
   * Search and filter the seller status change history across the marketplace.
   * Seller status history includes all onboarding, approvals, suspensions,
   * demotions, appeals, and escalations, with reasons and actor logs. Supports
   * filtering by seller profile, status type, date range, and reason, along
   * with pagination and sorting for large historical records.
   *
   * Available to administrators for platform oversight, and to sellers for
   * their own status history review, subject to role-based access control. All
   * output complies with regulatory requirements for evidence and audit
   * documentation. Sensitive details are only displayed according to the
   * requesting partyâ€™s access level.
   *
   * @param connection
   * @param body Search, filter, and pagination options for querying seller
   *   status histories.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSellerStatusHistory.IRequest,
  ): Promise<IPageIAiCommerceSellerStatusHistory> {
    try {
      return await patchaiCommerceAdminSellerStatusHistory({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single seller status history record by ID
   * (ai_commerce_seller_status_history).
   *
   * Read the complete details of one seller status history event using its
   * unique identifier. Returns actor, status change sequence, transition
   * reason, previous status, new status, timestamps, and cross-links to related
   * entities if applicable. Access is strictly regulated: only the seller
   * concerned and administrators may view the record.
   *
   * Historical records are presented exactly as stored, supporting full
   * traceability for dispute resolution, compliance reviews, or appeals.
   * Attempts to fetch a non-existent or unauthorized record will return an
   * error or empty result as appropriate by policy.
   *
   * @param connection
   * @param sellerStatusHistoryId Unique identifier for the seller status
   *   history record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerStatusHistoryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerStatusHistoryId")
    sellerStatusHistoryId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSellerStatusHistory> {
    try {
      return await getaiCommerceAdminSellerStatusHistorySellerStatusHistoryId({
        admin,
        sellerStatusHistoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
