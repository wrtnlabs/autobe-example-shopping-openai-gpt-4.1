import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminChannelsChannelIdSections } from "../../../../../providers/postaiCommerceAdminChannelsChannelIdSections";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminChannelsChannelIdSections } from "../../../../../providers/patchaiCommerceAdminChannelsChannelIdSections";
import { getaiCommerceAdminChannelsChannelIdSectionsSectionId } from "../../../../../providers/getaiCommerceAdminChannelsChannelIdSectionsSectionId";
import { putaiCommerceAdminChannelsChannelIdSectionsSectionId } from "../../../../../providers/putaiCommerceAdminChannelsChannelIdSectionsSectionId";
import { deleteaiCommerceAdminChannelsChannelIdSectionsSectionId } from "../../../../../providers/deleteaiCommerceAdminChannelsChannelIdSectionsSectionId";

import { IAiCommerceSection } from "../../../../../api/structures/IAiCommerceSection";
import { IPageIAiCommerceSection } from "../../../../../api/structures/IPageIAiCommerceSection";

@Controller("/aiCommerce/admin/channels/:channelId/sections")
export class AicommerceAdminChannelsSectionsController {
  /**
   * Create a new section for a given sales channel (ai_commerce_sections).
   *
   * Administrators can use this operation to establish a new section under a
   * sales channel, providing details such as code, name, is_active,
   * business_status, and display order, consistent with the
   * ai_commerce_sections table structure.
   *
   * The request body must satisfy all required and optional fields of
   * IAiCommerceSection.ICreate, and the endpoint will reject requests if
   * name/code uniqueness or validation constraints are violated within the
   * parent channel. All creations are audit-logged and subject to business
   * workflow rules, possibly triggering downstream events for reporting or
   * campaign launch. Only admin-level users are authorized to perform this
   * operation.
   *
   * @param connection
   * @param channelId Unique identifier for the target channel
   * @param body Section creation parameters as per business and schema
   *   requirements
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSection.ICreate,
  ): Promise<IAiCommerceSection> {
    try {
      return await postaiCommerceAdminChannelsChannelIdSections({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of channel sections for a specific
   * sales channel (ai_commerce_sections).
   *
   * This API operation returns a list of all sections configured within a given
   * sales channel, allowing advanced filtering, sorting, and pagination
   * according to business needs. The response contains key fields such as name,
   * code, operational status, business_status, and sort_order, as specified in
   * the ai_commerce_sections schema.
   *
   * Advanced search parameters (such as partial name match, business status,
   * is_active, and display order) should be supplied via the request body,
   * following the IAiCommerceSection.IRequest structure. The result is a paged
   * response optimized for management interfaces and channel analytics
   * workflows.
   *
   * This endpoint is typically restricted to admin users or channel operators,
   * supporting both maintenance and reporting scenarios. Validation and
   * business rules include enforcing visibility of only non-deleted, active
   * sections unless explicitly filtering for archived or deleted records.
   *
   * @param connection
   * @param channelId Unique identifier for the target channel
   * @param body Filtering, sorting, and pagination options for section search
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSection.IRequest,
  ): Promise<IPageIAiCommerceSection.ISummary> {
    try {
      return await patchaiCommerceAdminChannelsChannelIdSections({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details of a single channel section within a given sales
   * channel (ai_commerce_sections).
   *
   * This API operation fetches details for a specific section within a given
   * channel, identified by its unique sectionId and channelId. The response
   * includes all key properties (code, name, operational status,
   * business_status, sort_order, etc.) as defined by the ai_commerce_sections
   * model.
   *
   * Access control ensures that only administrators or privileged channel
   * managers can view sensitive business configuration and status details. The
   * endpoint supports audit and compliance checksâ€”returning only the latest
   * (non-deleted) state. Error handling includes visibility of not found,
   * deleted, or inaccessible results, supporting secure management dashboards
   * or integration pipelines.
   *
   * @param connection
   * @param channelId Unique identifier for the sales channel
   * @param sectionId Unique identifier for the channel section
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sectionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSection> {
    try {
      return await getaiCommerceAdminChannelsChannelIdSectionsSectionId({
        admin,
        channelId,
        sectionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update channel section configuration for a given sales channel
   * (ai_commerce_sections).
   *
   * This API operation enables administrators to adjust the properties of an
   * existing section within a sales channel, including updating code, name,
   * status, or display order. Path parameters specify both the target channel
   * and section.
   *
   * The request body follows IAiCommerceSection.IUpdate and must satisfy schema
   * constraints, including uniqueness of code/name within the channel and valid
   * state transitions (e.g., cannot set archived to active without prerequisite
   * checks). Audit trails record all changes, and errors will be returned for
   * missing, locked, or business-critical records. Only users with admin or
   * equivalent privileges can use this endpoint.
   *
   * @param connection
   * @param channelId Unique identifier for the sales channel
   * @param sectionId Unique identifier for the section to update
   * @param body Updated properties for the section entity according to schema
   *   and business logic
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sectionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSection.IUpdate,
  ): Promise<IAiCommerceSection> {
    try {
      return await putaiCommerceAdminChannelsChannelIdSectionsSectionId({
        admin,
        channelId,
        sectionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (hard) a section from a sales channel (ai_commerce_sections).
   *
   * This API allows administrators to erase a specific section under a channel,
   * removing its record from ai_commerce_sections. Both the channelId and
   * sectionId must be specified in the path, and the operation is executed as a
   * hard delete since no soft delete restoration logic is specified in the
   * schema.
   *
   * The process must check business rules, such as not deleting active or core
   * sections critical for channel operation. Deletions are strictly reserved
   * for admin users and must be audit-logged for evidence and compliance. Error
   * handling covers non-existent, deleted, or protected sections and returns
   * clear responses for management auditing.
   *
   * @param connection
   * @param channelId Unique identifier for the parent channel
   * @param sectionId Unique identifier for the section to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sectionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminChannelsChannelIdSectionsSectionId({
        admin,
        channelId,
        sectionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
