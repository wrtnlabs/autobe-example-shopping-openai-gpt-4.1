import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminChannelsChannelIdSettings } from "../../../../../providers/postaiCommerceAdminChannelsChannelIdSettings";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminChannelsChannelIdSettings } from "../../../../../providers/patchaiCommerceAdminChannelsChannelIdSettings";
import { getaiCommerceAdminChannelsChannelIdSettingsSettingId } from "../../../../../providers/getaiCommerceAdminChannelsChannelIdSettingsSettingId";
import { putaiCommerceAdminChannelsChannelIdSettingsSettingId } from "../../../../../providers/putaiCommerceAdminChannelsChannelIdSettingsSettingId";
import { deleteaiCommerceAdminChannelsChannelIdSettingsSettingId } from "../../../../../providers/deleteaiCommerceAdminChannelsChannelIdSettingsSettingId";

import { IAiCommerceChannelSetting } from "../../../../../api/structures/IAiCommerceChannelSetting";
import { IPageIAiCommerceChannelSetting } from "../../../../../api/structures/IPageIAiCommerceChannelSetting";

@Controller("/aiCommerce/admin/channels/:channelId/settings")
export class AicommerceAdminChannelsSettingsController {
  /**
   * Create a new configuration setting for a channel (admin only).
   *
   * Allows platform administrators to add a new setting key/value for a
   * channel, supporting modular configuration. Required fields include the
   * parent channel ID, configuration key, and value (string or serialized).
   * Uniqueness is enforced: the same key cannot be set twice for a given
   * channel. Only admins may create channel settings, complying with system
   * security and audit standards.
   *
   * The endpoint returns the fully persisted setting record on success, with
   * all relevant metadata. Attempts to insert duplicate keys or invalid data
   * are rejected with clear messages.
   *
   * Common use cases: toggling experimental features, configuring external
   * endpoints, adjusting business logic templates. All changes are audit-logged
   * in the platform for compliance and rollback.
   *
   * Upon creation, the new setting is immediately available for subsequent
   * reads or business rule evaluation.
   *
   * @param connection
   * @param channelId Target channel's unique identifier
   * @param body Key/value pair and option metadata for the new channel setting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceChannelSetting.ICreate,
  ): Promise<IAiCommerceChannelSetting> {
    try {
      return await postaiCommerceAdminChannelsChannelIdSettings({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve channel settings for a specified channel (admin only).
   *
   * Enables secure retrieval of all settings attached to a specific aiCommerce
   * channel, identified by channelId. Supports pagination and advanced
   * filtering by key or value—for example, to find all theme configurations or
   * feature toggles for a channel. Each setting is returned with full schema
   * alignment to ai_commerce_channel_settings, supporting business rule
   * enforcement.
   *
   * Sensitive configuration data is protected—this endpoint returns only
   * settings for the specified channel, and only admins may access these
   * details. Audit logs track all accesses to support compliance and
   * operational analytics.
   *
   * This operation is fundamental for administrators who need to troubleshoot,
   * audit, or rapidly modify channel settings as part of ongoing platform
   * governance. Errors are returned if the specified channel does not exist or
   * the admin lacks permissions.
   *
   * @param connection
   * @param channelId Target sales channel UUID for which to list settings
   * @param body Filter and pagination options for channel settings discovery
   *   (by key, value, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceChannelSetting.IRequest,
  ): Promise<IPageIAiCommerceChannelSetting> {
    try {
      return await patchaiCommerceAdminChannelsChannelIdSettings({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific channel setting (admin only).
   *
   * Given both a channelId and a settingId, retrieve all details for a single
   * configuration setting attached to an aiCommerce sales channel. The response
   * matches the ai_commerce_channel_settings schema and is restricted to admin
   * usage for security and compliance. The data includes the configuration key
   * and value, timestamps, and related channel linkage.
   *
   * This endpoint is critical when troubleshooting complex deployments,
   * enforcing business compliance, or tracking precise configuration changes
   * across environments. Invalid or missing IDs result in a not-found response,
   * and all accesses are tracked in system logs.
   *
   * Returns only channel-specific settings, ensuring admins cannot view
   * unrelated configuration data from other channels.
   *
   * @param connection
   * @param channelId Parent aiCommerce channel's unique identifier (UUID)
   * @param settingId Unique identifier of the channel setting (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":settingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("settingId")
    settingId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceChannelSetting> {
    try {
      return await getaiCommerceAdminChannelsChannelIdSettingsSettingId({
        admin,
        channelId,
        settingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing setting for a specific sales channel
   * (ai_commerce_channel_settings).
   *
   * Update a configuration setting within a sales channel by its unique setting
   * ID, modifying the 'key' or 'value' or both, as stored in the
   * ai_commerce_channel_settings table.
   *
   * Administrators can leverage this endpoint to apply necessary changes to
   * enable or disable channel-specific functionalities, update feature flags,
   * or adjust advanced business policies. Permissions must be enforced to allow
   * only privileged admin users to execute this update operation.
   *
   * Relationship to the channel is validated by the foreign key constraint on
   * ai_commerce_channel_id. All modifications are audit-logged for compliance
   * and traceability, and any changes to unique keys or existing keys must
   * respect uniqueness constraints in the schema.
   *
   * @param connection
   * @param channelId Unique identifier of the target channel
   * @param settingId Unique identifier for the channel setting to update
   * @param body Updated values for the channel setting entity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":settingId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("settingId")
    settingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceChannelSetting.IUpdate,
  ): Promise<IAiCommerceChannelSetting> {
    try {
      return await putaiCommerceAdminChannelsChannelIdSettingsSettingId({
        admin,
        channelId,
        settingId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (hard delete) a channel setting from a given sales channel
   * (ai_commerce_channel_settings).
   *
   * Administrators use this API to erase a specific configuration setting
   * within a given channel. Given the unique setting ID and its parent channel
   * ID, the operation performs a hard delete—removing the record from the
   * ai_commerce_channel_settings table. All deletions are subject to business
   * validation, including preventing deletion of settings critical for channel
   * operation, and are logged for audit purposes.
   *
   * This operation is reserved strictly for admin-level users due to potential
   * impact on channel configuration and must adhere to referential integrity
   * rules. Any errors or integrity constraints violations (such as deleting a
   * non-existent or critical setting) are returned as descriptive error
   * responses.
   *
   * @param connection
   * @param channelId Unique identifier for the channel containing the setting
   * @param settingId Unique identifier for the channel setting to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":settingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("settingId")
    settingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminChannelsChannelIdSettingsSettingId({
        admin,
        channelId,
        settingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
