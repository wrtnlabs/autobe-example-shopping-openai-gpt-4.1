import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminChannelsChannelIdCategories } from "../../../../../providers/postaiCommerceAdminChannelsChannelIdCategories";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminChannelsChannelIdCategories } from "../../../../../providers/patchaiCommerceAdminChannelsChannelIdCategories";
import { putaiCommerceAdminChannelsChannelIdCategoriesCategoryId } from "../../../../../providers/putaiCommerceAdminChannelsChannelIdCategoriesCategoryId";
import { deleteaiCommerceAdminChannelsChannelIdCategoriesCategoryId } from "../../../../../providers/deleteaiCommerceAdminChannelsChannelIdCategoriesCategoryId";

import { IAiCommerceCategory } from "../../../../../api/structures/IAiCommerceCategory";
import { IPageIAiCommerceCategory } from "../../../../../api/structures/IPageIAiCommerceCategory";

@Controller("/aiCommerce/admin/channels/:channelId/categories")
export class AicommerceAdminChannelsCategoriesController {
  /**
   * Create a new category under a specified channel in ai_commerce_categories.
   *
   * Admin users can create new product categories for a given channel using
   * this endpoint. Categories are organized as hierarchical trees under
   * channels, essential for merchandising, filtering, and analytics. When
   * invoked, the operation validates uniqueness of the category code within the
   * channel, required fields, and compliance with business logic (e.g.,
   * hierarchy depth, duplication prevention).
   *
   * The operation processes category metadata, parent association (if not
   * root), and visibility settings. The ai_commerce_categories Prisma model
   * captures these details, with fields for level, business/workflow status,
   * creation influence, and audit trails. If a new category is assigned a
   * parentId, the endpoint ensures parent existence and correct placement in
   * the tree. Errors may include missing/invalid parentId, duplicate code
   * within the channel, or invalid level/sortOrder assignments. Successful
   * creation returns the complete category object for further administrative
   * actions or front-end refresh logic.
   *
   * @param connection
   * @param channelId Unique identifier of the channel under which to create the
   *   new category (UUID format).
   * @param body Details of the new category to create, including code, name,
   *   parentId, level, sort order, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCategory.ICreate,
  ): Promise<IAiCommerceCategory> {
    try {
      return await postaiCommerceAdminChannelsChannelIdCategories({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of categories in a sales channel
   * (ai_commerce_categories).
   *
   * This endpoint provides a flexible search and discovery interface for all
   * categories belonging to a given channel. The request body must follow
   * IAiCommerceCategory.IRequest, with support for pagination, search keywords,
   * filtering by status, and hierarchical queries (including depth and parent
   * relationships).
   *
   * The response returns a paged data structure, with summary category
   * information according to IPageIAiCommerceCategory.ISummary. This endpoint
   * is for admin-level or privileged business users who maintain category
   * hierarchies, and observes all access controls and business validation as
   * defined in the ai_commerce_categories schema.
   *
   * Validation rules ensure uniqueness of category codes within a channel and
   * restriction to non-deleted or active categories unless otherwise specified
   * in query filters. Edge cases such as too deep recursion or non-existent
   * parent references are handled with clear error messages.
   *
   * @param connection
   * @param channelId Unique identifier for the target sales channel
   * @param body Search, filtering, and pagination criteria for category
   *   retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCategory.IRequest,
  ): Promise<IPageIAiCommerceCategory.ISummary> {
    try {
      return await patchaiCommerceAdminChannelsChannelIdCategories({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update category attributes for a given channel and category in
   * ai_commerce_categories.
   *
   * Administrators can modify an existing product category under a sales
   * channel with this endpoint. The ai_commerce_categories table supports
   * updating fields such as the display name, business status, level, parent
   * assignment, and sort order, enabling live catalog refinement and
   * merchandising optimization.
   *
   * During an update, the API validates that the category exists under the
   * given channel, checks the category code's uniqueness (if changed), and
   * enforces hierarchy rulesâ€”disallowing invalid parent assignments or cyclical
   * relationships. The operation uses the IAiCommerceCategory.IUpdate schema
   * for the request body, and on success, returns the updated category object
   * reflecting all changes and updated audit timestamps. Potential errors
   * include non-existent categoryId, unauthorized channelId, duplicate code, or
   * invalid hierarchy moves. The design follows Prisma schema's comments and
   * business rules for multi-level categories used in channel-specific
   * merchandising and analytics.
   *
   * @param connection
   * @param channelId Sales channel identifier containing the category (UUID
   *   format).
   * @param categoryId Target category's unique identifier (UUID format).
   * @param body Fields to update in the category, such as name, code,
   *   hierarchy, sort order, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCategory.IUpdate,
  ): Promise<IAiCommerceCategory> {
    try {
      return await putaiCommerceAdminChannelsChannelIdCategoriesCategoryId({
        admin,
        channelId,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a product category from a channel in
   * ai_commerce_categories.
   *
   * This endpoint allows admin users to delete a specific category from a sales
   * channel. The ai_commerce_categories schema supports a soft delete mechanism
   * (deleted_at), but this API performs a permanent removal: after validation,
   * it physically removes the category, provided there are no remaining child
   * categories or assigned products. All audit and business logic steps, such
   * as checking dependency existence, are enforced to prevent data corruption.
   *
   * Attempting to delete a category with child nodes or products leads to a
   * failure with a detailed error response. Deletion operations are logged for
   * compliance and evidence. On success, the response confirms removal. This is
   * a critical operation for catalog management, reflecting sales channel and
   * category system design, and should not be used without proper
   * administrative permissions.
   *
   * @param connection
   * @param channelId Parent channel ID for the category (UUID format).
   * @param categoryId Unique identifier of the category to be deleted (UUID
   *   format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminChannelsChannelIdCategoriesCategoryId({
        admin,
        channelId,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
