import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminChannels } from "../../../../providers/postaiCommerceAdminChannels";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminChannels } from "../../../../providers/patchaiCommerceAdminChannels";
import { getaiCommerceAdminChannelsChannelId } from "../../../../providers/getaiCommerceAdminChannelsChannelId";
import { putaiCommerceAdminChannelsChannelId } from "../../../../providers/putaiCommerceAdminChannelsChannelId";
import { deleteaiCommerceAdminChannelsChannelId } from "../../../../providers/deleteaiCommerceAdminChannelsChannelId";

import { IAiCommerceChannel } from "../../../../api/structures/IAiCommerceChannel";
import { IPageIAiCommerceChannel } from "../../../../api/structures/IPageIAiCommerceChannel";

@Controller("/aiCommerce/admin/channels")
export class AicommerceAdminChannelsController {
  /**
   * Create a new aiCommerce sales channel (admin only).
   *
   * Channel creation allows platform administrators to onboard new sales
   * outlets (such as apps, partner portals, or test platforms) into aiCommerce.
   * All required channel attributes—code, name, locale, activation, and current
   * workflow status—must be supplied and validated for uniqueness and schema
   * constraints.
   *
   * Only authenticated admin users may access this function. Upon creation, the
   * new channel is assigned a system-generated UUID, and all events are audited
   * in accordance with compliance requirements.
   *
   * This operation is fundamental to aiCommerce's extensible platform model,
   * allowing rapid expansion and configuration of new business outlets. Input
   * validation rules enforce unique channel codes and logical business
   * constraints, preventing conflicting configuration data. Upon creation, the
   * entire new row as stored in the ai_commerce_channels model is returned for
   * immediate system integration or admin display.
   *
   * @param connection
   * @param body Definition and configuration values for the new sales channel,
   *   including code, name, locale, and workflow status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceChannel.ICreate,
  ): Promise<IAiCommerceChannel> {
    try {
      return await postaiCommerceAdminChannels({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated and filtered list of aiCommerce sales channels (admin
   * only).
   *
   * This operation enables administrators to perform advanced search and
   * pagination of sales channel records. Administrators may filter by
   * activation status, business status, channel name, and locale, allowing
   * efficient navigation through potentially hundreds of channels across the
   * platform.
   *
   * The operation integrates full support for pagination, sorting, and partial
   * name matching for rapid business management. The data returned includes
   * unique identifiers, key configuration values, and business status for each
   * channel.
   *
   * AICommerce restricts channel configuration access to admin roles only.
   * Security policies require that only authenticated admins may access this
   * endpoint; rate-limiting and access logs are enforced at the system layer.
   *
   * This endpoint is essential for global configuration, channel onboarding,
   * and agile business management workflows. Related endpoints allow full CRUD
   * for individual channels. Returned data strictly reflects the latest
   * persisted state in ai_commerce_channels, excluding soft-deleted entries
   * unless specifically filtered.
   *
   * @param connection
   * @param body Channel list search and filter criteria, including business
   *   status, locale, and activation filters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceChannel.IRequest,
  ): Promise<IPageIAiCommerceChannel> {
    try {
      return await patchaiCommerceAdminChannels({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific aiCommerce sales channel (admin
   * only).
   *
   * This operation returns the full configuration and status details of a
   * specific aiCommerce sales channel given its unique identifier. The detail
   * view includes all base fields, such as code, name, locale, activation and
   * business status, creation/update timestamps, and indexes.
   *
   * Security enforcement limits access to admins for operational integrity and
   * auditability. The returned data exactly mirrors the stored channel in the
   * ai_commerce_channels model and excludes soft-deleted entries.
   *
   * This endpoint integrates with channel management features and is typically
   * used in admin portals to view or edit channel information, onboard new
   * integrations, and support compliance reporting. Invalid or non-existent IDs
   * trigger clear not-found responses, and all accesses are logged for audit
   * purposes.
   *
   * @param connection
   * @param channelId Unique identifier of the target sales channel
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":channelId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceChannel> {
    try {
      return await getaiCommerceAdminChannelsChannelId({
        admin,
        channelId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing aiCommerce sales channel (admin only).
   *
   * Apply changes to essential channel properties such as name, locale,
   * activation status, or workflow state for a specific aiCommerce sales
   * channel by UUID. Updating a channel triggers full validation to protect
   * unique constraints (such as code) and aligns with AICommerce's audit and
   * compliance rules.
   *
   * Only admin users can update channel records. All modifications generate
   * audit logs to support platform forensics, with the API returning the full
   * persisted channel after update, reflecting all schema fields.
   *
   * This endpoint is integral to agile business management, channel rebranding,
   * and operational responses to business rule/template changes. Attempts to
   * edit system-critical or immutable fields are rejected, with clear error
   * replies specifying the allowed field set.
   *
   * All state changes are captured in the platform's audit infrastructure per
   * compliance needs.
   *
   * @param connection
   * @param channelId Unique identifier of the target aiCommerce sales channel
   *   to be updated
   * @param body Updated channel configuration and status information; only
   *   modifiable fields per schema
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":channelId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceChannel.IUpdate,
  ): Promise<IAiCommerceChannel> {
    try {
      return await putaiCommerceAdminChannelsChannelId({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (logical removal) of an aiCommerce sales channel by UUID (admin
   * only).
   *
   * Mark the specified aiCommerce sales channel as deleted by setting its
   * deleted_at column, as per the ai_commerce_channels model. This operation
   * supports platform compliance and evidence by enforcing soft delete—auditing
   * all changes and preserving deleted records in the database.
   *
   * Only platform admins may perform channel deletion; all actions are fully
   * logged. Soft-deleted channels are excluded from most platform operations
   * but can be restored or referenced for historical analytics if compliance
   * rules permit.
   *
   * Attempts to remove a non-existing or already deleted channel result in a
   * clear business error response, consistent with API error handling
   * conventions. This is a non-reversible logical delete as defined in the
   * AICommerce channel management schema
   *
   * @param connection
   * @param channelId Unique identifier of the aiCommerce sales channel to be
   *   soft-deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":channelId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminChannelsChannelId({
        admin,
        channelId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
