import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminTagsTagIdModeration } from "../../../../../providers/postaiCommerceAdminTagsTagIdModeration";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminTagsTagIdModeration } from "../../../../../providers/patchaiCommerceAdminTagsTagIdModeration";
import { getaiCommerceAdminTagsTagIdModerationModerationId } from "../../../../../providers/getaiCommerceAdminTagsTagIdModerationModerationId";
import { putaiCommerceAdminTagsTagIdModerationModerationId } from "../../../../../providers/putaiCommerceAdminTagsTagIdModerationModerationId";
import { deleteaiCommerceAdminTagsTagIdModerationModerationId } from "../../../../../providers/deleteaiCommerceAdminTagsTagIdModerationModerationId";

import { IAiCommerceTagModeration } from "../../../../../api/structures/IAiCommerceTagModeration";
import { IPageIAiCommerceTagModeration } from "../../../../../api/structures/IPageIAiCommerceTagModeration";

@Controller("/aiCommerce/admin/tags/:tagId/moderation")
export class AicommerceAdminTagsModerationController {
  /**
   * Admin creates a new moderation/action record for a specific tag
   * (ai_commerce_tags).
   *
   * Create a new moderation action for a tag in the ai_commerce_tags table.
   * This endpoint is used by administrators to moderate tag usage and labeling.
   * When a tag is reported or requires review, the admin can perform actions
   * such as approve, reject, or suspend, all of which are recorded along with
   * the admin identity and reasoning.
   *
   * Permissions are strictly limited to admins; all actions are logged for
   * audit. Moderation links to business compliance, as improper tagging can
   * affect product visibility and legal discoverability. The endpoint is part
   * of a workflow where admins review tags flagged by the system, users, or
   * through random sampling.
   *
   * If the moderation is successful, a new moderation record is persisted with
   * timestamps and references to both the tag and the acting admin.
   *
   * Related operations are getting the tag for review or updating an existing
   * moderation decision.
   *
   * @param connection
   * @param tagId The unique identifier of the tag to be moderated.
   * @param body Details of the moderation to perform, including action,
   *   rationale, and moderator identity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceTagModeration.ICreate,
  ): Promise<IAiCommerceTagModeration> {
    try {
      return await postaiCommerceAdminTagsTagIdModeration({
        admin,
        tagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list moderation events for a tag by tagId, supporting filtering,
   * pagination, and evidence review.
   *
   * Search the moderation log for a specific tag by tagId. All moderation
   * activity—approvals, rejections, flags, suspensions—are recorded in
   * ai_commerce_tag_moderation with references to the tag, moderator, reason,
   * action, and timestamps. This operation supports filtering by action, time
   * window, moderator identity, or result, and is paginated to support large
   * moderation histories.
   *
   * Admins or moderators may use this endpoint to review the moderation
   * life-cycle of a tag, investigate disputes, and prepare compliance
   * documentation. Unauthorized users must not have access to this data, and
   * all accesses are recorded for trace/audit.
   *
   * @param connection
   * @param tagId The unique identifier of the tag whose moderation history to
   *   search.
   * @param body Filtering and pagination controls for tag moderation event log
   *   listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceTagModeration.IRequest,
  ): Promise<IPageIAiCommerceTagModeration> {
    try {
      return await patchaiCommerceAdminTagsTagIdModeration({
        admin,
        tagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific tag moderation log entry by tagId and moderationId.
   *
   * Retrieve a specific moderation log entry for a tag, identified by tagId and
   * moderationId. The ai_commerce_tag_moderation schema captures every
   * moderation action and is indexed by tag and unique moderation identifiers.
   * The response includes the full moderation record—action type, outcome,
   * moderator, reason, evidence snapshot reference, and timestamps.
   *
   * Only admins may access this information for regulatory, evidence, or
   * workflow purposes. All attempts are logged for traceability, and errors for
   * invalid/faulty lookups or lack of privilege are handled with standard error
   * protocols and without exposing unnecessary details about internal business
   * logic.
   *
   * @param connection
   * @param tagId The tag whose moderation event is being retrieved.
   * @param moderationId Unique identifier of the moderation event for the tag.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedParam("moderationId")
    moderationId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceTagModeration> {
    try {
      return await getaiCommerceAdminTagsTagIdModerationModerationId({
        admin,
        tagId,
        moderationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin updates an existing moderation record for a tag
   * (ai_commerce_tag_moderation).
   *
   * Update an existing moderation entry for a specific tag in the
   * ai_commerce_tag_moderation table. This may be needed if additional evidence
   * is provided, an initial moderation decision is appealed, or for correction
   * of prior mistakes.
   *
   * Admins must provide the moderationId of the moderation entry and the
   * updated action, result, or notes. Every change is tracked for compliance,
   * audit, and traceability. Security is paramount, limited to admin roles
   * only.
   *
   * Changes to moderation decisions can affect product search, visibility, and
   * platform compliance, and must be handled with care. Error handling includes
   * validation that the moderationId belongs to the tag and that only admins
   * may update.
   *
   * @param connection
   * @param tagId The unique ID of the tag for which moderation is to be
   *   updated.
   * @param moderationId The ID of the moderation record to be updated.
   * @param body Updated moderation action details (e.g., new result,
   *   rationale).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderationId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedParam("moderationId")
    moderationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceTagModeration.IUpdate,
  ): Promise<IAiCommerceTagModeration> {
    try {
      return await putaiCommerceAdminTagsTagIdModerationModerationId({
        admin,
        tagId,
        moderationId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin deletes a moderation record for a tag (ai_commerce_tag_moderation).
   *
   * Permanently remove an existing moderation decision related to a specific
   * tag from the ai_commerce_tag_moderation table. Admins can use this when a
   * moderation record must be erased for legal, privacy, or error correction
   * reasons.
   *
   * Security and compliance are essential, so only admins can execute this
   * action and all deletion attempts are logged. There are strict controls in
   * normal business operations to avoid unnecessary data loss. Typical use
   * cases include compliance with right-to-be-forgotten requests or after an
   * audit reveals a moderation entry was created in error.
   *
   * Error cases include invalid moderationId, attempts from non-admin users, or
   * trying to delete system-critical moderation records.
   *
   * @param connection
   * @param tagId The unique ID of the tag whose moderation record is to be
   *   deleted.
   * @param moderationId The unique ID of the moderation record to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":moderationId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedParam("moderationId")
    moderationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminTagsTagIdModerationModerationId({
        admin,
        tagId,
        moderationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
