import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminTags } from "../../../../providers/postaiCommerceAdminTags";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminTags } from "../../../../providers/patchaiCommerceAdminTags";
import { getaiCommerceAdminTagsTagId } from "../../../../providers/getaiCommerceAdminTagsTagId";
import { putaiCommerceAdminTagsTagId } from "../../../../providers/putaiCommerceAdminTagsTagId";
import { deleteaiCommerceAdminTagsTagId } from "../../../../providers/deleteaiCommerceAdminTagsTagId";

import { IAiCommerceTag } from "../../../../api/structures/IAiCommerceTag";
import { IPageIAiCommerceTag } from "../../../../api/structures/IPageIAiCommerceTag";

@Controller("/aiCommerce/admin/tags")
export class AicommerceAdminTagsController {
  /**
   * Create a new tag, inserting into ai_commerce_tags as an admin.
   *
   * Create a new tag entry in the ai_commerce_tags table. Admins or authorized
   * moderators use this operation to define new searchable tags to be attached
   * to products, inquiries, analytics, or promoted in discovery modules. Tag
   * properties include name (unique, alphanumeric), status, description, and
   * other metadata fields. Successful creation returns the detailed tag object
   * that was inserted.
   *
   * The operation enforces tag uniqueness, appropriate business rules
   * (prohibitions, moderation), and audits create activity for compliance. If a
   * duplicate name is detected or creation parameters fail schema/business
   * validation, the endpoint returns a descriptive error, with all attempts
   * recorded for administrator review and system monitoring.
   *
   * @param connection
   * @param body Tag creation input as defined by ai_commerce_tags, including
   *   name, status, and metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceTag.ICreate,
  ): Promise<IAiCommerceTag> {
    try {
      return await postaiCommerceAdminTags({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list tags, with advanced filtering and pagination, from
   * ai_commerce_tags.
   *
   * Search and retrieve a list of tags used in product and discovery modules
   * within the commerce platform. Each tag can be filtered by name, status
   * (active, under_review, suspended, deleted), creation date, and other
   * attributes. This operation supports advanced filtering, search, sorting,
   * and pagination—essential for admin- or moderation-facing UIs with high data
   * volume.
   *
   * The ai_commerce_tags table provides critical tagging structure for
   * products, inquiries, and analytics, and is referenced throughout discovery
   * and recommendation engines. The response includes both tag summary and
   * pagination metadata for streamlined UI usage. This operation is strictly
   * accessible by admins or authorized moderators, supporting bulk curation,
   * trend detection, and maintenance of the tag taxonomy.
   *
   * Users lacking appropriate privilege must be denied access and notified
   * politely, and all search/filter parameters must be validated for type and
   * allowed values.
   *
   * @param connection
   * @param body Search/filter and pagination parameters for tag listing and
   *   moderation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceTag.IRequest,
  ): Promise<IPageIAiCommerceTag.ISummary> {
    try {
      return await patchaiCommerceAdminTags({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific tag by tagId from ai_commerce_tags.
   *
   * Get details of a specific tag by its unique tagId. The ai_commerce_tags
   * model defines all major properties of a tag, such as tag identity (name),
   * status (active, under_review, suspended, deleted), business description,
   * creation and update timestamps, and its use in product/discovery analytics.
   * This operation is exclusively accessible to admin or moderator accounts,
   * who require complete information on the tag for moderation, search
   * analytics, recommendations, or metadata management.
   *
   * The API ensures only users with high-privilege roles may retrieve full tag
   * information, and all lookups are logged to the audit trail. If tagId is
   * invalid or does not exist, the operation must fail gracefully, delivering a
   * consistent error response without revealing sensitive backend details.
   *
   * @param connection
   * @param tagId Unique identifier of the tag to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":tagId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceTag> {
    try {
      return await getaiCommerceAdminTagsTagId({
        admin,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update all major properties of an existing tag by tagId (admin/moderator
   * only).
   *
   * Update an existing tag in ai_commerce_tags by tagId. This operation lets
   * admins fully overwrite properties for a tag—including name, status, and
   * description—effectively updating the tag for moderation, business taxonomy,
   * or analytics improvement purposes. Tag uniqueness by name, enum validation
   * for status, and business/format constraints are strictly enforced, and all
   * update activity is traceable via audit logs.
   *
   * The endpoint is restricted to high-privilege accounts and includes business
   * logic for resolving naming collisions or attempts to apply invalid
   * status/transition combinations. Errors in input, permissions, or tag
   * mutability must result in standardized, actionable error messages for
   * administrator awareness.
   *
   * @param connection
   * @param tagId The unique identifier of the tag to update.
   * @param body All fields to replace on tag, as defined in ai_commerce_tags.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":tagId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceTag.IUpdate,
  ): Promise<IAiCommerceTag> {
    try {
      return await putaiCommerceAdminTagsTagId({
        admin,
        tagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a tag record by tagId from ai_commerce_tags (hard
   * delete).
   *
   * Permanently delete a tag by its tagId. The ai_commerce_tags schema does not
   * support a soft delete field, so this operation immediately and irrevocably
   * removes the record from the database for that tagId. Referential integrity
   * and dependency checks must be performed before deletion, and the operation
   * is restricted to admin-level users.
   *
   * All delete attempts are recorded in the audit trail for compliance and
   * recoverability within backup systems. Unauthorized or invalid delete
   * attempts must return clear, actionable errors, ensuring no accidental or
   * malicious deletion occurs.
   *
   * @param connection
   * @param tagId Unique identifier of the tag to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":tagId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminTagsTagId({
        admin,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
