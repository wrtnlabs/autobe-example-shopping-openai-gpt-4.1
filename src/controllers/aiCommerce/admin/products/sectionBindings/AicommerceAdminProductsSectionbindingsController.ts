import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminProductsProductIdSectionBindings } from "../../../../../providers/postaiCommerceAdminProductsProductIdSectionBindings";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminProductsProductIdSectionBindings } from "../../../../../providers/patchaiCommerceAdminProductsProductIdSectionBindings";
import { getaiCommerceAdminProductsProductIdSectionBindingsBindingId } from "../../../../../providers/getaiCommerceAdminProductsProductIdSectionBindingsBindingId";
import { deleteaiCommerceAdminProductsProductIdSectionBindingsBindingId } from "../../../../../providers/deleteaiCommerceAdminProductsProductIdSectionBindingsBindingId";

import { IAiCommerceProductSectionBinding } from "../../../../../api/structures/IAiCommerceProductSectionBinding";
import { IPageIAiCommerceProductSectionBinding } from "../../../../../api/structures/IPageIAiCommerceProductSectionBinding";

@Controller("/aiCommerce/admin/products/:productId/sectionBindings")
export class AicommerceAdminProductsSectionbindingsController {
  /**
   * Create a new product-section binding
   * (ai_commerce_product_section_bindings).
   *
   * This operation enables a seller or admin to add a product to a specific
   * merchandising section (such as 'Best Sellers' or 'Curated Picks'), which
   * affect how products are presented to shoppers. It must validate that the
   * requestor is authorized for the product in question and that the section
   * exists and is active. The business rules require that a unique binding is
   * maintained for each product-section pair, and attempts to create duplicates
   * are rejected with a detailed error.
   *
   * The operation is fully audited, supporting revert and compliance workflows.
   * Related endpoints include deleting a binding, listing all bindings, or
   * updating display order. Inputs and outputs reference
   * IAiCommerceProductSectionBinding.ICreate and
   * IAiCommerceProductSectionBinding, respectively.
   *
   * @param connection
   * @param productId UUID of the product to be associated with a section.
   * @param body Information required to create a new section binding for the
   *   product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductSectionBinding.ICreate,
  ): Promise<IAiCommerceProductSectionBinding> {
    try {
      return await postaiCommerceAdminProductsProductIdSectionBindings({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list product-section bindings for a product
   * (ai_commerce_product_section_bindings).
   *
   * This endpoint provides a way for authorized sellers or admins to list and
   * search section bindings for a given product, which control the
   * merchandising contexts within various storefront sections (e.g., "Flash
   * Sales", "Top Picks").
   *
   * Security is enforced so that only the product's seller or platform
   * administrators can access the full list of bindings. The operation supports
   * pagination, advanced search, and sorting, as well as filtering by section,
   * display order, or status for detailed analytics and business management.
   * The operation is critical for managing where and how products are presented
   * throughout the sales channels.
   *
   * Proper input validation and business rule enforcement must ensure that
   * inappropriate disclosure of merchandising metadata is prevented for
   * non-authorized users. Related operations allow binding creation and hard
   * deletion for merchandising curation. No data is modified by this method;
   * read-only access is provided.
   *
   * @param connection
   * @param productId UUID of the product whose section bindings are to be
   *   searched/listed.
   * @param body Advanced filtering and pagination settings for retrieving
   *   product-section bindings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductSectionBinding.IRequest,
  ): Promise<IPageIAiCommerceProductSectionBinding> {
    try {
      return await patchaiCommerceAdminProductsProductIdSectionBindings({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific section binding for a product
   * (ai_commerce_product_section_bindings).
   *
   * The operation fetches the full details of a single binding between a
   * product and a merchandising section using both the productId and bindingId
   * as path parameters. Only authorized roles (the related seller or platform
   * admin) may access this information to ensure merchandising controls and
   * business privacy. The response provides all metadata of the binding,
   * including display order and section context, and is essential for
   * troubleshooting display issues or confirming merchandising setup.
   *
   * Attempts to retrieve non-existent bindings should result in an appropriate
   * 404-like error. It does not modify any data and does not require a request
   * body. Related endpoints enable listing all bindings or managing them via
   * creation and deletion APIs. Care must be taken to return only the bindings
   * relevant to the correct productId for data integrity.
   *
   * @param connection
   * @param productId UUID of the parent product of the binding.
   * @param bindingId UUID of the section binding to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":bindingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bindingId")
    bindingId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductSectionBinding> {
    try {
      return await getaiCommerceAdminProductsProductIdSectionBindingsBindingId({
        admin,
        productId,
        bindingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a product's section binding (ai_commerce_product_section_bindings).
   *
   * Authorized sellers or platform administrators may use this endpoint to
   * hard-delete a binding between a product and a section, thereby removing the
   * product from that section's merchandising context. All deletion operations
   * are hard deletes (no soft delete field is present in this schema for
   * bindings), and must be strictly audited.
   *
   * Any attempt to delete a non-existent binding returns an error. The removal
   * is immediate and may result in the product no longer appearing in related
   * promotions or curated sections. Business logic ensures the requestor is
   * authorized and that store consistency is maintained. Related endpoints
   * provide binding creation and listing. Both productId and bindingId are
   * strictly required for binding identification.
   *
   * @param connection
   * @param productId UUID of the parent product whose section binding will be
   *   removed.
   * @param bindingId UUID of the section binding record to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":bindingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bindingId")
    bindingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminProductsProductIdSectionBindingsBindingId(
        {
          admin,
          productId,
          bindingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
