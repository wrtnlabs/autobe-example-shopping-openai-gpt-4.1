import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminProducts } from "../../../../providers/postaiCommerceAdminProducts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminProducts } from "../../../../providers/patchaiCommerceAdminProducts";
import { getaiCommerceAdminProductsProductId } from "../../../../providers/getaiCommerceAdminProductsProductId";
import { putaiCommerceAdminProductsProductId } from "../../../../providers/putaiCommerceAdminProductsProductId";
import { deleteaiCommerceAdminProductsProductId } from "../../../../providers/deleteaiCommerceAdminProductsProductId";

import { IAiCommerceProduct } from "../../../../api/structures/IAiCommerceProduct";
import { IPageIAiCommerceProduct } from "../../../../api/structures/IPageIAiCommerceProduct";

@Controller("/aiCommerce/admin/products")
export class AicommerceAdminProductsController {
  /**
   * Create a new product with business, inventory, and compliance details in
   * ai_commerce_products.
   *
   * Register a new product to the system as a seller or admin. Input data must
   * conform to IAiCommerceProduct.ICreate, including required business business
   * attributes (name, description), seller and store association, product
   * code/SKU, category assignments, base price, inventory details, and
   * compliance fields as mandated by platform policy. Optional variant/option
   * definitions may be specified at create time.
   *
   * Created products are initially saved as draft or require admin approval
   * depending on business workflow. The operation ensures all core validations:
   * required fields are present, price and inventory are within allowed limits,
   * SKU uniqueness is enforced, and regulatory requirements (certifications,
   * compliance region) are satisfied. Compliance status, legal snapshots, and
   * business rules are enforced according to the ai_commerce_products schema
   * and associated tables.
   *
   * Audit trails are generated for create events and reference all
   * actor/ownership information. The new product record is returned in detail
   * (IAiCommerceProduct DTO) after successful creation. Related endpoints
   * include product search (PATCH /products), detail (GET
   * /products/{productId}), and update (PUT /products/{productId}).
   *
   * @param connection
   * @param body Required information for new product registration, including
   *   business fields, inventory, and compliance.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceProduct.ICreate,
  ): Promise<IAiCommerceProduct> {
    try {
      return await postaiCommerceAdminProducts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and retrieve a filtered, paginated list of products (admin
   * only) in ai_commerce_products.
   *
   * Retrieve a filtered and paginated list of products registered in the
   * system. The operation utilizes the IAICommerceProduct.IRequest DTO for rich
   * query capabilities including search by product name, code, store, seller,
   * and channel association. This API enables searching by status (draft,
   * active, paused, suspended, discontinued, deleted), pricing ranges, category
   * or section bindings, and supports keyword-based quick searching.
   *
   * Access to product search is generally restricted to admin users for
   * management, moderation, and analytics. Security considerations include rate
   * limiting and filtering of privileged information based on user
   * authorization levels. Only admins can view full unmoderated details
   * (including deleted products or compliance status); sellers or buyers may
   * have limited visibility.
   *
   * Using the ai_commerce_products table as the primary source, this operation
   * joins relevant entities (seller, store, categories, variants) where
   * necessary for filtering and aggregation. Pagination and sorting parameters
   * are essential to ensure scalable high-volume queries. Error handling
   * includes validation for out-of-range paging parameters, invalid filters, or
   * unauthorized data exposure. Related endpoints include detail retrieval (GET
   * /products/{productId}) and creation (POST /products).
   *
   * @param connection
   * @param body Filter and pagination criteria for product search, supporting
   *   keyword, status, category, seller, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceProduct.IRequest,
  ): Promise<IPageIAiCommerceProduct.ISummary> {
    try {
      return await patchaiCommerceAdminProducts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific product by ID in
   * ai_commerce_products.
   *
   * Fetch detailed information about a specific product, given its unique
   * productId. The endpoint returns all data defined in the IAICommerceProduct
   * DTO, which comprises business attributes (name, SKU, price, inventory),
   * product status, option/variant configuration, and full content for frontend
   * or admin interfaces. Also includes compliance/legal markers, attached
   * assets, section/category assignments, and historical state if available.
   *
   * Product detail is viewable by admins for all records. Sellers may access
   * their own product details, including draft or paused listings. Buyers and
   * visitors are restricted to approved/active products and are not exposed to
   * internal fields or audit history.
   *
   * Uses ai_commerce_products as the main record, joining with variants,
   * compliance, store, and seller if needed. Error scenarios handled include
   * invalid/absent productId, unauthorized access to unpublished or deleted
   * products, and malformed queries. Complementary to PATCH /products (search),
   * PUT/POST for create/update, and DELETE/erase endpoints.
   *
   * @param connection
   * @param productId Unique identifier (UUID) of the target product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":productId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProduct> {
    try {
      return await getaiCommerceAdminProductsProductId({
        admin,
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update product information and attributes for a specific productId in
   * ai_commerce_products.
   *
   * Edit or update fields of a product record identified by productId, using
   * IAiCommerceProduct.IUpdate to specify modified values. All modifications
   * are subject to role-based access control: sellers can only update their own
   * products, while admins may edit any product for correction/audit. Supported
   * fields include business attributes, pricing, inventory quantities, product
   * content, attachments, category/section bindings, variant/option
   * configurations, and compliance/certification fields.
   *
   * The operation enforces SKU uniqueness, pricing and inventory limits, and
   * legal compliance by validating updates per the ai_commerce_products schema
   * and regulatory requirements. On successful update, an audit snapshot is
   * captured for traceability. Error handling includes invalid productId,
   * unauthorized access, edit attempts for locked or deleted products, or
   * validation failures on submitted data. Related endpoints are GET
   * /products/{productId} (read), POST /products (create), and DELETE
   * /products/{productId} (deletion).
   *
   * @param connection
   * @param productId Unique identifier (UUID) of the product to update.
   * @param body Product update information: only the fields to modify are
   *   required, others may be omitted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":productId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProduct.IUpdate,
  ): Promise<IAiCommerceProduct> {
    try {
      return await putaiCommerceAdminProductsProductId({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase (soft delete) a product by productId in
   * ai_commerce_products (admin only).
   *
   * Permanently remove the specified product from the database, given its
   * productId. This is a hard delete operationâ€”deleted_at is set for logical
   * removal as per table schema (soft delete semantics), but the record is
   * effectively excluded from all business logic and interfaces. Only users
   * with admin privileges may perform product deletion.
   *
   * The operation ensures data integrity by verifying that the target product
   * is not referenced by any active or historical orders, audits, or compliance
   * holds; if so, deletion is prevented and an error is returned. Otherwise,
   * the product record is flagged as deleted, associated options/variants are
   * handled according to policy, and an audit record is generated for
   * compliance. Soft delete is implemented as standard platform policy,
   * retaining all legal and compliance history. Error cases include invalid
   * productId, unauthorized deletion attempt, or product currently in use.
   *
   * @param connection
   * @param productId Unique identifier (UUID) of the product to permanently
   *   erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":productId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminProductsProductId({
        admin,
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
