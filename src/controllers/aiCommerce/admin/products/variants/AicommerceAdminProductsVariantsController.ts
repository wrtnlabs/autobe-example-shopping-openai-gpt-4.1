import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminProductsProductIdVariants } from "../../../../../providers/postaiCommerceAdminProductsProductIdVariants";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminProductsProductIdVariants } from "../../../../../providers/patchaiCommerceAdminProductsProductIdVariants";
import { getaiCommerceAdminProductsProductIdVariantsVariantId } from "../../../../../providers/getaiCommerceAdminProductsProductIdVariantsVariantId";

import { IAiCommerceProductVariant } from "../../../../../api/structures/IAiCommerceProductVariant";
import { IPageIAiCommerceProductVariant } from "../../../../../api/structures/IPageIAiCommerceProductVariant";

@Controller("/aiCommerce/admin/products/:productId/variants")
export class AicommerceAdminProductsVariantsController {
  /**
   * Create a new variant/option under a given product for inventory/sales
   * management.
   *
   * Register a new product variant/option under the specified product. Fields
   * are provided via IAiCommerceProductVariant.ICreate, covering SKU, option
   * summary, variant-specific price, inventory count, and operational status.
   * Variant will inherit parent product context and can be referenced in
   * analytics or downstream order flows.
   *
   * This operation is restricted to product owners (seller) or admins. It
   * enforces uniqueness of SKUs within product, validates all required fields,
   * ensures input is compatible with product's current lifecycle status, and
   * records an audit snapshot. Errors may occur for non-existent/mismatched
   * productId, duplicate SKU, invalid parameters, or unauthorized creation.
   *
   * The completed variant record (IAiCommerceProductVariant) is returned on
   * success. Related endpoints cover variant searching (PATCH
   * /products/{productId}/variants), detail (GET), and update flows.
   *
   * @param connection
   * @param productId UUID of the product to which the new variant will be
   *   linked.
   * @param body Variant registration details (SKU, options summary, price,
   *   inventory, status).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductVariant.ICreate,
  ): Promise<IAiCommerceProductVariant> {
    try {
      return await postaiCommerceAdminProductsProductIdVariants({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginate and search product variants/options under a given product (admin
   * or owner).
   *
   * List/search variants for a specific product, paginated and filtered by
   * parameters provided in IAiCommerceProductVariant.IRequest. Includes support
   * for search by SKU, option summary (e.g., 'Size: M / Color: Red'), status
   * (active, paused, discontinued), price, and inventory. Results are intended
   * for owner (seller) management, admin moderation, or analytics application.
   * Each returned variant includes all business/operational fields and can
   * reference parent product context.
   *
   * This operation accesses the ai_commerce_product_variants table and may join
   * parent product for authorization filtering. Sellers may only view variants
   * linked to their own products. Admins can access all. Validation errors
   * include non-existent or unauthorized productId reference, invalid
   * filtering, or access to variants for products not owned by the user.
   * Related endpoints include PUT/POST for variant creation and update, GET for
   * detail retrieval, and DELETE if permitted.
   *
   * @param connection
   * @param productId UUID of the parent product whose variants to search.
   * @param body Search/filter/pagination criteria for variants of the target
   *   product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductVariant.IRequest,
  ): Promise<IPageIAiCommerceProductVariant.ISummary> {
    try {
      return await patchaiCommerceAdminProductsProductIdVariants({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full information of a specific product variant under a given product
   * for admin/owner.
   *
   * Retrieve detail of a particular variant, given both parent productId and
   * variantId (UUIDs). The returned DTO (IAiCommerceProductVariant) enumerates
   * SKU, option summary, price, inventory, status, and business classification
   * fields. Optionally includes parent product reference where required for
   * business context or access checks.
   *
   * Admins may view all variants; sellers may access only those belonging to
   * their own products. The AI system validates both product and variant
   * existence and matching. Errors returned for absent/invalid productId,
   * variantId, or unauthorized access. Related endpoints include variant PATCH
   * (search), PUT/POST for creation or update, and variant deletion if defined
   * in further requirements.
   *
   * @param connection
   * @param productId UUID of the product whose variant to retrieve.
   * @param variantId UUID of the target variant within the parent product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":variantId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("variantId")
    variantId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductVariant> {
    try {
      return await getaiCommerceAdminProductsProductIdVariantsVariantId({
        admin,
        productId,
        variantId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
