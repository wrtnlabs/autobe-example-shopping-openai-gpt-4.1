import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminProductsProductIdCategoryBindings } from "../../../../../providers/postaiCommerceAdminProductsProductIdCategoryBindings";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminProductsProductIdCategoryBindings } from "../../../../../providers/patchaiCommerceAdminProductsProductIdCategoryBindings";
import { getaiCommerceAdminProductsProductIdCategoryBindingsBindingId } from "../../../../../providers/getaiCommerceAdminProductsProductIdCategoryBindingsBindingId";
import { deleteaiCommerceAdminProductsProductIdCategoryBindingsBindingId } from "../../../../../providers/deleteaiCommerceAdminProductsProductIdCategoryBindingsBindingId";

import { IAiCommerceProductCategoryBindings } from "../../../../../api/structures/IAiCommerceProductCategoryBindings";
import { IPageIAiCommerceProductCategoryBindings } from "../../../../../api/structures/IPageIAiCommerceProductCategoryBindings";

@Controller("/aiCommerce/admin/products/:productId/categoryBindings")
export class AicommerceAdminProductsCategorybindingsController {
  /**
   * Create a new product-category binding association for a product (catalog
   * assignment).
   *
   * The POST /products/{productId}/categoryBindings endpoint allows authorized
   * sellers or admins to create a new product-category binding. This operation
   * establishes a new mapping between the product and a category, controlling
   * its visibility in searches and merchandising.
   *
   * Upon receiving the request, the service validates ownership (seller/admin)
   * and the uniqueness of the binding (no duplicate product-category mapping is
   * allowed). The request body must include a valid categoryId and any required
   * metadata for the association, following the
   * IAiCommerceProductCategoryBindings.ICreate schema. Successful creation
   * returns the full binding entity for use in catalog navigation, analytics,
   * or edits. Attempting to bind the same product and category more than once
   * results in an error.
   *
   * All operations are audit-logged for catalog integrity and security. Buyers
   * and the public cannot add new product-category bindings.
   *
   * @param connection
   * @param productId Unique identifier of the product to categorize.
   * @param body Information about the category binding to create, including
   *   target category and metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductCategoryBindings.ICreate,
  ): Promise<IAiCommerceProductCategoryBindings> {
    try {
      return await postaiCommerceAdminProductsProductIdCategoryBindings({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List all category bindings for a product, with pagination, filtering, and
   * search.
   *
   * The PATCH /products/{productId}/categoryBindings endpoint returns a
   * paginated list of all categories to which the specified product is
   * currently bound. The service supports search criteria, filtering,
   * pagination, and sorting via the request body. This enables sellers or
   * admins to efficiently browse, audit, or update product-category
   * relationships for catalog management or analytics integration.
   *
   * Authorization is requiredâ€”sellers can only access their own products'
   * bindings, while admins may retrieve any product's category bindings.
   * Security is enforced for catalog scope compliance.
   *
   * Results conform to the OpenAPI IPageIAiCommerceProductCategoryBindings
   * component schema, providing standard pagination and metadata. If there are
   * no category bindings, an empty list is returned. All interactions are
   * logged for future audit and catalog change tracking. Appropriate error
   * responses address missing productId, unauthorized access, or malformed
   * queries.
   *
   * @param connection
   * @param productId Unique identifier of the product for which to list
   *   category bindings.
   * @param body Filtering and paging parameters for querying product-category
   *   bindings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductCategoryBindings.IRequest,
  ): Promise<IPageIAiCommerceProductCategoryBindings> {
    try {
      return await patchaiCommerceAdminProductsProductIdCategoryBindings({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific product-category binding by its identifier for a
   * product.
   *
   * The GET /products/{productId}/categoryBindings/{bindingId} endpoint fetches
   * the details of a single product-category binding by its unique identifier,
   * scoped to the parent product. This allows sellers/admins to review the
   * specifics of the binding, such as associated category, timestamps, and
   * metadata. The operation enforces that sellers may access only category
   * bindings for their own products, while admins have global read access.
   *
   * This is primarily used in catalog management flows for examining mapping
   * details, auditing changes, or preparing further update/delete operations.
   * All requests are audit-logged for catalog traceability. Missing or
   * unauthorized access is handled with appropriate error codes, and a 404 is
   * returned if the resource does not exist.
   *
   * @param connection
   * @param productId Unique identifier of the product to which the binding is
   *   attached.
   * @param bindingId Unique identifier of the product-category binding to
   *   fetch.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":bindingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bindingId")
    bindingId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductCategoryBindings> {
    try {
      return await getaiCommerceAdminProductsProductIdCategoryBindingsBindingId(
        {
          admin,
          productId,
          bindingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a category binding between a product and a category
   * (ai_commerce_product_category_bindings).
   *
   * This API operation allows an authorized seller or admin to remove a
   * category binding from a specific product. Category bindings determine which
   * categories a product is shown in, and their removal can directly impact
   * product discoverability, search filters, and reporting.
   *
   * Authorization is required: only the product's seller or a platform admin
   * may erase a category binding. All actions are audit-logged for evidence and
   * traceability. The operation hard-deletes the relationship, and any attempt
   * to delete a binding that does not exist returns an appropriate error
   * response with actionable feedback.
   *
   * Related operations include adding or listing category bindings for a
   * product, managed through corresponding POST or PATCH endpoints. No request
   * body is required, but both productId and bindingId path parameters are
   * strictly required to ensure the correct binding is targeted. The operation
   * must be used carefully, as removing a binding may impact merchandising and
   * analytics immediately.
   *
   * @param connection
   * @param productId UUID of the target product for which to remove the
   *   category binding.
   * @param bindingId UUID of the product-category binding to be removed.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":bindingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bindingId")
    bindingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminProductsProductIdCategoryBindingsBindingId(
        {
          admin,
          productId,
          bindingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
