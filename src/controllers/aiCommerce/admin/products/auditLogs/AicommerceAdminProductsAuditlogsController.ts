import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminProductsProductIdAuditLogs } from "../../../../../providers/patchaiCommerceAdminProductsProductIdAuditLogs";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminProductsProductIdAuditLogsAuditLogId } from "../../../../../providers/getaiCommerceAdminProductsProductIdAuditLogsAuditLogId";

import { IPageIAiCommerceProductAuditLog } from "../../../../../api/structures/IPageIAiCommerceProductAuditLog";
import { IAiCommerceProductAuditLog } from "../../../../../api/structures/IAiCommerceProductAuditLog";

@Controller("/aiCommerce/admin/products/:productId/auditLogs")
export class AicommerceAdminProductsAuditlogsController {
  /**
   * Search and retrieve audit logs of a product
   * (ai_commerce_product_audit_logs).
   *
   * This operation allows authorized sellers or admins to review the complete
   * audit history for a product, using advanced search, filter, and pagination
   * parameters passed in IAiCommerceProductAuditLog.IRequest. The endpoint
   * returns IPageIAiCommerceProductAuditLog, detailing each audit event, its
   * source/actor, what changed, and when.
   *
   * All accesses must be logged as read operations for compliance. No data is
   * modified by this method. Audit logs are critical for legal compliance,
   * security, forensic analysis, and dispute investigations, so business logic
   * must ensure only properly authorized users have access. When requested,
   * highly sensitive or private changes may be subject to further masking or
   * redaction based on platform compliance policy.
   *
   * @param connection
   * @param productId UUID of the product whose audit logs will be retrieved.
   * @param body Advanced filtering and pagination options for product audit
   *   logs retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductAuditLog.IRequest,
  ): Promise<IPageIAiCommerceProductAuditLog> {
    try {
      return await patchaiCommerceAdminProductsProductIdAuditLogs({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific product audit log entry by auditLogId from the
   * ai_commerce_product_audit_logs table.
   *
   * This endpoint retrieves a detailed audit log entry for a specific product
   * by its unique identifiers. Audit logs in aiCommerce capture every critical
   * event related to a productâ€”such as creation, update, compliance reviews,
   * price changes, and deletions. Each record includes the productId and
   * auditLogId as path parameters, as well as information like event_type,
   * actor_id, before_json, after_json, and created_at, ensuring full
   * reconstructibility for legal, compliance, and business intelligence needs.
   *
   * Strict access control is enforced: only users with the admin role, or those
   * granted explicit audit/review permissions may use this endpoint. The
   * operation ties into the immutable, append-only audit trail for products
   * defined in the Prisma schema, allowing robust inquiry into what changes
   * were made, by whom, and when. This is vital for regulatory reporting,
   * internal incident tracking, and restoring mission-critical history.
   *
   * Permission violations, invalid product or audit log IDs, and requests for
   * missing logs must result in standardized error responses without revealing
   * sensitive system information.
   *
   * @param connection
   * @param productId Unique identifier of the target product whose audit log is
   *   being retrieved.
   * @param auditLogId Unique identifier of the audit log entry for the product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductAuditLog> {
    try {
      return await getaiCommerceAdminProductsProductIdAuditLogsAuditLogId({
        admin,
        productId,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
