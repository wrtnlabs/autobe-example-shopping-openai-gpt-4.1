import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminProductsProductIdSnapshots } from "../../../../../providers/patchaiCommerceAdminProductsProductIdSnapshots";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminProductsProductIdSnapshotsSnapshotId } from "../../../../../providers/getaiCommerceAdminProductsProductIdSnapshotsSnapshotId";

import { IPageIAiCommerceProductSnapshot } from "../../../../../api/structures/IPageIAiCommerceProductSnapshot";
import { IAiCommerceProductSnapshot } from "../../../../../api/structures/IAiCommerceProductSnapshot";

@Controller("/aiCommerce/admin/products/:productId/snapshots")
export class AicommerceAdminProductsSnapshotsController {
  /**
   * Search product snapshot history for a product
   * (ai_commerce_product_snapshots).
   *
   * This endpoint serves to provide a comprehensive history of all snapshots
   * taken for a particular product, useful for compliance audits, version
   * rollback, and business intelligence. The request body allows advanced
   * filtering, search, pagination, and sorting, referencing
   * IAiCommerceProductSnapshot.IRequest.
   *
   * The operation returns IPageIAiCommerceProductSnapshot, giving a paginated
   * list of immutable, append-only historical snapshots capturing product state
   * at each edit/event. Only authorized sellers or admins may view this
   * information. Attempts by unauthorized users must be denied with full audit
   * logging. Related endpoints provide retrieval of a single snapshot and
   * non-destructive version rollback actions.
   *
   * @param connection
   * @param productId UUID of the product whose snapshot history is being
   *   queried.
   * @param body Search and pagination parameters for retrieving product
   *   snapshots.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductSnapshot.IRequest,
  ): Promise<IPageIAiCommerceProductSnapshot> {
    try {
      return await patchaiCommerceAdminProductsProductIdSnapshots({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific product snapshot (ai_commerce_product_snapshots).
   *
   * This endpoint retrieves a single immutable snapshot representing a
   * product's state at a specific point in time (such as after creation,
   * update, compliance review). Only authorized sellers or admins may access
   * this record. The returned IAiCommerceProductSnapshot object provides a
   * denormalized view of all product attributes at the snapshot point. This is
   * critical for audit, regulatory, and evidence purposes and supports dispute
   * handling and forensic investigations.
   *
   * The operation must strictly check both productId and snapshotId, returning
   * an error if not found. No request body is needed. The endpoint does not
   * allow modification; it is for forensic and business review only.
   *
   * @param connection
   * @param productId UUID of the product whose snapshot is requested.
   * @param snapshotId UUID of the specific product snapshot to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":snapshotId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("snapshotId")
    snapshotId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductSnapshot> {
    try {
      return await getaiCommerceAdminProductsProductIdSnapshotsSnapshotId({
        admin,
        productId,
        snapshotId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
