import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getaiCommerceAdminProductsProductIdImagesImageId } from "../../../../../providers/getaiCommerceAdminProductsProductIdImagesImageId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { putaiCommerceAdminProductsProductIdImagesImageId } from "../../../../../providers/putaiCommerceAdminProductsProductIdImagesImageId";
import { deleteaiCommerceAdminProductsProductIdImagesImageId } from "../../../../../providers/deleteaiCommerceAdminProductsProductIdImagesImageId";
import { postaiCommerceAdminProductsProductIdImages } from "../../../../../providers/postaiCommerceAdminProductsProductIdImages";

import { IAiCommerceProductImage } from "../../../../../api/structures/IAiCommerceProductImage";

@Controller("/aiCommerce/admin/products/:productId/images")
export class AicommerceAdminProductsImagesController {
  /**
   * Retrieve a product image for a given productId and imageId from
   * ai_commerce_product_images.
   *
   * Fetch a single product image, including its display order, locale metadata,
   * and attachment file reference, as defined in the ai_commerce_product_images
   * schema. The operation is accessible to authorized sellers (for their own
   * products) and platform admins; public access may be permitted for resources
   * marked as active and public, per business requirements.
   *
   * This endpoint fetches all columns for the identified image: id, product_id,
   * attachment_id, display_order, and locale. Security checks should ensure
   * that only the creator or authorized admin can view unpublished/archived
   * images, while published images for public products may be accessible by any
   * authenticated or public user. Error handling covers not found, access
   * denied, and resource deletion scenarios.
   *
   * This operation enables granular image management UI/UX and can be linked to
   * attachment/download APIs for file retrieval.
   *
   * @param connection
   * @param productId Unique identifier of the parent product
   * @param imageId Unique identifier for the product image resource
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":imageId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductImage> {
    try {
      return await getaiCommerceAdminProductsProductIdImagesImageId({
        admin,
        productId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an image's metadata for a specific product using
   * ai_commerce_product_images.
   *
   * Permits the owner (seller) of the product or platform admins to update
   * fields for a product image such as the linked attachment (file), display
   * order, or locale. Based on the IAiCommerceProductImage.IUpdate DTO, the
   * request supports full or partial field replacement; it is not intended for
   * image content modification but for metadata management only.
   *
   * Authorization enforces seller ownership or admin role, and the existence
   * and modifiability of the image/product. Changes should be audited and
   * validated against product publishing status (e.g., published images may
   * have change restrictions). A successful update returns the new image
   * entity. Business logic includes checking for image asset existence, field
   * validation, and external attachment verification with file management
   * modules.
   *
   * @param connection
   * @param productId Product to which this image belongs
   * @param imageId Image record to modify
   * @param body Data for product image metadata updates
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":imageId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductImage.IUpdate,
  ): Promise<IAiCommerceProductImage> {
    try {
      return await putaiCommerceAdminProductsProductIdImagesImageId({
        admin,
        productId,
        imageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific product image from ai_commerce_product_images.
   *
   * Deletes or logically removes a product image for a specified product,
   * ensuring only authorized sellers (for their products) or admins can execute
   * the operation. This endpoint is used for cleaning up duplicate or outdated
   * images, and supports compliance with gallery or publishing limits.
   *
   * Prior to deletion, checks are performed to ensure the image is not set as
   * primary, used in a locked product state, or referenced by audit/history
   * features. If soft deletion is implemented, the record is marked via the
   * deleted_at column; otherwise, the row is permanently removed from the
   * table. The operation will fail if the image does not exist or if access is
   * not permitted.
   *
   * No response body is provided on success, but an HTTP status code will
   * indicate completion. Errors for not found, forbidden, or resource in use
   * are expected and should be documented.
   *
   * @param connection
   * @param productId Owning product ID for the image
   * @param imageId Unique identifier of the image to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":imageId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("imageId")
    imageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminProductsProductIdImagesImageId({
        admin,
        productId,
        imageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Add a new image to an existing product in ai_commerce_product_images.
   *
   * Creates a new image resource for a given product, collecting necessary
   * fields including the attachment (file) reference, display order, and
   * locale. The operation checks seller ownership or admin rights and validates
   * that the product exists and is editable.
   *
   * The request body corresponds to the IAiCommerceProductImage.ICreate DTO and
   * must contain the attachment_id (for the uploaded file), optional locale,
   * display_order, and productId path parameter. Image limits, file type/size,
   * and localization policies should be enforced per business logic. If the
   * image is associated with a product not owned by the seller or in an
   * immutable state, the request should be rejected.
   *
   * On success, returns the newly created image entity as response with full
   * metadata for UI updates. This endpoint integrates with attachment storage
   * APIs in file management flows.
   *
   * @param connection
   * @param productId Unique identifier of the target product to add an image to
   * @param body Image upload data including attachment reference and optional
   *   locale/order
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceProductImage.ICreate,
  ): Promise<IAiCommerceProductImage> {
    try {
      return await postaiCommerceAdminProductsProductIdImages({
        admin,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
