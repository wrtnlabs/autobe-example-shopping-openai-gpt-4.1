import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminSellerOnboardings } from "../../../../providers/patchaiCommerceAdminSellerOnboardings";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminSellerOnboardingsSellerOnboardingId } from "../../../../providers/getaiCommerceAdminSellerOnboardingsSellerOnboardingId";
import { putaiCommerceAdminSellerOnboardingsSellerOnboardingId } from "../../../../providers/putaiCommerceAdminSellerOnboardingsSellerOnboardingId";
import { deleteaiCommerceAdminSellerOnboardingsSellerOnboardingId } from "../../../../providers/deleteaiCommerceAdminSellerOnboardingsSellerOnboardingId";

import { IPageIAiCommerceSellerOnboarding } from "../../../../api/structures/IPageIAiCommerceSellerOnboarding";
import { IAiCommerceSellerOnboarding } from "../../../../api/structures/IAiCommerceSellerOnboarding";

@Controller("/aiCommerce/admin/sellerOnboardings")
export class AicommerceAdminSelleronboardingsController {
  /**
   * Retrieve paginated/searchable seller onboarding application list
   * (ai_commerce_seller_onboarding table).
   *
   * This operation returns a filtered, paginated list of all seller onboarding
   * records within the ai_commerce_seller_onboarding table. Admins can use
   * advanced search criteria—including onboarding_status, created_at, user
   * references, or current_stage—to monitor the flow and progress of seller
   * onboarding applications. The operation supports business workflows around
   * onboarding review, KYC compliance, and escalation.
   *
   * Each result in the list provides a summary of the onboarding application:
   * applicant association, current status, timestamps, and business context.
   * Pagination and sorting are available for dashboards and compliance review
   * queues. The endpoint enables administrators to quickly filter for
   * applications requiring intervention, escalation, or documentation. Records
   * are retrieved with audit compliance, omitting deleted or non-relevant cases
   * unless explicitly requested.
   *
   * No personally identifiable or sensitive KYC data is exposed without proper
   * authorization. Errors may occur if non-admin roles attempt access or if
   * listing criteria are malformed.
   *
   * @param connection
   * @param body Search filters and pagination for onboarding applications
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSellerOnboarding.IRequest,
  ): Promise<IPageIAiCommerceSellerOnboarding.ISummary> {
    try {
      return await patchaiCommerceAdminSellerOnboardings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full details for a specific seller onboarding application
   * (ai_commerce_seller_onboarding table).
   *
   * This operation returns detailed information for a seller onboarding
   * application from ai_commerce_seller_onboarding, identified by
   * sellerOnboardingId. All application fields are included, including
   * application_data (KYC, disclosures, supporting docs), onboarding_status,
   * current_stage, notes, and audit fields (created_at, updated_at,
   * deleted_at). This endpoint is strictly admin-restricted due to sensitive
   * compliance and KYC content.
   *
   * Use cases include onboarding review, compliance audit, escalation, or final
   * approval/denial workflow. The administrator can access application details
   * for a comprehensive review, request further documentation, or make an
   * approval/rejection decision within compliance guidelines.
   *
   * The operation enforces data access policies at the controller and service
   * layer, ensuring private and sensitive fields are protected. If the
   * onboarding record is not found or the requester lacks authorization, an
   * error is returned.
   *
   * @param connection
   * @param sellerOnboardingId Unique identifier for the seller onboarding
   *   application
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerOnboardingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerOnboardingId")
    sellerOnboardingId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSellerOnboarding> {
    try {
      return await getaiCommerceAdminSellerOnboardingsSellerOnboardingId({
        admin,
        sellerOnboardingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update seller onboarding application information or status
   * (ai_commerce_seller_onboarding table).
   *
   * This operation updates the fields of a seller onboarding application record
   * based on the ai_commerce_seller_onboarding schema. Supported updates
   * include onboarding_status changes (per workflow), updates to
   * application_data, notes, or current_stage, and compliance justification.
   * Both applicants (buyer) and admins can update relevant fields per business
   * rules—e.g., buyers submit additional documents, admins escalate or
   * approve.
   *
   * Each update records before/after change, timestamp, and user performing the
   * action for audit and compliance. Update permission is context-sensitive:
   * applicants alter their own onboarding records, while admins/compliance can
   * update any onboarding application for review, escalation, or adjudication.
   * Workflow rules enforce valid status transitions; invalid or unauthorized
   * updates are rejected.
   *
   * Returns the updated onboarding application details as defined by schema.
   * The endpoint ensures full traceability, prevents unauthorized workflow
   * jumps, and maintains platform compliance posture.
   *
   * @param connection
   * @param sellerOnboardingId Unique identifier for the seller onboarding
   *   record to update
   * @param body Updated onboarding application information or workflow fields
   *   allowed by business logic
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sellerOnboardingId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerOnboardingId")
    sellerOnboardingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSellerOnboarding.IUpdate,
  ): Promise<IAiCommerceSellerOnboarding> {
    try {
      return await putaiCommerceAdminSellerOnboardingsSellerOnboardingId({
        admin,
        sellerOnboardingId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a seller onboarding record from
   * ai_commerce_seller_onboarding.
   *
   * This operation allows an administrator or an authorized actor to
   * permanently delete a seller onboarding record from the
   * ai_commerce_seller_onboarding table. This is typically used in scenarios
   * where a seller's onboarding process is cancelled due to fraud detection,
   * duplicate application, or explicit withdrawal by the user. There is no soft
   * delete field, so the removal is permanent and the onboarding record is
   * fully deleted, though all audit logs related to this onboarding must be
   * preserved for compliance reasons.
   *
   * Security is critical for this operation, as only privileged roles (admin)
   * should be permitted to perform deletions. Relations to store, user
   * authentication, and seller KYC data must be checked/handled at the
   * provider/service logic level to prevent orphaned references and maintain
   * referential integrity.
   *
   * Attempts to delete onboarding records that are under dispute or legal hold
   * must result in validation errors, and attempts must be correctly logged for
   * audit trail purposes.
   *
   * @param connection
   * @param sellerOnboardingId Unique identifier of the seller onboarding record
   *   to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sellerOnboardingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerOnboardingId")
    sellerOnboardingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminSellerOnboardingsSellerOnboardingId({
        admin,
        sellerOnboardingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
