import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminSearchAnalytics } from "../../../../providers/patchaiCommerceAdminSearchAnalytics";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminSearchAnalyticsSearchAnalyticsId } from "../../../../providers/getaiCommerceAdminSearchAnalyticsSearchAnalyticsId";

import { IPageIAiCommerceSearchAnalytics } from "../../../../api/structures/IPageIAiCommerceSearchAnalytics";
import { IAiCommerceSearchAnalytics } from "../../../../api/structures/IAiCommerceSearchAnalytics";

@Controller("/aiCommerce/admin/searchAnalytics")
export class AicommerceAdminSearchanalyticsController {
  /**
   * Search, aggregate, and paginate discovery search analytics for backend
   * monitoring and optimization.
   *
   * Enables authorized users to fetch search-related KPIs, statistics, and
   * analytics events for the discovery system, filtered by query, aggregation
   * type, timeframe, or custom dashboard segmentation. The endpoint is
   * essential for BI teams, admin analysis, and platform recommendation
   * optimization.
   *
   * Access is restricted to admin roles with permission to analytics dashboards
   * or BI modules. Results are paginated and can be aggregated for trend,
   * segment, or dashboard reporting. Security controls prevent excessive loads
   * or data exfiltration, and all accesses are monitored for compliance.
   *
   * Responses return summarized, aggregate analytics datasets designed for
   * integration into data dashboards and optimization routines.
   *
   * @param connection
   * @param body Filtering and aggregation criteria for search analytics query,
   *   plus pagination if required
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSearchAnalytics.IRequest,
  ): Promise<IPageIAiCommerceSearchAnalytics> {
    try {
      return await patchaiCommerceAdminSearchAnalytics({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detail for a specific search analytics entry by ID.
   *
   * Fetches a single, detailed analytics record referenced by dashboard or
   * analyst for reporting and optimization. Includes aggregated query
   * information, KPI breakdowns, filter/facet state, and analytic interval
   * windows.
   *
   * Only admin users can access or drill into individual analytics records; all
   * such actions are tracked in the compliance audit logs for evidence. Related
   * errors—such as record not found, access denied, or incomplete data—are
   * reported with actionable error messages. Access to drilldown data may vary
   * by system configuration/policy.
   *
   * @param connection
   * @param searchAnalyticsId Unique ID for the analytics entry to view detail
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":searchAnalyticsId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("searchAnalyticsId")
    searchAnalyticsId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSearchAnalytics> {
    try {
      return await getaiCommerceAdminSearchAnalyticsSearchAnalyticsId({
        admin,
        searchAnalyticsId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
