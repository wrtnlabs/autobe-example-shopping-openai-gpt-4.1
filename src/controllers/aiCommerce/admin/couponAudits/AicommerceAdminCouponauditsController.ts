import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminCouponAudits } from "../../../../providers/patchaiCommerceAdminCouponAudits";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminCouponAuditsCouponAuditId } from "../../../../providers/getaiCommerceAdminCouponAuditsCouponAuditId";

import { IPageIAiCommerceCouponAudit } from "../../../../api/structures/IPageIAiCommerceCouponAudit";
import { IAiCommerceCouponAudit } from "../../../../api/structures/IAiCommerceCouponAudit";

@Controller("/aiCommerce/admin/couponAudits")
export class AicommerceAdminCouponauditsController {
  /**
   * Search and retrieve a filtered, paginated list of coupon audit logs from
   * ai_commerce_coupon_audits.
   *
   * This operation returns a list of coupon audit logs with advanced query
   * support, including pagination, search filtering by coupon event type (e.g.
   * issue, redeem, expire, revoke), date range, coupon code, event reference,
   * and actor. The result includes detailed audit entry data for compliance
   * review and business analytics.
   *
   * The ai_commerce_coupon_audits table is write-only for business logic (never
   * edited or deleted), so this operation is purely read-only. All returned
   * data is compliant for evidence and reporting purposes.
   *
   * Security: Coupon audits involve potentially sensitive data and should be
   * accessible only to admin users or staff with reporting rights. Proper
   * authorization and filtering must be enforced.
   *
   * Typical use cases include: monitoring coupon abuse, tracking
   * redemption/issuance rates, regulatory reporting, and business promotion
   * analysis. Results are paginated and suitable for export or dashboard
   * analytics.
   *
   * @param connection
   * @param body The search, filter, and pagination parameters for coupon audit
   *   log retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCouponAudit.IRequest,
  ): Promise<IPageIAiCommerceCouponAudit> {
    try {
      return await patchaiCommerceAdminCouponAudits({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific coupon audit log entry by ID from ai_commerce_coupon_audits.
   *
   * Fetch detailed information for a single coupon audit entry by its unique ID
   * (couponAuditId). This operation is used for deep compliance reviews,
   * dispute investigations, or export of single evidence records. The
   * ai_commerce_coupon_audits table is immutable and append-only, containing
   * full details of coupon-related lifecycle/business events, such as issuance,
   * redemption, expiration, or administrative actions.
   *
   * The returned entry includes all fields: event type, event reference, note,
   * timestamp, and associated coupon information. Proper path parameter
   * validation and access control according to compliance reporting
   * requirements are enforced.
   *
   * This operation is critical for business processes that require forensic
   * detail, including legal review, user dispute resolution, and regulatory
   * audits. Only admins or compliance staff should have access to this API.
   *
   * @param connection
   * @param couponAuditId Unique identifier of the target coupon audit log
   *   entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":couponAuditId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponAuditId")
    couponAuditId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCouponAudit> {
    try {
      return await getaiCommerceAdminCouponAuditsCouponAuditId({
        admin,
        couponAuditId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
