import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminCartMerges } from "../../../../providers/postaiCommerceAdminCartMerges";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminCartMerges } from "../../../../providers/patchaiCommerceAdminCartMerges";
import { getaiCommerceAdminCartMergesCartMergeId } from "../../../../providers/getaiCommerceAdminCartMergesCartMergeId";
import { putaiCommerceAdminCartMergesCartMergeId } from "../../../../providers/putaiCommerceAdminCartMergesCartMergeId";
import { deleteaiCommerceAdminCartMergesCartMergeId } from "../../../../providers/deleteaiCommerceAdminCartMergesCartMergeId";

import { IAiCommerceCartMerge } from "../../../../api/structures/IAiCommerceCartMerge";
import { IPageIAiCommerceCartMerge } from "../../../../api/structures/IPageIAiCommerceCartMerge";

@Controller("/aiCommerce/admin/cartMerges")
export class AicommerceAdminCartmergesController {
  /**
   * Create a new cart merge record linking source and target carts by business
   * logic.
   *
   * Create a new cart merge entry by specifying the involved source cart,
   * target cart, merging actor (if known), and merge reason. The
   * ai_commerce_cart_merges table captures all individual merge events for
   * persistent audit, analytics, and session troubleshooting.
   *
   * Creation is typically initiated by background logic during user login,
   * device switch, or administrative actions requiring consolidation of cart
   * contents. The request body includes all necessary fields, with business
   * logic enforcing that merge events are valid and do not conflict with active
   * cart sessions. The resulting record is returned in full for confirmation
   * and audit registration.
   *
   * Errors during creation (such as invalid cart relationships or actor IDs)
   * are reported with actionable error codes. All operations are strictly
   * logged for compliance, and only users with sufficient administrative
   * authority are allowed to perform manual merges using this operation.
   *
   * @param connection
   * @param body Creation information specifying source/target cart IDs, actor
   *   (if any), reason, and relevant details for the cart merge event.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCartMerge.ICreate,
  ): Promise<IAiCommerceCartMerge> {
    try {
      return await postaiCommerceAdminCartMerges({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and retrieve paginated cart merge records from
   * ai_commerce_cart_merges.
   *
   * Retrieve a comprehensive list of cart merges based on complex filtering
   * criteria such as merge type, actor, reason, and timestamp range. The
   * ai_commerce_cart_merges table provides a historical record of all cart
   * merge events, including guest-to-member, device switch, and administrative
   * merges.
   *
   * This operation aids administrators and support roles in tracking user
   * sessions, detecting recovery flows, understanding anonymized user behavior,
   * or forensic investigation. The request body supports structured query
   * parameters including actor ID, date ranges, merge reasons, and ordering,
   * and supports standard pagination controls.
   *
   * Security controls ensure that only users with proper auditing or support
   * privileges can access cart merge histories with full context. Error
   * handling returns appropriate codes if filter parameters are invalid. Only
   * records matching the search criteria are returned, and access to PII data
   * within merge records is masked for compliance.
   *
   * @param connection
   * @param body Request parameters for searching and paginating cart merge
   *   records. Includes filters such as actor ID, reason, timestamp range, and
   *   sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCartMerge.IRequest,
  ): Promise<IPageIAiCommerceCartMerge.ISummary> {
    try {
      return await patchaiCommerceAdminCartMerges({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific cart merge using
   * cartMergeId.
   *
   * Fetch full details about a single cart merge event using its unique
   * cartMergeId. The ai_commerce_cart_merges table logs each cart merge for
   * audit, user support, or session recovery analysis. The returned data
   * includes the source and target cart IDs, actor, reason, and merge
   * timestamp.
   *
   * This operation is essential for forensic troubleshooting, understanding
   * merge outcomes, or reconstructing user sessions in compliance or support
   * incidents. Strict authorization ensures only users with administrative or
   * support rights can access this level of detail. If the cart merge record
   * does not exist, the operation returns a clear not-found error.
   *
   * Personal data is masked as required by privacy policy, and all access
   * attempts are logged for compliance monitoring.
   *
   * @param connection
   * @param cartMergeId Unique identifier of the cart merge record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartMergeId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartMergeId")
    cartMergeId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCartMerge> {
    try {
      return await getaiCommerceAdminCartMergesCartMergeId({
        admin,
        cartMergeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update limited annotatable fields of a cart merge record.
   *
   * Modify an existing cart merge record by cartMergeId, allowing updates to
   * annotatable or business-related fields that do not compromise historical
   * integrity. Cart merge records are intended to be immutable for audit core
   * fields such as actors, carts, and merge reason; only supplemental
   * information (for example, investigation result, internal notes, or tagging)
   * is allowed to be updated.
   *
   * The API validates that only updatable fields are included in the request,
   * and all changes are logged with before/after snapshots. This operation
   * supports internal compliance, data curation, or administrative error
   * correction scenarios. Mutation attempts against immutable core merge fields
   * are rejected with explicit errors, maintaining audit reliability and
   * compliance.
   *
   * Access is limited to administrators or authorized support users, and all
   * updates are included in the audit log trail for forensics and regulatory
   * purposes.
   *
   * @param connection
   * @param cartMergeId Unique identifier of the cart merge record to update.
   * @param body Updatable/annotatable fields for the given cart merge record
   *   (e.g., business notes, investigation flags).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartMergeId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartMergeId")
    cartMergeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartMerge.IUpdate,
  ): Promise<IAiCommerceCartMerge> {
    try {
      return await putaiCommerceAdminCartMergesCartMergeId({
        admin,
        cartMergeId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase a cart merge record (admin compliance only).
   *
   * Permanently remove an existing cart merge record using cartMergeId. The
   * ai_commerce_cart_merges table stores historical references for all cart
   * merge events; as such, deletion is generally restricted for only data
   * rectification, error correction, or regulatory obligations.
   *
   * All erase operations are strictly permissioned, require administrative
   * privileges, and are subject to compliance pre-conditions (such as
   * evidentiary record retention and justification). An audit log entry is
   * generated for every deletion. Core business and compliance policies
   * discourage or prohibit deletions unless explicitly authorized. No
   * recoverable soft-delete is provided; the operation irreversibly removes the
   * record on success, after verifying all required preconditions.
   *
   * @param connection
   * @param cartMergeId Unique identifier of the cart merge record to
   *   permanently erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartMergeId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartMergeId")
    cartMergeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminCartMergesCartMergeId({
        admin,
        cartMergeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
