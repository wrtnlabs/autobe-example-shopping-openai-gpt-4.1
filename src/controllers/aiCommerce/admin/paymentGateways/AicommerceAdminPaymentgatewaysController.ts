import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminPaymentGateways } from "../../../../providers/postaiCommerceAdminPaymentGateways";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminPaymentGateways } from "../../../../providers/patchaiCommerceAdminPaymentGateways";
import { getaiCommerceAdminPaymentGatewaysPaymentGatewayId } from "../../../../providers/getaiCommerceAdminPaymentGatewaysPaymentGatewayId";
import { putaiCommerceAdminPaymentGatewaysPaymentGatewayId } from "../../../../providers/putaiCommerceAdminPaymentGatewaysPaymentGatewayId";
import { deleteaiCommerceAdminPaymentGatewaysPaymentGatewayId } from "../../../../providers/deleteaiCommerceAdminPaymentGatewaysPaymentGatewayId";

import { IAiCommercePaymentGateway } from "../../../../api/structures/IAiCommercePaymentGateway";
import { IPageIAiCommercePaymentGateway } from "../../../../api/structures/IPageIAiCommercePaymentGateway";

@Controller("/aiCommerce/admin/paymentGateways")
export class AicommerceAdminPaymentgatewaysController {
  /**
   * Create a new payment gateway configuration (admin only) in
   * ai_commerce_payment_gateways.
   *
   * An administrator can register a new payment gateway to the platform by
   * providing all required details for integration: unique gateway code,
   * descriptive display name, endpoint URL for payment API, activation status,
   * supported currency codes (comma-separated), and other configuration as
   * needed. The operation ensures the code and display name are unique, raising
   * errors on constraint violations.
   *
   * All payment gateway creations are audit logged for legal and compliance
   * traceability, specifying the actor, timestamp, and created configuration.
   * Successful creation enables the gateway for platform payment operations,
   * subject to activation status. Only admin users have access to perform this
   * operation.
   *
   * @param connection
   * @param body Complete payment gateway configuration and identifiers for
   *   creation. Requires unique gateway_code, display name, endpoint,
   *   activation, and currency list.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePaymentGateway.ICreate,
  ): Promise<IAiCommercePaymentGateway> {
    try {
      return await postaiCommerceAdminPaymentGateways({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list payment gateway configurations in
   * ai_commerce_payment_gateways (admin-only).
   *
   * Administrators can retrieve a paginated, searchable list of payment gateway
   * definitions and configurations with complex filters for status, supported
   * currencies, display name, or region. The endpoint leverages JSON query and
   * full-text search on the ai_commerce_payment_gateways table, supporting
   * advanced administration and oversight of the payment gateway ecosystem.
   *
   * The search request body enables specifying multiple criteria, plus sorting
   * and pagination for efficiency when many gateway configurations exist. This
   * endpoint is restricted to admin users due to the sensitive nature of
   * gateway management (as changes may affect system payment flows). All query
   * operations are logged for security and traceability. The results include
   * detailed gateway configuration and status fields optimized for management
   * UIs.
   *
   * @param connection
   * @param body Search criteria, filtering, and pagination information for
   *   payment gateway query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePaymentGateway.IRequest,
  ): Promise<IPageIAiCommercePaymentGateway> {
    try {
      return await patchaiCommerceAdminPaymentGateways({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific payment gateway by paymentGatewayId
   * (admin-only).
   *
   * An admin user can obtain the details of a single payment gateway from the
   * ai_commerce_payment_gateways table using its paymentGatewayId. The response
   * returns all fields including gateway code, display name, API endpoint,
   * supported currencies, and status. This data is used for managing and
   * auditing payment systems as well as diagnosing integration or business
   * problems.
   *
   * Security: Only admin users may access this endpoint due to the sensitivity
   * of payment gateway configurational data. All access, including query time
   * and user, is logged for compliance. Errors delivered if the specified
   * paymentGatewayId does not reference an existing record, or if the admin
   * lacks permission. This endpoint is read-only, and results are optimized for
   * system management UIs.
   *
   * @param connection
   * @param paymentGatewayId Unique identifier of the payment gateway to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentGatewayId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentGatewayId")
    paymentGatewayId: string & tags.Format<"uuid">,
  ): Promise<IAiCommercePaymentGateway> {
    try {
      return await getaiCommerceAdminPaymentGatewaysPaymentGatewayId({
        admin,
        paymentGatewayId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update properties of an existing payment gateway (admin only) in
   * ai_commerce_payment_gateways.
   *
   * When invoked by an admin, this endpoint updates the configuration or status
   * of an existing payment gateway in the ai_commerce_payment_gateways table.
   * Fields such as display_name, API endpoint, active state, and supported
   * currency codes can be altered to reflect new business requirements or
   * integration changes.
   *
   * All changes are validated for configuration correctness and referential
   * integrity. Attempts to update a gateway with a duplicate code or invalid
   * settings result in detailed error messages. Updates are logged to maintain
   * a non-repudiable compliance trail. Only administrators can perform these
   * updates, and a permission error is raised otherwise. If the specified
   * gateway does not exist, an appropriate error is returned.
   *
   * @param connection
   * @param paymentGatewayId Unique identifier for the payment gateway to
   *   update.
   * @param body Updated payment gateway fields/artifacts including status,
   *   configuration, and endpoint.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":paymentGatewayId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentGatewayId")
    paymentGatewayId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommercePaymentGateway.IUpdate,
  ): Promise<IAiCommercePaymentGateway> {
    try {
      return await putaiCommerceAdminPaymentGatewaysPaymentGatewayId({
        admin,
        paymentGatewayId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an existing payment gateway configuration from
   * ai_commerce_payment_gateways (admin only).
   *
   * On execution by an admin, this endpoint permanently deletes the targeted
   * payment gateway from the ai_commerce_payment_gateways table by identifying
   * the UUID. Referential integrity is checked to ensure no live payment flows
   * are attached to the gateway. The deleted_at field indicates logical
   * removal, enabling compliance with core business rules and regulations about
   * record retention.
   *
   * All deletion actions are strictly audit logged, capturing the user,
   * timestamp, and target configuration. Only administrators have permission to
   * delete payment gateways, and attempts to delete non-existent gateways
   * result in an error response. The action is irreversible and removes the
   * gateway from all future payment routing.
   *
   * @param connection
   * @param paymentGatewayId Unique identifier of the payment gateway to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":paymentGatewayId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentGatewayId")
    paymentGatewayId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminPaymentGatewaysPaymentGatewayId({
        admin,
        paymentGatewayId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
