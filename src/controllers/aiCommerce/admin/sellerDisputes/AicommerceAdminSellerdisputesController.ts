import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminSellerDisputes } from "../../../../providers/postaiCommerceAdminSellerDisputes";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminSellerDisputes } from "../../../../providers/patchaiCommerceAdminSellerDisputes";
import { getaiCommerceAdminSellerDisputesSellerDisputeId } from "../../../../providers/getaiCommerceAdminSellerDisputesSellerDisputeId";
import { putaiCommerceAdminSellerDisputesSellerDisputeId } from "../../../../providers/putaiCommerceAdminSellerDisputesSellerDisputeId";
import { deleteaiCommerceAdminSellerDisputesSellerDisputeId } from "../../../../providers/deleteaiCommerceAdminSellerDisputesSellerDisputeId";

import { IAiCommerceSellerDispute } from "../../../../api/structures/IAiCommerceSellerDispute";
import { IPageIAiCommerceSellerDispute } from "../../../../api/structures/IPageIAiCommerceSellerDispute";

@Controller("/aiCommerce/admin/sellerDisputes")
export class AicommerceAdminSellerdisputesController {
  /**
   * Create a new seller dispute, escalation, or penalty case
   * (ai_commerce_seller_disputes).
   *
   * This endpoint registers a new seller dispute, penalty, or compliance
   * escalation in the ai_commerce_seller_disputes table. Submitted data must
   * specify the affected seller profile, dispute type, business context, and
   * supporting evidence, opening an administrative workflow for review and
   * resolution as per platform rules.
   *
   * The operation enforces validation to prevent duplicate cases on identical
   * business events or redundant escalation records for the same policy
   * infraction. Audit trails capture every action in compliance with legal and
   * forensic guidelines.
   *
   * Access is typically restricted to administrators and compliance officers
   * who manage platform dispute workflows, in accordance with business
   * requirement documents. The endpoint interoperates with business logic for
   * evidence upload and status transitions, and returns the full created case
   * for UI consumption.
   *
   * @param connection
   * @param body Dispute/penalty/escalation data for the new seller dispute
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSellerDispute.ICreate,
  ): Promise<IAiCommerceSellerDispute> {
    try {
      return await postaiCommerceAdminSellerDisputes({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of seller dispute cases
   * (ai_commerce_seller_disputes).
   *
   * This API provides a robust search interface for retrieving seller disputes,
   * penalties, and escalation records from the ai_commerce_seller_disputes
   * table. Advanced search and filtering criteria are supported, including
   * dispute type (policy violation, payout hold, fraud investigation, etc.),
   * status (open, closed, resolved, escalated), seller profile ID, and time
   * windows for creation or modification.
   *
   * The operation supports pagination, sorting, and intelligent querying,
   * allowing administrators and compliance personnel to focus on relevant
   * dispute categories. Security logic ensures that sellers may only view their
   * own dispute records, while admins are able to access all records for
   * compliance and oversight.
   *
   * Related endpoints include those for dispute detail retrieval, evidence
   * upload, and workflow escalation or resolution. The resulting data is
   * optimized for dashboard and compliance monitoring use cases, with each
   * record containing sufficient metadata for follow-up actions.
   *
   * @param connection
   * @param body Search and filter options for retrieving seller disputes (type,
   *   status, period, seller ID, pagination).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSellerDispute.IRequest,
  ): Promise<IPageIAiCommerceSellerDispute.ISummary> {
    try {
      return await patchaiCommerceAdminSellerDisputes({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a single seller dispute case
   * (ai_commerce_seller_disputes) by ID.
   *
   * This API returns full details for a specific seller dispute as recorded in
   * the ai_commerce_seller_disputes table, including dispute type, workflow
   * status, context, attached evidence, and business/legal metadata fields. The
   * endpoint supports auditability and forensic evidence gathering for dispute
   * resolution and compliance monitoring.
   *
   * Permissions are enforced such that only the affected seller and authorized
   * admins may retrieve sensitive dispute data. The comprehensive response
   * allows for UI rendering of full dispute context and supports downstream
   * actions such as resolution workflows, appeals, and evidence uploads.
   *
   * This operation is critical to dispute management business processes and
   * should incorporate robust error handling for permission and not-found edge
   * cases. The API should be used in conjunction with the patch endpoint for
   * search and overview scenarios.
   *
   * @param connection
   * @param sellerDisputeId Unique identifier of the seller dispute to retrieve
   *   details for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerDisputeId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerDisputeId")
    sellerDisputeId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSellerDispute> {
    try {
      return await getaiCommerceAdminSellerDisputesSellerDisputeId({
        admin,
        sellerDisputeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing seller dispute (ai_commerce_seller_disputes) by ID.
   *
   * This API endpoint updates details for an existing seller dispute,
   * identified by sellerDisputeId. Permitted updates may include workflow
   * status transitions, evidence/context field changes, or business notes
   * relevant to the dispute's resolution. The full audit trail records all
   * changes for compliance and dispute tracking integrity.
   *
   * Role-based access control restricts modification to authorized
   * administrators. Validation ensures changes are permissible by business
   * policy (e.g., closed disputes cannot be reopened without a new escalation).
   * Error responses communicate any forbidden or invalid state transitions, and
   * prior versions are maintained.
   *
   * Use along with POST (new disputes), GET (detail), and PATCH (search)
   * endpoints for complete dispute lifecycle management.
   *
   * @param connection
   * @param sellerDisputeId Unique identifier of the seller dispute to update.
   * @param body Updated data, evidence, or status transition for the seller
   *   dispute.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sellerDisputeId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerDisputeId")
    sellerDisputeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSellerDispute.IUpdate,
  ): Promise<IAiCommerceSellerDispute> {
    try {
      return await putaiCommerceAdminSellerDisputesSellerDisputeId({
        admin,
        sellerDisputeId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a seller dispute record (ai_commerce_seller_disputes) by
   * ID.
   *
   * This API allows administrators to permanently erase a seller dispute record
   * from the ai_commerce_seller_disputes table. The operation is typically
   * necessary only in legally justified scenarios (e.g., correction of mistake,
   * compliance-removal), and not a routine path for standard business
   * workflow.
   *
   * The deletion is hard (record removed from the database) and is tracked in
   * immutable audit logs for evidence purposes. Only platform administrators
   * are permitted to invoke this action, and checks are performed to prevent
   * the deletion of disputes critical for ongoing legal or compliance
   * processes.
   *
   * Complementary endpoints should include get (detail view) and patch
   * (search/list) for monitoring dispute records; update and compliance
   * escalation features should be managed before considering hard deletion.
   *
   * @param connection
   * @param sellerDisputeId Unique identifier of the seller dispute to
   *   permanently delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sellerDisputeId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerDisputeId")
    sellerDisputeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminSellerDisputesSellerDisputeId({
        admin,
        sellerDisputeId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
