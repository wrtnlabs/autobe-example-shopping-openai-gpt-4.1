import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminOrdersOrderIdSnapshots } from "../../../../../providers/patchaiCommerceAdminOrdersOrderIdSnapshots";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IPageIAiCommerceOrderSnapshotLog } from "../../../../../api/structures/IPageIAiCommerceOrderSnapshotLog";
import { IAiCommerceOrderSnapshotLog } from "../../../../../api/structures/IAiCommerceOrderSnapshotLog";

@Controller("/aiCommerce/admin/orders/:orderId/snapshots")
export class AicommerceAdminOrdersSnapshotsController {
  /**
   * Search and list all historical snapshot logs for a specific order from
   * ai_commerce_order_snapshot_logs.
   *
   * Retrieve historical order state snapshots for a given orderId, supporting
   * compliance, audit, and advanced troubleshooting. This endpoint allows for
   * search, filter, sort, and pagination through POST body query parameters as
   * defined in IAiCommerceOrderSnapshotLog.IRequest. The output matches
   * IPageIAiCommerceOrderSnapshotLog structure, including all required order
   * snapshot data.
   *
   * Historical snapshots are used for forensics, compliance review, order
   * recovery, dispute investigation, and business analytics. Only authorized
   * stakeholders (buyer, seller, or admin) can access the snapshot log. All
   * accesses are audit-logged. Error conditions—such as non-existent orders or
   * unauthorized access—produce appropriate error codes and descriptive
   * messages, with no exposure of sensitive snapshot content to unauthenticated
   * or unauthorized users.
   *
   * @param connection
   * @param orderId Unique identifier of the target order. Must be a UUID string
   *   referencing ai_commerce_orders.id.
   * @param body Search, filter, and pagination parameters for order snapshot
   *   log list, matching IAiCommerceOrderSnapshotLog.IRequest schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderSnapshotLog.IRequest,
  ): Promise<IPageIAiCommerceOrderSnapshotLog> {
    try {
      return await patchaiCommerceAdminOrdersOrderIdSnapshots({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
