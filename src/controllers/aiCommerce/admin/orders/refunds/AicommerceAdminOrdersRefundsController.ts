import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminOrdersOrderIdRefunds } from "../../../../../providers/postaiCommerceAdminOrdersOrderIdRefunds";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminOrdersOrderIdRefunds } from "../../../../../providers/patchaiCommerceAdminOrdersOrderIdRefunds";
import { getaiCommerceAdminOrdersOrderIdRefundsRefundId } from "../../../../../providers/getaiCommerceAdminOrdersOrderIdRefundsRefundId";
import { putaiCommerceAdminOrdersOrderIdRefundsRefundId } from "../../../../../providers/putaiCommerceAdminOrdersOrderIdRefundsRefundId";
import { deleteaiCommerceAdminOrdersOrderIdRefundsRefundId } from "../../../../../providers/deleteaiCommerceAdminOrdersOrderIdRefundsRefundId";

import { IAiCommerceOrderRefund } from "../../../../../api/structures/IAiCommerceOrderRefund";
import { IPageIAiCommerceOrderRefund } from "../../../../../api/structures/IPageIAiCommerceOrderRefund";

@Controller("/aiCommerce/admin/orders/:orderId/refunds")
export class AicommerceAdminOrdersRefundsController {
  /**
   * Create a refund record for a specific order in ai_commerce_order_refunds.
   *
   * Create a new refund record associated with an order by providing the
   * necessary data in the request body, as defined by the
   * IAiCommerceOrderRefund.ICreate schema. This operation appends a new row to
   * ai_commerce_order_refunds, linking it to orderId and setting initial
   * statuses and amounts per the submitted refund request data. This API is a
   * critical part of customer support and after-sales flows.
   *
   * Role-specific business logic is enforced: only the buyer who placed the
   * order, a seller for products related to the order (where permitted by
   * policy/business logic), or an admin can create a refund. Refund
   * eligibility, requested amount, status, and reason are validated against the
   * order/payment status. Compliance logic may block or require further
   * escalation for orders that are not eligible for refund or are already fully
   * refunded. The system creates required audit logs, both for the creation
   * action and for compliance tracking of all refund activity.
   *
   * Errors resulting from invalid orderId, bad input, or ineligible status
   * result in explicit business error codes, and all failed creation attempts
   * are logged. The created refund is returned in the response on success.
   *
   * @param connection
   * @param orderId Unique identifier of the order to which the refund is
   *   attached. Must be a UUID string referencing ai_commerce_orders.id.
   * @param body New refund request data for the order, matching
   *   IAiCommerceOrderRefund.ICreate schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderRefund.ICreate,
  ): Promise<IAiCommerceOrderRefund> {
    try {
      return await postaiCommerceAdminOrdersOrderIdRefunds({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List all refunds for a specific order with search and pagination from
   * ai_commerce_order_refunds.
   *
   * Retrieve a filtered, paginated list of order refunds using advanced search,
   * filter, and sort capabilities. The operation uses orderId as the primary
   * path parameter and leverages POST body parameters for complex querying,
   * corresponding directly to ai_commerce_order_refunds attributes such as
   * refund_code, reason, status, and amount.
   *
   * This endpoint is critical for customer support, compliance review, and
   * financial operations, as it enables authorized users to review historic,
   * active, and pending refunds in detail. Security controls ensure that only
   * users with an appropriate business relationship to the order—the buyer,
   * seller, or relevant admin—can access refund history for the order. Business
   * logic supports result pagination, complex search criteria, and customizable
   * sort orders.
   *
   * The operation integrates with backend business logic to ensure that only
   * refunds actually belonging to the given order are returned, and that
   * sensitive financial metadata is appropriately masked or filtered according
   * to user authorization. Errors for invalid order IDs or unauthorized access
   * are handled gracefully, with explicit error messages and audit logging of
   * all result requests.
   *
   * @param connection
   * @param orderId Unique identifier of the target order. Must be a UUID string
   *   referencing ai_commerce_orders.id.
   * @param body Search and filter parameters for refund list retrieval,
   *   matching IAiCommerceOrderRefund.IRequest schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderRefund.IRequest,
  ): Promise<IPageIAiCommerceOrderRefund> {
    try {
      return await patchaiCommerceAdminOrdersOrderIdRefunds({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific refund associated with an order
   * from ai_commerce_order_refunds.
   *
   * Retrieve full detail of a specific order refund record by orderId and
   * refundId. The operation corresponds directly to ai_commerce_order_refunds
   * and is used by customer support, buyers, sellers, and compliance
   * administrators to view refund status, amount, currency, request/resolve
   * timestamps, actor, and business notes.
   *
   * Security logic ensures only stakeholders authorized by business rules can
   * access the refund: this includes the buyer involved in the order, the
   * seller responsible for the product, and platform administrators. The API
   * returns sensitive financial and process details according to the role of
   * the requester, masking or filtering fields if needed.
   *
   * If either the order or refund ID is not found, or access is attempted by an
   * unauthorized party, the system responds with explicit error codes and
   * explanations. Refund detail retrieval is also monitored for compliance and
   * audit logging purposes.
   *
   * @param connection
   * @param orderId Unique identifier of the order to which the refund is
   *   attached. Must be a UUID string referencing ai_commerce_orders.id.
   * @param refundId Unique identifier of the target refund record. Must be a
   *   UUID string referencing ai_commerce_order_refunds.id.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":refundId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrderRefund> {
    try {
      return await getaiCommerceAdminOrdersOrderIdRefundsRefundId({
        admin,
        orderId,
        refundId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing refund for an order in ai_commerce_order_refunds
   * (admin-only).
   *
   * Update a refund record identified by orderId and refundId by providing new
   * refund data that matches the IAiCommerceOrderRefund.IUpdate schema. This
   * operation enables correction or escalation for refund records—such as
   * adjusting amounts, changing status, or adding compliance notes—under strict
   * administrative control. All changes are written to
   * ai_commerce_order_refunds, and a fully detailed audit record is
   * automatically generated.
   *
   * Business logic restricts this operation to admins, supporting scenarios
   * like regulatory changes, error correction, or compliance requests. Normal
   * users and sellers are not permitted to update existing refund records. The
   * update operation validates field values according to the schema and
   * business/financial rules, including that the refund must actually belong to
   * the specified order, and that the update does not violate refund status,
   * currency, or payment settlement conditions.
   *
   * Concurrent updates, invalid refund/order IDs, or validation failures result
   * in clear business error codes and do not result in partial writes. The
   * fully updated refund record is returned in the response for confirmation
   * and any post-processing.
   *
   * @param connection
   * @param orderId Unique identifier of the order. Must be a UUID string
   *   referencing ai_commerce_orders.id.
   * @param refundId Unique identifier of the refund record. Must be a UUID
   *   string referencing ai_commerce_order_refunds.id.
   * @param body Updated refund data as defined in
   *   IAiCommerceOrderRefund.IUpdate schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":refundId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderRefund.IUpdate,
  ): Promise<IAiCommerceOrderRefund> {
    try {
      return await putaiCommerceAdminOrdersOrderIdRefundsRefundId({
        admin,
        orderId,
        refundId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Hard delete a specific refund record from ai_commerce_order_refunds for an
   * order (admin only).
   *
   * Permanently erase the refund record identified by orderId and refundId from
   * the ai_commerce_order_refunds table. This operation is specifically
   * restricted to admins due to the sensitive nature of refund removal
   * (affecting financial, compliance, and auditor records).
   *
   * The deletion is a hard remove (no soft delete present in this table), and
   * it is handled with system-wide audit logging of the operation and all
   * dependent changes. Use of this operation is very limited outside
   * administrative correction, compliance, or error remediation scenarios. All
   * other refunds are retained for legal/business evidence.
   *
   * Attempts to delete non-existent or locked refunds (those attached to
   * closed/settled orders or in the compliance hold state) will result in clear
   * business error responses. This ensures both data integrity and full
   * traceability through post-operation logs.
   *
   * @param connection
   * @param orderId Unique identifier of the order. Must be a UUID string
   *   referencing ai_commerce_orders.id.
   * @param refundId Unique identifier of the refund record to be deleted. Must
   *   be a UUID string referencing ai_commerce_order_refunds.id.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":refundId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminOrdersOrderIdRefundsRefundId({
        admin,
        orderId,
        refundId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
