import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminOrdersOrderIdItems } from "../../../../../providers/postaiCommerceAdminOrdersOrderIdItems";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminOrdersOrderIdItems } from "../../../../../providers/patchaiCommerceAdminOrdersOrderIdItems";
import { getaiCommerceAdminOrdersOrderIdItemsItemId } from "../../../../../providers/getaiCommerceAdminOrdersOrderIdItemsItemId";
import { putaiCommerceAdminOrdersOrderIdItemsItemId } from "../../../../../providers/putaiCommerceAdminOrdersOrderIdItemsItemId";
import { deleteaiCommerceAdminOrdersOrderIdItemsItemId } from "../../../../../providers/deleteaiCommerceAdminOrdersOrderIdItemsItemId";

import { IAiCommerceOrderItem } from "../../../../../api/structures/IAiCommerceOrderItem";
import { IPageIAiCommerceOrderItem } from "../../../../../api/structures/IPageIAiCommerceOrderItem";

@Controller("/aiCommerce/admin/orders/:orderId/items")
export class AicommerceAdminOrdersItemsController {
  /**
   * Create a new order item under a given order (ai_commerce_order_items) —
   * admin/system/internal only.
   *
   * A new order item is added to a specified order, for example in
   * admin-controlled or automated workflow use cases (such as order
   * corrections, additional shipments, or post-processing within the
   * fulfillment lifecycle). The request body supplies the necessary
   * product/variant/quantity/pricing and seller information, following the
   * IAiCommerceOrderItem.ICreate request structure. The ai_commerce_order_items
   * table captures one record for each new item, always linked to a valid
   * existing order and product variant.
   *
   * Security is paramount—orders can only have new items added if permitted by
   * business status and role: typically admins or system automation only, never
   * by buyers post-checkout. Validation covers proper UUIDs, sufficient
   * inventory, valid pricing, and duplicate prevention for the same
   * product/variant combination. Any failure in validation, such as referencing
   * a completed or locked order, results in a rejection.
   *
   * Related endpoints include PATCH /orders/{orderId}/items for index, and GET
   * for item detail. This API exists for completeness within admin/operational
   * flows, not for end-customer cart operations.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order to which the item will
   *   be added.
   * @param body Order item creation information: product/variant, quantities,
   *   pricing, and seller references.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderItem.ICreate,
  ): Promise<IAiCommerceOrderItem> {
    try {
      return await postaiCommerceAdminOrdersOrderIdItems({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filtered list of order items for a
   * specific order (ai_commerce_order_items).
   *
   * This API operation enables retrieval of a paginated list of order items
   * under a specific order by its unique orderId. It supports advanced
   * searching and filtering on fields such as product name, status, seller, and
   * quantity. Access control applies based on the user's role and ownership:
   * buyers may only access their own orders, admins may access any order items,
   * and sellers are restricted to their own segments of a split order,
   * depending on business implementation.
   *
   * The underlying ai_commerce_order_items table captures each product or
   * variant within an order, including associated product/variant references,
   * seller information for multi-vendor use cases, item status, pricing at
   * purchase, and related analytics. Pagination and filtering are supported by
   * supplying a structured request body.
   *
   * Business rules enforce referential integrity to the parent order, return
   * only items belonging to the specified orderId, and optionally restrict
   * access based on account role (buyer, seller, admin). Error handling and
   * validation ensure valid UUIDs and respect for row-level permissions and
   * privacy rules.
   *
   * This operation supports order item histories, analytics, after-sales
   * eligibility, and is typically paired with GET
   * /orders/{orderId}/items/{itemId} for details; buyers and sellers use this
   * to track, manage, and resolve issues with specific order items.
   *
   * @param connection
   * @param orderId Unique identifier of the order whose items are being
   *   queried.
   * @param body Search, filter, and pagination parameters for order item
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderItem.IRequest,
  ): Promise<IPageIAiCommerceOrderItem> {
    try {
      return await patchaiCommerceAdminOrdersOrderIdItems({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the full details of a specific order item within an order
   * (ai_commerce_order_items).
   *
   * This API operation fetches a single order item's details, including
   * quantities, pricing, seller information, variant/product references,
   * fulfillment and delivery status, and linked after-sales eligibility. The
   * operation enforces that only authorized users—buyers who own the parent
   * order, relevant sellers tied to the ordered item, or platform admins—may
   * access the record.
   *
   * The ai_commerce_order_items table anchors the response, joined by foreign
   * keys to product, variant, and seller details for context (not expanded
   * inline unless specified in the response DTO). If either the orderId or
   * itemId does not correspond to a valid order or item, or if the user lacks
   * permission, the operation returns a not-found or unauthorized error.
   *
   * Related APIs include PATCH /orders/{orderId}/items for item search and
   * access, and PUT or DELETE for updates and removals. This endpoint is
   * critical for after-sales processes, dispute resolution, and customer
   * support.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order.
   * @param itemId Unique identifier of the target order item.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":itemId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrderItem> {
    try {
      return await getaiCommerceAdminOrdersOrderIdItemsItemId({
        admin,
        orderId,
        itemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the fields of a specific order item (ai_commerce_order_items) —
   * admin/seller only.
   *
   * Used to modify one or more fields (such as delivery status, quantity,
   * price, or fulfillment details) of an existing order item. Enables
   * administrative corrections, split-fulfillment adjustments, or edge-case
   * after-sales actions. The operation requires the caller to provide both
   * orderId and itemId as path parameters, and an IAiCommerceOrderItem.IUpdate
   * request body specifying changes.
   *
   * Business rules limit which fields may be updated depending on the status of
   * the parent order and the item itself (e.g., item cannot have quantities
   * edited after delivery is marked complete). Edits are tracked in the
   * audit/log subsystems. Only users with sufficient permissions—typically
   * admin, or possibly seller for their own items in status-limited windows—can
   * perform updates. All input is strictly validated for permission and
   * referential integrity.
   *
   * Should the item or order not exist, or the update not be permitted by
   * workflow state, validation errors are returned. Related endpoints include
   * GET for item detail, PATCH for index, and DELETE for removals.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order.
   * @param itemId Unique identifier of the order item to update.
   * @param body Fields for updating the selected order item, according to
   *   business rules and audit requirements.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":itemId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderItem.IUpdate,
  ): Promise<IAiCommerceOrderItem> {
    try {
      return await putaiCommerceAdminOrdersOrderIdItemsItemId({
        admin,
        orderId,
        itemId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an order item from an order (ai_commerce_order_items) —
   * admin only, hard delete.
   *
   * The erase (delete) operation allows an authorized admin to remove an order
   * item record when permitted by order lifecycle, status, and compliance/audit
   * requirements. Soft delete is not supported as the ai_commerce_order_items
   * table relies on a hard delete (no deleted_at column); once removed, the
   * item record is permanently erased and all dependent relations (e.g.,
   * after-sales records) are optionally handled per implementation policy.
   *
   * Critical business validations prevent deletion if the item is already
   * delivered, under after-sales processing, or if the parent order is locked.
   * Only administrators may perform this operation in normal circumstances. All
   * deletions are recorded in the audit history for traceability. Attempts to
   * delete protected items result in error responses; a successful operation
   * returns HTTP 204 No Content or equivalent result depending on framework.
   *
   * Administrators should use this endpoint only for true data correction or
   * compliance resets; misuse of the erase operation may cause loss of
   * business/audit data. No response body is returned by design, but
   * success/failure codes and error context are provided per convention.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order.
   * @param itemId Unique identifier of the order item to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":itemId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminOrdersOrderIdItemsItemId({
        admin,
        orderId,
        itemId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
