import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminOrdersOrderIdFulfillments } from "../../../../../providers/patchaiCommerceAdminOrdersOrderIdFulfillments";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminOrdersOrderIdFulfillmentsFulfillmentId } from "../../../../../providers/getaiCommerceAdminOrdersOrderIdFulfillmentsFulfillmentId";

import { IPageIAiCommerceOrderFulfillments } from "../../../../../api/structures/IPageIAiCommerceOrderFulfillments";
import { IAiCommerceOrderFulfillments } from "../../../../../api/structures/IAiCommerceOrderFulfillments";

@Controller("/aiCommerce/admin/orders/:orderId/fulfillments")
export class AicommerceAdminOrdersFulfillmentsController {
  /**
   * List and search fulfillment actions (ai_commerce_order_fulfillments) for an
   * order.
   *
   * This operation lists the fulfillment actions for a specific order,
   * supporting advanced filtering, search, and pagination for cases of staged,
   * split, or partial deliveries. Queries the ai_commerce_order_fulfillments
   * table, presenting events such as shipping, delivery, returns, or failed
   * attempts. The operation enables buyers to track shipments and their
   * statuses, and allows sellers/admins to monitor and audit fulfillment
   * performance.
   *
   * The endpoint supports filters for sub-order, carrier, fulfillment status,
   * and date/time. Pagination is implemented for efficiency on
   * large/long-running orders. Access is granted to the buyer (who placed the
   * order), sellers who own relevant sub-orders, and administrators. Audit
   * logging of all queries ensures support and regulatory evidence is
   * maintained.
   *
   * @param connection
   * @param orderId Order ID for which to retrieve fulfillment events
   *   (ai_commerce_orders.id).
   * @param body Advanced search and filter parameters for fulfillment actions,
   *   including pagination.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderFulfillments.IRequest,
  ): Promise<IPageIAiCommerceOrderFulfillments> {
    try {
      return await patchaiCommerceAdminOrdersOrderIdFulfillments({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single fulfillment event (ai_commerce_order_fulfillments) for an
   * order by orderId and fulfillmentId.
   *
   * Returns complete details for a fulfillment action on a specific order,
   * selecting by orderId and fulfillmentId. Queries
   * ai_commerce_order_fulfillments for all relevant attributes, such as
   * carrier, delivery status, carrier contact, and event times. Designed for
   * tracking, support, and regulatory audit scenarios.
   *
   * Access is limited to the buyer who owns the order, the seller responsible
   * for the sub-order being fulfilled, or an administrator. Helps users trace
   * parcel and delivery state, resolve issues, and support compliance. If the
   * fulfillmentId does not exist for the order, or the user is unauthorized, an
   * error is returned. Complements the list/search endpoint for order
   * fulfillments.
   *
   * @param connection
   * @param orderId Order ID (ai_commerce_orders.id) whose fulfillment is being
   *   viewed.
   * @param fulfillmentId Unique ID of the fulfillment event
   *   (ai_commerce_order_fulfillments.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":fulfillmentId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("fulfillmentId")
    fulfillmentId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrderFulfillments> {
    try {
      return await getaiCommerceAdminOrdersOrderIdFulfillmentsFulfillmentId({
        admin,
        orderId,
        fulfillmentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
