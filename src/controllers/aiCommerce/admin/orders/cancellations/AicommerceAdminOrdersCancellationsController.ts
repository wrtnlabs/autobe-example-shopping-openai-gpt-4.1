import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminOrdersOrderIdCancellations } from "../../../../../providers/patchaiCommerceAdminOrdersOrderIdCancellations";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminOrdersOrderIdCancellationsCancellationId } from "../../../../../providers/getaiCommerceAdminOrdersOrderIdCancellationsCancellationId";
import { putaiCommerceAdminOrdersOrderIdCancellationsCancellationId } from "../../../../../providers/putaiCommerceAdminOrdersOrderIdCancellationsCancellationId";
import { deleteaiCommerceAdminOrdersOrderIdCancellationsCancellationId } from "../../../../../providers/deleteaiCommerceAdminOrdersOrderIdCancellationsCancellationId";

import { IPageIAiCommerceOrderCancellation } from "../../../../../api/structures/IPageIAiCommerceOrderCancellation";
import { IAiCommerceOrderCancellation } from "../../../../../api/structures/IAiCommerceOrderCancellation";

@Controller("/aiCommerce/admin/orders/:orderId/cancellations")
export class AicommerceAdminOrdersCancellationsController {
  /**
   * Search and list order cancellations for an order
   * (ai_commerce_order_cancellations).
   *
   * This operation enables users (order owner, involved seller, or admin) to
   * search, filter, paginate, and sort cancellation requests associated with a
   * specific order. Leveraging the ai_commerce_order_cancellations schema,
   * search criteria can include status, requester,
   * creation/approval/finalization times, and free-text in reason fields.
   *
   * Advanced search supports flexible queries as per business needs, including
   * full or partial field matching, time range, and status logic. Permission
   * logic restricts access to users authorized for the target order. The
   * response is a paginated list, structured for efficient UI display,
   * analytics, or workflow follow-up.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) for the parent order whose
   *   cancellations are being queried.
   * @param body Search criteria, sorting, and pagination info as per
   *   IAiCommerceOrderCancellation.IRequest DTO structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderCancellation.IRequest,
  ): Promise<IPageIAiCommerceOrderCancellation> {
    try {
      return await patchaiCommerceAdminOrdersOrderIdCancellations({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific order cancellation record
   * (ai_commerce_order_cancellations).
   *
   * Allows an authorized user (order buyer, associated seller for item(s), or
   * admin) to fetch complete information for a particular order cancellation
   * record. The ai_commerce_order_cancellations table is the backing schema.
   * Enforces strict validation: verifies the cancellation record exists,
   * matches the requested order, and that the caller is entitled (as owner,
   * seller, or admin) to view it.
   *
   * Returned data includes all business fieldsâ€”status, time markers, actor and
   * order IDs, reason for cancellation, and related workflow/context fields.
   * Used for timeline and audit review in service and compliance flows or UI
   * detail pages.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the parent order which the
   *   cancellation is tied to.
   * @param cancellationId Unique identifier (UUID) of the cancellation record
   *   being requested.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cancellationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationId")
    cancellationId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrderCancellation> {
    try {
      return await getaiCommerceAdminOrdersOrderIdCancellationsCancellationId({
        admin,
        orderId,
        cancellationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an order cancellation request (ai_commerce_order_cancellations).
   *
   * Permits an authorized user (owner, associated seller, or admin) to update
   * fields in a specific order cancellation record for a given order. The
   * ai_commerce_order_cancellations schema supports updates to status, reason,
   * workflow data, subject to business validation (e.g., cannot update after
   * finalization).
   *
   * Permission logic restricts modifications to appropriate states and roles.
   * Full validation ensures record exists, is associated with the order, caller
   * is allowed, and update complies with workflow. The updated record is
   * returned upon success, with audit trace.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order associated with the
   *   cancellation being updated.
   * @param cancellationId Unique identifier (UUID) for the cancellation record
   *   being modified.
   * @param body Update payload for the cancellation record
   *   (IAiCommerceOrderCancellation.IUpdate DTO structure).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cancellationId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationId")
    cancellationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderCancellation.IUpdate,
  ): Promise<IAiCommerceOrderCancellation> {
    try {
      return await putaiCommerceAdminOrdersOrderIdCancellationsCancellationId({
        admin,
        orderId,
        cancellationId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific refund for an order from the
   * ai_commerce_order_refunds table.
   *
   * This API endpoint is used to permanently remove a specific refund
   * associated with a given order. The operation uses cancellationId and
   * orderId as path parameters, corresponding to the
   * ai_commerce_order_refunds.id and ai_commerce_orders.id fields,
   * respectively. Execution enforces access control: only platform
   * administrators can perform this operation, in accordance with business
   * compliance protocols.
   *
   * Security and compliance are primary concerns in the lifecycle of a refund,
   * and all delete events are logged in the system audit tables to support
   * legal and forensic audits. There is no soft-delete or retention in this
   * table; deletion is hard and irreversible. All dependencies (including
   * refund history, audit trails, or financial reconciliations) must be updated
   * or checked during business execution.
   *
   * This operation is typically only performed following administrative review,
   * dispute resolution, or compliance investigation. Any errors, such as
   * attempt to delete a non-existent or active refund, will result in
   * descriptive business error codes. For deletions related to transaction
   * rollbacks or fraud, further administrative action and notification may be
   * required.
   *
   * @param connection
   * @param orderId Unique identifier of the target order. Must be a UUID string
   *   referencing ai_commerce_orders.id.
   * @param cancellationId Unique identifier of the refund/cancellation to
   *   delete. Must be a UUID string referencing ai_commerce_order_refunds.id.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cancellationId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("cancellationId")
    cancellationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminOrdersOrderIdCancellationsCancellationId(
        {
          admin,
          orderId,
          cancellationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
