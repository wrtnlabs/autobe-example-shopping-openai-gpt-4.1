import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminOrdersOrderIdSubOrders } from "../../../../../providers/postaiCommerceAdminOrdersOrderIdSubOrders";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminOrdersOrderIdSubOrders } from "../../../../../providers/patchaiCommerceAdminOrdersOrderIdSubOrders";
import { getaiCommerceAdminOrdersOrderIdSubOrdersSubOrderId } from "../../../../../providers/getaiCommerceAdminOrdersOrderIdSubOrdersSubOrderId";
import { putaiCommerceAdminOrdersOrderIdSubOrdersSubOrderId } from "../../../../../providers/putaiCommerceAdminOrdersOrderIdSubOrdersSubOrderId";
import { deleteaiCommerceAdminOrdersOrderIdSubOrdersSubOrderId } from "../../../../../providers/deleteaiCommerceAdminOrdersOrderIdSubOrdersSubOrderId";

import { IAiCommerceSubOrder } from "../../../../../api/structures/IAiCommerceSubOrder";
import { IPageIAiCommerceSubOrder } from "../../../../../api/structures/IPageIAiCommerceSubOrder";
import { IAiCommerceSubOrders } from "../../../../../api/structures/IAiCommerceSubOrders";

@Controller("/aiCommerce/admin/orders/:orderId/subOrders")
export class AicommerceAdminOrdersSubordersController {
  /**
   * Create a new sub-order for a given order (ai_commerce_sub_orders) — admin
   * only.
   *
   * A new sub-order is created for a given order, enabling advanced fulfillment
   * strategies or correction/segmentation by the administrator. The
   * IAiCommerceSubOrder.ICreate request body supplies essential creation
   * fields, including seller assignment, fulfillment details, and pricing
   * breakdown. Only platform admins (not end buyers or sellers) may invoke this
   * operation for data consistency and compliance.
   *
   * The ai_commerce_sub_orders table records the parent linkage, seller
   * ownership, independent fulfillment, and status. The API enforces
   * referential integrity for the parent order, validates seller existence,
   * checks business status, and records full audit context for compliance.
   * Duplicate control prevents double-creation of the same segment. Misuse or
   * violations of business workflow are guarded with strict validation and
   * permission enforcement.
   *
   * This endpoint complements PATCH for sub-order listing and GET for
   * individual sub-order retrieval, and forms a building block for operational
   * support and system-level automation.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order to which the sub-order
   *   is attached.
   * @param body Sub-order creation data, specifying all seller, pricing, and
   *   fulfillment context required.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSubOrder.ICreate,
  ): Promise<IAiCommerceSubOrder> {
    try {
      return await postaiCommerceAdminOrdersOrderIdSubOrders({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filtered list of sub-orders for an order
   * (ai_commerce_sub_orders).
   *
   * This API retrieves a filtered and paginated list of sub-orders belonging to
   * the parent order indicated by orderId. Sub-orders correspond to segmented
   * fulfillment units—such as by seller, warehouse, or shipping
   * method—generated automatically or administratively during order
   * processing.
   *
   * The ai_commerce_sub_orders table records the linkage between the primary
   * order and its sub-entities, including independent status, pricing, and
   * fulfillment details. The operation aids buyers and administrators in
   * tracking partial shipments, seller-specific delivery, and vendor resolution
   * cases. Filtering and paging options are passed in the request body
   * following the IAiCommerceSubOrder.IRequest DTO, and strict security ensures
   * only authorized actors (buyers for their own orders, sellers for their own
   * sub-orders, admins globally) can access these lists.
   *
   * Related APIs include GET for individual sub-order detail and POST for
   * administering new segments. Typical business rules limit creation to the
   * system or administrator roles, not end users, for compliance and
   * operational clarity.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order for which sub-orders
   *   are listed.
   * @param body Search, filter, and paging parameters for sub-order retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSubOrder.IRequest,
  ): Promise<IPageIAiCommerceSubOrder> {
    try {
      return await patchaiCommerceAdminOrdersOrderIdSubOrders({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific sub-order for an order
   * (ai_commerce_sub_orders).
   *
   * The endpoint fetches all business-relevant details for a single sub-order,
   * identified by both the parent orderId and the subOrderId. These may include
   * fulfillment status, pricing breakdown, seller and channel context, and
   * shipping/tracking references. Business rules enforce permissions based on
   * account type and order relationship. Buyers may access their own
   * sub-orders, sellers only their own, and administrators any, with
   * role-specific views for sensitive/aggregated fields.
   *
   * Underlying storage comes from the ai_commerce_sub_orders table, which links
   * each segmented order to its top-level order and responsible seller. Not
   * found or permission errors are handled according to privacy and compliance
   * policies. Use with PATCH for sub-order index and POST for creation. This
   * operation is required for operational tracking, partial fulfillment, and
   * customer care representing complex orders.
   *
   * @param connection
   * @param orderId Unique identifier of the parent order.
   * @param subOrderId Unique identifier of the target sub-order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":subOrderId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("subOrderId")
    subOrderId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSubOrder> {
    try {
      return await getaiCommerceAdminOrdersOrderIdSubOrdersSubOrderId({
        admin,
        orderId,
        subOrderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the details and status of a sub-order (ai_commerce_sub_orders) in a
   * given order.
   *
   * This operation enables authorized sellers or administrators to update the
   * details of a specific sub-order within a parent order. The targeted
   * sub-order is identified by its subOrderId, while the orderId parameter
   * gives the context of the parent order. The operation covers business flows
   * such as marking a sub-order as shipped, updating fulfillment status,
   * assigning shipping methods or tracking numbers, or updating price
   * allocations as needed for split/multi-vendor scenarios.
   *
   * User authentication and authorization are strictly enforced: only the
   * seller owning the sub-order or an admin may perform updates. On update,
   * status changes and modifications are logged to the
   * ai_commerce_order_audit_logs table for legal/audit review. Attempting to
   * update a sub-order with an invalid state transition (e.g., attempting to
   * deliver before payment confirmation) will result in a business logic
   * error.
   *
   * Fields not relevant to sellers (e.g., payment or refund states) cannot be
   * edited via this endpoint. Related endpoints: sub-order retrieval (GET),
   * sub-order erasure (DELETE). All updates are validated for correctness and
   * business policy compliance.
   *
   * @param connection
   * @param orderId Parent order's unique ID (ai_commerce_orders.id).
   * @param subOrderId Unique sub-order ID to update
   *   (ai_commerce_sub_orders.id).
   * @param body Update payload for the sub-order, specifying status,
   *   fulfillment data, and allowed business properties.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":subOrderId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("subOrderId")
    subOrderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSubOrders.IUpdate,
  ): Promise<IAiCommerceSubOrders> {
    try {
      return await putaiCommerceAdminOrdersOrderIdSubOrdersSubOrderId({
        admin,
        orderId,
        subOrderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a sub-order (ai_commerce_sub_orders) from an order if
   * allowed by business rules.
   *
   * Allows an authorized seller or administrator to permanently remove a
   * sub-order belonging to a specific parent order. The operation can only be
   * performed if the sub-order is in a state that allows deletion (e.g., not
   * fulfilled, not shipped, and with no completed payments). If these
   * conditions are not met, an error is returned.
   *
   * The operation uses the ai_commerce_sub_orders and ai_commerce_orders tables
   * as the data sources, enforcing that only owners of the sub-order (seller),
   * or platform administrators may perform this action. Hard deletion (record
   * is removed from the database) is performed, and an entry is made in
   * ai_commerce_order_audit_logs for evidence preservation.
   *
   * Deletions are not permitted after the sub-order is shipped or paid, to
   * comply with financial and legal recordkeeping. Business logic and
   * relationship constraints are validated before deletion, and error details
   * are provided on failure.
   *
   * @param connection
   * @param orderId Unique parent order ID (ai_commerce_orders.id).
   * @param subOrderId Sub-order ID to delete (ai_commerce_sub_orders.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":subOrderId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("subOrderId")
    subOrderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminOrdersOrderIdSubOrdersSubOrderId({
        admin,
        orderId,
        subOrderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
