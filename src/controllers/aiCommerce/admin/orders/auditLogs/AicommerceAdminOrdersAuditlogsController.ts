import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminOrdersOrderIdAuditLogs } from "../../../../../providers/patchaiCommerceAdminOrdersOrderIdAuditLogs";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

import { IPageIAiCommerceOrderAuditLog } from "../../../../../api/structures/IPageIAiCommerceOrderAuditLog";
import { IAiCommerceOrderAuditLog } from "../../../../../api/structures/IAiCommerceOrderAuditLog";

@Controller("/aiCommerce/admin/orders/:orderId/auditLogs")
export class AicommerceAdminOrdersAuditlogsController {
  /**
   * Retrieve a paginated list of audit logs for a specific order from the
   * ai_commerce_order_audit_logs table.
   *
   * This API operation allows clients to retrieve a paginated, filterable list
   * of all audit logs connected to a specific order. Audit logs document every
   * critical order-related action—creation, update, payment, refund,
   * fulfillment, cancellation, after-sales, and associated notes—ensuring full
   * compliance with business traceability, legal evidence preservation, and
   * transparent auditability per the ai_commerce_order_audit_logs table.
   *
   * Each audit log entry contains details such as the type of action performed,
   * the actor (buyer, seller, admin), contextual notes, and the precise
   * timestamp. This is foundational for compliance, forensic analysis, and
   * regulatory reporting, enabling both admins and business users to
   * reconstruct the complete lifecycle of an order.
   *
   * Data access is typically restricted based on authorization level (e.g.,
   * admin access required for sensitive audit data) and may include pagination,
   * filtering by event type, and date ranges. This endpoint is fundamental for
   * legal dispute support, operational analytics, and system integrity
   * monitoring.
   *
   * @param connection
   * @param orderId Unique identifier for the target order whose audit logs are
   *   being retrieved.
   * @param body Audit log search, pagination, and filter criteria for a given
   *   order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderAuditLog.IRequest,
  ): Promise<IPageIAiCommerceOrderAuditLog> {
    try {
      return await patchaiCommerceAdminOrdersOrderIdAuditLogs({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
