import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminOrdersOrderIdStatusHistory } from "../../../../../providers/patchaiCommerceAdminOrdersOrderIdStatusHistory";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminOrdersOrderIdStatusHistoryHistoryId } from "../../../../../providers/getaiCommerceAdminOrdersOrderIdStatusHistoryHistoryId";

import { IPageIAiCommerceOrderStatusHistory } from "../../../../../api/structures/IPageIAiCommerceOrderStatusHistory";
import { IAiCommerceOrderStatusHistory } from "../../../../../api/structures/IAiCommerceOrderStatusHistory";

@Controller("/aiCommerce/admin/orders/:orderId/statusHistory")
export class AicommerceAdminOrdersStatushistoryController {
  /**
   * Paginated search of status history (ai_commerce_order_status_history) for a
   * specific order.
   *
   * This operation provides a paginated, filterable, and searchable list of all
   * status change events for a particular order, drawing from the
   * ai_commerce_order_status_history table. These status transitions include
   * every lifecycle state change for the order, including status,
   * business_status, notes, and the actor responsible.
   *
   * Authorized access is allowed for the buyer (who placed the order), sellers
   * linked to any parts of the order, or admins. The information enables
   * end-users and administrators to trace order evolution for support,
   * compliance, or audit purposes. Pagination is provided to support long-lived
   * orders with many transitions. Sorting by change time and advanced filtering
   * (by status, actor, etc.) are also supported.
   *
   * The API response summarizes the status history events and supports
   * efficient browsing of complex order histories. Errors may occur if the
   * orderId is invalid or the requester lacks sufficient privileges.
   *
   * @param connection
   * @param orderId Order whose status history to list (ai_commerce_orders.id).
   * @param body Request parameters for paginated, filtered status history
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderStatusHistory.IRequest,
  ): Promise<IPageIAiCommerceOrderStatusHistory> {
    try {
      return await patchaiCommerceAdminOrdersOrderIdStatusHistory({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single order status history event (ai_commerce_order_status_history)
   * by orderId and historyId.
   *
   * This operation returns the details of a single status history record for a
   * specific order, identifying both the order (orderId) and history record
   * (historyId). It queries the ai_commerce_order_status_history table to
   * provide a full snapshot of the status change: the actor, time of
   * transition, previous and new status values, workflow context, and any notes
   * attached.
   *
   * Permission to retrieve this data is granted to the buyer (who placed the
   * order), sellers associated with any related sub-orders, or administrators.
   * This operation supports support workflows and regulatory audit
   * requirements, enabling investigation of specific lifecycle transitions in
   * the order's record.
   *
   * If the specified historyId does not exist for the orderId, or the user is
   * not authorized, an error is returned. Related endpoints allow retrieval of
   * full order status history or searching among events.
   *
   * @param connection
   * @param orderId Order whose status history is being accessed
   *   (ai_commerce_orders.id).
   * @param historyId Unique ID of the status history event
   *   (ai_commerce_order_status_history.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":historyId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("historyId")
    historyId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrderStatusHistory> {
    try {
      return await getaiCommerceAdminOrdersOrderIdStatusHistoryHistoryId({
        admin,
        orderId,
        historyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
