import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminOrdersOrderIdAfterSales } from "../../../../../providers/patchaiCommerceAdminOrdersOrderIdAfterSales";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminOrdersOrderIdAfterSalesAfterSalesId } from "../../../../../providers/getaiCommerceAdminOrdersOrderIdAfterSalesAfterSalesId";
import { putaiCommerceAdminOrdersOrderIdAfterSalesAfterSalesId } from "../../../../../providers/putaiCommerceAdminOrdersOrderIdAfterSalesAfterSalesId";
import { deleteaiCommerceAdminOrdersOrderIdAfterSalesAfterSalesId } from "../../../../../providers/deleteaiCommerceAdminOrdersOrderIdAfterSalesAfterSalesId";

import { IPageIAiCommerceOrderAfterSales } from "../../../../../api/structures/IPageIAiCommerceOrderAfterSales";
import { IAiCommerceOrderAfterSales } from "../../../../../api/structures/IAiCommerceOrderAfterSales";

@Controller("/aiCommerce/admin/orders/:orderId/afterSales")
export class AicommerceAdminOrdersAftersalesController {
  /**
   * Search and list after-sales service events (ai_commerce_order_after_sales)
   * linked to an order.
   *
   * This operation fetches a paginated, optionally filtered list of all
   * after-sales service events for a particular order using
   * ai_commerce_order_after_sales. Buyers can monitor return/exchange requests
   * and their progression. Sellers/admins have full visibility for resolving
   * cases, providing support, and ensuring legal compliance.
   *
   * Advanced search fields allow filtering by event type (return, exchange,
   * dispute, warranty, etc.), status, actor, and creation/closing time. The
   * endpoint enables stakeholders to monitor, audit, and act on after-sales
   * events efficiently. Each response contains summary and detail for event
   * state, context note, and temporal fields, and is accessible based on
   * authorization as buyer of the order, seller involved in fulfillment, or
   * platform admin. Audit logging ensures evidence preservation for
   * compliance.
   *
   * @param connection
   * @param orderId Order ID whose after-sales events are being listed
   *   (ai_commerce_orders.id).
   * @param body Paginated and filtered search parameters for after-sales
   *   events.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderAfterSales.IRequest,
  ): Promise<IPageIAiCommerceOrderAfterSales> {
    try {
      return await patchaiCommerceAdminOrdersOrderIdAfterSales({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific after-sales case for an order
   * (ai_commerce_order_after_sales).
   *
   * This endpoint allows authorized users to retrieve the complete details of a
   * single after-sales case (e.g., return, exchange, dispute) for a specific
   * order using both the order ID and after-sales case ID. The operation
   * references the ai_commerce_order_after_sales table and returns all relevant
   * fields, such as order linkage, order item reference, actor, after-sales
   * type, case status, timestamps, and any notes provided.
   *
   * Permission checks ensure that only the order's buyer, the involved seller
   * (when applicable), or a system admin can obtain this information. The
   * operation incorporates logic to return only after-sales cases relevant to
   * the requested order, minimizing leakage of other users' data.
   *
   * Validation includes confirming existence of both the order and after-sales
   * case, as well as correct association between them. Error handling covers
   * not-found, unauthorized access, and association mismatch cases. Successful
   * responses deliver all record fields as defined in the Prisma model.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the parent order.
   * @param afterSalesId Unique identifier (UUID) of the after-sales case.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":afterSalesId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("afterSalesId")
    afterSalesId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrderAfterSales> {
    try {
      return await getaiCommerceAdminOrdersOrderIdAfterSalesAfterSalesId({
        admin,
        orderId,
        afterSalesId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an after-sales case for an order (ai_commerce_order_after_sales).
   *
   * Permits authorized actors—such as the buyer who raised the after-sales
   * request, the responsible seller, or an admin—to submit updates to a
   * specific after-sales record. This endpoint is tied to the
   * ai_commerce_order_after_sales schema and ensures full association integrity
   * between the given order and the after-sales case.
   *
   * Fields like status, note, type, or order item reference may be updated per
   * business rules. Permission logic enforces that only permitted workflow
   * actions (by role and status) are accepted. Full audit/trace of all updates
   * is maintained for compliance. The operation returns the record with updated
   * data post-modification.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order containing the
   *   after-sales case.
   * @param afterSalesId Unique identifier (UUID) of the after-sales case to be
   *   updated.
   * @param body Fields to update for the after-sales case, using
   *   IAiCommerceOrderAfterSales.IUpdate DTO structure.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":afterSalesId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("afterSalesId")
    afterSalesId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrderAfterSales.IUpdate,
  ): Promise<IAiCommerceOrderAfterSales> {
    try {
      return await putaiCommerceAdminOrdersOrderIdAfterSalesAfterSalesId({
        admin,
        orderId,
        afterSalesId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete an after-sales case for an order (ai_commerce_order_after_sales,
   * hard delete).
   *
   * Enables authorized users (normally admin or owners under specific business
   * rules) to permanently remove an after-sales case record for an order. Based
   * on the ai_commerce_order_after_sales schema, and reflecting that there is
   * no soft-delete column, this operation executes a hard delete.
   *
   * Before removing, the function checks association between the order and
   * after-sales record, verifies role/ownership or admin privilege, and ensures
   * no policy or compliance prohibits deletion (such as being within audit
   * window or pending workflow). Upon irrevocable removal, no response body is
   * returned.
   *
   * Error handling manages cases of non-existence, unauthorized attempt, or
   * violations of system rules.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order containing the
   *   after-sales record.
   * @param afterSalesId Unique identifier (UUID) of the after-sales record to
   *   be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":afterSalesId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("afterSalesId")
    afterSalesId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminOrdersOrderIdAfterSalesAfterSalesId({
        admin,
        orderId,
        afterSalesId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
