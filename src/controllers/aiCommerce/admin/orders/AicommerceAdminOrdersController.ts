import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminOrders } from "../../../../providers/postaiCommerceAdminOrders";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminOrders } from "../../../../providers/patchaiCommerceAdminOrders";
import { getaiCommerceAdminOrdersOrderId } from "../../../../providers/getaiCommerceAdminOrdersOrderId";
import { putaiCommerceAdminOrdersOrderId } from "../../../../providers/putaiCommerceAdminOrdersOrderId";
import { deleteaiCommerceAdminOrdersOrderId } from "../../../../providers/deleteaiCommerceAdminOrdersOrderId";

import { IAiCommerceOrder } from "../../../../api/structures/IAiCommerceOrder";
import { IPageIAiCommerceOrder } from "../../../../api/structures/IPageIAiCommerceOrder";

@Controller("/aiCommerce/admin/orders")
export class AicommerceAdminOrdersController {
  /**
   * Place (create) a new order through checkout (ai_commerce_orders).
   *
   * Create a new order with all provided details and line items. This operation
   * is invoked at checkout, processing the purchase request, generating a
   * global and channel order code, assigning items to sellers, and locking in
   * price, currency, and address snapshot in ai_commerce_orders.
   *
   * Integrated checks enforce business requirements, such as item and variant
   * availability (inventory), compliance with purchase policy, payment amount
   * calculation, and address/data snapshotting. After success, the operation
   * returns the created order as per the defined schema, with all linked data.
   *
   * Admin-level permissions are required, and the entire creation process is
   * strictly audited. Error handling covers invalid cart, insufficient stock,
   * expired address, or payment failure. This is the canonical endpoint for
   * order placement and lifecycle initiation.
   *
   * @param connection
   * @param body Order creation request including buyer, channel, item detail,
   *   payment, and address snapshot references.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceOrder.ICreate,
  ): Promise<IAiCommerceOrder> {
    try {
      return await postaiCommerceAdminOrders({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Advanced search and retrieval of a filtered, paginated list of orders
   * (ai_commerce_orders).
   *
   * Retrieve a filtered and paginated list of orders from the system. This
   * operation provides advanced search capabilities to locate orders based on
   * order code, status, buyer information, channel, payment status, amount,
   * period, and other attributes as defined in the ai_commerce_orders table.
   *
   * Comprehensive pagination is supported, enabling configurable page sizes and
   * sorting by creation date, status, channel, or amount in either ascending or
   * descending order. This endpoint is used by admins and authorized staff to
   * monitor, audit, or act upon orders at every stage in their business
   * lifecycle.
   *
   * Security considerations include strict role-based access controls to limit
   * visibility and manipulation of order data to authorized personnel only,
   * with all search and retrieval activities needing to be recorded for
   * compliance and audit.
   *
   * The operation works against the ai_commerce_orders schema and includes all
   * available order fields and relations necessary for operational transparency
   * and decision-making.
   *
   * @param connection
   * @param body Search and filter criteria, pagination, and sorting parameters
   *   for retrieving orders.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceOrder.IRequest,
  ): Promise<IPageIAiCommerceOrder> {
    try {
      return await patchaiCommerceAdminOrders({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details on a single order (ai_commerce_orders) by orderId.
   *
   * Get all detailed information about a specific order identified by an
   * orderId. This operation is essential for order management and customer
   * support, enabling in-depth inspection of the order's lifecycle, status,
   * payment, delivery, and history.
   *
   * Permission to access this endpoint is restricted to admins or authorized
   * staff, as the operation may expose sensitive buyer and transaction details.
   * Proper logging and compliance monitoring are enforced for every request.
   *
   * Returned data is fully aligned with the ai_commerce_orders schema,
   * populating all available relations, including items, status history,
   * payments, refunds, fulfillments, and compliance audit entries for the
   * specified order.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceOrder> {
    try {
      return await getaiCommerceAdminOrdersOrderId({
        admin,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing order (ai_commerce_orders) by orderId.
   *
   * Update an existing order by its unique orderId, making permitted changes to
   * address, business status, or workflow fields as allowed by the order status
   * and the ai_commerce_orders schema. This endpoint is essential for
   * compliance actions (e.g., after-sales acceptance, admin status change,
   * address correction before fulfillment).
   *
   * This endpoint is secured for admin use, with all transition validation
   * performed according to the latest state of the order, and with a full audit
   * trail. Integration with related tables ensures business logic is enforced
   * across all referenced data (items, payments, fulfillment, snapshots).
   * Rejected updates and error cases, such as addressing immutable fields after
   * fulfillment or compliance violation, will provide actionable feedback for
   * resolution.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order to update.
   * @param body Order update request (only allowed fields per status/logic)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceOrder.IUpdate,
  ): Promise<IAiCommerceOrder> {
    try {
      return await putaiCommerceAdminOrdersOrderId({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (mark deleted) an order (ai_commerce_orders) by orderId.
   *
   * Mark an order as deleted in the system by setting the deleted_at field
   * using the orderId, while retaining data for compliance, audit, and
   * historical review. This is a soft delete operation as defined by the
   * ai_commerce_orders schema, and it does not remove the order from storage
   * but marks it as logically deleted.
   *
   * This operation is permissioned for admin roles, with all deletion requests
   * being recorded in compliance/audit logs, including reason, actor, and
   * timing. The operation will return a confirmation upon successful soft
   * deletion. Orders involved in payment, after-sales, or dispute flows cannot
   * be physically removed but will be marked deleted for access/recovery
   * workflows.
   *
   * @param connection
   * @param orderId Unique identifier (UUID) of the order to mark as deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminOrdersOrderId({
        admin,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
