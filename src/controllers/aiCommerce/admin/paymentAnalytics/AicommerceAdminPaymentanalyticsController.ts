import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminPaymentAnalytics } from "../../../../providers/patchaiCommerceAdminPaymentAnalytics";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminPaymentAnalyticsPaymentAnalyticsId } from "../../../../providers/getaiCommerceAdminPaymentAnalyticsPaymentAnalyticsId";

import { IPageIAiCommercePaymentAnalytics } from "../../../../api/structures/IPageIAiCommercePaymentAnalytics";
import { IAiCommercePaymentAnalytics } from "../../../../api/structures/IAiCommercePaymentAnalytics";

@Controller("/aiCommerce/admin/paymentAnalytics")
export class AicommerceAdminPaymentanalyticsController {
  /**
   * Retrieve paginated summary analytics of payment/coupon/mileage
   * transactional activity from ai_commerce_payment_analytics.
   *
   * This endpoint delivers summary-level business analytics on payment
   * transactions, coupon use, mileage expiry/redemption, deposit usage, and
   * refund metrics over user-defined time windows (period_start/period_end),
   * filtered by channel, payment method, or gateway. Results support business
   * dashboards, financial analytics, and regulatory compliance reporting, and
   * are only accessible by authorized admins or finance roles.
   *
   * The ai_commerce_payment_analytics table is strictly read-only, populated
   * via scheduled ETL jobs or platform events. Outputs are suitable for report
   * generation, management KPIs, and cross-channel comparison. Extensive
   * pagination and filtering ensure scalable business intelligence use.
   *
   * @param connection
   * @param body Criteria and time range parameters for finding and filtering
   *   payment analytics summary records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePaymentAnalytics.IRequest,
  ): Promise<IPageIAiCommercePaymentAnalytics> {
    try {
      return await patchaiCommerceAdminPaymentAnalytics({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific payment analytics record by ID from
   * ai_commerce_payment_analytics table.
   *
   * Retrieve full details of a payment analytics record by its unique
   * identifier. This endpoint is intended for use by administrators to access
   * aggregated or denormalized analytics about payments for a specific period,
   * channel, payment method, and gateway.
   *
   * Only administrators can access this endpoint, and the response contains
   * sensitive business information about transaction volume, revenues, refunds,
   * coupon/redemption rates, and system usage. The request parameter is the
   * unique UUID of the payment analytics record.
   *
   * This API references the ai_commerce_payment_analytics table and is
   * restricted to admin-level roles for compliance and confidentiality. If the
   * record does not exist, an error is returned. Related endpoints include list
   * retrieval and analytics dashboards.
   *
   * @param connection
   * @param paymentAnalyticsId Unique identifier for the payment analytics
   *   record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentAnalyticsId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentAnalyticsId")
    paymentAnalyticsId: string & tags.Format<"uuid">,
  ): Promise<IAiCommercePaymentAnalytics> {
    try {
      return await getaiCommerceAdminPaymentAnalyticsPaymentAnalyticsId({
        admin,
        paymentAnalyticsId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
