import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminCategoryTemplates } from "../../../../providers/postaiCommerceAdminCategoryTemplates";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminCategoryTemplates } from "../../../../providers/patchaiCommerceAdminCategoryTemplates";
import { getaiCommerceAdminCategoryTemplatesTemplateId } from "../../../../providers/getaiCommerceAdminCategoryTemplatesTemplateId";
import { putaiCommerceAdminCategoryTemplatesTemplateId } from "../../../../providers/putaiCommerceAdminCategoryTemplatesTemplateId";
import { deleteaiCommerceAdminCategoryTemplatesTemplateId } from "../../../../providers/deleteaiCommerceAdminCategoryTemplatesTemplateId";

import { IAiCommerceCategoryTemplate } from "../../../../api/structures/IAiCommerceCategoryTemplate";
import { IPageIAiCommerceCategoryTemplate } from "../../../../api/structures/IPageIAiCommerceCategoryTemplate";

@Controller("/aiCommerce/admin/categoryTemplates")
export class AicommerceAdminCategorytemplatesController {
  /**
   * Create a new category template in ai_commerce_category_templates.
   *
   * Creates and registers a new reusable category template in
   * ai_commerce_category_templates. The operation expects a payload containing
   * all required template metadata and data structure (typically including
   * name, code, serialized category tree, is_default flag, and business
   * status).
   *
   * Strict validation is applied for template naming, code uniqueness,
   * serialized structure, and business rule compliance. On success, a new
   * template entry is created with all audit fields populated for
   * evidence-preserving compliance.
   *
   * This endpoint is restricted to administrative users due to its impact on
   * global category setup. It returns the complete created template entity,
   * including all fields for immediate use or further editing.
   *
   * If the creation request attempts to violate unique code constraints or
   * submit malformed template data, the server returns an error message with
   * correction guidance.
   *
   * @param connection
   * @param body The creation data for a new category template.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCategoryTemplate.ICreate,
  ): Promise<IAiCommerceCategoryTemplate> {
    try {
      return await postaiCommerceAdminCategoryTemplates({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search category templates (paginated, filterable) from
   * ai_commerce_category_templates.
   *
   * Retrieves a paginated and filterable list of all category templates in the
   * ai_commerce_category_templates table. Administrators can search by name,
   * code, business status, or creation/update timestamps. This enhances
   * large-scale management of reusable category hierarchies and accelerates
   * onboarding of new channels or merchants.
   *
   * Security is strictly enforcedâ€”only admins can access this endpoint,
   * ensuring that only privileged users can see, review, or repurpose
   * organization templates across projects. Audit logs are maintained for all
   * accesses of this API for compliance review.
   *
   * Filtering supports advanced use-cases including partial name/code match,
   * business status selection, and sorting by created/updated times, designed
   * to integrate seamlessly with the CMS or backoffice UI.
   *
   * Error handling returns clear messages for invalid pagination, unsupported
   * search criteria, or sorting constraints. The response structure includes
   * pagination metadata and a summary of template state for each entry.
   *
   * @param connection
   * @param body Criteria for searching, filtering, and paginating category
   *   templates.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCategoryTemplate.IRequest,
  ): Promise<IPageIAiCommerceCategoryTemplate.ISummary> {
    try {
      return await patchaiCommerceAdminCategoryTemplates({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific category template from
   * ai_commerce_category_templates.
   *
   * Fetches the complete detail and configuration data for a category template
   * referenced by templateId, including business rules, JSON-encoded
   * hierarchical structure, approval status, and timestamps from
   * ai_commerce_category_templates.
   *
   * This endpoint enables administrator roles to view and verify a category
   * template before applying, editing, or deleting, supporting business rule
   * enforcement, change review, and audit workflows for category organization.
   *
   * The API is only accessible by admin users; authorization is enforced to
   * prevent exposure of internal configuration logic. Full error handling is
   * provided for invalid or non-existent IDs, and audit logs are generated for
   * all access runs. This is typically paired with update or erase operations
   * in API workflows.
   *
   * @param connection
   * @param templateId The UUID of the category template to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":templateId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("templateId")
    templateId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCategoryTemplate> {
    try {
      return await getaiCommerceAdminCategoryTemplatesTemplateId({
        admin,
        templateId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a category template by templateId in ai_commerce_category_templates.
   *
   * Modifies an existing category template in ai_commerce_category_templates,
   * identified by the templateId path parameter. The request body contains the
   * update data for the template, such as changes to name, code, tree
   * structure, or status fields, in compliance with business rules and schema
   * constraints.
   *
   * The operation enforces strict admin-only access and is designed for
   * multi-stage review and approval workflows. All modifications update the
   * updated_at field and retain the audit trail, supporting rollback and legal
   * compliance.
   *
   * If the update request would result in a code conflict, invalid template
   * tree, or unsupported status/value, the operation fails with descriptive
   * error messages. This endpoint is typically paired with get (detail) or
   * erase (delete) ops in platform settings UIs.
   *
   * @param connection
   * @param templateId The UUID of the category template to update.
   * @param body The update information for the category template.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":templateId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("templateId")
    templateId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCategoryTemplate.IUpdate,
  ): Promise<IAiCommerceCategoryTemplate> {
    try {
      return await putaiCommerceAdminCategoryTemplatesTemplateId({
        admin,
        templateId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a category template by templateId
   * (ai_commerce_category_templates).
   *
   * Soft deletes a category template specified by templateId from the
   * ai_commerce_category_templates table. This logical removal marks the
   * template as deleted via the deleted_at column, preserving legal evidence,
   * supporting rollback or audit, and maintaining referential integrity across
   * channel/category configuration.
   *
   * Authorization is strictly admin-only for deletion, with audit logs enforced
   * for all delete operations. Attempting to delete a template referenced by
   * active channels or with binding relationships will return an error to
   * prevent orphaned configurations.
   *
   * Administrators are encouraged to use the get detail operation prior to
   * deletion to confirm status and impact. Successful requests receive a
   * confirmation response, while failure cases return a structured error.
   *
   * @param connection
   * @param templateId UUID of the category template to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":templateId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("templateId")
    templateId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminCategoryTemplatesTemplateId({
        admin,
        templateId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
