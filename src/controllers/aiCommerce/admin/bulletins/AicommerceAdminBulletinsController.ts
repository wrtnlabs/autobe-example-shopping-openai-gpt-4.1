import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminBulletins } from "../../../../providers/postaiCommerceAdminBulletins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminBulletins } from "../../../../providers/patchaiCommerceAdminBulletins";
import { putaiCommerceAdminBulletinsBulletinId } from "../../../../providers/putaiCommerceAdminBulletinsBulletinId";
import { deleteaiCommerceAdminBulletinsBulletinId } from "../../../../providers/deleteaiCommerceAdminBulletinsBulletinId";

import { IAiCommerceBulletin } from "../../../../api/structures/IAiCommerceBulletin";
import { IPageIAiCommerceBulletin } from "../../../../api/structures/IPageIAiCommerceBulletin";

@Controller("/aiCommerce/admin/bulletins")
export class AicommerceAdminBulletinsController {
  /**
   * Create a new bulletin (ai_commerce_bulletins) with full required fields.
   *
   * Create a new platform bulletin or announcement. Only admins can use this
   * endpoint to post system notices, with all required business fields such as
   * title, full body content, publication status, and visibility scope.
   *
   * The request body follows the IAiCommerceBulletin.ICreate schema and is
   * validated for required fields including localized title, description/body,
   * and associated publication parameters. Security and audit logging are
   * performed automatically on create.
   *
   * On success, the response returns the created bulletin record. Related
   * endpoints include update and index.
   *
   * @param connection
   * @param body Bulletin creation data including title, body, status, and
   *   visibility controls.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceBulletin.ICreate,
  ): Promise<IAiCommerceBulletin> {
    try {
      return await postaiCommerceAdminBulletins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Advanced, paginated search/filter for ai_commerce_bulletins with sorting
   * and filtering.
   *
   * Search, filter, and retrieve a paginated list of bulletins (system notices
   * or announcements), with advanced search capabilities including keyword
   * full-text, creation/update date range, status, and author filtering.
   * Results are sorted as requested and can be paginated for scalability.
   *
   * Only admins may access the full set of bulletins with all moderation
   * status. Buyers may see only published, public bulletins. Response contains
   * summary information for listing purposes.
   *
   * This endpoint corresponds to the ai_commerce_bulletins table, referencing
   * fields for filtering, sorting, and secure pagination. See documentation for
   * parameter examples.
   *
   * @param connection
   * @param body Search and filter parameters for bulletin retrieval, including
   *   pagination, text search, and status filter.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceBulletin.IRequest,
  ): Promise<IPageIAiCommerceBulletin.ISummary> {
    try {
      return await patchaiCommerceAdminBulletins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing bulletin (ai_commerce_bulletins) by ID as an
   * administrator.
   *
   * Update an existing bulletin's details, including title, content,
   * visibility, and publication status. This endpoint is for administrator use
   * only; regular users may not update bulletins.
   *
   * The bulletinId parameter identifies the record to change, and the request
   * body includes fields to be updated. Changes are logged for compliance, and
   * the endpoint references the ai_commerce_bulletins table.
   *
   * On success, returns the new state of the updated bulletin. Related
   * endpoints include get, create, and delete.
   *
   * @param connection
   * @param bulletinId Unique identifier of the bulletin to update.
   * @param body Information to update on the specified bulletin, such as title,
   *   body, visibility, or status changes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":bulletinId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("bulletinId")
    bulletinId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceBulletin.IUpdate,
  ): Promise<IAiCommerceBulletin> {
    try {
      return await putaiCommerceAdminBulletinsBulletinId({
        admin,
        bulletinId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase a bulletin by ID (soft delete in ai_commerce_bulletins for
   * compliance).
   *
   * Erase the specified bulletin (announcement/notice) identified by
   * bulletinId. For compliance with the ai_commerce_bulletins schema, deletion
   * is implemented as a soft delete, marking the bulletin as deleted without
   * physical removal to retain for audit/evidence purposes.
   *
   * Only administrators are authorized to erase bulletins. The operation
   * records audit trails and timestamps in the deleted_at field, maintaining
   * legal and business traceability. Related endpoints include update and at
   * (get by ID).
   *
   * @param connection
   * @param bulletinId The unique identifier of the bulletin to erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":bulletinId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("bulletinId")
    bulletinId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminBulletinsBulletinId({
        admin,
        bulletinId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
