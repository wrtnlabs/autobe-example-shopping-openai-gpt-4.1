import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminCartTemplates } from "../../../../providers/postaiCommerceAdminCartTemplates";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminCartTemplates } from "../../../../providers/patchaiCommerceAdminCartTemplates";
import { getaiCommerceAdminCartTemplatesCartTemplateId } from "../../../../providers/getaiCommerceAdminCartTemplatesCartTemplateId";
import { putaiCommerceAdminCartTemplatesCartTemplateId } from "../../../../providers/putaiCommerceAdminCartTemplatesCartTemplateId";
import { deleteaiCommerceAdminCartTemplatesCartTemplateId } from "../../../../providers/deleteaiCommerceAdminCartTemplatesCartTemplateId";

import { IAiCommerceCartTemplate } from "../../../../api/structures/IAiCommerceCartTemplate";
import { IPageIAiCommerceCartTemplate } from "../../../../api/structures/IPageIAiCommerceCartTemplate";

@Controller("/aiCommerce/admin/cartTemplates")
export class AicommerceAdminCarttemplatesController {
  /**
   * Create a new cart template in ai_commerce_cart_templates.
   *
   * Registers a new cart template for a seller or administrator in
   * ai_commerce_cart_templates. All fields validated for requiredness,
   * uniqueness, and role constraints. Buyers may not use this endpoint. Success
   * returns the complete new template as created.
   *
   * @param connection
   * @param body Request body for cart template creation
   *   (IAiCommerceCartTemplate.ICreate), defining all template and association
   *   fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCartTemplate.ICreate,
  ): Promise<IAiCommerceCartTemplate> {
    try {
      return await postaiCommerceAdminCartTemplates({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate ai_commerce_cart_templates (cart templates).
   *
   * Searches, filters, and paginates cart templates using criteria like name,
   * creator, store, and status from ai_commerce_cart_templates. Sellers only
   * see their own; admins have global audit access. Supports partial matches
   * and sort order. Pagination metadata in response. Intended for template
   * management, campaign support, or troubleshooting rollouts.
   *
   * @param connection
   * @param body Request body with filters/pagination for searching cart
   *   templates, per IAiCommerceCartTemplate.IRequest.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCartTemplate.IRequest,
  ): Promise<IPageIAiCommerceCartTemplate.ISummary> {
    try {
      return await patchaiCommerceAdminCartTemplates({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed cart template by cartTemplateId from
   * ai_commerce_cart_templates.
   *
   * Returns all properties of the ai_commerce_cart_templates row for the
   * cartTemplateId. If a seller, they must own the template; admins can
   * retrieve any. Used for review, configuration, edit flows. Returns error on
   * not-found or unauthorized access.
   *
   * @param connection
   * @param cartTemplateId Unique identifier of the cart template to fetch, as
   *   UUID.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartTemplateId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartTemplateId")
    cartTemplateId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCartTemplate> {
    try {
      return await getaiCommerceAdminCartTemplatesCartTemplateId({
        admin,
        cartTemplateId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update properties of an existing cart template by cartTemplateId.
   *
   * Permits the updater (admin or owning seller) to change template properties
   * (name, description, config, assignment, status) for an entity in
   * ai_commerce_cart_templates. Handles audit, naming, uniqueness, and
   * ownership per business rules. Denies requests lacking permission or
   * validity.
   *
   * @param connection
   * @param cartTemplateId Unique identifier for cart template update, as UUID.
   * @param body Fields to update on the target template
   *   (IAiCommerceCartTemplate.IUpdate).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartTemplateId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartTemplateId")
    cartTemplateId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartTemplate.IUpdate,
  ): Promise<IAiCommerceCartTemplate> {
    try {
      return await putaiCommerceAdminCartTemplatesCartTemplateId({
        admin,
        cartTemplateId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a specific cart template from
   * ai_commerce_cart_templates.
   *
   * This operation enables administrators or sellers, depending on template
   * ownership, to permanently delete a cart template identified by its unique
   * cartTemplateId. The ai_commerce_cart_templates table in the Prisma schema
   * manages reusable cart configurations for promotion, presets, or rapid
   * purchase flows.
   *
   * Deletion is only permitted for templates not actively in use by ongoing
   * campaigns or carts. The operation checks for dependencies prior to removal,
   * and an audit trail is recorded detailing who performed the erase action,
   * when, and for what reason. This operation is irreversible and must confirm
   * that the template is not needed by other operations or schedules.
   *
   * Error handling includes rejecting deletion requests for templates that are
   * linked to active user carts, reporting a clear error code and message.
   * Successful erase operations log the state of the template prior to removal
   * for compliance and forensics. Only users with sufficient administrative or
   * template ownership privileges are allowed to perform this action, in line
   * with the permission model enforced by the backend's business logic.
   *
   * @param connection
   * @param cartTemplateId Unique identifier of the cart template to permanently
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartTemplateId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartTemplateId")
    cartTemplateId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminCartTemplatesCartTemplateId({
        admin,
        cartTemplateId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
