import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminSellerProfiles } from "../../../../providers/patchaiCommerceAdminSellerProfiles";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminSellerProfilesSellerProfileId } from "../../../../providers/getaiCommerceAdminSellerProfilesSellerProfileId";
import { putaiCommerceAdminSellerProfilesSellerProfileId } from "../../../../providers/putaiCommerceAdminSellerProfilesSellerProfileId";
import { deleteaiCommerceAdminSellerProfilesSellerProfileId } from "../../../../providers/deleteaiCommerceAdminSellerProfilesSellerProfileId";

import { IPageIAiCommerceSellerProfiles } from "../../../../api/structures/IPageIAiCommerceSellerProfiles";
import { IAiCommerceSellerProfiles } from "../../../../api/structures/IAiCommerceSellerProfiles";

@Controller("/aiCommerce/admin/sellerProfiles")
export class AicommerceAdminSellerprofilesController {
  /**
   * Paginated search of seller profiles for admin-level moderation and
   * analytics.
   *
   * Enables platform administrators to search and browse seller profiles from
   * ai_commerce_seller_profiles table. The operation supports advanced query
   * parameters for filtering by display name, approval status, and other core
   * profile attributes. Returns paginated data for high-volume moderation and
   * compliance operations.
   *
   * @param connection
   * @param body Filtering and pagination options for listing seller profiles.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSellerProfiles.IRequest,
  ): Promise<IPageIAiCommerceSellerProfiles> {
    try {
      return await patchaiCommerceAdminSellerProfiles({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin retrieves a complete seller profile by ID for audit or moderation.
   *
   * This operation allows a platform administrator to retrieve all details for
   * a single seller profile, identified by its unique ID. All business,
   * branding, compliance, status, and audit fields as defined in the
   * ai_commerce_seller_profiles schema are retrieved and returned in the
   * response. This operation is restricted to admin-level roles, as seller
   * profile data often includes sensitive business/verification details.
   *
   * If a profile with the supplied ID does not exist, or if the caller is not
   * an authorized admin, the operation returns an error with a clear audit
   * trail.
   *
   * @param connection
   * @param sellerProfileId Unique identifier of the seller profile to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerProfileId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerProfileId")
    sellerProfileId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSellerProfiles> {
    try {
      return await getaiCommerceAdminSellerProfilesSellerProfileId({
        admin,
        sellerProfileId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing seller profile (ai_commerce_seller_profiles table) for
   * the specified sellerProfileId.
   *
   * This API endpoint allows a seller (or platform admin) to update their
   * profile information, such as display_name, profile_metadata,
   * approval_status, and suspension_reason if needed. All field changes are
   * subject to validation according to the database schema constraints,
   * ensuring required fields and uniqueness are preserved.
   *
   * Security and permission checks require that the requesting user be the
   * profile owner (seller) or an admin operator, with actions fully audit
   * logged. Business rules may enforce further restrictions based on approval
   * status or suspension state.
   *
   * On success, the full updated seller profile is returned. If the profile is
   * not found, or if the user is unauthorized or submits invalid data, the
   * system returns appropriate business or validation errors. The update is
   * strictly recorded for audit and compliance purposes.
   *
   * @param connection
   * @param sellerProfileId Unique identifier for the seller profile being
   *   updated.
   * @param body Payload of fields to update in the seller profile, according to
   *   the DB schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sellerProfileId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerProfileId")
    sellerProfileId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSellerProfiles.IUpdate,
  ): Promise<IAiCommerceSellerProfiles> {
    try {
      return await putaiCommerceAdminSellerProfilesSellerProfileId({
        admin,
        sellerProfileId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete (hard remove) a seller profile for the specified
   * sellerProfileId.
   *
   * This API operation performs a hard deletion of a seller profile from the
   * ai_commerce_seller_profiles table, identified by sellerProfileId. No soft
   * delete exists for this entity, so deletion is irreversible and data is
   * fully removed from the database. This API can only be used by the owning
   * seller or an administrator following explicit business rules and audit
   * protocols.
   *
   * Before deletion, the system checks for related dependencies to prevent
   * referential integrity violations (e.g., linked stores, analytics).
   * Authorization enforcement is strict and every delete operation is audit
   * logged for regulatory and legal compliance.
   *
   * If the profile exists and is deletable, the operation completes without
   * returning a body. Errors are raised if the profile is not found, the user
   * is unauthorized, or dependent references prevent deletion. This endpoint is
   * not used for soft-deletion scenarios.
   *
   * @param connection
   * @param sellerProfileId Unique identifier for the seller profile to delete
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sellerProfileId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerProfileId")
    sellerProfileId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminSellerProfilesSellerProfileId({
        admin,
        sellerProfileId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
