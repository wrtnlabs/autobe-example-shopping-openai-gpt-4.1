import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminMileageTransactions } from "../../../../providers/postaiCommerceAdminMileageTransactions";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminMileageTransactions } from "../../../../providers/patchaiCommerceAdminMileageTransactions";
import { getaiCommerceAdminMileageTransactionsMileageTransactionId } from "../../../../providers/getaiCommerceAdminMileageTransactionsMileageTransactionId";
import { putaiCommerceAdminMileageTransactionsMileageTransactionId } from "../../../../providers/putaiCommerceAdminMileageTransactionsMileageTransactionId";
import { deleteaiCommerceAdminMileageTransactionsMileageTransactionId } from "../../../../providers/deleteaiCommerceAdminMileageTransactionsMileageTransactionId";

import { IAiCommerceMileageTransaction } from "../../../../api/structures/IAiCommerceMileageTransaction";
import { IPageIAiCommerceMileageTransaction } from "../../../../api/structures/IPageIAiCommerceMileageTransaction";

@Controller("/aiCommerce/admin/mileageTransactions")
export class AicommerceAdminMileagetransactionsController {
  /**
   * Create a new mileage transaction record (accrual, redemption, adjustment,
   * or expiration).
   *
   * This operation enables authorized actors (typically admin or
   * compliance/business processes) to create a new mileage transaction entry
   * for a user’s account. Accepts all schema-required fields through the
   * IAiCommerceMileageTransaction.ICreate DTO, including mileage_account_id,
   * type, amount, status, reference_entity, and timestamps.
   *
   * Transaction creation is subject to business rule validations: only
   * appropriate types (accrual, redemption, adjustment, expiration) are
   * accepted, and balance changes are computed accordingly. The endpoint is
   * strictly audited to prevent abuse or unauthorized changes to mileages.
   *
   * Typically, user self-service is limited, and most creation is via business
   * logic triggers, admin, or reward campaign logic. The created transaction is
   * linked to audit, ledger, and compliance reporting.
   *
   * @param connection
   * @param body New mileage transaction details including account, type,
   *   amount, and event context.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceMileageTransaction.ICreate,
  ): Promise<IAiCommerceMileageTransaction> {
    try {
      return await postaiCommerceAdminMileageTransactions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search mileage transactions with filtering and pagination.
   *
   * This operation searches and returns a paginated list of mileage
   * transactions, including accrual, redemption, adjustment, and expiration
   * events. It leverages parameters specified in
   * IAiCommerceMileageTransaction.IRequest to filter by type, date,
   * user/account, status, and reference entity as appropriate.
   *
   * Designed for both user self-audit and administrative/business use, this
   * operation supports compliance and account analytics use cases. Role-based
   * filtering is applied to ensure that users only see their own transactions,
   * while admins may filter globally or per user.
   *
   * Results are tailored for performance and summary, and detailed event or
   * audit data may be included based on role and business rule logic. Standard
   * pagination and sorting fields are supported.
   *
   * @param connection
   * @param body Query criteria for mileage transactions, including filtering
   *   and pagination parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceMileageTransaction.IRequest,
  ): Promise<IPageIAiCommerceMileageTransaction> {
    try {
      return await patchaiCommerceAdminMileageTransactions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details of a mileage transaction by unique ID.
   *
   * This operation fetches the details of an individual mileage transaction,
   * such as accrual, usage/redemption, adjustment, or expiration events for
   * audit or user self-service purposes. Data fields include transaction type
   * (accrual, redemption, adjustment), amount, status, date, reference entity,
   * and audit metadata as stored in the ai_commerce_mileage_transactions
   * table.
   *
   * Access is limited to the transaction owner (buyer or seller) and
   * administrator roles, with privacy and compliance strictly enforced. All
   * query actions are logged for security and auditability. Results include all
   * business-critical metadata and fields established in the database schema.
   *
   * @param connection
   * @param mileageTransactionId Unique identifier for the mileage transaction
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mileageTransactionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageTransactionId")
    mileageTransactionId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceMileageTransaction> {
    try {
      return await getaiCommerceAdminMileageTransactionsMileageTransactionId({
        admin,
        mileageTransactionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update/correct metadata or status of a specific mileage transaction event.
   *
   * This operation updates an existing mileage transaction entry identified by
   * mileageTransactionId. Update actions are highly restricted—used solely for
   * correction of erroneous metadata, operational status, or compliance
   * justification. It does not allow direct modification of amounts for
   * finalized transactions except by official audit/correction.
   *
   * Accepts request body formatted as IAiCommerceMileageTransaction.IUpdate,
   * supporting changes only to allowed schema fields. Attempts to update
   * immutable or business-critical fields will result in errors.
   *
   * All changes must be audit-logged, including actor, timestamp, before/after
   * state, and rationale for correction. Only administrators and
   * compliance-authorized actors may use this endpoint, and its use may require
   * justification in practice.
   *
   * @param connection
   * @param mileageTransactionId Unique identifier for the mileage transaction
   *   to update.
   * @param body Fields for updating mileage transaction metadata, status, or
   *   compliance reason.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":mileageTransactionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageTransactionId")
    mileageTransactionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceMileageTransaction.IUpdate,
  ): Promise<IAiCommerceMileageTransaction> {
    try {
      return await putaiCommerceAdminMileageTransactionsMileageTransactionId({
        admin,
        mileageTransactionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific mileage transaction (admin only) from
   * ai_commerce_mileage_transactions.
   *
   * This operation deletes a specific mileage transaction from the
   * 'ai_commerce_mileage_transactions' table, identified by the
   * mileageTransactionId parameter.
   *
   * Mileage transactions include all events that increase or decrease a user's
   * mileage/points balance (such as accrual, redemption, adjustment, or
   * expiration) and are critical for loyalty and compliance tracking. Only
   * authorized admin personnel may erase a transaction. Erasure should be used
   * strictly for compliance, audit correction, or fraud remediation; all
   * actions are audit-logged.
   *
   * The soft delete field 'deleted_at' is set, and the record is removed from
   * normal querying contexts, but full recovery and audit evidence are
   * preserved in the backend. Non-admin attempts or missing transactionId will
   * result in access denied or not found errors.
   *
   * @param connection
   * @param mileageTransactionId The unique identifier of the mileage
   *   transaction to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":mileageTransactionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageTransactionId")
    mileageTransactionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminMileageTransactionsMileageTransactionId(
        {
          admin,
          mileageTransactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
