import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminPayments } from "../../../../providers/postaiCommerceAdminPayments";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminPayments } from "../../../../providers/patchaiCommerceAdminPayments";
import { getaiCommerceAdminPaymentsPaymentId } from "../../../../providers/getaiCommerceAdminPaymentsPaymentId";
import { putaiCommerceAdminPaymentsPaymentId } from "../../../../providers/putaiCommerceAdminPaymentsPaymentId";
import { deleteaiCommerceAdminPaymentsPaymentId } from "../../../../providers/deleteaiCommerceAdminPaymentsPaymentId";

import { IAiCommercePayment } from "../../../../api/structures/IAiCommercePayment";
import { IPageIAiCommercePayment } from "../../../../api/structures/IPageIAiCommercePayment";

@Controller("/aiCommerce/admin/payments")
export class AicommerceAdminPaymentsController {
  /**
   * Create a new payment record (pending or issued) in the ai_commerce_payments
   * subsystem for transaction tracking and settlement.
   *
   * This API allows for the creation of a new payment entry in the
   * ai_commerce_payments table. All business logic regarding uniqueness of the
   * payment reference, initial status, amount, currency, and linkage to orders
   * or users is handled according to the schema definitions.
   *
   * Upon POST, the system logs the payment with a unique payment_reference,
   * issued_at timestamp, and status (e.g., 'pending'), capturing all essential
   * data for future confirmation, refund, and compliance audit. The creation of
   * a payment is a trigger for further processing, including confirmation by
   * payment gateways, potential fraud checks, and linking to downstream order
   * fulfillment.
   *
   * Access to this endpoint is restricted (typically admin or system users) to
   * prevent unauthorized payment entries. Validation ensures compliance with
   * transaction recording standards, and errors returned for duplication,
   * referencing inexistent orders, or invalid amounts. Integrates with the
   * broader financial subsystem for complete integrity in transaction
   * processing.
   *
   * @param connection
   * @param body Details and metadata for the new payment to be created,
   *   including reference, amount, currency, status, and related order info.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePayment.ICreate,
  ): Promise<IAiCommercePayment> {
    try {
      return await postaiCommerceAdminPayments({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search payment records with advanced filtering and pagination from
   * the ai_commerce_payments table.
   *
   * This API retrieves a paginated and filterable list of payments recorded in
   * the ai_commerce_payments table. Each payment entry includes details such as
   * payment status, amount, currency, associated order/payment reference,
   * method, issued and confirmed timestamps, and failure reasons as
   * applicable.
   *
   * Admins can apply filters to search payments by date range, method,
   * currency, and status (pending, paid, failed, refunded, etc.), as well as
   * sort and page through results. This function is crucial for back-office
   * finance teams conducting audits, reviewing settlement activity, analyzing
   * transaction history, and responding to suspected fraud or system issues.
   *
   * Sensitive fields such as user references, failure reasons, or gateway
   * responses are included in the dataset, so admin-level role is typically
   * required. This endpoint is core to compliance, reporting, and advanced
   * payment analytics modules.
   *
   * @param connection
   * @param body Filter, search, and pagination criteria for listing payment
   *   records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePayment.IRequest,
  ): Promise<IPageIAiCommercePayment> {
    try {
      return await patchaiCommerceAdminPayments({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full detail for a specific payment event from the
   * ai_commerce_payments table.
   *
   * This endpoint returns the detailed record for a specified payment, as
   * managed by the ai_commerce_payments schema model. The retrieved information
   * includes payment status, reference code, amount, issued and confirmation
   * times, any failure reason, and related order or user linkage.
   *
   * This operation supports compliance with financial reporting, helps admin
   * review payment settlement status, troubleshoot failed transactions, or
   * provide resolution for refunds and disputes. Data access is limited to
   * authorized administrative users and may be used synergistically with
   * payment audit, refund, or order management endpoints for deeper financial
   * operations and system integrity.
   *
   * @param connection
   * @param paymentId Identifier of the payment record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
  ): Promise<IAiCommercePayment> {
    try {
      return await getaiCommerceAdminPaymentsPaymentId({
        admin,
        paymentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing payment transaction's details/status in the
   * ai_commerce_payments table.
   *
   * This endpoint allows an authorized admin to modify a payment record,
   * updating details such as status (settled, refunded, failed), confirmation
   * time, failure reasons, or audit/correction notes in the
   * ai_commerce_payments table. Typical uses include reconciling payment states
   * after external gateway callbacks, correcting payment errors, or performing
   * compliance-related status changes documented in audit trails.
   *
   * All updates must comply with payment reconciliation and compliance
   * policies, ensuring no double-spend or inconsistency with related order
   * status. The endpoint checks for concurrency, authorized admin action, and
   * logs all changes for audit purposes. Incorrect updates are rejected with
   * validation or business error messages.
   *
   * @param connection
   * @param paymentId Identifier of the payment record to update.
   * @param body Fields to update for payment status, timestamps, or other
   *   reconciled values.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":paymentId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommercePayment.IUpdate,
  ): Promise<IAiCommercePayment> {
    try {
      return await putaiCommerceAdminPaymentsPaymentId({
        admin,
        paymentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Hard delete a specific payment record from the ai_commerce_payments
   * subsystem (irreversible).
   *
   * This endpoint performs an irreversible hard delete of a payment record
   * identified by paymentId from the ai_commerce_payments table. Unlike soft
   * deletes elsewhere, this fully erases the record from the system, making it
   * unrecoverable. The operation is restricted to admin users to prevent
   * accidental or malicious removal of financial records.
   *
   * Deletion is permitted only on payments not tied to settled or legally owned
   * transactions, in strict conformance with business, legal, and audit rules.
   * The operation verifies target eligibility and records the deletion action
   * for forensic/audit evidence. Invalid requests (such as deletion of
   * finalized or linked payments) are rejected with explicit error reporting.
   *
   * @param connection
   * @param paymentId UUID of the payment transaction to delete permanently.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":paymentId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminPaymentsPaymentId({
        admin,
        paymentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
