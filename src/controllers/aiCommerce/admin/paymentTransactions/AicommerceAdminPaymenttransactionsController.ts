import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminPaymentTransactions } from "../../../../providers/postaiCommerceAdminPaymentTransactions";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminPaymentTransactions } from "../../../../providers/patchaiCommerceAdminPaymentTransactions";
import { getaiCommerceAdminPaymentTransactionsPaymentTransactionId } from "../../../../providers/getaiCommerceAdminPaymentTransactionsPaymentTransactionId";
import { putaiCommerceAdminPaymentTransactionsPaymentTransactionId } from "../../../../providers/putaiCommerceAdminPaymentTransactionsPaymentTransactionId";
import { deleteaiCommerceAdminPaymentTransactionsPaymentTransactionId } from "../../../../providers/deleteaiCommerceAdminPaymentTransactionsPaymentTransactionId";

import { IAiCommercePaymentTransaction } from "../../../../api/structures/IAiCommercePaymentTransaction";
import { IPageIAiCommercePaymentTransaction } from "../../../../api/structures/IPageIAiCommercePaymentTransaction";

@Controller("/aiCommerce/admin/paymentTransactions")
export class AicommerceAdminPaymenttransactionsController {
  /**
   * Manually create a payment transaction record for reconciliation or admin
   * purposes.
   *
   * Create a new payment transaction record in the
   * ai_commerce_payment_transactions table. This is intended for
   * back-office/admin users who need to insert a transaction for exception
   * handling, platform reconciliation, or correcting gateway transaction
   * history. Required fields include transaction reference, payment linkage,
   * payment method and gateway, amount, status, timestamps, and supporting
   * data.
   *
   * Security: Only admins have privilege to create transactions directly. This
   * API must never be exposed to buyers or sellers.
   *
   * Underlying Entity: ai_commerce_payment_transactions, with strict schema
   * enforcement and audit logging for compliance and operational recovery
   * workflows. All actions are monitored and subject to security review.
   *
   * @param connection
   * @param body Required data to create a new payment transaction record, such
   *   as transaction reference, payment linkage, amount, status, and metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePaymentTransaction.ICreate,
  ): Promise<IAiCommercePaymentTransaction> {
    try {
      return await postaiCommerceAdminPaymentTransactions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filterable list of payment transactions for admin
   * investigation.
   *
   * Retrieve a filtered and paginated list of payment transactions from the
   * ai_commerce_payment_transactions table. This endpoint provides advanced
   * query options such as searching by payment status, gateway, date range, and
   * user/account, as well as sorting by transaction date or amount. Users can
   * analyze exposure to failed, pending, or successful transactions and track
   * reconciliation needs.
   *
   * Security: Only admin users have access to the full transaction list.
   * Sensitive fields and raw gateway response data are restricted.
   *
   * Underlying Entity: ai_commerce_payment_transactions, with relations to
   * ai_commerce_payments (gateway, payment method, order linkage).
   *
   * Validation: Supports full filtering and pagination per platform standard.
   * Input must conform to search schema and access will be permission-checked.
   *
   * This operation is often paired with detail retrieval and status update
   * endpoints for investigation or reporting workflows. Errors in filtering or
   * unauthorized access return clear feedback and audit logging.
   *
   * @param connection
   * @param body Search and filter parameters for querying payment transactions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommercePaymentTransaction.IRequest,
  ): Promise<IPageIAiCommercePaymentTransaction> {
    try {
      return await patchaiCommerceAdminPaymentTransactions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full detail of a specific payment transaction by its transaction
   * ID.
   *
   * Retrieve complete payment transaction details given a valid payment
   * transaction ID. The operation returns all metadata, status, monetary
   * amounts, linked payment and gateway entities, relevant timestamps, and
   * associated raw gateway payloads.
   *
   * Security: Only admins may access raw and sensitive transaction metadata,
   * including gateway response bodies. All actions are logged for compliance.
   *
   * Underlying Entity: ai_commerce_payment_transactions, with references to
   * ai_commerce_payments and related tables.
   *
   * Validation: Transaction IDs are validated for existence and permission; any
   * not found or unauthorized attempts return error or access denied
   * responses.
   *
   * Cancellation or refund investigation typically uses this detail endpoint
   * alongside related payment and order data queries.
   *
   * @param connection
   * @param paymentTransactionId Unique identifier of the target payment
   *   transaction
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentTransactionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentTransactionId")
    paymentTransactionId: string & tags.Format<"uuid">,
  ): Promise<IAiCommercePaymentTransaction> {
    try {
      return await getaiCommerceAdminPaymentTransactionsPaymentTransactionId({
        admin,
        paymentTransactionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a payment transaction record by ID for reconciliation, error
   * correction, or compliance.
   *
   * Update payment transaction record fields by ID. Allows admins to modify
   * details such as transaction status, timestamps, gateway response, and
   * linkages to associated payments/orders. This is intended for
   * reconciliation, audit, and error-correction. Operation is strictly
   * access-controlled and all changes are tracked for compliance audit.
   *
   * Security: Only admin users may update payment transaction records due to
   * sensitive financial data. Modifications are logged and versioned for
   * audit.
   *
   * Underlying Entity: ai_commerce_payment_transactions. Validation ensures
   * only valid transaction IDs are updated, and required fields must be present
   * as per the update schema.
   *
   * Errors may arise if the transaction is not found, not allowed to update
   * (locked, settled, etc.), or inputs violate business validation rules.
   *
   * @param connection
   * @param paymentTransactionId Unique identifier of the target payment
   *   transaction
   * @param body Data for updating fields in the payment transaction, such as
   *   status or metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":paymentTransactionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentTransactionId")
    paymentTransactionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommercePaymentTransaction.IUpdate,
  ): Promise<IAiCommercePaymentTransaction> {
    try {
      return await putaiCommerceAdminPaymentTransactionsPaymentTransactionId({
        admin,
        paymentTransactionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a payment transaction record by ID (admin only).
   *
   * Permanently remove a payment transaction record given its transaction ID.
   * Only admins may execute this action. This is generally reserved for
   * exceptional administrative corrections and is never intended for normal
   * payment lifecycle management. All operations are recorded in audit logs and
   * a compliance review is required before use.
   *
   * Security: Restricted admin access. Attempts outside of permissions are
   * denied and logged.
   *
   * Underlying Entity: ai_commerce_payment_transactions. If the schema does not
   * specify a soft delete, this performs a complete hard delete.
   *
   * Usage is rare and should be governed by business process exceptions and
   * compliance guidelines.
   *
   * @param connection
   * @param paymentTransactionId Unique identifier of the payment transaction to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":paymentTransactionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("paymentTransactionId")
    paymentTransactionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminPaymentTransactionsPaymentTransactionId(
        {
          admin,
          paymentTransactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
