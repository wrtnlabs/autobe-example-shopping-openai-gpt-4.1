import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceAdminStoreBanking } from "../../../../providers/patchaiCommerceAdminStoreBanking";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getaiCommerceAdminStoreBankingStoreBankingId } from "../../../../providers/getaiCommerceAdminStoreBankingStoreBankingId";
import { putaiCommerceAdminStoreBankingStoreBankingId } from "../../../../providers/putaiCommerceAdminStoreBankingStoreBankingId";
import { deleteaiCommerceAdminStoreBankingStoreBankingId } from "../../../../providers/deleteaiCommerceAdminStoreBankingStoreBankingId";

import { IPageIAiCommerceStoreBanking } from "../../../../api/structures/IPageIAiCommerceStoreBanking";
import { IAiCommerceStoreBanking } from "../../../../api/structures/IAiCommerceStoreBanking";

@Controller("/aiCommerce/admin/storeBanking")
export class AicommerceAdminStorebankingController {
  /**
   * Search and retrieve paginated store banking information
   * (ai_commerce_store_banking).
   *
   * Retrieve a filtered, paginated list of store banking info for all stores.
   * The API supports detailed queries on bank name, store reference, account
   * status, approval state, and verification results, with outputs designed to
   * facilitate admin finance operations and compliance audit trails.
   *
   * Banking records are surfaced only to admin-level users, with data masking
   * or redaction for sensitive details (such as account numbers and routing
   * codes) as required by privacy policy. All accesses are logged for audit and
   * regulatory evidence.
   *
   * Errors are handled for improper queries, invalid filter formats, and
   * unauthorized access attempts, which are returned with actionable error
   * codes and full context for compliance and troubleshooting.
   *
   * @param connection
   * @param body Banking record search filters, pagination, and sorting
   *   (bank/status/store/verification).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceStoreBanking.IRequest,
  ): Promise<IPageIAiCommerceStoreBanking.ISummary> {
    try {
      return await patchaiCommerceAdminStoreBanking({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve seller store banking details by banking record ID
   * (ai_commerce_store_banking).
   *
   * Fetch detailed store banking information linked to a specific seller's
   * store.
   *
   * The operation targets ai_commerce_store_banking by requiring a unique
   * banking record identifier (storeBankingId) in the URL path. Response
   * includes all fields for bank identification and payout configuration, along
   * with the compliance and verification status as maintained in the database.
   *
   * Security enforcement ensures only the authenticated owner (seller) of the
   * store, or an administrator, can access the full banking record; others are
   * denied. Sensitive fields such as account numbers are handled in properly
   * permissioned views. All access is logged for auditability.
   *
   * @param connection
   * @param storeBankingId Unique identifier for the store banking record to
   *   retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":storeBankingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("storeBankingId")
    storeBankingId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceStoreBanking> {
    try {
      return await getaiCommerceAdminStoreBankingStoreBankingId({
        admin,
        storeBankingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update store banking details for a seller’s store by banking record ID
   * (ai_commerce_store_banking).
   *
   * Modify an existing store banking configuration by supplying the banking
   * record ID and new field values. All updates are validated against both
   * compliance and business rules before changes are persisted. Updates could
   * trigger re-verification and temporary suspension of payout until approval
   * if sensitive fields (bank account, routing, etc.) change.
   *
   * Only the store’s verified owner or administrators are permitted to update
   * banking records. All modifications are logged for compliance and audit
   * reasons. Sensitive data is stored securely according to industry standards,
   * and changes to critical fields can require additional identity verification
   * or trigger workflow notifications.
   *
   * @param connection
   * @param storeBankingId Unique identifier for the store banking record to
   *   update
   * @param body Updated store banking information. Only modifiable fields in
   *   compliance with business rules are accepted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":storeBankingId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("storeBankingId")
    storeBankingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceStoreBanking.IUpdate,
  ): Promise<IAiCommerceStoreBanking> {
    try {
      return await putaiCommerceAdminStoreBankingStoreBankingId({
        admin,
        storeBankingId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a store banking record by banking record ID
   * (ai_commerce_store_banking).
   *
   * Delete (permanently) a store banking configuration associated with a
   * seller's store, using the unique storeBankingId. This action is
   * irreversible in the absence of a soft delete column—physical removal occurs
   * unless business policy mandates logical retention for legal or compliance
   * reasons.
   *
   * Only the store’s authorized owner or an administrator may perform this
   * action, and all delete events are strictly logged for compliance. If the
   * record is referenced in unresolved payout actions or required for audit,
   * deletion may be denied or delayed subject to platform rules. Attempts to
   * delete non-existent or unauthorized records will result in clear error
   * messages.
   *
   * @param connection
   * @param storeBankingId Unique identifier for the store banking record to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":storeBankingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("storeBankingId")
    storeBankingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminStoreBankingStoreBankingId({
        admin,
        storeBankingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
