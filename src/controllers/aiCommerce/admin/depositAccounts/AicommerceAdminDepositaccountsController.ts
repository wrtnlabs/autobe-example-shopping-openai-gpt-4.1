import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminDepositAccounts } from "../../../../providers/postaiCommerceAdminDepositAccounts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminDepositAccounts } from "../../../../providers/patchaiCommerceAdminDepositAccounts";
import { getaiCommerceAdminDepositAccountsDepositAccountId } from "../../../../providers/getaiCommerceAdminDepositAccountsDepositAccountId";
import { putaiCommerceAdminDepositAccountsDepositAccountId } from "../../../../providers/putaiCommerceAdminDepositAccountsDepositAccountId";
import { deleteaiCommerceAdminDepositAccountsDepositAccountId } from "../../../../providers/deleteaiCommerceAdminDepositAccountsDepositAccountId";

import { IAiCommerceDepositAccount } from "../../../../api/structures/IAiCommerceDepositAccount";
import { IPageIAiCommerceDepositAccount } from "../../../../api/structures/IPageIAiCommerceDepositAccount";

@Controller("/aiCommerce/admin/depositAccounts")
export class AicommerceAdminDepositaccountsController {
  /**
   * Create a new user deposit account administratively (admin only).
   *
   * Manually create a new user (buyer/seller) deposit account from the admin
   * interface. The operation requires user ID, initial balance, currency, and
   * status. All records are created with audit, and use-case must conform to
   * platform compliance. User-triggered creation is not permitted, and this
   * operation should not be exposed to buyers or sellers directly.
   *
   * Security: Only admin role permitted. Input validation is strictly enforced,
   * and records are linked to user compliance and transaction audit trails.
   * Each action is logged for evidence and troubleshooting.
   *
   * Underlying Entity: ai_commerce_deposit_accounts, with references to user
   * identity and audit snapshot for balance initialization or migration.
   *
   * Errors include duplicate account, invalid user, or status/validation
   * failures. Compliance audit and review procedures must be followed when
   * using this operation.
   *
   * @param connection
   * @param body Required data for new deposit account creation, including user,
   *   initial balance, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceDepositAccount.ICreate,
  ): Promise<IAiCommerceDepositAccount> {
    try {
      return await postaiCommerceAdminDepositAccounts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin-restricted query for paginated, filterable list of deposit accounts.
   *
   * Fetch a paginated list of deposit accounts in the system, with filter and
   * search support. Admins can use this endpoint to review account status,
   * investigate user balances, and generate reports on active, suspended, or
   * high-balance accounts. Supports robust pagination, filtering, and sorting
   * capabilities.
   *
   * Security: Only admins are allowed to access the platform-wide account list.
   * User/depositor privacy is respected according to compliance rules, and
   * sensitive metadata is restricted in the output.
   *
   * Underlying Entity: ai_commerce_deposit_accounts. Supports relational search
   * (by user ID, currency, account code) and aggregate operation for financial
   * reporting.
   *
   * Used together with account detail, adjustment/transaction creation, and
   * closing endpoints. Any inconsistent access or search errors are clearly
   * reported for remediation and audit.
   *
   * @param connection
   * @param body Search/filter/request parameters for deposit account listing
   *   and query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceDepositAccount.IRequest,
  ): Promise<IPageIAiCommerceDepositAccount> {
    try {
      return await patchaiCommerceAdminDepositAccounts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Show a specific deposit account record by its ID (admin only).
   *
   * Retrieve comprehensive data about a deposit account using its unique
   * account ID. Returns business-critical balance, status, identifiers, user
   * linkages, audit and transaction reference, and compliance and account
   * details.
   *
   * Security: Only accessible to admin users for audit, investigation, and
   * reporting. Sensitive fields and related detail are shielded in the response
   * for non-authorized users.
   *
   * Underlying Entity: ai_commerce_deposit_accounts, linked to users and
   * payment transaction history for full background.
   *
   * Any failed or unauthorized attempts to retrieve account details are logged
   * for compliance.
   *
   * @param connection
   * @param depositAccountId Unique identifier of the target deposit account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":depositAccountId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("depositAccountId")
    depositAccountId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceDepositAccount> {
    try {
      return await getaiCommerceAdminDepositAccountsDepositAccountId({
        admin,
        depositAccountId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a deposit account by its unique identifier (UUID) in aiCommerce's
   * deposit account table.
   *
   * This operation updates an existing deposit account record using the
   * account's unique identifier.
   *
   * The record is located in the ai_commerce_deposit_accounts table, which
   * manages e-wallet balances for buyers and sellers for transactional
   * purposes. Update actions may include changing account status (active or
   * suspended), modifying metadata, or other permissible field changes not
   * breaking the integrity of financial records.
   *
   * Security context: Only platform administrators or privileged support staff
   * may perform this update, following strict business rules and permission
   * matrix defined in system documentation. Attempts by unauthorized users are
   * logged and rejected.
   *
   * All updates are fully audited, and a historical record is maintained for
   * compliance with payment regulations and financial auditing standards. If a
   * target account is soft-deleted, no modifications are allowed.
   *
   * Related operations: Account status checks, deposit transaction creation,
   * account soft-deletion (suspension/closure), and audit log queries may be
   * performed in conjunction with this update.
   *
   * @param connection
   * @param depositAccountId Unique identifier (UUID) of the deposit account to
   *   update.
   * @param body Updated deposit account data fields (status, metadata, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":depositAccountId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("depositAccountId")
    depositAccountId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceDepositAccount.IUpdate,
  ): Promise<IAiCommerceDepositAccount> {
    try {
      return await putaiCommerceAdminDepositAccountsDepositAccountId({
        admin,
        depositAccountId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a deposit account (by UUID) for compliance audit using
   * aiCommerce's deposit account schema.
   *
   * This operation logically deletes (soft-removes) a deposit account
   * identified by its UUID from the ai_commerce_deposit_accounts table.
   *
   * It sets the deleted_at timestamp instead of physical removal, aligning with
   * strict financial compliance requirements around data retention. Physical
   * deletion is never implemented for deposit accounts as per regulatory
   * expectations and fraud/tampering auditability.
   *
   * Only administrators have permission to execute this action; all delete
   * operations are tracked in an immutable audit log, with before/after state
   * snapshots preserved for compliance and recovery.
   *
   * If the account does not exist or is already soft-deleted, the operation
   * returns an appropriate error. Related operations for account recovery or
   * audit may be used by compliance or admin staff when needed.
   *
   * @param connection
   * @param depositAccountId UUID of the deposit account to soft-delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":depositAccountId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("depositAccountId")
    depositAccountId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminDepositAccountsDepositAccountId({
        admin,
        depositAccountId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
