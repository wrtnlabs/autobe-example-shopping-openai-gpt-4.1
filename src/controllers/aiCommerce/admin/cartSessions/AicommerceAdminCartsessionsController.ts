import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getaiCommerceAdminCartSessionsCartSessionId } from "../../../../providers/getaiCommerceAdminCartSessionsCartSessionId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { putaiCommerceAdminCartSessionsCartSessionId } from "../../../../providers/putaiCommerceAdminCartSessionsCartSessionId";
import { deleteaiCommerceAdminCartSessionsCartSessionId } from "../../../../providers/deleteaiCommerceAdminCartSessionsCartSessionId";
import { postaiCommerceAdminCartSessions } from "../../../../providers/postaiCommerceAdminCartSessions";

import { IAiCommerceCartSession } from "../../../../api/structures/IAiCommerceCartSession";

@Controller("/aiCommerce/admin/cartSessions")
export class AicommerceAdminCartsessionsController {
  /**
   * Get cart session details by cartSessionId from ai_commerce_cart_sessions.
   *
   * This endpoint retrieves a cart session record from
   * ai_commerce_cart_sessions, as identified by cartSessionId in the path
   * parameter.
   *
   * Purpose: Enables buyers or administrators to review session state, which is
   * vital for validating device merges, troubleshooting persistent carts,
   * detecting guest-to-member transitions, and supporting compliance audits.
   *
   * Buyers may only see their sessions. Admins may view all for
   * audit/troubleshooting. Sensitive attributes (e.g., session token) only
   * returned when suitably authenticated.
   *
   * Returns all session properties (including references) as present in the
   * schema. If the record doesn't exist or access is unauthorized, a standard
   * error is returned.
   *
   * @param connection
   * @param cartSessionId Unique identifier for the cart session to retrieve, as
   *   UUID.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartSessionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartSessionId")
    cartSessionId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceCartSession> {
    try {
      return await getaiCommerceAdminCartSessionsCartSessionId({
        admin,
        cartSessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing cart session in ai_commerce_cart_sessions by
   * cartSessionId.
   *
   * Updates session fields (expiration, status, cart link, session token) for
   * session identified by cartSessionId. Only the buyer who owns the session or
   * an administrator may update. Updates must adhere to business rules and not
   * permit unauthorized user cross-session updates. All updates are audited.
   *
   * Returns updated session object on success. Validates all incoming field
   * updates and returns error if the request is invalid or not allowed.
   *
   * @param connection
   * @param cartSessionId Unique identifier for the cart session to update, as
   *   UUID.
   * @param body Fields for updating cart session: supports partial or full
   *   update. Follows IAiCommerceCartSession.IUpdate schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartSessionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartSessionId")
    cartSessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceCartSession.IUpdate,
  ): Promise<IAiCommerceCartSession> {
    try {
      return await putaiCommerceAdminCartSessionsCartSessionId({
        admin,
        cartSessionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (erase) a cart session by cartSessionId from
   * ai_commerce_cart_sessions.
   *
   * Marks a cart session as deleted by populating deleted_at, so the session
   * persists for logs/audit/compliance. Only the owning buyer or admin may
   * trigger this. Used on logout, account deletion, and privacy workflows.
   * Attempting to erase unauthorized sessions is denied.
   *
   * @param connection
   * @param cartSessionId Unique identifier for the cart session to erase (soft
   *   delete), as UUID.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartSessionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartSessionId")
    cartSessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminCartSessionsCartSessionId({
        admin,
        cartSessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new cart session in ai_commerce_cart_sessions.
   *
   * Creates and persists a new cart session, tied to either an authenticated
   * buyer or as an anonymous/guest session. Populates ai_commerce_cart_sessions
   * with unique session token and links to the relevant cart. Ensures
   * session_token and cart_id adhere to uniqueness constraints. Buyers can
   * create sessions for their own cart; admins may perform this for testing or
   * recovery.
   *
   * Request provides required associations and configuration; response returns
   * persisted entity. Seller/admin non-buyer accounts should not use this
   * endpoint.
   *
   * @param connection
   * @param body Creation fields for new cart session: buyer (optional), cart
   *   reference, session token, status, expiration, timestamps.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceCartSession.ICreate,
  ): Promise<IAiCommerceCartSession> {
    try {
      return await postaiCommerceAdminCartSessions({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
