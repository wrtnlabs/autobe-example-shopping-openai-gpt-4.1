import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminMileageAccounts } from "../../../../providers/postaiCommerceAdminMileageAccounts";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminMileageAccounts } from "../../../../providers/patchaiCommerceAdminMileageAccounts";
import { getaiCommerceAdminMileageAccountsMileageAccountId } from "../../../../providers/getaiCommerceAdminMileageAccountsMileageAccountId";
import { putaiCommerceAdminMileageAccountsMileageAccountId } from "../../../../providers/putaiCommerceAdminMileageAccountsMileageAccountId";
import { deleteaiCommerceAdminMileageAccountsMileageAccountId } from "../../../../providers/deleteaiCommerceAdminMileageAccountsMileageAccountId";

import { IAiCommerceMileageAccount } from "../../../../api/structures/IAiCommerceMileageAccount";
import { IPageIAiCommerceMileageAccount } from "../../../../api/structures/IPageIAiCommerceMileageAccount";

@Controller("/aiCommerce/admin/mileageAccounts")
export class AicommerceAdminMileageaccountsController {
  /**
   * Create a new mileage account for a user with essential setup information.
   *
   * This operation allows an authorized actor to create a new mileage account,
   * most commonly at the time of user onboarding or role escalation (e.g.,
   * becoming a seller). The request body must conform to the
   * IAiCommerceMileageAccount.ICreate structure, capturing data such as user_id
   * (buyer or seller), initial balance, currency_code, account_code (if
   * specified per business logic), and account status.
   *
   * Business rules typically enforce one active account per user for each
   * currency. Duplicate or redundant accounts should be prevented unless
   * explicitly required. Upon creation, all compliance, KPIs, and incentive
   * logic are initialized.
   *
   * All mileage account creation events are strictly audited, as these accounts
   * may impact financial settlement and user-facing rewards. Only permitted
   * system or admin actors can trigger account creation for another user.
   *
   * @param connection
   * @param body Parameters for creating a new mileage account, including user
   *   association, currency, and any initial balance.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceMileageAccount.ICreate,
  ): Promise<IAiCommerceMileageAccount> {
    try {
      return await postaiCommerceAdminMileageAccounts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated and filtered search of mileage accounts for loyalty point
   * balances, by user or admin.
   *
   * Retrieve a paginated, filtered list of mileage accounts associated with
   * users from ai_commerce_mileage_accounts.
   *
   * Query parameters include user ID, account status, creation/update date
   * range, and balance filters. The endpoint supports advanced analytics
   * actions for admins and lets authenticated users review their own loyalty
   * balances, with field masking and row-level permissions according to role.
   *
   * Security is strictly enforced: only users may access their own mileage
   * accounts; admins have unrestricted analytics access. All search criteria
   * and results are auditable, and access is logged for fraud/compliance
   * review.
   *
   * Use cases include loyalty point review, reward analytics, and admin
   * audit/compliance activities. Related operations: account detail view,
   * transaction history for a mileage account, account management, and account
   * auditing.
   *
   * @param connection
   * @param body Criteria and paging controls for mileage account search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceMileageAccount.IRequest,
  ): Promise<IPageIAiCommerceMileageAccount> {
    try {
      return await patchaiCommerceAdminMileageAccounts({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific mileage account by its unique
   * identifier.
   *
   * This operation retrieves the full set of details for a specific mileage
   * account, referenced by its unique identifier (mileageAccountId). It
   * includes all fields as defined in the ai_commerce_mileage_accounts table:
   * account_code, user_id, balance, currency_code, status, created_at,
   * updated_at, and deleted_at if present.
   *
   * The function is permissioned such that only the account owner, relevant
   * seller, or platform administrator can access this information. This ensures
   * privacy and security for sensitive account data.
   *
   * Mileage account data is critical for both business operations and
   * regulatory compliance, as the account maintains a running history of all
   * reward/incentive points, deductions, and status changes. Any queries to
   * this endpoint should be carefully audited and logged for security
   * purposes.
   *
   * @param connection
   * @param mileageAccountId Unique identifier for the target mileage account.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mileageAccountId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageAccountId")
    mileageAccountId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceMileageAccount> {
    try {
      return await getaiCommerceAdminMileageAccountsMileageAccountId({
        admin,
        mileageAccountId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details for an existing mileage account by unique ID.
   *
   * This operation updates the core fields of an existing mileage account,
   * including account status (e.g., suspended/active), currency, or other
   * allowed changes based on business rules. Balance adjustment is restricted
   * to specific business processes and usually performed via transaction
   * records.
   *
   * Request data must follow the IAiCommerceMileageAccount.IUpdate type,
   * ensuring only modifiable fields in schema can be altered. All inputs are
   * validated for regulatory compliance and consistency with user/account
   * business rules.
   *
   * Mileage account updates are strictly audited: every state change,
   * especially those affecting user-facing balances or account status, is
   * tracked for compliance and legal evidence. Only admins or
   * compliance-authorized roles are permitted to update another user's mileage
   * account.
   *
   * @param connection
   * @param mileageAccountId Unique identifier for the mileage account to
   *   update.
   * @param body Update fields for the specified mileage account following
   *   business and audit rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":mileageAccountId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageAccountId")
    mileageAccountId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceMileageAccount.IUpdate,
  ): Promise<IAiCommerceMileageAccount> {
    try {
      return await putaiCommerceAdminMileageAccountsMileageAccountId({
        admin,
        mileageAccountId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a mileage account by its unique ID (hard delete, not
   * reversible).
   *
   * The operation performs a permanent removal (hard delete) of a specified
   * mileage account from active records in the ai_commerce_mileage_accounts
   * table, identified by mileageAccountId. This is typically allowed only for
   * accounts with zero balance and not under legal/financial hold.
   *
   * Before deletion, all dependent records and transactional references are
   * validated for compliance. The operation will fail if the account is
   * non-empty or involved in an open dispute or compliance freeze.
   * Post-deletion, only audit logs and compliance evidence are retained for
   * regulatory and legal purposes.
   *
   * Access to deletion functionality is strictly limited to administrative or
   * compliance officers, and every action is fully logged with actor,
   * timestamp, and justification.
   *
   * @param connection
   * @param mileageAccountId Unique identifier for the mileage account to be
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":mileageAccountId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageAccountId")
    mileageAccountId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminMileageAccountsMileageAccountId({
        admin,
        mileageAccountId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
