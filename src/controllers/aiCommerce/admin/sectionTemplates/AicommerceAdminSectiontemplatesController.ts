import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postaiCommerceAdminSectionTemplates } from "../../../../providers/postaiCommerceAdminSectionTemplates";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchaiCommerceAdminSectionTemplates } from "../../../../providers/patchaiCommerceAdminSectionTemplates";
import { getaiCommerceAdminSectionTemplatesTemplateId } from "../../../../providers/getaiCommerceAdminSectionTemplatesTemplateId";
import { putaiCommerceAdminSectionTemplatesTemplateId } from "../../../../providers/putaiCommerceAdminSectionTemplatesTemplateId";
import { deleteaiCommerceAdminSectionTemplatesTemplateId } from "../../../../providers/deleteaiCommerceAdminSectionTemplatesTemplateId";

import { IAiCommerceSectionTemplate } from "../../../../api/structures/IAiCommerceSectionTemplate";
import { IPageIAiCommerceSectionTemplate } from "../../../../api/structures/IPageIAiCommerceSectionTemplate";

@Controller("/aiCommerce/admin/sectionTemplates")
export class AicommerceAdminSectiontemplatesController {
  /**
   * Create a new section template in ai_commerce_section_templates.
   *
   * Enables admin users to define and register a new section template for use
   * in business merchandising, channel planning, or AI configuration. The
   * ai_commerce_section_templates Prisma model captures input fields like
   * template code, name, template_data (as serialized configuration),
   * is_default status, and workflow status. The API request body validates
   * template code uniqueness, field completeness, and accepted configuration
   * schema. On success, the created template is returned for further workflow
   * steps or UI display.
   *
   * Business rules prevent duplicate template codes and require all mandatory
   * fields. This API powers advanced merchandising automation and rapid section
   * instantiation. Errors include existing code, malformed template_data, or
   * unauthorized calls. Audit trails are enforced per Prisma schema comments
   * and compliance requirements.
   *
   * @param connection
   * @param body Fields required to define a new section template, such as code,
   *   name, configuration data, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSectionTemplate.ICreate,
  ): Promise<IAiCommerceSectionTemplate> {
    try {
      return await postaiCommerceAdminSectionTemplates({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search section templates in ai_commerce_section_templates with
   * filtering and pagination.
   *
   * Retrieves a filtered and paginated list of section templates used for
   * defining merchandising layouts and logic in channels. The
   * ai_commerce_section_templates model enables admins and business users to
   * efficiently retrieve, analyze, and select templates for new sections. The
   * request body allows complex querying—filtering by name, is_default,
   * business_status, date range, etc.—and supports server-side paging, search
   * keyword, and sort fields.
   *
   * Templates may be prebuilt for rapid business rollout, and are vital in
   * AI-driven as well as manual merchandising. This API aligns with business
   * workflow, providing analytics and template insights for channel curation.
   * Results include core template metadata, status, and audit fields for each
   * template. Business logic enforces access restrictions for editing but
   * allows read access to most authenticated users or public endpoints.
   *
   * @param connection
   * @param body Filtering and pagination criteria for section template
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IAiCommerceSectionTemplate.IRequest,
  ): Promise<IPageIAiCommerceSectionTemplate.ISummary> {
    try {
      return await patchaiCommerceAdminSectionTemplates({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details of a specific section template from
   * ai_commerce_section_templates.
   *
   * Fetch detailed information on a single section template used for channel
   * merchandising. Each section template is a modular, reusable definition,
   * supporting business logic for rapid channel setup and AI personalization.
   * The ai_commerce_section_templates schema defines required template fields,
   * including code, name, configuration data (serialized), is_default, status,
   * creation, and update timestamps.
   *
   * Access to this endpoint is generally allowed for admin users and supports
   * catalog planning, analytics, or prefill in UI forms. Error scenarios
   * include invalid templateId, lack of access permission, or deleted/retired
   * templates. The response returns complete template details as per Prisma
   * schema comments.
   *
   * @param connection
   * @param templateId Unique identifier of the section template to retrieve
   *   (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":templateId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("templateId")
    templateId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceSectionTemplate> {
    try {
      return await getaiCommerceAdminSectionTemplatesTemplateId({
        admin,
        templateId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing section template in ai_commerce_section_templates.
   *
   * Modifies the configuration or metadata of an existing section template,
   * supporting business side template revision, versioning, and rapid iteration
   * on merchandising logic. This endpoint uses the
   * ai_commerce_section_templates Prisma model for full update capability,
   * including the template code, name, template_data blob, is_default state,
   * status, and timestamps. The update API ensures only authorized admins make
   * changes and validates template code uniqueness, configuration integrity,
   * and field completeness.
   *
   * Operations are logged with before/after state for compliance and
   * traceability. On successful update, the latest template object is returned
   * for UI refresh or workflow continuation. Potential errors are missing
   * templateId, code conflicts, or invalid configuration data. Uses
   * IAiCommerceSectionTemplate.IUpdate schema for request body; admins only
   * permitted as actors.
   *
   * Related APIs include template list/retrieval and section instantiation
   * using this template.
   *
   * @param connection
   * @param templateId Identifier of the template to update (UUID format).
   * @param body Fields to update in the template, such as code, name,
   *   template_data, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":templateId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("templateId")
    templateId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceSectionTemplate.IUpdate,
  ): Promise<IAiCommerceSectionTemplate> {
    try {
      return await putaiCommerceAdminSectionTemplatesTemplateId({
        admin,
        templateId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a section template (soft delete) by template ID from
   * ai_commerce_section_templates.
   *
   * Deletes a specific section template based on its unique templateId,
   * referencing the ai_commerce_section_templates table. This API performs a
   * soft logical deletion by updating the deleted_at field, in line with audit
   * and evidence requirements for legal compliance and rollback.
   *
   * Only administrator roles are permitted to perform this operation, ensuring
   * that only vetted users can remove section templates from the business
   * configuration. Audit trails of this deletion are automatically generated
   * per platform business rules, guaranteeing investigatory and compliance
   * needs are met.
   *
   * Attempting to delete a template that is still actively referenced by
   * sections, channels, or merchandising flows will result in a validation
   * error, and the operation will fail with appropriate messaging. Error
   * handling ensures that database consistency and referential integrity are
   * always maintained.
   *
   * This operation can be paired with the get (detail) operation to ensure the
   * template contents and usage can be inspected before deletion. It is also
   * related to the list/search operation for administrators managing many
   * templates.
   *
   * @param connection
   * @param templateId The unique identifier of the section template to be
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":templateId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("templateId")
    templateId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteaiCommerceAdminSectionTemplatesTemplateId({
        admin,
        templateId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
