import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceBulletinsBulletinIdComments } from "../../../../providers/patchaiCommerceBulletinsBulletinIdComments";
import { getaiCommerceBulletinsBulletinIdCommentsCommentId } from "../../../../providers/getaiCommerceBulletinsBulletinIdCommentsCommentId";

import { IPageIAiCommerceComment } from "../../../../api/structures/IPageIAiCommerceComment";
import { IAiCommerceComment } from "../../../../api/structures/IAiCommerceComment";

@Controller("/aiCommerce/bulletins/:bulletinId/comments")
export class AicommerceBulletinsCommentsController {
  /**
   * Paginated, filterable comment list for a given bulletin
   * (ai_commerce_comments by bulletin).
   *
   * Search and retrieve a list of comments (replies/discussions) for a given
   * bulletin identified by bulletinId, with support for pagination, searching,
   * filtering by author or status, and sorting by creation time or other
   * fields.
   *
   * This endpoint enables threaded comment management for announcements, with
   * security/visibility handled depending on user role: buyers may see public
   * comments, admins can moderate and see all statuses. It references the
   * ai_commerce_comments table with a FK to the bulletin.
   *
   * Paginated results are returned, and related endpoints include get, create,
   * update, and moderation actions.
   *
   * @param connection
   * @param bulletinId ID of the bulletin whose comments are being listed.
   * @param body Filter, search, and pagination options for comment retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("bulletinId")
    bulletinId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IAiCommerceComment.IRequest,
  ): Promise<IPageIAiCommerceComment.ISummary> {
    try {
      return await patchaiCommerceBulletinsBulletinIdComments({
        bulletinId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve specific comment by bulletin and comment ID
   * (ai_commerce_comments).
   *
   * Get the complete details of a specific comment on a bulletin, identified by
   * both bulletinId and commentId. The response includes content, author,
   * creation date, moderation status, and all relevant fields from
   * ai_commerce_comments. Buyers may retrieve comments that are public or
   * addressed to them; admins may retrieve all.
   *
   * The endpoint validates both UUID parameters and returns an error if not
   * found or access denied due to visibility. Related endpoints enable
   * retrieval of all comments for a bulletin or management of thread
   * hierarchies.
   *
   * @param connection
   * @param bulletinId ID of the bulletin for comment retrieval context.
   * @param commentId Unique identifier for the comment to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("bulletinId")
    bulletinId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceComment> {
    try {
      return await getaiCommerceBulletinsBulletinIdCommentsCommentId({
        bulletinId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
