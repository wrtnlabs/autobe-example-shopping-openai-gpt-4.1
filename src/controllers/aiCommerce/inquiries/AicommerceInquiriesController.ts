import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceInquiries } from "../../../providers/patchaiCommerceInquiries";
import { getaiCommerceInquiriesInquiryId } from "../../../providers/getaiCommerceInquiriesInquiryId";

import { IPageIAiCommerceInquiry } from "../../../api/structures/IPageIAiCommerceInquiry";
import { IAiCommerceInquiry } from "../../../api/structures/IAiCommerceInquiry";

@Controller("/aiCommerce/inquiries")
export class AicommerceInquiriesController {
  /**
   * List inquiries (with filtering and pagination) from ai_commerce_inquiries
   * table.
   *
   * Fetches a paginated, filtered, and optionally sorted list of product
   * inquiries as stored in the ai_commerce_inquiries table. Search parameters
   * may include filtering by product ID, author ID, inquiry status, and
   * keywords.
   *
   * The operation supports both buyers searching for their own inquiries and
   * public browsing, with results subject to each inquiry's visibility
   * property. Backend filtering ensures compliance with privacy policies and
   * returns only those inquiries the requesting user is permitted to view.
   *
   * The response format includes a page of inquiry summary objects and
   * pagination metadata. The search and pagination logic is aligned to platform
   * conventions for performance and usability.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for listing
   *   inquiries, as defined in IAiCommerceInquiry.IRequest.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IAiCommerceInquiry.IRequest,
  ): Promise<IPageIAiCommerceInquiry.ISummary> {
    try {
      return await patchaiCommerceInquiries({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of an inquiry (ai_commerce_inquiries table).
   *
   * Fetches all detailed fields of a single inquiry, uniquely identified by its
   * inquiryId path parameter. The returned object includes question, author,
   * associated product, timestamps, visibility, answer, and status.
   *
   * Permission checks are enforced so that private inquiries are visible only
   * to the author, product owner (seller), or administrators. Public inquiries
   * are available to all users. Attempts to access non-existent or unauthorized
   * resources produce appropriate errors.
   *
   * This endpoint is essential for supporting the inquiry Q&A user experience
   * and providing a detailed view for moderation and audit processes.
   *
   * @param connection
   * @param inquiryId Unique identifier for the inquiry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":inquiryId")
  public async at(
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceInquiry> {
    try {
      return await getaiCommerceInquiriesInquiryId({
        inquiryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
