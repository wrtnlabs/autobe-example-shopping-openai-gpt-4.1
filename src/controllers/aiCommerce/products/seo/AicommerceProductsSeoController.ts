import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getaiCommerceProductsProductIdSeo } from "../../../../providers/getaiCommerceProductsProductIdSeo";

import { IAiCommerceProductSeo } from "../../../../api/structures/IAiCommerceProductSeo";

@Controller("/aiCommerce/products/:productId/seo")
export class AicommerceProductsSeoController {
  /**
   * Retrieve all SEO metadata for a specific product from
   * ai_commerce_product_seo.
   *
   * The GET /products/{productId}/seo endpoint is used to retrieve SEO-related
   * metadata for the specified product. This metadata includes fields such as
   * SEO page title, meta description, canonical URL, keywords, and open graph
   * image URL, which are essential for product discoverability on search
   * engines and social platforms.
   *
   * This operation is accessible publicly and does not require authentication
   * or authorization; all visitors, buyers, sellers, and admins can read SEO
   * metadata for a product. The endpoint supports wide integration for
   * rendering product detail pages, external marketing, or analytics
   * dashboards.
   *
   * Internally, the API calls the ai_commerce_product_seo table, looks up the
   * row by productId, and returns the complete SEO record for the product. If
   * the resource does not exist or SEO metadata is not configured, a null or
   * not found response is returned. The operation enforces a hard limit of one
   * SEO entry per product via a unique index.
   *
   * Any errors or missing records are handled gracefully with a detailed error
   * response. No request body is required. The response returns the full SEO
   * entity as defined in the OpenAPI schema.
   *
   * @param connection
   * @param productId Unique identifier of the product for which to retrieve SEO
   *   metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductSeo> {
    try {
      return await getaiCommerceProductsProductIdSeo({
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
