import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getaiCommerceProductsProductIdLegalCompliance } from "../../../../providers/getaiCommerceProductsProductIdLegalCompliance";

import { IAiCommerceProductLegalCompliance } from "../../../../api/structures/IAiCommerceProductLegalCompliance";

@Controller("/aiCommerce/products/:productId/legalCompliance")
export class AicommerceProductsLegalcomplianceController {
  /**
   * Fetch legal and compliance information for a specific product from
   * ai_commerce_product_legal_compliance.
   *
   * The GET /products/{productId}/legalCompliance endpoint is designed for
   * retrieving legal and compliance information associated with a particular
   * product. This data covers regulatory certificates, hazardous material
   * flags, age restrictions, region of compliance, and approval status, as
   * stored in the ai_commerce_product_legal_compliance table.
   *
   * Public read access ensures buyers, visitors, and all user roles may check
   * compliance status, supporting buyer trust and regulatory transparency. The
   * endpoint will return the compliance entity for the indicated product, or a
   * not found/null response if compliance data is not registered.
   *
   * This API supports compliance audits, buyer-visible requirements (e.g., age
   * limits, hazardous goods), and admin/analytics tracking without needing
   * authentication for public viewing. Proper error handling occurs if the
   * resource is missing or the productId is invalid. No request body is
   * required, and the full compliance entity is returned in response following
   * OA component schema.
   *
   * @param connection
   * @param productId Unique identifier for the product to fetch legal
   *   compliance data for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceProductLegalCompliance> {
    try {
      return await getaiCommerceProductsProductIdLegalCompliance({
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
