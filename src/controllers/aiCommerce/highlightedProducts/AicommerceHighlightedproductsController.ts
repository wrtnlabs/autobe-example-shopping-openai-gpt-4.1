import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceHighlightedProducts } from "../../../providers/patchaiCommerceHighlightedProducts";
import { getaiCommerceHighlightedProductsHighlightedProductId } from "../../../providers/getaiCommerceHighlightedProductsHighlightedProductId";

import { IPageIAiCommerceHighlightedProduct } from "../../../api/structures/IPageIAiCommerceHighlightedProduct";
import { IAiCommerceHighlightedProduct } from "../../../api/structures/IAiCommerceHighlightedProduct";

@Controller("/aiCommerce/highlightedProducts")
export class AicommerceHighlightedproductsController {
  /**
   * List paginated and filtered highlighted products
   * (ai_commerce_highlighted_products).
   *
   * List current and scheduled highlighted product entries from
   * ai_commerce_highlighted_products. This endpoint allows filtering, sorting,
   * and paginated access, ensuring scalable performance and responsive UI.
   * Output includes highlight timing (start/end), reason, manually assigned
   * curator, and associated product references.
   *
   * The endpoint addresses business needs for promoted content, featured
   * product selections, and homepage campaign management. Non-admin users
   * receive only public, currently live highlights, whereas admins may request
   * broader scope or historical records. Related operations include creation,
   * update, and deletion of highlights, often combined with real-time campaign
   * monitoring or analytics dashboards.
   *
   * Error handling covers range queries, out-of-bounds pagination, and access
   * violations where historic or non-public highlights are requested by
   * unauthorized roles.
   *
   * @param connection
   * @param body Highlight filter, sort, and page options for highlighted
   *   product search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IAiCommerceHighlightedProduct.IRequest,
  ): Promise<IPageIAiCommerceHighlightedProduct.ISummary> {
    try {
      return await patchaiCommerceHighlightedProducts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific highlighted product by ID
   * (ai_commerce_highlighted_products).
   *
   * Retrieve details of a specific highlighted product in
   * ai_commerce_highlighted_products by its highlightedProductId. The endpoint
   * covers highlight timing, curator identity, manual notes, status, and
   * product links. Permissions may restrict sensitive scheduling or
   * administrative campaign notes to elevated roles. Path parameter
   * highlightedProductId is a required UUID.
   *
   * This operation supports detailed configuration screens, consumer-facing
   * highlight banners with extended info, or campaign retrospectives for
   * business stakeholders. Coupled with highlight creation and update APIs for
   * full lifecycle management. Error cases return standard not found,
   * unauthorized, or parameterization errors with full traceability.
   *
   * @param connection
   * @param highlightedProductId Unique identifier of the highlighted product
   *   record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":highlightedProductId")
  public async at(
    @TypedParam("highlightedProductId")
    highlightedProductId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceHighlightedProduct> {
    try {
      return await getaiCommerceHighlightedProductsHighlightedProductId({
        highlightedProductId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
