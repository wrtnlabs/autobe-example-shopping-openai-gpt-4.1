import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchaiCommerceTrendingProducts } from "../../../providers/patchaiCommerceTrendingProducts";
import { getaiCommerceTrendingProductsTrendingProductId } from "../../../providers/getaiCommerceTrendingProductsTrendingProductId";

import { IPageIAiCommerceTrendingProduct } from "../../../api/structures/IPageIAiCommerceTrendingProduct";
import { IAiCommerceTrendingProduct } from "../../../api/structures/IAiCommerceTrendingProduct";

@Controller("/aiCommerce/trendingProducts")
export class AicommerceTrendingproductsController {
  /**
   * Retrieve a paginated and filtered list of trending products
   * (ai_commerce_trending_products).
   *
   * Retrieve a paginated and filtered list of trending products from
   * ai_commerce_trending_products. This operation allows clients, admins, or
   * end users to obtain the most up-to-date and relevant trending product data,
   * supporting user-facing feeds, analytics dashboards, and trend monitoring
   * workflows respectively.
   *
   * The response includes essential details such as trending analytics score,
   * whether the status is manually overridden, and product references for each
   * entry. Proper pagination and sorting options ensure high-performance access
   * for large catalogues. Sensitive or internal analytics data may be filtered
   * or summarized depending on the requesting user's role and context as
   * determined by authorization logic in the business layer.
   *
   * Trending status is determined by platform analytics and, optionally, can be
   * manually overridden by administrators. This endpoint interacts closely with
   * related product and discovery endpoints and should be used in conjunction
   * with AI-powered personalization or homepage recommendation APIs when
   * building consumer-facing surfaces.
   *
   * Error handling includes proper status codes for query errors, unrecognized
   * parameters, or internal analytics errors. Only summary information for each
   * trending product is returned unless otherwise specified by request
   * context.
   *
   * @param connection
   * @param body Filter, sorting, and pagination parameters for listing trending
   *   products.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IAiCommerceTrendingProduct.IRequest,
  ): Promise<IPageIAiCommerceTrendingProduct.ISummary> {
    try {
      return await patchaiCommerceTrendingProducts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific trending product
   * (ai_commerce_trending_products).
   *
   * Fetch the detailed information for a specific trending product entry in
   * ai_commerce_trending_products by trendingProductId (UUID). This enables
   * retrieval of trending analytics, product reference, score, override flag,
   * and timestamp fields, with full support for both user-facing discovery and
   * administrative inspection.
   *
   * Security and permissions are essential; sensitive analytics or audit trail
   * fields may require elevated roles (e.g., admin) to access. Business logic
   * may enforce broader or narrower field visibility depending on the context
   * in which the API is called.
   *
   * This operation should be used in conjunction with product detail and
   * analytics endpoints for holistic trend monitoring and intervention
   * workflows. Error handling includes not found, forbidden, and invalid
   * parameter statuses as required.
   *
   * The path parameter trendingProductId is a required UUID that identifies the
   * target trending record. The endpoint merges information from trending,
   * analytics, and linked product tables as appropriate.
   *
   * @param connection
   * @param trendingProductId Unique identifier of the trending product record
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":trendingProductId")
  public async at(
    @TypedParam("trendingProductId")
    trendingProductId: string & tags.Format<"uuid">,
  ): Promise<IAiCommerceTrendingProduct> {
    try {
      return await getaiCommerceTrendingProductsTrendingProductId({
        trendingProductId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
