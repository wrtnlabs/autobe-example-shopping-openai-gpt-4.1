import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_inquiries } from "../../../../providers/post__shoppingMallAiBackend_customer_inquiries";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_inquiries } from "../../../../providers/patch__shoppingMallAiBackend_customer_inquiries";
import { get__shoppingMallAiBackend_customer_inquiries_$inquiryId } from "../../../../providers/get__shoppingMallAiBackend_customer_inquiries_$inquiryId";
import { put__shoppingMallAiBackend_customer_inquiries_$inquiryId } from "../../../../providers/put__shoppingMallAiBackend_customer_inquiries_$inquiryId";
import { delete__shoppingMallAiBackend_customer_inquiries_$inquiryId } from "../../../../providers/delete__shoppingMallAiBackend_customer_inquiries_$inquiryId";

import { IShoppingMallAiBackendInquiry } from "../../../../api/structures/IShoppingMallAiBackendInquiry";
import { IPageIShoppingMallAiBackendInquiry } from "../../../../api/structures/IPageIShoppingMallAiBackendInquiry";

@Controller("/shoppingMallAiBackend/customer/inquiries")
export class ShoppingmallaibackendCustomerInquiriesController {
  /**
   * Create a new inquiry (QnA/support ticket) for a customer or seller.
   *
   * This endpoint registers a new inquiry on behalf of a customer or seller.
   * The request body contains all necessary info: the user making the inquiry
   * (as customer_id or seller_id), the related product or order (optional), the
   * inquiry title, content, privacy status (public/private), and any initial
   * workflow status.
   *
   * Submission creates a new inquiry row, triggers relevant events or
   * notifications, and returns the persisted inquiry object. Security and
   * business rules require authentication (typically as customer or seller),
   * blocking creation for anonymous/unverified users.
   *
   * Input validation ensures required fields (e.g., title, body, private flag)
   * are provided and comply with business constraints (e.g., length, product
   * reference if required by category).
   *
   * @param connection
   * @param body Inquiry creation payload: owner, title, content, privacy,
   *   target entities.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendInquiry.ICreate,
  ): Promise<IShoppingMallAiBackendInquiry> {
    try {
      return await post__shoppingMallAiBackend_customer_inquiries({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate user inquiries/QnA tickets with advanced filtering.
   *
   * This endpoint retrieves a paginated and filtered list of user inquiries
   * (questions, support threads, or tickets) from across the shopping mall
   * platform. The inquiries can have relationships with customer, seller,
   * product, order, and can be filtered by query parameters such as title,
   * status, privacy flag, and date ranges for created/closed timestamps.
   *
   * Search can be conducted by end-users (for their own inquiries) or by
   * authorized admins (across all). Only non-deleted inquiries are included
   * unless an admin filters for deleted entries as part of compliance or
   * evidence reviews. Results include essential fields like inquiry type,
   * target product/order, status, and whether the inquiry is private.
   *
   * Common use: review of customer's support history, seller's Q&A lists, or
   * admin oversight for moderation and compliance. Pagination and sorting are
   * standard for result efficiency.
   *
   * @param connection
   * @param body Filter, sort, and pagination settings applied to inquiries
   *   search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendInquiry.IRequest,
  ): Promise<IPageIShoppingMallAiBackendInquiry.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_inquiries({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get the complete details of a specific inquiry by its ID.
   *
   * Allows a user, seller, or admin to load a detailed view of an inquiry by
   * its unique identifier. The inquiry data includes origin (customer or
   * seller), related product, order, title, message content, privacy flag,
   * status, closed time, and full audit trail timestamps.
   *
   * Used when viewing details, responding, handling moderation, or referencing
   * for after-sales operations. Access is generally scoped to the owner
   * (customer/seller) or admin; data is filtered accordingly for privacy and
   * security.
   *
   * Common errors include not found (invalid/nonexistent ID) or access denied
   * (insufficient permission).
   *
   * @param connection
   * @param inquiryId UUID of the inquiry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":inquiryId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendInquiry> {
    try {
      return await get__shoppingMallAiBackend_customer_inquiries_$inquiryId({
        customer,
        inquiryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific inquiry by ID (content, status, privacy, etc).
   *
   * Enables authorized users to update the content, metadata, or workflow
   * status of an inquiry. The endpoint only permits modifications by the owner
   * (customer/seller) or an administrator. The request body should encapsulate
   * updatable fields (title, body, privacy, status, workflow data), which are
   * validated per business rules for edit limits and audit requirements. A
   * successful update persists changes to storage and returns the new details
   * for the inquiry.
   *
   * Security: Authorization must validate the updater's ownership or role;
   * audit trails are generated for compliance and evidence. Edits to deleted or
   * finalized inquiries are disallowed. Related endpoints: detail inquiry GET,
   * delete/erase, and moderation logs.
   *
   * @param connection
   * @param inquiryId UUID of the inquiry to update.
   * @param body Fields allowed for update: title/body/privacy/status, etc.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":inquiryId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendInquiry.IUpdate,
  ): Promise<IShoppingMallAiBackendInquiry> {
    try {
      return await put__shoppingMallAiBackend_customer_inquiries_$inquiryId({
        customer,
        inquiryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (soft delete) an inquiry by ID, preserving evidence.
   *
   * Mark the specified inquiry as logically deleted by setting the deleted_at
   * field to the current timestamp. This operation may only be performed by
   * inquiry owner (customer/seller) or administrators. No data is physically
   * removed, supporting evidence preservation and compliance audits.
   *
   * Once deleted, the inquiry is excluded from normal user access and search
   * results but may remain available to authorized auditors. Attempted deletion
   * of non-existent or already deleted inquiries raises a meaningful business
   * exception for traceability. Success is indicated by void or confirmation
   * response; related endpoints include inquiry update, detail view, and
   * moderation/audit logs.
   *
   * @param connection
   * @param inquiryId UUID of the inquiry to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":inquiryId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_inquiries_$inquiryId({
        customer,
        inquiryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
