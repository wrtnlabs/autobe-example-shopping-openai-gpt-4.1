import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies } from "../../../../../providers/post__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies } from "../../../../../providers/patch__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies";
import { get__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies_$replyId } from "../../../../../providers/get__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies_$replyId";
import { put__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies_$replyId } from "../../../../../providers/put__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies_$replyId";
import { delete__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies_$replyId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies_$replyId";

import { IShoppingMallAiBackendInquiryReply } from "../../../../../api/structures/IShoppingMallAiBackendInquiryReply";
import { IPageIShoppingMallAiBackendInquiryReply } from "../../../../../api/structures/IPageIShoppingMallAiBackendInquiryReply";

@Controller("/shoppingMallAiBackend/customer/inquiries/:inquiryId/replies")
export class ShoppingmallaibackendCustomerInquiriesRepliesController {
  /**
   * Create a new reply for a specific inquiry.
   *
   * Creates a new reply for the specified inquiry. This operation allows both
   * customer and seller roles to participate in inquiry threads, as long as
   * their session matches the inquiry context. The request body includes the
   * reply message, privacy setting, and optionally a parent reply ID for
   * threaded discussion support.
   *
   * Full reply details are stored, and an associated audit trail is logged for
   * compliance and dispute evidence. The Prisma schema ensures all required
   * fields, such as body and privacy, are validated, and links to the parent
   * inquiry and optionally a parent reply.
   *
   * If the reply creation fails (e.g., due to invalid inquiryId or insufficient
   * permission), an error will be returned in accordance with business workflow
   * rules. Successful responses will return the complete reply entity with
   * timestamps, author reference, and relationship context.
   *
   * @param connection
   * @param inquiryId Unique identifier of the parent inquiry for which the
   *   reply is being created.
   * @param body Reply creation data: body text, privacy flag, and optional
   *   parent reply ID for threading.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendInquiryReply.ICreate,
  ): Promise<IShoppingMallAiBackendInquiryReply> {
    try {
      return await post__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies(
        {
          customer,
          inquiryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate the list of replies for a specific inquiry.
   *
   * Retrieve a paginated response list (threaded replies, answers,
   * clarifications) for a given inquiry. Filters allow users to limit by
   * author, date, privacy setting, or response nesting (thread depth). Access
   * is determined by inquiry privacy and requester role (customer, seller, or
   * admin); users only receive replies to inquiries they own or are
   * participants in, while admins may access all for compliance and
   * moderation.
   *
   * Results exclude deleted replies except for authorized compliance/admin
   * roles. The standard response also supports batch loading for moderation or
   * evidence views. Related endpoints include inquiry detail GET, create-reply,
   * moderation logs, and abuse reports.
   *
   * @param connection
   * @param inquiryId UUID of the inquiry for which to list replies.
   * @param body Filter and pagination criteria for replies to the inquiry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendInquiryReply.IRequest,
  ): Promise<IPageIShoppingMallAiBackendInquiryReply.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies(
        {
          customer,
          inquiryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific inquiry reply by ID, ensuring permission checks.
   *
   * Retrieve a specific reply to a given inquiry. This endpoint returns all
   * details about the reply, including its content, privacy setting (whether
   * the reply is public or private), author association (either a customer or
   * seller), parent reply if nested, and timestamps such as creation and update
   * times.
   *
   * This operation ensures the caller has permission to view the reply: for
   * private replies, only the participant customer, seller, or platform admins
   * can view; for public replies, anyone with access to the parent inquiry may
   * view. The underlying table, shopping_mall_ai_backend_inquiry_replies,
   * provides full evidence and audit through its model structure for business
   * compliance and traceability.
   *
   * This endpoint is typically used for displaying threaded Q&A or after-sales
   * communication in the user's purchase history, product detail, or support
   * interface. If the reply is not found or access is denied, the system will
   * return a 404 or appropriate authorization error consistent with business
   * audit policies.
   *
   * @param connection
   * @param inquiryId Unique identifier of the parent inquiry.
   * @param replyId Unique identifier for the reply to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":replyId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendInquiryReply> {
    try {
      return await get__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies_$replyId(
        {
          customer,
          inquiryId,
          replyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific reply to an inquiry by reply ID.
   *
   * Update an existing reply for a given inquiry. Only the author of the reply
   * (customer or seller) or authorized admins are allowed to perform the
   * update. This operation supports modification of reply content (body) and
   * privacy setting only.
   *
   * Any change is logged for business traceability and dispute compliance. The
   * request body must provide updated fields following the
   * shopping_mall_ai_backend_inquiry_replies model rules. If the reply or
   * inquiry is not found or if permissions are insufficient, an error response
   * is returned.
   *
   * This operation is mainly used for after-sales communication correction, Q&A
   * follow-ups, and compliance-driven corrections. All updates are captured in
   * historical snapshots for business recovery and audit.
   *
   * @param connection
   * @param inquiryId Unique identifier of the inquiry to which the reply
   *   belongs.
   * @param replyId Unique identifier for the reply to update.
   * @param body Update data for the reply: body text and privacy flag.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":replyId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendInquiryReply.IUpdate,
  ): Promise<IShoppingMallAiBackendInquiryReply> {
    try {
      return await put__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies_$replyId(
        {
          customer,
          inquiryId,
          replyId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a reply to a given inquiry (preserving for audit).
   *
   * Soft-deletes the specified reply belonging to a given inquiry. The
   * deleted_at field is set to the current timestamp to preserve the evidence
   * trail for business, compliance, or legal review. This operation is allowed
   * for reply authors (customer or seller) or admins with proper authorization.
   * The soft-deletion ensures that the reply is hidden from standard retrieval
   * but remains in the database for possible future audit or recovery needs.
   *
   * Attempting to delete a reply not authored by the current user or without
   * sufficient permission will result in an error response. This supports
   * regulatory and compliance scenarios in buyer-seller-admin engagement
   * workflows.
   *
   * @param connection
   * @param inquiryId Unique identifier of the inquiry to which the reply
   *   belongs.
   * @param replyId Unique identifier for the reply to erase (soft-delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":replyId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_inquiries_$inquiryId_replies_$replyId(
        {
          customer,
          inquiryId,
          replyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
