import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__shoppingMallAiBackend_customer_customers_$customerId_sessions_$sessionId } from "../../../../../providers/put__shoppingMallAiBackend_customer_customers_$customerId_sessions_$sessionId";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { delete__shoppingMallAiBackend_customer_customers_$customerId_sessions_$sessionId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_customers_$customerId_sessions_$sessionId";

import { IShoppingMallAiBackendCustomerSession } from "../../../../../api/structures/IShoppingMallAiBackendCustomerSession";

@Controller(
  "/shoppingMallAiBackend/customer/customers/:customerId/sessions/:sessionId",
)
export class ShoppingmallaibackendCustomerCustomersSessionsController {
  /**
   * Update a specific customer session for security, device, or lifecycle
   * management.
   *
   * This API updates attributes of a customer session, such as session tokens,
   * expiration, IP address, or termination status. It ensures session state and
   * security can be managed efficiently for scenarios like forced logout (by
   * admin or self), session renewal, or device deactivation. Only the session
   * owner (customer) or administrators can perform this update, aligning with
   * platform security policies and audit requirements.
   *
   * The session is identified by its sessionId and cross-verified with the
   * customerId for ownership and integrity. All modifications are logged for
   * compliance. If the session is expired or belongs to a different customer,
   * an error will be returned.
   *
   * Typical use cases include user-initiated device management, admin security
   * operations, or incident response that require explicit update of session
   * information. All updates conform with business logic for audit, evidence,
   * and regulatory compliance.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of the target customer.
   * @param sessionId Unique identifier (UUID) of the customer session to
   *   update.
   * @param body Session update payload (e.g., to terminate session, rotate
   *   token, or extend expiry).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCustomerSession.IUpdate,
  ): Promise<IShoppingMallAiBackendCustomerSession> {
    try {
      return await put__shoppingMallAiBackend_customer_customers_$customerId_sessions_$sessionId(
        {
          customer,
          customerId,
          sessionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically terminate (logout) a specific customer session for security/audit
   * purposes.
   *
   * This API performs logical deletion (termination) of a user session
   * identified by sessionId for a specific customer. It is used for explicit
   * log-out, forced device deactivation, or security event-driven session
   * termination.
   *
   * By setting terminated_at instead of removing the record, auditability and
   * session traceability are preserved for business compliance. The operation
   * ensures only the session owner (customer) or authorized administrators can
   * destroy the session, and all actions are logged for regulatory
   * requirements.
   *
   * After successful termination, the session cannot be reused for API
   * authentication. Error responses are provided if the session or customer
   * does not exist or is already terminated.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of the target customer.
   * @param sessionId Unique identifier (UUID) for the customer session being
   *   terminated.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_customers_$customerId_sessions_$sessionId(
        {
          customer,
          customerId,
          sessionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
