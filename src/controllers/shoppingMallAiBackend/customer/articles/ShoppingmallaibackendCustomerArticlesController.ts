import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_articles } from "../../../../providers/post__shoppingMallAiBackend_customer_articles";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { put__shoppingMallAiBackend_customer_articles_$articleId } from "../../../../providers/put__shoppingMallAiBackend_customer_articles_$articleId";
import { delete__shoppingMallAiBackend_customer_articles_$articleId } from "../../../../providers/delete__shoppingMallAiBackend_customer_articles_$articleId";

import { IShoppingMallAiBackendArticle } from "../../../../api/structures/IShoppingMallAiBackendArticle";

@Controller("/shoppingMallAiBackend/customer/articles")
export class ShoppingmallaibackendCustomerArticlesController {
  /**
   * Create a new article by an authorized customer (admin, seller, or customer
   * with permission).
   *
   * Allows an authenticated and authorized customer (admin, seller, or customer
   * with permission) to create a new article and publish it to a selected
   * channel. Validates fields such as title, content body, and channel ID.
   * Ensures that the title is unique within the channel, status is valid
   * (draft, published, etc.), and a proper audit trail is established.
   *
   * The newly created article includes timestamps, author identification, and
   * is available for public or restricted display according to the status.
   * Administrators may use this endpoint for publishing notices or formal
   * communications. All creation actions are logged for compliance, evidence,
   * and business analytics.
   *
   * @param connection
   * @param body The required data to create a new article, including title,
   *   body, channel, and author information.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendArticle.ICreate,
  ): Promise<IShoppingMallAiBackendArticle> {
    try {
      return await post__shoppingMallAiBackend_customer_articles({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing article's content, title, status, or business fields by
   * ID.
   *
   * Enables an authenticated and authorized customer to update an existing
   * article specified by its UUID. Permitted fields for update include title,
   * body, status, pin flag, and is_notice. The endpoint ensures the caller is
   * either the article's author or has the required administrative privileges.
   * On each update, the system generates a versioned snapshot for compliance
   * and evidence retention, and validates that the new title does not collide
   * with existing articles in the channel.
   *
   * Article status transitions and content edits are governed by business
   * rules. Unauthorized edits, attempts to update deleted articles, or
   * violations of business logic are denied with error messages. All changes
   * are timestamped and contribute to the evidence chain for the article.
   *
   * @param connection
   * @param articleId Unique identifier of the article to update.
   * @param body Updated article data (title, content, status, etc.) for the
   *   article.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":articleId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("articleId")
    articleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendArticle.IUpdate,
  ): Promise<IShoppingMallAiBackendArticle> {
    try {
      return await put__shoppingMallAiBackend_customer_articles_$articleId({
        customer,
        articleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an article (mark deleted_at for audit and compliance, not
   * removal).
   *
   * Allows an authenticated customer (author or admin) to mark an article as
   * deleted, setting deleted_at for compliance and evidence. The operation
   * blocks further edits or display for articles that are soft-deleted. The
   * endpoint strictly validates that only authors or privileged customers may
   * mark an article as deleted, and logs every deletion event in the compliance
   * chain. If the article is already deleted or not owned by the customer/role,
   * the operation will fail with descriptive errors.
   *
   * Soft deletion is required for audit traceability, legal defense, and
   * potential recovery. The action does not remove comments, files, or evidence
   * history; all associated data is retained per business retention policy.
   *
   * @param connection
   * @param articleId Unique identifier of the article to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":articleId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("articleId")
    articleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_articles_$articleId({
        customer,
        articleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
