import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__shoppingMallAiBackend_customer_articles_$articleId_comments_$commentId } from "../../../../../providers/get__shoppingMallAiBackend_customer_articles_$articleId_comments_$commentId";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { put__shoppingMallAiBackend_customer_articles_$articleId_comments_$commentId } from "../../../../../providers/put__shoppingMallAiBackend_customer_articles_$articleId_comments_$commentId";
import { delete__shoppingMallAiBackend_customer_articles_$articleId_comments_$commentId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_articles_$articleId_comments_$commentId";
import { post__shoppingMallAiBackend_customer_articles_$articleId_comments } from "../../../../../providers/post__shoppingMallAiBackend_customer_articles_$articleId_comments";

import { IShoppingMallAiBackendArticleComment } from "../../../../../api/structures/IShoppingMallAiBackendArticleComment";

@Controller("/shoppingMallAiBackend/customer/articles/:articleId/comments")
export class ShoppingmallaibackendCustomerArticlesCommentsController {
  /**
   * Retrieve a specific comment for an article by comment ID and article ID.
   *
   * This endpoint retrieves a particular comment for a given article based on
   * both the article's ID and the comment's ID. It ensures that only the
   * specific comment matching both identifiers is returned, along with all its
   * metadata (author, content, timestamps, status, and privacy setting).
   *
   * Comments are stored in the shopping_mall_ai_backend_article_comments table,
   * which holds each comment's relation to its parent article (and potentially
   * its parent comment for threads), author reference, content, and moderation
   * state. When requesting a comment, permissions are enforced such that only
   * allowed users can see secret or administratively restricted comments,
   * according to is_secret and status fields. If the comment does not exist or
   * the user lacks sufficient privileges, an appropriate error response is
   * returned.
   *
   * Typical uses include displaying an individual comment thread in a UI,
   * moderation lookup by an admin or seller, or user self-service comment
   * review. Related operations include retrieving all comments for an article
   * or updating/deleting a particular comment by its author or privileged
   * user.
   *
   * @param connection
   * @param articleId Unique identifier for the article to which the comment
   *   belongs.
   * @param commentId Unique identifier of the comment within the article.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("articleId")
    articleId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendArticleComment> {
    try {
      return await get__shoppingMallAiBackend_customer_articles_$articleId_comments_$commentId(
        {
          customer,
          articleId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a comment on an article by comment ID and article ID.
   *
   * This endpoint allows editing an existing comment for a specific article,
   * identified by the articleId and commentId. Only the comment's author or
   * users with moderator-level privileges may perform this action.
   *
   * The shopping_mall_ai_backend_article_comments entity is referenced to
   * ensure that only valid fields (body, is_secret, and applicable status) are
   * updated. The operation enforces moderation and edit workflow, creates an
   * audit trail or snapshot of the previous state, and ensures both input
   * validation (e.g., no empty content) and correct comment linkage.
   *
   * Business logic enforces update constraints: only editable comments, valid
   * states, and permissible user actions. Errors result if the comment or
   * article does not exist, the user lacks authorization, or validation fails
   * on the updated content.
   *
   * @param connection
   * @param articleId Unique article identifier to which the comment belongs.
   * @param commentId Unique comment identifier within the article.
   * @param body Updated comment details and fields allowed for change.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("articleId")
    articleId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendArticleComment.IUpdate,
  ): Promise<IShoppingMallAiBackendArticleComment> {
    try {
      return await put__shoppingMallAiBackend_customer_articles_$articleId_comments_$commentId(
        {
          customer,
          articleId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a comment on an article by article ID and comment ID.
   *
   * This endpoint marks a specific comment on an article as deleted for
   * compliance and evidence requirements. Instead of hard deletion, the
   * operation sets the deleted_at field, preserving the record for audit and
   * recovery workflows. The action may only be performed by the comment's
   * author, an admin, or other privileged roles according to business policy.
   *
   * Upon deletion, moderation status may be changed and an audit or snapshot
   * event logged. Soft deletion ensures that historic comment information
   * remains available for dispute resolution, compliance checks, and business
   * evidence. If the article or comment does not exist, or the user is not
   * authorized, an error is returned.
   *
   * It is important to note that the deleted comment will no longer be visible
   * in standard article comment queries but remains accessible for audit and
   * administrative review.
   *
   * @param connection
   * @param articleId Unique identifier of the article containing the comment.
   * @param commentId Unique identifier of the comment to be soft deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("articleId")
    articleId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_articles_$articleId_comments_$commentId(
        {
          customer,
          articleId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new comment on an article by article ID.
   *
   * This endpoint enables the creation of a new comment for a designated
   * article, specified by its article ID. To create a comment, the user
   * provides the comment contents and sets whether it is a secret (private)
   * comment via the is_secret field. Optionally, a comment may reference a
   * parent_id to support threaded discussions or replies.
   *
   * The operation references the shopping_mall_ai_backend_article_comments
   * entity, enforcing content validation (e.g., minimum length, content
   * guidelines) and permission control (e.g., only authenticated users may
   * create comments). The author_id is typically inferred from the session or
   * authentication token of the user.
   *
   * Business logic includes associating the new comment with the correct
   * article, assigning status according to moderation policy (e.g., 'pending',
   * 'visible'), and ensuring that only permissible comment types are created in
   * the context of the article's status. Error handling applies if the article
   * ID is invalid, the user is not authenticated, or the comment body does not
   * meet server-defined constraints.
   *
   * @param connection
   * @param articleId Identifier of the target article to which the comment will
   *   be added.
   * @param body Comment body, privacy flag, and optional parent comment ID for
   *   threading.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("articleId")
    articleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendArticleComment.ICreate,
  ): Promise<IShoppingMallAiBackendArticleComment> {
    try {
      return await post__shoppingMallAiBackend_customer_articles_$articleId_comments(
        {
          customer,
          articleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
