import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries } from "../../../../../providers/post__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries } from "../../../../../providers/patch__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries";
import { get__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries_$inquiryId } from "../../../../../providers/get__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries_$inquiryId";
import { delete__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries_$inquiryId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries_$inquiryId";

import { IShoppingMallAiBackendFavoriteInquiry } from "../../../../../api/structures/IShoppingMallAiBackendFavoriteInquiry";
import { IPageIShoppingMallAiBackendFavoriteInquiry } from "../../../../../api/structures/IPageIShoppingMallAiBackendFavoriteInquiry";

@Controller("/shoppingMallAiBackend/customer/favorites/:favoriteId/inquiries")
export class ShoppingmallaibackendCustomerFavoritesInquiriesController {
  /**
   * Add an inquiry to the customer's favorites list for Q&A/bookmarking
   * purposes.
   *
   * Creates a new mapping between a customer's favorite group/folder and an
   * inquiry (Q&A or support thread), allowing the customer to bookmark or track
   * specific support interactions, product Q&As, or helpdesk tickets for later
   * reference.
   *
   * The 'shopping_mall_ai_backend_favorite_inquiries' entity records the
   * association, captures a business snapshot of the inquiry at time of
   * favoriting, and is critical for audit, personalized dashboard experience,
   * and compliance notification. The business logic enforces authentication,
   * input validation, and ownership restrictions, ensuring that only the
   * customer can create favorites for their own account.
   *
   * Postconditions include successful favoriting reflected in notification
   * queues, dashboard updates, and evidence audit logs. Attempts to favorite an
   * already-favorited inquiry within the same favorite group yield an error,
   * while successful creation returns the created favorite-inquiry mapping with
   * current snapshot.
   *
   * @param connection
   * @param favoriteId The ID of the favorite entity/folder for associating the
   *   inquiry as a favorite.
   * @param body Inquiry association information for favoriting a Q&A; includes
   *   the inquiryId and optional tagging or folder metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createFavoriteInquiry(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendFavoriteInquiry.ICreate,
  ): Promise<IShoppingMallAiBackendFavoriteInquiry> {
    try {
      return await post__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries(
        {
          customer,
          favoriteId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and filter among a customer's favorite inquiries (Q&A/bookmarked
   * threads).
   *
   * Enables customers to search through their favorited inquiries (Q&A threads)
   * using filtering, sorting, and pagination parameters. Supports complex
   * business queries, such as filtering by status, date, content keyword, or
   * folder/tags association.
   *
   * Reference is to the 'shopping_mall_ai_backend_favorite_inquiries' model,
   * which links favorites to inquiries and caches inquiry status for
   * notification and evidence. Only authenticated customers can access their
   * own favorited inquiries, with business logic enforcing row-level ownership
   * checks.
   *
   * The response provides paginated summary information about each favorited
   * inquiry, including key metadata, favorited snapshot details, and optional
   * updates or notifications triggered by inquiry changes. Supports use cases
   * such as after-sales support follow-up, helpdesk ticket review, and personal
   * Q&A curation. Integrates with customer dashboard UI for improved service
   * personalization and retention.
   *
   * @param connection
   * @param favoriteId The UUID of the parent favorite entity (bookmark/folder)
   *   to search within.
   * @param body Filtering, search, sort, and pagination options for searching
   *   favorite inquiries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexFavoriteInquiries(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendFavoriteInquiry.IRequest,
  ): Promise<IPageIShoppingMallAiBackendFavoriteInquiry.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries(
        {
          customer,
          favoriteId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single favorited inquiry in customer's favorites by inquiryId.
   *
   * Fetches the latest snapshot and status of a customer's favorited inquiry,
   * identified by favoriteId (the bookmark context) and inquiryId (the inquiry
   * itself). Returns business evidence such as inquiry title, cached content,
   * favorited timestamp, and update status relative to the original inquiry.
   *
   * The operation leverages the 'shopping_mall_ai_backend_favorite_inquiries'
   * mapping entity, ensuring that only authenticated customers may access their
   * own favorited Q&A/support content. The business logic ensures compliance
   * and proper evidence for dispute or service audit scenarios.
   *
   * An error is returned if the specified favorite-inquiry relation does not
   * exist, isn't owned by the customer, or has been logically deleted. Success
   * returns a current snapshot of the favorited inquiry, suitable for detail
   * pages, notification preview, or evidence retrieval.
   *
   * @param connection
   * @param favoriteId The ID of the favorite entity (bookmark or folder).
   * @param inquiryId The ID of the inquiry associated with the favorite record
   *   to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":inquiryId")
  public async atFavoriteInquiry(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendFavoriteInquiry> {
    try {
      return await get__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries_$inquiryId(
        {
          customer,
          favoriteId,
          inquiryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove an inquiry from the customer's bookmarked favorites folder/group.
   *
   * Deletes a single inquiry association from a customer's favorites group or
   * folder, removing only the bookmark/reference and leaving the original
   * inquiry intact. This operation leverages the composite (favoriteId,
   * inquiryId) key to uniquely identify the favorite-inquiry record.
   *
   * Business workflow ensures only the authenticated owner may delete their
   * favorites, and triggers audit trail update and evidence preservation. Upon
   * successful deletion, no response body is returned. If the mapping does not
   * exist, or is not owned by the current customer, an error is raised. Used
   * for managing support Q&A bookmarks, personal dashboard hygiene, and
   * notification curation.
   *
   * Deletion is logical (soft) and remains in evidence logs for compliance as
   * required.
   *
   * @param connection
   * @param favoriteId Unique identifier for the customer's favorite entity or
   *   group where the inquiry is bookmarked.
   * @param inquiryId Unique identifier for the inquiry being removed from
   *   favorites.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":inquiryId")
  public async eraseFavoriteInquiry(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedParam("inquiryId")
    inquiryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_favorites_$favoriteId_inquiries_$inquiryId(
        {
          customer,
          favoriteId,
          inquiryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
