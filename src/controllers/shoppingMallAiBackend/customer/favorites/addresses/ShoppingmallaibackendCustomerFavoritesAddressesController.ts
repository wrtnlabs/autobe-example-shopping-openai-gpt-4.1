import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses } from "../../../../../providers/post__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses } from "../../../../../providers/patch__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses";
import { get__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses_$addressId } from "../../../../../providers/get__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses_$addressId";
import { delete__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses_$addressId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses_$addressId";

import { IShoppingMallAiBackendFavoriteAddress } from "../../../../../api/structures/IShoppingMallAiBackendFavoriteAddress";
import { IPageIShoppingMallAiBackendFavoriteAddress } from "../../../../../api/structures/IPageIShoppingMallAiBackendFavoriteAddress";

@Controller("/shoppingMallAiBackend/customer/favorites/:favoriteId/addresses")
export class ShoppingmallaibackendCustomerFavoritesAddressesController {
  /**
   * Add an address as a favorite for the customer in the specified
   * group/folder.
   *
   * Allows the customer to favorite a new address in the given group/folder,
   * establishing a link and storing an address snapshot. If the mapping already
   * exists, returns the existing record. All audit fields such as creation time
   * are included. Only authorized customers may insert into their own favorite
   * sets.
   *
   * @param connection
   * @param favoriteId Globally unique identifier of the favorite group/folder
   *   where the address will be favored.
   * @param body Creation info for favorite address link (must include address
   *   reference).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendFavoriteAddress.ICreate,
  ): Promise<IShoppingMallAiBackendFavoriteAddress> {
    try {
      return await post__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses(
        {
          customer,
          favoriteId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List paginated favorited addresses for the authenticated customer in the
   * specified favorite group.
   *
   * Lists customer-favorited addresses under a given favorite group/folder by
   * favoriteId. Returns a paginated list of address snapshot records as stored
   * at the time of favoriting, supporting legacy business requirement for
   * snapshot integrity regardless of later address changes. Only covers
   * addresses favorited by the customer, not other customers. Ownership and
   * access to the favorite group are enforced for security.
   *
   * @param connection
   * @param favoriteId Globally unique identifier of the favorite folder/group
   *   being queried.
   * @param body Parameter object for searching and paginating favorite address
   *   entries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendFavoriteAddress.IRequest,
  ): Promise<IPageIShoppingMallAiBackendFavoriteAddress.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses(
        {
          customer,
          favoriteId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed snapshot info for a specific favorited address.
   *
   * Returns details of a favorited address from within a given favorite
   * group/folder for the authenticated customer. The endpoint validates both
   * favorite and address association. Returns all snapshot data about the
   * address as it was at the time the customer favorited it. If either mapping
   * is missing or the customer is not the owner, returns access denied or not
   * found.
   *
   * @param connection
   * @param favoriteId Globally unique identifier of the parent favorite group
   *   or folder.
   * @param addressId Globally unique identifier of the favorited address entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":addressId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedParam("addressId")
    addressId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendFavoriteAddress> {
    try {
      return await get__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses_$addressId(
        {
          customer,
          favoriteId,
          addressId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a customer's favorited address from their favorites list.
   *
   * Removes a specific address from the user's favorites, targeting the
   * favorite address entity by both favoriteId (favorite bookmark) and
   * addressId (delivery address) identifiers.
   *
   * This operation permanently deletes the favorite address record, ensuring
   * user autonomy over address management and keeping the favorites list up to
   * date. Only authenticated customers may delete their own favorited
   * addresses. The operation references the
   * 'shopping_mall_ai_backend_favorite_addresses' table, which stores evidence
   * of when an address was favorited for personalized checkout flows and
   * notification triggers.
   *
   * Additional security checks ensure that attempting to delete addresses not
   * belonging to the authenticated customer results in a permission error. The
   * business logic includes audit trail preservation for evidence requirements,
   * as mandated by compliance guidelines.
   *
   * No response body is returned for successful deletion to keep the API
   * lightweight; success may be indicated by an HTTP 204 status code.
   * Attempting to delete a non-existent favorite or address yields a suitable
   * error message.
   *
   * @param connection
   * @param favoriteId The unique identifier (UUID) of the favorite entity
   *   associated with the address to delete.
   * @param addressId The unique identifier (UUID) of the address to be removed
   *   from favorites.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":addressId")
  public async eraseFavoriteAddress(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedParam("addressId")
    addressId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_favorites_$favoriteId_addresses_$addressId(
        {
          customer,
          favoriteId,
          addressId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
