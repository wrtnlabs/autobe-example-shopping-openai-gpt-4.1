import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_favorites_$favoriteId_products } from "../../../../../providers/post__shoppingMallAiBackend_customer_favorites_$favoriteId_products";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_favorites_$favoriteId_products } from "../../../../../providers/patch__shoppingMallAiBackend_customer_favorites_$favoriteId_products";
import { get__shoppingMallAiBackend_customer_favorites_$favoriteId_products_$productId } from "../../../../../providers/get__shoppingMallAiBackend_customer_favorites_$favoriteId_products_$productId";
import { delete__shoppingMallAiBackend_customer_favorites_$favoriteId_products_$productId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_favorites_$favoriteId_products_$productId";

import { IShoppingMallAiBackendFavoriteProduct } from "../../../../../api/structures/IShoppingMallAiBackendFavoriteProduct";
import { IPageIShoppingMallAiBackendFavoriteProduct } from "../../../../../api/structures/IPageIShoppingMallAiBackendFavoriteProduct";

@Controller("/shoppingMallAiBackend/customer/favorites/:favoriteId/products")
export class ShoppingmallaibackendCustomerFavoritesProductsController {
  /**
   * Add a product to a customer's favorited products under a given favoriteId.
   *
   * Adds a product to the set of favorited products under a given favorite
   * folder/group for the customer. The API enforces uniqueness so that the same
   * product is favorited only once per favorite group. If already present, this
   * is a no-op. Returns the newly created (or existing) favorite product link
   * record. Authorization is enforced to ensure only the owner can create
   * favorite links in their favorited group.
   *
   * @param connection
   * @param favoriteId Globally unique identifier for the favorite group/folder
   *   to which the product will be added.
   * @param body Favorite product creation info, must include productId.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendFavoriteProduct.ICreate,
  ): Promise<IShoppingMallAiBackendFavoriteProduct> {
    try {
      return await post__shoppingMallAiBackend_customer_favorites_$favoriteId_products(
        {
          customer,
          favoriteId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get paginated, filtered list of products favorited by the customer under a
   * given favoriteId.
   *
   * Retrieves a paginated, filterable list of products that have been favorited
   * by the customer under a specific favorite folder or group. The list is
   * customized to the session and selection context identified by favoriteId.
   * Pagination and sorting parameters are accepted in the request body,
   * supporting UI scalability. The operation checks the favorite's existence
   * and ownership before listing entries.
   *
   * @param connection
   * @param favoriteId Globally unique identifier of the parent favorite group
   *   or folder
   * @param body Filtering, sorting, and pagination parameters for searching
   *   favorites.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendFavoriteProduct.IRequest,
  ): Promise<IPageIShoppingMallAiBackendFavoriteProduct.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_favorites_$favoriteId_products(
        {
          customer,
          favoriteId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed info for a favorited product under a favorite folder by
   * productId.
   *
   * Retrieves details for a specific favorited product under the given favorite
   * folder or group. Validates that the requesting customer owns the favorite
   * and that the productId is actually linked. Returns detailed summary
   * including favorited timestamp and product info. If the favorite or product
   * link does not exist or permission is denied, returns an appropriate error.
   *
   * @param connection
   * @param favoriteId Globally unique identifier of the parent favorite
   *   group/folder.
   * @param productId Globally unique identifier of the favorited product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":productId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendFavoriteProduct> {
    try {
      return await get__shoppingMallAiBackend_customer_favorites_$favoriteId_products_$productId(
        {
          customer,
          favoriteId,
          productId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Unfavorite a product in a customer's favorite group by deleting the
   * mapping.
   *
   * Removes the favorite-mark from a product in the customer's specified
   * favorite group/folder. This deletes the link record, i.e., the product is
   * no longer shown in the customer's favorites for the folder. If the mapping
   * does not exist or is already deleted, returns success (idempotency
   * guaranteed). Only the owner can perform this operation, enforcing correct
   * authorization.
   *
   * @param connection
   * @param favoriteId Globally unique identifier of the parent favorite
   *   group/folder.
   * @param productId Globally unique identifier of product to unfavorite.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":productId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteId")
    favoriteId: string & tags.Format<"uuid">,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_favorites_$favoriteId_products_$productId(
        {
          customer,
          favoriteId,
          productId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
