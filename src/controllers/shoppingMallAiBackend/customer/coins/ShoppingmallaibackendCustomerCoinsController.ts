import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_coins } from "../../../../providers/post__shoppingMallAiBackend_customer_coins";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_coins } from "../../../../providers/patch__shoppingMallAiBackend_customer_coins";
import { get__shoppingMallAiBackend_customer_coins_$coinId } from "../../../../providers/get__shoppingMallAiBackend_customer_coins_$coinId";
import { put__shoppingMallAiBackend_customer_coins_$coinId } from "../../../../providers/put__shoppingMallAiBackend_customer_coins_$coinId";
import { delete__shoppingMallAiBackend_customer_coins_$coinId } from "../../../../providers/delete__shoppingMallAiBackend_customer_coins_$coinId";

import { IShoppingMallAiBackendCoin } from "../../../../api/structures/IShoppingMallAiBackendCoin";
import { IPageIShoppingMallAiBackendCoin } from "../../../../api/structures/IPageIShoppingMallAiBackendCoin";

@Controller("/shoppingMallAiBackend/customer/coins")
export class ShoppingmallaibackendCustomerCoinsController {
  /**
   * Create a new digital coin ledger for a customer or seller.
   *
   * This endpoint creates a new coin ledger (wallet) for a user or seller in
   * the shopping_mall_ai_backend_coins table. The creation workflow may be
   * triggered automatically during onboarding, account upgrades, or manual
   * admin actions for lost/damaged wallets.
   *
   * Requesting users must be authorized to create ledgers (usually their own or
   * by admin privilege). The request body includes owner (customer or seller),
   * and initial coin amounts (optional, typically zero). All records are
   * initialized with audit timestamps and compliance trace. Duplicate ledgers
   * for the same owner are prevented per schema constraints.
   *
   * If creation is successful, details of the new coin ledger are returned. All
   * actions are logged as business events for legal and system auditability.
   * Errors are raised for duplicate or unauthorized attempts.
   *
   * @param connection
   * @param body Information about the owner of the new coin ledger, plus
   *   optional initial balances.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCoin.ICreate,
  ): Promise<IShoppingMallAiBackendCoin> {
    try {
      return await post__shoppingMallAiBackend_customer_coins({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list digital coin ledgers for users or sellers with filtering
   * and pagination.
   *
   * This endpoint allows authenticated users (customers or sellers) to search
   * for and retrieve a paginated collection of their own or authorized digital
   * coin ledgers, as stored in the shopping_mall_ai_backend_coins table.
   *
   * It supports advanced search, filtering, and sortingâ€”for example, by coin
   * balance, account status, or creation/update range. Pagination parameters
   * help optimize data usage and interface performance. Only the ledger owner
   * or administrators may access this data; all access and search events are
   * logged for audit compliance.
   *
   * The response provides summary or detail views per required output, and
   * supports both customer and seller coin accounts.
   *
   * @param connection
   * @param body Filter, search, and sort options for coin ledger search (owner,
   *   balance range, pagination, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCoin.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCoin> {
    try {
      return await patch__shoppingMallAiBackend_customer_coins({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific digital coin ledger by coinId.
   *
   * This operation retrieves the details of a digital coin ledger given its
   * unique coinId. The shopping_mall_ai_backend_coins table contains
   * information such as total accrued coins, available coin balance,
   * expired/lost status, and audit timestamps.
   *
   * Only the owner (customer or seller) and system administrators may access
   * coin ledger information. This endpoint is typically used in personal wallet
   * detail pages, business analytics, and customer support requests.
   *
   * Results include all business and audit fields required for transaction
   * verification, wallet management, or troubleshooting balance anomalies. If
   * the record is missing or restricted, an error is returned.
   *
   * @param connection
   * @param coinId Unique identifier of the coin ledger to access.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":coinId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCoin> {
    try {
      return await get__shoppingMallAiBackend_customer_coins_$coinId({
        customer,
        coinId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update digital coin ledger information by coinId.
   *
   * This endpoint allows an authenticated user or admin to update a specific
   * coin ledger, identified by coinId, within the
   * shopping_mall_ai_backend_coins table.
   *
   * Fields eligible for update may include owner (customer or seller), balance
   * adjustments (admin only), reactivation or deactivation, and other business
   * metadata. The operation enforces full audit tracking for compliance and
   * reversibility. Updates must meet validation constraints and cannot
   * circumvent existing schema rules (no ownership conflicts, double spend,
   * etc.).
   *
   * If successful, the API returns the updated coin ledger, including new
   * audit/metadata. Errors return if record or permissions are invalid, or
   * schema validation fails.
   *
   * @param connection
   * @param coinId Unique identifier for the coin ledger to be updated.
   * @param body Fields for update (owner, status, coin adjustments, etc.),
   *   subject to schema validation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":coinId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCoin.IUpdate,
  ): Promise<IShoppingMallAiBackendCoin> {
    try {
      return await put__shoppingMallAiBackend_customer_coins_$coinId({
        customer,
        coinId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (mark as deleted_at) a coin ledger by coinId for regulatory
   * compliance.
   *
   * This endpoint marks a specified coin ledger (wallet) as deleted by setting
   * the deleted_at timestamp in the shopping_mall_ai_backend_coins table.
   * Soft-deletion ensures records are retained for evidence, regulatory audit,
   * and future recovery in line with business and legal requirements.
   *
   * Only the ledger's owner (customer or seller) or privileged administrators
   * may initiate deletion. Once soft-deleted, the ledger is hidden from general
   * access, and further transactions are blocked.
   *
   * Attempts to delete non-existent or unauthorized coin ledgers result in
   * proper error signaling. Full deletion is intentionally not allowed
   * (preserving audit/evidence).
   *
   * @param connection
   * @param coinId ID of the coin ledger to be soft-deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":coinId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_coins_$coinId({
        customer,
        coinId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
