import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_customer_coins_$coinId_transactions } from "../../../../../providers/patch__shoppingMallAiBackend_customer_coins_$coinId_transactions";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { get__shoppingMallAiBackend_customer_coins_$coinId_transactions_$transactionId } from "../../../../../providers/get__shoppingMallAiBackend_customer_coins_$coinId_transactions_$transactionId";

import { IPageIShoppingMallAiBackendCoinTransaction } from "../../../../../api/structures/IPageIShoppingMallAiBackendCoinTransaction";
import { IShoppingMallAiBackendCoinTransaction } from "../../../../../api/structures/IShoppingMallAiBackendCoinTransaction";

@Controller("/shoppingMallAiBackend/customer/coins/:coinId/transactions")
export class ShoppingmallaibackendCustomerCoinsTransactionsController {
  /**
   * Search and retrieve paginated coin ledger transactions for a wallet by
   * coinId.
   *
   * The endpoint provides authenticated users (or admins) access to the full
   * ledger of coin transactions for a specific coin wallet, referenced by
   * coinId. The shopping_mall_ai_backend_coin_transactions table stores
   * immutable records for accrual, usage, adjustment, or administrative actions
   * affecting the coin balance.
   *
   * The endpoint supports advanced filters such as activity range, transaction
   * type, amount thresholds, and full pagination for use in UI dashboards or
   * transaction histories. Users may only access their own transactions unless
   * provided administrative oversight per business and compliance rules.
   *
   * The paged response returns relevant business and evidence fields to support
   * review, dispute handling, or transaction investigation. All access is
   * tracked for audit compliance.
   *
   * @param connection
   * @param coinId Unique identifier of the coin ledger whose transactions are
   *   retrieved.
   * @param body Optional filter parameters (type, range, amount, pagination,
   *   etc.) for transaction search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCoinTransaction.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCoinTransaction> {
    try {
      return await patch__shoppingMallAiBackend_customer_coins_$coinId_transactions(
        {
          customer,
          coinId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific coin transaction within a coin ledger by coinId and
   * transactionId.
   *
   * This endpoint retrieves a specific coin transaction associated with a given
   * coinId and transactionId. Each transaction in the
   * shopping_mall_ai_backend_coin_transactions table reflects a change (usage,
   * accrual, expiry, adjustment, admin action) on the coin ledger for a
   * customer or seller.
   *
   * Users are only able to access their own transactions; admins may retrieve
   * records for compliance and business reasons. Data includes all audit
   * metadata, balances, type, reason, and contextual description, supporting
   * evidence needs or transaction troubleshooting.
   *
   * Responses are comprehensive and meet all audit/compliance requirements.
   * Errors are returned for missing, restricted, or non-existent records.
   *
   * @param connection
   * @param coinId Identifier of the coin ledger associated with the transaction
   *   record.
   * @param transactionId Unique transaction record identifier within the coin
   *   ledger.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":transactionId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
    @TypedParam("transactionId")
    transactionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCoinTransaction> {
    try {
      return await get__shoppingMallAiBackend_customer_coins_$coinId_transactions_$transactionId(
        {
          customer,
          coinId,
          transactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
