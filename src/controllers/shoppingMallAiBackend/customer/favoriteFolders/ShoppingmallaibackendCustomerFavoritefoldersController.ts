import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_favoriteFolders } from "../../../../providers/post__shoppingMallAiBackend_customer_favoriteFolders";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_favoriteFolders } from "../../../../providers/patch__shoppingMallAiBackend_customer_favoriteFolders";
import { get__shoppingMallAiBackend_customer_favoriteFolders_$favoriteFolderId } from "../../../../providers/get__shoppingMallAiBackend_customer_favoriteFolders_$favoriteFolderId";
import { put__shoppingMallAiBackend_customer_favoriteFolders_$favoriteFolderId } from "../../../../providers/put__shoppingMallAiBackend_customer_favoriteFolders_$favoriteFolderId";
import { delete__shoppingMallAiBackend_customer_favoriteFolders_$favoriteFolderId } from "../../../../providers/delete__shoppingMallAiBackend_customer_favoriteFolders_$favoriteFolderId";

import { IShoppingMallAiBackendFavoriteFolder } from "../../../../api/structures/IShoppingMallAiBackendFavoriteFolder";
import { IPageIShoppingMallAiBackendFavoriteFolder } from "../../../../api/structures/IPageIShoppingMallAiBackendFavoriteFolder";

@Controller("/shoppingMallAiBackend/customer/favoriteFolders")
export class ShoppingmallaibackendCustomerFavoritefoldersController {
  /**
   * Create a customer-defined favorite folder/group for improved content
   * organization.
   *
   * Creates a new customer-defined favorite folder for organizing favorite
   * products, addresses, inquiries, or other types of bookmarks. The business
   * logic supports folder naming, optional description, and initializes
   * ownership evidence/audit trail with customer reference and timestamps.
   *
   * The operation is restricted to authenticated customers, ensuring that every
   * folder is uniquely named per customer (no duplicates). Used in content
   * management dashboards, notification configuration, and UX customization. On
   * success, returns the created favorite folder's metadata and configuration
   * for immediate use by client UIs or notification services.
   *
   * @param connection
   * @param body Properties for the new favorite folder (e.g., name, optional
   *   description).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createFavoriteFolder(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendFavoriteFolder.ICreate,
  ): Promise<IShoppingMallAiBackendFavoriteFolder> {
    try {
      return await post__shoppingMallAiBackend_customer_favoriteFolders({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve paginated/searchable list of a customer's favorite folders.
   *
   * Enables customers to retrieve a paginated, filtered list of all favorite
   * folders currently associated with their account. This supports
   * folder/grouping UI, improved notification management, and better
   * organization of bookmarks (products, addresses, inquiries, etc).
   *
   * The underlying model is 'shopping_mall_ai_backend_favorite_folders', which
   * stores folder names, descriptions, and grouping metadata. Security ensures
   * only the owner may view their own folders, with business logic for
   * evidence, audit, and UI integration. Pagination and filter options allow
   * for custom folder searches, such as by partial name, creation date, or
   * custom tags.
   *
   * The response provides a list of folder summaries with essential properties,
   * supporting folder selection UIs and notification setup workflows for
   * personalized content.
   *
   * @param connection
   * @param body Folder search, filtering, and pagination parameters for folder
   *   listing queries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexFavoriteFolders(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendFavoriteFolder.IRequest,
  ): Promise<IPageIShoppingMallAiBackendFavoriteFolder.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_favoriteFolders({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get properties/metadata for a specific favorite folder owned by the
   * customer.
   *
   * Fetches metadata and configuration details for a specific favorite folder
   * using its unique folder ID. Returns summary information such as name,
   * description, associated customer, creation/update times, and deletion
   * status (for evidence/audit). Only the folder's owner may retrieve its
   * details; security and evidence logic are enforced for compliance.
   *
   * Used by UIs for folder editing, notification channel management, and
   * organizing grouped favorites such as products, addresses, or inquiries.
   * Folders are central to personalized content and notification management
   * flows, supporting higher engagement and content discoverability.
   *
   * @param connection
   * @param favoriteFolderId The unique identifier of the favorite folder to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":favoriteFolderId")
  public async atFavoriteFolder(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteFolderId")
    favoriteFolderId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendFavoriteFolder> {
    try {
      return await get__shoppingMallAiBackend_customer_favoriteFolders_$favoriteFolderId(
        {
          customer,
          favoriteFolderId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a customer's favorite folder for personalized organization needs.
   *
   * This API endpoint allows an authenticated customer to update the name or
   * description of a specific favorite folder they own. The operation verifies
   * folder existence, customer ownership, and ensures that folder names remain
   * unique per customer. If unauthorized or attempting to update a deleted
   * folder, a descriptive error is returned.
   *
   * Updating a favorite folder improves user experience by allowing better
   * organization and group-based notification for favorites. The system tracks
   * update timestamps, and changes are included in the business evidence trail.
   * This endpoint is not available to other customers or administrators unless
   * acting on behalf of the owner in exceptional cases.
   *
   * Folder updates are used primarily by customers who wish to rename, clarify,
   * or reorganize their collection folders for favorites. The API will validate
   * that the new folder name, if changed, does not conflict with another folder
   * under the same customer. Attempts to update non-owned folder IDs are
   * denied.
   *
   * @param connection
   * @param favoriteFolderId The unique identifier of the favorite folder to
   *   update
   * @param body Data to update for the favorite folder, including the new name
   *   or description
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":favoriteFolderId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteFolderId")
    favoriteFolderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendFavoriteFolder.IUpdate,
  ): Promise<IShoppingMallAiBackendFavoriteFolder> {
    try {
      return await put__shoppingMallAiBackend_customer_favoriteFolders_$favoriteFolderId(
        {
          customer,
          favoriteFolderId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (logical removal) of a customer's favorite folder by marking
   * deleted_at.
   *
   * This API enables an authenticated customer to logically delete their own
   * favorite folder, facilitating personalized organization without actual data
   * removal. It sets the deleted_at timestamp as evidence for audit and
   * compliance. The endpoint ensures that only folders owned by the customer
   * and not already deleted can be targeted. Linked favorites will remain
   * accessible, preserving evidence and notification history. This operation
   * supports recoverability for compliance but prevents further use for
   * organization or grouping.
   *
   * Soft deletion is critical for user-centric data retention and audit trails.
   * The system will block operations if the folder does not belong to the
   * requester or is already deleted, preventing unauthorized access. All such
   * actions are logged for future review.
   *
   * @param connection
   * @param favoriteFolderId The unique identifier of the favorite folder to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":favoriteFolderId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("favoriteFolderId")
    favoriteFolderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_favoriteFolders_$favoriteFolderId(
        {
          customer,
          favoriteFolderId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
