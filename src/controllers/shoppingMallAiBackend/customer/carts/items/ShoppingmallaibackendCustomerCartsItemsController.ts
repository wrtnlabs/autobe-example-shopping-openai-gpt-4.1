import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_carts_$cartId_items } from "../../../../../providers/post__shoppingMallAiBackend_customer_carts_$cartId_items";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_carts_$cartId_items } from "../../../../../providers/patch__shoppingMallAiBackend_customer_carts_$cartId_items";
import { get__shoppingMallAiBackend_customer_carts_$cartId_items_$itemId } from "../../../../../providers/get__shoppingMallAiBackend_customer_carts_$cartId_items_$itemId";
import { put__shoppingMallAiBackend_customer_carts_$cartId_items_$itemId } from "../../../../../providers/put__shoppingMallAiBackend_customer_carts_$cartId_items_$itemId";
import { delete__shoppingMallAiBackend_customer_carts_$cartId_items_$itemId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_carts_$cartId_items_$itemId";

import { IShoppingMallAiBackendCartItem } from "../../../../../api/structures/IShoppingMallAiBackendCartItem";
import { IPageIShoppingMallAiBackendCartItem } from "../../../../../api/structures/IPageIShoppingMallAiBackendCartItem";

@Controller("/shoppingMallAiBackend/customer/carts/:cartId/items")
export class ShoppingmallaibackendCustomerCartsItemsController {
  /**
   * Adds an item to a user's cart by cartId, specifying product snapshot and
   * quantity. (shopping_mall_ai_backend_cart_items).
   *
   * Add a new item to an existing shopping cart identified by cartId. The
   * operation allows specifying a product snapshot and quantity, along with
   * applicable product options and variant/bundle selection if available. The
   * function validates product eligibility, inventory, and enforces cart-level
   * constraints (e.g., only one entry per product option combination, maximum
   * cart size, business policies). All relevant evidence and audit details are
   * attached as required for traceability and rollback in pre-checkout
   * workflow. Security checks ensure that only the cart owner (or session-bound
   * guest) may perform this action, and failures (inventory constraint or
   * invalid request) result in descriptive error codes.
   *
   * @param connection
   * @param cartId Target cart's unique identifier (UUID).
   * @param body Details for the new cart item to be created, including product
   *   snapshot, quantity, options, and bundle selection if applicable.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCartItem.ICreate,
  ): Promise<IShoppingMallAiBackendCartItem> {
    try {
      return await post__shoppingMallAiBackend_customer_carts_$cartId_items({
        customer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginate and filter items inside a shopping cart by cartId.
   *
   * Search and paginate items within a specific shopping cart.
   *
   * This API call enables a detailed review of all items currently present in a
   * single cart, allows for filtering by item attributes (quantity,
   * bundle_code, note, etc.), and supports paginated result navigation. Its
   * primary use is during checkout, customer review, or for administrative
   * support. All access is permission checked to ensure only cart owners or
   * authorized personnel may view the item list. Attempts to view unauthorized
   * or deleted carts will yield an error.
   *
   * @param connection
   * @param cartId Unique identifier of the cart whose items are being listed
   *   (UUID).
   * @param body Query and pagination configuration for cart items listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCartItem.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCartItem> {
    try {
      return await patch__shoppingMallAiBackend_customer_carts_$cartId_items({
        customer,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * View a single cart item and its full attributes by itemId and cartId.
   *
   * Get the full details of a specific item in a shopping cart, including
   * quantity, bundle selection, option codes, and note. The operation is
   * critical for customers to verify, edit, or delete cart items before
   * checkout. All item details, including references to the snapshot of the
   * product at the add-to-cart time, are provided. Unauthorized access to items
   * in another user's cart returns an error.
   *
   * @param connection
   * @param cartId Unique identifier of the cart holding the item (UUID).
   * @param itemId Unique identifier of the item to view inside the cart (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":itemId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCartItem> {
    try {
      return await get__shoppingMallAiBackend_customer_carts_$cartId_items_$itemId(
        {
          customer,
          cartId,
          itemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Updates fields of a cart item by itemId within cartId.
   * (shopping_mall_ai_backend_cart_items).
   *
   * Update an existing item in a shopping cart. The endpoint allows the client
   * to change details like quantity, selected options, bundle, and associated
   * notes for the item identified by itemId within cartId. Item update logic
   * enforces all business rules for cart consistency, product eligibility, and
   * inventory. On success, a new evidence snapshot is created. The user must
   * have permission to modify the cart (either owner/member or a linked guest
   * session). Errors are clearly described if constraints are violated (e.g.,
   * quantity exceeds stock, unauthorized action).
   *
   * @param connection
   * @param cartId Target cart's unique identifier (UUID).
   * @param itemId Target cart item's identifier (UUID).
   * @param body Fields to update for the cart item, such as quantity, option
   *   selection, bundle, or note.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":itemId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCartItem.IUpdate,
  ): Promise<IShoppingMallAiBackendCartItem> {
    try {
      return await put__shoppingMallAiBackend_customer_carts_$cartId_items_$itemId(
        {
          customer,
          cartId,
          itemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft deletes a specific item from a user's cart using cartId and itemId.
   * (shopping_mall_ai_backend_cart_items).
   *
   * Delete a cart item from the user's cart. This endpoint performs a soft
   * deletion of the item (setting deleted_at timestamp) to maintain evidence
   * and enable compliance with business and legal data retention policies. Only
   * the cart owner or session-linked guest has permission to delete items. The
   * endpoint will fail with a clear error if attempting to delete an item that
   * is locked or referenced by an in-progress order. Evidence and audit detail
   * are also preserved for rollback and review.
   *
   * @param connection
   * @param cartId Target cart's unique identifier (UUID).
   * @param itemId Target cart item's identifier (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":itemId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_carts_$cartId_items_$itemId(
        {
          customer,
          cartId,
          itemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
