import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_customer_deposits_$depositId_transactions } from "../../../../../providers/patch__shoppingMallAiBackend_customer_deposits_$depositId_transactions";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { get__shoppingMallAiBackend_customer_deposits_$depositId_transactions_$transactionId } from "../../../../../providers/get__shoppingMallAiBackend_customer_deposits_$depositId_transactions_$transactionId";

import { IPageIShoppingMallAiBackendDepositTransaction } from "../../../../../api/structures/IPageIShoppingMallAiBackendDepositTransaction";
import { IShoppingMallAiBackendDepositTransaction } from "../../../../../api/structures/IShoppingMallAiBackendDepositTransaction";

@Controller("/shoppingMallAiBackend/customer/deposits/:depositId/transactions")
export class ShoppingmallaibackendCustomerDepositsTransactionsController {
  /**
   * List all transactions for a deposit ledger (with filters and pagination).
   *
   * Retrieve an audit trail and full transaction history for a given deposit
   * ledger. This operation provides administrators, deposit holders (customers
   * or sellers) with searchable and paginated access to all events affecting a
   * deposit's balance, including accruals, usage, withdrawals, incidents, and
   * manual adjustments.
   *
   * Resulting data allows users to monitor account activity, confirm business
   * events, or investigate anomalies. The returned list is filtered to include
   * only transactions for which the requester has legitimate access rights per
   * platform policy.
   *
   * Detailed business context—such as change types, amounts, references, and
   * balance before/after—are included. This enables customers, sellers, and
   * staff to ensure ledger consistency, perform monthly reconciliation, and
   * address audit/compliance needs. Authorization checks must validate the
   * user's right to view this deposit's transaction log. Expected errors
   * include not found, forbidden, or unauthorized access for invalid depositId
   * or mismatched roles.
   *
   * @param connection
   * @param depositId UUID of the deposit ledger to query
   * @param body Request body containing filtering, sorting, and pagination
   *   parameters for the deposit transaction log.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendDepositTransaction.IRequest,
  ): Promise<IPageIShoppingMallAiBackendDepositTransaction.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_deposits_$depositId_transactions(
        {
          customer,
          depositId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific deposit transaction's detailed audit information.
   *
   * Fetch detailed data for a specific deposit transaction event referenced by
   * its unique transactionId. Provides fields such as change type, amount,
   * balance before and after, audit references, manual/admin reason codes, and
   * timestamps.
   *
   * This endpoint supports both account holders (customer/seller) and
   * authorized administrators in investigating deposit ledger history,
   * responding to disputes, or confirming compliance events. Sensitive data
   * access is governed by strict authorization logic; non-owners or
   * unauthorized requests are forbidden. Expected errors: not found,
   * unauthorized, or forbidden if transaction does not belong to depositId or
   * viewing rights are missing.
   *
   * @param connection
   * @param depositId UUID of the deposit ledger to which this transaction
   *   belongs
   * @param transactionId UUID of the specific transaction record to fetch
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":transactionId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
    @TypedParam("transactionId")
    transactionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendDepositTransaction> {
    try {
      return await get__shoppingMallAiBackend_customer_deposits_$depositId_transactions_$transactionId(
        {
          customer,
          depositId,
          transactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
