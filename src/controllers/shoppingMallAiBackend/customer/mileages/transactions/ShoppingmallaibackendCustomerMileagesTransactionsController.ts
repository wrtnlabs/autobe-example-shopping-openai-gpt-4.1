import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_customer_mileages_$mileageId_transactions } from "../../../../../providers/patch__shoppingMallAiBackend_customer_mileages_$mileageId_transactions";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { get__shoppingMallAiBackend_customer_mileages_$mileageId_transactions_$transactionId } from "../../../../../providers/get__shoppingMallAiBackend_customer_mileages_$mileageId_transactions_$transactionId";

import { IPageIShoppingMallAiBackendMileageTransaction } from "../../../../../api/structures/IPageIShoppingMallAiBackendMileageTransaction";
import { IShoppingMallAiBackendMileageTransaction } from "../../../../../api/structures/IShoppingMallAiBackendMileageTransaction";

@Controller("/shoppingMallAiBackend/customer/mileages/:mileageId/transactions")
export class ShoppingmallaibackendCustomerMileagesTransactionsController {
  /**
   * Paginate and search the full transaction history for a single mileage
   * ledger.
   *
   * Retrieve all transaction events (accrual, use, expiration, manual/admin
   * adjustment) for a specific mileage ledger by mileageId. This endpoint
   * returns a paginated, filtered listing of changes to the given ledger, with
   * each event including type, value, description, before/after state, and
   * audit timestamps.
   *
   * Access is restricted to ledger owners and duly authorized administrators
   * (customer, admin, seller as business/role permits). Errors expected on
   * authorization failure, not found, or invalid filter criteria. The
   * information supports self-service user review, staff support, and
   * compliance investigations into reward accrual and spending history.
   *
   * @param connection
   * @param mileageId UUID of the mileage ledger for which to fetch
   *   transactions.
   * @param body Transaction log search, filter, and pagination parameters for
   *   the specified mileage ledger.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendMileageTransaction.IRequest,
  ): Promise<IPageIShoppingMallAiBackendMileageTransaction.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_mileages_$mileageId_transactions(
        {
          customer,
          mileageId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific mileage ledger transaction by mileageId and
   * transactionId.
   *
   * This endpoint allows authorized users to retrieve a specific transaction
   * entry within a given mileage ledger. The
   * shopping_mall_ai_backend_mileage_transactions table provides an immutable,
   * audit-grade record of all changes (accrual, use, expire, manual adjustment,
   * donation) for customer and seller mileage ledgers.
   *
   * Requesting a transaction by mileageId and transactionId enables compliance
   * auditors, customers, or support staff to view ledger history for dispute
   * resolution, reward validation, or fraud investigation. The operation
   * enforces strict authorization policiesâ€”only the mileage owner (customer or
   * seller) or designated business administrators can access the transaction
   * detail.
   *
   * Returned data includes the change_type, amount, reference, before/after
   * balance, business reason, and narrative context for this transaction, as
   * defined in the schema. This endpoint integrates with evidence requirements
   * for refunds, promo campaigns, and reward point policies. If the record does
   * not exist or is forbidden, an appropriate error is returned.
   *
   * @param connection
   * @param mileageId Unique identifier of the mileage ledger to which the
   *   transaction belongs.
   * @param transactionId Unique identifier for the specific transaction within
   *   the mileage ledger.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":transactionId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
    @TypedParam("transactionId")
    transactionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendMileageTransaction> {
    try {
      return await get__shoppingMallAiBackend_customer_mileages_$mileageId_transactions_$transactionId(
        {
          customer,
          mileageId,
          transactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
