import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_mileages } from "../../../../providers/post__shoppingMallAiBackend_customer_mileages";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_mileages } from "../../../../providers/patch__shoppingMallAiBackend_customer_mileages";
import { get__shoppingMallAiBackend_customer_mileages_$mileageId } from "../../../../providers/get__shoppingMallAiBackend_customer_mileages_$mileageId";

import { IShoppingMallAiBackendMileage } from "../../../../api/structures/IShoppingMallAiBackendMileage";
import { IPageIShoppingMallAiBackendMileage } from "../../../../api/structures/IPageIShoppingMallAiBackendMileage";

@Controller("/shoppingMallAiBackend/customer/mileages")
export class ShoppingmallaibackendCustomerMileagesController {
  /**
   * Create a new mileage/points ledger for a customer or seller.
   *
   * Creates a new mileage (rewards points) ledger for a specified customer or
   * seller. Typical use cases include welcoming new users to loyalty programs,
   * handling bulk migrations, or granting admin-initiated bonus point
   * accounts.
   *
   * Validates that the referenced customer/seller does not already possess an
   * active mileage ledger (uniqueness enforced per owner). The operation
   * records the initial accrual, status, timestamps, and administrative or
   * system context as appropriate. Response returns the fully-detailed mileage
   * ledger upon creation. Error handling includes duplicate ledger detection,
   * bad input, and insufficient permissions.
   *
   * @param connection
   * @param body Full data required for new mileage ledger creation (owner
   *   references, initial balance, business rationale).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendMileage.ICreate,
  ): Promise<IShoppingMallAiBackendMileage> {
    try {
      return await post__shoppingMallAiBackend_customer_mileages({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve all mileage ledgers (with search and paging).
   *
   * Search and list available mileage (rewards points) ledgers accessible to
   * the customer, seller, or, with appropriate permissions, as a system
   * administrator/staff. Enables users to view their rewards balances and past
   * accrual, while supporting staff in cross-account audits or loyalty
   * analytics.
   *
   * Supports advanced filtering and search capabilities for auditing,
   * analytics, loyalty program reporting, and compliance. Response includes
   * summary data: balances, expiration info, and user/seller linkage as
   * dictated by the mileage entity.
   *
   * Errors may occur on unauthorized access, forbidden fields, or if search
   * criteria violate business or technical constraints. Filtering and ordering
   * are designed to meet business reporting, audit, and UX requirements for
   * large datasets.
   *
   * @param connection
   * @param body Request parameters for searching, filtering, and paginating
   *   mileage ledger index.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendMileage.IRequest,
  ): Promise<IPageIShoppingMallAiBackendMileage.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_mileages({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get mileage ledger details by ID (full audit context).
   *
   * Get complete details for a specific mileage/point ledger by identifier.
   * This endpoint provides all business context and evidence—owner, status,
   * audit timestamps, accruals, on-hold and expired values, and cross-linkage
   * to customer/seller accounts—per business compliance rules.
   *
   * Designed for consuming in user dashboards, support operations, and
   * financial or loyalty program audits. Authentication and authorization must
   * ensure only legitimate owners or staff access sensitive mileage records.
   * Returns errors for missing, unauthorized, or forbidden mileageId.
   *
   * @param connection
   * @param mileageId UUID of the mileage ledger to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mileageId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendMileage> {
    try {
      return await get__shoppingMallAiBackend_customer_mileages_$mileageId({
        customer,
        mileageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
