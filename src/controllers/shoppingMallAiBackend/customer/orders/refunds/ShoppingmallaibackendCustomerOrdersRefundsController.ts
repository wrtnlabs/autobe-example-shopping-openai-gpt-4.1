import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_customer_orders_$orderId_refunds } from "../../../../../providers/patch__shoppingMallAiBackend_customer_orders_$orderId_refunds";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { get__shoppingMallAiBackend_customer_orders_$orderId_refunds_$refundId } from "../../../../../providers/get__shoppingMallAiBackend_customer_orders_$orderId_refunds_$refundId";
import { put__shoppingMallAiBackend_customer_orders_$orderId_refunds_$refundId } from "../../../../../providers/put__shoppingMallAiBackend_customer_orders_$orderId_refunds_$refundId";
import { delete__shoppingMallAiBackend_customer_orders_$orderId_refunds_$refundId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_orders_$orderId_refunds_$refundId";

import { IPageIShoppingMallAiBackendOrderRefund } from "../../../../../api/structures/IPageIShoppingMallAiBackendOrderRefund";
import { IShoppingMallAiBackendOrderRefund } from "../../../../../api/structures/IShoppingMallAiBackendOrderRefund";

@Controller("/shoppingMallAiBackend/customer/orders/:orderId/refunds")
export class ShoppingmallaibackendCustomerOrdersRefundsController {
  /**
   * List and search all refunds for a specific order, with support for
   * pagination.
   *
   * Retrieves all refund requests and completed refunds for a given order, with
   * support for filtering, pagination, and sorting. Returns detailed status,
   * reason, amount, currency, and progress evidence for each refund. Users may
   * view only their own orders, while admins may view any order. Records are
   * filtered for compliance (exclude soft-deleted unless specified in query).
   *
   * @param connection
   * @param orderId Unique identifier of the order whose refunds are being
   *   queried.
   * @param body Search, filter, and pagination criteria for order refunds.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderRefund.IRequest,
  ): Promise<IPageIShoppingMallAiBackendOrderRefund> {
    try {
      return await patch__shoppingMallAiBackend_customer_orders_$orderId_refunds(
        {
          customer,
          orderId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific order refund record by order and refund ID.
   *
   * Fetches an individual refund record for a specific order using orderId and
   * refundId as composite keys. Includes complete information such as refund
   * reason, status, amounts, currency, completion dates, and any business
   * process notes or evidence. This is vital for tracking refund resolution and
   * compliance, as well as providing status transparency to customers. Security
   * ensures only owners, admins, or authorized staff access the record.
   *
   * @param connection
   * @param orderId ID for the parent order.
   * @param refundId ID for the specific refund record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":refundId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrderRefund> {
    try {
      return await get__shoppingMallAiBackend_customer_orders_$orderId_refunds_$refundId(
        {
          customer,
          orderId,
          refundId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific order refund (reason, amount, status, business decision).
   *
   * Updates an existing refund record related to an order, updating fields such
   * as refund type, status, reason, or business notes. Enables both the
   * customer and an administrator to process additional information, provide
   * status updates, or correct earlier requests. Security and validation logic
   * ensure only authorized users may update the record and that all changes are
   * auditable. State transitions must follow business rules and compliance
   * policies.
   *
   * @param connection
   * @param orderId Order ID linked to the refund record.
   * @param refundId Target refund ID to be updated.
   * @param body Refund information or status update for the order refund
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":refundId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderRefund.IUpdate,
  ): Promise<IShoppingMallAiBackendOrderRefund> {
    try {
      return await put__shoppingMallAiBackend_customer_orders_$orderId_refunds_$refundId(
        {
          customer,
          orderId,
          refundId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a refund record for an order, retaining audit evidence.
   *
   * Logically deletes (soft deletes) a refund record associated with an order.
   * This allows for evidence retention and regulatory compliance by preserving
   * the record without exposing it to regular queries. Only the involved
   * customer or an admin may execute this operation. Acts by setting the
   * deleted_at timestamp and is fully tracked in audit logs.
   *
   * @param connection
   * @param orderId Order ID linked to the refund record.
   * @param refundId Target refund ID to be soft deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":refundId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("refundId")
    refundId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_orders_$orderId_refunds_$refundId(
        {
          customer,
          orderId,
          refundId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
