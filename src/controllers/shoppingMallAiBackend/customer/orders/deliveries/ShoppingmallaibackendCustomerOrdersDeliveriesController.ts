import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_customer_orders_$orderId_deliveries } from "../../../../../providers/patch__shoppingMallAiBackend_customer_orders_$orderId_deliveries";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { get__shoppingMallAiBackend_customer_orders_$orderId_deliveries_$deliveryId } from "../../../../../providers/get__shoppingMallAiBackend_customer_orders_$orderId_deliveries_$deliveryId";

import { IPageIShoppingMallAiBackendOrderDelivery } from "../../../../../api/structures/IPageIShoppingMallAiBackendOrderDelivery";
import { IShoppingMallAiBackendOrderDelivery } from "../../../../../api/structures/IShoppingMallAiBackendOrderDelivery";

@Controller("/shoppingMallAiBackend/customer/orders/:orderId/deliveries")
export class ShoppingmallaibackendCustomerOrdersDeliveriesController {
  /**
   * Search and list deliveries for a specific order.
   * (shopping_mall_ai_backend_order_deliveries).
   *
   * Retrieves a filtered and paginated list of delivery/shipment records for a
   * specific order, supporting business logic for multi-shipment, split
   * shipments, international logistics, and real-time tracking. Only deliveries
   * linked to the target order are returned. Each result includes shipment
   * status, tracking, provider, shipping/delivery timestamps, and can be
   * filtered by delivery status or time windows. Security controls ensure only
   * order-linked actors may access detailed status and tracking. Used for
   * fulfillment tracking, support, and compliance checks.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID).
   * @param body Filtering and pagination parameters for delivery search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderDelivery.IRequest,
  ): Promise<IPageIShoppingMallAiBackendOrderDelivery> {
    try {
      return await patch__shoppingMallAiBackend_customer_orders_$orderId_deliveries(
        {
          customer,
          orderId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific delivery for an order.
   * (shopping_mall_ai_backend_order_deliveries).
   *
   * Retrieve detailed shipment/delivery information for a given delivery
   * associated with a specific order. The endpoint details shipping status,
   * tracking, provider, timestamps, and business context. Used by authorized
   * actors—customers, sellers, or admins—to audit delivery status, view
   * fulfillment progress, or support issue resolution. Ensures proper access
   * control and business rule compliance for shipment record access. Errors
   * include record not found, insufficient permissions, or business rule
   * violations.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID).
   * @param deliveryId Delivery's unique identifier (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deliveryId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrderDelivery> {
    try {
      return await get__shoppingMallAiBackend_customer_orders_$orderId_deliveries_$deliveryId(
        {
          customer,
          orderId,
          deliveryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
