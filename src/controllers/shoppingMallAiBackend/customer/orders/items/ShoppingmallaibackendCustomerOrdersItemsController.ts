import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_customer_orders_$orderId_items } from "../../../../../providers/patch__shoppingMallAiBackend_customer_orders_$orderId_items";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { get__shoppingMallAiBackend_customer_orders_$orderId_items_$itemId } from "../../../../../providers/get__shoppingMallAiBackend_customer_orders_$orderId_items_$itemId";

import { IPageIShoppingMallAiBackendOrderItem } from "../../../../../api/structures/IPageIShoppingMallAiBackendOrderItem";
import { IShoppingMallAiBackendOrderItem } from "../../../../../api/structures/IShoppingMallAiBackendOrderItem";

@Controller("/shoppingMallAiBackend/customer/orders/:orderId/items")
export class ShoppingmallaibackendCustomerOrdersItemsController {
  /**
   * Retrieve a paginated, filterable list of items within a specific order for
   * review or fulfillment. Referenced table:
   * shopping_mall_ai_backend_order_items.
   *
   * This endpoint retrieves the set of items for a specific order, offering
   * advanced search, pagination, and filtering by attributes such as product,
   * bundle, or options. Order items include detailed product references,
   * quantity, pricing, discounts, and provide the basis for returns, exchanges,
   * or fulfilment events. Only users with appropriate authorization (the
   * purchasing customer, assigned seller, or admin) may access this resource,
   * and RBAC is enforced in the service logic. Pagination is required for large
   * orders to ensure efficiency. Error handling includes access denial for
   * unauthorized users or invalid order references.
   *
   * Order items are modeled in the Prisma DB as
   * shopping_mall_ai_backend_order_items, each referencing its parent order,
   * associated products/bundles, and snapshotting product details for
   * compliance. Results may include summary info or full detail depending on
   * roles and query parameters.
   *
   * @param connection
   * @param orderId Unique identifier of the target order (UUID format).
   * @param body Parameters for searching, filtering, and paginating order items
   *   for this order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderItem.IRequest,
  ): Promise<IPageIShoppingMallAiBackendOrderItem.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_orders_$orderId_items({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed data for a specific order item by order and item ID.
   * Prisma table: shopping_mall_ai_backend_order_items.
   *
   * Fetches comprehensive details about a single order item for a given order
   * and item ID. Includes all business attributes such as quantity, unit/final
   * price, selected bundle or options, discounts, and product snapshot at order
   * time. Security logic ensures only authorized party (order owner, seller,
   * admin) can view details; the endpoint is used for order tracking, review
   * processing, returns/exchange initiation, or support inquiries. If the item
   * does not exist within the referenced order or the requester lacks
   * authorization, an error is returned.
   *
   * The endpoint strictly follows the structure of
   * shopping_mall_ai_backend_order_items from the schema, supporting
   * cross-entity validation (orderâ†”item). Useful for audit trail purposes and
   * business workflow automation.
   *
   * @param connection
   * @param orderId Unique identifier of the order (UUID format).
   * @param itemId Identifier for the specific item within the order (UUID
   *   format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":itemId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrderItem> {
    try {
      return await get__shoppingMallAiBackend_customer_orders_$orderId_items_$itemId(
        {
          customer,
          orderId,
          itemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
