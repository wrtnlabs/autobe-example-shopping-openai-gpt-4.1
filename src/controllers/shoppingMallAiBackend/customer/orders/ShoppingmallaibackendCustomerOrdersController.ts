import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_orders } from "../../../../providers/post__shoppingMallAiBackend_customer_orders";
import { CustomerAuth } from "../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_orders } from "../../../../providers/patch__shoppingMallAiBackend_customer_orders";
import { get__shoppingMallAiBackend_customer_orders_$orderId } from "../../../../providers/get__shoppingMallAiBackend_customer_orders_$orderId";
import { put__shoppingMallAiBackend_customer_orders_$orderId } from "../../../../providers/put__shoppingMallAiBackend_customer_orders_$orderId";
import { delete__shoppingMallAiBackend_customer_orders_$orderId } from "../../../../providers/delete__shoppingMallAiBackend_customer_orders_$orderId";

import { IShoppingMallAiBackendOrder } from "../../../../api/structures/IShoppingMallAiBackendOrder";
import { IPageIShoppingMallAiBackendOrder } from "../../../../api/structures/IPageIShoppingMallAiBackendOrder";

@Controller("/shoppingMallAiBackend/customer/orders")
export class ShoppingmallaibackendCustomerOrdersController {
  /**
   * Creates a new order with customer, seller, channel, and line item data.
   * (shopping_mall_ai_backend_orders).
   *
   * Creates a new commercial order for a customer, seller, or channel context.
   * The request must include line items and contextual business data (cart
   * reference, channel, seller, currency, amount, etc.). Business logic
   * validates each input element for eligibility, inventory, and compliance.
   * Policy may restrict simultaneously open or overlapping orders for a
   * customer to avoid conflicts. Sensitive business evidence fields (codes,
   * amounts) are auto-managed, and downstream workflow (e.g., payment,
   * fulfillment) is triggered as per order policy. Failures are returned with
   * clear error explanations.
   *
   * @param connection
   * @param body Order creation data, including customer, channel, items, and
   *   payment context.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendOrder.ICreate,
  ): Promise<IShoppingMallAiBackendOrder> {
    try {
      return await post__shoppingMallAiBackend_customer_orders({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieves a paginated, filtered list of orders with advanced search.
   * (shopping_mall_ai_backend_orders).
   *
   * Search for and retrieve a filtered, paginated list of orders across
   * customer or seller context. This operation enables complex queries by
   * status, channel, currency, customer/seller, date range, and amount.
   * Pagination and sorting is provided, and the response includes summary
   * details for each order. Access control is enforced based on the user's role
   * and ownership context. Sensitive details are masked for non-owner queries
   * unless policy grants full access (e.g., seller or admin cases).
   *
   * @param connection
   * @param body Search and filter parameters for order search and pagination.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendOrder.IRequest,
  ): Promise<IPageIShoppingMallAiBackendOrder.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_customer_orders({
        customer,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieves detailed information for an order by orderId.
   * (shopping_mall_ai_backend_orders).
   *
   * Retrieve complete detailed information about an order, including line
   * items, status, timeline, fulfillment, payment, and evidence snapshots where
   * permitted. The endpoint enforces access control; only the order's owner
   * (customer/seller) or admins with business need can access full details.
   * Partial masking is applied for sensitive data depending on user
   * permissions. Used by customer (order tracking), seller (fulfillment), and
   * admin (audit/helpdesk) flows.
   *
   * @param connection
   * @param orderId Unique identifier for the order (UUID) to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":orderId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrder> {
    try {
      return await get__shoppingMallAiBackend_customer_orders_$orderId({
        customer,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Updates permitted fields on an existing order identified by orderId.
   * (shopping_mall_ai_backend_orders).
   *
   * Update order details for a specific order, identified by orderId. The
   * fields permitted for update are defined by business rules and may include
   * status changes, contact details, fulfillment instructions, or buyer/seller
   * notes. Data validation applies according to the orderâ€™s current state and
   * role context. Only the order's owner, assigned seller, or admin may perform
   * updates. Immutable audit histories are recorded for each update. Operations
   * failing validation return descriptive business error codes/messages.
   *
   * @param connection
   * @param orderId Unique identifier of the order to update (UUID).
   * @param body Permitted order fields for update (status, delivery, contact,
   *   notes, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":orderId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrder.IUpdate,
  ): Promise<IShoppingMallAiBackendOrder> {
    try {
      return await put__shoppingMallAiBackend_customer_orders_$orderId({
        customer,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Performs a soft delete of an order identified by orderId.
   * (shopping_mall_ai_backend_orders).
   *
   * Soft deletes an order with the specified orderId by setting the deleted_at
   * timestamp. The record is preserved for audit and legal compliance per
   * business policy. Order deletion is only allowed when business rules permit
   * (not finalized or legally required to retain). Permission is required
   * (order owner, assigned seller, or admin). Errors provide clear, actionable
   * feedback when operation is not permitted by policy.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID) to be soft deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":orderId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_orders_$orderId({
        customer,
        orderId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
