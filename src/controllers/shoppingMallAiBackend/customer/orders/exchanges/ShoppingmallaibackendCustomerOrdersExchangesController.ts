import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__shoppingMallAiBackend_customer_orders_$orderId_exchanges_$exchangeId } from "../../../../../providers/get__shoppingMallAiBackend_customer_orders_$orderId_exchanges_$exchangeId";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { put__shoppingMallAiBackend_customer_orders_$orderId_exchanges_$exchangeId } from "../../../../../providers/put__shoppingMallAiBackend_customer_orders_$orderId_exchanges_$exchangeId";
import { delete__shoppingMallAiBackend_customer_orders_$orderId_exchanges_$exchangeId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_orders_$orderId_exchanges_$exchangeId";

import { IShoppingMallAiBackendOrderExchange } from "../../../../../api/structures/IShoppingMallAiBackendOrderExchange";

@Controller(
  "/shoppingMallAiBackend/customer/orders/:orderId/exchanges/:exchangeId",
)
export class ShoppingmallaibackendCustomerOrdersExchangesController {
  /**
   * Get a specific order item exchange record by order and exchange ID.
   *
   * This operation fetches a single after-sales exchange record associated with
   * a specific order and order item. It provides detailed information necessary
   * for a customer or admin to understand the current state or resolution
   * history of the exchange, including status transitions, request and
   * completion times, reason, and evidence. Security considerations ensure only
   * the owner (customer) or authorized admin can access the record, as
   * sensitive customer service details are returned. The operation references
   * both the Orders and OrderExchanges tables with all relevant exchange fields
   * and their business context.
   *
   * @param connection
   * @param orderId Unique identifier for the target order (UUID).
   * @param exchangeId Unique identifier for the target exchange (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("exchangeId")
    exchangeId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrderExchange> {
    try {
      return await get__shoppingMallAiBackend_customer_orders_$orderId_exchanges_$exchangeId(
        {
          customer,
          orderId,
          exchangeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an order item exchange, such as status, reasons, or admin decision.
   *
   * Enables updating the details or status of an exchange request for an order
   * item. Permits actions such as providing extra information, escalating an
   * exchange, or updating the business decision and processing notes. All state
   * changes are validated against business workflow and eligibility rules, and
   * changes are logged for compliance and dispute auditing. Only the involved
   * customer, assigned seller, or an admin may update the record, with access
   * checks enforced.
   *
   * @param connection
   * @param orderId Unique identifier for the order to which the exchange
   *   belongs.
   * @param exchangeId Unique identifier for the specific exchange being
   *   updated.
   * @param body Updated exchange information or process decision for the
   *   exchange case.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("exchangeId")
    exchangeId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderExchange.IUpdate,
  ): Promise<IShoppingMallAiBackendOrderExchange> {
    try {
      return await put__shoppingMallAiBackend_customer_orders_$orderId_exchanges_$exchangeId(
        {
          customer,
          orderId,
          exchangeId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an order item exchange for evidence retention and compliance.
   *
   * Marks an exchange as deleted in the system using a soft delete (sets the
   * deleted_at timestamp), preserving the full history and evidence for future
   * compliance and audit requests. Returns no body on success. Only the
   * involved customer or an administrator may execute this operation, and all
   * actions are recorded in the audit trail. The exchange remains in the
   * database but is excluded from normal queries and user access except for
   * authorized purposes.
   *
   * @param connection
   * @param orderId Order ID the exchange belongs to.
   * @param exchangeId Target exchange ID to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("exchangeId")
    exchangeId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_orders_$orderId_exchanges_$exchangeId(
        {
          customer,
          orderId,
          exchangeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
