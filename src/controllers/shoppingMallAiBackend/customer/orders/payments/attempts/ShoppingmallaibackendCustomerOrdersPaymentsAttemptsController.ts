import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId_attempts } from "../../../../../../providers/patch__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId_attempts";
import { CustomerAuth } from "../../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../../decorators/payload/CustomerPayload";
import { get__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId_attempts_$attemptId } from "../../../../../../providers/get__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId_attempts_$attemptId";

import { IPageIShoppingMallAiBackendOrderPaymentAttempt } from "../../../../../../api/structures/IPageIShoppingMallAiBackendOrderPaymentAttempt";
import { IShoppingMallAiBackendOrderPaymentAttempt } from "../../../../../../api/structures/IShoppingMallAiBackendOrderPaymentAttempt";

@Controller(
  "/shoppingMallAiBackend/customer/orders/:orderId/payments/:paymentId/attempts",
)
export class ShoppingmallaibackendCustomerOrdersPaymentsAttemptsController {
  /**
   * Search and list payment attempts for an order payment.
   * (shopping_mall_ai_backend_order_payment_attempts).
   *
   * Retrieve a paginated, filtered, and searchable list of all payment attempts
   * for a specific payment attached to an order. The endpoint allows filtering
   * by attempt state, provider, result, dates, etc., and supports pagination
   * for efficiency. Each record includes attempt state, errors, provider code,
   * and timestamps. The operation facilitates audit, support, and fraud
   * monitoring. Only authorized actors can access this endpoint. Errors are
   * reported for not found or insufficient permissions.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID).
   * @param paymentId Payment's unique identifier (UUID).
   * @param body Search and filter parameters for payment attempt listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderPaymentAttempt.IRequest,
  ): Promise<IPageIShoppingMallAiBackendOrderPaymentAttempt> {
    try {
      return await patch__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId_attempts(
        {
          customer,
          orderId,
          paymentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific payment attempt for an order payment.
   * (shopping_mall_ai_backend_order_payment_attempts).
   *
   * Retrieve details of a specific payment attempt for a payment attached to an
   * order. This operation provides the full record including all fields stored
   * for the attemptâ€”result state, errors, provider code, request/completion
   * timestamps. Used for compliance, audit, and support troubleshooting by
   * authorized actors. Only attempts owned by the referenced payment on the
   * order are accessible. Returns an error status if not found or
   * unauthorized.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID).
   * @param paymentId Payment's unique identifier (UUID).
   * @param attemptId Payment attempt's unique identifier (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":attemptId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedParam("attemptId")
    attemptId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrderPaymentAttempt> {
    try {
      return await get__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId_attempts_$attemptId(
        {
          customer,
          orderId,
          paymentId,
          attemptId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
