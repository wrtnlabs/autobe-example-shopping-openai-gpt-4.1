import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_customer_orders_$orderId_payments } from "../../../../../providers/post__shoppingMallAiBackend_customer_orders_$orderId_payments";
import { CustomerAuth } from "../../../../../decorators/CustomerAuth";
import { CustomerPayload } from "../../../../../decorators/payload/CustomerPayload";
import { patch__shoppingMallAiBackend_customer_orders_$orderId_payments } from "../../../../../providers/patch__shoppingMallAiBackend_customer_orders_$orderId_payments";
import { get__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId } from "../../../../../providers/get__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId";
import { put__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId } from "../../../../../providers/put__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId";
import { delete__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId } from "../../../../../providers/delete__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId";

import { IShoppingMallAiBackendOrderPayment } from "../../../../../api/structures/IShoppingMallAiBackendOrderPayment";
import { IPageIShoppingMallAiBackendOrderPayment } from "../../../../../api/structures/IPageIShoppingMallAiBackendOrderPayment";

@Controller("/shoppingMallAiBackend/customer/orders/:orderId/payments")
export class ShoppingmallaibackendCustomerOrdersPaymentsController {
  /**
   * Create a payment for a specific order.
   * (shopping_mall_ai_backend_order_payments).
   *
   * Creates a new payment entry for an order by specifying the payment method,
   * amount, currency, and optional external reference. This operation validates
   * the orderâ€™s eligibility for new payment (e.g., not already fully
   * paid/cancelled), and enforces business rules around status, duplicate
   * prevention, and required information. The payment is initialized with a
   * status such as 'pending' and tracks details such as creation time and
   * currency. The system supports multiple payment methods, split payments, and
   * currency validation. Auditing and regulatory compliance for payment
   * creation are maintained through the shopping_mall_ai_backend_order_payments
   * table. The action accepts a structured request body and returns the
   * complete payment record upon success. Error scenarios include invalid order
   * status, insufficient data, and validation failures.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID).
   * @param body Payment creation payload including method, amount, currency,
   *   and provider references.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderPayment.ICreate,
  ): Promise<IShoppingMallAiBackendOrderPayment> {
    try {
      return await post__shoppingMallAiBackend_customer_orders_$orderId_payments(
        {
          customer,
          orderId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated payment records for the given order from
   * shopping_mall_ai_backend_order_payments.
   *
   * Enables search and retrieval of all payments (including multiple
   * methods/splits) for a specific order, supporting advanced filtering,
   * business review, and audit scenarios. Pagination and filtering help manage
   * large order payment histories. Authorization logic ensures that only
   * eligible users (order owner, seller, admin) can view payment data. Helpful
   * for resolving payment issues, refund tracking, or operational analytics.
   * Errors include access denial for unauthorized users or missing records.
   *
   * @param connection
   * @param orderId Order identifier for payment search (UUID format).
   * @param body Filter/search parameters for order payments query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderPayment.IRequest,
  ): Promise<IPageIShoppingMallAiBackendOrderPayment> {
    try {
      return await patch__shoppingMallAiBackend_customer_orders_$orderId_payments(
        {
          customer,
          orderId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch full business/payment details for a specific payment within an order.
   * Referenced table: shopping_mall_ai_backend_order_payments.
   *
   * Provides in-depth status and audit information for a single payment record
   * in the specified order. Returns all business and operational fields,
   * including payment method, status, external references, and timestamps.
   * Security checks ensure only authorized users with order or management
   * responsibility may view payment details. Used primarily for support
   * scenarios (failed payments, chargebacks, refund problems), regulatory
   * audit, or general payment history review.
   *
   * @param connection
   * @param orderId Order identifier (UUID format) for scoping payment data.
   * @param paymentId Specific payment record ID within order (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":paymentId")
  public async at(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrderPayment> {
    try {
      return await get__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId(
        {
          customer,
          orderId,
          paymentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a payment for a specific order.
   * (shopping_mall_ai_backend_order_payments).
   *
   * Updates a payment record for an order, such as changing the payment method,
   * amount, currency, or updating status (pending, failed, etc.) provided that
   * the payment is not settled or locked. Enforces rigorous validation for
   * integrity of payment flows, handling all rules as per business and
   * regulatory requirements. Supports audit-logging of the change and allows
   * only authorized actors. Modifiable only when in allowed status. The
   * operation returns the updated payment record. Errors are returned for
   * invalid payment status, missing required fields, or business rule
   * violation.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID).
   * @param paymentId Payment's unique identifier (UUID).
   * @param body Fields to update for the payment record (method, amount,
   *   status, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":paymentId")
  public async update(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderPayment.IUpdate,
  ): Promise<IShoppingMallAiBackendOrderPayment> {
    try {
      return await put__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId(
        {
          customer,
          orderId,
          paymentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a payment for a specific order.
   * (shopping_mall_ai_backend_order_payments).
   *
   * Soft delete a payment record for a specific order by marking the payment as
   * deleted. This operation sets the deleted_at timestamp, preserving the
   * record for audit and compliance purposes, and excludes it from normal
   * queries. Deletion is only allowed if the payment is in a non-settled state
   * (e.g., pending, failed, not completed). The action cannot be reversed and
   * removes the payment record from active use, but preserves it in the
   * database for legal and business review. If the payment record has already
   * been completed, cancelled or otherwise locked, the operation will return an
   * error and take no action.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID).
   * @param paymentId Payment's unique identifier (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":paymentId")
  public async erase(
    @CustomerAuth()
    customer: CustomerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("paymentId")
    paymentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_customer_orders_$orderId_payments_$paymentId(
        {
          customer,
          orderId,
          paymentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
