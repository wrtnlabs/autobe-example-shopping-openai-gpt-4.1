import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_carts_$cartId_items } from "../../../../../providers/patch__shoppingMallAiBackend_admin_carts_$cartId_items";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_carts_$cartId_items_$itemId } from "../../../../../providers/get__shoppingMallAiBackend_admin_carts_$cartId_items_$itemId";

import { IPageIShoppingMallAiBackendCartItem } from "../../../../../api/structures/IPageIShoppingMallAiBackendCartItem";
import { IShoppingMallAiBackendCartItem } from "../../../../../api/structures/IShoppingMallAiBackendCartItem";

@Controller("/shoppingMallAiBackend/admin/carts/:cartId/items")
export class ShoppingmallaibackendAdminCartsItemsController {
  /**
   * Paginate and filter items inside a shopping cart by cartId.
   *
   * Search and paginate items within a specific shopping cart.
   *
   * This API call enables a detailed review of all items currently present in a
   * single cart, allows for filtering by item attributes (quantity,
   * bundle_code, note, etc.), and supports paginated result navigation. Its
   * primary use is during checkout, customer review, or for administrative
   * support. All access is permission checked to ensure only cart owners or
   * authorized personnel may view the item list. Attempts to view unauthorized
   * or deleted carts will yield an error.
   *
   * @param connection
   * @param cartId Unique identifier of the cart whose items are being listed
   *   (UUID).
   * @param body Query and pagination configuration for cart items listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCartItem.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCartItem> {
    try {
      return await patch__shoppingMallAiBackend_admin_carts_$cartId_items({
        admin,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * View a single cart item and its full attributes by itemId and cartId.
   *
   * Get the full details of a specific item in a shopping cart, including
   * quantity, bundle selection, option codes, and note. The operation is
   * critical for customers to verify, edit, or delete cart items before
   * checkout. All item details, including references to the snapshot of the
   * product at the add-to-cart time, are provided. Unauthorized access to items
   * in another user's cart returns an error.
   *
   * @param connection
   * @param cartId Unique identifier of the cart holding the item (UUID).
   * @param itemId Unique identifier of the item to view inside the cart (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":itemId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCartItem> {
    try {
      return await get__shoppingMallAiBackend_admin_carts_$cartId_items_$itemId(
        {
          admin,
          cartId,
          itemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
