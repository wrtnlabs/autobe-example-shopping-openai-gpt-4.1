import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_sellers_$sellerId_verifications } from "../../../../../providers/patch__shoppingMallAiBackend_admin_sellers_$sellerId_verifications";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_sellers_$sellerId_verifications_$verificationId } from "../../../../../providers/get__shoppingMallAiBackend_admin_sellers_$sellerId_verifications_$verificationId";
import { put__shoppingMallAiBackend_admin_sellers_$sellerId_verifications_$verificationId } from "../../../../../providers/put__shoppingMallAiBackend_admin_sellers_$sellerId_verifications_$verificationId";
import { delete__shoppingMallAiBackend_admin_sellers_$sellerId_verifications_$verificationId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_sellers_$sellerId_verifications_$verificationId";

import { IPageIShoppingMallAiBackendSellerVerification } from "../../../../../api/structures/IPageIShoppingMallAiBackendSellerVerification";
import { IShoppingMallAiBackendSellerVerification } from "../../../../../api/structures/IShoppingMallAiBackendSellerVerification";

@Controller("/shoppingMallAiBackend/admin/sellers/:sellerId/verifications")
export class ShoppingmallaibackendAdminSellersVerificationsController {
  /**
   * List and search verification records for a seller (admin-only).
   *
   * Retrieve a paginated, filtered list of all verification records linked to a
   * specified seller by sellerId. Response includes evidence types, status,
   * document URIs, and timestamps, supporting regulatory or onboarding
   * workflows.
   *
   * This endpoint is exclusively for administrators who need to review or audit
   * a seller's compliance status. Filtering is supported on type and status
   * fields. Attempts to access with invalid seller reference or insufficient
   * permissions are rejected with descriptive error codes.
   *
   * Integration with seller management flows, including onboarding, compliance
   * reviews, and periodic audits. Results can be used for deeper evidence
   * review in case of disputes.
   *
   * @param connection
   * @param sellerId UUID of the seller to filter verifications by.
   * @param body Filter, pagination, and search criteria for seller's
   *   verification records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendSellerVerification.IRequest,
  ): Promise<IPageIShoppingMallAiBackendSellerVerification> {
    try {
      return await patch__shoppingMallAiBackend_admin_sellers_$sellerId_verifications(
        {
          admin,
          sellerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific seller verification record (admin-only).
   *
   * Retrieve all details about a single verification record for a given seller,
   * identified by sellerId and verificationId. Returns verification type,
   * status, document URI, submission, and approval timestamps for onboarding
   * and compliance.
   *
   * Exclusively for use by admins for evidentiary and regulatory workflows.
   * Unauthorized access is blocked with a policy violation error. Existence of
   * both seller and verification records is checked, with 404 for invalid
   * identifiers.
   *
   * Facilitates onboarding workflow, compliance deep-dive, and audit trails for
   * seller eligibility or investigation.
   *
   * @param connection
   * @param sellerId UUID of the seller account.
   * @param verificationId UUID of the verification record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":verificationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedParam("verificationId")
    verificationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendSellerVerification> {
    try {
      return await get__shoppingMallAiBackend_admin_sellers_$sellerId_verifications_$verificationId(
        {
          admin,
          sellerId,
          verificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a seller's verification record (admin-only).
   *
   * Update the type, status, or reference document_uri for an existing seller
   * verification record. Enables onboarding workflow, status transition (e.g.,
   * submitted, approved, rejected), or correction of compliance documentation.
   * Admin-only.
   *
   * All changes are logged for audit purposes. Supports only editable
   * fieldsâ€”modifying immutable audit fields or history is not permitted.
   * Validation errors occur if attempting to update non-editable or nonexistent
   * records.
   *
   * Links directly to seller onboarding, periodic compliance, and evidence
   * workflows. All changes update verification's updated timestamp.
   *
   * @param connection
   * @param sellerId UUID of the seller for whom the verification is being
   *   updated.
   * @param verificationId UUID of the verification record to update.
   * @param body New values for verification record (type, status, URI, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":verificationId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedParam("verificationId")
    verificationId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendSellerVerification.IUpdate,
  ): Promise<IShoppingMallAiBackendSellerVerification> {
    try {
      return await put__shoppingMallAiBackend_admin_sellers_$sellerId_verifications_$verificationId(
        {
          admin,
          sellerId,
          verificationId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a seller verification record (admin-only).
   *
   * Permanently remove a specific seller verification record, targeted by
   * sellerId and verificationId. All deletions are executed by admin and logged
   * in audit trail for future evidence needs. Operation is not reversible and
   * must comply with regulatory and business policy.
   *
   * Attempting to delete non-existent or already removed verification records
   * returns an error. This is critical for compliance, KYC/KYB evidence
   * management, and onboarding workflows.
   *
   * @param connection
   * @param sellerId UUID of the seller account.
   * @param verificationId UUID of the verification record to remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":verificationId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedParam("verificationId")
    verificationId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_sellers_$sellerId_verifications_$verificationId(
        {
          admin,
          sellerId,
          verificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
