import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_sellers } from "../../../../providers/patch__shoppingMallAiBackend_admin_sellers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_sellers_$sellerId } from "../../../../providers/get__shoppingMallAiBackend_admin_sellers_$sellerId";
import { put__shoppingMallAiBackend_admin_sellers_$sellerId } from "../../../../providers/put__shoppingMallAiBackend_admin_sellers_$sellerId";
import { delete__shoppingMallAiBackend_admin_sellers_$sellerId } from "../../../../providers/delete__shoppingMallAiBackend_admin_sellers_$sellerId";

import { IPageIShoppingMallAiBackendSeller } from "../../../../api/structures/IPageIShoppingMallAiBackendSeller";
import { IShoppingMallAiBackendSeller } from "../../../../api/structures/IShoppingMallAiBackendSeller";

@Controller("/shoppingMallAiBackend/admin/sellers")
export class ShoppingmallaibackendAdminSellersController {
  /**
   * Search and retrieve filtered, paginated seller accounts (admin-only, soft
   * delete).
   *
   * Retrieve a paginated, filtered list of seller merchant accounts for
   * administrative or compliance purposes. Supports advanced search by legal
   * name, business registration number, email, account activation, and
   * verification status. Useful for onboarding reviews, regulatory audits, and
   * global vendor management.
   *
   * Admin authentication is required to access the full seller roster. The
   * response includes basic seller details as well as metadata like creation
   * and update dates, verification, and activation status. Sensitive business
   * fields are only retrievable by admin roles. Supports pagination and sorting
   * on primary searchable fields.
   *
   * This operation contributes to compliance and regulatory workflows by
   * allowing bulk review, onboarding, and forensic investigation of sellers in
   * the system. Errors or misuse generate access-denied and context-specific
   * feedback.
   *
   * Related endpoints: individual seller retrieval, update, and lifecycle
   * management.
   *
   * @param connection
   * @param body Filter, search, and pagination parameters for sellers.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendSeller.IRequest,
  ): Promise<IPageIShoppingMallAiBackendSeller.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_sellers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a seller account by ID (admin-only, soft
   * delete aware).
   *
   * Retrieve detailed information about a single seller account identified by
   * the seller's UUID. Returns the full legal profile, including merchant's
   * business registration, contact information (email), verification and
   * activation status, timestamps, and profile extensions.
   *
   * This API is accessible only to administrative users for the sake of
   * platform safety, compliance, and business support. Attempts to access with
   * insufficient permissions result in explicit business error codes.
   *
   * Provides all information necessary for compliance checks, onboarding,
   * support investigations, or legal requests. Includes both core and metadata
   * fields. Returns 404 for unknown or deleted sellers.
   *
   * @param connection
   * @param sellerId UUID of the seller merchant account to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sellerId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendSeller> {
    try {
      return await get__shoppingMallAiBackend_admin_sellers_$sellerId({
        admin,
        sellerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update existing seller merchant account info by ID (admin-only).
   *
   * Modify the business attributes of a seller merchant account identified by
   * sellerId. Allows updating name, business registration number, email,
   * is_active, and is_verified per regulatory policy. Triggering this operation
   * logs compliance/audit events for evidence preservation.
   *
   * Only admin users hold authority to alter core seller onboarding data.
   * Failed validations (duplicate business registration or email) return
   * business error codes. Soft-deleted sellers cannot be updated.
   *
   * This operation is critical for regulatory compliance, onboarding, and
   * ongoing seller management. Changes update timestamps for data correctness.
   *
   * @param connection
   * @param sellerId UUID of the seller merchant account to update.
   * @param body New values for seller merchant fields (name, registration,
   *   status, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sellerId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendSeller.IUpdate,
  ): Promise<IShoppingMallAiBackendSeller> {
    try {
      return await put__shoppingMallAiBackend_admin_sellers_$sellerId({
        admin,
        sellerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove (soft delete) a seller merchant by ID (admin-only).
   *
   * Permanently remove a seller merchant account from the platform based on its
   * unique seller ID. This operation sets the deleted_at timestamp for evidence
   * and regulatory trace, ensuring the account is no longer active on the
   * system. Attempts to delete non-existent or already deleted sellers will
   * result in a not found error.
   *
   * Only admin users are permitted to perform this removal, ensuring compliance
   * with business policy and legal obligations. Removal cascades through
   * related business and activity records per referential integrity. All such
   * operations are logged in an audit trail for future review and evidence
   * needs.
   *
   * @param connection
   * @param sellerId UUID of the seller merchant account to remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sellerId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_sellers_$sellerId({
        admin,
        sellerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
