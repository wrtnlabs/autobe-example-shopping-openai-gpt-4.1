import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_admins_$adminId_auditLogs } from "../../../../../providers/patch__shoppingMallAiBackend_admin_admins_$adminId_auditLogs";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_admins_$adminId_auditLogs_$auditLogId } from "../../../../../providers/get__shoppingMallAiBackend_admin_admins_$adminId_auditLogs_$auditLogId";

import { IPageIShoppingMallAiBackendAdminAuditLog } from "../../../../../api/structures/IPageIShoppingMallAiBackendAdminAuditLog";
import { IShoppingMallAiBackendAdminAuditLog } from "../../../../../api/structures/IShoppingMallAiBackendAdminAuditLog";

@Controller("/shoppingMallAiBackend/admin/admins/:adminId/auditLogs")
export class ShoppingmallaibackendAdminAdminsAuditlogsController {
  /**
   * Search and retrieve a paginated list of admin audit logs for a specific
   * administrator.
   *
   * This API allows administrators to retrieve a filtered and paginated view of
   * their own audit trails documenting privileged actions undertaken on the
   * platform. The endpoint supports complex queries, including searching by
   * operation type, date range, and affected entity. Results can be ordered by
   * most recent, oldest, or specific business attributes, with access
   * restricted to admin users for compliance and traceability.
   *
   * The operation returns a paginated list of audit entries, each including
   * operation type, description, the affected entity (target_id, target_type),
   * optional rationale, and timestamp. Only privileged admin users may access
   * or query this data, and sensitive entries may be further filtered based on
   * business logic or regulatory policy.
   *
   * This endpoint is useful for personal activity review, compliance reporting,
   * anomaly detection, or post-hoc audit/self-assessment, and is a key feature
   * for enforcing platform integrity and regulatory accountability.
   *
   * @param connection
   * @param adminId Unique identifier of the administrator whose audit logs are
   *   being queried.
   * @param body Search, filter, and pagination criteria for admin audit logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendAdminAuditLog.IRequest,
  ): Promise<IPageIShoppingMallAiBackendAdminAuditLog.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_admins_$adminId_auditLogs(
        {
          admin,
          adminId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific admin audit log entry for a given
   * administrator.
   *
   * This API allows privileged administrator users to fetch detailed
   * information for a single admin audit log entry, identified by auditLogId,
   * for precise compliance or forensic trace. This operation is essential for
   * reviewing the context of specific high-privilege operations, tracking who
   * performed sensitive actions, and supporting regulatory or business evidence
   * requirements.
   *
   * Each returned audit log details the operation performed, the entity
   * affected, timestamps, rationale (description), and contextual metadata if
   * present. Only authorized admin users may access these details, ensuring
   * platform governance, accountability, and evidence preservation for all
   * privileged administrative actions.
   *
   * This endpoint is typically used by admins reviewing system incidents,
   * compliance cases, security investigations, or upon legal/business request,
   * and is a core component for trust and transparency in operations.
   *
   * @param connection
   * @param adminId Unique identifier of the administrator whose audit log is to
   *   be retrieved.
   * @param auditLogId Unique identifier of the audit log entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendAdminAuditLog> {
    try {
      return await get__shoppingMallAiBackend_admin_admins_$adminId_auditLogs_$auditLogId(
        {
          admin,
          adminId,
          auditLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
