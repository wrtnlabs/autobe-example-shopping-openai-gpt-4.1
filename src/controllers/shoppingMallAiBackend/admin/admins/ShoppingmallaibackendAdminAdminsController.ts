import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_admins } from "../../../../providers/patch__shoppingMallAiBackend_admin_admins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_admins_$adminId } from "../../../../providers/get__shoppingMallAiBackend_admin_admins_$adminId";
import { put__shoppingMallAiBackend_admin_admins_$adminId } from "../../../../providers/put__shoppingMallAiBackend_admin_admins_$adminId";
import { delete__shoppingMallAiBackend_admin_admins_$adminId } from "../../../../providers/delete__shoppingMallAiBackend_admin_admins_$adminId";

import { IPageIShoppingMallAiBackendAdmin } from "../../../../api/structures/IPageIShoppingMallAiBackendAdmin";
import { IShoppingMallAiBackendAdmin } from "../../../../api/structures/IShoppingMallAiBackendAdmin";

@Controller("/shoppingMallAiBackend/admin/admins")
export class ShoppingmallaibackendAdminAdminsController {
  /**
   * List admin accounts with advanced search, filtering, and pagination.
   *
   * Returns a paginated result set of administrators (admins) matching optional
   * search filters such as name, username, account active status, and creation
   * date. This list operation is available only to other super-admin users for
   * audit and user management purposes. Includes key profile details such as
   * real name, admin username, contact information, status (active), last
   * login, and audit creation timestamps. Results may be sorted and paginated
   * according to request parameters. Sensitive data (like password hashes) are
   * never exposed. Intended for admin UI search/list dashboards.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for admin list
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendAdmin.IRequest,
  ): Promise<IPageIShoppingMallAiBackendAdmin.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_admins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get admin account details for a given adminId.
   *
   * Get a specific administrator account's details by their unique adminId
   * (UUID). Returns all profile fields except sensitive authentication secrets
   * (such as password hashes), suitable for admin and audit views. Includes
   * deeply linked audit log, creation/update times, contact info, and
   * historical account metadata. Can only be used by super-admins or privileged
   * admin roles in the management UI. Access is strictly checked, and attempts
   * to access other admins' details are logged and restricted.
   *
   * @param connection
   * @param adminId Unique identifier of the admin account to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendAdmin> {
    try {
      return await get__shoppingMallAiBackend_admin_admins_$adminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update admin public profile or status for a given adminId.
   *
   * Update profile or status fields for an admin account by their adminId. Only
   * available to privileged admin roles and never exposes or modifies
   * authentication secrets (such as password). Allows updates to public-facing
   * or business fields, such as real name, email, phone, status, etc.
   * Operations are traced in admin audit logs with before/after details.
   * Violates business rules to allow self-privilege escalation or editing
   * higher-permission accounts. Strict compliance checking is handled in the
   * provider logic. Returns updated admin record for UI or management interface
   * purposes.
   *
   * @param connection
   * @param adminId Unique identifier for the admin account being updated.
   * @param body Update fields allowed for admin non-auth fields, such as
   *   profile and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendAdmin.IUpdate,
  ): Promise<IShoppingMallAiBackendAdmin> {
    try {
      return await put__shoppingMallAiBackend_admin_admins_$adminId({
        admin,
        adminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an admin account by adminId, preserving historical records for
   * audit.
   *
   * Soft delete (logically remove) an administrator account using their unique
   * adminId. This sets the deleted_at field, making the account inaccessible
   * for authentication or business functions while preserving full data for
   * compliance and audit review. Only a privileged super-admin or compliance
   * admin can perform a soft delete. Regulatory controls prevent irrecoverable
   * loss of admin data. Attempts to remove higher-privilege or system admin
   * accounts are rejected and audited. No data is physically erased, ensuring
   * compliance traceability.
   *
   * @param connection
   * @param adminId Unique identifier of the admin account to erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_admins_$adminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
