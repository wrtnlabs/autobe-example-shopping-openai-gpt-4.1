import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_coupons_$couponId_restrictions } from "../../../../../providers/post__shoppingMallAiBackend_admin_coupons_$couponId_restrictions";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_coupons_$couponId_restrictions } from "../../../../../providers/patch__shoppingMallAiBackend_admin_coupons_$couponId_restrictions";
import { get__shoppingMallAiBackend_admin_coupons_$couponId_restrictions_$restrictionId } from "../../../../../providers/get__shoppingMallAiBackend_admin_coupons_$couponId_restrictions_$restrictionId";
import { put__shoppingMallAiBackend_admin_coupons_$couponId_restrictions_$restrictionId } from "../../../../../providers/put__shoppingMallAiBackend_admin_coupons_$couponId_restrictions_$restrictionId";
import { delete__shoppingMallAiBackend_admin_coupons_$couponId_restrictions_$restrictionId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_coupons_$couponId_restrictions_$restrictionId";

import { IShoppingMallAiBackendCouponRestriction } from "../../../../../api/structures/IShoppingMallAiBackendCouponRestriction";
import { IPageIShoppingMallAiBackendCouponRestriction } from "../../../../../api/structures/IPageIShoppingMallAiBackendCouponRestriction";

@Controller("/shoppingMallAiBackend/admin/coupons/:couponId/restrictions")
export class ShoppingmallaibackendAdminCouponsRestrictionsController {
  /**
   * Create a restriction on a coupon (limit scope, time, target, etc).
   *
   * Create a new coupon restriction. Each restriction limits the scope or
   * applicability of the coupon and can cover one or more business entities
   * (product, user, section, category, etc.) or define period-based or
   * policy-scenario limits.
   *
   * This operation guarantees that the provided criteria are both unique and
   * business-legal for the coupon, preventing dangerous or illogical
   * configuration that could yield lost revenue or customer friction. All
   * creations are logged for compliance and evidence.
   *
   * Strictly restricted to admin-level operators to protect promotional policy
   * and business outcomes.
   *
   * @param connection
   * @param couponId Unique identifier for the coupon to add the restriction
   *   under
   * @param body Restriction specification and business logic for the new
   *   restriction.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponRestriction.ICreate,
  ): Promise<IShoppingMallAiBackendCouponRestriction> {
    try {
      return await post__shoppingMallAiBackend_admin_coupons_$couponId_restrictions(
        {
          admin,
          couponId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List restrictions for a given coupon with filtering and pagination.
   *
   * Query and list coupon restriction records on a coupon, with support for
   * pagination, search, and filter options. Each restriction defines a
   * limitation on coupon usage, enforced during customer shopping, checkout, or
   * campaign redemption.
   *
   * Administrators can filter restrictions by business context (e.g., product,
   * section, category, user, date/time), and sorting is supported by created_at
   * or business field. The endpoint is essential for promotion audit, business
   * rule management, and timely troubleshooting of discount eligibility
   * issues.
   *
   * Response includes a summary view for each restriction, showing type,
   * target, and active periods, for fast reference and evidence compliance.
   *
   * @param connection
   * @param couponId Unique identifier for the coupon whose restrictions to list
   * @param body Search and filter criteria for coupon restrictions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponRestriction.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCouponRestriction.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_coupons_$couponId_restrictions(
        {
          admin,
          couponId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get the details of a coupon restriction by restrictionId.
   *
   * Retrieve detailed information on an individual coupon restriction,
   * including its type, conditions, target entity, active period, and
   * enforcement status.
   *
   * The restriction data allows administrators and compliance reviewers to
   * understand why a coupon is not applicable or is blocked in specific
   * business scenarios. Use is restricted to business analysts and operational
   * leads for compliance and audit.
   *
   * Historical access logs are typically maintained to track who reviewed which
   * restrictions, in line with regulatory and business policy standards.
   *
   * @param connection
   * @param couponId Unique identifier of the coupon to which the restriction
   *   belongs
   * @param restrictionId Unique identifier of the restriction to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":restrictionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("restrictionId")
    restrictionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCouponRestriction> {
    try {
      return await get__shoppingMallAiBackend_admin_coupons_$couponId_restrictions_$restrictionId(
        {
          admin,
          couponId,
          restrictionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a coupon restriction by restrictionId (target, time, user, etc).
   *
   * Update a coupon restriction. This enables dynamic adjustment of
   * eligibility, timeframes, targets, and policy. Only business administrators
   * with specialist knowledge should invoke this operation, as flawed
   * configuration could cause system-wide promotion or compliance failures.
   *
   * All changes are audited, with rollback and evidence recovery processes in
   * place. Business validation and system integrity checks are performed prior
   * to update, and the operation is atomic: success or full rollback.
   *
   * Afterward, the new restriction parameters govern coupon use in all active
   * transactions and eligibility checks.
   *
   * @param connection
   * @param couponId Unique identifier for coupon assigned to the restriction
   * @param restrictionId Unique identifier for the restriction to update
   * @param body Updated restriction details (target, logic, reason, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":restrictionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("restrictionId")
    restrictionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponRestriction.IUpdate,
  ): Promise<IShoppingMallAiBackendCouponRestriction> {
    try {
      return await put__shoppingMallAiBackend_admin_coupons_$couponId_restrictions_$restrictionId(
        {
          admin,
          couponId,
          restrictionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a coupon restriction from the system.
   *
   * Permanently delete a specific coupon restriction from the system. This
   * operation is used by administrators or coupon managers to remove a business
   * rule that limits the applicability of a coupon. The operation affects the
   * eligibility logic for coupon redemption, enabling dynamic policy updates
   * for active marketing campaigns or compliance changes.
   *
   * Security controls ensure that only authorized users may delete
   * restrictions. All delete actions are logged for compliance with regulatory
   * and business policy standards. The deletion is irreversible, and will
   * remove the corresponding record entirely from the
   * shopping_mall_ai_backend_coupon_restrictions table. If the restriction does
   * not exist, a not found or already deleted error is returned. Use this
   * operation carefully, as changes may allow broader coupon usage than
   * originally intended, impacting both customers and sellers.
   *
   * Related endpoints include the search (index), add (post), and update (put)
   * operations on coupon restrictions. This endpoint is typically used in
   * advanced coupon management scenarios by business operations teams.
   *
   * @param connection
   * @param couponId Unique identifier of the target coupon to which the
   *   restriction belongs.
   * @param restrictionId Unique identifier for the coupon restriction to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":restrictionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("restrictionId")
    restrictionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_coupons_$couponId_restrictions_$restrictionId(
        {
          admin,
          couponId,
          restrictionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
