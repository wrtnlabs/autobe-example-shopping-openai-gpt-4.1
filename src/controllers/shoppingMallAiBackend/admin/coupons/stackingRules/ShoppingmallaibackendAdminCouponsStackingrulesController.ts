import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules } from "../../../../../providers/post__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules } from "../../../../../providers/patch__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules";
import { get__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules_$stackingRuleId } from "../../../../../providers/get__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules_$stackingRuleId";
import { put__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules_$stackingRuleId } from "../../../../../providers/put__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules_$stackingRuleId";
import { delete__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules_$stackingRuleId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules_$stackingRuleId";

import { IShoppingMallAiBackendCouponStackingRule } from "../../../../../api/structures/IShoppingMallAiBackendCouponStackingRule";
import { IPageIShoppingMallAiBackendCouponStackingRule } from "../../../../../api/structures/IPageIShoppingMallAiBackendCouponStackingRule";

@Controller("/shoppingMallAiBackend/admin/coupons/:couponId/stackingRules")
export class ShoppingmallaibackendAdminCouponsStackingrulesController {
  /**
   * Create a stacking rule for the given coupon.
   *
   * Create a new stacking rule for a particular coupon. This API allows
   * business owners, marketing, or admin users to specify whether a given
   * coupon can be stacked with another coupon or coupon type, and the
   * application logic for combinability.
   *
   * Business safeguards enforce that the stacking rule is not duplicated and
   * applies within the scope of the selected coupon. Creation triggers an audit
   * log entry and any business process for required approval/notification.
   *
   * This action is strictly limited to administrative or marketing roles with
   * the necessary privileges, to prevent promotion manipulation or accidental
   * business configuration errors.
   *
   * @param connection
   * @param couponId Unique identifier for the coupon under which to create the
   *   stacking rule
   * @param body Stacking rule configuration to add to the coupon
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponStackingRule.ICreate,
  ): Promise<IShoppingMallAiBackendCouponStackingRule> {
    try {
      return await post__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules(
        {
          admin,
          couponId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated searchable list of coupon stacking rules for business/campaign
   * ops.
   *
   * Search, filter, and audit all stacking rules for a given coupon, providing
   * business operator or admin with the full policy details for which codes can
   * or cannot be stacked together. Each result includes exclusion policy,
   * rationale, and linkage to policy/campaign assignment. The results are
   * paginated for scalability and support large-scale campaign policy
   * review/audit workflows.
   *
   * @param connection
   * @param couponId Coupon ID for which stacking rule policies are to be
   *   retrieved.
   * @param body Request supports search/filter criteria and paging for stacking
   *   rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexCouponStackingRules(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponStackingRule.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCouponStackingRule> {
    try {
      return await patch__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules(
        {
          admin,
          couponId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get the configuration and details of a stacking rule for a given coupon.
   *
   * Retrieve full details of a coupon stacking rule, including its stacking
   * type, target, and business applicability. This API allows administrators
   * and authorized business managers to verify how a coupon interacts with
   * other discount policies.
   *
   * The operation checks the requested stacking rule entry under the provided
   * couponId to ensure correct scoping and security. This call is vital for
   * compliance, debugging promotion issues, and supporting transparent
   * configuration audits. Any configuration retrieved can be compared against
   * audit logs for change tracking.
   *
   * Results are restricted to authorized roles, as stacking rules have direct
   * business and financial implications.
   *
   * @param connection
   * @param couponId Unique identifier for the coupon whose stacking rule is
   *   being retrieved
   * @param stackingRuleId Unique identifier for the stacking rule to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":stackingRuleId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("stackingRuleId")
    stackingRuleId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCouponStackingRule> {
    try {
      return await get__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules_$stackingRuleId(
        {
          admin,
          couponId,
          stackingRuleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a stacking rule for a coupon identified by stackingRuleId.
   *
   * Update a stacking rule for the specified coupon. Only authorized business
   * operators (admins) can make this change. Parameter validation ensures
   * business safety and logs updates for audit and compliance purposes.
   *
   * All changes to stacking rules are substantive for promotion policy and
   * require critical change control, as they can impact customer-facing
   * discount eligibility and stacking logic. The update is atomic and either
   * fully succeeds or fails with rollback.
   *
   * After update, the new rule is instantly reflected in business logic and any
   * active promotion validation flows.
   *
   * @param connection
   * @param couponId Unique identifier for the coupon whose stacking rule will
   *   be updated
   * @param stackingRuleId Unique identifier of the stacking rule to update
   * @param body Updated stacking rule configuration
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":stackingRuleId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("stackingRuleId")
    stackingRuleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponStackingRule.IUpdate,
  ): Promise<IShoppingMallAiBackendCouponStackingRule> {
    try {
      return await put__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules_$stackingRuleId(
        {
          admin,
          couponId,
          stackingRuleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a stacking rule from the coupon.
   *
   * Permanently delete a stacking rule belonging to a coupon. This operation
   * completely removes the stacking rule from the database and thereby
   * eliminates its business logic from the active system.
   *
   * This action is only performed by admins with appropriate permissions after
   * careful consideration. Once performed, the stacking rule cannot be
   * recovered. It is recommended to ensure proper business authorization and
   * audit logging is in place before invoking this operation.
   *
   * There is no evidence preserved or logical (soft) delete; the stacking rule
   * will be entirely removed.
   *
   * @param connection
   * @param couponId Unique identifier for the coupon whose stacking rule is
   *   being deleted
   * @param stackingRuleId Unique identifier of the stacking rule to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":stackingRuleId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("stackingRuleId")
    stackingRuleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_coupons_$couponId_stackingRules_$stackingRuleId(
        {
          admin,
          couponId,
          stackingRuleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
