import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_coupons_$couponId_codes } from "../../../../../providers/patch__shoppingMallAiBackend_admin_coupons_$couponId_codes";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_coupons_$couponId_codes_$codeId } from "../../../../../providers/get__shoppingMallAiBackend_admin_coupons_$couponId_codes_$codeId";

import { IPageIShoppingMallAiBackendCouponCode } from "../../../../../api/structures/IPageIShoppingMallAiBackendCouponCode";
import { IShoppingMallAiBackendCouponCode } from "../../../../../api/structures/IShoppingMallAiBackendCouponCode";

@Controller("/shoppingMallAiBackend/admin/coupons/:couponId/codes")
export class ShoppingmallaibackendAdminCouponsCodesController {
  /**
   * Paginated search on coupon codes for campaign or compliance analysis.
   *
   * Search and retrieve coupon codes for a specific coupon, including details,
   * status, audit, and campaign assignment. Enables business visibility for
   * event distribution, bulk code management, or identification of fraud.
   * Filters by code, status (issued, redeemed, available, revoked), and
   * supports evidence-grade traceability. Only available to roles with
   * campaign/compliance authority.
   *
   * @param connection
   * @param couponId Coupon ID for which codes are being searched/audited.
   * @param body Search, filter criteria, and pagination for coupon codes (code,
   *   status, date, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexCouponCodes(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponCode.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCouponCode> {
    try {
      return await patch__shoppingMallAiBackend_admin_coupons_$couponId_codes({
        admin,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get audit-grade details for a campaign/bulk coupon code by ID.
   *
   * Get all business details, status, issuance, and audit history for a
   * specific coupon code for a campaign, event, or fraud analysis. Enables
   * compliance, tracking, and campaign quality controls, and links each code to
   * relevant policy and recipient as possible. Only available to
   * business/compliance users, never directly modifiable by end user.
   *
   * @param connection
   * @param couponId Coupon ID for lookup context.
   * @param codeId Target coupon code identifier to retrieve in full detail.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":codeId")
  public async atCouponCode(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("codeId")
    codeId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCouponCode> {
    try {
      return await get__shoppingMallAiBackend_admin_coupons_$couponId_codes_$codeId(
        {
          admin,
          couponId,
          codeId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
