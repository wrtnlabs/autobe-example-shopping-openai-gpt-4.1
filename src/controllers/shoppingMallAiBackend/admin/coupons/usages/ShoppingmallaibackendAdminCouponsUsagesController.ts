import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_coupons_$couponId_usages } from "../../../../../providers/patch__shoppingMallAiBackend_admin_coupons_$couponId_usages";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_coupons_$couponId_usages_$usageId } from "../../../../../providers/get__shoppingMallAiBackend_admin_coupons_$couponId_usages_$usageId";

import { IPageIShoppingMallAiBackendCouponUsage } from "../../../../../api/structures/IPageIShoppingMallAiBackendCouponUsage";
import { IShoppingMallAiBackendCouponUsage } from "../../../../../api/structures/IShoppingMallAiBackendCouponUsage";

@Controller("/shoppingMallAiBackend/admin/coupons/:couponId/usages")
export class ShoppingmallaibackendAdminCouponsUsagesController {
  /**
   * Paginated search/audit of all redemptions/usages for a given coupon.
   *
   * Search, audit, or analyze coupon usage (redemption) records for a specific
   * coupon. This enables authorized business users and admins to filter by
   * status (success, failed, revoked, etc.), usage date range, customer, or
   * related order identifiers, with paginated results.
   *
   * The response includes detailed redemption records with all business and
   * audit-relevant information, supporting compliance, campaign effectiveness,
   * fraud analysis, and refund reconciliation. The operation is strictly
   * controlled by business role and supports only authorized access with full
   * evidence preservation.
   *
   * @param connection
   * @param couponId Coupon ID for which redemption/usage records are searched.
   * @param body Filter and pagination query for coupon usage; supports
   *   date/status/customer filters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async indexCouponUsage(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponUsage.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCouponUsage> {
    try {
      return await patch__shoppingMallAiBackend_admin_coupons_$couponId_usages({
        admin,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full business/audit details of a specific coupon redemption record.
   *
   * Retrieve full details of a specific coupon redemption (usage) record for a
   * given coupon and usage ID. Returns granular business context and audit
   * details for regulatory, campaign, and refund review. Useful for compliance
   * staff or campaign operators verifying individual redemptions,
   * troubleshooting issues, or investigating audit trails.
   *
   * Security restrictions limit this endpoint to admin/business roles and
   * prevent access to confidential customer/redemption data by unauthorized
   * actors. All data returned is evidence-grade, ensuring traceability for
   * disputes, refund validation, or compliance workflow. Errors on non-existent
   * or unauthorized access are managed per standard business error protocols.
   * This does not expose any modification API for redemptions.
   *
   * @param connection
   * @param couponId Coupon ID for coupon usage lookup.
   * @param usageId Target coupon usage record identifier for detailed audit
   *   data.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":usageId")
  public async atCouponUsage(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("usageId")
    usageId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCouponUsage> {
    try {
      return await get__shoppingMallAiBackend_admin_coupons_$couponId_usages_$usageId(
        {
          admin,
          couponId,
          usageId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
