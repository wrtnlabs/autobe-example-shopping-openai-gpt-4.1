import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_coupons_$couponId_notifications } from "../../../../../providers/patch__shoppingMallAiBackend_admin_coupons_$couponId_notifications";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_coupons_$couponId_notifications_$notificationId } from "../../../../../providers/get__shoppingMallAiBackend_admin_coupons_$couponId_notifications_$notificationId";

import { IPageIShoppingMallAiBackendCouponNotification } from "../../../../../api/structures/IPageIShoppingMallAiBackendCouponNotification";
import { IShoppingMallAiBackendCouponNotification } from "../../../../../api/structures/IShoppingMallAiBackendCouponNotification";

@Controller("/shoppingMallAiBackend/admin/coupons/:couponId/notifications")
export class ShoppingmallaibackendAdminCouponsNotificationsController {
  /**
   * Search and retrieve paginated coupon notifications for a specific coupon.
   *
   * Search and retrieve a paginated list of coupon notification events for a
   * particular coupon. This endpoint enables operational users to monitor,
   * audit, and analyze all notifications linked to a coupon, such as issuance
   * messages, expiry warnings, redemption confirmations, or error alerts. The
   * search can be filtered by notification type, status, recipient, or
   * timeframe, and returns results in a paginated format with summary fields
   * for each notification event.
   *
   * Notifications are used in compliance reporting, customer notification
   * history, and marketing campaign analytics, with robust search and access
   * controls for authorized users. Each entry in the response includes details
   * like notification type, delivery status, send attempts, and any error or
   * result messages. Data retrieval is subject to access rights with audit
   * logging for each query.
   *
   * Related operations: notification detail retrieval, notification
   * download/export, campaign management endpoints.
   *
   * @param connection
   * @param couponId Unique identifier of the coupon for which to retrieve
   *   notifications.
   * @param body Search and pagination parameters for filtering coupon
   *   notifications. May include filters for notification type, status,
   *   recipient, or time window.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponNotification.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCouponNotification.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_coupons_$couponId_notifications(
        {
          admin,
          couponId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full notification details for a specific coupon notification event.
   *
   * Retrieve full details of a specific coupon notification by notification ID
   * for a given coupon. This operation provides all business, delivery, and
   * audit metadata linked to a single notification eventâ€”such as notification
   * type, delivery status, send attempts, recipient, attempt timestamps, and
   * any associated error or result information. It enables advanced business
   * auditing, compliance verification, or notification delivery
   * troubleshooting.
   *
   * Access is limited to authorized administrators due to the sensitive nature
   * of notification and delivery evidence. If the notification does not exist,
   * an error is returned. This endpoint is commonly used following a search or
   * list operation for notification audits and is essential during compliance
   * reviews or delivery investigations.
   *
   * @param connection
   * @param couponId Unique identifier of the coupon associated with the
   *   notification.
   * @param notificationId Unique identifier for the specific coupon
   *   notification event.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":notificationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCouponNotification> {
    try {
      return await get__shoppingMallAiBackend_admin_coupons_$couponId_notifications_$notificationId(
        {
          admin,
          couponId,
          notificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
