import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_coupons } from "../../../../providers/post__shoppingMallAiBackend_admin_coupons";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_coupons } from "../../../../providers/patch__shoppingMallAiBackend_admin_coupons";
import { get__shoppingMallAiBackend_admin_coupons_$couponId } from "../../../../providers/get__shoppingMallAiBackend_admin_coupons_$couponId";
import { put__shoppingMallAiBackend_admin_coupons_$couponId } from "../../../../providers/put__shoppingMallAiBackend_admin_coupons_$couponId";
import { delete__shoppingMallAiBackend_admin_coupons_$couponId } from "../../../../providers/delete__shoppingMallAiBackend_admin_coupons_$couponId";

import { IShoppingMallAiBackendCoupon } from "../../../../api/structures/IShoppingMallAiBackendCoupon";
import { IPageIShoppingMallAiBackendCoupon } from "../../../../api/structures/IPageIShoppingMallAiBackendCoupon";

@Controller("/shoppingMallAiBackend/admin/coupons")
export class ShoppingmallaibackendAdminCouponsController {
  /**
   * Create a new coupon and promotion policy
   * (shopping_mall_ai_backend_coupons).
   *
   * The API creates a new coupon and registers all necessary business
   * parameters for a promotion campaign, such as discount amount/percentage,
   * target channels or sellers, issuance and stacking limits, personal or event
   * settings, validity periods, and exclusion policies. System and
   * business-logic validation includes ensuring code uniqueness, value and date
   * range checks, compatibility with overall platform promotional restrictions,
   * and data integrity for all referenced relations.
   *
   * Only users with administrative privileges may create new coupons using this
   * endpoint. The operation is subject to compliance checks and audit controls,
   * with full creation traceability recorded.
   *
   * The new coupon is immediately available if its status is set to 'active'
   * and its published_at date is current; otherwise, it may remain scheduled or
   * hidden until manual activation or future publishing time.
   *
   * @param connection
   * @param body All business and configuration parameters required to create a
   *   coupon (discount value, code, type, duration, eligible channels, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCoupon.ICreate,
  ): Promise<IShoppingMallAiBackendCoupon> {
    try {
      return await post__shoppingMallAiBackend_admin_coupons({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin search all coupons with advanced filtering and pagination
   * (shopping_mall_ai_backend_coupons).
   *
   * This API searches the full set of coupons available in the shopping mall
   * platform for administration and reporting purposes. It enables searching,
   * filtering, and sorting of coupons by status (active, expired, scheduled),
   * type (fixed, percentage, shipping, welcome, etc.), channel, seller, code
   * value, and time window. Filters support pagination, date ranges, stacking
   * rules, and eligibility constraints as properties of the
   * shopping_mall_ai_backend_coupons schema.
   *
   * Access is reserved for admin users who require full coupon lifecycle
   * visibility for audit, campaign analysis, and regulatory compliance.
   * Business rules enforce that soft-deleted coupons are excluded from normal
   * search results unless explicitly requested by higher privilege roles.
   * Coupon attributes such as issued/used counts allow easy tracking of
   * campaign performance.
   *
   * Admin users can use this endpoint to support overall promotional strategy,
   * compliance checks, and evidence collection for coupon usage disputes. Error
   * scenarios include invalid filter criteria and requests for pages beyond
   * available results.
   *
   * @param connection
   * @param body Coupon search and filtering criteria, including pagination and
   *   sort configuration.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCoupon.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCoupon.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_coupons({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get coupon details for a given couponId (shopping_mall_ai_backend_coupons).
   *
   * This API retrieves the complete details for a given coupon in the platform
   * by its unique identifier. All business-relevant fields are returned,
   * including code, type, value, stacking, issuance limits, campaign
   * association, and the current status of the coupon (active, expired,
   * scheduled, hidden). The operation is intended for administrators or
   * privileged panel users managing or auditing coupon campaigns.
   *
   * Security is enforced at the endpoint to restrict access to only users with
   * admin privileges. Information about the coupon's creation, updates, and
   * logical deletion (if applicable) is included for compliance and evidence
   * tracking.
   *
   * The endpoint is used to support coupon validation, dispute resolution,
   * business compliance investigations, and as a foundation for coupon editing
   * or cloning operations.
   *
   * @param connection
   * @param couponId Unique UUID for the coupon to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":couponId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCoupon> {
    try {
      return await get__shoppingMallAiBackend_admin_coupons_$couponId({
        admin,
        couponId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update coupon configuration and business policy
   * (shopping_mall_ai_backend_coupons).
   *
   * Update the details of a coupon policy post-creation. This endpoint enables
   * authorized admin users to modify any mutable business attribute of a coupon
   * (such as discount value, type, time constraints, usage/issuance limits,
   * stacking or eligibility settings, target channel/seller, and metadata). It
   * validates updated parameters, ensures all references are valid, enforces
   * code and channel uniqueness, and prevents violations of platform
   * promotional rules.
   *
   * All update actions are recorded as versioned snapshots for audit and
   * compliance, including the before/after changes. Security controls limit
   * access to administrators only. Any changes to published or already-issued
   * coupons may have restricted mutability according to business or legal
   * policy. Errors may be returned for conflicts, constraint violations, or
   * failed business validations.
   *
   * @param connection
   * @param couponId Unique UUID for the coupon to update.
   * @param body Fields and configuration to update (all mutable coupon
   *   properties, e.g., value, type, eligibility).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":couponId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCoupon.IUpdate,
  ): Promise<IShoppingMallAiBackendCoupon> {
    try {
      return await put__shoppingMallAiBackend_admin_coupons_$couponId({
        admin,
        couponId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a coupon (logical deletion with evidence retention,
   * shopping_mall_ai_backend_coupons).
   *
   * Soft delete a coupon record by setting its deleted_at timestamp for
   * evidence and compliance retention. This operation removes the coupon from
   * active/searchable state but preserves all information for audit, dispute,
   * and future restoration workflows. Business logic prevents accidental
   * deletion of already-deleted records or records involved in open
   * audit/compliance cases. The operation enforces role authorization at the
   * endpoint, and only admins are permitted.
   *
   * Related APIs include coupon recovery and permanent purge (for data
   * retention expiration), not covered here. If attempted on a non-existent or
   * already deleted coupon, an error is returned. Details of the soft deleted
   * entity (such as id and deleted_at) are retained for admin review.
   *
   * @param connection
   * @param couponId Unique UUID for the coupon to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":couponId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_coupons_$couponId({
        admin,
        couponId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
