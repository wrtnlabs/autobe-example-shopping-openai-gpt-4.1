import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_coupons_$couponId_issuances } from "../../../../../providers/post__shoppingMallAiBackend_admin_coupons_$couponId_issuances";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_coupons_$couponId_issuances } from "../../../../../providers/patch__shoppingMallAiBackend_admin_coupons_$couponId_issuances";
import { get__shoppingMallAiBackend_admin_coupons_$couponId_issuances_$issuanceId } from "../../../../../providers/get__shoppingMallAiBackend_admin_coupons_$couponId_issuances_$issuanceId";
import { put__shoppingMallAiBackend_admin_coupons_$couponId_issuances_$issuanceId } from "../../../../../providers/put__shoppingMallAiBackend_admin_coupons_$couponId_issuances_$issuanceId";
import { delete__shoppingMallAiBackend_admin_coupons_$couponId_issuances_$issuanceId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_coupons_$couponId_issuances_$issuanceId";

import { IShoppingMallAiBackendCouponIssuance } from "../../../../../api/structures/IShoppingMallAiBackendCouponIssuance";
import { IPageIShoppingMallAiBackendCouponIssuance } from "../../../../../api/structures/IPageIShoppingMallAiBackendCouponIssuance";

@Controller("/shoppingMallAiBackend/admin/coupons/:couponId/issuances")
export class ShoppingmallaibackendAdminCouponsIssuancesController {
  /**
   * Issue a coupon to a user or event for a specific coupon, creating an
   * audit-traceable issuance record.
   *
   * Create a new issuance of a coupon for a specific coupon ID, either for a
   * specific customer or as part of a campaign event. This operation enforces
   * coupon policy business rules for issuance, such as eligibility, maximum
   * number per user, campaign window, and compliance traceability.
   *
   * Upon execution, it creates an immutable record of the coupon issuance,
   * capturing the intended customer or campaign recipient (if applicable),
   * external code (e.g. event code or distributed voucher), optional
   * expiration, and initial status. The operation is designed for automated
   * coupon distribution by admins or system workflows, and is used for both
   * personal and bulk campaign scenarios.
   *
   * Security and compliance are addressed by requiring roles with authority to
   * issue coupons (e.g., admin, seller), preventing unauthorized mass issuance
   * or policy infringement. If issuance attempts exceed limits, target
   * ineligibility, or violate coupon configuration (such as issuing more
   * coupons than allowed or past policy expiry), the operation responds with
   * detailed business error messages defined by the application.
   *
   * @param connection
   * @param couponId Target coupon's unique identifier for which to issue the
   *   coupon.
   * @param body Issuance details including customer ID, optional external code,
   *   and optional expiration for this coupon issuance.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async createIssuance(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponIssuance.ICreate,
  ): Promise<IShoppingMallAiBackendCouponIssuance> {
    try {
      return await post__shoppingMallAiBackend_admin_coupons_$couponId_issuances(
        {
          admin,
          couponId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin search all coupon issuances for a couponId
   * (shopping_mall_ai_backend_coupon_issuances).
   *
   * List all issued coupon instances for a specified couponId, supporting query
   * by customer, status, and various business filters. The result is paginated
   * and returns key issuance summary fields as well as associated customer
   * references. This endpoint aids in campaign performance tracking, user
   * eligibility validation, and compliance/audit review. Only administrators
   * are granted access due to containing sensitive issuance, redemption, and
   * usage data for users.
   *
   * Pagination and filtering parameters allow tight result control. Related
   * endpoints provide issuance details or perform issuance-specific actions not
   * covered here. Errors are returned for invalid couponId or access
   * violations.
   *
   * @param connection
   * @param couponId Unique UUID for the parent coupon.
   * @param body Filtering criteria and pagination options for coupon issuances
   *   (status, customer, date, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponIssuance.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCouponIssuance.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_coupons_$couponId_issuances(
        {
          admin,
          couponId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin get full details for a coupon issuance
   * (shopping_mall_ai_backend_coupon_issuances).
   *
   * Get the complete record for a given coupon issuance assigned to a specific
   * user/campaign. All business-related and technical attributes are returned,
   * including status, assigned customer, issued_at, used_at, revoked_at, and
   * creation timestamps. Also returns primary references for the parent coupon
   * and (if present) the customer who received the coupon.
   *
   * Endpoint access is restricted to administrators due to PII and compliance
   * sensitivity. This endpoint is commonly used in support, dispute, fraud
   * investigation, and campaign management flows for per-user coupon details.
   * Error cases include invalid IDs or insufficient privileges.
   *
   * @param connection
   * @param couponId UUID of the parent coupon for cross-validation.
   * @param issuanceId UUID of the target coupon issuance.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":issuanceId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("issuanceId")
    issuanceId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCouponIssuance> {
    try {
      return await get__shoppingMallAiBackend_admin_coupons_$couponId_issuances_$issuanceId(
        {
          admin,
          couponId,
          issuanceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin-update a coupon issuance record's status or properties, with audit
   * traceability.
   *
   * Update, revoke, or modify the status or expiration of an existing coupon
   * issuance for a specific coupon and issuance ID. This operation supports
   * business correction, revocation in case of fraud or campaign policy change,
   * and allows status or expiration management under tight administrative
   * authority.
   *
   * The operation ensures all updates are captured in a full audit log,
   * preserves immutable fields for evidence, and supports granular error
   * feedback when a policy breach occurs (e.g. attempting to update a redeemed
   * or revoked coupon), while maintaining regulatory and compliance
   * requirements. Typical use cases include revoking a coupon that is misused,
   * extending expiration for a user, or correcting metadata.
   *
   * Only admins or campaign operators with coupon issuance permissions can use
   * this endpoint. Sensitive actions such as changing expiration or status are
   * strictly validated against current business rules and coupon policy, with
   * comprehensive controls on allowed modifications.
   *
   * @param connection
   * @param couponId Coupon ID this issuance belongs to.
   * @param issuanceId Unique issuance record identifier to update.
   * @param body Fields to update for a coupon issuance, such as status,
   *   expiration, or external code. Complies with policy.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":issuanceId")
  public async updateIssuance(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("issuanceId")
    issuanceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCouponIssuance.IUpdate,
  ): Promise<IShoppingMallAiBackendCouponIssuance> {
    try {
      return await put__shoppingMallAiBackend_admin_coupons_$couponId_issuances_$issuanceId(
        {
          admin,
          couponId,
          issuanceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete an issuance record (logical removal for auditing, not physical
   * delete).
   *
   * Logically delete an existing coupon issuance for a given coupon and
   * issuance. This sets the deleted_at timestamp for compliance and business
   * evidence, ensuring the record is retained for future reference but no
   * longer active.
   *
   * The operation safeguards against deletion of redeemed or already revoked
   * issuances, ensuring regulatory compliance and anti-fraud controls. Attempts
   * to delete ineligible issuances result in business errors indicating policy
   * violation or non-existence. This endpoint is strictly for admin/system role
   * use and should not be accessible to regular users, with audit and evidence
   * trails mandatory for all such deletions.
   *
   * Standard REST semantics apply: successful deletion returns HTTP 204 with no
   * body, errors yield relevant business status codes and descriptions. Deleted
   * issuances cannot be restored by end users.
   *
   * @param connection
   * @param couponId Coupon ID the issuance belongs to.
   * @param issuanceId Coupon issuance record identifier to logically delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":issuanceId")
  public async eraseIssuance(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("couponId")
    couponId: string & tags.Format<"uuid">,
    @TypedParam("issuanceId")
    issuanceId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_coupons_$couponId_issuances_$issuanceId(
        {
          admin,
          couponId,
          issuanceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
