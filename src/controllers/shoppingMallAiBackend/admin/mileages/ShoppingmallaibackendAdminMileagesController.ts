import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__shoppingMallAiBackend_admin_mileages_$mileageId } from "../../../../providers/put__shoppingMallAiBackend_admin_mileages_$mileageId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { delete__shoppingMallAiBackend_admin_mileages_$mileageId } from "../../../../providers/delete__shoppingMallAiBackend_admin_mileages_$mileageId";

import { IShoppingMallAiBackendMileage } from "../../../../api/structures/IShoppingMallAiBackendMileage";

@Controller("/shoppingMallAiBackend/admin/mileages/:mileageId")
export class ShoppingmallaibackendAdminMileagesController {
  /**
   * Update (admin/system) attributes of mileage ledger.
   *
   * Modifies a specific mileage ledger identified by mileageId. Allows system
   * or administrator-driven updates to balances, status, rationale, or
   * ownership. For use in correcting errors, handling operational incidents, or
   * applying business policy (e.g., manual balance adjustment after dispute
   * resolution).
   *
   * Validation ensures only authorized role or automated system logic invokes
   * this. Audits all changes for compliance. Typical errors: not found,
   * forbidden, bad request due to invalid updates, or business rules
   * violations. Returns updated mileage ledger in response.
   *
   * @param connection
   * @param mileageId UUID of the mileage ledger to update.
   * @param body Fields and values for updating the targeted mileage ledger
   *   (status, balances, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendMileage.IUpdate,
  ): Promise<IShoppingMallAiBackendMileage> {
    try {
      return await put__shoppingMallAiBackend_admin_mileages_$mileageId({
        admin,
        mileageId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a mileage ledger for compliance/evidence purposes.
   *
   * Marks a mileage/point ledger as deleted (logical deletion) for
   * business/institutional compliance. Only authorized platform admins or
   * automated back-office processes can perform this action. Sets deleted_at;
   * does not physically erase record, supporting audit and compliance
   * evidence.
   *
   * Ensures no further accrual/use events are permitted; all history remains
   * queryable for authorized review, but invisible in normal user queries.
   * Errors may occur if mileageId does not exist or is already deleted.
   * Susceptible to audit logging and security review.
   *
   * @param connection
   * @param mileageId UUID of the mileage ledger to be soft-deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mileageId")
    mileageId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_mileages_$mileageId({
        admin,
        mileageId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
