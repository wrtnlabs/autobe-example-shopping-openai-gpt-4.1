import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_productCategoryMappings } from "../../../../providers/post__shoppingMallAiBackend_admin_productCategoryMappings";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_productCategoryMappings } from "../../../../providers/patch__shoppingMallAiBackend_admin_productCategoryMappings";
import { get__shoppingMallAiBackend_admin_productCategoryMappings_$mappingId } from "../../../../providers/get__shoppingMallAiBackend_admin_productCategoryMappings_$mappingId";
import { put__shoppingMallAiBackend_admin_productCategoryMappings_$mappingId } from "../../../../providers/put__shoppingMallAiBackend_admin_productCategoryMappings_$mappingId";
import { delete__shoppingMallAiBackend_admin_productCategoryMappings_$mappingId } from "../../../../providers/delete__shoppingMallAiBackend_admin_productCategoryMappings_$mappingId";

import { IShoppingMallAiBackendProductCategoryMapping } from "../../../../api/structures/IShoppingMallAiBackendProductCategoryMapping";
import { IPageIShoppingMallAiBackendProductCategoryMapping } from "../../../../api/structures/IPageIShoppingMallAiBackendProductCategoryMapping";

@Controller("/shoppingMallAiBackend/admin/productCategoryMappings")
export class ShoppingmallaibackendAdminProductcategorymappingsController {
  /**
   * Create a new mapping between a product and category.
   *
   * Creates a product-category mapping, associating a specific product with a
   * specific category for catalog structure and business search use. On
   * success, the mapping entry is persisted with assignment timestamp and
   * available for subsequent product or catalog navigation.
   *
   * Admin and catalog manager authorization are mandatory to execute this
   * request. Duplicates or invalid assignments return business error responses.
   * Related endpoints allow for listing and auditing all mapping
   * relationships.
   *
   * @param connection
   * @param body IDs and metadata necessary to assign a product to a catalog
   *   category, including product and category UUIDs, plus any relevant
   *   assignment properties.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendProductCategoryMapping.ICreate,
  ): Promise<IShoppingMallAiBackendProductCategoryMapping> {
    try {
      return await post__shoppingMallAiBackend_admin_productCategoryMappings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search product-to-category mappings with advanced filtering.
   *
   * Returns a list of product-to-category mapping records, supporting complex
   * queries such as filtering by category, product, assignment date, or
   * business relations. The endpoint is especially useful for taxonomy audits,
   * catalog restructuring, or validation of business rule compliance regarding
   * product classification.
   *
   * Bulk or advanced queries may be limited to admin and catalog management
   * roles. Appropriate pagination and sorting are supported, allows efficient
   * navigation of large catalog datasets. Errors are returned for malformed
   * queries or access control failures. Related endpoints allow creation,
   * updating, and deletion of mappings.
   *
   * @param connection
   * @param body Paging, sorting, and filtering parameters for map retrieval,
   *   such as product, category, assignment date range, or catalog focus.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendProductCategoryMapping.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProductCategoryMapping> {
    try {
      return await patch__shoppingMallAiBackend_admin_productCategoryMappings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a specific product-category mapping by UUID.
   *
   * Fetch a specific product-category mapping with full resolution of both
   * mapped product and category. This endpoint allows admin or catalog managers
   * to review the placement or assignment status of a given product in the
   * hierarchy or product catalog structure. All fields of the mapping record,
   * including both product and category references, are returned.
   *
   * Authorization is required to access mapping details. This operation is
   * useful for catalog editing/validation, evidence preservation, or structural
   * catalog diagnostics. Errors are raised for nonexistent or unauthorized
   * access.
   *
   * @param connection
   * @param mappingId The UUID assigned to this product-category mapping record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mappingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mappingId")
    mappingId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProductCategoryMapping> {
    try {
      return await get__shoppingMallAiBackend_admin_productCategoryMappings_$mappingId(
        {
          admin,
          mappingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product-category mapping for a product.
   *
   * This API operation allows an authorized seller or administrator to update a
   * product-category mapping in the system. Typical use cases include
   * reorganizing product catalog structures, correcting misclassifications, or
   * reflecting new business priorities. The operation strictly enforces
   * validation to ensure that the referenced product and category are valid and
   * that no duplicate mappings exist. Security and auditability are ensured by
   * allowing only those with the correct permissions to make such updates, and
   * every change may be logged for compliance evidence. Related APIs include
   * creation and deletion of mappings, catalog browsing, and category
   * management endpoints. Errors will be reported if the referenced entities
   * are not found or if the update would result in a duplicate mapping.
   *
   * @param connection
   * @param mappingId Unique identifier of the product-category mapping to
   *   update.
   * @param body Payload specifying the new product and category association
   *   details to update the mapping.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":mappingId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mappingId")
    mappingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductCategoryMapping.IUpdate,
  ): Promise<IShoppingMallAiBackendProductCategoryMapping> {
    try {
      return await put__shoppingMallAiBackend_admin_productCategoryMappings_$mappingId(
        {
          admin,
          mappingId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a product-category mapping entry.
   *
   * This operation enables authorized administrators to permanently remove a
   * product-category mapping from the system. It is used for correcting catalog
   * structure, compliance with evolving business needs, or removing outdated
   * associations. The deletion action completely erases the record from the
   * database, and cannot be undone. Errors include attempts to delete
   * non-existent mappings. Related operations include mapping creation and
   * update.
   *
   * @param connection
   * @param mappingId Unique identifier for the product-category mapping to be
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":mappingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("mappingId")
    mappingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_productCategoryMappings_$mappingId(
        {
          admin,
          mappingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
