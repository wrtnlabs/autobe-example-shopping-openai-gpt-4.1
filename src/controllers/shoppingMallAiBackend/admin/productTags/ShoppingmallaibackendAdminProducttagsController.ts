import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_productTags } from "../../../../providers/post__shoppingMallAiBackend_admin_productTags";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_productTags } from "../../../../providers/patch__shoppingMallAiBackend_admin_productTags";
import { get__shoppingMallAiBackend_admin_productTags_$tagId } from "../../../../providers/get__shoppingMallAiBackend_admin_productTags_$tagId";
import { put__shoppingMallAiBackend_admin_productTags_$tagId } from "../../../../providers/put__shoppingMallAiBackend_admin_productTags_$tagId";
import { delete__shoppingMallAiBackend_admin_productTags_$tagId } from "../../../../providers/delete__shoppingMallAiBackend_admin_productTags_$tagId";

import { IShoppingMallAiBackendProductTag } from "../../../../api/structures/IShoppingMallAiBackendProductTag";
import { IPageIShoppingMallAiBackendProductTag } from "../../../../api/structures/IPageIShoppingMallAiBackendProductTag";

@Controller("/shoppingMallAiBackend/admin/productTags")
export class ShoppingmallaibackendAdminProducttagsController {
  /**
   * Create a new product tag for catalog classification and filtering.
   *
   * This API allows administrators to create new product tags which are used
   * for classifying, filtering, and searching products in the catalog.
   * Mandatory fields include tag_name and tag_code, where tag_code must be
   * globally unique. Tag creation automatically sets the required audit
   * timestamps.
   *
   * The operation validates for unique tag_code before insertion. Failure to
   * meet constraints results in meaningful error messages. Only authenticated
   * users with administrative privileges are allowed to invoke this endpoint.
   *
   * Tags are critical for catalog navigation, analytics, and AI-driven
   * recommendations, making this endpoint a key part of catalog management
   * workflows. Related endpoints exist for listing, updating, and deleting
   * tags.
   *
   * @param connection
   * @param body Product tag creation payload including tag name and code.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendProductTag.ICreate,
  ): Promise<IShoppingMallAiBackendProductTag> {
    try {
      return await post__shoppingMallAiBackend_admin_productTags({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list product tags with advanced filtering and pagination.
   *
   * Retrieves a filtered, sorted, and paginated list of product tags for
   * monitoring, management, and analytics purposes. This endpoint allows
   * sellers and admins to search by tag name, filter by tag code or status, and
   * apply pagination for large datasets. It is critical for managing product
   * discoverability, recommendation systems, and business analytics, providing
   * support for AI augmentation or compliance-driven tag regulations. Errors
   * include invalid search queries or insufficient permission to view all tags.
   * This API is commonly used with tag creation and update workflows.
   *
   * @param connection
   * @param body Search filters, sort options, and pagination for querying
   *   product tags.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendProductTag.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProductTag> {
    try {
      return await patch__shoppingMallAiBackend_admin_productTags({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a product tag by its unique identifier.
   *
   * This API retrieves the details of a specific product tag using its unique
   * ID. Product tags are used to facilitate classification, search, and
   * filtering within the product catalog, and are essential for analytics,
   * navigation, and merchandising features. Only fields present in the product
   * tag schema are returned.
   *
   * Authentication is required and typically restricted to users with catalog
   * management permissions (e.g., admin). The endpoint ensures that only
   * undelted (active) tags are returned; logically deleted tags (deleted_at
   * set) are omitted.
   *
   * This operation supports integration with catalog management flows and is
   * often used in conjunction with creation, update, and deletion endpoints to
   * facilitate the full lifecycle of product tags. Error cases for non-existent
   * or deleted tags are handled with appropriate client-visible errors.
   *
   * @param connection
   * @param tagId Unique identifier of the product tag to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":tagId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProductTag> {
    try {
      return await get__shoppingMallAiBackend_admin_productTags_$tagId({
        admin,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product tag by ID.
   *
   * This endpoint updates the details of a product tag. Editable fields include
   * tag_name and tag_code. Both fields must satisfy schema constraints,
   * including the uniqueness of tag_code. The endpoint also updates the
   * updated_at timestamp to reflect when the change was made.
   *
   * Only administrators are permitted to update product tags. The API performs
   * validation to avoid duplicate tag_codes and ensures that logically deleted
   * tags are not updated. Failure cases return informative error messages for
   * remediation. This operation is typically used together with tag creation,
   * retrieval, and deletion for comprehensive catalog management workflows.
   *
   * @param connection
   * @param tagId Unique identifier of the product tag to update.
   * @param body Fields for updating a product tag (name, code).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":tagId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductTag.IUpdate,
  ): Promise<IShoppingMallAiBackendProductTag> {
    try {
      return await put__shoppingMallAiBackend_admin_productTags_$tagId({
        admin,
        tagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a product tag by its unique identifier.
   *
   * This API performs a soft delete of a product tag based on its unique ID.
   * The deleted_at field is set to mark the record as logically deleted,
   * preserving data for audit, compliance, and potential restoration. Only
   * non-deleted tags can be soft deleted.
   *
   * The operation is restricted to admin users with catalog management
   * privileges. Once a tag is soft deleted, it will be excluded from standard
   * catalog listings and analytics, but its evidence remains for future
   * reference or compliance checks. Error states, such as trying to delete a
   * non-existent or already deleted tag, are handled with clear responses.
   *
   * @param connection
   * @param tagId Unique identifier of the product tag to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":tagId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_productTags_$tagId({
        admin,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
