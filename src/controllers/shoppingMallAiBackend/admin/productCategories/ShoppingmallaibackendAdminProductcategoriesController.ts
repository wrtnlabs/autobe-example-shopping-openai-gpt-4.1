import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_productCategories } from "../../../../providers/post__shoppingMallAiBackend_admin_productCategories";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_productCategories } from "../../../../providers/patch__shoppingMallAiBackend_admin_productCategories";
import { get__shoppingMallAiBackend_admin_productCategories_$categoryId } from "../../../../providers/get__shoppingMallAiBackend_admin_productCategories_$categoryId";
import { put__shoppingMallAiBackend_admin_productCategories_$categoryId } from "../../../../providers/put__shoppingMallAiBackend_admin_productCategories_$categoryId";
import { delete__shoppingMallAiBackend_admin_productCategories_$categoryId } from "../../../../providers/delete__shoppingMallAiBackend_admin_productCategories_$categoryId";

import { IShoppingMallAiBackendProductCategory } from "../../../../api/structures/IShoppingMallAiBackendProductCategory";
import { IPageIShoppingMallAiBackendProductCategory } from "../../../../api/structures/IPageIShoppingMallAiBackendProductCategory";

@Controller("/shoppingMallAiBackend/admin/productCategories")
export class ShoppingmallaibackendAdminProductcategoriesController {
  /**
   * Create a new product category.
   *
   * This API registers a new product category, populating all mandatory
   * business fields as defined in the schema. The operation enforces uniqueness
   * for 'category_code' and, optionally, for name within its channel. Supports
   * definition of parent category (for nested/hierarchical taxonomies), sorting
   * order, and activation state (for listing/navigation).
   *
   * Authorization is enforced for admin and category managers only, per
   * platform policy. Successful calls return the complete new product category
   * record; errors for duplicate codes, invalid parameters, or missing parents
   * (in hierarchy) are clearly reported. Integrates with category retrieval and
   * management workflows for seamless catalog operation.
   *
   * @param connection
   * @param body Required and optional attributes for the new product category,
   *   including hierarchical placement, sort order, and display properties.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendProductCategory.ICreate,
  ): Promise<IShoppingMallAiBackendProductCategory> {
    try {
      return await post__shoppingMallAiBackend_admin_productCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and retrieve a paginated list of product categories.
   *
   * This API operation provides a sophisticated way to search, filter, and
   * retrieve product categories within the shopping mall backend. It utilizes
   * advanced query parameters for sorting, paging, and hierarchical filtering
   * based on the actual fields in the Prisma schema (such as 'category_name',
   * 'category_code', 'parent_id', 'is_active', and 'sort_order').
   *
   * Administrators and seller managers can use this endpoint to analyze and
   * manage categories across channels and for various business analytics needs.
   * Role-based access ensures that only authorized personnel can execute such
   * broad queries, and sensitive hierarchical category data is protected from
   * public exposure.
   *
   * Related category creation and update operations allow for lifecycle
   * management, while this operation focuses on read access with filtering and
   * search. Error handling includes validation feedback for invalid filters or
   * missing required parameters. Only product category data is included, and
   * response fields adhere strictly to business logic and regulatory audit
   * requirements.
   *
   * @param connection
   * @param body Complex query and filter parameters for searching product
   *   categories (e.g., name, code, parent-child, is_active) with paging and
   *   sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendProductCategory.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProductCategory.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_productCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a single product category by ID.
   *
   * This operation fetches the complete details for a specific product category
   * by ID. All business-relevant fields from the category model, such as
   * 'category_name', 'category_code', 'parent_id', 'is_active', and descriptive
   * metadata, are made available for display or editing purposes.
   *
   * Authorized users (such as admin or category managers) can use this endpoint
   * to view or pre-fill category editing dialogs, or to present users with
   * category attributes in business dashboards. The operation secures access to
   * only the requested category, ensuring privacy and correctness. Related
   * operations may use this as a precursor to category update or deletion
   * workflows.
   *
   * Errors are raised in case the category does not exist or access is
   * unauthorized, with meaningful business error codes and descriptions.
   *
   * @param connection
   * @param categoryId The unique identifier (UUID) of the product category to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProductCategory> {
    try {
      return await get__shoppingMallAiBackend_admin_productCategories_$categoryId(
        {
          admin,
          categoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product category by ID.
   *
   * Allows updating of an existing product category. Authorized administrators
   * can modify essential attributes such as category name, code, description,
   * parent_id (to reorganize hierarchy), sort order, and activation status.
   * Underlying logic in the model enforces uniqueness and business
   * constraints.
   *
   * All changes are logged or snapshotted for audit trail and rollback per
   * compliance rules. Errors are returned if the category is missing, locked,
   * or if updates would violate parent-child or uniqueness constraints. The
   * endpoint is designed for efficient bulk catalog management as well as
   * individual editing use cases.
   *
   * Only authorized 'admin' or designated category managers may perform this
   * update.
   *
   * @param connection
   * @param categoryId The unique identifier (UUID) of the product category to
   *   modify.
   * @param body Fields to update the product category, permitting partial
   *   updates to code, name, parent, activation, or sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductCategory.IUpdate,
  ): Promise<IShoppingMallAiBackendProductCategory> {
    try {
      return await put__shoppingMallAiBackend_admin_productCategories_$categoryId(
        {
          admin,
          categoryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a product category by ID, retaining evidence for audit.
   *
   * This API operation performs a soft deletion of the product category
   * identified by the supplied UUID. It sets the 'deleted_at' field, making the
   * category unavailable for further business use or assignment to new
   * products, but retains it for evidence, audit, and regulatory review.
   * Cascading removal of product-category mappings is not automatic; associated
   * products remain immutable to avoid orphaning data.
   *
   * Only authorized personnel (admins) may execute this call. Error responses
   * occur if the category does not exist, is already deleted, or is locked/in
   * use in a way that prohibits removal. Related operations include category
   * listing, retrieval, and restoration for compliance workflows.
   *
   * @param connection
   * @param categoryId The unique identifier (UUID) of the product category to
   *   soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_productCategories_$categoryId(
        {
          admin,
          categoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
