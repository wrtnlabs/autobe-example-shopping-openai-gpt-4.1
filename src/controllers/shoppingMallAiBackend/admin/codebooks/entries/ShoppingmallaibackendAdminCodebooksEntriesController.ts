import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_codebooks_$codebookId_entries } from "../../../../../providers/post__shoppingMallAiBackend_admin_codebooks_$codebookId_entries";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_codebooks_$codebookId_entries } from "../../../../../providers/patch__shoppingMallAiBackend_admin_codebooks_$codebookId_entries";
import { get__shoppingMallAiBackend_admin_codebooks_$codebookId_entries_$entryId } from "../../../../../providers/get__shoppingMallAiBackend_admin_codebooks_$codebookId_entries_$entryId";

import { IShoppingMallAiBackendCodebookEntry } from "../../../../../api/structures/IShoppingMallAiBackendCodebookEntry";
import { IPageIShoppingMallAiBackendCodebookEntry } from "../../../../../api/structures/IPageIShoppingMallAiBackendCodebookEntry";

@Controller("/shoppingMallAiBackend/admin/codebooks/:codebookId/entries")
export class ShoppingmallaibackendAdminCodebooksEntriesController {
  /**
   * Add a new entry to a codebook by its codebookId.
   *
   * Create a new entry (option, status, tag, etc.) within the given codebook.
   * Accepts code, label, and business metadata, storing it as a new entity in
   * the codebook_entries table. Only admin users can create new entries, with
   * strict duplicate code checks. Supports structured expansion of lookup
   * dictionaries to accommodate business evolution.
   *
   * @param connection
   * @param codebookId UUID of the parent codebook to which this entry will be
   *   added.
   * @param body Entry details (code, label, order, etc.) for the new codebook
   *   entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("codebookId")
    codebookId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCodebookEntry.ICreate,
  ): Promise<IShoppingMallAiBackendCodebookEntry> {
    try {
      return await post__shoppingMallAiBackend_admin_codebooks_$codebookId_entries(
        {
          admin,
          codebookId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List codebook entries for a specific codebook, supporting filtering and
   * pagination.
   *
   * Retrieve all codebook entries (options/values) belonging to a specified
   * codebook. Results include code, label, description, sort order, and
   * visibility. Supports advanced search, filtering, and sorted pagination for
   * use in business logic, admin dashboard, and integration scenarios. Access
   * restricted to administrators.
   *
   * @param connection
   * @param codebookId The UUID of the codebook whose entries are to be listed.
   * @param body Filter and pagination info for codebook entries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("codebookId")
    codebookId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCodebookEntry.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCodebookEntry.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_codebooks_$codebookId_entries(
        {
          admin,
          codebookId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific codebook entry by IDs.
   *
   * Retrieve complete detail for a specific codebook entry, referenced by both
   * codebookId and entryId. Returns all business/context metadata, supporting
   * admin workflows to inspect or configure business dictionaries and lookup
   * sets. Access is limited to admin or system-level users.
   *
   * @param connection
   * @param codebookId UUID of the codebook containing the entry.
   * @param entryId UUID of the entry to lookup within the codebook.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":entryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("codebookId")
    codebookId: string & tags.Format<"uuid">,
    @TypedParam("entryId")
    entryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCodebookEntry> {
    try {
      return await get__shoppingMallAiBackend_admin_codebooks_$codebookId_entries_$entryId(
        {
          admin,
          codebookId,
          entryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
