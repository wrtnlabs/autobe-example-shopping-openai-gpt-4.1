import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_codebooks } from "../../../../providers/post__shoppingMallAiBackend_admin_codebooks";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_codebooks } from "../../../../providers/patch__shoppingMallAiBackend_admin_codebooks";
import { get__shoppingMallAiBackend_admin_codebooks_$codebookId } from "../../../../providers/get__shoppingMallAiBackend_admin_codebooks_$codebookId";
import { put__shoppingMallAiBackend_admin_codebooks_$codebookId } from "../../../../providers/put__shoppingMallAiBackend_admin_codebooks_$codebookId";
import { delete__shoppingMallAiBackend_admin_codebooks_$codebookId } from "../../../../providers/delete__shoppingMallAiBackend_admin_codebooks_$codebookId";

import { IShoppingMallAiBackendCodebook } from "../../../../api/structures/IShoppingMallAiBackendCodebook";
import { IPageIShoppingMallAiBackendCodebook } from "../../../../api/structures/IPageIShoppingMallAiBackendCodebook";

@Controller("/shoppingMallAiBackend/admin/codebooks")
export class ShoppingmallaibackendAdminCodebooksController {
  /**
   * Create a new codebook for business dictionary/enum management.
   *
   * Create a new codebook for structuring a business dictionary or lookup
   * values. Admin users provide code, name, and optional description/details.
   * System validates uniqueness of code and stores the entity with full
   * timestamps. This enables dynamic, admin-managed extension of business logic
   * dictionaries.
   *
   * @param connection
   * @param body The details of the new codebook to be created.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCodebook.ICreate,
  ): Promise<IShoppingMallAiBackendCodebook> {
    try {
      return await post__shoppingMallAiBackend_admin_codebooks({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search codebooks with pagination for business configuration.
   *
   * Retrieve a structured, paginated list of all available codebooks configured
   * in the system. This supports dynamic dictionary management for business
   * logic, lookup values, and admin configuration. The response includes
   * meta-information such as code, name, description, and timestamps. Only
   * users with admin privileges can access the complete codebook list for
   * configuration or integration purposes.
   *
   * @param connection
   * @param body Filter, search, and pagination criteria for codebooks.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCodebook.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCodebook.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_codebooks({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get codebook details by its unique identifier.
   *
   * Retrieve the full detail of a single codebook given its unique codebookId.
   * The result contains all business and administrative information needed to
   * present, configure, or integrate with this codebook. Suitable for system
   * admins or integration services referencing business dictionaries.
   *
   * @param connection
   * @param codebookId The unique identifier (UUID) of the target codebook.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":codebookId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("codebookId")
    codebookId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCodebook> {
    try {
      return await get__shoppingMallAiBackend_admin_codebooks_$codebookId({
        admin,
        codebookId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the metadata of an existing codebook entity by codebookId.
   *
   * Update certain properties of a specified codebook using its codebookId.
   * Only mutable fields such as name and description may be edited; the
   * business code remains immutable for consistency and audit compliance. This
   * API enforces strict permissions for admin/operators.
   *
   * @param connection
   * @param codebookId The unique identifier (UUID) of the codebook to update.
   * @param body Updated fields for the codebook (excluding code field).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":codebookId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("codebookId")
    codebookId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCodebook.IUpdate,
  ): Promise<IShoppingMallAiBackendCodebook> {
    try {
      return await put__shoppingMallAiBackend_admin_codebooks_$codebookId({
        admin,
        codebookId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a codebook by its UUID, retaining for audit/evidence.
   *
   * Permanently deactivate (soft delete) a codebook in the system by marking
   * the deleted_at timestamp. This operation prevents further use in business
   * logic, but retains the record for audit, history, and compliance evidence.
   * This is an admin-only operation as it can impact running business rules or
   * integrations.
   *
   * @param connection
   * @param codebookId The unique identifier (UUID) of the codebook to be
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":codebookId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("codebookId")
    codebookId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_codebooks_$codebookId({
        admin,
        codebookId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
