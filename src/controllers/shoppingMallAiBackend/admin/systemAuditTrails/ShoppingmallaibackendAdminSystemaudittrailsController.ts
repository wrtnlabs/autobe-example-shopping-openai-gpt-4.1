import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_systemAuditTrails } from "../../../../providers/patch__shoppingMallAiBackend_admin_systemAuditTrails";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_systemAuditTrails_$auditTrailId } from "../../../../providers/get__shoppingMallAiBackend_admin_systemAuditTrails_$auditTrailId";

import { IPageIShoppingMallAiBackendSystemAuditTrail } from "../../../../api/structures/IPageIShoppingMallAiBackendSystemAuditTrail";
import { IShoppingMallAiBackendSystemAuditTrail } from "../../../../api/structures/IShoppingMallAiBackendSystemAuditTrail";

@Controller("/shoppingMallAiBackend/admin/systemAuditTrails")
export class ShoppingmallaibackendAdminSystemaudittrailsController {
  /**
   * Search and retrieve a filtered, paginated list of system audit trails from
   * shopping_mall_ai_backend_system_audit_trails.
   *
   * Retrieve a filtered and paginated list of system-level audit trail entries.
   * This operation is used for compliance reviews, incident investigations, and
   * administrative monitoring. It supports complex query capabilities including
   * filtering by event types, actors, time ranges, and full-text search of
   * event descriptions.
   *
   * The audit trail records are append-only and immutableâ€”each record captures
   * the event type (such as config_change, access, permission changes, or
   * errors), the actor responsible, a textual business description, optional
   * machine-readable metadata, and the timestamp of occurrence.
   *
   * Only privileged admin users may invoke this operation, and all access is
   * itself auditable. Large result sets are paginated for efficiency and
   * security. If no records match the query parameters, an empty result page is
   * returned. This endpoint does not allow modification or deletion of audit
   * trail data. The results help fulfill regulatory, security, and forensic
   * requirements for the shopping mall backend.
   *
   * @param connection
   * @param body Query parameters for filtering, searching, and paginating
   *   system audit trail entries
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendSystemAuditTrail.IRequest,
  ): Promise<IPageIShoppingMallAiBackendSystemAuditTrail.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_systemAuditTrails({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific system audit trail entry from
   * shopping_mall_ai_backend_system_audit_trails by auditTrailId.
   *
   * Retrieve the details of an individual system audit trail entry specified by
   * auditTrailId. Used for legal, compliance, and security reviews, this
   * endpoint allows administrators to view comprehensive information including
   * event type, responsible actor, description, metadata, and precise timestamp
   * for critical actions in the shopping mall platform.
   *
   * Audit trail entries serve as immutable, tamper-evident evidence. Access is
   * tightly restricted to authorized administrators, and every access may
   * itself be logged for further traceability. If the specified auditTrailId
   * does not exist, an appropriate error is returned.
   *
   * This operation maps directly to the
   * shopping_mall_ai_backend_system_audit_trails Prisma model and provides
   * granular visibility into platform history.
   *
   * @param connection
   * @param auditTrailId Unique identifier of the audit trail record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditTrailId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("auditTrailId")
    auditTrailId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendSystemAuditTrail> {
    try {
      return await get__shoppingMallAiBackend_admin_systemAuditTrails_$auditTrailId(
        {
          admin,
          auditTrailId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
