import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings } from "../../../../../providers/post__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings } from "../../../../../providers/patch__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings";
import { get__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings_$mappingId } from "../../../../../providers/get__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings_$mappingId";
import { put__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings_$mappingId } from "../../../../../providers/put__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings_$mappingId";
import { delete__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings_$mappingId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings_$mappingId";

import { IShoppingMallAiBackendChannelCategoryMapping } from "../../../../../api/structures/IShoppingMallAiBackendChannelCategoryMapping";
import { IPageIShoppingMallAiBackendChannelCategoryMapping } from "../../../../../api/structures/IPageIShoppingMallAiBackendChannelCategoryMapping";

@Controller("/shoppingMallAiBackend/admin/sections/:sectionId/categoryMappings")
export class ShoppingmallaibackendAdminSectionsCategorymappingsController {
  /**
   * Create a new channel section-category mapping.
   *
   * Create a new mapping between the channel section identified by sectionId
   * and a target channel category or business entity. Used by administrators to
   * extend navigation, enable analytics-specific taxonomies, or create
   * channel-specific category overlays. Authorization required (admin only). If
   * mapping with the same composite keys exists, an error is returned.
   *
   * @param connection
   * @param sectionId Unique identifier of the parent channel section (UUID).
   * @param body Information needed to create a new mapping between the channel
   *   section and the target category.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannelCategoryMapping.ICreate,
  ): Promise<IShoppingMallAiBackendChannelCategoryMapping> {
    try {
      return await post__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings(
        {
          admin,
          sectionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate section's category mappings for management and audit.
   *
   * List and search all category mappings for a section, supporting admin audit
   * of navigation configuration, content relationships, and UI organization.
   * This enables cross-linking or assignment between sections and categories,
   * which drives content discovery and personalization.
   *
   * Only accessible by admin roles; supports filtering by related category
   * code/name, mapping created_at, and pagination for managing large
   * taxonomies. Mappings cannot be updated or created via this endpoint, only
   * listed.
   *
   * @param connection
   * @param sectionId Unique identifier of the section for category mapping
   *   listing (UUID).
   * @param body Pagination, sorting, and filter criteria for searching
   *   section's category mappings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannelCategoryMapping.IRequest,
  ): Promise<IPageIShoppingMallAiBackendChannelCategoryMapping> {
    try {
      return await patch__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings(
        {
          admin,
          sectionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed channel section-category mapping by mappingId.
   *
   * Retrieve all details pertaining to a specific section-to-category mapping,
   * identified by mappingId, under a given sectionId. This API is instrumental
   * for admins or operators managing channel navigation structures, analytics
   * configurations, or synchronizations. Security considerations require
   * authorization as an admin or system operator. If mapping does not exist, a
   * 404 is returned.
   *
   * @param connection
   * @param sectionId Unique identifier for the channel section (UUID).
   * @param mappingId Unique identifier for the section/category mapping (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":mappingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
    @TypedParam("mappingId")
    mappingId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendChannelCategoryMapping> {
    try {
      return await get__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings_$mappingId(
        {
          admin,
          sectionId,
          mappingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a channel section-category mapping by mappingId.
   *
   * Update details of a specific section-to-category mapping identified by
   * mappingId within a given sectionId. This operation permits modification of
   * mapping keys or associated properties to reflect evolving business rules.
   * Authorization by admin required. Changes are audited for evidence and
   * compliance. Not available for public users.
   *
   * @param connection
   * @param sectionId Unique identifier for the channel section (UUID).
   * @param mappingId Unique identifier for the section-category mapping (UUID).
   * @param body Data to update the mapping between section and category.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":mappingId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
    @TypedParam("mappingId")
    mappingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannelCategoryMapping.IUpdate,
  ): Promise<IShoppingMallAiBackendChannelCategoryMapping> {
    try {
      return await put__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings_$mappingId(
        {
          admin,
          sectionId,
          mappingId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a channel section-category mapping by mappingId.
   *
   * Delete an existing channel section-category mapping by mappingId and
   * sectionId. This implements soft deletion by setting the deleted_at
   * timestamp, preserving evidence for compliance and rollback. Only accessible
   * by admin authorization. If mapping doesn't exist, a 404 error is returned.
   *
   * @param connection
   * @param sectionId Unique identifier for the channel section (UUID).
   * @param mappingId Unique identifier for the mapping to delete (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":mappingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
    @TypedParam("mappingId")
    mappingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_sections_$sectionId_categoryMappings_$mappingId(
        {
          admin,
          sectionId,
          mappingId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
