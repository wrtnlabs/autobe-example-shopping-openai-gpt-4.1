import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_customers } from "../../../../providers/patch__shoppingMallAiBackend_admin_customers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_customers_$customerId } from "../../../../providers/get__shoppingMallAiBackend_admin_customers_$customerId";
import { put__shoppingMallAiBackend_admin_customers_$customerId } from "../../../../providers/put__shoppingMallAiBackend_admin_customers_$customerId";
import { delete__shoppingMallAiBackend_admin_customers_$customerId } from "../../../../providers/delete__shoppingMallAiBackend_admin_customers_$customerId";

import { IPageIShoppingMallAiBackendCustomer } from "../../../../api/structures/IPageIShoppingMallAiBackendCustomer";
import { IShoppingMallAiBackendCustomer } from "../../../../api/structures/IShoppingMallAiBackendCustomer";

@Controller("/shoppingMallAiBackend/admin/customers")
export class ShoppingmallaibackendAdminCustomersController {
  /**
   * Search and retrieve a paginated list of customers for admin management.
   *
   * Retrieve a paginated list of customers registered in the
   * ShoppingMallAiBackend. The endpoint supports complex search criteria such
   * as filtering by email address, phone number, real name, nickname, account
   * status (active/inactive), and verification status. Administrators can
   * leverage this API to search for newly registered users, identify unverified
   * or suspended accounts, and view users' recent activity dates for business
   * monitoring.
   *
   * Security is crucial; only users with admin permissions may access this
   * endpoint. Returned customer details include essential profile information,
   * account status, verification flags, and last login time. Information about
   * logically deleted (withdrawn) accounts is filtered or annotated per
   * compliance requirements. This endpoint is often used in conjunction with
   * customer detail retrieval and update APIs when more granular management
   * actions are needed.
   *
   * Underlying schema relationships allow for querying session activity and
   * withdrawal history through additional endpoints. Search results are
   * paginated, enabling efficient browsing or export for audits and compliance
   * reports. Error responses are returned if the query contains invalid
   * filters, or the requesting user lacks sufficient privileges.
   *
   * @param connection
   * @param body Customer search, filter, and pagination parameters for advanced
   *   admin queries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCustomer.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCustomer.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_customers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full details for a single customer account by admin.
   *
   * Retrieve detailed information for a single customer user in the
   * ShoppingMallAiBackend system. Administrators utilize this endpoint to
   * review or audit customer profile, contact channels, account status,
   * verification state, and log-in activity. This information is critical for
   * compliance review, support, and account management workflows.
   *
   * Sensitive fields such as phone number and email are only viewable by admin
   * roles for security. Profile information may be cross-referenced with
   * session, withdrawal, or external identity endpoints for full user activity
   * history. Related withdrawal or external identity data must be fetched
   * through their respective endpoints.
   *
   * If the customer account is logically deleted (withdrawn), the response will
   * be annotated accordingly. Error scenarios include not found, insufficient
   * privileges, or attempts to access removed accounts.
   *
   * @param connection
   * @param customerId Unique identifier of the customer to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":customerId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCustomer> {
    try {
      return await get__shoppingMallAiBackend_admin_customers_$customerId({
        admin,
        customerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update customer account profile and status for admin management.
   *
   * Update one or more fields of a customer's account by administrator control.
   * The admin can modify the real name, nickname, account activation or
   * suspension status, and the verification state. Email and phone number
   * updates undergo business checks for uniqueness and potential
   * re-verification requirements.
   *
   * All changes are validated against the model and business logic.
   * Modification events are logged for auditing, with full before/after
   * recording in the compliance trail. Password update is not supported in this
   * endpoint and may require separate processes with additional
   * authentication.
   *
   * Post-update, the response returns the complete, up-to-date customer record.
   * Error scenarios include invalid fields, violation of business rules, or
   * attempts to update a logically deleted (withdrawn) account.
   *
   * @param connection
   * @param customerId Unique identifier of the customer to update.
   * @param body Fields to update in the customer account, following admin
   *   validation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":customerId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCustomer.IUpdate,
  ): Promise<IShoppingMallAiBackendCustomer> {
    try {
      return await put__shoppingMallAiBackend_admin_customers_$customerId({
        admin,
        customerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (withdraw) a customer without permanent data removal.
   *
   * Mark the specified customer account in the ShoppingMallAiBackend as
   * logically deleted (withdrawn) by setting the deleted_at timestamp. This
   * operation does not remove data but restricts further use and blocks login
   * while retaining the account for audit and regulatory compliance. All linked
   * data and audit logs remain accessible for authorized roles.
   *
   * Administrators use this functionality to handle account withdrawal
   * requests, respond to policy violations, or suspend accounts in line with
   * business or legal requirements. The operation is idempotent if already
   * logically deleted. Attempts to delete already-withdrawn or non-existent
   * accounts will return appropriate errors.
   *
   * @param connection
   * @param customerId Unique identifier of the customer to withdraw.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":customerId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_customers_$customerId({
        admin,
        customerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
