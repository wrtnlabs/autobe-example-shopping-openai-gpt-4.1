import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_customers_$customerId_sessions } from "../../../../../providers/patch__shoppingMallAiBackend_admin_customers_$customerId_sessions";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_customers_$customerId_sessions_$sessionId } from "../../../../../providers/get__shoppingMallAiBackend_admin_customers_$customerId_sessions_$sessionId";
import { put__shoppingMallAiBackend_admin_customers_$customerId_sessions_$sessionId } from "../../../../../providers/put__shoppingMallAiBackend_admin_customers_$customerId_sessions_$sessionId";
import { delete__shoppingMallAiBackend_admin_customers_$customerId_sessions_$sessionId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_customers_$customerId_sessions_$sessionId";

import { IPageIShoppingMallAiBackendCustomerSession } from "../../../../../api/structures/IPageIShoppingMallAiBackendCustomerSession";
import { IShoppingMallAiBackendCustomerSession } from "../../../../../api/structures/IShoppingMallAiBackendCustomerSession";

@Controller("/shoppingMallAiBackend/admin/customers/:customerId/sessions")
export class ShoppingmallaibackendAdminCustomersSessionsController {
  /**
   * Retrieve all sessions for a customer with pagination and filtering.
   *
   * List all current and historical session records associated with a
   * particular customer, for administrative auditing or support. This includes
   * login details such as device, IP address, session creation and expiry
   * times, and termination events. Sessions reflect both API and UI
   * authentications and are used to trace user activity or support account
   * recovery in case of security incidents.
   *
   * Access to session details is strictly limited to admin roles due to
   * sensitivity of access tokens and personal device identifiers. Not intended
   * for customer self-service. Sessions may be further filtered or scoped in
   * business logic, and results are paginated for performance.
   *
   * @param connection
   * @param customerId Unique identifier of the customer whose sessions are
   *   being listed.
   * @param body Session search parameters, such as date ranges, status, or
   *   pagination settings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCustomerSession.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCustomerSession> {
    try {
      return await patch__shoppingMallAiBackend_admin_customers_$customerId_sessions(
        {
          admin,
          customerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get single session detail for a customer for audit/forensics.
   *
   * Retrieve details and audit information for a single session belonging to a
   * customer. This includes origin IP/device/user-agent, session creation and
   * expiry times, and (cautiously) access and refresh tokens for forensic or
   * support evaluation. Session status is determined from expiry and
   * termination fields.
   *
   * Strictly for administrative use in compliance, audit, or security
   * scenarios. Attempting to access a non-existent or unauthorized session
   * returns an appropriate error. Data returned is sensitive and should be
   * displayed only in secure backoffice/admin UI.
   *
   * @param connection
   * @param customerId Unique identifier of the customer who owns the session.
   * @param sessionId Unique identifier of the session record to be retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sessionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCustomerSession> {
    try {
      return await get__shoppingMallAiBackend_admin_customers_$customerId_sessions_$sessionId(
        {
          admin,
          customerId,
          sessionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific customer session for security, device, or lifecycle
   * management.
   *
   * This API updates attributes of a customer session, such as session tokens,
   * expiration, IP address, or termination status. It ensures session state and
   * security can be managed efficiently for scenarios like forced logout (by
   * admin or self), session renewal, or device deactivation. Only the session
   * owner (customer) or administrators can perform this update, aligning with
   * platform security policies and audit requirements.
   *
   * The session is identified by its sessionId and cross-verified with the
   * customerId for ownership and integrity. All modifications are logged for
   * compliance. If the session is expired or belongs to a different customer,
   * an error will be returned.
   *
   * Typical use cases include user-initiated device management, admin security
   * operations, or incident response that require explicit update of session
   * information. All updates conform with business logic for audit, evidence,
   * and regulatory compliance.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of the target customer.
   * @param sessionId Unique identifier (UUID) of the customer session to
   *   update.
   * @param body Session update payload (e.g., to terminate session, rotate
   *   token, or extend expiry).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sessionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCustomerSession.IUpdate,
  ): Promise<IShoppingMallAiBackendCustomerSession> {
    try {
      return await put__shoppingMallAiBackend_admin_customers_$customerId_sessions_$sessionId(
        {
          admin,
          customerId,
          sessionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically terminate (logout) a specific customer session for security/audit
   * purposes.
   *
   * This API performs logical deletion (termination) of a user session
   * identified by sessionId for a specific customer. It is used for explicit
   * log-out, forced device deactivation, or security event-driven session
   * termination.
   *
   * By setting terminated_at instead of removing the record, auditability and
   * session traceability are preserved for business compliance. The operation
   * ensures only the session owner (customer) or authorized administrators can
   * destroy the session, and all actions are logged for regulatory
   * requirements.
   *
   * After successful termination, the session cannot be reused for API
   * authentication. Error responses are provided if the session or customer
   * does not exist or is already terminated.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of the target customer.
   * @param sessionId Unique identifier (UUID) for the customer session being
   *   terminated.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sessionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_customers_$customerId_sessions_$sessionId(
        {
          admin,
          customerId,
          sessionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
