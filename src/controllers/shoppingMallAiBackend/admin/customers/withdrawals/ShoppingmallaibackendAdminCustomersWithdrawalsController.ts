import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_customers_$customerId_withdrawals } from "../../../../../providers/patch__shoppingMallAiBackend_admin_customers_$customerId_withdrawals";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_customers_$customerId_withdrawals_$withdrawalId } from "../../../../../providers/get__shoppingMallAiBackend_admin_customers_$customerId_withdrawals_$withdrawalId";

import { IPageIShoppingMallAiBackendCustomerWithdrawal } from "../../../../../api/structures/IPageIShoppingMallAiBackendCustomerWithdrawal";
import { IShoppingMallAiBackendCustomerWithdrawal } from "../../../../../api/structures/IShoppingMallAiBackendCustomerWithdrawal";

@Controller("/shoppingMallAiBackend/admin/customers/:customerId/withdrawals")
export class ShoppingmallaibackendAdminCustomersWithdrawalsController {
  /**
   * Retrieve paginated withdrawal history for a customer account.
   *
   * This API lists all withdrawal snapshots (account deactivations or removals)
   * performed on a user account, with full audit evidence (reason,
   * withdrawn_at, created_at). Useful for reviewing past deactivation events,
   * onboarding audits, or regulatory requests. The user (or admin) may filter
   * by dates, reason, or other criteria provided by
   * IShoppingMallAiBackendCustomerWithdrawal.IRequest.
   *
   * Typical use includes customer self-review, admin compliance checks, or
   * processing data export/archival requests after withdrawal. All records are
   * returned in chronological order and paginated for large event history.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of the customer whose withdrawal
   *   records are being retrieved.
   * @param body Filter criteria and pagination info for withdrawal history
   *   search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCustomerWithdrawal.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCustomerWithdrawal.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_customers_$customerId_withdrawals(
        {
          admin,
          customerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific customer withdrawal record for audit or
   * evidence.
   *
   * This operation retrieves all evidence and detail for a single customer
   * withdrawal (account deactivation) event. Auditable details include the
   * business reason, withdrawal date, and evidence timestamp. It is typically
   * called by the customer reviewing their own history or an admin for
   * compliance reporting. Both the customerId and withdrawalId are required as
   * UUIDs. Attempts to access withdrawals not owned by the customer are
   * forbidden.
   *
   * This API supports regulatory audit operations, evidence review, and
   * customer post-withdrawal requests. Actions are logged for compliance.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of the customer whose withdrawal
   *   record is being retrieved.
   * @param withdrawalId Unique identifier (UUID) of the specific withdrawal
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":withdrawalId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("withdrawalId")
    withdrawalId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCustomerWithdrawal> {
    try {
      return await get__shoppingMallAiBackend_admin_customers_$customerId_withdrawals_$withdrawalId(
        {
          admin,
          customerId,
          withdrawalId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
