import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities } from "../../../../../providers/patch__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities_$externalIdentityId } from "../../../../../providers/get__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities_$externalIdentityId";
import { put__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities_$externalIdentityId } from "../../../../../providers/put__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities_$externalIdentityId";
import { delete__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities_$externalIdentityId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities_$externalIdentityId";

import { IPageIShoppingMallAiBackendCustomerExternalIdentity } from "../../../../../api/structures/IPageIShoppingMallAiBackendCustomerExternalIdentity";
import { IShoppingMallAiBackendCustomerExternalIdentity } from "../../../../../api/structures/IShoppingMallAiBackendCustomerExternalIdentity";

@Controller(
  "/shoppingMallAiBackend/admin/customers/:customerId/externalIdentities",
)
export class ShoppingmallaibackendAdminCustomersExternalidentitiesController {
  /**
   * List/search all external identity providers linked to a customer account.
   *
   * This operation provides a paginated list and search of all external
   * identity connections (social login providers, OAuth links, SSO) for a
   * particular customer account. It is essential for account and security
   * management, enabling users or admins to review, link, or decouple external
   * authentication providers.
   *
   * Each result contains provider information, identity key, time of linkage,
   * and last verified timestamp. The request can filter by provider, link
   * status, or search by provider_key. Pagination enables scalable query for
   * customers with many external logins.
   *
   * The API only returns external identities for the requested customerId.
   * Unauthorized requests or attempts to view another user's data are forbidden
   * and logged for audit.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of the target customer owner of
   *   the external identities.
   * @param body Search, filter, and pagination criteria for external
   *   identities.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCustomerExternalIdentity.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCustomerExternalIdentity.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities(
        {
          admin,
          customerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get specific external identity provider info for a customer.
   *
   * This API enables users or admins to retrieve details about a specific
   * external identity provider account (such as Google, Apple, Naver, etc)
   * linked to a user's account. The operation is secured so only the account
   * owner or platform admin can query this linked identity.
   *
   * It returns provider, provider key, linkage time, and last verified
   * timestamp. If the target external identity does not belong to the customer,
   * an error is returned.
   *
   * This API is essential for profile review, account linking history display,
   * and security troubleshooting. Actions are audit-logged for compliance where
   * required.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of the target customer owner of
   *   the external identity.
   * @param externalIdentityId Unique identifier (UUID) of the external identity
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":externalIdentityId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("externalIdentityId")
    externalIdentityId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCustomerExternalIdentity> {
    try {
      return await get__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities_$externalIdentityId(
        {
          admin,
          customerId,
          externalIdentityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the mapping/properties for a customer's external identity record.
   *
   * This endpoint enables update of properties for a linked external identity,
   * such as last verification time, provider key, or correction of external
   * account linkage problems. Common use cases include reconnection after an
   * external provider updates keys, or admin-driven correction or audit of
   * social account links.
   *
   * Operation is restricted to the customer who owns the external identity or
   * platform administrators. The path ensures both customerId and
   * externalIdentityId match. Attempts to update identities not owned by the
   * customer are forbidden and trigger audit logging.
   *
   * The request payload must follow the update DTO structure; successful update
   * returns the revised identity info.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of customer owner of the
   *   external identity.
   * @param externalIdentityId Unique identifier (UUID) of the target external
   *   identity record.
   * @param body Payload describing fields to update in linked external
   *   identity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":externalIdentityId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("externalIdentityId")
    externalIdentityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCustomerExternalIdentity.IUpdate,
  ): Promise<IShoppingMallAiBackendCustomerExternalIdentity> {
    try {
      return await put__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities_$externalIdentityId(
        {
          admin,
          customerId,
          externalIdentityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove/unlink a specific external identity from a customer profile. (Hard
   * delete).
   *
   * This operation removes a linked external identity (social sign-in, OAuth,
   * etc.) from a user's profile. Used on user request (unlink a social account)
   * or by admin for identity/data management and privacy compliance. The schema
   * has no soft delete field, so the linked identity is physically removed from
   * the database.
   *
   * Only the customer owner or authorized platform admins may perform this
   * deletion. Actions are audit-logged. Attempting to delete a non-owned or
   * already-deleted mapping will result in error.
   *
   * @param connection
   * @param customerId Unique identifier (UUID) of target customer.
   * @param externalIdentityId Unique identifier (UUID) of external identity to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":externalIdentityId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("customerId")
    customerId: string & tags.Format<"uuid">,
    @TypedParam("externalIdentityId")
    externalIdentityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_customers_$customerId_externalIdentities_$externalIdentityId(
        {
          admin,
          customerId,
          externalIdentityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
