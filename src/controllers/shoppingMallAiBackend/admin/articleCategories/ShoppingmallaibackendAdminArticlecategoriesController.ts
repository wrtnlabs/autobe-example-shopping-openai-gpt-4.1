import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_articleCategories } from "../../../../providers/post__shoppingMallAiBackend_admin_articleCategories";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_articleCategories } from "../../../../providers/patch__shoppingMallAiBackend_admin_articleCategories";
import { get__shoppingMallAiBackend_admin_articleCategories_$articleCategoryId } from "../../../../providers/get__shoppingMallAiBackend_admin_articleCategories_$articleCategoryId";
import { put__shoppingMallAiBackend_admin_articleCategories_$articleCategoryId } from "../../../../providers/put__shoppingMallAiBackend_admin_articleCategories_$articleCategoryId";
import { delete__shoppingMallAiBackend_admin_articleCategories_$articleCategoryId } from "../../../../providers/delete__shoppingMallAiBackend_admin_articleCategories_$articleCategoryId";

import { IShoppingMallAiBackendArticleCategory } from "../../../../api/structures/IShoppingMallAiBackendArticleCategory";
import { IPageIShoppingMallAiBackendArticleCategory } from "../../../../api/structures/IPageIShoppingMallAiBackendArticleCategory";

@Controller("/shoppingMallAiBackend/admin/articleCategories")
export class ShoppingmallaibackendAdminArticlecategoriesController {
  /**
   * Create a new article category.
   *
   * An endpoint for creating a new article category by supplying required
   * details, including the name, associated channel ID, sort order, and
   * optional description or parent category for hierarchy. Before insertion,
   * the endpoint enforces validation rules on unique category name per channel
   * and proper parent assignment for category trees. Admin or other privileged
   * user roles may be necessary to access this endpoint based on business
   * policy.
   *
   * On success, the newly created category is returned, while error states
   * include uniqueness violations, missing or invalid required attributes, or
   * access denial. Audit fields such as created_at and updated_at are managed
   * automatically by the system.
   *
   * @param connection
   * @param body Required data to create the article category such as name,
   *   channel, and order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendArticleCategory.ICreate,
  ): Promise<IShoppingMallAiBackendArticleCategory> {
    try {
      return await post__shoppingMallAiBackend_admin_articleCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve paginated article categories list.
   *
   * This endpoint returns a filtered, paginated list of article categories.
   * Filtering options can include parent category, channel, name search, or
   * other available attributes as defined in the schema. Results are paginated
   * for scalable consumption in applications such as admin panels or category
   * selection UIs.
   *
   * The underlying shopping_mall_ai_backend_article_categories model captures
   * all structural and descriptive data for categories, such as hierarchy
   * (parent_id), channel linkage, sort order, and audit fields. The operation
   * is typically used in UIs to allow users or admins to browse and select from
   * available categories for article creation or navigation.
   *
   * Security enforcement may restrict access to authenticated users or admins
   * if category management is privileged. Typical use cases include category
   * lookup for content management systems, or for populating navigation menus
   * in public-facing UIs.
   *
   * @param connection
   * @param body Advanced filter, search, or pagination options for categories.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendArticleCategory.IRequest,
  ): Promise<IPageIShoppingMallAiBackendArticleCategory.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_articleCategories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full information for a specific article category by ID.
   *
   * This endpoint returns a single article category based on its globally
   * unique articleCategoryId. The result includes all category attributes such
   * as hierarchy (parent_id), channel assignment, name, description, sorting
   * order, and audit trail timestamps.
   *
   * The operation relies on the shopping_mall_ai_backend_article_categories
   * table for persistent category data. Use cases include viewing the details
   * of a selected category in a category editor UI, or gathering comprehensive
   * information for displaying a category within a navigation tree or article
   * form.
   *
   * Error handling covers not found (invalid ID), deleted categories, or access
   * errors if the user has insufficient privilege.
   *
   * @param connection
   * @param articleCategoryId Unique identifier of the target article category.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":articleCategoryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("articleCategoryId")
    articleCategoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendArticleCategory> {
    try {
      return await get__shoppingMallAiBackend_admin_articleCategories_$articleCategoryId(
        {
          admin,
          articleCategoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a single article category by its ID.
   *
   * Allows the updating of a specific article category, selected by
   * articleCategoryId. The payload may include changes to the name (with
   * uniqueness checks within the channel), description, parent_id (if
   * reorganizing category hierarchy), and sort order. All business rules are
   * enforced to prevent hierarchy loops or name collisions.
   *
   * On successful update, the updated category information is returned. Audit
   * information (updated_at timestamp) is automatically refreshed. Only users
   * with sufficient permissions—such as admins or category managers—can perform
   * this operation. Error handling addresses invalid category IDs, permission
   * errors, or uniqueness validation failures.
   *
   * @param connection
   * @param articleCategoryId Unique identifier of the article category to
   *   update.
   * @param body Fields for updating the category, such as name, parent, order,
   *   or description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":articleCategoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("articleCategoryId")
    articleCategoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendArticleCategory.IUpdate,
  ): Promise<IShoppingMallAiBackendArticleCategory> {
    try {
      return await put__shoppingMallAiBackend_admin_articleCategories_$articleCategoryId(
        {
          admin,
          articleCategoryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently erase an article category by ID from the system (hard delete).
   *
   * Permanently remove an article category entity from the system by its unique
   * identifier. This API endpoint performs a hard delete—completely erasing the
   * record from the database instead of marking it as deleted—according to the
   * structure defined in the shopping_mall_ai_backend_article_categories Prisma
   * model.
   *
   * The operation should only be accessible to system administrators. It does
   * not handle recursive child removal or linked article reassignment; clients
   * are responsible for resolving dependent relationships before using this
   * endpoint. Any articles or hierarchical children that reference this
   * category may encounter orphaned links or business logic errors if not
   * processed beforehand.
   *
   * This hard delete operation is irreversible and bypasses any soft delete
   * mechanism. Once the category is erased, its metadata, relations, and all
   * non-cascading links are unrecoverable. Use with caution and ensure a proper
   * back-up and audit process exist at a business level, as this API is
   * intended exclusively for permanent category removal by authorized
   * operators.
   *
   * @param connection
   * @param articleCategoryId Unique identifier of the article category to be
   *   erased
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":articleCategoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("articleCategoryId")
    articleCategoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_articleCategories_$articleCategoryId(
        {
          admin,
          articleCategoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
