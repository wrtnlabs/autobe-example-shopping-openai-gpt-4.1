import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_financialIncidents } from "../../../../providers/patch__shoppingMallAiBackend_admin_financialIncidents";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_financialIncidents_$incidentId } from "../../../../providers/get__shoppingMallAiBackend_admin_financialIncidents_$incidentId";

import { IPageIShoppingMallAiBackendFinancialIncident } from "../../../../api/structures/IPageIShoppingMallAiBackendFinancialIncident";
import { IShoppingMallAiBackendFinancialIncident } from "../../../../api/structures/IShoppingMallAiBackendFinancialIncident";

@Controller("/shoppingMallAiBackend/admin/financialIncidents")
export class ShoppingmallaibackendAdminFinancialincidentsController {
  /**
   * Search and paginate financial incident records for compliance and audit
   * purposes.
   *
   * Retrieve a paginated, filtered list of financial incident and anomaly
   * records for deposits, mileage, or coin ledgers. This API empowers
   * administrators to efficiently audit, investigate, and review incident logs,
   * supporting compliance, fraud detection, and root cause analysis for
   * financial operations within the mall.
   *
   * Access is restricted to administrators due to the sensitive compliance and
   * personal data involved. The operation implements advanced filtering by
   * incident type (e.g., fraud, compliance_audit, withdrawal_dispute), status
   * (open, closed, investigating, resolved), business entities (deposit,
   * mileage, coin, customer, seller), and date ranges. Business search
   * scenarios include identifying unresolved compliance incidents, reviewing
   * root causes, or monitoring fraud clusters.
   *
   * Pagination and sorting are configurable for business monitoring dashboards.
   * Errors are handled with compliance-focused messages and detailed audit logs
   * for investigative traceability. Related APIs include detailed incident GET,
   * as well as list/search APIs for deposit, mileage, and coin transactions.
   *
   * @param connection
   * @param body Search filters and pagination/sort criteria for financial
   *   incidents.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendFinancialIncident.IRequest,
  ): Promise<IPageIShoppingMallAiBackendFinancialIncident.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_financialIncidents({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific financial incident by ID.
   *
   * Allows a system administrator or compliance auditor to retrieve a complete
   * financial incident record by its ID. The operation exposes all stored
   * incident details, including affected entities (deposit, mileage, coin,
   * customer, seller), incident type, current status, descriptive details,
   * associated external references, timestamps, and resolution data.
   *
   * This endpoint is essential for supporting legal investigations, in-depth
   * root cause analysis, and regulatory or audit evidence traceability. Data
   * exposure is restricted to admins due to the sensitivity of compliance and
   * personal information. If the incident is not found or is no longer
   * accessible due to deletion or retention expiry, a clear API error is
   * returned with audit log.
   *
   * Related endpoints include the financial incidents search/index API.
   *
   * @param connection
   * @param incidentId Unique identifier (UUID) of the financial incident to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":incidentId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("incidentId")
    incidentId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendFinancialIncident> {
    try {
      return await get__shoppingMallAiBackend_admin_financialIncidents_$incidentId(
        {
          admin,
          incidentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
