import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { delete__shoppingMallAiBackend_admin_orders_$orderId_deliveries_$deliveryId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_orders_$orderId_deliveries_$deliveryId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";

@Controller(
  "/shoppingMallAiBackend/admin/orders/:orderId/deliveries/:deliveryId",
)
export class ShoppingmallaibackendAdminOrdersDeliveriesController {
  /**
   * Soft delete a specific delivery record of an order by marking it as
   * deleted.
   *
   * Delete a specific delivery record for a given order. This operation
   * performs a logical deletion (soft delete) of the
   * shopping_mall_ai_backend_order_deliveries record, setting the deleted_at
   * timestamp. Only authorized administrative users are permitted to perform
   * this action, and all operations are logged for audit and compliance.
   * Related delivery events remain in the database according to business rules
   * for evidence retention. This operation is critical for correcting erroneous
   * delivery records or removing incorrect tracking events post-creation.
   *
   * Security is enforced according to administrative privilege; attempts by
   * unauthorized users will return a forbidden error. The operation does not
   * cascade delete associated delivery event logs, as evidence and business
   * compliance require those to remain unless independently removed by policy.
   *
   * Error handling includes not-found responses for invalid orderId or
   * deliveryId, and compliance event recording for all hard or logical
   * deletions. Usage is limited to administrative interfaces, not available for
   * customers or sellers.
   *
   * @param connection
   * @param orderId Unique identifier of the order containing the delivery.
   * @param deliveryId Unique identifier of the delivery to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_orders_$orderId_deliveries_$deliveryId(
        {
          admin,
          orderId,
          deliveryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
