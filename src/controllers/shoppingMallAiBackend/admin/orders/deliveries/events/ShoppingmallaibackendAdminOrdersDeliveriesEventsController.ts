import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_orders_$orderId_deliveries_$deliveryId_events } from "../../../../../../providers/patch__shoppingMallAiBackend_admin_orders_$orderId_deliveries_$deliveryId_events";
import { AdminAuth } from "../../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_orders_$orderId_deliveries_$deliveryId_events_$eventId } from "../../../../../../providers/get__shoppingMallAiBackend_admin_orders_$orderId_deliveries_$deliveryId_events_$eventId";

import { IPageIShoppingMallAiBackendOrderDeliveryEvent } from "../../../../../../api/structures/IPageIShoppingMallAiBackendOrderDeliveryEvent";
import { IShoppingMallAiBackendOrderDeliveryEvent } from "../../../../../../api/structures/IShoppingMallAiBackendOrderDeliveryEvent";

@Controller(
  "/shoppingMallAiBackend/admin/orders/:orderId/deliveries/:deliveryId/events",
)
export class ShoppingmallaibackendAdminOrdersDeliveriesEventsController {
  /**
   * Retrieve delivery event logs for a specific shipment of an order
   * (paginated).
   *
   * Retrieve a paginated list of status update events, checkpoints, and
   * exception logs for a given delivery event within a specific order. This
   * operation allows logistics managers, administrators, or authorized customer
   * service agents to monitor and audit the full timeline of delivery for
   * compliance, performance analysis, or dispute resolution purposes.
   *
   * Filtering and sorting can be applied based on event type, logged_at, or
   * keyword within event_context. The operation supports business and
   * regulatory requirements, ensuring immutable delivery evidence records.
   * Security is enforced to ensure only authorized users can access complete
   * event logs. Each response includes full event metadata, including creation
   * and logged_at timestamps, event_type codes, and detailed event_context (if
   * any).
   *
   * Expected errors include not found (if order or delivery is missing),
   * forbidden (if user lacks privileges), and validation errors for invalid
   * IDs. Operation may be linked from shipment tracking UIs or administrative
   * dashboards.
   *
   * @param connection
   * @param orderId Order ID containing the delivery.
   * @param deliveryId Delivery ID for which events are being queried.
   * @param body Optional filters and pagination options to constrain the result
   *   set for delivery events.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderDeliveryEvent.IRequest,
  ): Promise<IPageIShoppingMallAiBackendOrderDeliveryEvent> {
    try {
      return await patch__shoppingMallAiBackend_admin_orders_$orderId_deliveries_$deliveryId_events(
        {
          admin,
          orderId,
          deliveryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * View the details of a specific delivery event in an order's shipment
   * timeline.
   *
   * Retrieve detailed information of a particular delivery event from the
   * delivery timeline of a given order. This operation is used for compliance,
   * tracking, or customer support investigations and returns the full event
   * record with metadata including event_type (status update, exception, etc),
   * event_context (description), logged_at, and creation timestamp.
   *
   * Security requires proper authorization (admin, logistic manager, or
   * designated operator). Errors include not found (invalid orderId,
   * deliveryId, or eventId), or forbidden in case of insufficient privileges.
   * Use case scenarios include logistics dispute resolution, performance
   * audits, and chain-of-custody evidencing.
   *
   * @param connection
   * @param orderId Unique identifier of the order containing the delivery.
   * @param deliveryId Unique identifier of the delivery being audited.
   * @param eventId Unique identifier of the delivery event.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":eventId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
    @TypedParam("eventId")
    eventId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrderDeliveryEvent> {
    try {
      return await get__shoppingMallAiBackend_admin_orders_$orderId_deliveries_$deliveryId_events_$eventId(
        {
          admin,
          orderId,
          deliveryId,
          eventId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
