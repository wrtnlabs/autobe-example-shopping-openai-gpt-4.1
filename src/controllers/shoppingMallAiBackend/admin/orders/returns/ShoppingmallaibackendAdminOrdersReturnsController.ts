import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_orders_$orderId_returns } from "../../../../../providers/patch__shoppingMallAiBackend_admin_orders_$orderId_returns";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_orders_$orderId_returns_$returnId } from "../../../../../providers/get__shoppingMallAiBackend_admin_orders_$orderId_returns_$returnId";
import { put__shoppingMallAiBackend_admin_orders_$orderId_returns_$returnId } from "../../../../../providers/put__shoppingMallAiBackend_admin_orders_$orderId_returns_$returnId";
import { delete__shoppingMallAiBackend_admin_orders_$orderId_returns_$returnId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_orders_$orderId_returns_$returnId";

import { IPageIShoppingMallAiBackendOrderReturn } from "../../../../../api/structures/IPageIShoppingMallAiBackendOrderReturn";
import { IShoppingMallAiBackendOrderReturn } from "../../../../../api/structures/IShoppingMallAiBackendOrderReturn";

@Controller("/shoppingMallAiBackend/admin/orders/:orderId/returns")
export class ShoppingmallaibackendAdminOrdersReturnsController {
  /**
   * List returns (after-sales requests) for an order with filter and
   * pagination.
   *
   * Retrieve a paginated list of all return requests associated with a
   * particular order. This endpoint allows authorized customer service agents,
   * sellers, or admins to review and audit the after-sales return history for
   * any order, supporting batch workflows, compliance audits, and quality
   * analysis.
   *
   * Filtering can be performed by status (requested, approved, rejected,
   * completed), request time, or business reason. Returned records provide full
   * details: order_item, status, return reason, processing/completion
   * timestamps, and evidence attributes. Security policy restricts access to
   * authorized users according to organizational role, ensuring privacy of
   * after-sales actions and sensitive customer requests. Output can be
   * integrated into administrative portals and after-sales dashboards.
   *
   * @param connection
   * @param orderId Unique order ID for which returns are being queried.
   * @param body Optional filters and pagination parameters for order returns.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderReturn.IRequest,
  ): Promise<IPageIShoppingMallAiBackendOrderReturn> {
    try {
      return await patch__shoppingMallAiBackend_admin_orders_$orderId_returns({
        admin,
        orderId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a single return action for a specific order item.
   *
   * Retrieve the full details, status timeline, and audits of an individual
   * return request for an item within an order. Authorized administrative or
   * after-sales personnel can see all attributes, including order linkage,
   * return reason, request, process, and completion dates, and audit trace for
   * compliance reporting.
   *
   * Error responses include not-found for invalid orderId/returnId, or
   * forbidden for insufficient privileges. Security logic ensures only
   * privileged users may access confidential or personally-identifiable return
   * records. Output is usable in customer service consoles and compliance audit
   * workflows.
   *
   * @param connection
   * @param orderId ID of the order for which the return was requested.
   * @param returnId ID of the return request within this order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":returnId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("returnId")
    returnId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrderReturn> {
    try {
      return await get__shoppingMallAiBackend_admin_orders_$orderId_returns_$returnId(
        {
          admin,
          orderId,
          returnId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update return request details or status for an order item after creation.
   *
   * Update a return request for a specific order item. Permitted fields for
   * update include return_reason, status, and critical process timestamps. All
   * updates generate historical snapshots for audit evidence. This endpoint is
   * restricted to after-sales support, returns managers, and authorized admin
   * users; attempts by unauthorized users are denied.
   *
   * Common business use includes status transition (e.g., requested→approved,
   * approved→completed), reason correction, or adjustment of process dates. The
   * endpoint supports compliance workflow, escalation, and evidence capture.
   * Error handling includes validation failure (if data violates business logic
   * or state transitions), forbidden (insufficient privilege), and not-found
   * (invalid IDs).
   *
   * @param connection
   * @param orderId Order ID linked to the return request.
   * @param returnId Unique return request ID to update.
   * @param body Fields to update on the return, including status or reason
   *   changes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":returnId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("returnId")
    returnId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderReturn.IUpdate,
  ): Promise<IShoppingMallAiBackendOrderReturn> {
    try {
      return await put__shoppingMallAiBackend_admin_orders_$orderId_returns_$returnId(
        {
          admin,
          orderId,
          returnId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a return request for an order item (admin/compliance only).
   *
   * Perform a soft delete of a return request record for a specific order item.
   * This sets the deleted_at timestamp on the record instead of removing it
   * from the database, preserving full business and compliance evidence. Used
   * for error correction, compliance, or operational cleanup by privileged
   * users only; all deletions are logged for regulatory oversight and audit
   * analysis.
   *
   * Unauthorized delete attempts or attempts outside compliance scope are
   * forbidden. The operation does not remove related evidence records (order
   * history, item data, etc.), which must be preserved for audit by business
   * rule. Errors include not found (invalid IDs) and forbidden (insufficient
   * privilege).
   *
   * @param connection
   * @param orderId Order ID associated with the return request to delete.
   * @param returnId Return request ID to delete (soft delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":returnId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("returnId")
    returnId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_orders_$orderId_returns_$returnId(
        {
          admin,
          orderId,
          returnId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
