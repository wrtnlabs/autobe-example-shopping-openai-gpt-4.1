import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_orders_$orderId_itemSnapshots } from "../../../../../providers/patch__shoppingMallAiBackend_admin_orders_$orderId_itemSnapshots";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_orders_$orderId_itemSnapshots_$itemSnapshotId } from "../../../../../providers/get__shoppingMallAiBackend_admin_orders_$orderId_itemSnapshots_$itemSnapshotId";

import { IPageIShoppingMallAiBackendOrderItemSnapshot } from "../../../../../api/structures/IPageIShoppingMallAiBackendOrderItemSnapshot";
import { IShoppingMallAiBackendOrderItemSnapshot } from "../../../../../api/structures/IShoppingMallAiBackendOrderItemSnapshot";

@Controller("/shoppingMallAiBackend/admin/orders/:orderId/itemSnapshots")
export class ShoppingmallaibackendAdminOrdersItemsnapshotsController {
  /**
   * List paginated order item snapshots (version histories) for an order.
   * Referenced table: shopping_mall_ai_backend_order_item_snapshots.
   *
   * Retrieves a paginated list of all order item snapshots for the specified
   * order, enabling viewing of historical item states for compliance or audit
   * purposes. Filtering supports reviewing by outcome, event type, or specific
   * business actions. Snapshots provide point-in-time evidence for business
   * workflow verification, dispute investigation, or regulatory reporting. Only
   * authorized admin or compliance roles may use this to avoid privacy or
   * business leakage.
   *
   * All snapshot data matches the schema structure for
   * shopping_mall_ai_backend_order_item_snapshots. Paging, sorting, and
   * security are enforced as per business policy.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID format).
   * @param body Search and filter criteria for snapshots on the specified
   *   order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderItemSnapshot.IRequest,
  ): Promise<IPageIShoppingMallAiBackendOrderItemSnapshot> {
    try {
      return await patch__shoppingMallAiBackend_admin_orders_$orderId_itemSnapshots(
        {
          admin,
          orderId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single order item snapshot for a given order and snapshot ID.
   * Table: shopping_mall_ai_backend_order_item_snapshots.
   *
   * Fetches the full details of a single order item snapshot for a given order,
   * including all versioned attributes and audit trail information. Requires
   * both order ID and snapshot ID. Intended for use cases such as compliance
   * review, legal investigation, or detailed dispute trace. Security controls
   * ensure only eligible admin/compliance users can access detailed snapshot
   * data. Attempts to access an invalid or unrelated snapshot ID will result in
   * an error. The schema is enforced strictly to comply with legal and
   * regulatory evidence standards.
   *
   * @param connection
   * @param orderId Order identifier to scope the snapshot (UUID format).
   * @param itemSnapshotId Unique identifier for the item snapshot (UUID
   *   format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":itemSnapshotId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemSnapshotId")
    itemSnapshotId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendOrderItemSnapshot> {
    try {
      return await get__shoppingMallAiBackend_admin_orders_$orderId_itemSnapshots_$itemSnapshotId(
        {
          admin,
          orderId,
          itemSnapshotId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
