import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__shoppingMallAiBackend_admin_orders_$orderId_items_$itemId } from "../../../../../providers/put__shoppingMallAiBackend_admin_orders_$orderId_items_$itemId";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { delete__shoppingMallAiBackend_admin_orders_$orderId_items_$itemId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_orders_$orderId_items_$itemId";

import { IShoppingMallAiBackendOrderItem } from "../../../../../api/structures/IShoppingMallAiBackendOrderItem";

@Controller("/shoppingMallAiBackend/admin/orders/:orderId/items/:itemId")
export class ShoppingmallaibackendAdminOrdersItemsController {
  /**
   * Update business-allowed fields of a single order item for a specific order.
   * Table: shopping_mall_ai_backend_order_items.
   *
   * Enables authorized users (admins or system operators in most cases) to
   * update selected business attributes of a single order item, such as
   * quantity, discounts, or status, as allowed by business rules. The operation
   * triggers business validation to ensure the updates are permitted for the
   * current order state. All changes are recorded in the audit trail for
   * compliance. Common scenarios include correcting errors detected post-order,
   * fulfilling compliance requirements, or resolving after-sale customer
   * support cases.
   *
   * @param connection
   * @param orderId Order identifier (UUID format).
   * @param itemId The target item's unique identifier (UUID format).
   * @param body Fields and updated values allowed for business-level update of
   *   an order item.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderItem.IUpdate,
  ): Promise<IShoppingMallAiBackendOrderItem> {
    try {
      return await put__shoppingMallAiBackend_admin_orders_$orderId_items_$itemId(
        {
          admin,
          orderId,
          itemId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a specific order item by marking its deleted_at timestamp.
   * Table: shopping_mall_ai_backend_order_items.
   *
   * Deletes (soft deletes) a single order item by order and item ID, marking
   * the deleted_at field rather than removing the row. This acts as a logical
   * removal and preserves the record for audit/tracing, required for regulatory
   * compliance. The permitted deleter is usually an admin and is only possible
   * for items not yet fulfilled or already cancelled. Attempts to delete items
   * in an immutable state will return a business error. All deletions are
   * logged for traceability.
   *
   * @param connection
   * @param orderId Target order's unique identifier (UUID format).
   * @param itemId Unique identifier for the item to be deleted (UUID format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("itemId")
    itemId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_orders_$orderId_items_$itemId(
        {
          admin,
          orderId,
          itemId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
