import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_products_$productId_bundles } from "../../../../../providers/post__shoppingMallAiBackend_admin_products_$productId_bundles";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_products_$productId_bundles } from "../../../../../providers/patch__shoppingMallAiBackend_admin_products_$productId_bundles";
import { get__shoppingMallAiBackend_admin_products_$productId_bundles_$bundleId } from "../../../../../providers/get__shoppingMallAiBackend_admin_products_$productId_bundles_$bundleId";
import { put__shoppingMallAiBackend_admin_products_$productId_bundles_$bundleId } from "../../../../../providers/put__shoppingMallAiBackend_admin_products_$productId_bundles_$bundleId";
import { delete__shoppingMallAiBackend_admin_products_$productId_bundles_$bundleId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_products_$productId_bundles_$bundleId";

import { IShoppingMallAiBackendProductBundle } from "../../../../../api/structures/IShoppingMallAiBackendProductBundle";
import { IPageIShoppingMallAiBackendProductBundle } from "../../../../../api/structures/IPageIShoppingMallAiBackendProductBundle";

@Controller("/shoppingMallAiBackend/admin/products/:productId/bundles")
export class ShoppingmallaibackendAdminProductsBundlesController {
  /**
   * Create a new product bundle (SKU variant) for a specific product.
   *
   * Create a new bundle (SKU/variant) for a product, associating a unique
   * combination of option unit selections, SKU code, price, and inventory
   * policy. Bundles provide fine-grained control over what combinations are
   * sold, at what price, and with individualized inventory or policy settings.
   *
   * Sellers and admins use this API to add new offerings for a product such as
   * adding [Red, XL] in addition to [Red, L], optionally with distinct pricing
   * or inventory tracking. All validations are performed for unique SKU code,
   * valid product linkage, and business rule conformity. The operation is fully
   * audit logged for compliance and future reference.
   *
   * @param connection
   * @param productId ID of the parent product for which the new bundle
   *   (variant) is created.
   * @param body Input data for bundle creation: option unit selection, SKU
   *   code, price, policy, activation flag.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductBundle.ICreate,
  ): Promise<IShoppingMallAiBackendProductBundle> {
    try {
      return await post__shoppingMallAiBackend_admin_products_$productId_bundles(
        {
          admin,
          productId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search all bundles/SKUs for a specific product.
   *
   * Retrieve a paginated, searchable list of bundles for a specific product.
   * Each bundle represents a unique variant grouping (such as [Red, Large])
   * with its own SKU code and pricing. Sellers use this API to review available
   * combinations, check activation status, and manage inventory per bundle.
   *
   * Query may support filters such as bundle name, SKU, price, or activation
   * status, and supports paging for large catalogs. The response contains
   * summary information to support further management actions, such as updating
   * or deleting bundles.
   *
   * Accessible by authorized sellers for their own products or platform
   * administrators overseeing catalog structure.
   *
   * @param connection
   * @param productId ID of the parent product for which bundles (variants)
   *   should be listed.
   * @param body Search, filter, and pagination parameters for product bundles
   *   of a specific product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductBundle.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProductBundle.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_products_$productId_bundles(
        {
          admin,
          productId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific product bundle (SKU/variant) of a
   * product.
   *
   * Retrieve detailed information about a specific product bundle (SKU variant)
   * within a product's catalog. Bundles represent a set of option unit
   * selections (such as [Red, Large]) and carry their own business attributes
   * like SKU code, price, activation status, and inventory policies.
   *
   * Sellers and admins use this endpoint to inspect bundle configuration for
   * management purposes such as updating, enabling/disabling, or reviewing
   * inventory. Response delivers all business fields as defined in the Prisma
   * schema for shopping_mall_ai_backend_product_bundles.
   *
   * @param connection
   * @param productId ID of the parent product for which the bundle (variant) is
   *   managed.
   * @param bundleId ID of the unique bundle (SKU/variant) within the product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":bundleId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bundleId")
    bundleId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProductBundle> {
    try {
      return await get__shoppingMallAiBackend_admin_products_$productId_bundles_$bundleId(
        {
          admin,
          productId,
          bundleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of an existing product bundle (SKU/variant) for a product.
   *
   * Update attributes for an existing bundle (SKU/variant) of a product.
   * Sellers and admins may change the bundle name, SKU code, price, inventory
   * policy, activation status, or other business attributes to reflect catalog
   * updates or corrections. All updates are validated for unique SKU code,
   * compatible inventory linking, and pricing logic, and are timestamped for
   * future audit and compliance.
   *
   * Access is limited to product owners (sellers) and platform administrators,
   * maintaining catalog integrity and evidence requirements for business
   * operations. The update is non-destructive and maintains logical association
   * with the parent product.
   *
   * @param connection
   * @param productId ID of the parent product for which the bundle (variant) is
   *   being updated.
   * @param bundleId ID of the unique bundle (SKU/variant) within the product to
   *   update.
   * @param body Bundle attribute modifications (name, SKU, price, inventory
   *   policy, activation flag, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":bundleId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bundleId")
    bundleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductBundle.IUpdate,
  ): Promise<IShoppingMallAiBackendProductBundle> {
    try {
      return await put__shoppingMallAiBackend_admin_products_$productId_bundles_$bundleId(
        {
          admin,
          productId,
          bundleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific product bundle (SKU/variant) for a product (soft delete).
   *
   * Delete a specific bundle (SKU/variant) of a product from the catalog (soft
   * delete). Bundles typically represent unique combinations of option unit
   * selections such as color and size, and removing them prevents the sale of
   * the combination without destroying audit evidence. The deletion is logical
   * (sets deleted_at) and validated to ensure there are no dependent active
   * orders or inventory allocations.
   *
   * All deletion events are audit logged, and only sellers managing the product
   * or platform admins may invoke this operation. Business logic ensures that
   * user-facing elements and analytics ignore logically deleted bundles, but
   * legal and audit evidence are preserved.
   *
   * @param connection
   * @param productId ID of the parent product for which the bundle (variant) is
   *   being deleted.
   * @param bundleId ID of the unique bundle (SKU/variant) within the product to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":bundleId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("bundleId")
    bundleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_products_$productId_bundles_$bundleId(
        {
          admin,
          productId,
          bundleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
