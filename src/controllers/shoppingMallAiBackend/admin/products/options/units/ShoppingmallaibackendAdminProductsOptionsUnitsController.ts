import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_products_$productId_options_$optionId_units } from "../../../../../../providers/post__shoppingMallAiBackend_admin_products_$productId_options_$optionId_units";
import { AdminAuth } from "../../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../../decorators/payload/AdminPayload";
import { put__shoppingMallAiBackend_admin_products_$productId_options_$optionId_units_$unitId } from "../../../../../../providers/put__shoppingMallAiBackend_admin_products_$productId_options_$optionId_units_$unitId";
import { delete__shoppingMallAiBackend_admin_products_$productId_options_$optionId_units_$unitId } from "../../../../../../providers/delete__shoppingMallAiBackend_admin_products_$productId_options_$optionId_units_$unitId";

import { IShoppingMallAiBackendProductOptionUnit } from "../../../../../../api/structures/IShoppingMallAiBackendProductOptionUnit";

@Controller(
  "/shoppingMallAiBackend/admin/products/:productId/options/:optionId/units",
)
export class ShoppingmallaibackendAdminProductsOptionsUnitsController {
  /**
   * Create a new product option unit (variant value) for a specific option
   * group within a product.
   *
   * Create a new product option unit (such as a color or size variant) within a
   * specific product's option group. This operation allows sellers or
   * administrators to expand the set of selectable variations customers can
   * choose for a product, such as introducing a new color or size to an
   * existing product.
   *
   * Business validation ensures this unit value and code do not conflict with
   * other units in the same option group, preserving data integrity and
   * accurate inventory mapping. When a new unit is created, the system also
   * records the event for compliance and evidence purposes.
   *
   * Access is limited to roles authorized to manage product catalogs,
   * specifically sellers managing their own products and platform
   * administrators overseeing catalog structure. Related read/search/update
   * APIs may be required for complete option management workflows.
   *
   * @param connection
   * @param productId ID of the parent product for which the option and unit are
   *   being managed.
   * @param optionId ID of the product option group to which the new unit will
   *   be added.
   * @param body Details of the new product option unit (such as color, size,
   *   code, and sort order).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductOptionUnit.ICreate,
  ): Promise<IShoppingMallAiBackendProductOptionUnit> {
    try {
      return await post__shoppingMallAiBackend_admin_products_$productId_options_$optionId_units(
        {
          admin,
          productId,
          optionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product option unit's details (such as value or display
   * order) for a product option group.
   *
   * Update an existing product option unit (such as changing the display value
   * or code) within a specific product's option group. Sellers and admins use
   * this API to correct, rename, or adjust available variant options, such as
   * changing the name of a color or the order in which options appear to
   * customers.
   *
   * All updates are validated to avoid duplicate unit codes within the option
   * group, and event modification is recorded for compliance, audit, and
   * rollback traceability.
   *
   * This API is accessible to authorized sellers for their own products and to
   * administrators overseeing global or channel catalog structures. Business
   * logic may restrict updates if the unit is in use in active orders or
   * inventory references.
   *
   * @param connection
   * @param productId ID of the parent product for which the option and unit are
   *   being managed.
   * @param optionId ID of the product option group containing the unit.
   * @param unitId ID of the product option unit to update.
   * @param body Updated details for the product option unit (value, code, sort
   *   order, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":unitId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedParam("unitId")
    unitId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductOptionUnit.IUpdate,
  ): Promise<IShoppingMallAiBackendProductOptionUnit> {
    try {
      return await put__shoppingMallAiBackend_admin_products_$productId_options_$optionId_units_$unitId(
        {
          admin,
          productId,
          optionId,
          unitId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific product option unit (variant value) from a product option
   * group (soft delete).
   *
   * Delete a specific product option unit (variant value) from a product option
   * group. This operation is used to remove obsolete or incorrect options, such
   * as discontinuing a color or size variant. It performs a logical deletion by
   * setting the deleted_at field, so that the record remains for audit, but is
   * not available in user-facing selections.
   *
   * Deletion checks ensure the unit is not linked to active inventory, orders,
   * or ongoing promotions. Every deletion event is logged for traceability and
   * compliance requirements. Only sellers managing the product or
   * administrators may invoke this endpoint.
   *
   * @param connection
   * @param productId ID of the parent product for which the option and unit are
   *   being managed.
   * @param optionId ID of the product option group containing the unit.
   * @param unitId ID of the product option unit to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":unitId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedParam("unitId")
    unitId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_products_$productId_options_$optionId_units_$unitId(
        {
          admin,
          productId,
          optionId,
          unitId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
