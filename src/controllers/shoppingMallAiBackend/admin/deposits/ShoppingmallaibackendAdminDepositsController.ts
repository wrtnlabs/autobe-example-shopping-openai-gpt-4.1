import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_deposits } from "../../../../providers/post__shoppingMallAiBackend_admin_deposits";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_deposits } from "../../../../providers/patch__shoppingMallAiBackend_admin_deposits";
import { get__shoppingMallAiBackend_admin_deposits_$depositId } from "../../../../providers/get__shoppingMallAiBackend_admin_deposits_$depositId";
import { put__shoppingMallAiBackend_admin_deposits_$depositId } from "../../../../providers/put__shoppingMallAiBackend_admin_deposits_$depositId";
import { delete__shoppingMallAiBackend_admin_deposits_$depositId } from "../../../../providers/delete__shoppingMallAiBackend_admin_deposits_$depositId";

import { IShoppingMallAiBackendDeposit } from "../../../../api/structures/IShoppingMallAiBackendDeposit";
import { IPageIShoppingMallAiBackendDeposit } from "../../../../api/structures/IPageIShoppingMallAiBackendDeposit";

@Controller("/shoppingMallAiBackend/admin/deposits")
export class ShoppingmallaibackendAdminDepositsController {
  /**
   * Create a new deposit ledger for a customer or seller account.
   *
   * Create a new deposit ledger for a specified customer or seller. Used
   * primarily in onboarding flows, high-level finance operations, or account
   * recovery processesâ€”for cases where a separate deposit ledger must be
   * explicitly created. The request body must provide either a customer or
   * seller reference and may specify initial balances. Business logic validates
   * for required fields and ensures duplicate ledgers cannot be created for the
   * same account holder. On success, returns the created ledger object
   * including all system-populated audit fields.
   *
   * This is an admin-only, high-privilege operation with comprehensive audit
   * requirements. Subsequent actions (accrual, withdrawal, freeze) are managed
   * via related endpoints.
   *
   * @param connection
   * @param body Deposit creation information, including owner (customer or
   *   seller) and any initial balances or account metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendDeposit.ICreate,
  ): Promise<IShoppingMallAiBackendDeposit> {
    try {
      return await post__shoppingMallAiBackend_admin_deposits({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate deposit ledger balances.
   *
   * Search, filter, and paginate through all deposit ledgers in the system,
   * returning a paginated list of deposit summaries matching specified
   * criteria. This is used by finance, admin, or compliance teams to monitor
   * cash balances across all account holders, conduct audits, or support
   * business analysis. Search and pagination parameters allow for complex
   * queries based on holder type, balances, date ranges, or other business
   * logic fields. Only authorized users may perform this operation, which is
   * fully audited for evidence and compliance.
   *
   * Related endpoints: single deposit detail retrieval, deposit ledger
   * download/export, and incident review (for anomalies or freeze actions).
   *
   * @param connection
   * @param body Search and pagination parameters for filtering deposit ledgers.
   *   Supports advanced queries across holder type, balances, and date range.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendDeposit.IRequest,
  ): Promise<IPageIShoppingMallAiBackendDeposit.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_deposits({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full detail of a specific deposit ledger by its unique ID.
   *
   * Retrieve full details and audit snapshot of a specific deposit ledger by
   * deposit ID. This operation is used for business and compliance audits,
   * incident responses, or account investigations. The response includes all
   * financial, balance, status, and timestamp fields for the single target
   * ledger. Only authorized finance or admin users may perform this operation,
   * and each query is logged for audit and evidence compliance.
   *
   * Related operations include searching deposit ledgers (PATCH), exporting
   * deposit books, or accessing associated transaction journals or anomaly
   * incident logs.
   *
   * @param connection
   * @param depositId Unique identifier of the deposit ledger to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":depositId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendDeposit> {
    try {
      return await get__shoppingMallAiBackend_admin_deposits_$depositId({
        admin,
        depositId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update business or status information for a specific deposit ledger.
   *
   * Update an existing deposit ledger for a customer or seller identified by
   * deposit ID. This is used by authorized finance or admin staff to correct
   * balances, freeze/release accounts, or change ownership/account linkage in
   * complex business cases. All update events are recorded for compliance.
   * Business logic ensures consistent financial state and controls for
   * duplicate ledgers or compliance incidents. The updated ledger object is
   * returned after successful changes are applied. Only privileged roles may
   * access this function, which is subject to audit logging.
   *
   * Related endpoints: ledger search/query, individual ledger detail,
   * transaction journal access for the ledger, audit history retrieval for
   * compliance processes.
   *
   * @param connection
   * @param depositId Unique identifier of the deposit ledger to update.
   * @param body Fields to update on the deposit ledger, such as adjusted
   *   balances or ownership/account details.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":depositId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendDeposit.IUpdate,
  ): Promise<IShoppingMallAiBackendDeposit> {
    try {
      return await put__shoppingMallAiBackend_admin_deposits_$depositId({
        admin,
        depositId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a deposit ledger by setting deleted_at, preserving audit
   * evidence.
   *
   * Soft delete (logical deletion) of a deposit ledger by deposit ID. This
   * privileged operation sets the deleted_at timestamp on the record, excluding
   * it from active business operations but keeping it available for internal
   * audit, compliance evidence, and regulatory review. Soft-deleted deposit
   * ledgers are not permanently removed and can be recovered for investigation
   * or reporting as necessary. Application logic and business processes respect
   * the deleted_at field to ignore soft-deleted records except when accessing
   * audit logs or legal evidence.
   *
   * This operation is typically performed by admin or finance teams for data
   * governance, fraud investigation, business need, or regulatory requirements,
   * with every action strictly logged. Use this endpoint instead of permanent
   * delete except where explicit irrecoverable data removal is necessary under
   * compliance direction.
   *
   * Any attempt to delete a already soft-deleted or non-existent ledger returns
   * a business error. Related endpoints include search (PATCH), update (PUT),
   * and detail retrieval (GET) operations for deposit ledgers.
   *
   * @param connection
   * @param depositId Unique identifier of the deposit ledger to soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":depositId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("depositId")
    depositId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_deposits_$depositId({
        admin,
        depositId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
