import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_coins_$coinId_transactions } from "../../../../../providers/patch__shoppingMallAiBackend_admin_coins_$coinId_transactions";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_coins_$coinId_transactions_$transactionId } from "../../../../../providers/get__shoppingMallAiBackend_admin_coins_$coinId_transactions_$transactionId";

import { IPageIShoppingMallAiBackendCoinTransaction } from "../../../../../api/structures/IPageIShoppingMallAiBackendCoinTransaction";
import { IShoppingMallAiBackendCoinTransaction } from "../../../../../api/structures/IShoppingMallAiBackendCoinTransaction";

@Controller("/shoppingMallAiBackend/admin/coins/:coinId/transactions")
export class ShoppingmallaibackendAdminCoinsTransactionsController {
  /**
   * Search transaction history for a specific coin wallet ledger.
   *
   * Search and retrieve transaction (event) logs for a specified digital coin
   * wallet, supporting advanced filtering by event type, amount, date range, or
   * actor type. The operation is commonly used for audit, campaign analysis, or
   * compliance reporting. Business permissions ensure that only authorized
   * admins or wallet owners can query transaction histories. Results are
   * returned in pageable groups with event metadata for each entry. Related
   * endpoints allow access to transaction detail or trigger business incident
   * reviews.
   *
   * @param connection
   * @param coinId Coin wallet ledger ID for which to retrieve transactions.
   * @param body Query, filter, and pagination options for finding wallet
   *   transactions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCoinTransaction.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCoinTransaction> {
    try {
      return await patch__shoppingMallAiBackend_admin_coins_$coinId_transactions(
        {
          admin,
          coinId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of an individual coin wallet transaction event.
   *
   * Retrieve the full details of a single transaction event within a digital
   * coin wallet, including the before/after balances, actor type, transaction
   * type, origin, and timestamps. The operation requires both coinId (parent
   * wallet) and transactionId (event). Detailed audit metadata is included for
   * compliance review, evidence record production, or incident resolution.
   * Access is enforced by business permissions for financial event
   * traceability. Errors are returned if unauthorized or if the record does not
   * exist.
   *
   * @param connection
   * @param coinId Parent coin wallet ID to which the transaction belongs.
   * @param transactionId Unique transaction event ID within the coin wallet.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":transactionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
    @TypedParam("transactionId")
    transactionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCoinTransaction> {
    try {
      return await get__shoppingMallAiBackend_admin_coins_$coinId_transactions_$transactionId(
        {
          admin,
          coinId,
          transactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
