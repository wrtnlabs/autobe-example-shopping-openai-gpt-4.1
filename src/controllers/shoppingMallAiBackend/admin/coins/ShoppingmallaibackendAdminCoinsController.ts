import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_coins } from "../../../../providers/post__shoppingMallAiBackend_admin_coins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_coins } from "../../../../providers/patch__shoppingMallAiBackend_admin_coins";
import { get__shoppingMallAiBackend_admin_coins_$coinId } from "../../../../providers/get__shoppingMallAiBackend_admin_coins_$coinId";
import { put__shoppingMallAiBackend_admin_coins_$coinId } from "../../../../providers/put__shoppingMallAiBackend_admin_coins_$coinId";
import { delete__shoppingMallAiBackend_admin_coins_$coinId } from "../../../../providers/delete__shoppingMallAiBackend_admin_coins_$coinId";

import { IShoppingMallAiBackendCoin } from "../../../../api/structures/IShoppingMallAiBackendCoin";
import { IPageIShoppingMallAiBackendCoin } from "../../../../api/structures/IPageIShoppingMallAiBackendCoin";

@Controller("/shoppingMallAiBackend/admin/coins")
export class ShoppingmallaibackendAdminCoinsController {
  /**
   * Create a new digital coin wallet for a user or seller.
   *
   * Create a new coin wallet ledger for a specific user (customer) or seller.
   * The operation validates uniqueness and correctly associates the wallet to
   * the owner. Full tracking is provided with initial balances for total,
   * usable, expired, and on-hold coins. Coins may represent promotional,
   * marketing, or campaign value, and the entity supports future adjustments.
   * Permission checks ensure only admins or eligible actors can create ledgers.
   * Related operations include searching for coins and managing transactions
   * within a ledger.
   *
   * @param connection
   * @param body Required properties to create a new coin ledger, including
   *   identifying its owner (customerId or sellerId) and initial balances if
   *   applicable.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCoin.ICreate,
  ): Promise<IShoppingMallAiBackendCoin> {
    try {
      return await post__shoppingMallAiBackend_admin_coins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search coin wallets with pagination and advanced filters.
   *
   * Search and retrieve a filtered, paginated list of coin ledgers in the
   * system, supporting business search by user or seller, balances, or dates.
   * Pagination and sorting options are supported via request parameters. The
   * entity is relevant for reward management, promotional credits, or seller
   * settlement use-cases. Permission to search is limited to authorized
   * administrators due to financial data visibility. Related operations include
   * viewing ledger details or transactions.
   *
   * @param connection
   * @param body Search filters, pagination, and sorting parameters for coin
   *   ledgers.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCoin.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCoin> {
    try {
      return await patch__shoppingMallAiBackend_admin_coins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific coin wallet by ID.
   *
   * Obtain complete ledger details for a coin wallet by wallet ID. Includes
   * historical balances, accrued/promotional coin information, and linkages to
   * the owning user or seller. Permission is required, restricting access to
   * administrators or the specific wallet owner for privacy and compliance,
   * given audit sensitivity of digital wallet information. This endpoint helps
   * with wallet reconciliation or transaction review. Errors are triggered if
   * the ID is not found or authorized user is missing permissions.
   *
   * @param connection
   * @param coinId Unique identifier for the target digital coin wallet ledger.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":coinId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCoin> {
    try {
      return await get__shoppingMallAiBackend_admin_coins_$coinId({
        admin,
        coinId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update coin wallet ledger information by ID.
   *
   * Update wallet metadata for an identified digital coin wallet, including
   * owner linkage, current balance totals, or wallet status. The operation
   * requires the coinId path parameter and a body specifying the update fields.
   * Permission controls restrict access to credentialed admins, with all
   * modifications audit-logged for financial compliance. Common update use
   * cases include fixing discrepancies, campaign adjustments, or system
   * reconciliations. Related endpoints support searching ledgers and viewing
   * their histories.
   *
   * @param connection
   * @param coinId Unique identifier (UUID) for the digital coin wallet to
   *   update.
   * @param body Fields to update for the identified coin wallet, may include
   *   balances or owner profile linkage.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":coinId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCoin.IUpdate,
  ): Promise<IShoppingMallAiBackendCoin> {
    try {
      return await put__shoppingMallAiBackend_admin_coins_$coinId({
        admin,
        coinId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a coin wallet ledger permanently by ID (hard delete).
   *
   * Hard delete a coin wallet for the specified ID. This action cannot be
   * undone and is only allowed for admin users with the highest permissions in
   * operational, compliance, or test environments. All traces and balances for
   * the coin wallet are permanently removed from the active database, but audit
   * logs retain the removal event. Common reasons include system correction,
   * test record cleanup, or compliance-driven ledger elimination. Errors are
   * returned for unauthorized calls or ledgers with dependent business
   * history.
   *
   * @param connection
   * @param coinId Unique identifier (UUID) for the coin wallet to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":coinId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("coinId")
    coinId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_coins_$coinId({
        admin,
        coinId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
