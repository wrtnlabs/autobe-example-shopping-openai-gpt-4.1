import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_systemConfigs } from "../../../../providers/post__shoppingMallAiBackend_admin_systemConfigs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_systemConfigs } from "../../../../providers/patch__shoppingMallAiBackend_admin_systemConfigs";
import { get__shoppingMallAiBackend_admin_systemConfigs_$configId } from "../../../../providers/get__shoppingMallAiBackend_admin_systemConfigs_$configId";
import { put__shoppingMallAiBackend_admin_systemConfigs_$configId } from "../../../../providers/put__shoppingMallAiBackend_admin_systemConfigs_$configId";
import { delete__shoppingMallAiBackend_admin_systemConfigs_$configId } from "../../../../providers/delete__shoppingMallAiBackend_admin_systemConfigs_$configId";

import { IShoppingMallAiBackendSystemConfig } from "../../../../api/structures/IShoppingMallAiBackendSystemConfig";
import { IPageIShoppingMallAiBackendSystemConfig } from "../../../../api/structures/IPageIShoppingMallAiBackendSystemConfig";

@Controller("/shoppingMallAiBackend/admin/systemConfigs")
export class ShoppingmallaibackendAdminSystemconfigsController {
  /**
   * Create a new global system configuration entry.
   *
   * Add a new configuration entry to the system configs table, defining the
   * key, value, and optional attributes such as description and time bounds.
   * New configuration enables admins to control platform features and policies
   * in a dynamic and auditable manner. Only users with config/admin privileges
   * may call this endpoint.
   *
   * @param connection
   * @param body Configuration parameters to create the new system config.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendSystemConfig.ICreate,
  ): Promise<IShoppingMallAiBackendSystemConfig> {
    try {
      return await post__shoppingMallAiBackend_admin_systemConfigs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and retrieve paginated global system configurations.
   *
   * Search and retrieve system-level configuration definitions with flexible
   * filtering by config key, time ranges, description, or status. Results are
   * paginated to handle potentially large config sets. Security restrictions
   * require admin/system operator authorization. This endpoint is essential for
   * platform management, policy review, and troubleshooting global feature
   * settings.
   *
   * @param connection
   * @param body Search, filter and pagination criteria for configs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendSystemConfig.IRequest,
  ): Promise<IPageIShoppingMallAiBackendSystemConfig> {
    try {
      return await patch__shoppingMallAiBackend_admin_systemConfigs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single global system configuration by configId.
   *
   * Retrieve all properties of a single system/global configuration from its
   * unique configId. Used for viewing current, scheduled, or archived config
   * entries and their details. Security restrictions applyâ€”admin/DevOps only.
   * If config does not exist, endpoint returns 404.
   *
   * @param connection
   * @param configId Unique identifier of the configuration record (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":configId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("configId")
    configId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendSystemConfig> {
    try {
      return await get__shoppingMallAiBackend_admin_systemConfigs_$configId({
        admin,
        configId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing global system configuration by configId.
   *
   * Update an existing global system configuration entry using its configId.
   * The update can modify key, value, description, or scheduling time bounds.
   * Used by authorized administrators to dynamically adjust business rules and
   * system properties with full audit and rollback support. Only users with
   * system/config privileges allowed. Changes are reflected in system
   * operations immediately.
   *
   * @param connection
   * @param configId Unique identifier for the configuration entry (UUID).
   * @param body Fields to update for this system configuration record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":configId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("configId")
    configId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendSystemConfig.IUpdate,
  ): Promise<IShoppingMallAiBackendSystemConfig> {
    try {
      return await put__shoppingMallAiBackend_admin_systemConfigs_$configId({
        admin,
        configId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a system configuration entry by its configId from
   * shopping_mall_ai_backend_system_configs.
   *
   * Permanently remove a system configuration entry from the platform using its
   * configId. This action is irreversible and eliminates the specified
   * configuration record from the database, so it is no longer available or
   * considered by the system. Strict administrative privileges are required due
   * to the potential risk of system functionality loss when deleting
   * configuration keys that impact operational flags, global settings, or
   * feature toggles.
   *
   * Deleted configurations are not recoverable through this endpoint, and
   * consistency with corresponding audit or compliance requirements must be
   * maintained by the system separately (e.g., via audit trails in other
   * tables).
   *
   * Attempting to remove a configuration that is referenced elsewhere or
   * protected by policy will result in appropriate error handling and business
   * messaging.
   *
   * Only users with explicit admin role can invoke this endpoint. The endpoint
   * is mapped directly to the shopping_mall_ai_backend_system_configs Prisma
   * model and operates on a hard delete basis (deleted_at is not used, the row
   * is truly removed).
   *
   * @param connection
   * @param configId Unique identifier of the system configuration to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":configId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("configId")
    configId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_systemConfigs_$configId({
        admin,
        configId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
