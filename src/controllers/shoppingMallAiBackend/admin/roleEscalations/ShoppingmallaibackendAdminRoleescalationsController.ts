import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_admin_roleEscalations } from "../../../../providers/patch__shoppingMallAiBackend_admin_roleEscalations";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__shoppingMallAiBackend_admin_roleEscalations_$roleEscalationId } from "../../../../providers/get__shoppingMallAiBackend_admin_roleEscalations_$roleEscalationId";

import { IPageIShoppingMallAiBackendRoleEscalation } from "../../../../api/structures/IPageIShoppingMallAiBackendRoleEscalation";
import { IShoppingMallAiBackendRoleEscalation } from "../../../../api/structures/IShoppingMallAiBackendRoleEscalation";

@Controller("/shoppingMallAiBackend/admin/roleEscalations")
export class ShoppingmallaibackendAdminRoleescalationsController {
  /**
   * Search and retrieve all role escalation snapshots/events in the system.
   *
   * This endpoint allows administrators to retrieve a paginated and filterable
   * list of all role escalation snapshots/events in the system. Entries detail
   * transitions such as customer-to-seller, temporary promotions, demotions,
   * and approval/rejection rationales.
   *
   * Advanced search and filtering by previous role, resulting role, escalation
   * type, timestamp, performing admin, or affected user is supported. This is
   * vital for compliance, lifecycle traceability, and platform governance,
   * ensuring transparency and accountability for all business-critical role
   * changes.
   *
   * Access is restricted to admin users, with strict audit trails for evidence
   * and compliance reviews. The results can be used for reporting management,
   * trend analysis, and incident investigation involving privileged account
   * access or modification.
   *
   * @param connection
   * @param body Filter, search and pagination criteria for listing role
   *   escalation events.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendRoleEscalation.IRequest,
  ): Promise<IPageIShoppingMallAiBackendRoleEscalation.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_roleEscalations({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific role escalation event.
   *
   * This API operation enables administrators to fetch comprehensive details
   * for a given role escalation event identified by roleEscalationId. Includes
   * context of role change, admin responsible, event type (promotion, demotion,
   * etc.), and explicit rationale.
   *
   * Essential for regulatory audits, compliance investigations, and management
   * of business-critical privilege changes. It provides historical
   * transparency, evidence for dispute resolution, and traces original
   * intent/policy for lifecycle management.
   *
   * Results are strictly limited to admin users and may trigger audit log
   * events or evidence snapshot reviews in response.
   *
   * @param connection
   * @param roleEscalationId Unique identifier of the role escalation event to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":roleEscalationId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("roleEscalationId")
    roleEscalationId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendRoleEscalation> {
    try {
      return await get__shoppingMallAiBackend_admin_roleEscalations_$roleEscalationId(
        {
          admin,
          roleEscalationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
