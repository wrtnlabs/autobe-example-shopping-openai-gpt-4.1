import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_channels_$channelId_categories } from "../../../../../providers/post__shoppingMallAiBackend_admin_channels_$channelId_categories";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_channels_$channelId_categories } from "../../../../../providers/patch__shoppingMallAiBackend_admin_channels_$channelId_categories";
import { get__shoppingMallAiBackend_admin_channels_$channelId_categories_$categoryId } from "../../../../../providers/get__shoppingMallAiBackend_admin_channels_$channelId_categories_$categoryId";
import { put__shoppingMallAiBackend_admin_channels_$channelId_categories_$categoryId } from "../../../../../providers/put__shoppingMallAiBackend_admin_channels_$channelId_categories_$categoryId";
import { delete__shoppingMallAiBackend_admin_channels_$channelId_categories_$categoryId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_channels_$channelId_categories_$categoryId";

import { IShoppingMallAiBackendChannelCategory } from "../../../../../api/structures/IShoppingMallAiBackendChannelCategory";
import { IPageIShoppingMallAiBackendChannelCategory } from "../../../../../api/structures/IPageIShoppingMallAiBackendChannelCategory";

@Controller("/shoppingMallAiBackend/admin/channels/:channelId/categories")
export class ShoppingmallaibackendAdminChannelsCategoriesController {
  /**
   * Create a new business category under a sales channel, scoping code, name,
   * and navigation properties.
   *
   * Create a new category under a specific channel, defining code, name, order,
   * parent (for hierarchical navigation), and optional business description.
   * Validates that category code is unique within the channel and attaches to
   * an existing parent if provided.
   *
   * Security: Restricted to admin; improper parent assignment or code collision
   * will return a validation error. New categories support business content
   * taxonomy, navigation experiences, and analytics segmentation.
   *
   * Each created category is tracked for audit and possible future modification
   * or soft delete.
   *
   * @param connection
   * @param channelId The unique channel identifier (UUID) under which the
   *   category is created.
   * @param body Data for new channel category including code, name, order,
   *   parent, and (optional) description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannelCategory.ICreate,
  ): Promise<IShoppingMallAiBackendChannelCategory> {
    try {
      return await post__shoppingMallAiBackend_admin_channels_$channelId_categories(
        {
          admin,
          channelId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List/search categories within a channel with filters, sorting, and
   * pagination.
   *
   * Search and list all business categories within the given channel,
   * supporting query by code, name, ordering, parent, and is_active status.
   * Pagination and sorting provides efficient handling of large taxonomies,
   * supporting admin UI and business analytics scenarios.
   *
   * Security: Only accessible to admin roles. Filters applied for code, name,
   * order, and navigation hierarchy help manage business content and validate
   * structure integrity.
   *
   * This operation supports complex business context for hierarchical category
   * structures, personalized navigation, and channel-specific taxonomy
   * maintenance.
   *
   * Related: GET operation retrieves individual category. POST creates a new
   * category under the channel.
   *
   * @param connection
   * @param channelId The parent channel unique identifier (UUID) for which
   *   categories are managed.
   * @param body Search and filter parameters for categories, including paging,
   *   sorting, code/name, parent, and status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannelCategory.IRequest,
  ): Promise<IPageIShoppingMallAiBackendChannelCategory> {
    try {
      return await patch__shoppingMallAiBackend_admin_channels_$channelId_categories(
        {
          admin,
          channelId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details of a channel category for edit, review, or analytics.
   *
   * Retrieve all key business attributes for a specific category within the
   * given channel, including name, code, parent, order, and description. Used
   * for edit flows, validation, and business analytics. Only accessible to
   * admins responsible for channel management.
   *
   * The response provides a complete category object, supporting integrations
   * and hierarchical taxonomy awareness for UI, navigation logic, or audit
   * workflows.
   *
   * Related: PATCH endpoint lists/filter categories; PUT updates details;
   * DELETE performs soft delete.
   *
   * @param connection
   * @param channelId Unique channel identifier (UUID) scoping the category.
   * @param categoryId Unique identifier for the category within the channel
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendChannelCategory> {
    try {
      return await get__shoppingMallAiBackend_admin_channels_$channelId_categories_$categoryId(
        {
          admin,
          channelId,
          categoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update properties of a channel category, including name, code, order, and
   * parent.
   *
   * Update details of a channel category, such as code, name, parent, sort
   * order, and description. All changes are reflected in the updated_at
   * timestamp for audit. Operation checks for uniqueness of code within the
   * channel and ensures consistency for navigational structure by validation
   * against parent assignment and relation constraints.
   *
   * Admin access required; database-level constraints prevent code duplications
   * or parent/child loops. Used in business taxonomy management, analytics, and
   * UI navigation flows.
   *
   * @param connection
   * @param channelId Channel unique identifier (UUID) for the category's parent
   *   channel.
   * @param categoryId Unique identifier of the category to update (UUID).
   * @param body Fields for patching channel category fields, e.g., code, name,
   *   order, description, parent.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannelCategory.IUpdate,
  ): Promise<IShoppingMallAiBackendChannelCategory> {
    try {
      return await put__shoppingMallAiBackend_admin_channels_$channelId_categories_$categoryId(
        {
          admin,
          channelId,
          categoryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a category in the navigation taxonomy, preserving evidence and
   * audit trail.
   *
   * Mark a channel category as deleted-at (soft delete). This prevents
   * visibility in end-user navigation and disables as a parent for hierarchy,
   * but retains the record and its full audit evidence. Only admin can soft
   * delete; business logic must prevent deletion if used as active parent of
   * another category.
   *
   * Deletion preserves information for regulatory, audit, and business
   * evidence. Use PATCH for recovery if reinstatement is required.
   *
   * @param connection
   * @param channelId Channel unique identifier (UUID) for the parent of the
   *   category.
   * @param categoryId Unique identifier of the category to be soft deleted
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_channels_$channelId_categories_$categoryId(
        {
          admin,
          channelId,
          categoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
