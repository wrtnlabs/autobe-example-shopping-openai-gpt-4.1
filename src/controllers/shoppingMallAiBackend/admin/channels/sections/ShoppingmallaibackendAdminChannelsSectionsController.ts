import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_channels_$channelId_sections } from "../../../../../providers/post__shoppingMallAiBackend_admin_channels_$channelId_sections";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_channels_$channelId_sections } from "../../../../../providers/patch__shoppingMallAiBackend_admin_channels_$channelId_sections";
import { get__shoppingMallAiBackend_admin_channels_$channelId_sections_$sectionId } from "../../../../../providers/get__shoppingMallAiBackend_admin_channels_$channelId_sections_$sectionId";
import { put__shoppingMallAiBackend_admin_channels_$channelId_sections_$sectionId } from "../../../../../providers/put__shoppingMallAiBackend_admin_channels_$channelId_sections_$sectionId";
import { delete__shoppingMallAiBackend_admin_channels_$channelId_sections_$sectionId } from "../../../../../providers/delete__shoppingMallAiBackend_admin_channels_$channelId_sections_$sectionId";

import { IShoppingMallAiBackendChannelSection } from "../../../../../api/structures/IShoppingMallAiBackendChannelSection";
import { IPageIShoppingMallAiBackendChannelSection } from "../../../../../api/structures/IPageIShoppingMallAiBackendChannelSection";

@Controller("/shoppingMallAiBackend/admin/channels/:channelId/sections")
export class ShoppingmallaibackendAdminChannelsSectionsController {
  /**
   * Add a new nested or root section to a sales channel.
   *
   * Add a new section node within a given channel, configuring new navigation,
   * homepage, featured area, or other conceptual area in the storefront.
   * Supports nesting under existing sections. Administration privileges are
   * required. All section business properties (code, name, order, description)
   * must comply with unique and validation constraints.
   *
   * Returns the full new section record as stored. Failure scenarios include
   * duplicate section codes, invalid parent section, or insufficient
   * permissions. This operation is critical for enterprise business operations
   * or new sales rollout.
   *
   * @param connection
   * @param channelId Parent channel's unique identifier.
   * @param body New section's business and configuration parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannelSection.ICreate,
  ): Promise<IShoppingMallAiBackendChannelSection> {
    try {
      return await post__shoppingMallAiBackend_admin_channels_$channelId_sections(
        {
          admin,
          channelId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated, filterable list of channel sections by channel ID.
   *
   * Obtain a list of sections configured for a specified channel, supporting
   * pagination, section code/name filtering, and tree structure organization.
   * This operation returns section information relevant for storefront setup,
   * hierarchical layout, and navigation placement.
   *
   * Only sections not logically deleted (deleted_at is null) are returned by
   * default. Used in administrative interfaces and storefront configuration
   * workflows. Error handling includes invalid channel IDs, filter parameters,
   * and unauthorized access attempts.
   *
   * @param connection
   * @param channelId Unique identifier of the channel whose sections to query.
   * @param body Filtering, tree depth, and pagination parameters for querying
   *   channel sections.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannelSection.IRequest,
  ): Promise<IPageIShoppingMallAiBackendChannelSection.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_channels_$channelId_sections(
        {
          admin,
          channelId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific channel section.
   *
   * Fetch the full details for a specific section within a channel. Details
   * include section code, name, description, order, hierarchical structure, and
   * configuration for business and navigation purposes. Returns all section
   * fields as defined in the Prisma schema. Only accessible to administrators.
   *
   * If the section is missing or has been soft-deleted, the response will be
   * null or an error depending on implementation. Input validation ensures both
   * channelId and sectionId are valid UUIDs with existing references.
   *
   * @param connection
   * @param channelId ID of the parent channel.
   * @param sectionId ID of the target section to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sectionId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendChannelSection> {
    try {
      return await get__shoppingMallAiBackend_admin_channels_$channelId_sections_$sectionId(
        {
          admin,
          channelId,
          sectionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a sales channel section's business details (name, code, parent,
   * order, description).
   *
   * Update details of a specific channel section, such as its display name,
   * code, ordering for navigation, parent/child relationships, and business-use
   * description. Sections are used to organize content and navigation structure
   * in sales channels, and updates may affect business analytics, UI, and
   * personalized experiences.
   *
   * Security: This operation should be restricted to admin roles as section
   * changes can impact core navigation and end-user experience across channels.
   * The request will validate for code uniqueness within the channel, check for
   * valid parent section if provided, and update timestamps accordingly.
   *
   * All fields except id and channelId are updatable except relations; usage of
   * a deleted parent section or code collision is forbidden. The updated
   * timestamp will record this change for audit.
   *
   * Related: The GET endpoint retrieves individual section details, while PATCH
   * lists/searches sections within a channel.
   *
   * @param connection
   * @param channelId Channel unique identifier (UUID) for the section's parent
   *   channel.
   * @param sectionId Unique identifier of the section to update (UUID).
   * @param body Fields for updating the channel section. Includes name, code,
   *   order, parent_id, description.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":sectionId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannelSection.IUpdate,
  ): Promise<IShoppingMallAiBackendChannelSection> {
    try {
      return await put__shoppingMallAiBackend_admin_channels_$channelId_sections_$sectionId(
        {
          admin,
          channelId,
          sectionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a channel section while preserving audit history and evidence.
   *
   * Soft delete a channel section by marking its deleted_at field with the
   * current timestamp. This operation preserves the section for audit and
   * evidence purposes while removing it from regular navigation and business
   * flows.
   *
   * Security: Restricted to admin roles as it affects navigation and structural
   * integrity. Attempting to delete a section with dependent active relations
   * must raise a validation error. Audit history and compliance requirements
   * are met through logical (soft) deletion rather than hard removal.
   *
   * This operation is commonly used to temporarily or permanently hide
   * sections, supporting rollback if needed by retaining the data.
   *
   * @param connection
   * @param channelId Channel unique identifier (UUID) for the section's parent
   *   channel.
   * @param sectionId Unique identifier of the section to delete (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":sectionId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedParam("sectionId")
    sectionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_channels_$channelId_sections_$sectionId(
        {
          admin,
          channelId,
          sectionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
