import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_admin_channels } from "../../../../providers/post__shoppingMallAiBackend_admin_channels";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__shoppingMallAiBackend_admin_channels } from "../../../../providers/patch__shoppingMallAiBackend_admin_channels";
import { get__shoppingMallAiBackend_admin_channels_$channelId } from "../../../../providers/get__shoppingMallAiBackend_admin_channels_$channelId";
import { put__shoppingMallAiBackend_admin_channels_$channelId } from "../../../../providers/put__shoppingMallAiBackend_admin_channels_$channelId";
import { delete__shoppingMallAiBackend_admin_channels_$channelId } from "../../../../providers/delete__shoppingMallAiBackend_admin_channels_$channelId";

import { IShoppingMallAiBackendChannel } from "../../../../api/structures/IShoppingMallAiBackendChannel";
import { IPageIShoppingMallAiBackendChannel } from "../../../../api/structures/IPageIShoppingMallAiBackendChannel";

@Controller("/shoppingMallAiBackend/admin/channels")
export class ShoppingmallaibackendAdminChannelsController {
  /**
   * Create a new sales channel for a web, app, or affiliate storefront.
   *
   * Create a new sales channel representing a separate business storefront,
   * localized entity, or operational domain. The request must provide a unique
   * code, name, region configuration, language, and legal compliance data. This
   * operation is restricted to authorized administrators to ensure compliance
   * and consistent business logic enforcement.
   *
   * Upon successful channel creation, returns the full entity as stored in the
   * shopping_mall_ai_backend_channels table. Enforces business validation such
   * as unique code per channel, region compliance, and configuration
   * completeness. Handles error scenarios including duplicate codes, validation
   * failures, or lack of authorization.
   *
   * @param connection
   * @param body Information and configuration for the new sales channel.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendChannel.ICreate,
  ): Promise<IShoppingMallAiBackendChannel> {
    try {
      return await post__shoppingMallAiBackend_admin_channels({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated, filterable list of sales channels.
   *
   * Retrieve a paginated and filterable list of all sales channels defined in
   * the shopping mall backend. Allows filtering by channel code, name, country,
   * currency, and active status. The operation leverages the
   * shopping_mall_ai_backend_channels table and exposes channel metadata needed
   * for administrative management, reporting, and customer-facing selection.
   *
   * Supports advanced queries, pagination, and sorting for business use across
   * regions. Only channels not marked as soft-deleted (deleted_at is null) are
   * included by default, unless otherwise specified. Access may be restricted
   * to administrative or authorized roles based on compliance policy.
   *
   * This API is essential for global and multichannel management in the
   * platform and is frequently called for operational dashboards, onboarding
   * flows, and system-wide configuration scenarios. Error handling includes
   * invalid filter parameters and authorization errors.
   *
   * @param connection
   * @param body Filter, pagination, and query options for searching channels.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IShoppingMallAiBackendChannel.IRequest,
  ): Promise<IPageIShoppingMallAiBackendChannel.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_admin_channels({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific sales channel by ID.
   *
   * Retrieve detailed information about a single sales channel by its unique
   * identifier. The endpoint returns the entire record as present in the
   * shopping_mall_ai_backend_channels table, exposing all relevant business
   * configuration fields for the channel, such as branding assets, regulatory
   * information, and operational settings.
   *
   * Used for administrative channel management, compliance review, and detailed
   * operational dashboards. This API is essential when viewing or configuring a
   * single channel in system interfaces. Returns null if the channel does not
   * exist or is soft deleted, unless otherwise configured by business logic.
   *
   * @param connection
   * @param channelId Unique identifier of the target channel.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":channelId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendChannel> {
    try {
      return await get__shoppingMallAiBackend_admin_channels_$channelId({
        admin,
        channelId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update configuration or details of a specific sales channel.
   *
   * Update details for an existing sales channel identified by its ID. Allows
   * changing displays, legal compliance, currency, or other configuration
   * properties. The operation validates business rules, including unique code,
   * region suitability, and non-deleted status. Restricted to administrative
   * roles for proper change management and compliance tracking.
   *
   * Returns the updated channel record on success. Failure scenarios include
   * attempting to update a deleted channel, validation failures, or lack of
   * authorization. The channel's last updated timestamp is amended upon a
   * successful update.
   *
   * @param connection
   * @param channelId Unique identifier of the channel to update.
   * @param body New configuration or business information to update the
   *   channel.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":channelId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendChannel.IUpdate,
  ): Promise<IShoppingMallAiBackendChannel> {
    try {
      return await put__shoppingMallAiBackend_admin_channels_$channelId({
        admin,
        channelId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a sales channel by marking the deleted_at field.
   *
   * Logically delete (soft delete) a sales channel record, marking it as
   * deleted by setting the deleted_at column. The operation retains the record
   * for audit and compliance purposes, ensuring no data is actually physically
   * removed.
   *
   * Available only to authorized administrator users. Provides compliance with
   * regulatory and business policy about data preservation. If a channel has
   * already been deleted, the operation is idempotent. Attempts to delete
   * non-existent records result in no operation or an error, depending on
   * system policy.
   *
   * @param connection
   * @param channelId Unique identifier of the channel to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":channelId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("channelId")
    channelId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_admin_channels_$channelId({
        admin,
        channelId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
