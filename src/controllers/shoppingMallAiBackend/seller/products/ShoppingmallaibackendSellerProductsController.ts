import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_seller_products } from "../../../../providers/post__shoppingMallAiBackend_seller_products";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { patch__shoppingMallAiBackend_seller_products } from "../../../../providers/patch__shoppingMallAiBackend_seller_products";
import { get__shoppingMallAiBackend_seller_products_$productId } from "../../../../providers/get__shoppingMallAiBackend_seller_products_$productId";
import { put__shoppingMallAiBackend_seller_products_$productId } from "../../../../providers/put__shoppingMallAiBackend_seller_products_$productId";
import { delete__shoppingMallAiBackend_seller_products_$productId } from "../../../../providers/delete__shoppingMallAiBackend_seller_products_$productId";

import { IShoppingMallAiBackendProduct } from "../../../../api/structures/IShoppingMallAiBackendProduct";
import { IPageIShoppingMallAiBackendProduct } from "../../../../api/structures/IPageIShoppingMallAiBackendProduct";

@Controller("/shoppingMallAiBackend/seller/products")
export class ShoppingmallaibackendSellerProductsController {
  /**
   * Register a new product with all required business and commerce attributes.
   *
   * This endpoint allows registered sellers or administrators to create a new
   * product in the commerce platform. All required fields, including product
   * title, slug, product type, status, tax code, and order quantity limits,
   * must be provided in the request body. Optional description can supply
   * additional business content.
   *
   * Upon creation, a new product ID is generated, timestamps are set, and the
   * product becomes available for further update or publishing according to
   * business workflow.
   *
   * Strict validation is performed to ensure slug uniqueness, value
   * constraints, and legal compliance (if required). This is the core
   * onboarding step for new catalog items and supports multi-channel retail,
   * analytics, and inventory flows.
   *
   * @param connection
   * @param body Business and commerce details for product creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendProduct.ICreate,
  ): Promise<IShoppingMallAiBackendProduct> {
    try {
      return await post__shoppingMallAiBackend_seller_products({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a paginated list of all products with advanced
   * filtering and search.
   *
   * This API enables authenticated sellers and administrators to retrieve a
   * comprehensive, paginated, and filterable list of products in the
   * marketplace. Advanced search criteria include product title, slug,
   * product_type, business_status (draft, active, paused, etc.), category
   * membership, and full-text search on title and description.
   *
   * Results may be sorted by last updated, creation time, popularity, or
   * business priority, and can be used for both administrative management and
   * seller-centric product portfolios. Response format may include only summary
   * product attributes for efficiency. Sensitive/unpublished records may be
   * scoped for admin users only as per business policy.
   *
   * This endpoint is essential for catalog management, bulk operations,
   * analytics, and UI/UX experiences where list retrieval is needed.
   *
   * @param connection
   * @param body Search, filter, and pagination parameters for products.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendProduct.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProduct.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_seller_products({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed business and commerce information for a single product by
   * ID.
   *
   * Provides complete business, inventory, and commerce field values for a
   * specific product identified by productId. All core attributes (title, slug,
   * description, type, status, tax, quantity limits, timestamps) are included
   * for use in management UI, analytics, or cross-entity reference.
   *
   * Access is available to administrators and sellers (with filtering if not
   * owner or privilege scoped). This endpoint is critical for product detail
   * management, update logic, and displaying individual product cards in
   * B2B/B2C UI flows.
   *
   * Errors are returned if the product does not exist, or if access is not
   * permitted by business role/policy. Field-level visibility may vary by
   * consumer role.
   *
   * @param connection
   * @param productId Unique identifier of the product to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":productId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProduct> {
    try {
      return await get__shoppingMallAiBackend_seller_products_$productId({
        seller,
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update all mutable fields for a specific product, triggering a
   * business/audit snapshot.
   *
   * Enables authorized admins or sellers to update the core business, status,
   * or commerce-related attributes of a single product. This action triggers an
   * update timestamp, compliance snapshot, and may require validation of value
   * formats (min/max, uniqueness, status, etc.).
   *
   * Only mutable fields are updatable. System handles timestamping and
   * snapshotting for audit and rollback, per business requirements. Errors are
   * returned if product does not exist, is locked, or request is
   * malformed/unauthorized.
   *
   * Use cases include catalog maintenance, correcting product data, status
   * transitions (e.g., draft â†’ active), or responding to audit/legal requests.
   * Field-level authority or mutability may vary based on user role or business
   * policy.
   *
   * @param connection
   * @param productId Unique identifier of the product to update.
   * @param body Updated commerce and business details for the product.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":productId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProduct.IUpdate,
  ): Promise<IShoppingMallAiBackendProduct> {
    try {
      return await put__shoppingMallAiBackend_seller_products_$productId({
        seller,
        productId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a product by setting its deleted_at timestamp, preserving for
   * audit, rollback, and compliance.
   *
   * This operation allows authorized users (typically sellers or admins) to
   * logically delete a product from the shopping mall backend by setting the
   * deleted_at field rather than removing the row from the database, in
   * conformance with evidence requirements described in the business rules. The
   * soft-deleted product will be omitted from all commerce-facing APIs,
   * listings, and searches but remains queryable through audit and admin
   * evidence interfaces.
   *
   * Security and auditing are enforced; only permitted roles may perform this
   * action, and all attempts are recorded with timestamp and actor for
   * traceability. All referential entities (options, bundles, files,
   * categories, etc.) are left intact, but are no longer accessible from normal
   * commerce flows. If the product is already deleted or does not exist, a
   * clear error is returned.
   *
   * Business logic ensures that no accidental data loss occurs, supporting
   * rollback in the event of dispute or compliance review. This operation must
   * be coordinated with snapshot/evidence systems for auditability. Related
   * product management APIs should be used together for a complete product
   * lifecycle.
   *
   * @param connection
   * @param productId The unique identifier of the target product to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":productId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_seller_products_$productId({
        seller,
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
