import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_seller_products_$productId_inventories } from "../../../../../providers/post__shoppingMallAiBackend_seller_products_$productId_inventories";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patch__shoppingMallAiBackend_seller_products_$productId_inventories } from "../../../../../providers/patch__shoppingMallAiBackend_seller_products_$productId_inventories";
import { get__shoppingMallAiBackend_seller_products_$productId_inventories_$inventoryId } from "../../../../../providers/get__shoppingMallAiBackend_seller_products_$productId_inventories_$inventoryId";
import { put__shoppingMallAiBackend_seller_products_$productId_inventories_$inventoryId } from "../../../../../providers/put__shoppingMallAiBackend_seller_products_$productId_inventories_$inventoryId";
import { delete__shoppingMallAiBackend_seller_products_$productId_inventories_$inventoryId } from "../../../../../providers/delete__shoppingMallAiBackend_seller_products_$productId_inventories_$inventoryId";

import { IShoppingMallAiBackendProductInventory } from "../../../../../api/structures/IShoppingMallAiBackendProductInventory";
import { IPageIShoppingMallAiBackendProductInventory } from "../../../../../api/structures/IPageIShoppingMallAiBackendProductInventory";

@Controller("/shoppingMallAiBackend/seller/products/:productId/inventories")
export class ShoppingmallaibackendSellerProductsInventoriesController {
  /**
   * Create a new inventory record for a product.
   *
   * This API adds a new inventory record for a specific product, supporting
   * stock initialization and adding SKUs/bundles to the inventory system.
   * Required fields include available_quantity, reserved_quantity,
   * inventory_status, and last_update_at. The linkage to the product is made
   * with productId.
   *
   * Both sellers and admins can perform this operation, typically during
   * catalog setup or expansion of available SKUs. The API checks data integrity
   * constraints and ensures accurate linkage to the parent product. Error
   * conditions such as product non-existence or data violations are
   * communicated clearly in responses.
   *
   * @param connection
   * @param productId Unique identifier for the product to add inventory to.
   * @param body Inventory record creation payload.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductInventory.ICreate,
  ): Promise<IShoppingMallAiBackendProductInventory> {
    try {
      return await post__shoppingMallAiBackend_seller_products_$productId_inventories(
        {
          seller,
          productId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search product inventories by product ID.
   *
   * This API returns a paginated, optionally filtered list of inventory records
   * related to a specific product. Inventory may be filtered by
   * inventory_status, date, or other parameters to facilitate stock and
   * warehouse management. Only inventory records associated with the productId
   * are returned. Pagination and sorting enable efficient management for
   * products with high SKU complexity.
   *
   * Both administrators and privileged sellers can access this endpoint for
   * inventory reporting, adjustment, and business analysis. This API is
   * typically used with product and order management workflows, and may be
   * integrated with fulfillment, analytics, or warehouse management features.
   *
   * @param connection
   * @param productId Unique identifier for the product to list inventories for.
   * @param body Inventory filtering, sort, and pagination parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductInventory.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProductInventory> {
    try {
      return await patch__shoppingMallAiBackend_seller_products_$productId_inventories(
        {
          seller,
          productId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific inventory record of a product by IDs.
   *
   * This endpoint provides detailed information about a single inventory record
   * for a given product, such as available and reserved quantity, inventory
   * status, and the last time the inventory record was updated. Both the
   * productId and inventoryId must be provided.
   *
   * The operation is used by sellers and admins for real-time stock validation,
   * SKU or bundle fulfillment status reporting, and inventory analytics.
   * Related endpoints should be used for creating, updating, or indexing
   * inventory records. Error cases like missing inventoryId or a record-product
   * relationship violation are handled gracefully.
   *
   * @param connection
   * @param productId Unique identifier for the product to which the inventory
   *   belongs.
   * @param inventoryId Unique identifier for the inventory record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":inventoryId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inventoryId")
    inventoryId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProductInventory> {
    try {
      return await get__shoppingMallAiBackend_seller_products_$productId_inventories_$inventoryId(
        {
          seller,
          productId,
          inventoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific inventory record of a product by IDs.
   *
   * This endpoint updates an inventory record for a specific product. Editable
   * fields include quantities, inventory_status, and last_update_at. Both
   * productId and inventoryId are required, and operations are subject to
   * access control (admin/seller only) and data integrity checks.
   *
   * Primarily used for inventory corrections, returns, or batch stock
   * adjustments. Successful updates return the updated inventory record.
   * Failure states (such as ID constraint violation or not found) are reported
   * with descriptive error messages for remediation. This is a key operation in
   * advanced stock and warehouse management flows.
   *
   * @param connection
   * @param productId Unique identifier for the product to which the inventory
   *   belongs.
   * @param inventoryId Unique identifier for the inventory record to update.
   * @param body Fields for updating an inventory record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":inventoryId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inventoryId")
    inventoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductInventory.IUpdate,
  ): Promise<IShoppingMallAiBackendProductInventory> {
    try {
      return await put__shoppingMallAiBackend_seller_products_$productId_inventories_$inventoryId(
        {
          seller,
          productId,
          inventoryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific product inventory record by inventoryId and productId.
   *
   * Delete a product inventory entry from the ShoppingMallAiBackend system
   * using inventoryId and productId as identifiers.
   *
   * This operation is used by authorized sellers or administrators to directly
   * remove a single inventory record tied to a product. The method permanently
   * deletes the record, so that all inventory tracking for that particular
   * entry will be lost unless otherwise preserved by business logic. The
   * corresponding product remains unaffected except for the loss of this
   * inventory slot. Attempts to delete a non-existent or protected inventory
   * will result in an error response. All deletion operations are subject to
   * business role authorization and audit checks as defined by the application.
   * The endpoint enforces strict checking to prevent removal of inventory used
   * in ongoing orders or compliance processes.
   *
   * @param connection
   * @param productId Unique identifier for the parent product (UUID).
   * @param inventoryId Unique identifier for the target product inventory to
   *   delete (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":inventoryId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("inventoryId")
    inventoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_seller_products_$productId_inventories_$inventoryId(
        {
          seller,
          productId,
          inventoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
