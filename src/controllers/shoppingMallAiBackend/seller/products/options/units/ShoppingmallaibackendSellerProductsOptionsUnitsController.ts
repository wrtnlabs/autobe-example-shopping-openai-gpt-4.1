import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units } from "../../../../../../providers/post__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units";
import { SellerAuth } from "../../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../../decorators/payload/SellerPayload";
import { patch__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units } from "../../../../../../providers/patch__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units";
import { get__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units_$unitId } from "../../../../../../providers/get__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units_$unitId";
import { put__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units_$unitId } from "../../../../../../providers/put__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units_$unitId";
import { delete__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units_$unitId } from "../../../../../../providers/delete__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units_$unitId";

import { IShoppingMallAiBackendProductOptionUnit } from "../../../../../../api/structures/IShoppingMallAiBackendProductOptionUnit";
import { IPageIShoppingMallAiBackendProductOptionUnits } from "../../../../../../api/structures/IPageIShoppingMallAiBackendProductOptionUnits";
import { IShoppingMallAiBackendProductOptionUnits } from "../../../../../../api/structures/IShoppingMallAiBackendProductOptionUnits";

@Controller(
  "/shoppingMallAiBackend/seller/products/:productId/options/:optionId/units",
)
export class ShoppingmallaibackendSellerProductsOptionsUnitsController {
  /**
   * Create a new product option unit (variant value) for a specific option
   * group within a product.
   *
   * Create a new product option unit (such as a color or size variant) within a
   * specific product's option group. This operation allows sellers or
   * administrators to expand the set of selectable variations customers can
   * choose for a product, such as introducing a new color or size to an
   * existing product.
   *
   * Business validation ensures this unit value and code do not conflict with
   * other units in the same option group, preserving data integrity and
   * accurate inventory mapping. When a new unit is created, the system also
   * records the event for compliance and evidence purposes.
   *
   * Access is limited to roles authorized to manage product catalogs,
   * specifically sellers managing their own products and platform
   * administrators overseeing catalog structure. Related read/search/update
   * APIs may be required for complete option management workflows.
   *
   * @param connection
   * @param productId ID of the parent product for which the option and unit are
   *   being managed.
   * @param optionId ID of the product option group to which the new unit will
   *   be added.
   * @param body Details of the new product option unit (such as color, size,
   *   code, and sort order).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductOptionUnit.ICreate,
  ): Promise<IShoppingMallAiBackendProductOptionUnit> {
    try {
      return await post__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units(
        {
          seller,
          productId,
          optionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search option units (values) for a product option group, with pagination
   * and filtering.
   *
   * Get a paginated and searchable list of all units/values for a specific
   * product option group. This is useful for detailed product variant
   * configuration and validation of available option choices for buyers. The
   * operation supports advanced filtering by unit value or code, sorting, and
   * pagination, enhancing admin and seller productivity for product setup and
   * management.
   *
   * Non-owner or unauthorized sellers will receive an error, and records that
   * are soft deleted are not included unless for audit/recovery by admin. All
   * access is evidence-logged.
   *
   * @param connection
   * @param productId Unique identifier of the product this option group belongs
   *   to.
   * @param optionId Unique identifier of the option group whose units to list.
   * @param body Optional filter/search criteria and pagination for option
   *   units.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductOptionUnits.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProductOptionUnits> {
    try {
      return await patch__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units(
        {
          seller,
          productId,
          optionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detail of a specific option unit for a product's option group.
   *
   * Get full detail for a specific option unit (concrete value in product
   * option group) for the indicated product, option group, and unit. Access
   * controls limit retrieval to the owner seller or admins. Details include
   * label, code, sort order, and creation/update datetimes. Option units that
   * are soft-deleted are not retrievable except via admin audit paths. Failed
   * lookups or unauthorized access return errors.
   *
   * This typically supports editing, audit, or variant management in product
   * configuration UI.
   *
   * @param connection
   * @param productId Unique identifier of the parent product.
   * @param optionId Unique identifier of the parent option group.
   * @param unitId Unique identifier of the option unit to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":unitId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedParam("unitId")
    unitId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProductOptionUnits> {
    try {
      return await get__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units_$unitId(
        {
          seller,
          productId,
          optionId,
          unitId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing product option unit's details (such as value or display
   * order) for a product option group.
   *
   * Update an existing product option unit (such as changing the display value
   * or code) within a specific product's option group. Sellers and admins use
   * this API to correct, rename, or adjust available variant options, such as
   * changing the name of a color or the order in which options appear to
   * customers.
   *
   * All updates are validated to avoid duplicate unit codes within the option
   * group, and event modification is recorded for compliance, audit, and
   * rollback traceability.
   *
   * This API is accessible to authorized sellers for their own products and to
   * administrators overseeing global or channel catalog structures. Business
   * logic may restrict updates if the unit is in use in active orders or
   * inventory references.
   *
   * @param connection
   * @param productId ID of the parent product for which the option and unit are
   *   being managed.
   * @param optionId ID of the product option group containing the unit.
   * @param unitId ID of the product option unit to update.
   * @param body Updated details for the product option unit (value, code, sort
   *   order, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":unitId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedParam("unitId")
    unitId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductOptionUnit.IUpdate,
  ): Promise<IShoppingMallAiBackendProductOptionUnit> {
    try {
      return await put__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units_$unitId(
        {
          seller,
          productId,
          optionId,
          unitId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific product option unit (variant value) from a product option
   * group (soft delete).
   *
   * Delete a specific product option unit (variant value) from a product option
   * group. This operation is used to remove obsolete or incorrect options, such
   * as discontinuing a color or size variant. It performs a logical deletion by
   * setting the deleted_at field, so that the record remains for audit, but is
   * not available in user-facing selections.
   *
   * Deletion checks ensure the unit is not linked to active inventory, orders,
   * or ongoing promotions. Every deletion event is logged for traceability and
   * compliance requirements. Only sellers managing the product or
   * administrators may invoke this endpoint.
   *
   * @param connection
   * @param productId ID of the parent product for which the option and unit are
   *   being managed.
   * @param optionId ID of the product option group containing the unit.
   * @param unitId ID of the product option unit to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":unitId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedParam("unitId")
    unitId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_seller_products_$productId_options_$optionId_units_$unitId(
        {
          seller,
          productId,
          optionId,
          unitId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
