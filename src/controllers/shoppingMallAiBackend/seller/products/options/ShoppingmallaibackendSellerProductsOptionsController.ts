import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_seller_products_$productId_options } from "../../../../../providers/post__shoppingMallAiBackend_seller_products_$productId_options";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patch__shoppingMallAiBackend_seller_products_$productId_options } from "../../../../../providers/patch__shoppingMallAiBackend_seller_products_$productId_options";
import { get__shoppingMallAiBackend_seller_products_$productId_options_$optionId } from "../../../../../providers/get__shoppingMallAiBackend_seller_products_$productId_options_$optionId";
import { put__shoppingMallAiBackend_seller_products_$productId_options_$optionId } from "../../../../../providers/put__shoppingMallAiBackend_seller_products_$productId_options_$optionId";
import { delete__shoppingMallAiBackend_seller_products_$productId_options_$optionId } from "../../../../../providers/delete__shoppingMallAiBackend_seller_products_$productId_options_$optionId";

import { IShoppingMallAiBackendProductOptions } from "../../../../../api/structures/IShoppingMallAiBackendProductOptions";
import { IPageIShoppingMallAiBackendProductOptions } from "../../../../../api/structures/IPageIShoppingMallAiBackendProductOptions";

@Controller("/shoppingMallAiBackend/seller/products/:productId/options")
export class ShoppingmallaibackendSellerProductsOptionsController {
  /**
   * Create a new option group for a specific product.
   *
   * Create a new option group for the specified product. This operation allows
   * authorized sellers to define new configurable options for products,
   * supporting customization and flexibility for buyers. Each creation is
   * recorded for evidence and can participate in audit/rollback through
   * associated snapshot logic.
   *
   * On success, returns the created option group with all assigned attributes.
   * Duplicate option names may be subject to business constraints (e.g., only
   * one 'color' per product). Error states include invalid input or
   * insufficient permissions. Combined with list, get, update, and delete for
   * product option lifecycle management.
   *
   * @param connection
   * @param productId Unique identifier of the parent product for the new option
   *   group.
   * @param body Specification of the new product option group, including name,
   *   required flag, and sort order.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductOptions.ICreate,
  ): Promise<IShoppingMallAiBackendProductOptions> {
    try {
      return await post__shoppingMallAiBackend_seller_products_$productId_options(
        {
          seller,
          productId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated search and filter of option groups for a product.
   *
   * Retrieve a paginated and searchable list of all option groups for the
   * specified product. Sellers and admins can use this API to view, filter, and
   * sort product options based on business criteria, such as option_name,
   * required/optional status, and ordering preferences. Options that have been
   * soft deleted (deleted_at set) will not be included unless special admin
   * filtering is applied for audit or rollback purposes.
   *
   * This API enforces pagination and may support advanced filters for
   * large-scale catalogs and variants. Authorization is required; sellers of
   * the product or admins may access, and all queries are logged for
   * compliance. The operation is designed for use with UI listing, bulk
   * editing, or product detail interfaces.
   *
   * @param connection
   * @param productId The unique identifier of the parent product whose options
   *   to retrieve.
   * @param body Search/filter parameters including pagination and optional
   *   filters for option_name, required flag, and sorting options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductOptions.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProductOptions> {
    try {
      return await patch__shoppingMallAiBackend_seller_products_$productId_options(
        {
          seller,
          productId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific product option group.
   *
   * Retrieve the detailed information of a specific product option group for
   * the target product. Appropriate for use by sellers wishing to edit or audit
   * their product's options or by admins for compliance review. Only active
   * (not soft-deleted) options are accessible to sellers; all retrievals are
   * logged for compliance and evidence purposes.
   *
   * If the option is not found or is already soft-deleted, a not found or
   * access denied error is returned. Typically paired with update and delete
   * operations in the product management UI.
   *
   * @param connection
   * @param productId Unique identifier of the parent product.
   * @param optionId Unique identifier of the product option to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":optionId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProductOptions> {
    try {
      return await get__shoppingMallAiBackend_seller_products_$productId_options_$optionId(
        {
          seller,
          productId,
          optionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing option group for a product.
   *
   * Update the details of an existing option group for the specified product.
   * Used to rename, reorder, or change required/optional status or details for
   * the option group. All updates are snapshotted and logged, with rollback and
   * evidence support for business and legal requirements. Only sellers with
   * access to the product and admins may update product options. All failed
   * update attempts (due to missing record, deletion, or permission error)
   * result in detailed error reporting.
   *
   * @param connection
   * @param productId Unique identifier of the parent product the option belongs
   *   to.
   * @param optionId Unique identifier of the option group to update.
   * @param body Specification of the updated product option group fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":optionId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductOptions.IUpdate,
  ): Promise<IShoppingMallAiBackendProductOptions> {
    try {
      return await put__shoppingMallAiBackend_seller_products_$productId_options_$optionId(
        {
          seller,
          productId,
          optionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a product option group, preserving audit history.
   *
   * Soft delete a product option group for the specified product. This sets the
   * deleted_at timestamp, hiding the option from all business and
   * customer-facing APIs while retaining auditability. Only the option's owner
   * (seller) or admin can perform this action. All deletions are
   * evidence-logged and support business rollback policies. Attempts to delete
   * a non-existent or already-deleted option return an error. Designed for use
   * with listing, detail, create, and update APIs in product administration
   * interfaces. Favored over hard deletion due to evidence and compliance
   * requirements.
   *
   * @param connection
   * @param productId Unique identifier of the parent product context for the
   *   option group.
   * @param optionId Unique identifier of the option group to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":optionId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("optionId")
    optionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_seller_products_$productId_options_$optionId(
        {
          seller,
          productId,
          optionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
