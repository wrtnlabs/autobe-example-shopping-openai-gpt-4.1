import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_seller_products_$productId_files } from "../../../../../providers/post__shoppingMallAiBackend_seller_products_$productId_files";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { patch__shoppingMallAiBackend_seller_products_$productId_files } from "../../../../../providers/patch__shoppingMallAiBackend_seller_products_$productId_files";
import { get__shoppingMallAiBackend_seller_products_$productId_files_$fileId } from "../../../../../providers/get__shoppingMallAiBackend_seller_products_$productId_files_$fileId";
import { put__shoppingMallAiBackend_seller_products_$productId_files_$fileId } from "../../../../../providers/put__shoppingMallAiBackend_seller_products_$productId_files_$fileId";
import { delete__shoppingMallAiBackend_seller_products_$productId_files_$fileId } from "../../../../../providers/delete__shoppingMallAiBackend_seller_products_$productId_files_$fileId";

import { IShoppingMallAiBackendProductFile } from "../../../../../api/structures/IShoppingMallAiBackendProductFile";
import { IPageIShoppingMallAiBackendProductFile } from "../../../../../api/structures/IPageIShoppingMallAiBackendProductFile";

@Controller("/shoppingMallAiBackend/seller/products/:productId/files")
export class ShoppingmallaibackendSellerProductsFilesController {
  /**
   * Attach a new file or image to a product.
   *
   * Allows a seller or admin to add a new file (such as an image, manual, or
   * related attachment) to the specified product. The new file is registered
   * with its metadata and assigned a display order and is_primary status if
   * needed. Uploads are validated for content type, file size, and business
   * logic (e.g., only one primary image per product). Ownership and access
   * checks are enforced by linking to the product and uploader’s identity.
   * Errors include file size limits, invalid file types, or permission errors
   * for non-product owners. This endpoint is used alongside file listing,
   * update, and delete APIs for a full asset management cycle.
   *
   * @param connection
   * @param productId UUID of the product to which the file will be attached.
   * @param body Details of the new product file (file URI, metadata, display
   *   order, etc.) for creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductFile.ICreate,
  ): Promise<IShoppingMallAiBackendProductFile> {
    try {
      return await post__shoppingMallAiBackend_seller_products_$productId_files(
        {
          seller,
          productId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve files attached to a specific product with filtering and
   * pagination.
   *
   * Get a paginated, filterable list of all files (images, attachments)
   * associated with a single product. Filters may include file type, is_primary
   * status, or display order, and the endpoint supports advanced search to help
   * admins or sellers efficiently manage product assets. All returned files
   * respect product ownership, visibility rules, and exclude logically deleted
   * records (deleted_at is null). Security applies to ensure only sellers or
   * admins with appropriate rights to the product can view or manage its files.
   * Typical errors include invalid product references or attempts to access
   * files on another seller’s product without permission. This operation is
   * often used with product update and media upload APIs to provide a unified
   * asset management experience.
   *
   * @param connection
   * @param productId Unique identifier of the associated product.
   * @param body Request payload to specify search filters, pagination, and
   *   sorting for product files.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductFile.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProductFile> {
    try {
      return await patch__shoppingMallAiBackend_seller_products_$productId_files(
        {
          seller,
          productId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific file’s metadata for a given product.
   *
   * Returns complete information and metadata for a specific file attached to a
   * product. This may be used by sellers or admins to view file properties, for
   * rendering on product detail pages, or to support editing/removal
   * operations. The function checks product-file ownership and logical deletion
   * status (deleted_at is null), returning errors for invalid combinations or
   * permission violations. The endpoint is commonly combined with update or
   * delete operations as part of the asset lifecycle.
   *
   * @param connection
   * @param productId UUID of the parent product entity.
   * @param fileId Unique identifier of the file to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":fileId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("fileId")
    fileId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProductFile> {
    try {
      return await get__shoppingMallAiBackend_seller_products_$productId_files_$fileId(
        {
          seller,
          productId,
          fileId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata of a file attached to a product (e.g., display order,
   * is_primary).
   *
   * Permits authorized sellers or admins to update the metadata (such as
   * display order, is_primary, or file type) of a file attached to a specific
   * product. All updates are validated for business logic, such as ensuring
   * only one primary image per product, and correct ownership. The operation is
   * commonly used to change file order, correct mistake file types, or feature
   * a particular image. Audit trails capture all changes for compliance.
   * Related endpoints include file listing, detail view, and file deletion.
   *
   * @param connection
   * @param productId UUID of the product associated with the file.
   * @param fileId Unique identifier of the file to update.
   * @param body New metadata and information for the file update (display
   *   order, file type, is_primary, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":fileId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("fileId")
    fileId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendProductFile.IUpdate,
  ): Promise<IShoppingMallAiBackendProductFile> {
    try {
      return await put__shoppingMallAiBackend_seller_products_$productId_files_$fileId(
        {
          seller,
          productId,
          fileId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Logically delete (soft delete) a product file from a product’s attachments.
   *
   * Performs a logical (soft) deletion of a product file, marking it as deleted
   * by setting the deleted_at timestamp. The file remains available for
   * compliance review but is excluded from normal product displays and
   * listings. Typical use cases include removing outdated images, correcting
   * misfiled assets, or compliance-driven takedowns. Logical deletion ensures
   * full audit trails and supports restoration under administrative workflows.
   * Access is restricted to product owners (sellers) or administrators.
   * Attempts to delete already deleted or non-existent files trigger error
   * responses. Closely related to file creation and update endpoints as part of
   * full asset lifecycle management.
   *
   * @param connection
   * @param productId UUID for the parent product entity.
   * @param fileId Unique identifier for the file attachment to be logically
   *   deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":fileId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
    @TypedParam("fileId")
    fileId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_seller_products_$productId_files_$fileId(
        {
          seller,
          productId,
          fileId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
