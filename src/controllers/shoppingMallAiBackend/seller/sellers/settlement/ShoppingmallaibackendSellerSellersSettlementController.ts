import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__shoppingMallAiBackend_seller_sellers_$sellerId_settlement } from "../../../../../providers/get__shoppingMallAiBackend_seller_sellers_$sellerId_settlement";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { put__shoppingMallAiBackend_seller_sellers_$sellerId_settlement } from "../../../../../providers/put__shoppingMallAiBackend_seller_sellers_$sellerId_settlement";

import { IShoppingMallAiBackendSellerSettlement } from "../../../../../api/structures/IShoppingMallAiBackendSellerSettlement";

@Controller("/shoppingMallAiBackend/seller/sellers/:sellerId/settlement")
export class ShoppingmallaibackendSellerSellersSettlementController {
  /**
   * Retrieve settlement and payout details for a given sellerId.
   *
   * Get the settlement configuration for a specific seller by their sellerId.
   * Returns current payout destination details (bank name, account number,
   * account holder) and related memo if present. Only accessible to the seller
   * owner and admin roles due to the financial sensitivity of the data. Used in
   * seller dashboards or admin financial modules to view, audit, or update
   * seller banking/payout settings. Strictly enforce role and privacy policies
   * when exposing this data. If no settlement info exists, an error is
   * returned.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller whose settlement
   *   information is requested.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendSellerSettlement> {
    try {
      return await get__shoppingMallAiBackend_seller_sellers_$sellerId_settlement(
        {
          seller,
          sellerId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update settlement/payout information for a given sellerId.
   *
   * Update seller settlement and bank account configuration for a specific
   * seller. May be called by authenticated sellers or platform admins. All
   * payout details—including bank name, bank account number, account holder,
   * and memo—can be edited with appropriate business validation and regulatory
   * controls. Updates are fully audited and often require compliance
   * re-verification for sensitive changes such as account number or account
   * holder. Returns the updated settlement record. Errors are returned on
   * invalid input or policy violations.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller whose settlement
   *   configuration will be updated.
   * @param body Fields defining updated settlement configuration, such as
   *   banking details and memo.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendSellerSettlement.IUpdate,
  ): Promise<IShoppingMallAiBackendSellerSettlement> {
    try {
      return await put__shoppingMallAiBackend_seller_sellers_$sellerId_settlement(
        {
          seller,
          sellerId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
