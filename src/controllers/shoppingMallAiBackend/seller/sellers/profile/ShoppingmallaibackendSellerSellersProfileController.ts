import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__shoppingMallAiBackend_seller_sellers_$sellerId_profile } from "../../../../../providers/get__shoppingMallAiBackend_seller_sellers_$sellerId_profile";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";
import { put__shoppingMallAiBackend_seller_sellers_$sellerId_profile } from "../../../../../providers/put__shoppingMallAiBackend_seller_sellers_$sellerId_profile";

import { IShoppingMallAiBackendSellerProfile } from "../../../../../api/structures/IShoppingMallAiBackendSellerProfile";

@Controller("/shoppingMallAiBackend/seller/sellers/:sellerId/profile")
export class ShoppingmallaibackendSellerSellersProfileController {
  /**
   * Retrieve a detailed seller profile for a given sellerId.
   *
   * Get the seller's profile by their unique identifier. Returns all
   * profile-related fields, including display name, contact details, address,
   * business introduction, and audit timestamps. Only authorized sellers or
   * administrators may view or manage this information. Sensitive contact and
   * business data is not public and requires authentication for access. Linked
   * one-to-one with the seller account and immutable except through update
   * operations. Errors are returned if the seller profile does not exist or if
   * access is not allowed.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller whose profile is requested.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendSellerProfile> {
    try {
      return await get__shoppingMallAiBackend_seller_sellers_$sellerId_profile({
        seller,
        sellerId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update seller profile information for a given sellerId.
   *
   * Update a seller's profile using their unique sellerId. The profile includes
   * display name, contact phone/email, address, and business description. On
   * sensitive changes (such as contact details), re-verification steps may be
   * enforced by business policies. The update is permitted only for the owner
   * seller or admins with appropriate privileges. All changes are transparently
   * logged for audit and evidence. Returns the revised seller profile. If
   * update involves contact info, ensure compliance with verification and
   * communication policies.
   *
   * @param connection
   * @param sellerId Unique identifier of the seller whose profile is being
   *   updated.
   * @param body Profile fields to update for the seller.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("sellerId")
    sellerId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendSellerProfile.IUpdate,
  ): Promise<IShoppingMallAiBackendSellerProfile> {
    try {
      return await put__shoppingMallAiBackend_seller_sellers_$sellerId_profile({
        seller,
        sellerId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
