import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__shoppingMallAiBackend_seller_orders_$orderId_deliveries_$deliveryId } from "../../../../../providers/put__shoppingMallAiBackend_seller_orders_$orderId_deliveries_$deliveryId";
import { SellerAuth } from "../../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../../decorators/payload/SellerPayload";

import { IShoppingMallAiBackendOrderDelivery } from "../../../../../api/structures/IShoppingMallAiBackendOrderDelivery";

@Controller(
  "/shoppingMallAiBackend/seller/orders/:orderId/deliveries/:deliveryId",
)
export class ShoppingmallaibackendSellerOrdersDeliveriesController {
  /**
   * Update a specific delivery for an order.
   * (shopping_mall_ai_backend_order_deliveries).
   *
   * Update information for a specific delivery record of a given order. Fields
   * that can be updated include delivery status, tracking number, logistics
   * provider, shipped/delivered timestamps, and delivery notes. Strict
   * validation logic applies for allowable status transitions, authenticating
   * only actors with fulfillment responsibility. All updates are logged for
   * compliance and audit. Returns the updated delivery record. Forbidden if
   * delivery status is locked/final or requesting user is unauthorized.
   *
   * @param connection
   * @param orderId Order's unique identifier (UUID).
   * @param deliveryId Delivery's unique identifier (UUID).
   * @param body Fields to update for the delivery record (status, tracking,
   *   provider, notes).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("orderId")
    orderId: string & tags.Format<"uuid">,
    @TypedParam("deliveryId")
    deliveryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendOrderDelivery.IUpdate,
  ): Promise<IShoppingMallAiBackendOrderDelivery> {
    try {
      return await put__shoppingMallAiBackend_seller_orders_$orderId_deliveries_$deliveryId(
        {
          seller,
          orderId,
          deliveryId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
