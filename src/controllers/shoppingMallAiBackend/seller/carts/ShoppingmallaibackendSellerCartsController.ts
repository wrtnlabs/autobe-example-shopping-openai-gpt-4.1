import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__shoppingMallAiBackend_seller_carts } from "../../../../providers/post__shoppingMallAiBackend_seller_carts";
import { SellerAuth } from "../../../../decorators/SellerAuth";
import { SellerPayload } from "../../../../decorators/payload/SellerPayload";
import { patch__shoppingMallAiBackend_seller_carts } from "../../../../providers/patch__shoppingMallAiBackend_seller_carts";
import { get__shoppingMallAiBackend_seller_carts_$cartId } from "../../../../providers/get__shoppingMallAiBackend_seller_carts_$cartId";
import { put__shoppingMallAiBackend_seller_carts_$cartId } from "../../../../providers/put__shoppingMallAiBackend_seller_carts_$cartId";
import { delete__shoppingMallAiBackend_seller_carts_$cartId } from "../../../../providers/delete__shoppingMallAiBackend_seller_carts_$cartId";

import { IShoppingMallAiBackendCart } from "../../../../api/structures/IShoppingMallAiBackendCart";
import { IPageIShoppingMallAiBackendCart } from "../../../../api/structures/IPageIShoppingMallAiBackendCart";

@Controller("/shoppingMallAiBackend/seller/carts")
export class ShoppingmallaibackendSellerCartsController {
  /**
   * Create a new shopping cart for a customer or guest session.
   *
   * Add a new shopping cart to the ShoppingMallAiBackend system for a customer
   * or guest session.
   *
   * This endpoint is used when a new cart is to be createdâ€”for example, on
   * guest checkout, first login, or when a new customer begins a session. The
   * API accepts cart metadata (including customer or session IDs, cart_token,
   * and initial status) as described by the ShoppingMallAiBackendCart.ICreate
   * schema. All business rules for cart uniqueness, customer binding, and
   * session management are enforced. The returned response gives full details
   * of the created cart, including generated IDs and initial values set by the
   * system. All creation events are logged for audit and compliance.
   *
   * @param connection
   * @param body Fields required to create a new shopping cart
   *   (customer/session, tokens, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCart.ICreate,
  ): Promise<IShoppingMallAiBackendCart> {
    try {
      return await post__shoppingMallAiBackend_seller_carts({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate shopping carts with flexible query options.
   *
   * Search for shopping cart records across the system, with support for
   * filtering on status, date range, customer association, and customizable
   * pagination.
   *
   * This API operation is designed for customer service, account management,
   * and operational analytics use-cases where a filtered view of shopping carts
   * is required. It consumes a ShoppingMallAiBackendCart.IRequest object, which
   * allows clients to submit flexible queries with filters on key cart
   * properties and control the number of results and sort ordering. The
   * response returns a paginated set of summary shopping cart objects optimized
   * for list displays. Users must have permission to view cart information,
   * with more sensitive views available to admins. All personal information is
   * returned according to the role of the requesting user.
   *
   * @param connection
   * @param body Query and filter options for carts search/pagination
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SellerAuth()
    seller: SellerPayload,
    @TypedBody()
    body: IShoppingMallAiBackendCart.IRequest,
  ): Promise<IPageIShoppingMallAiBackendCart.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_seller_carts({
        seller,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a single shopping cart by cartId.
   *
   * Get the complete details of a shopping cart by unique cartId.
   *
   * This operation allows a customer, support agent, or admin to view all
   * properties and contents of a particular shopping cart. The result includes
   * metadata, customer/session ownership, cart status, and any advanced
   * business fields associated with the cart. Sensitive fields such as
   * customer_id are shown only to owners and authorized admin roles. All access
   * is logged for evidence and security compliance. Attempting to view a cart
   * not owned or authorized will yield an appropriate permissions error.
   *
   * @param connection
   * @param cartId Unique identifier of the requested cart (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":cartId")
  public async at(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendCart> {
    try {
      return await get__shoppingMallAiBackend_seller_carts_$cartId({
        seller,
        cartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update shopping cart metadata or status for a given cartId.
   *
   * Update an existing cart's metadata or status by specifying the cartId and
   * supplying the update fields in the request body.
   *
   * Common use-cases include merging guest and member carts, associating a
   * customer account, or changing cart status. Authorization ensures only the
   * right user or admin may apply changes. Requests are validated for data
   * consistency and business rules. Results in a returned updated cart object
   * reflecting all changes.
   *
   * @param connection
   * @param cartId Unique identifier of the cart to update (UUID).
   * @param body Fields to update in the shopping cart (status, associations,
   *   metadata)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":cartId")
  public async update(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendCart.IUpdate,
  ): Promise<IShoppingMallAiBackendCart> {
    try {
      return await put__shoppingMallAiBackend_seller_carts_$cartId({
        seller,
        cartId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (logical deletion) a shopping cart by marking deleted_at for
   * compliance retention.
   *
   * Soft delete (logical deletion) a shopping cart specified by cartId by
   * setting its deleted_at timestamp. This operation marks the cart as
   * logically deleted, preserving its data for audit and regulatory evidence
   * while making it unavailable for future commerce events. Associated items or
   * coupon usages are retained for compliance purposes. Only the cart owner or
   * privileged admin roles may perform this action. Any attempt to soft delete
   * a cart not owned by the user, or a cart in a prohibited status, will result
   * in a permission or business logic error. All soft deletions are logged for
   * regulatory compliance and evidence preservation.
   *
   * @param connection
   * @param cartId Unique identifier of the cart to logically delete (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":cartId")
  public async erase(
    @SellerAuth()
    seller: SellerPayload,
    @TypedParam("cartId")
    cartId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__shoppingMallAiBackend_seller_carts_$cartId({
        seller,
        cartId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
