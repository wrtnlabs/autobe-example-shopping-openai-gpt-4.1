import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_products } from "../../../providers/patch__shoppingMallAiBackend_products";
import { get__shoppingMallAiBackend_products_$productId } from "../../../providers/get__shoppingMallAiBackend_products_$productId";

import { IPageIShoppingMallAiBackendProduct } from "../../../api/structures/IPageIShoppingMallAiBackendProduct";
import { IShoppingMallAiBackendProduct } from "../../../api/structures/IShoppingMallAiBackendProduct";

@Controller("/shoppingMallAiBackend/products")
export class ShoppingmallaibackendProductsController {
  /**
   * Search and paginate products in the AI-powered shopping mall backend.
   *
   * Retrieve a paginated and filterable list of products, supporting
   * multi-field search, advanced sorting, and customizable filters on business
   * status, type, and other properties as required by
   * shopping_mall_ai_backend_products. This operation is fundamental for
   * customer-facing catalog exploration, seller product management, and
   * administrator moderation or analytics workflows.
   *
   * Security is managed via role-based access; customers, sellers, or admins
   * may have different default result sets. The search supports partial and
   * full-text matching, as well as filtering on the product's core and extended
   * attributes defined in the schema. This endpoint integrates deeply with
   * inventory, options, and category relations for dynamic product catalog
   * rendering.
   *
   * Validation enforces pagination and allowed filter formats, and handles
   * error cases such as invalid filter parameters or excessive page size
   * requests. Related endpoints include single-product detail fetch, product
   * creation, and update.
   *
   * @param connection
   * @param body Search/filter parameters for paginated product requests
   *   (fields, query, sort, pagination).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallAiBackendProduct.IRequest,
  ): Promise<IPageIShoppingMallAiBackendProduct> {
    try {
      return await patch__shoppingMallAiBackend_products({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single product's detailed information by ID.
   *
   * Retrieve detailed information for a single product identified by the given
   * productId. Provides all business and commerce attributes defined in
   * shopping_mall_ai_backend_products, plus related options, bundles,
   * categories, images, and linked analytics as required for rich product
   * detail and management.
   *
   * This endpoint supports customer product pages (for purchase or
   * information), seller product dashboards, and administrator audit or
   * moderation. Data is secured by role; customers may see only
   * published/active products, while admins and sellers may see hidden, paused,
   * or draft items depending on their access.
   *
   * Parameter validation ensures the productId is a valid UUID. If the product
   * is logically deleted (soft-deleted), results depend on access rights and
   * business rules.
   *
   * @param connection
   * @param productId Unique identifier of the target product to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":productId")
  public async at(
    @TypedParam("productId")
    productId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendProduct> {
    try {
      return await get__shoppingMallAiBackend_products_$productId({
        productId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
