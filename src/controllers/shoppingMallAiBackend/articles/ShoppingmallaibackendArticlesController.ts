import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_articles } from "../../../providers/patch__shoppingMallAiBackend_articles";
import { get__shoppingMallAiBackend_articles_$articleId } from "../../../providers/get__shoppingMallAiBackend_articles_$articleId";

import { IPageIShoppingMallAiBackendArticle } from "../../../api/structures/IPageIShoppingMallAiBackendArticle";
import { IShoppingMallAiBackendArticle } from "../../../api/structures/IShoppingMallAiBackendArticle";

@Controller("/shoppingMallAiBackend/articles")
export class ShoppingmallaibackendArticlesController {
  /**
   * Search and retrieve a paginated list of articles, supporting filtering and
   * sorting.
   *
   * Retrieves a paginated, filterable list of articles with support for
   * full-text search, filtering by channel, author, status (draft, published,
   * archived, hidden), date range, title, and content. Suitable for use in
   * browsing feeds, management dashboards, or advanced search UI.
   *
   * This endpoint is public, allowing both authenticated and unauthenticated
   * users to search articles, but certain fields such as drafts or archived
   * posts may be restricted based on user role (filtered in business logic).
   * The operation employs efficient pagination and returns summarized article
   * data, enabling scalable UI rendering and rapid navigation through large
   * article sets.
   *
   * Request body parameters include pagination settings, filters, and sort
   * criteria. Responses provide the total count and detailed page of article
   * summaries with essential metadata for UI rendering.
   *
   * @param connection
   * @param body Search, filter, pagination, and sort parameters for retrieving
   *   a list of articles.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IShoppingMallAiBackendArticle.IRequest,
  ): Promise<IPageIShoppingMallAiBackendArticle.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_articles({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific article by ID.
   *
   * Fetches the full detail for a single article specified by its UUID. Returns
   * all business-relevant data including title, content body, meta fields, and
   * evidence fields. The operation ensures hidden, archived, or deleted
   * articles are not displayed to unauthorized users, following business logic.
   * Articles tied to compliance or audit evidence are preserved per data
   * retention policy.
   *
   * Clients use this endpoint for reading the full article, supporting content
   * pages, content previews, or compliance display. Authorization is handled so
   * drafts/hidden/archived articles are only available to users with the
   * correct role or during content creation flows. Attempts to fetch deleted or
   * restricted articles return appropriate errors or a not found status.
   *
   * @param connection
   * @param articleId Unique identifier of the article to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":articleId")
  public async at(
    @TypedParam("articleId")
    articleId: string & tags.Format<"uuid">,
  ): Promise<IShoppingMallAiBackendArticle> {
    try {
      return await get__shoppingMallAiBackend_articles_$articleId({
        articleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
