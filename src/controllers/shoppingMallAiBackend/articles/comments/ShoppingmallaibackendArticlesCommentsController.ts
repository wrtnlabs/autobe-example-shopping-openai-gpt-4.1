import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__shoppingMallAiBackend_articles_$articleId_comments } from "../../../../providers/patch__shoppingMallAiBackend_articles_$articleId_comments";

import { IPageIShoppingMallAiBackendArticleComment } from "../../../../api/structures/IPageIShoppingMallAiBackendArticleComment";
import { IShoppingMallAiBackendArticleComment } from "../../../../api/structures/IShoppingMallAiBackendArticleComment";

@Controller("/shoppingMallAiBackend/articles/:articleId/comments")
export class ShoppingmallaibackendArticlesCommentsController {
  /**
   * Search and retrieve comments for a specific article, with pagination and
   * filtering.
   *
   * Retrieves a paginated, filterable list of comments belonging to a specific
   * article. Supports filtering by author, status, secret flag, date, or
   * full-text comment body search. Results are summarized for efficient display
   * in lists, feeds, or moderation dashboards. This endpoint is public for
   * viewing comments, but business logic may restrict access to private
   * comments or certain statuses depending on user role.
   *
   * Pagination and sort parameters optimize comment navigation for large
   * articles. Only comments not marked as deleted are returned, and visibility
   * follows business logic for author, reader, and moderator roles.
   *
   * @param connection
   * @param articleId Unique identifier of the parent article for the comments.
   * @param body Search/filter/pagination/sort parameters for comments on the
   *   article.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("articleId")
    articleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IShoppingMallAiBackendArticleComment.IRequest,
  ): Promise<IPageIShoppingMallAiBackendArticleComment.ISummary> {
    try {
      return await patch__shoppingMallAiBackend_articles_$articleId_comments({
        articleId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
