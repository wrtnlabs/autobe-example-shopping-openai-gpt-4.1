{"operations":[{"specification":"Registration (Join) operation for customer role based on the shopping_mall_customers schema, which defines the data structure and required fields for user registration. This API endpoint allows a new customer to register by providing essential information such as email (unique per channel), optional password (password_hash), required name, and optionally phone, as well as channel identification. Upon successful registration, the endpoint issues JWT access and refresh tokens. Business rules enforce uniqueness, encrypted password storage, and correct status/kyc_status defaulting. No assumptions are made about extra fields beyond what is present in the schema. Designed for public access (no authentication required). Response body adapts the IShoppingMallCustomer.IAuthorized data type pattern as per project convention.","authorizationType":"join","description":"This API operation enables the creation of a new customer account on the shopping mall platform, referencing the shopping_mall_customers table as its core. The customer's email (required and unique per channel), name, and optional phone number are collected, with password_hash present only if a password strategy is used, as observed in the schema.\n\nUpon invocation, the operation validates the uniqueness of the email within the target channel and hashes any provided password before persisting as password_hash. The kyc_status and status columns are initialized with channel policy defaults ('active', 'pending', etc). It does not presume more than these verified schema fields.\n\nCustomer registration is implemented as a public endpoint, ensuring any user can sign up as a new member provided the email is not already registered in that channel. The implementation stores creation and update timestamps with current UTC values. Soft deletion is supported post-registration by the deleted_at field.\n\nOn success, this operation issues a JWT access token and a refresh token to the newly created customer, following the IShoppingMallCustomer.IAuthorized structure (see DTO policy). The returned payload contains only fields guaranteed by the current schema and omits any business logic outside the registration transaction.\n\nThis registration endpoint is related to the login and refresh endpoints. Users will typically register here (join), then subsequently use the login endpoint for authentication, and the refresh endpoint to renew tokens. Each endpoint is documented to reference only shopping_mall_customers schema columns observed.","summary":"Register a new customer account (shopping_mall_customers table).","parameters":[],"requestBody":{"description":"Information required to join/register as a new customer. Only fields defined in shopping_mall_customers schema are accepted.","typeName":"IShoppingMallCustomer.IJoin"},"responseBody":{"description":"Authorized session with JWT tokens and customer data per IShoppingMallCustomer.IAuthorized structure.","typeName":"IShoppingMallCustomer.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/customer/join","method":"post"},{"specification":"Login operation for customer role based on the shopping_mall_customers schema. Handles credential authentication by accepting credentials (email and password) and issuing JWT tokens on success. Validates email exists for the target channel, checks password against password_hash (hashed comparison), and ensures account is not suspended or soft-deleted. Designed for public access. Responds with IShoppingMallCustomer.IAuthorized per convention.","authorizationType":"login","description":"This API operation authenticates a customer using their registered email and password, referencing the shopping_mall_customers table. It accepts provided credentials, locates the customer by channel and email, and compares the submitted password after hashing against the stored password_hash field.\n\nThe login procedure checks that the customer’s status is not set to states like 'suspended', 'withdrawn', or soft-deleted, as determined by the status and deleted_at fields in the schema. Authentication is denied if status or deletion policy fails. The kyc_status is not used for authentication gating per schema analysis but could be referenced by business logic externally.\n\nAfter successful validation, the operation issues new JWT access and refresh tokens for the session. Unsuccessful login attempts (invalid credentials, status, or deleted_at present) are rejected with appropriate error handling.\n\nThis login endpoint aligns with the join and refresh endpoints. Customers may register via join, authenticate via login, and maintain sessions via refresh. All password and sensitive data is handled according to best practices, only accepting what schema fields support.\n\nThe endpoint issues response bodies conforming to IShoppingMallCustomer.IAuthorized, which holds token(s) and customer identity payload based strictly on the schema. No fields outside those defined by the schema are returned or assumed.","summary":"Authenticate (login) customer and issue JWT tokens (shopping_mall_customers table).","parameters":[],"requestBody":{"description":"User login credentials (email and password); only parameters defined in shopping_mall_customers schema are allowed.","typeName":"IShoppingMallCustomer.ILogin"},"responseBody":{"description":"Authorized session with JWT tokens and customer data per IShoppingMallCustomer.IAuthorized.","typeName":"IShoppingMallCustomer.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/customer/login","method":"post"},{"specification":"Token refresh operation for customer role, leveraging the shopping_mall_customers schema solely for subject verification. This endpoint accepts a valid refresh token from the customer and, upon confirmation of its validity and corresponding customer status, issues a new access token and potentially a renewed refresh token. It checks customer status and deleted_at field for validity, and may audit session refresh. Public, requires a valid JWT refresh token. Uses IShoppingMallCustomer.IAuthorized as response DTO.","authorizationType":"refresh","description":"This API operation enables customers to refresh their authentication session, using the shopping_mall_customers table for user identity validation. It receives a refresh token, validates it for authenticity and expiration, then verifies that the associated customer is in a valid state (status is not suspended/withdrawn and deleted_at is null).\n\nUpon successful validation, it issues a new access token and optionally a new refresh token. The endpoint is crucial for maintaining persistent sessions without forcing users to re-enter credentials upon access token expiry. If the refresh token is invalid or the customer’s status/deletion policy is violated per the schema, the operation returns an error and denies the token refresh.\n\nToken refresh does not transfer or modify any customer profile data but provides authorized session state as output, always following the IShoppingMallCustomer.IAuthorized DTO structure, directly referencing fields in the schema.\n\nThis endpoint is always linked with join (registration) and login (initial authentication) endpoints. Each step uses distinct authorizationType markers, and they collectively provide a secure JWT-based auth flow for the customer role. All logic aligns strictly with the shopping_mall_customers table and does not include operations unsupported by its schema.","summary":"Refresh JWT tokens for customer session (shopping_mall_customers table).","parameters":[],"requestBody":{"description":"JWT refresh token for session renewal; follows project convention. Only schema-supported fields allowed.","typeName":"IShoppingMallCustomer.IRefresh"},"responseBody":{"description":"Authorized session with new JWT tokens and customer data per IShoppingMallCustomer.IAuthorized.","typeName":"IShoppingMallCustomer.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/customer/refresh","method":"post"},{"specification":"This API operation allows a new seller to register an account on the shopping mall platform. It is designed for authenticated users who wish to escalate their role to 'seller' or join directly as a seller, providing all necessary onboarding information. The operation utilizes 'shopping_mall_sellers' as its underlying Prisma DB table, which includes key fields such as 'shopping_mall_customer_id' (linking to the customer's base identity), 'shopping_mall_section_id' (defining their main business section), 'profile_name', 'status', and 'kyc_status'. The operation also references related fields from 'shopping_mall_customers', such as 'email', 'password_hash', and 'kyc_status'.\n\nSecurity is paramount, and registration ensures all required business and identity information are verified and audited. The endpoint is open only to unauthenticated new sellers; once registered, further actions require authentication and KYC review. As per audit policy, all registration events are snapshotted and status is carefully set to 'pending' or 'active' depending on business rule evaluation. This operation forms the first step of seller onboarding and is required before login is permitted.\n\nRelated workflows:\n- Seller KYC verification uses status fields in both 'shopping_mall_sellers' and 'shopping_mall_customers'.\n- Login is enabled upon successful registration and business approval states.\n- Any authentication errors or duplicate registrations are handled according to unique constraints on 'shopping_mall_customers.email'.\n- Soft deletion is supported via 'deleted_at' field, but not used in registration.\n\nThis endpoint integrates with the seller authentication domain and does not perform profile updates or management actions beyond initial creation.","authorizationType":"join","description":"This operation enables the registration of a new seller on the AI-driven shopping mall platform by creating records in the 'shopping_mall_sellers' Prisma table, which in turn is linked to the parent customer record. The process captures all mandatory KYC and business registration fields—such as email, password_hash, name, status, and approval requirements—ensuring rigorous compliance and onboarding control.\n\nThe operation integrates tightly with status tracking fields like 'status', 'kyc_status', and may include initial verification meta, providing the business with a full audit trail as required by e-commerce compliance law. Role escalation for existing members is also supported via this endpoint; in both new and upgrade scenarios, uniqueness of email and association are audited using the 'shopping_mall_customers' table.\n\nFor security and extensibility, additional authentication fields (such as mobile phone or social login identity, if available) are accepted as per the schema. All onboarding steps are snapshotted and reviewed, with role/section assignments validated at registration. The endpoint's business logic ensures that incomplete or duplicate applications are properly rejected, and all successful registrations are set to pending approval or active based on workflow status.\n\nThe registration event is essential for enabling subsequent authentication and token issuance as a seller. Error handling is robust, including unique constraint violations (email/check), invalid field formats, or business rule infractions, and such events are logged as part of the system's evidence chain.\n\nThis operation does not provide any update or deletion capabilities, focusing exclusively on initial seller registration. Profile modifications, section changes, or escalation beyond 'seller' status require separate role-specific endpoints and are not covered here.","summary":"Register a new seller (shopping_mall_sellers table) and issue initial authentication credentials/token","parameters":[],"requestBody":{"description":"Seller registration payload with customer and seller profile fields. Includes email, password, KYC, and all schema-mandatory business fields.","typeName":"IShoppingMallSeller.IJoin"},"responseBody":{"description":"Authorized seller entity with access, refresh tokens, and authentication meta after successful registration.","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/seller/join","method":"post"},{"specification":"This API operation performs authentication for sellers by validating credentials against the 'shopping_mall_sellers' and linked 'shopping_mall_customers' Prisma DB tables. It checks the submitted email and password against the stored 'email' and 'password_hash', and upon successful validation returns access and refresh JWT tokens, as well as essential seller identity metadata. The operation also enforces business status checks ('active', 'approved', etc.) as required for login compliance.\n\nCareful audit is enforced according to the 'shopping_mall_customers' unique email constraint. The operation also updates connection/session metadata as per platform security standards. It is strictly for sellers—customer/member logins are serviced separately. The endpoint is public, but subjects actions (and errors) to full audit and compliance logging. Locked/suspended sellers or incorrect credentials are handled with actionable errors and do not reveal unnecessary detail for security.\n\nSoft deletion logic is driven by 'deleted_at' fields in both 'shopping_mall_sellers' and 'shopping_mall_customers'; login is not permitted for soft-deleted or withdrawn accounts. Audit logging and event metadata are maintained for all attempts, successful or not.","authorizationType":"login","description":"Authenticate a seller using the 'shopping_mall_sellers' and 'shopping_mall_customers' tables by verifying email and password credentials. The 'shopping_mall_customers.email' field serves as the login identifier, and 'password_hash' provides secure credential verification matching best practices for authentication.\n\nThis operation enforces business rules around account statuses: only sellers with 'active' and/or 'approved' status may log in, and statuses such as 'pending', 'suspended', or 'deleted' block authentication attempts, generating security-audited events. The operation also logs all connection and session events for compliance, referencing both seller and customer IDs in the audit chain.\n\nUpon successful authentication, the operation issues new JWT access and refresh tokens paired with seller authentication metadata in the response. All failed login attempts trigger appropriate error logs and may escalate to account lockout after repeated failures as defined in the business logic.\n\nLogin attempts on soft-deleted ('deleted_at' set) or withdrawn accounts are prevented in accordance with legal and compliance requirements. Full session tracking is maintained in the audit log for all authentication flows.\n\nThis endpoint does not create or update profile data, nor does it elevate roles; those are managed via separate API operations. Its exclusive purpose is secure credential-based seller authentication.","summary":"Seller login (shopping_mall_sellers/shopping_mall_customers): Authenticate and issue access/refresh tokens","parameters":[],"requestBody":{"description":"Seller login payload specifying email and password credentials for authentication.","typeName":"IShoppingMallSeller.ILogin"},"responseBody":{"description":"Seller authentication success response with JWT tokens and identity meta.","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/seller/login","method":"post"},{"specification":"This API operation allows an authenticated seller with a valid refresh token to obtain a new access/refresh token pair, extending the authenticated session without re-entering credentials. The operation works by verifying the seller refresh token and, on success, returns a fresh set of authentication tokens using the 'shopping_mall_sellers' and 'shopping_mall_customers' tables for authority validation. Token renewal also logs a new session/access event in the platform's audit trail per regulatory requirements.\n\nThe endpoint requires submission of a valid refresh token. All validation steps must confirm that both the seller and customer accounts are active/not soft-deleted ('deleted_at' field is null), status is 'active', and all other authentication business rules pass. Attempts to refresh with inactive, suspended, or deleted accounts are denied, and all such attempts are fully logged for audit/compliance.\n\nThis operation is exclusively for session/token renewal and does not handle login, logout, or profile management. Repeated failed refresh attempts may result in token invalidation or lockout as per platform security policy.","authorizationType":"refresh","description":"Renew authentication tokens for a seller using a valid refresh token against the 'shopping_mall_sellers' and 'shopping_mall_customers' tables. The submitted refresh token is verified for validity, and upon passing, new JWT access and refresh tokens are generated and returned in the response payload. All issued tokens are bound to the seller's current status as well as compliance with account activity/soft-deletion checks ('deleted_at' field is null).\n\nFailed attempts for inactive, suspended, or soft-deleted sellers are strictly denied, and all such events are logged for regulatory evidence. The operation supports tracking and audit linkage in compliance with session authentication requirements for AI-driven shopping mall platforms.\n\nOn successful renewal, connection/session meta is updated for full audit support. This endpoint does not support credentials-based authentication or any profile/account updates—it strictly serves token refresh flows.","summary":"Renew seller authentication tokens (JWT) using valid refresh token for shopping_mall_sellers table","parameters":[],"requestBody":{"description":"Token renewal payload with refresh token for seller session continuation.","typeName":"IShoppingMallSeller.IRefresh"},"responseBody":{"description":"Seller authentication payload with refreshed JWT tokens and session meta.","typeName":"IShoppingMallSeller.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/seller/refresh","method":"post"},{"specification":"This operation handles admin account registration (\"join\") for the shopping mall system. It creates a new admin account, persists the provided email, password hash, name, KYC status, and initializes the audit/compliance fields in the shopping_mall_admins table. Registration supports only direct admin onboarding (not escalation from other roles). The request must include all required fields as per the shopping_mall_admins schema (email, password_hash, name). Upon success, the API issues an initial JWT access/refresh token pair, based on IAM policies, binding the admin to appropriate platform roles. The response structure matches the IShoppingMallAdmin.IAuthorized contract, which packages authorized admin data and issued tokens. This operation is public (no login required), but enforces strict validation for unique email, proper password hash, and KYC policy. Security is paramount—inputs are validated server-side; errors returned if email exists, schema violation, or business logic fails. Admin registration is rare and typically restricted to platform operators or via internal UI.","authorizationType":"join","description":"This API endpoint allows for direct registration (onboarding) of new admin users in the shopping mall platform, creating an entry in the shopping_mall_admins table. The operation ensures all required fields—email, password_hash, name, status, and kyc_status—are provided and valid per schema. KYC/identity logic is enforced; status and audit fields auto-populate for compliance tracking.\n\nStrict validation ensures the uniqueness of email (enforced via schema) and the safe storage of hashed credentials, as no plain password is ever stored. Upon successful registration, the system creates both the administrator record and the initial session context, returning JWT access and refresh tokens in accordance with platform IAM and audit requirements.\n\nAdmin registration differs from member (customer) and seller flows: it does not allow role escalation (customer→admin) and requires explicit direct onboarding, usually via restricted admin interface. The request has no dependencies to other business APIs but applies heightened security controls—server-side input validation, strong password policies, and immediate compliance audit entry in the event log.\n\nSecurity and audit are tightly integrated, with every registration event triggering a new entry in both shopping_mall_admin_snapshots and system-wide audit logs. Any registration denial or failure is logged with detailed error context, preventing ambiguous or untracked failures.\n\nRelated operations include admin login and refresh. This operation must be used with care—ideally automated, not public-facing, and only invoked by system integrators or platform staff. Must not allow re-registration of existing admins and should limit exposure to brute force or enumeration attacks.","summary":"Register (join) a new admin account in the shopping_mall_admins table with full compliance, KYC, and audit initialization.","parameters":[],"requestBody":{"description":"Admin registration info: email, password_hash, name, KYC status, etc.","typeName":"IShoppingMallAdmin.IJoin"},"responseBody":{"description":"Authorized admin profile and tokens after registration.","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"This operation logs in an existing admin by validating the credentials (email, password) against the shopping_mall_admins table. It requires the admin to supply their valid email and password. After successful authentication and status checks, the system issues new JWT access and refresh tokens, returning the payload in the shape of IShoppingMallAdmin.IAuthorized. Failed authentication—wrong credentials, inactive status, failed KYC—results in error. Admin login is public but only returns token if the credentials/auth-context are correct. Security controls ensure the password is never returned and audit logs are kept for both success/failure. The operation is schema-compliant: only active, non-deleted, non-suspended admins permitted to log in. All login events are snapshotted and linked to shopping_mall_admin_snapshots and audit logs for full observability.","authorizationType":"login","description":"Allows an admin to log in to the platform by submitting credentials (email, password), which are matched against shopping_mall_admins. The system verifies hashed password, account status, and KYC_state. Upon success, it issues JWT access/refresh tokens, packed in IShoppingMallAdmin.IAuthorized, and creates a new admin session entry. Only accounts with active status/verified KYC are accepted.\n\nAudit trails and security snapshots are recorded for every login attempt, including failed attempts for compliance and fraud analytics. This procedure is distinct from seller and customer login, enforcing stricter KYC and account state rules—admins must not be soft-deleted, pending, or withdrawn. Brute force protection and rate limiting apply.\n\nAll input credentials are validated strictly to the schema. If authentication fails, or if the admin account is suspended/pending/withdrawn, the response is a clear error, and the event is logged in the audit chain. Success triggers session and token issuance and records the event for compliance traceability.\n\nRelated endpoints: join (admin registration) and refresh (token renewal). This login is only for admin role and accepts only direct credentials—not OAuth or federated accounts.","summary":"Authenticate an admin and issue JWT tokens matching IShoppingMallAdmin.IAuthorized; entry must be active, KYC-verified, and not soft-deleted.","parameters":[],"requestBody":{"description":"Admin login payload: email and password as per IShoppingMallAdmin.ILogin.","typeName":"IShoppingMallAdmin.ILogin"},"responseBody":{"description":"Authorized admin resource and tokens.","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"This operation refreshes JWT authentication tokens for an authenticated admin by validating the provided refresh token against current session and admin status in the shopping_mall_admins table. If the refresh token is valid and the admin is active (not soft-deleted/suspended), new JWT tokens are generated and returned, packed in IShoppingMallAdmin.IAuthorized. The input follows IShoppingMallAdmin.IRefresh, and the completion of this operation renews both access and refresh tokens for compliant security context. If the token is invalid, expired, or the admin is no longer active or KYC-verified, an error is returned and the event is logged for compliance. Token renewals are fully audited via audit log and shopping_mall_admin_snapshots. Security policies strictly enforce single-session rules, token blacklist, and revocation flows.","authorizationType":"refresh","description":"Allows an admin with a valid refresh token to renew their JWT access/refresh tokens. This operation checks the validity of the presented refresh token, the admin's status (must be active and not soft-deleted), and compliance with current session security policies. When successful, it issues new tokens and records the renewal in both admin snapshots and system audit logs for compliance and traceability.\n\nUnlike customer/seller token refresh, admin refresh includes extra checks for KYC/identity status and proper status (not revoked/suspended/withdrawn). Only valid, non-expired refresh tokens issued for the admin account are accepted; all status and KYC checks are enforced prior to token renewal.\n\nSecurity logs and compliance events are written for both successful and unsuccessful attempts, with audit trail across all relevant session state transitions. All input and output match schema definitions and the IShoppingMallAdmin.IAuthorized DTO contract.\n\nRelated endpoints: admin join (registration) and login (authenticate/issue new tokens). This endpoint is not for OAuth or anonymous session renewal—admin credential context is always required.","summary":"Admin JWT refresh: Validates refresh token and issues new JWT access/refresh tokens to compliant, KYC-verified admin.","parameters":[],"requestBody":{"description":"Payload containing the refresh token as per IShoppingMallAdmin.IRefresh.","typeName":"IShoppingMallAdmin.IRefresh"},"responseBody":{"description":"Updated admin resource and new JWT tokens for authentication context.","typeName":"IShoppingMallAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation provides advanced search and retrieval of shopping mall channels with support for filtering, pagination, and sorting. It operates on the shopping_mall_channels table of the Prisma database, allowing users to query channels based on criteria such as code, name, description, or business status. The endpoint is essential for navigating and managing multiple storefronts, brands, and localized channel instances within the shopping mall system.","description":"Retrieve a filtered and paginated list of shopping mall channels using advanced search and filter capabilities. The operation allows clients to list channels by code, name, or other relevant identifiers. Intended for navigation, administration, and configuration of multi-channel e-commerce scenarios, this operation ensures that both admins and operators can efficiently manage channels in large-scale shopping platforms.\n\nThe endpoint enforces proper authorization and exposes only fields that are appropriate for role-based access. Security and business rules may restrict certain channel details to authorized users, and audit considerations are in place for monitoring access to channel data.\n\nPagination, sorting, and advanced query features ensure system scalability and performance in handling large numbers of channels. Error handling includes graceful handling of invalid filters, unauthorized access attempts, and malformed queries.","summary":"Search and retrieve a paginated list of shopping mall channels.","parameters":[],"requestBody":{"description":"Search and filter parameters for listing channels, including pagination and sorting.","typeName":"IShoppingMallChannel.IRequest"},"responseBody":{"description":"Paginated and filtered list of shopping mall channels matching the search criteria.","typeName":"IPageIShoppingMallChannel.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/channels","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed information for a single shopping mall channel, identified by its unique channelId (UUID). It reads from the shopping_mall_channels table and exposes fields such as code, name, description, and associated metadata, supporting administrative and operational oversight for specific e-commerce storefronts or brands.","description":"Fetch the detailed profile of a specific shopping mall channel using its unique ID. This operation enables admins or authorized operators to review configuration, audit status, business context, and top-level properties before making changes or associating sections, categories, or users with the channel.\n\nChannel access is controlled by strict authorization policies ensuring only permitted parties can access potentially sensitive configuration information. The operation references the shopping_mall_channels entity and exposes all relevant display and business logic fields. Relationships to sections, categories, and child entities are available for further queries or linkage.\n\nProper error handling is implemented for invalid or deleted channel IDs, unauthorized requests, and reference integrity issues as per channel-level security and compliance.","summary":"Get details of a specific shopping mall channel by ID.","parameters":[{"name":"channelId","description":"Unique identifier (UUID) of the shopping mall channel to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested shopping mall channel.","typeName":"IShoppingMallChannel"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/channels/{channelId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Channel must be created before its detailed information can be retrieved"}]},{"specification":"This operation creates a new shopping mall channel by inserting a record into the shopping_mall_channels table, supporting extensive channel customization for new e-commerce storefronts or brands. It requires all business-critical fields and supports validation, audit logging, and uniqueness enforcement for the business code field.","description":"Register a new channel in the shopping mall backend, providing complete definition for all required properties such as code, name, and description. As each channel anchors downstream entities (sections, categories, products, users), creation is locked to highly privileged roles and follows strict validation rules for uniqueness and completeness.\n\nThis operation requires admin access to prevent unauthorized creation or abuse, and includes error messaging for conflicting codes or invalid attributes according to the schema. Audit and compliance logging occurs for every creation event, supporting later configuration or business expansion.\n\nPost-creation, the operation may trigger configuration loading, downstream object scoping, or notification events relevant to the business workflow for onboarding a new channel.","summary":"Create a new shopping mall channel (storefront/brand).","parameters":[],"requestBody":{"description":"Information and attributes required to create a new shopping mall channel.","typeName":"IShoppingMallChannel.ICreate"},"responseBody":{"description":"Complete information about the newly created shopping mall channel.","typeName":"IShoppingMallChannel"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/channels","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the properties of an existing shopping mall channel, including its code, name, description, and any other editable configuration fields. It writes changes to the shopping_mall_channels table, enforcing strict validation and audit history for all modifications to critical channel attributes.","description":"Update the configuration or attributes of an existing channel, enabling administrators to change names, business codes, descriptions, or related metadata. The operation validates that the target channel exists and has not been deleted, and enforces business logic to prevent duplication of codes or invalid state transitions.\n\nAll changes are recorded for audit purposes, including who performed the update and what fields were modified, supporting both compliance and rollback workflows for system stability. Strict role-based access ensures only administrators may perform this operation, limiting the risk of accidental or malicious alteration to channel records.\n\nError handling is granular: attempts to edit non-existent or deleted channels, conflict with existing codes, or unauthorized update requests produce clear error messages per established API patterns.","summary":"Update information of an existing shopping mall channel by ID.","parameters":[{"name":"channelId","description":"Unique identifier (UUID) of the shopping mall channel to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and attributes to update for the target shopping mall channel.","typeName":"IShoppingMallChannel.IUpdate"},"responseBody":{"description":"Up-to-date shopping mall channel entity after edit.","typeName":"IShoppingMallChannel"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/channels/{channelId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Channel must be created before it can be updated"}]},{"specification":"This operation performs a soft deletion (logical removal) of a shopping mall channel. It sets the 'deleted_at' field for the specified channel in the 'shopping_mall_channels' table according to the schema, enabling audit compliance and reversibility. The operation ensures that all child entities (sections, categories, etc.) are not physically removed, maintaining historical referential integrity and audit trails. Proper permission checks are enforced, and only authorized admin users can perform this operation.","description":"This API endpoint allows an administrator to logically delete (soft-delete) a shopping mall channel by updating the 'deleted_at' column. The request targets a specific channel by its UUID, permanently marking it as deleted for operational purposes, but retaining its record and all related entities for compliance and auditability.\n\nSecurity is strictly enforced; only authenticated administrators are permitted to use this endpoint. Deletion does not cascade to physically remove sections, products, or other related entities. All historical data, including creation and modification timestamps, remains intact for future audits or restoration.\n\nAttempts to delete a channel that does not exist, or has already been deleted, will result in clear, actionable errors. The endpoint guarantees compliance with evidence retention policies by never physically erasing the channel record, and maintains full traceability for legal and business needs.","summary":"Soft-delete a shopping mall channel (admin only; logical removal, not physical delete).","parameters":[{"name":"channelId","description":"Unique identifier (UUID) of the target shopping mall channel to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/channels/{channelId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"A shopping mall channel must exist before it can be soft-deleted. Creating a channel ensures the channelId referenced in the delete operation is valid."}]},{"specification":"This operation retrieves a paginated, filterable list of all sections within a specified channel. It operates on the 'shopping_mall_sections' table, providing advanced search criteria based on section name, code, display order, and status. The endpoint supports typical list/filtering and pagination as defined in the business requirements.","description":"Retrieve an array of shopping mall sections belonging to a specified channel. Administrators and authorized users can filter by section name, code, display order, and deletion status, supporting targeted management of the mall's navigational structure.\n\nThe endpoint employs strict access control, permitting only authorized users to view detailed section lists for a given channel. Advanced filtering and sorting parameters can be applied via the request body, and pagination is provided to efficiently support large result sets.\n\nSecurity logic ensures that users without proper access to the channel or sections receive a clear, permission-denied error. Error handling also covers invalid channel IDs and request validation failures.","summary":"List/filter shopping mall sections for a given channel with pagination and filters (admin only).","parameters":[{"name":"channelId","description":"Unique identifier (UUID) of the shopping mall channel.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Section list search/filter and pagination parameters (name, code, display order, status, page, limit, etc).","typeName":"IShoppingMallSection.IRequest"},"responseBody":{"description":"Paginated summary list of mall sections matching the filter.","typeName":"IPageIShoppingMallSection.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/channels/{channelId}/sections","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"The specified shopping mall channel must exist before listing or filtering its sections. Creating a channel provides the channelId necessary for this operation."}]},{"specification":"This operation fetches detailed information about a specific shopping mall section within a given channel by section ID. It queries the 'shopping_mall_sections' table, including all relevant columns and relationships (such as channel, name, description, display order, creation/update timestamps, and deletion status).","description":"The endpoint returns all available details for a specific shopping mall section, identified by its unique section ID within the context of a channel. It provides a comprehensive dataset including the section name, code, display order, description, creation and update metadata, and deletion status.\n\nSecurity measures ensure that only admins or authorized users may access this level of detail for a specific section. If the section does not exist or is not associated with the given channel, a not found error is returned, and permission checks protect sensitive data.\n\nThis operation is typically paired with the section list endpoint for UI detail navigation, and is compliant with audit, evidence, and role-based access protocols.","summary":"Get details of a specific mall section in a channel (admin only).","parameters":[{"name":"channelId","description":"Unique identifier (UUID) of the shopping mall channel context.","schema":{"type":"string","format":"uuid"}},{"name":"sectionId","description":"Unique identifier (UUID) of the mall section to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the requested mall section.","typeName":"IShoppingMallSection"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/channels/{channelId}/sections/{sectionId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"The shopping mall channel must exist before retrieving details of a section within it, as the section is scoped under a channel."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A shopping mall section must exist in the given channel before its details can be fetched. Creating a section ensures the sectionId is valid in the context of the specified channel."}]},{"specification":"This operation creates a new shopping mall section within a specified channel, inserting a record into the 'shopping_mall_sections' table. It requires section name, code, display order, and optional description as described in the schema. The creator must be an administrator or similarly authorized user. All field validation, uniqueness (per channel), and role-based business logic are enforced during creation.","description":"This API endpoint allows an authorized administrator to add a new section to a specified shopping mall channel. The request body must include required fields such as code, name, display order, and may optionally include a description. The channel ID is provided in the URL path and all inputs are validated according to the schema and business requirements.\n\nUpon successful creation, the endpoint returns all details for the new section, including assigned ID, creation and update timestamps, and any optional fields. If a section code already exists within the channel, or if required fields are missing or invalid, errors are clearly surfaced for client-side correction.\n\nPermissions are strictly enforced, ensuring only admins can add new sections. All creation events are logged for audit purposes and role elevation to this endpoint is strictly prohibited for non-admin users.","summary":"Create a new shopping mall section in a given channel (admin only).","parameters":[{"name":"channelId","description":"Unique identifier (UUID) of the parent shopping mall channel.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New section creation fields: code (unique per channel), name, display order (int), and optional description.","typeName":"IShoppingMallSection.ICreate"},"responseBody":{"description":"Detailed response with all fields of newly created mall section.","typeName":"IShoppingMallSection"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"A shopping mall channel must exist before a new section can be created within it. Creating the channel ensures the channelId used for the section is valid."}]},{"specification":"This operation updates the information for a specific shopping mall section within a given channel. It allows system administrators to change section attributes including code, name, description, display order, and visibility status for a logical grouping (such as 'Best Deal', 'International', etc.) in the shopping mall. This operation acts on the shopping_mall_sections table in the Prisma schema, which captures the management of merchandising and business rule-specific sections beneath the top-level channel entity. Only administrators should have permission to make such changes.","description":"Update the details of a shopping mall section within a specific channel. This operation operates on the shopping_mall_sections table and leverages core fields such as code, name, description, display_order, and status, as described in the schema comments.\n\nThe update process enforces validation on uniqueness of the section code per channel, permissible status values, and consistency of display order within the channel for proper section arrangement. Security is enforced so that only users with admin privileges can execute this operation; all modifications are logged for audit purposes and compliance tracking.\n\nThe request must include all necessary attributes for a section update, and if any validation fails (e.g., duplicate code or unauthorized modification), a detailed error message is returned. Changes are timestamped in the updated_at column, and soft deletion is recorded using the deleted_at column for audit traceability.","summary":"Update information for an existing shopping mall section (shopping_mall_sections) within a specific channel.","parameters":[{"name":"channelId","description":"The unique identifier (UUID) of the parent shopping mall channel containing the section to update.","schema":{"type":"string","format":"uuid"}},{"name":"sectionId","description":"The unique identifier (UUID) of the shopping mall section to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"All updatable attributes of a shopping mall section. Follows IShoppingMallSection.IUpdate DTO structure.","typeName":"IShoppingMallSection.IUpdate"},"responseBody":{"description":"The updated section details after changes have been applied.","typeName":"IShoppingMallSection"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/channels/{channelId}/sections/{sectionId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"The section must exist before it can be updated. Section creation ensures both the channel and the section are present in the system before attempting to update its properties."}]},{"specification":"This operation permanently removes a shopping mall section from a given channel. It operates on the shopping_mall_sections table in the Prisma schema. The deletion is a logical (soft) delete, meaning the section's deleted_at field is populated for audit and compliance purposes, but the record is retained. Only administrators are authorized to perform this operation, ensuring strict control over channel structure modifications.","description":"Permanently remove a shopping mall section (logical soft-delete) within a specified channel. This operation interacts with the shopping_mall_sections table, utilizing its fields including deleted_at, to ensure that data is never physically removed, but rather marked as deleted for legal and business evidence retention.\n\nAdministrators executing this operation must have the requisite permissions, and all actions are recorded for evidence preservation. This operation will cascade required cleanup or linkage updates as mandated by business rules for removing sections (for instance, reassigning attached products or updating section display order). Attempts to access the deleted section after this operation will result in appropriate error responses to prevent unintentional access.\n\nIf any issues occur, such as attempting to delete a non-existent section or a section with unresolved dependencies, detailed error messages are returned. The operation should be used with care to preserve compliance, audit, and business continuity.","summary":"Logically delete (soft-delete) a shopping mall section (shopping_mall_sections) in a specified channel by marking its deleted_at field.","parameters":[{"name":"channelId","description":"The unique identifier (UUID) of the parent shopping mall channel containing the section to remove.","schema":{"type":"string","format":"uuid"}},{"name":"sectionId","description":"The unique identifier (UUID) of the section to delete logically.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/channels/{channelId}/sections/{sectionId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"The section must be created before it can be logically deleted (soft delete). This ensures the section exists under the target channel."}]},{"specification":"This operation retrieves a filtered, sorted, and paginated list of categories belonging to a specific channel. It acts on the shopping_mall_channel_categories table in the Prisma schema, supporting advanced filtering on category code, name, parent_id, status, and other business-relevant fields defined in the schema. The operation is intended for administrative interfaces or complex browse/search features where channel-level category management is essential.","description":"Obtain a comprehensive list of product or section categories within a given shopping mall channel, using advanced filters, sort options, and pagination controls.\n\nCategories in the shopping_mall_channel_categories table support hierarchical structures and multi-level relationships. This operation supports querying categories by parent, searching by textual fields (code/name), filtering by status or display_order, and is suitable for rendering nested category trees for channel administration. Requests can supply complex query parameters encapsulated in the IShoppingMallChannelCategory.IRequest DTO, while results are wrapped as paginated collections, enabling UI and batch management workflows.\n\nAuthorization requirements ensure that only admin users or users with proper permissions can access the full category list. Error handling includes feedback for invalid filters or request payloads, with security policies enforced against unauthorized enumeration of categories beyond the user's privilege scope.","summary":"List, filter, sort, and paginate channel-specific categories (shopping_mall_channel_categories).","parameters":[{"name":"channelId","description":"The unique identifier (UUID) of the channel whose categories are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for channel categories query, matching IShoppingMallChannelCategory.IRequest DTO.","typeName":"IShoppingMallChannelCategory.IRequest"},"responseBody":{"description":"A paginated and filtered list of IShoppingMallChannelCategory.ISummary DTOs, representing categories for the channel.","typeName":"IPageIShoppingMallChannelCategory.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/channels/{channelId}/categories","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"The channel must exist before listing or filtering its categories. This ensures the category queries are scoped to a valid, existing parent channel."}]},{"specification":"This operation retrieves detailed information about a specific category within the context of a channel, referencing the shopping_mall_channel_categories table in the Prisma schema. It is designed for use in administrative interfaces or in workflows where detailed category metadata, relations, and audit fields are required.","description":"Retrieve complete details of a single category within a specified channel. This operation directly accesses the shopping_mall_channel_categories table and returns all business-relevant fields—such as category code, name, parent relationship, description, display order, status, creation/update/delete timestamps, and audit metadata as described in the Prisma schema comments.\n\nThis endpoint is essential for category management, allowing administrative interfaces to present or edit full information about a category, perform audits, or display contextual relationships (e.g., parent/child). Only administrators or those with required permissions may access full metadata; others should receive minimal or redacted information as determined by authorization policies. If the category does not exist or the user lacks authorization, an appropriate error is returned.","summary":"Get full details for a specific channel category (shopping_mall_channel_categories) by ID.","parameters":[{"name":"channelId","description":"The unique identifier (UUID) of the channel that owns the category.","schema":{"type":"string","format":"uuid"}},{"name":"categoryId","description":"The unique identifier (UUID) of the category to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The business-relevant details for the category, as defined in IShoppingMallChannelCategory.","typeName":"IShoppingMallChannelCategory"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/channels/{channelId}/categories/{categoryId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/categories","method":"post"},"description":"The category must exist within the channel before its details can be retrieved. Category creation under the channel is a prerequisite for fetching its business-relevant information."}]},{"specification":"This operation creates a new category within a specified shopping mall channel. It directly utilizes the shopping_mall_channel_categories table and allows administrators to establish hierarchical, channel-specific categories used for product and merchandising classification. The operation ensures that all categories created are unique within their channel and enables the assignment of parent categories for multi-level nesting. Category codes and names must be validated for uniqueness and business logic constraints.","path":"/shoppingMall/admin/channels/{channelId}/categories","method":"post","summary":"Create a new category within a specific shopping mall channel (shopping_mall_channel_categories).","description":"This endpoint is responsible for creating hierarchical categories within a given channel. Categories are essential for product organization, search, campaign targeting, and business rule scoping on the shopping mall platform.\n\nOnly administrators or appropriately authorized business staff should access this endpoint due to the impact on search taxonomies, merchandising, and user navigation. All write operations are subject to audit trail requirements, and unique codes/names per channel are strictly enforced by the database.\n\nThe category will include a required code and name, an optional parent_id to support hierarchical trees, an optional description, display ordering, and business tracking timestamps. Validation ensures no duplicate codes within a channel and correct parent-child relationships. If errors occur (such as a duplicate code or invalid references), a detailed error message will be provided.\n\nThis endpoint may be used together with category retrieval, update, delete, or reorganization endpoints. Post-creation, related services may trigger indexing, notification, or analytics updates. Error handling must respect database unique constraint violations and authorization enforcement.","parameters":[{"name":"channelId","description":"ID of the channel to which the category will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new category for a channel.","typeName":"IShoppingMallChannelCategory.ICreate"},"responseBody":{"description":"The created category resource including all configured fields and relationships within the specified channel.","typeName":"IShoppingMallChannelCategory"},"authorizationRoles":["admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Channel must be created before a category can be added to it."}]},{"specification":"This operation updates the details of a specific category within a particular channel, as defined in the shopping_mall_channel_categories table. Administrators can update a category's name, description, parent category (for hierarchy changes), code (if needed), and other editable fields. Business logic ensures uniqueness, parent-child cycle prevention, and audit trail for compliance.","path":"/shoppingMall/admin/channels/{channelId}/categories/{categoryId}","method":"put","summary":"Update an existing channel category's details (shopping_mall_channel_categories).","description":"Allows administrators to modify the properties of an existing category within a given channel, impacting classification, navigation, and product organization. The endpoint supports updates to the name, code (within uniqueness constraints), description, display order, and parent category for hierarchical management.\n\nStrict business logic is enforced, including prevention of duplicate codes in a channel, cycle detection in parent categories (no self-referencing or loops), and validation of all references. Audit logs are required for change tracking. Only users with admin role can access this operation, and unauthorized attempts should be blocked and logged.\n\nRelated endpoints may include category creation, retrieval, and deletion. If an invalid update is attempted (e.g., referring to a deleted parent or introducing a cycle), a precise error message is returned. Successful updates may trigger re-indexing, notification, or analytics processes.","parameters":[{"name":"channelId","description":"Channel ID containing the target category.","schema":{"type":"string","format":"uuid"}},{"name":"categoryId","description":"ID of the category within the channel to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and relationships to update on the specified category.","typeName":"IShoppingMallChannelCategory.IUpdate"},"responseBody":{"description":"The updated category resource reflecting all changes.","typeName":"IShoppingMallChannelCategory"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Channel must be created before updating any of its categories."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/categories","method":"post"},"description":"Category must be created before its details can be updated."}]},{"specification":"This operation logically deletes (soft-deletes) a category from a specific channel by setting the deleted_at field on the shopping_mall_channel_categories table. Only administrators are permitted to perform this action, ensuring that category removal is auditable and reversible as required by compliance standards. Related entities and business logic must check the deleted_at field to exclude deleted categories from active usage, while preserving historical data for audit trails.","path":"/shoppingMall/admin/channels/{channelId}/categories/{categoryId}","method":"delete","summary":"Logically (soft) delete a channel category (shopping_mall_channel_categories) from a channel.","description":"Allows administrators to logically delete (soft-delete) a specific category under a channel, marking its deleted_at field without permanently removing it from the database. The operation supports audit and regulatory requirements, maintaining data integrity for compliance and potential recovery.\n\nCategory records with a non-null deleted_at field are considered inactive for navigation, product assignment, and search, but remain accessible for historical lookup. Business logic must enforce that products previously assigned to deleted categories be handled according to platform policies (e.g., reclassification, notification).\n\nOnly administrators may perform this operation. Attempts to delete non-existent or already deleted categories should fail with an appropriate error message. Related endpoints include category retrieval (excluding deleted by default), restore, or audit log display. All removals are required to be logged for evidence and traceability.","parameters":[{"name":"channelId","description":"Channel ID that contains the target category.","schema":{"type":"string","format":"uuid"}},{"name":"categoryId","description":"ID of the channel category to logically delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Channel must be created before deleting any of its categories."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/categories","method":"post"},"description":"Category must be created before it can be deleted."}]},{"specification":"Retrieves a filtered, sorted, and paginated list of global or channel-specific shopping mall configurations, as defined in the shopping_mall_configurations table. The search supports complex filtering by key, channel, business domain, and other attributes (revision, status, etc) to enable efficient configuration management and audit. This endpoint is used by system administrators to search through and manage configuration blobs, including feature flags, policies, legal text, and other settings stored as text or JSON. Supports advanced query scenarios and compliance audits.","path":"/shoppingMall/admin/configurations","method":"patch","summary":"Search and paginate shopping mall configuration records (shopping_mall_configurations).","description":"Allows administrators to retrieve a filtered and paginated list of configuration records for shopping mall channels or global settings, facilitating effective management of feature flags, business rules, legal disclosures, and other operational policies. The endpoint enables complex filtering by key, channel association, revision, and creation/update time, supporting scenario-based queries and configuration audits.\n\nOnly administrators have access due to the sensitivity of configuration records. Searches should be efficient, with support for advanced filtering (e.g., partial key match, channel-specific queries, date range selection) and paginated response structures for scalability. Returned data includes detailed field values, revision metadata, and references to any related snapshots for historical context.\n\nBusiness logic should ensure that deleted configuration records are excluded by default unless explicitly queried. Errors in query parameters or excessive request volume should yield informative error messages and may involve throttling for large searches. Related endpoints include configuration get, update, create, and configuration version history retrieval.","parameters":[],"requestBody":{"description":"Filter, search, and pagination criteria for configuration records.","typeName":"IShoppingMallConfiguration.IRequest"},"responseBody":{"description":"A page of configuration records matching the search criteria, with pagination and summary info.","typeName":"IPageIShoppingMallConfiguration"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Channel must be created before configuration records filtered by channel can be searched."}]},{"specification":"Retrieve a specific configuration resource by its unique identifier. Operates on the shopping_mall_configurations table in the Prisma schema, enabling direct access to configuration details such as business logic, feature flags, policies, and system settings. The endpoint requires the configurationId path parameter, which should match the UUID of the configuration record to fetch. Returns full configuration details, including channel association, key, value blob, description, revision, creation and update timestamps, and soft-deletion (if present). This is a read-only operation accessible to system administrators and potentially support staff for audit or troubleshooting, depending on business security policy. The response body fields must match the DB structure for configuration rows.","description":"This operation retrieves the details of a specific configuration object by its unique identifier (UUID). It supports system-wide or channel-specific configuration records managed via the shopping_mall_configurations table. The endpoint ensures traceability, allowing authorized users (primarily administrators) to audit or manage system-wide or per-channel business logic, legal policies, or feature flags. \n\nSecurity: Only highly privileged admin roles or compliance-authorized staff should access this operation, as configuration values may contain sensitive business logic or control platform-wide behaviors. Access is strictly limited, and all events should be logged for compliance/audit.\n\nThe operation performs no mutation or modification of the database, but ensures full visibility of all configuration properties, including revision/version metadata. It is related to list/search (index) and update operations, enabling lifecycle management and detailed audit of configuration changes. Errors include not found, forbidden, or access denied responses, with business error codes for invalid UUID or unauthorized access.","summary":"Get configuration detail for a specific configuration row by its ID (shopping_mall_configurations table).","parameters":[{"name":"configurationId","description":"Unique identifier of the configuration resource to retrieve (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed configuration resource including channel association, key, value, revision, business status, and audit metadata.","typeName":"IShoppingMallConfiguration"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/configurations/{configurationId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/configurations","method":"post"},"description":"A configuration must exist before it can be retrieved by its unique identifier."}]},{"specification":"Create a new configuration resource as defined in the shopping_mall_configurations table of the Prisma schema. Enables system administrators to register system-wide or channel-specific configuration blobs (e.g., feature flags, legal text, system policies, or integration settings). Requires a configuration creation request body matching all required and optional DB fields such as shopping_mall_channel_id (nullable for global configs), key (business identifier), value (blob or string), revision (beginning at 1 or business rule), and optional description. Returns the full detail of the created configuration row for audit and business confirmation. Only highly privileged admin roles should use this operation as business logic and security policies are critical.","description":"This operation creates a new configuration entity in the shopping mall backend, supporting both global and channel-specific system configuration settings. Configurations are used for feature enablement, legal/compliance presentation, social link settings, and application parameterization. All business key/values, revision numbers, and descriptions are validated for duplication, length, and policy-fit against the schema (see shopping_mall_configurations table and comments).\n\nSecurity: Only system administrators (and optionally senior compliance or technical operations) may invoke this endpoint, as unauthorized creation of configuration values could undermine business rules or platform integrity. All creation events are auditable, trigger snapshot/audit-logging, and tie into configuration snapshot/recovery automation. \n\nRelated operations include listing/search of configurations and update/put, used for ongoing lifecycle management. Common errors include key duplication, invalid input, or insufficient privileges. On success, the operation returns the full configuration record as persisted.","summary":"Create a new business or system configuration (shopping_mall_configurations table).","parameters":[],"requestBody":{"description":"Information required to create a new configuration resource, matching configuration table columns including optional or business-mandated fields.","typeName":"IShoppingMallConfiguration.ICreate"},"responseBody":{"description":"Full detail of the newly created configuration for audit, application configuration, and verification purposes.","typeName":"IShoppingMallConfiguration"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/shoppingMall/admin/configurations","method":"post","prerequisites":[]},{"specification":"Update an existing configuration resource identified by configurationId, scoped to shopping_mall_configurations table in the Prisma schema. Allows authorized admins to modify configuration blobs, keys, business rules, or metadata for system/channel-specific behaviors. The operation applies new values to editable fields, increments the revision, and persists audit trace including pre/post-snapshot (for rollback and compliance). Only administrators may perform this, enforcing strict auditability and integrity. Path parameter configurationId is mandatory and must correspond to an existing configuration row. Returns the configuration detail after update.","description":"Updates the details of an existing configuration setting, which may control global or channel-specific business logic, feature enablement, or legal compliance artifacts. Uses the configurationId in the path to identify the target record (see shopping_mall_configurations table comment for detailed field semantics).\n\nAll input is validated for business key, duplication, constraint rules, and value format or size. Updates may include changes to the key, value, revision incrementing, and description fields. Upon success, the updated configuration is returned (including all audit metadata). The endpoint is strictly admin-only due to security/compliance ramifications.\n\nAll updates trigger audit/snapshot logic for regulatory traceability and rollback. Related operations include get, list, and create. Errors may include not found (invalid/conflicting configurationId), forbidden, invalid request body, or business validation error codes.","summary":"Update an existing configuration resource by ID (shopping_mall_configurations table).","parameters":[{"name":"configurationId","description":"Unique identifier of the configuration resource to update (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated configuration parameters, supporting full/partial upsert of business, logic, and display fields.","typeName":"IShoppingMallConfiguration.IUpdate"},"responseBody":{"description":"The configuration resource with updated values and audit trace information.","typeName":"IShoppingMallConfiguration"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/configurations/{configurationId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/configurations","method":"post"},"description":"The configuration must already exist before it can be updated by its identifier."}]},{"specification":"Delete (soft delete) an existing configuration row by unique ID in the shopping_mall_configurations table (Prisma schema). Marks the configuration as deleted (sets deleted_at timestamp) for compliance, audit, and traceability. Hard deletion is not permitted for business/legacy/legal reasons; only logical deletion applies. Only system administrators may execute this operation. Requires configurationId path parameter (UUID); if not found, returns appropriate not found/business error. No request body or response body required beyond operation status.","description":"Marks the configuration object identified by configurationId as deleted, setting its deleted_at field per compliance/audit rules. This is a logical (soft) deletion as required for regulatory evidence retention; configuration rows are never permanently removed from the system. Deletion triggers an audit event, records pre/post-state snapshots, and restricts further use of configuration values in downstream business logic.\n\nAdministrators may use this to deprecate old, superseded, or errant configuration records, ensuring traceability and compliance with policy. Access is strictly limited to admin roles, and all actions are auditable. Operation returns no content beyond operation success/error status.","summary":"Logically delete a configuration (soft delete) for system/audit compliance (shopping_mall_configurations table).","parameters":[{"name":"configurationId","description":"Unique identifier of the configuration resource to delete (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/configurations/{configurationId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/configurations","method":"post"},"description":"The configuration must be created before it can be logically deleted (soft delete) by its identifier."}]},{"specification":"This operation retrieves a filtered and paginated list of customers from the shopping_mall_customers table. It supports advanced search criteria, sorting, and pagination to allow administrators to efficiently manage customer accounts and profiles for the shopping mall platform. The endpoint provides capabilities to retrieve customers by multiple conditions, such as registration channel, status, KYC status, and metadata fields. The endpoint is role-restricted to admin users and integrates customer data from all associated fields in the Prisma schema.","description":"Retrieve a filtered and paginated list of customer accounts stored in the shopping_mall_customers table. This operation allows administrators to view and manage customer information and profiles; it provides search, sort, and pagination functions to help efficiently handle high-volume customer records.\n\nThis endpoint enables searching by channel, account status, KYC status, email, name, and other metadata such as registration, deletion, and update timestamps. Admin users can use this operation to identify customer segments, monitor onboarding, process compliance requirements, or prepare data for analytics.\n\nSecurity is enforced using the admin role, and business logic will implement rate limiting and sensitive field masking as appropriate for compliance. This is a critical operation for platform control, account lifecycle oversight, and regulatory audit. Error handling includes proper messaging for invalid query parameters or access denial if roles are not sufficient.","summary":"Search and retrieve a filtered, paginated list of customer accounts from shopping_mall_customers.","parameters":[],"requestBody":{"description":"Search and pagination criteria for retrieving customer accounts.","typeName":"IShoppingMallCustomer.IRequest"},"responseBody":{"description":"Paginated list of customer summary data matching the administrator's search and filter criteria.","typeName":"IPageIShoppingMallCustomer.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/customers","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A shopping mall section must be created before listing or searching customers, because every customer is associated with a channel and typical onboarding logic requires at least one enabled section for channel registration."}]},{"specification":"This operation retrieves detailed information for a specific customer by their unique ID from the shopping_mall_customers table. It provides administrators with comprehensive data about the selected customer, including all profile fields and related status, KYC, and audit information. It is role-restricted to admin users for privacy and compliance reasons.","description":"Retrieve full detailed information for an individual customer account by specifying the customerId path parameter. Uses the shopping_mall_customers table as the main resource, returning all relevant fields including channel, email, phone, name, account status, KYC status, and audit timestamps.\n\nAdministrators will use this endpoint to review or update (in a separate operation) customer status, verify compliance (KYC), or analyze account history. Sensitive PII is only accessible to authorized admin roles, and business logic will ensure data masking and compliance with privacy law.\n\nIf a customer with the provided ID does not exist or access is attempted by an unauthorized role, the system will return appropriate error messaging.","summary":"Retrieve detailed information for a specific customer by ID from shopping_mall_customers.","parameters":[{"name":"customerId","description":"Unique identifier of the target customer account.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the selected customer including sensitive metadata and status history.","typeName":"IShoppingMallCustomer"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/customers/{customerId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A section must exist for a channel before a customer can be registered and looked up, since channel and section structure is required for proper customer onboarding and scoping."}]},{"specification":"This operation updates an existing customer record using their unique ID. It modifies the core properties of the customer in the shopping_mall_customers table, such as email, phone, name, account status, or KYC status. The operation enforces business and compliance validation, is restricted to admin usage, and creates an audit trail of the change.","description":"Update the profile and metadata for an individual customer in the shopping_mall_customers table. This is an admin-only operation that supports modification to key fields such as email, phone, name, status, or KYC state. The customerId path parameter specifies the record to update.\n\nBusiness logic will enforce field validation (for unique emails, channel constraints, KYC/business status, etc.) and preserve audit history of changes for compliance. Only administrators may use this operation to ensure sensitive account changes are traced and authorized.\n\nIf the supplied customerId does not reference an existing account, or if update constraints are violated (duplicate email, invalid status), the operation will return an error.","summary":"Update a specific customer account by ID in the shopping_mall_customers table.","parameters":[{"name":"customerId","description":"Unique identifier of the customer to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated profile and meta information to apply to the selected customer account.","typeName":"IShoppingMallCustomer.IUpdate"},"responseBody":{"description":"The updated customer account with new field values as applied by the administrator.","typeName":"IShoppingMallCustomer"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/customers/{customerId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A section must exist in a channel before customer profile update operations are meaningful, as customer-scoped updates depend on validated channel/section structures."}]},{"specification":"This operation performs a soft deletion of an individual customer account identified by customerId in the shopping_mall_customers table. It marks the deleted_at field rather than performing a hard deletion, preserving the record for audit and compliance needs. This operation can only be performed by administrators and will be tracked in audit logs.","description":"Soft delete a customer account from the shopping_mall_customers table by setting the deleted_at timestamp for the provided customerId. This action does not remove the record from the database but instead marks it as deleted for regulatory, legal, or compliance reasons. All previous history and audit trails are retained.\n\nThis operation is restricted to the admin role and should trigger business logic for data masking, account access prevention, and detailed audit chain recording. Customers marked as deleted are excluded from most standard queries and are not accessible by regular users or via the main customer-facing features.\n\nIf the targeted customer record does not exist, or if the action is attempted without administrative privileges, the system will return an error.","summary":"Soft delete a specific customer account by setting deleted_at based on customerId.","parameters":[{"name":"customerId","description":"Unique identifier of the customer account to be soft deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/customers/{customerId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A section must exist in the channel before a customer profile can be soft deleted in operational contexts, since customer is scoped to sections and business rules require structural linkage."}]},{"specification":"This operation allows administrators to perform a filtered, paginated search of sellers (vendor accounts) in the shopping mall platform. The search leverages the shopping_mall_sellers table, with filtering options on status, approval, profile information, and linkage to channel sections. The API supports advanced search, sort, filtering, and pagination for robust seller management workflows, suitable for handling approvals, audits, and compliance activities.","description":"Retrieve a paginated, filtered list of sellers registered on the shopping mall platform. Sellers are vendor accounts inheriting from customers, with extended fields such as approval status, profile name, section, and KYC state. This endpoint is intended for use by administrators to find, audit, or moderate sellers, supporting advanced business workflows, onboarding approval, and compliance review.\n\nSecurity consideration: Only users with the 'admin' role can access this endpoint due to the sensitivity of seller data and the need for auditability. All queries are logged for compliance.\n\nThe request structure supports flexible search—by profile name, status (pending, active, suspended), KYC status, approval date range, or section assignment. The response body delivers a paginated summary of all found sellers, with essential metadata for list displays. Related endpoints include seller detail, status change, and audit history retrieval APIs.\n\nError handling ensures inappropriate access is blocked, and invalid filter criteria result in structured, actionable errors.","path":"/shoppingMall/admin/sellers","method":"patch","summary":"Paginated search and retrieval of shopping mall sellers (admin only, shopping_mall_sellers table)","parameters":[],"requestBody":{"description":"Filter, sort, and pagination options for searching sellers.","typeName":"IShoppingMallSeller.IRequest"},"responseBody":{"description":"Paginated list of seller summary information matching search criteria.","typeName":"IPageIShoppingMallSeller.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"A shopping mall channel must exist so that it can be referenced by the section and sellers. Creating a channel is required before any section or seller is assigned to it."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A shopping mall section must exist before it can be referenced in seller records. Creating a section ensures that the shopping_mall_section_id used for filtering or assignment in seller records is valid."}]},{"specification":"This operation retrieves detailed information about a specific seller, referencing the shopping_mall_sellers table. It returns all seller attributes including profile, approval, section, KYC status, and linked customer details. Designed for administrative use in seller management, review, and compliance actions.","description":"Fetch detailed information for a seller account by its unique ID. The seller entity extends from the base customer and contains additional fields for section assignment, profile information, seller approval and status, and KYC verification metadata.\n\nAccessible to administrators for tasks such as onboarding, suspension, audit, or advanced analytics. When a seller is selected for moderation, compliance, or dispute cases, this endpoint provides a point-in-time snapshot of full seller state—including approval details, customer linkage, and historical status tracking.\n\nStrict role restriction is enforced, and every access event is logged for compliance. If the seller does not exist or has been removed (soft deleted), an appropriate not-found or access-denied error is returned.","path":"/shoppingMall/admin/sellers/{sellerId}","method":"get","summary":"Retrieve detailed information for a given seller by ID (admin only, shopping_mall_sellers table)","parameters":[{"name":"sellerId","description":"Unique identifier of the target seller account.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete seller information for the specified ID, including profile, approval, section, and KYC details.","typeName":"IShoppingMallSeller"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/coupons","method":"post"},"description":"A seller must be created before their detailed information can be retrieved. Creating a seller is a prerequisite to ensure that a valid sellerId exists before performing this get operation."}]},{"specification":"This operation updates the information of a specific seller in the shopping mall, based on the shopping_mall_sellers table. It allows administrators to change seller status, profile, section assignment, KYC and approval metadata, and other relevant fields. Used for administrative actions such as approval, suspension, rescoping sections, or updating verification data.","description":"Update details of a seller account, identified by sellerId, with new profile information, status changes, section assignment, or KYC verification metadata. This operation is intended for use by administrators to perform moderation, onboarding flows, suspensions, compliance review, or dispute resolution on seller accounts. \n\nAll updates are strictly audited; operation may trigger a seller snapshot for rollback or legal record. Input validation ensures that status changes, KYC results, and section assignments adhere to business rules, with errors clearly reported for invalid attempts.\n\nIf the seller is not found or the update is not permitted (e.g., due to business constraints or entity state), the API returns a structured error message with context. Related operations include seller detail retrieval and index/search endpoints.\n\nStrict role authorization is enforced for this update path.","path":"/shoppingMall/admin/sellers/{sellerId}","method":"put","summary":"Update seller account details, status, or section (admin only, shopping_mall_sellers table)","parameters":[{"name":"sellerId","description":"Unique identifier of the seller to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated seller profile, status, KYC, or section assignment info.","typeName":"IShoppingMallSeller.IUpdate"},"responseBody":{"description":"Updated seller information reflecting all applied changes.","typeName":"IShoppingMallSeller"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/coupons","method":"post"},"description":"A seller must exist before their account details can be updated. Creating a seller is required so that a valid sellerId exists to reference for the update operation."}]},{"specification":"This operation performs a logical (soft) deletion of a seller account in the shopping mall by ID, based on the shopping_mall_sellers table. It marks the seller account as deleted (sets deleted_at timestamp for audit compliance) but does not physically remove the record. The operation ensures audit trails for legal retention and recovery, and relates to seller deactivation and compliance workflows.","description":"Permanently deactivate and logically delete a seller account specified by sellerId, marking it as deleted without physical removal from the database. This enforces soft deletion by setting the deleted_at field in the shopping_mall_sellers table, supporting legal audit, evidence retention, and later possible restoration by administrators.\n\nThis API is reserved for administrative role actions, and all executions are logged for compliance. The operation will fail if the seller does not exist or has already been deleted. If related resources must be unlinked or deactivated for legal reasons, this operation ensures upstream workflows are triggered.\n\nAssociated endpoints include seller retrieval, update, and search. Users with insufficient permission are denied access, and every action is appended to the audit and deletion event logs.","path":"/shoppingMall/admin/sellers/{sellerId}","method":"delete","summary":"Soft-delete (deactivate) a seller account by ID (admin only, shopping_mall_sellers table)","parameters":[{"name":"sellerId","description":"Unique identifier of the seller to soft-delete (deactivate).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/coupons","method":"post"},"description":"A seller must exist before their account can be soft-deleted. Creating a seller is essential to have a valid sellerId for deletion."}]},{"specification":"This operation retrieves a paginated list of administrator accounts with advanced filtering and sorting. It is associated with the shopping_mall_admins table in the Prisma schema, which contains administrator profile information, authentication details, and status fields. Pagination and search parameters are supported to allow clients to find specific admins based on name, status, or other indexed columns. This helps platform owners manage administrative users and audit their activity, and supports various business use cases such as security reviews or privilege escalation workflows.","description":"Retrieve a filtered and paginated list of administrator profiles from the platform. This endpoint provides searching, sorting, and filtering, allowing system owners to review administrator accounts by various fields such as email, status (active, suspended, pending), KYC verification status, and creation date.\n\nAuthorization is restricted to users with administrative privileges, as administrator profile data is considered highly sensitive. Proper authentication is required and the system should apply audit and rate-limiting policies to this endpoint.\n\nThis operation works directly with the shopping_mall_admins table in the Prisma schema, referencing fields like email, name, status, kyc_status, and audit metadata. It supports advanced filtering through its request body, enabling use cases such as admin account reviews, compliance reporting, escalation approval checks, and general user management.","summary":"Search and retrieve a paginated, filtered list of administrators from the shopping_mall_admins table.","parameters":[],"requestBody":{"description":"Search and filtering criteria for finding administrator accounts, including pagination and sort options.","typeName":"IShoppingMallAdmin.IRequest"},"responseBody":{"description":"Paginated and filtered administrator summaries along with pagination info.","typeName":"IPageIShoppingMallAdmin.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/admins","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation fetches the detailed profile information for a specific administrator, identified by their unique adminId. It utilizes the shopping_mall_admins table in the Prisma schema, which tracks all administrator user profiles, login credentials (hashed), their status, and compliance verification state. The endpoint is essential for admin management, allowing privileged users to inspect individual profiles, review KYC status, and view audit-relevant metadata for security or business escalation procedures.","description":"Retrieve the full profile and account information of an administrator by their unique identifier. This includes personal profile (name, email), status (active, suspended, pending), KYC verification, and identity audit fields necessary for role-based access management and compliance.\n\nThis operation is strictly role-restricted: only users with admin-level privileges can access this endpoint, due to the sensitive nature of administrator data. All read activities are auditable and should be logged for compliance.\n\nThe underlying Prisma schema (shopping_mall_admins) defines the fields returned, ensuring only valid, authorized data is included. The response supports audit and management use cases, such as reviewing admin escalation status or handling support tickets related to admin accounts.","summary":"Get the full, detailed profile for an administrator using their adminId from shopping_mall_admins.","parameters":[{"name":"adminId","description":"The unique ID of the administrator to retrieve profile information for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed administrator profile information as defined in the shopping_mall_admins schema.","typeName":"IShoppingMallAdmin"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/admins/{adminId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates the profile and authentication information of an administrator identified by adminId. It operates on the shopping_mall_admins table, allowing privileged users to change fields such as email, name, KYC status, password (hashed), status, and other modifiable admin properties for access control and workflow management. This is essential for account maintenance, compliance, privilege escalation/demotion, and security incident handling.","description":"Update an administrator's account fields, including their contact information, account status (active, pending, suspended), KYC verification state, or password hash (for authentication rotation). This could be for supporting privilege escalation, admin onboarding, or handling security/compliance workflow.\n\nThis endpoint is only accessible to administrators with sufficient privileges. All actions via this endpoint are logged for audit and compliance purposes. The request body follows the shopping_mall_admins Prisma schema, supporting only updatable fields and rejecting immutable ones (such as ID or audit/history fields).\n\nUse cases include onboarding/exiting admins, security credential rotations, updating compliance information (KYC), and locking/unlocking admin accounts.","summary":"Update administrator account information by adminId (shopping_mall_admins).","parameters":[{"name":"adminId","description":"The unique ID of the administrator whose profile will be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for administrator fields allowed in shopping_mall_admins.","typeName":"IShoppingMallAdmin.IUpdate"},"responseBody":{"description":"The updated administrator profile after the operation.","typeName":"IShoppingMallAdmin"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/admins/{adminId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation performs a logical deletion (soft delete) of an administrator account, identified by adminId, in the shopping_mall_admins table. The operation sets the deleted_at timestamp to mark the record as deleted for audit/compliance, but does not fully purge the account from storage. This ensures preservation for evidence and rollback procedures, as required by compliance needs. Only administrators with high privileges are permitted to perform this action.","description":"Logically deletes an administrator account from the platform by setting the deleted_at timestamp on the shopping_mall_admins record corresponding to adminId. This soft-deletion keeps all history and audit fields intact for compliance, rollback, and legal reasons. The record will not be purged, so admins cannot be recovered by regular users but may be retained for audit.\n\nThis operation is strictly privileged: it is available only to authenticated administrative users. All delete actions must be logged and auditable. This endpoint does not return a response body upon successful completion. The operation is essential for offboarding, security, or compliance situations where administrators must be deactivated from the system.","summary":"Logically delete an administrator (soft delete by setting deleted_at) using their adminId.","parameters":[{"name":"adminId","description":"The unique ID of the administrator to logically delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/admins/{adminId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Retrieve the list of all identity verification records associated with a specified customer profile. This endpoint enables advanced filtering, searching, and pagination to help system administrators or authorized support agents efficiently locate customer identity verifications for regulatory or business purposes. It covers the shopping_mall_customer_identities table and should reference actor-customer relations properly.","path":"/shoppingMall/admin/customers/{customerId}/identities","method":"patch","summary":"Search and retrieve all identity verification records (KYC) linked to a customer.","description":"This operation allows querying all identity verification entries tied to a specific customer within the shopping mall platform. It directly interfaces with the shopping_mall_customer_identities table, letting authorized users perform advanced searches on identity records such as government ID, passport, or driver's license information. The search allows filtering by identity type, status, verification date, and issuer, supporting regulatory, support, and audit functions.\n\nAccess to this endpoint must be restricted to authorized roles (such as admins and potentially the customer themselves for their own records) due to the presence of sensitive PII. Business logic must enforce the customerId path parameter strictly matches the referenced customer, with validation on privacy and access rights. Search results are paginated by default for scalability.\n\nError scenarios include invalid customer ID (404), unauthorized access (403), input validation errors (400), and rate limitation (429). Only non-deleted identities are returned unless specifically requested for audit/compliance scenarios.\n\nThe request body supports advanced search and pagination parameters aligning with expected fields such as identity_type, status, and verification dates. The response includes summaries of matching identity records.\n\nThis endpoint is related to identity detail retrieval (GET /customers/{customerId}/identities/{identityId}) and update (PUT), forming the read portion of customer KYC workflows.","parameters":[{"name":"customerId","description":"Unique identifier for the customer whose identities are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination criteria for customer identity records. Supports fields such as identity_type, status, issuer, and verification date ranges.","typeName":"IShoppingMallCustomerIdentity.IRequest"},"responseBody":{"description":"Paginated list of brief customer identity verification records matching criteria.","typeName":"IPageIShoppingMallCustomerIdentity.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A customer must be registered in the system before retrieving or searching their identity verification records. Creating a customer ensures that a valid customerId exists for querying identity records."}]},{"specification":"Retrieve detailed information for a specific identity verification record associated with a customer. This operation is essential for reviewing, auditing, or supporting KYC flows. It reads from the shopping_mall_customer_identities table, referencing the parent customer and identity record IDs. The operation supports audit and support requirements by returning all current record fields and relevant metadata.","path":"/shoppingMall/admin/customers/{customerId}/identities/{identityId}","method":"get","summary":"Get detailed information for a specific customer identity verification record.","description":"This operation fetches the complete details for a single identity verification (KYC) record for a customer. It is used by administrators or compliance officers to view sensitive personal information submitted for identity validation including document type, status, issue date, issuer, and verification status. The endpoint references shopping_mall_customer_identities, cross-validating customerId and identityId to ensure correct linkage and data access.\n\nSecurity is paramount: only authorized roles (admins, the customer for their own identities) may access this data, and all accesses must be logged for audit. Attempting to access a non-existent or mismatched record results in 404 or 403 errors. Sensitive fields must be masked or redacted as per business and legal requirements depending on the role making the request.\n\nThis endpoint is typically used in conjunction with list/search and update (PUT) operations. It does not expose underlying audit/snapshot tables, but may reference them if legally required for dispute or compliance.\n\nOther error conditions include invalid parameters (400), unauthorized access (403), and unexpected system errors (500).","parameters":[{"name":"customerId","description":"Unique identifier of the customer whose identity record is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"identityId","description":"Unique identifier of the identity verification record being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the customer identity verification record, including document type, status, issuer, verification date, and associated audit information.","typeName":"IShoppingMallCustomerIdentity"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[]},{"specification":"Update or replace a specific identity verification record for a customer. This operation targets the shopping_mall_customer_identities table, allowing authorized administrators to update KYC information (such as changing status, correcting errors, or updating document metadata). The endpoint enforces path parameter validation for both customerId and identityId, and updates records according to business logic and audit standards.","path":"/shoppingMall/admin/customers/{customerId}/identities/{identityId}","method":"put","summary":"Update a specific customer identity verification record (KYC info).","description":"This operation enables authorized administrators to update a particular customer identity verification (KYC) record. It interacts with the shopping_mall_customer_identities table to modify fields such as identity type, status, issue/verification date, issuer, or associated meta when required for business/support/compliance corrections. Both customerId and identityId parameters are required and strictly validated; the system ensures only administrators (or the customer for limited self-service, if permitted) can perform sensitive updates.\n\nThe request body must provide a full or partial update adhering to validation rules (e.g., valid status values, ISO date formats). Business rules may enforce status transitions (e.g., pending→verified) and trigger audit snapshots for compliance. All updates are logged with before/after state to meet regulatory requirements.\n\nIf either customer or identity record does not exist, a 404 error is returned; permission violations return 403, and validation errors produce 400 responses. Unauthorized fields or transitions are blocked by business logic.","parameters":[{"name":"customerId","description":"Unique identifier of the customer.","schema":{"type":"string","format":"uuid"}},{"name":"identityId","description":"Unique identifier of the identity verification record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the customer identity record, such as status or verification details.","typeName":"IShoppingMallCustomerIdentity.IUpdate"},"responseBody":{"description":"The updated customer identity verification record.","typeName":"IShoppingMallCustomerIdentity"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[]},{"specification":"Delete (soft delete) a specific customer identity verification record. This operation sets the deleted_at timestamp in the shopping_mall_customer_identities table, marking the record as deleted for audit/compliance but preserving data for regulatory, rollback, or legal needs. The relation between customerId and identityId must be validated strictly, and only administrators may perform this operation. All actions are logged in the audit trail.","path":"/shoppingMall/admin/customers/{customerId}/identities/{identityId}","method":"delete","summary":"Soft-delete a customer identity verification record.","description":"This operation performs a logical (soft) delete on a customer's identity verification record. It sets the deleted_at field for the specified record in shopping_mall_customer_identities, preventing further use but retaining the record for audit, rollback, and legal evidence. The operation validates both customerId and identityId path parameters, ensuring that only authorized administrative roles can perform deletion.\n\nSoft-deleted records are excluded from normal queries but may be referenced for regulatory compliance, dispute resolution, or explicit audit export. The system logs the delete event including actor, timestamp, and business context for evidence preservation. Attempting to delete a non-existent or already deleted record results in 404 errors; unauthorized attempts return 403.\n\nThere is no response body for this operation—confirmation is via status code and audit log entry. Other error scenarios include validation errors (400), permission failure (403), and system errors (500).","parameters":[{"name":"customerId","description":"Unique identifier of the customer.","schema":{"type":"string","format":"uuid"}},{"name":"identityId","description":"Unique identifier of the identity verification record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[]},{"specification":"Retrieve a list of external OAuth/social accounts linked to the specified customer. This operation is associated with the shopping_mall_external_accounts table and returns external account associations for a given customer, filtered by their unique customer ID. The endpoint is designed to allow authenticated users (customer role) to view their own connected external accounts for account management, security review, and linkage management. Results include OAuth provider, connection status, and linked metadata. This operation supports pagination, filtering by provider/status, and search over account identifiers to accommodate scenarios where customers link multiple external accounts or need to audit historical links.","path":"/shoppingMall/customer/customers/{customerId}/externalAccounts","method":"patch","summary":"Search and retrieve all external accounts linked to a specific customer (shopping_mall_external_accounts).","description":"This endpoint allows retrieval of all external OAuth/social accounts associated with a single customer, referenced by {customerId}. It enables customers to audit and manage their linked OAuth accounts (Google, Apple, Kakao, Naver, etc), supporting re-linking, disconnection, or troubleshooting.\n\nCustomer authentication is required, and the system verifies that the customer is querying only their own external accounts. Administrators may use this operation for customer support/audit cases, subject to access policy. Returned data includes provider name, linked status, timestamps, and unique external account identifiers.\n\nFiltering options allow queries by provider, status (active, revoked, pending), linkage date, or external account ID. Pagination and sorting are supported for accounts with many links over time. Error handling includes permission checks, invalid ID handling, and rate limiting for repeated queries.","parameters":[{"name":"customerId","description":"Unique identifier of the target customer whose external accounts are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for filtering, searching, and paginating the customer's linked external accounts.","typeName":"IShoppingMallExternalAccount.IRequest"},"responseBody":{"description":"Paginated list of external account summaries for the specified customer, including provider and linkage status.","typeName":"IPageIShoppingMallExternalAccount.ISummary"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[]},{"specification":"Retrieve a single external OAuth/social account linked to a specific customer. This operation is tied to the shopping_mall_external_accounts table and allows an authenticated user to view metadata for one external account (e.g., Google, Apple, Kakao, Naver) associated with their customer profile. This supports scenarios where customers want to check the linkage status, last login, or audit association details for a single OAuth provider account.","path":"/shoppingMall/customer/customers/{customerId}/externalAccounts/{externalAccountId}","method":"get","summary":"Retrieve metadata for a single external account linked to a customer (shopping_mall_external_accounts).","description":"This endpoint fetches detailed information about a specific external OAuth/social account connected to a customer, identified by both {customerId} and {externalAccountId}. Customers can use this to verify the status or metadata of a particular external login.\n\nOnly the owning customer (or an admin, under compliance) can access this resource; role-based access control is enforced. Returned data includes provider name, linked user ID, linkage date, and status.\n\nThis operation provides transparency for multi-auth scenarios, helps users troubleshoot login issues, and surfaces provider-specific metadata. Security measures include strict path parameter validation and access checks to prevent unauthorized access to another user's accounts. Errors are returned for invalid IDs or insufficient permissions.","parameters":[{"name":"customerId","description":"Unique identifier of the customer who owns this external account association.","schema":{"type":"string","format":"uuid"}},{"name":"externalAccountId","description":"Unique identifier of the target external account entry to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed external account record for the specified provider and customer.","typeName":"IShoppingMallExternalAccount"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[]},{"specification":"Update metadata for an external OAuth/social account record linked to a customer. Used rarely (mainly for status changes such as revocation, metadata annotation, or account recovery via customer self-service or admin/customer support). Operates on the shopping_mall_external_accounts table and enforces ownership, permission, and linkage constraints. This allows authorized modifications such as re-linking, provider-specific metadata updates, or updating display/notification preferences for external login integrations. The operation strictly limits editable fields according to business, compliance, and provider requirements.","path":"/shoppingMall/customer/customers/{customerId}/externalAccounts/{externalAccountId}","method":"put","summary":"Update an existing external account linked to a customer (shopping_mall_external_accounts).","description":"This endpoint allows the authenticated customer (or admin under compliance) to update editable metadata on a specific external account association. Supported updates include status (e.g., manual revocation, relinking), annotation of provider-specific metadata, or customer preferences for authentication notifications.\n\nSecurity measures ensure customers can only modify their account and not others. Only fields allowed by business rules, compliance, and OAuth provider policy may be updated. The request is rejected if attempted on system-managed or immutable fields (e.g., provider, external_user_id). Full auditing is enforced.\n\nThis operation is used for user-initiated disconnect/revoke flows, recovery from login issues, or syncing status with third-party OAuth identities. Validation errors and forbidden field updates are properly surfaced. All changes are logged for audit and compliance.","parameters":[{"name":"customerId","description":"Unique identifier of the customer who owns the external account to update.","schema":{"type":"string","format":"uuid"}},{"name":"externalAccountId","description":"Unique identifier of the external account record to be modified.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable metadata for the external account such as status changes or customer-specific preferences or annotations.","typeName":"IShoppingMallExternalAccount.IUpdate"},"responseBody":{"description":"External account record after successful update, reflecting new status or metadata.","typeName":"IShoppingMallExternalAccount"},"authorizationType":null,"authorizationRole":"customer","name":"update","prerequisites":[]},{"specification":"Remove (logically delete) an external OAuth/social account association from a customer profile. This operation removes a specific entry from the shopping_mall_external_accounts table using customerId and externalAccountId. Intended for customer-driven unlink or revoke flows (e.g., customer disconnects a linked account or triggers full unlinking for a security review). Implemented as a logical delete to preserve audit history and prevent accidental resource loss, following GDPR/CCPA and audit compliance requirements. Only permitted for the owning user or an admin after verification.","path":"/shoppingMall/customer/customers/{customerId}/externalAccounts/{externalAccountId}","method":"delete","summary":"Remove or logically delete a linked external account from the customer profile (shopping_mall_external_accounts).","description":"This endpoint allows a customer (or authorized admin) to remove the association of an external OAuth/social account from their account/profile. Only the owner can unlink external accounts unless a compliant admin performs the action for risk or fraud reasons. The operation performs a logical deletion by marking the deleted_at timestamp, preserving auditability and GDPR/CCPA compliance.\n\nThis operation is used for customer-driven unlink/revoke workflows (e.g., unlinking Google/Kakao), loss/theft scenarios, or access recovery. It checks for active links before unlinking and prevents deletion of required or system-managed associations. After successful operation, the account remains in the audit history and is excluded from active linkage lists. Forbidden or illegal requests prompt error logging and user-facing feedback.","parameters":[{"name":"customerId","description":"Unique identifier of the customer requesting to remove an external association.","schema":{"type":"string","format":"uuid"}},{"name":"externalAccountId","description":"Unique identifier of the external account association to be removed.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","prerequisites":[]},{"specification":"This operation retrieves a list of role escalation requests for a specific administrator. It operates on the shopping_mall_admin_role_escalations table, enabling administrators to view pending, approved, or rejected role escalation attempts. The endpoint supports advanced filtering and pagination to audit admin headcount and privilege change workflows, critical for platform compliance and audit tracking. The operation respects relationships with admins, reviewers, and provides visibility across the full lifecycle of escalation requests.","path":"/shoppingMall/admin/admins/{adminId}/roleEscalations","method":"patch","summary":"List and search role escalation requests for a given admin (shopping_mall_admin_role_escalations)","description":"Retrieve a paginated and filterable list of all role escalation requests (such as customer→admin or seller→admin privilege changes) that are associated with a target administrator. Each result includes status, escalation type, reviewer, reasons, and relevant timestamps for audit and compliance, leveraging the structure of the shopping_mall_admin_role_escalations table.\n\nThis operation is primarily used by administrators to manage and review workflow status, approval/rejection history, and review escalation evidence. Role-based security ensures only properly privileged admins can access the escalation queue. Filtering may be done by requestor, escalation type, status, or time range to facilitate rapid investigation or compliance review.\n\nPagination, search, and sorting are available; responses present summary information suitable for list or dashboard views and are linked to full escalation records. This endpoint supports regulatory compliance, audit trails, and helps prevent privilege escalation abuse within the mall platform.","parameters":[{"name":"adminId","description":"Unique identifier of the admin user to query role escalations for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request parameters for escalation list search, filters, and pagination options","typeName":"IShoppingMallAdminRoleEscalation.IRequest"},"responseBody":{"description":"Paginated result set of escalation requests matching the search criteria","typeName":"IPageIShoppingMallAdminRoleEscalation.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[]},{"specification":"This operation retrieves detailed information about a specific role escalation request for a particular administrator. It operates on the shopping_mall_admin_role_escalations table, enabling granular display of escalation data for workflow, audit, or compliance review. It shows full details including the requestor, reviewer, type, status, business context, approval or rejection reasons, and relevant timestamps. All sensitive operations are secured to ensure only authorized admins can access this data.","path":"/shoppingMall/admin/admins/{adminId}/roleEscalations/{escalationId}","method":"get","summary":"Get detailed information about a specific admin role escalation request (shopping_mall_admin_role_escalations)","description":"Retrieve full, detailed information about a specific role escalation request by its unique identifier for a given administrator. The response includes all major columns and context from the shopping_mall_admin_role_escalations entity, such as actors, workflow status, reviewer, reason codes, timestamps, and references to any supporting evidence or snapshots.\n\nUse this operation to support detailed step-through auditing, compliance traceability, or business rule enforcement regarding admin privilege escalation. Only administrators or privileged reviewers can access detailed escalation data, ensuring sensitive escalation audit trails remain protected from unauthorized access. Related operations may include POST/PUT for escalation review or status update, and DELETE for log/audit retention.","parameters":[{"name":"adminId","description":"Unique identifier of the admin user (context of the escalation)","schema":{"type":"string","format":"uuid"}},{"name":"escalationId","description":"Unique identifier for the specific role escalation request","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the queried role escalation, suitable for audit/compliance display","typeName":"IShoppingMallAdminRoleEscalation"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[]},{"specification":"This operation updates the details or status of a specific role escalation request for an administrator. It operates on the shopping_mall_admin_role_escalations table and supports workflow actions such as administrative review, status change (approve, reject, cancel), and comment. Use to record decisions, reasons, or attach supporting evidence in a regulatory-compliant manner. Ensures proper audit and history linkage across all related entities.","path":"/shoppingMall/admin/admins/{adminId}/roleEscalations/{escalationId}","method":"put","summary":"Update information or status of an admin role escalation request (shopping_mall_admin_role_escalations)","description":"Update the workflow status, add comments, assign a reviewer, or modify other business logic fields of a specific admin role escalation request. This operation allows administrators to review, approve, reject, or cancel escalation requests, recording the action and context for compliance.\n\nAll changes are subject to audit logging and may require supporting commentary or reference to evidence. Authorization is strictly enforced, so only privileged admin users may update escalation records. Updates support granular traceability for regulatory and internal policy compliance.","parameters":[{"name":"adminId","description":"Unique identifier of the admin user (context for escalation modification)","schema":{"type":"string","format":"uuid"}},{"name":"escalationId","description":"Unique identifier for the role escalation request to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the target escalation (status, review reason, evidence refs, reviewer, etc)","typeName":"IShoppingMallAdminRoleEscalation.IUpdate"},"responseBody":{"description":"Updated role escalation record with all modifications and audit-relevant fields","typeName":"IShoppingMallAdminRoleEscalation"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[]},{"specification":"This operation permanently deletes a specific role escalation request associated with an admin. It operates on the shopping_mall_admin_role_escalations table. Since there is no soft delete field in this entity, the deletion is a hard delete and is irreversible, removing all associated data from the database. Only system administrators may perform this operation, and usage should be limited to compliance or error correction scenarios, as per audit policy.","path":"/shoppingMall/admin/admins/{adminId}/roleEscalations/{escalationId}","method":"delete","summary":"Permanently delete a specific admin role escalation request (shopping_mall_admin_role_escalations)","description":"Permanently remove a role escalation request from the shopping_mall_admin_role_escalations table. This operation executes a hard delete, completely removing the record from the database. The deletion is irreversible and should only be performed by administrators in accordance with business policy or error correction needs.\n\nAppropriate audit logging and authorization are required. Usage of this endpoint should comply with internal and regulatory requirements for entity removal and is intended only for exceptional cases where true deletion is authorized. No response body is returned for this operation.","parameters":[{"name":"adminId","description":"Unique identifier of the admin user (who owns or manages the escalation)","schema":{"type":"string","format":"uuid"}},{"name":"escalationId","description":"Unique identifier for the role escalation request to permanently remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[]},{"specification":"This operation provides a paginated and filterable list of user connection records from the database, referencing the shopping_mall_user_connections table. It allows advanced search capabilities for tracking user login sessions, device metadata, authentication events, and channel-specific access logs. The operation supports pagination, sorting, and filtering by properties such as actorType, channelId, time ranges, IP address, and authentication context, enabling audit, fraud analysis, and compliance reporting.","description":"Retrieve a paginated, filtered list of user connection/session records from the shoppingMall platform. This operation queries the shopping_mall_user_connections table, exposing actor type, channel, IP, authentication context, device/user agent, and login/logout timestamps for analytic and security review.\n\nThe operation allows advanced search with filtering by actorType (customer/seller/admin), channelId, time ranges (loginAt/logoutAt), IP address, and user agent. Pagination and sorting are included to support audit hardware, fraud analytics, and compliance/regulatory inquiry. Only authorized personnel may access full metadata of connection records due to the potential presence of PII (IP address, device details).\n\nReturns a paginated list of user connection summaries, optimized for monitoring, security analysis, and compliance audit use-cases. Error handling covers invalid filter params, authorization failures, and excessive query workloads (rate limiting).","summary":"Search and list user connection records (sessions, logins, device/browser) with filtering and pagination.","parameters":[],"requestBody":{"description":"Advanced search, filter, and pagination criteria for user connection log query.","typeName":"IShoppingMallUserConnection.IRequest"},"responseBody":{"description":"Paginated set of user connection summaries matching search and filter criteria, for compliance, analytics, and monitoring.","typeName":"IPageIShoppingMallUserConnection.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/userConnections","method":"patch","prerequisites":[]},{"specification":"This operation retrieves detailed information for a specific user connection entry from the shopping_mall_user_connections table, based on a unique userConnectionId (UUID). The operation is primarily used for auditing session activity, reviewing device and authentication context, assessing IP and channel usage, and performing compliance verification. It returns all stored attributes for the given connection record.","description":"Fetch detailed record of a user connection/session as tracked in the shopping_mall_user_connections table, using a unique identifier (userConnectionId). This includes all available fields: actorId, actorType, channelId, IP address, user agent string, login/logout timestamps, and authentication context.\n\nAccess to this API is restricted to admin or trusted audit roles, as the data contains sensitive session and identity information. It is used for session trace, fraud/abuse investigations, and full compliance audit. Authorization and input validation are enforced—invalid or unauthorized requests are rejected with appropriate errors.\n\nTypical use cases include: reconstructing a session for incident response, verifying access source for legal compliance, or correlating suspicious activity. Related endpoints allow search/listing (see index operation), and deletion (erase operation for session records).","summary":"Retrieve detailed information for a specific user connection record by its ID.","parameters":[{"name":"userConnectionId","description":"Unique identifier of the user connection/session record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full detail of the user connection/session record for compliance, audit, or analytics use cases.","typeName":"IShoppingMallUserConnection"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/userConnections/{userConnectionId}","method":"get","prerequisites":[]},{"specification":"This operation updates metadata for a specified user connection record in the shopping_mall_user_connections table. It allows admin roles to amend or annotate session logs for legal, compliance, or risk assessment purposes — for example, to update authentication context or manually annotate risk/fraud scores. Only modifiable fields are permitted; the operation enforces strict validation, audit trails, and non-destructive update (no session reactivation or deletion via this endpoint).","description":"Update or annotate a user connection/session record identified by userConnectionId, as stored in the shopping_mall_user_connections table. Permitted changes include updating select metadata for compliance (such as authentication context, risk score, or device labeling). All changes are logged with full audit trail for regulatory purposes.\n\nThe operation requires strict authorization (admin-level), and validates all updates to safeguard against destructive/irreversible changes — session history is preserved and the record cannot be reactivated once ended or deleted. Only allowed fields may be updated per audit policy; invalid fields or unauthorized attempts are rejected.\n\nTypical use cases: marking session as compromised, appending compliance comments, adjusting authentication data for risk scoring. Related endpoints: see detail (at operation), list (index), and remove/erase. Error handling returns actionable messages for invalid update requests or insufficient privileges.","summary":"Update or annotate metadata for a user connection/session record by ID (admin only).","parameters":[{"name":"userConnectionId","description":"Unique identifier of the user connection/session record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update in the user connection/session record, including audit/compliance annotations.","typeName":"IShoppingMallUserConnection.IUpdate"},"responseBody":{"description":"The updated user connection/session record with all latest modifications and audit information.","typeName":"IShoppingMallUserConnection"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/userConnections/{userConnectionId}","method":"put","prerequisites":[]},{"specification":"This operation permanently deletes (hard erase) a user connection/session record by its unique userConnectionId from the shopping_mall_user_connections table. Intended for compliance and legal cleanup purposes only (e.g., data retention expiration, GDPR erasure). The endpoint enforces authorization, requires confirmation of intent, and returns no content on success. Deleted sessions cannot be recovered.","description":"Permanently remove a user connection/session record from shopping_mall_user_connections by its unique ID. This is a hard erase operation, bypassing normal session expiry. It may only be used by privileged admin roles for compliance (e.g., regulatory data erasure, expired retention).\n\nThe operation enforces full authorization and audit logging—irreversible removal is only permitted after verification of legal/retention requirements. No session information is recoverable after erase. Attempting to delete a non-existent or unauthorized record results in a clear error.  Related endpoints include: retrieve/list (at/index), and update metadata. All actions are monitored for compliance with legal frameworks such as GDPR, CCPA, and internal audit policies.","summary":"Permanently erase a user connection/session record by its unique ID (compliance only).","parameters":[{"name":"userConnectionId","description":"Unique identifier of the user connection/session record (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/userConnections/{userConnectionId}","method":"delete","prerequisites":[]},{"specification":"This operation allows authorized roles to search and filter user agreement records in the system. It provides flexible searching, filtering, and pagination for agreements that represent user acceptance of terms, privacy policies, or compliance consent. Agreements are linked to actors (customers, sellers, admins) with version and withdrawal metadata. This operation works with the shopping_mall_user_agreements Prisma table, enabling administrators to audit and manage user consents for regulatory compliance, handle opt-in/opt-out flows, and analyze acceptance rates across agreement types and actor types.\n\nThe PATCH method permits specifying complex query and filter parameters in the request body, including search by actor ID, actor type, agreement type, version, acceptance date ranges, and withdrawn status. It supports results pagination, configurable page sizes, and sorting by creation or acceptance date.\n\nSecurity is paramount, and access should be limited to administrators or users with compliance/audit permissions. Sensitive PII exposure is strictly limited, exposing only necessary fields as allowed by actor type and business role. Rate limiting is applied to prevent abuse or mass data downloads. This endpoint is intended for back-office/admin UI and compliance auditing rather than for end users.\n\nErrors due to invalid query parameters, permission issues, or excessive result size are reported with specific error codes and messages, referencing business and audit requirements.","path":"/shoppingMall/admin/userAgreements","method":"patch","summary":"Search and filter user agreement records for compliance/audit (shopping_mall_user_agreements)","description":"Retrieve a paginated and filterable list of user agreement entities from the system for compliance, auditing, or policy management purposes. This endpoint supports advanced filtering on agreement type, version, actor type, user identity, acceptance/withdrawal timestamps, and more. Multiple agreements per user and version are allowed per regulatory standards.\n\nThis API is only accessible to platform administrators or roles with audit/audit-log viewing permissions. Output includes masked or minimum required PII depending on actor type and system configuration. Results are paginated and sorted, and implementation should ensure fast index-based query performance for large datasets.\n\nRelated operations include GET/PUT for agreement detail and update, as well as DELETE for removing agreement records in the case of error corrections or privacy/withdrawal enforcement. Not to be used for self-service user privacy consent flows.","parameters":[],"requestBody":{"description":"Search, filter, and pagination parameters for user agreement query.","typeName":"IShoppingMallUserAgreement.IRequest"},"responseBody":{"description":"Paginated list of user agreement summaries matching the specified search criteria.","typeName":"IPageIShoppingMallUserAgreement.ISummary"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Retrieves the details of a specific user agreement record by ID, based on the shopping_mall_user_agreements Prisma table. This operation is intended for administrative or compliance review of user agreement acceptance/withdrawal information, allowing examination of who accepted which version/type of policy, at what time, and the withdrawal status. It surfaces complete details necessary for regulatory or legal review, including actor information, agreement type and version, acceptance/withdrawal timestamps, and cross-reference to policies or terms text. Actor PII is masked or restricted as appropriate to the requesting user's role.","path":"/shoppingMall/admin/userAgreements/{userAgreementId}","method":"get","summary":"Retrieve details of a specific user agreement record (shopping_mall_user_agreements)","description":"Fetch a single user agreement record by its unique identifier for the purposes of compliance, legal audit, or platform administration. The response includes all core agreement fields: actor ID and type (customer/seller/admin), agreement type (e.g., Terms, Privacy), document version, acceptance and withdrawal timestamps, and unique constraints. Actor information is revealed according to system policy and only for authorized roles. Intended for deep-dive investigations of specific agreements or user consent episodes, not bulk export or user self-service.\n\nRelated operations include PATCH for indexed search, PUT for updating agreement status or correcting administrative errors, and DELETE for removing mistaken or legacy records, each subject to strict auditing. Improper or unauthorized access triggers security logging and potential investigation.","parameters":[{"name":"userAgreementId","description":"Unique identifier of the target user agreement record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full user agreement record with detailed audit/compliance fields.","typeName":"IShoppingMallUserAgreement"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Updates an existing user agreement entry, allowing administrators to correct records, update consent or withdrawal information, fix compliance status, or resolve errors in previous entries. This operation acts on the shopping_mall_user_agreements Prisma table, where agreements are strictly versioned and subject to audit logging. Only administrators or explicit compliance operation roles may execute updates. The operation enforces that version changes, acceptance status, and withdrawal actions align with regulatory and business policy rules.","path":"/shoppingMall/admin/userAgreements/{userAgreementId}","method":"put","summary":"Update details or status of a user agreement record (shopping_mall_user_agreements)","description":"Modify the details of a user agreement record, including setting or updating the acceptance timestamp, withdrawal timestamp, or correcting version/type fields as permitted by business policy and compliance regulation. PATCH/PUT history is tracked for audit, and all updates require reason/context for the change. Sensitive to role; only administrators or compliance operators may perform updates. Any modification contrary to regulatory retention or user privacy rules must be strictly blocked and logged for security. Updates are subject to validation that agreement type/version match current policy standards.\n\nRelated API operations are GET to view user agreement detail, DELETE to remove records for error correction or privacy withdrawal, and PATCH for search/filtering in bulk audit scenarios. Errors return explicit reason codes for business rules, retention limitations, or role violations.","parameters":[{"name":"userAgreementId","description":"Unique identifier of the user agreement to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the user agreement record, such as acceptance/withdrawal date or agreement version/type. All fields are strictly validated for business/policy correctness.","typeName":"IShoppingMallUserAgreement.IUpdate"},"responseBody":{"description":"The updated user agreement record reflecting the new information and audit evidence.","typeName":"IShoppingMallUserAgreement"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Removes a user agreement record from the shopping_mall_user_agreements table. This operation should only be permitted for administrators or compliance officers in the context of correcting erroneous or duplicate entries, or in response to privacy/GDPR erasure requests. All deletions are logical (soft delete) and result in audit log entries and legal evidence snapshots for regulatory compliance.","path":"/shoppingMall/admin/userAgreements/{userAgreementId}","method":"delete","summary":"Remove (soft delete) a specific user agreement record for compliance or correction (shopping_mall_user_agreements)","description":"Marks a user agreement record as deleted, making it logically removed from standard query results but still available for audit and compliance as required by regulatory and retention standards. This operation is strictly limited to administrator or compliance roles, and is tracked with reason and snapshot. Soft deletions ensure no permanent data removal occurs, only legal/compliance-mandated logical removal. This endpoint must not permit physical delete to meet compliance and audit requirements for user consents. Attempts to delete non-existent or non-removable records result in clear error messages and audit log entries for traceability.\n\nTypically used for correcting entries mistakenly created, fulfilling GDPR/CCPA erasure requests, or maintaining retention/expunge policies. Associated audit and entity snapshots are referenced for downstream evidence.","parameters":[{"name":"userAgreementId","description":"Unique identifier of the target user agreement record to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation provides a flexible, advanced search for products registered in the shopping mall platform, supporting multi-faceted query, filtering, keyword, tag, and sort options. It is based on the shopping_mall_products table in the Prisma schema, which models core catalog products with seller, channel, section, and primary category linkage. Supports complex searches for use-cases like merchandising, curation, and customer discovery across the catalog, with integration of channel/section/category filtering, pagination, and sort logic. Enables rich query with regular and fuzzy search patterns on product code, name, status, and business status, including visibility and workflow state. Designed for roles with permission to view broad product data, with result encapsulation in a paginated list for efficient client/UI consumption.","description":"Retrieve a filtered and paginated list of products from the system catalog. This operation allows advanced searching, sorting, and filtering by multiple criteria including seller, channel, section, category, product code, status, and textual search on product names. Supports pagination (page/size), sorting by creation/update time, name, or status, and optional fuzzy matching for enhanced discovery experiences.\n\nSecurity and permission logic requires that results respect channel and seller access rights, with potential masking of restricted fields dependent on caller role (customer, seller, admin). Only products marked as Active (or other visible statuses) are shown to customers; sellers and admins may search broader sets, including paused/discontinued products for operational workflows.\n\nIntegrates directly with the shopping_mall_products table described in the Prisma schema—leveraging all search-relevant fields and associated relationships for filter enrichment. Robust error handling returns detailed feedback on invalid query parameters or permission denials. Designed to be audited and extensible for future field expansions or integration with analytics/personalization engines.","summary":"Search and retrieve products from the shopping mall catalog with advanced filtering, pagination, and sorting. (shopping_mall_products)","parameters":[],"requestBody":{"description":"Search, filter, sort, and pagination parameters for product catalog queries.","typeName":"IShoppingMallProduct.IRequest"},"responseBody":{"description":"Paged, filtered list of product summaries matching the search criteria with metadata for UI rendering.","typeName":"IPageIShoppingMallProduct.ISummary"},"authorizationRoles":[],"name":"index","path":"/shoppingMall/products","method":"patch","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"A channel must be registered before it can be referenced when filtering products by channel_id."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A section must be created in a channel before it can be referenced via section_id when searching products."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/categories","method":"post"},"description":"A category must be created in a channel before it can be referenced via category_id in product search queries."},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"A seller must register a product for it to be available in the product catalog and for seller_id to reference an existing seller's product."}]},{"specification":"This operation retrieves the complete, detailed information for a single product in the shopping mall catalog specified by its unique productId. It is built on the shopping_mall_products table from the Prisma schema, encompassing all core attributes, seller/channel/section/category linkages, and references to rich content, media, variants, bundles, SEO metadata, and more. Used for displaying detailed product views to shoppers, sellers, or administrators depending on caller context. Supports product viewing, audit, and compliance use-cases with integration of linked business objects for full data representation.","description":"Fetch detailed information for a specific product identified by productId, including all main attributes—name, code, status, business workflow state, price, seller and channel association, section/category membership, and creation/update timestamps. Optionally include linked product content, variants/options, bundles, tags, SEO metadata, and attachments for comprehensive data.\n\nPermission and visibility are determined by product status, workflow state, and role; only appropriately authorized users (customers for public items, sellers for their own listings, admins for global view) may access certain sensitive or operational fields. Handles cases where the product is paused, discontinued, or deleted (soft delete), providing appropriate error or masked response where business rules require. Fully aligns with the shopping_mall_products and its related Prisma schema definitions to ensure all entity fields and relationships are reflected accurately.\n\nComplementary to product list or search endpoints, this API enables direct navigation to individual product detail pages for purchase, review, management, or review. Returns error if productId does not exist or the resource is not visible to the caller.","summary":"Retrieve detailed information for a specific product by productId. (shopping_mall_products)","parameters":[{"name":"productId","description":"Unique identifier for the product to retrieve from the shopping mall catalog.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail object for the specified product, including all available fields and related linkages for display or edit.","typeName":"IShoppingMallProduct"},"authorizationRoles":[],"name":"at","path":"/shoppingMall/products/{productId}","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"A product must be registered before its detailed information can be retrieved by productId."}]},{"specification":"This operation registers a new product to the shopping mall platform, allowing sellers or admins to create individual product records in the catalog. Built on the shopping_mall_products table, it validates and stores all primary product fields (such as code, name, seller, channel, section, category, initial status), with support for further enrichment via related entities like content, options, bundles, tags, SEO, and attachments. Invokes all product lifecycle business logic for workflow activation, status validation, and audit/snapshot creation. Designed for use by sellers (their own products) or admins.","description":"Create a new product entry in the shopping mall catalog by providing all required business fields including seller, channel, section, category, code, name, status, and business workflow state. Validates the payload against business constraints (uniqueness, completeness, status rules) and sets up initial state for product lifecycle management.\n\nAdditional content, options, variants, bundles, tagging, and attachments can be specified in compliant structures, ensuring modular expansion and rich catalog presentation. Automatically creates a product snapshot for evidence and audit at creation. Only authorized roles (seller for their section/channel, admin for global scopes) may invoke this operation; customers cannot register products. Comprehensive error handling for validation failures, permission denials, or business rule violations aligns with shopping_mall_products Prisma schema and associated relationships.\n\nReturns the full detail of the created product, suitable for immediate use in listing, editing, or management workflows.","summary":"Register a new product to the shopping mall catalog. (shopping_mall_products)","parameters":[],"requestBody":{"description":"All primary and supplementary information for registering the new product, including seller, catalog scope, product data, and attachment references.","typeName":"IShoppingMallProduct.ICreate"},"responseBody":{"description":"Full product object of the newly registered entry in the catalog, for confirmation and further operations.","typeName":"IShoppingMallProduct"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/seller/products","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"A new channel must exist before registering a product to associate it via shopping_mall_channel_id."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A section within a channel must be created before a product can reference it via shopping_mall_section_id."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/categories","method":"post"},"description":"A category within a channel must be created before a product can reference it via shopping_mall_category_id."}]},{"specification":"This operation registers a new product to the shopping mall platform, allowing sellers or admins to create individual product records in the catalog. Built on the shopping_mall_products table, it validates and stores all primary product fields (such as code, name, seller, channel, section, category, initial status), with support for further enrichment via related entities like content, options, bundles, tags, SEO, and attachments. Invokes all product lifecycle business logic for workflow activation, status validation, and audit/snapshot creation. Designed for use by sellers (their own products) or admins.","description":"Create a new product entry in the shopping mall catalog by providing all required business fields including seller, channel, section, category, code, name, status, and business workflow state. Validates the payload against business constraints (uniqueness, completeness, status rules) and sets up initial state for product lifecycle management.\n\nAdditional content, options, variants, bundles, tagging, and attachments can be specified in compliant structures, ensuring modular expansion and rich catalog presentation. Automatically creates a product snapshot for evidence and audit at creation. Only authorized roles (seller for their section/channel, admin for global scopes) may invoke this operation; customers cannot register products. Comprehensive error handling for validation failures, permission denials, or business rule violations aligns with shopping_mall_products Prisma schema and associated relationships.\n\nReturns the full detail of the created product, suitable for immediate use in listing, editing, or management workflows.","summary":"Register a new product to the shopping mall catalog. (shopping_mall_products)","parameters":[],"requestBody":{"description":"All primary and supplementary information for registering the new product, including seller, catalog scope, product data, and attachment references.","typeName":"IShoppingMallProduct.ICreate"},"responseBody":{"description":"Full product object of the newly registered entry in the catalog, for confirmation and further operations.","typeName":"IShoppingMallProduct"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/admin/products","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"A new channel must exist before registering a product to associate it via shopping_mall_channel_id."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A section within a channel must be created before a product can reference it via shopping_mall_section_id."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/categories","method":"post"},"description":"A category within a channel must be created before a product can reference it via shopping_mall_category_id."}]},{"specification":"This operation allows authorized sellers or administrators to update an existing product’s information in the shopping mall catalog, using the product's unique productId. Based on the shopping_mall_products schema, it supports modifications to top-level product data (name, code, category, section, status, workflow state, etc.) and cascades changes to related catalog and business logic structures where needed. Invokes all update-related product lifecycle rules including snapshot/audit creation. Used for price/content corrections, status updates, or re-categorization. Ensures only permitted roles may update products under their management scope.","description":"Update the attributes of an existing product specified by productId, with changeable fields including core attributes (code, name, status, category, section, etc.) and related catalog relationships. Supports business workflow controls for pausing, activating, discontinuing, or modifying eligibility for display/order. Permissions restrict seller updates to their own products/sections, while admins have global update access. Validation ensures compliance with workflow rules, uniqueness, and completeness, performing all error handling on rejection or rule violation.\n\nAutomatically generates a product snapshot for evidence, versioning, and compliance needs. Integration of content, variant, bundle, and tag changes are governed by sub-schemas and can be included in update input. Returns the updated product object reflecting all changes. Strictly aligned with the field and relationship definitions in shopping_mall_products Prisma schema, with robust audit trail and error explanations as needed.\n\nNon-authorized or invalid updates (e.g., for deleted, expired, or restricted products) are rejected with clear exception messages.","summary":"Update information for an existing product by productId. (shopping_mall_products)","parameters":[{"name":"productId","description":"Unique identifier for the product to update in the catalog.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the product identified by productId, with structures matching updatable business data per product schema.","typeName":"IShoppingMallProduct.IUpdate"},"responseBody":{"description":"Complete product object reflecting updated values suitable for editing, management, or display.","typeName":"IShoppingMallProduct"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/seller/products/{productId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before it can be updated. The product is registered via POST /shoppingMall/seller/products, which creates all properties required including productId, shopping_mall_channel_id, shopping_mall_section_id, and shopping_mall_category_id."}]},{"specification":"This operation allows authorized sellers or administrators to update an existing product’s information in the shopping mall catalog, using the product's unique productId. Based on the shopping_mall_products schema, it supports modifications to top-level product data (name, code, category, section, status, workflow state, etc.) and cascades changes to related catalog and business logic structures where needed. Invokes all update-related product lifecycle rules including snapshot/audit creation. Used for price/content corrections, status updates, or re-categorization. Ensures only permitted roles may update products under their management scope.","description":"Update the attributes of an existing product specified by productId, with changeable fields including core attributes (code, name, status, category, section, etc.) and related catalog relationships. Supports business workflow controls for pausing, activating, discontinuing, or modifying eligibility for display/order. Permissions restrict seller updates to their own products/sections, while admins have global update access. Validation ensures compliance with workflow rules, uniqueness, and completeness, performing all error handling on rejection or rule violation.\n\nAutomatically generates a product snapshot for evidence, versioning, and compliance needs. Integration of content, variant, bundle, and tag changes are governed by sub-schemas and can be included in update input. Returns the updated product object reflecting all changes. Strictly aligned with the field and relationship definitions in shopping_mall_products Prisma schema, with robust audit trail and error explanations as needed.\n\nNon-authorized or invalid updates (e.g., for deleted, expired, or restricted products) are rejected with clear exception messages.","summary":"Update information for an existing product by productId. (shopping_mall_products)","parameters":[{"name":"productId","description":"Unique identifier for the product to update in the catalog.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the product identified by productId, with structures matching updatable business data per product schema.","typeName":"IShoppingMallProduct.IUpdate"},"responseBody":{"description":"Complete product object reflecting updated values suitable for editing, management, or display.","typeName":"IShoppingMallProduct"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/admin/products/{productId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can be updated. The product is registered via POST /shoppingMall/admin/products, which creates all properties required including productId, shopping_mall_channel_id, shopping_mall_section_id, and shopping_mall_category_id."}]},{"specification":"This operation performs a logical (soft) delete of a product identified by its unique ID in the shopping mall platform. It operates on the shopping_mall_products table in the Prisma schema, using the 'deleted_at' column for soft deletion. Authorized sellers (owners of the product) and admins can remove a product, preserving all version history and previous states for audit and compliance as required by business policy. Deleted products are excluded from catalog listings and further operations, but are retained for evidence and legal history.","description":"Allows an authorized seller or admin to remove a product from active listings without permanently erasing the record, complying with audit and evidence policies. Soft deletion is achieved by updating the 'deleted_at' field, preserving product data, options, variants, and all historical snapshots. This approach supports regulatory requirements and dispute resolution by retaining all product-related evidence and relationships.\n\nRole-based authorization ensures that only the product owner (seller) or an administrator can delete a product. Attempts by unauthorized users will be rejected with a clear, actionable error. The operation also checks that the product is not part of active orders or reserved inventory—if it is, deletion will be blocked and a descriptive business error is returned. Related snapshots in shopping_mall_product_snapshots ensure the deleted state is fully traceable.\n\nThis API should be paired with product listing and recovery endpoints to enable batch operations or accidental deletion recovery, and must log all delete attempts in system audit trails for compliance. If a product is already soft-deleted or does not exist, an error will be returned indicating its status.","summary":"Soft-delete a product identified by productId (shopping_mall_products table).","parameters":[{"name":"productId","description":"UUID identifier of the product to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/seller/products/{productId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before it can be deleted. Register the product first using POST /shoppingMall/seller/products which creates a productId required for deletion."}]},{"specification":"This operation performs a logical (soft) delete of a product identified by its unique ID in the shopping mall platform. It operates on the shopping_mall_products table in the Prisma schema, using the 'deleted_at' column for soft deletion. Authorized sellers (owners of the product) and admins can remove a product, preserving all version history and previous states for audit and compliance as required by business policy. Deleted products are excluded from catalog listings and further operations, but are retained for evidence and legal history.","description":"Allows an authorized seller or admin to remove a product from active listings without permanently erasing the record, complying with audit and evidence policies. Soft deletion is achieved by updating the 'deleted_at' field, preserving product data, options, variants, and all historical snapshots. This approach supports regulatory requirements and dispute resolution by retaining all product-related evidence and relationships.\n\nRole-based authorization ensures that only the product owner (seller) or an administrator can delete a product. Attempts by unauthorized users will be rejected with a clear, actionable error. The operation also checks that the product is not part of active orders or reserved inventory—if it is, deletion will be blocked and a descriptive business error is returned. Related snapshots in shopping_mall_product_snapshots ensure the deleted state is fully traceable.\n\nThis API should be paired with product listing and recovery endpoints to enable batch operations or accidental deletion recovery, and must log all delete attempts in system audit trails for compliance. If a product is already soft-deleted or does not exist, an error will be returned indicating its status.","summary":"Soft-delete a product identified by productId (shopping_mall_products table).","parameters":[{"name":"productId","description":"UUID identifier of the product to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/admin/products/{productId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can be deleted. Register the product first using POST /shoppingMall/admin/products which creates a productId required for deletion."}]},{"specification":"This operation retrieves a paginated, filterable list of product options associated with a specified product. It reads from the shopping_mall_product_options table in the Prisma schema. Allows sellers (owners of the product), admins, or relevant authorized users to view all option definitions (such as color, size, material) for a particular product. The operation is designed for advanced filtering and search use-cases, supporting UI and business automation.","description":"Fetches a list of all options linked to a particular product, providing support for advanced filtering, sorting, and pagination to accommodate large datasets and complex UIs. The response includes both required and optional options, ordered by the UI display position, and indicates option names and requirements as stored in the shopping_mall_product_options table.\n\nRole-based access ensures that sellers (owners of the product), admins, and authorized business users can access this endpoint. Sensitive or hidden option information is excluded according to the user's permissions and business rules. In case the product does not exist, permission is insufficient, or the owner does not match, appropriate business errors and audit logs are produced.\n\nIntegrates with shopping_mall_products for option grouping and with shopping_mall_product_option_values for downstream API navigation. Supports localization and extended attributes for future extensibility.","summary":"Retrieve a filtered, paginated list of options for a specified product (shopping_mall_product_options table).","parameters":[{"name":"productId","description":"UUID of the product whose options are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, sort, and pagination criteria for options retrieval.","typeName":"IShoppingMallProductOption.IRequest"},"responseBody":{"description":"Paginated list of product option summaries for the specified product, including required attributes and UI metadata.","typeName":"IPageIShoppingMallProductOption.ISummary"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/seller/products/{productId}/options","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before options can be listed, since options are linked to a specific product."}]},{"specification":"This operation retrieves a paginated, filterable list of product options associated with a specified product. It reads from the shopping_mall_product_options table in the Prisma schema. Allows sellers (owners of the product), admins, or relevant authorized users to view all option definitions (such as color, size, material) for a particular product. The operation is designed for advanced filtering and search use-cases, supporting UI and business automation.","description":"Fetches a list of all options linked to a particular product, providing support for advanced filtering, sorting, and pagination to accommodate large datasets and complex UIs. The response includes both required and optional options, ordered by the UI display position, and indicates option names and requirements as stored in the shopping_mall_product_options table.\n\nRole-based access ensures that sellers (owners of the product), admins, and authorized business users can access this endpoint. Sensitive or hidden option information is excluded according to the user's permissions and business rules. In case the product does not exist, permission is insufficient, or the owner does not match, appropriate business errors and audit logs are produced.\n\nIntegrates with shopping_mall_products for option grouping and with shopping_mall_product_option_values for downstream API navigation. Supports localization and extended attributes for future extensibility.","summary":"Retrieve a filtered, paginated list of options for a specified product (shopping_mall_product_options table).","parameters":[{"name":"productId","description":"UUID of the product whose options are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, sort, and pagination criteria for options retrieval.","typeName":"IShoppingMallProductOption.IRequest"},"responseBody":{"description":"Paginated list of product option summaries for the specified product, including required attributes and UI metadata.","typeName":"IPageIShoppingMallProductOption.ISummary"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/admin/products/{productId}/options","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its options can be retrieved, as the options are associated with a given admin-managed product."}]},{"specification":"This operation retrieves the detail of a single product option for a given product, using both product and option IDs as path parameters. It reads from the shopping_mall_product_options table in the Prisma schema. Access is restricted to the owner seller, associated admins, or permissioned users. The API returns the complete definition of the requested option, supporting UI editing, validation, and detailed audits.","description":"Returns full information for a specific product option belonging to a product, including its name, required status, UI display order, and all business-meta as recorded in shopping_mall_product_options. Foreign key relationships to the target product and associated option values are included.\n\nSecurity measures ensure that only sellers who own the parent product, or admins, can access this detail. Unauthorized access attempts are logged for audit. If the option does not exist or is not attached to the specified product, an appropriate error is returned for business and compliance traceability.\n\nThis operation is typically used in option editing forms, business logic reviews, and audit UIs. Associated endpoints include option update and value management APIs.","summary":"Retrieve the detail for a specific product option (shopping_mall_product_options table).","parameters":[{"name":"productId","description":"UUID identifier of the parent product.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"UUID identifier of the product option to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detail for the requested product option, including relation to product and attributes.","typeName":"IShoppingMallProductOption"},"authorizationRoles":["seller","admin"],"name":"at","path":"/shoppingMall/seller/products/{productId}/options/{optionId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before any option detail can be retrieved, as options are always attached to a specific product."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"Product option must be created before its detail can be retrieved, as the optionId references an option related to the product."}]},{"specification":"This operation retrieves the detail of a single product option for a given product, using both product and option IDs as path parameters. It reads from the shopping_mall_product_options table in the Prisma schema. Access is restricted to the owner seller, associated admins, or permissioned users. The API returns the complete definition of the requested option, supporting UI editing, validation, and detailed audits.","description":"Returns full information for a specific product option belonging to a product, including its name, required status, UI display order, and all business-meta as recorded in shopping_mall_product_options. Foreign key relationships to the target product and associated option values are included.\n\nSecurity measures ensure that only sellers who own the parent product, or admins, can access this detail. Unauthorized access attempts are logged for audit. If the option does not exist or is not attached to the specified product, an appropriate error is returned for business and compliance traceability.\n\nThis operation is typically used in option editing forms, business logic reviews, and audit UIs. Associated endpoints include option update and value management APIs.","summary":"Retrieve the detail for a specific product option (shopping_mall_product_options table).","parameters":[{"name":"productId","description":"UUID identifier of the parent product.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"UUID identifier of the product option to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detail for the requested product option, including relation to product and attributes.","typeName":"IShoppingMallProductOption"},"authorizationRoles":["seller","admin"],"name":"at","path":"/shoppingMall/admin/products/{productId}/options/{optionId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before retrieving option detail, because every option is linked to a product created by admin."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options","method":"post"},"description":"Product option must be created before its detail can be accessed, since the optionId references a specific option under the admin's product."}]},{"specification":"This operation allows an authorized seller or admin to create a new product option associated with a specific product. It writes to the shopping_mall_product_options table in the Prisma schema and is used when defining characteristics such as color, size, or material for a product. The operation supports all required data validation, permission checks, and automatically sets UI display order for the new option.","description":"Creates a new option for the specified product by accepting option details such as name, whether it is required, and its intended order for UI purposes. Only sellers who own the product and admins can use this operation; permission errors are returned for unauthorized attempts, with all such events logged for compliance.\n\nBusiness validation ensures that the option name is unique per product, required attributes are filled, and maximum option count per product is enforced if applicable. The API creates the database record, updates search indices, and triggers any necessary business rule workflows associated with product option definition.\n\nUpon successful creation, the response returns the full option object. Error handling addresses duplicate names, invalid product references, rejected validation, or constraint violations. Extensible for future metadata fields and localization attributes.","summary":"Create a new option on a product (shopping_mall_product_options table).","parameters":[{"name":"productId","description":"UUID of the product to which the new option will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new product option.","typeName":"IShoppingMallProductOption.ICreate"},"responseBody":{"description":"The newly created product option as stored in the database.","typeName":"IShoppingMallProductOption"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/seller/products/{productId}/options","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before options can be added to it"}]},{"specification":"This operation allows an authorized seller or admin to create a new product option associated with a specific product. It writes to the shopping_mall_product_options table in the Prisma schema and is used when defining characteristics such as color, size, or material for a product. The operation supports all required data validation, permission checks, and automatically sets UI display order for the new option.","description":"Creates a new option for the specified product by accepting option details such as name, whether it is required, and its intended order for UI purposes. Only sellers who own the product and admins can use this operation; permission errors are returned for unauthorized attempts, with all such events logged for compliance.\n\nBusiness validation ensures that the option name is unique per product, required attributes are filled, and maximum option count per product is enforced if applicable. The API creates the database record, updates search indices, and triggers any necessary business rule workflows associated with product option definition.\n\nUpon successful creation, the response returns the full option object. Error handling addresses duplicate names, invalid product references, rejected validation, or constraint violations. Extensible for future metadata fields and localization attributes.","summary":"Create a new option on a product (shopping_mall_product_options table).","parameters":[{"name":"productId","description":"UUID of the product to which the new option will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new product option.","typeName":"IShoppingMallProductOption.ICreate"},"responseBody":{"description":"The newly created product option as stored in the database.","typeName":"IShoppingMallProductOption"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/admin/products/{productId}/options","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before options can be added to it"}]},{"specification":"Update an option for a specific product. This endpoint allows authorized sellers or admins to modify an option (such as size, color, etc.) belonging to an existing product. The update operation targets the shopping_mall_product_options table and enforces that only fields defined in the schema (name, required, position, etc.) are updatable. Security validation ensures only owners of the product, or admins, can edit options. All modifications are snapshotted for audit trail and version rollback. Names must be unique within the product scope, and changes to option structure will trigger downstream variant/stock reconciliation.","description":"This operation updates an option entity associated with a parent product in the product catalog. The update process enforces role-based access control—only the seller who owns the product or an admin may perform updates. Option fields such as 'name', 'required', and 'position' can be altered. Attempts to rename to a duplicate name within the same product will yield a conflict error.\n\nThe underlying Prisma schema table, shopping_mall_product_options, manages all options for each product, and changes are immediately reflected in variant generation logic and can impact inventory structure. The system automatically records all updates as historical snapshots in the appropriate audit trail for compliance.\n\nIf an invalid product or option identifier is specified, a clear HTTP 404 error will be returned. Any modification is subject to validation constraints in the schema (e.g., name required, position is integer, required is boolean).","summary":"Update a specific product option in the shopping_mall_product_options table.","parameters":[{"name":"productId","description":"Unique identifier for the parent product.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier for the option being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the product option (e.g., name, required, position).","typeName":"IShoppingMallProductOption.IUpdate"},"responseBody":{"description":"The updated product option record.","typeName":"IShoppingMallProductOption"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/products/{productId}/options/{optionId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its options can be updated"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"Option must be created before it can be updated"}]},{"specification":"Update an option for a specific product. This endpoint allows authorized sellers or admins to modify an option (such as size, color, etc.) belonging to an existing product. The update operation targets the shopping_mall_product_options table and enforces that only fields defined in the schema (name, required, position, etc.) are updatable. Security validation ensures only owners of the product, or admins, can edit options. All modifications are snapshotted for audit trail and version rollback. Names must be unique within the product scope, and changes to option structure will trigger downstream variant/stock reconciliation.","description":"This operation updates an option entity associated with a parent product in the product catalog. The update process enforces role-based access control—only the seller who owns the product or an admin may perform updates. Option fields such as 'name', 'required', and 'position' can be altered. Attempts to rename to a duplicate name within the same product will yield a conflict error.\n\nThe underlying Prisma schema table, shopping_mall_product_options, manages all options for each product, and changes are immediately reflected in variant generation logic and can impact inventory structure. The system automatically records all updates as historical snapshots in the appropriate audit trail for compliance.\n\nIf an invalid product or option identifier is specified, a clear HTTP 404 error will be returned. Any modification is subject to validation constraints in the schema (e.g., name required, position is integer, required is boolean).","summary":"Update a specific product option in the shopping_mall_product_options table.","parameters":[{"name":"productId","description":"Unique identifier for the parent product.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier for the option being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the product option (e.g., name, required, position).","typeName":"IShoppingMallProductOption.IUpdate"},"responseBody":{"description":"The updated product option record.","typeName":"IShoppingMallProductOption"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/products/{productId}/options/{optionId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its options can be updated"},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options","method":"post"},"description":"Option must be created before it can be updated"}]},{"specification":"Permanently remove a specific option from a product for which the seller has ownership or an admin has necessary privileges. This API performs a soft delete by updating the deleted_at field in the shopping_mall_product_options table, preserving the record for audit and rollback. It ensures the option belongs to the given product and prevents removal if such action would violate referential integrity (e.g., option is in use by variants). All deletions are recorded in audit logs and will cascade to mark downstream variant records as invalid or deprecated as per business rules.","description":"This operation performs a soft deletion of an option from the shopping_mall_product_options table, scoped by product and option identifiers. The system first validates ownership and role permissions. Soft deletion is achieved by updating the 'deleted_at' field, complying with strict audit and evidence requirements.\n\nIf the option is actively referenced by existing variants, the operation checks business rules and either rejects the deletion or triggers updates for affected variant records. The endpoint provides clear error messaging for constraint violations, not-found errors, or permission denial.\n\nEvery soft delete operation triggers audit log updates and historical snapshots to permit compliance audit and future restoration if necessary. Only the product owner (seller) or an administrator may invoke this operation.","summary":"Soft delete an option from a product using the shopping_mall_product_options table.","parameters":[{"name":"productId","description":"Unique identifier for the parent product.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier of the option to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/products/{productId}/options/{optionId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before an option can be deleted from it."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/options","method":"post"},"description":"Product option must be created before it can be deleted from the product."}]},{"specification":"Permanently remove a specific option from a product for which the seller has ownership or an admin has necessary privileges. This API performs a soft delete by updating the deleted_at field in the shopping_mall_product_options table, preserving the record for audit and rollback. It ensures the option belongs to the given product and prevents removal if such action would violate referential integrity (e.g., option is in use by variants). All deletions are recorded in audit logs and will cascade to mark downstream variant records as invalid or deprecated as per business rules.","description":"This operation performs a soft deletion of an option from the shopping_mall_product_options table, scoped by product and option identifiers. The system first validates ownership and role permissions. Soft deletion is achieved by updating the 'deleted_at' field, complying with strict audit and evidence requirements.\n\nIf the option is actively referenced by existing variants, the operation checks business rules and either rejects the deletion or triggers updates for affected variant records. The endpoint provides clear error messaging for constraint violations, not-found errors, or permission denial.\n\nEvery soft delete operation triggers audit log updates and historical snapshots to permit compliance audit and future restoration if necessary. Only the product owner (seller) or an administrator may invoke this operation.","summary":"Soft delete an option from a product using the shopping_mall_product_options table.","parameters":[{"name":"productId","description":"Unique identifier for the parent product.","schema":{"type":"string","format":"uuid"}},{"name":"optionId","description":"Unique identifier of the option to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/products/{productId}/options/{optionId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before an option can be deleted from it."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/options","method":"post"},"description":"Product option must be created before it can be deleted from the product."}]},{"specification":"Search and retrieve a paginated, filterable list of product variants for a specific product. This endpoint operates on the shopping_mall_product_variants table and supports advanced filtering criteria, including SKU code, stock range, price range, or option values. It enables complex queries for order preparation, inventory adjustment, or catalog analytics by sellers or admins. The search supports pagination, sorting, and returns summary data for each variant, enforcing access control to prevent inappropriate data exposure.","description":"The operation retrieves a filtered, paginated list of all variants belonging to a specific parent product. The filtering/search criteria are submitted in the request body (e.g., SKU code, stock, price filtering) and the result is a page of variant summaries for administrative, seller, or catalog use. Results can be sorted by attributes like created_at, price, or stock_quantity.\n\nThe operation uses the shopping_mall_product_variants Prisma schema table, with strict referential validation: only variants for the provided productId are queryable. It enforces that only authorized sellers (owners of the product) or platform admins can access the data for that product. Requests without proper credentials or product ownership return authorization errors.\n\nPagination metadata (total count, next/prev page, etc.) is included in the response, as are only fields present in the .ISummary DTO and defined in the underlying schema.","summary":"Search and fetch a paginated list of product variants for a given product.","parameters":[{"name":"productId","description":"Unique identifier for the parent product whose variants are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination criteria for product variants.","typeName":"IShoppingMallProductVariant.IRequest"},"responseBody":{"description":"Paginated list of product variant summaries with page info.","typeName":"IPageIShoppingMallProductVariant.ISummary"},"authorizationType":null,"authorizationRole":"seller","name":"index","path":"/shoppingMall/seller/products/{productId}/variants","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its variants can be searched or listed."}]},{"specification":"Search and retrieve a paginated, filterable list of product variants for a specific product. This endpoint operates on the shopping_mall_product_variants table and supports advanced filtering criteria, including SKU code, stock range, price range, or option values. It enables complex queries for order preparation, inventory adjustment, or catalog analytics by sellers or admins. The search supports pagination, sorting, and returns summary data for each variant, enforcing access control to prevent inappropriate data exposure.","description":"The operation retrieves a filtered, paginated list of all variants belonging to a specific parent product. The filtering/search criteria are submitted in the request body (e.g., SKU code, stock, price filtering) and the result is a page of variant summaries for administrative, seller, or catalog use. Results can be sorted by attributes like created_at, price, or stock_quantity.\n\nThe operation uses the shopping_mall_product_variants Prisma schema table, with strict referential validation: only variants for the provided productId are queryable. It enforces that only authorized sellers (owners of the product) or platform admins can access the data for that product. Requests without proper credentials or product ownership return authorization errors.\n\nPagination metadata (total count, next/prev page, etc.) is included in the response, as are only fields present in the .ISummary DTO and defined in the underlying schema.","summary":"Search and fetch a paginated list of product variants for a given product.","parameters":[{"name":"productId","description":"Unique identifier for the parent product whose variants are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination criteria for product variants.","typeName":"IShoppingMallProductVariant.IRequest"},"responseBody":{"description":"Paginated list of product variant summaries with page info.","typeName":"IPageIShoppingMallProductVariant.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/products/{productId}/variants","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its variants can be searched or listed."}]},{"specification":"Retrieve a specific variant record for a product, including all key details and business data. This endpoint fetches the shopping_mall_product_variants table entry by variantId, validating that it belongs to the specified productId. Permissions are enforced to restrict access to the seller that owns the product or an admin. Returns a detailed variant object as per schema, supporting catalog management, inventory editing, and sales analytics use cases. If either product or variant does not exist, or if they do not correspond, returns a 404 error.","description":"This operation allows authorized sellers or admins to look up a single variant under a specific product, ensuring precise identification and security. It references the shopping_mall_product_variants Prisma schema table, confirming both the variantId and its association with productId before fetching the variant details. The response includes fields such as SKU code, price, stock_quantity, and the determined set of option values.\n\nAuthorization ensures that only the seller who owns the product or a platform admin can view variant details. Detailed error messaging is returned for absent or mismatched product/variant identifiers, or when permission is denied. The endpoint does not expose any business-internal or unrelated product variant data.\n\nRelated operations include listing variants, updating variant data, or managing inventory/stock directly tied to variant entries. Every variant entity returned is compliant with the attributes as defined by the schema.","summary":"Retrieve detail for a specific variant of a product from the shopping_mall_product_variants table.","parameters":[{"name":"productId","description":"Unique identifier for the parent product.","schema":{"type":"string","format":"uuid"}},{"name":"variantId","description":"Unique identifier for the product variant being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed record for the requested product variant.","typeName":"IShoppingMallProductVariant"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/products/{productId}/variants/{variantId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its variant can be retrieved"},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/variants","method":"post"},"description":"Product variant must be created before its details can be retrieved"}]},{"specification":"Retrieve a specific variant record for a product, including all key details and business data. This endpoint fetches the shopping_mall_product_variants table entry by variantId, validating that it belongs to the specified productId. Permissions are enforced to restrict access to the seller that owns the product or an admin. Returns a detailed variant object as per schema, supporting catalog management, inventory editing, and sales analytics use cases. If either product or variant does not exist, or if they do not correspond, returns a 404 error.","description":"This operation allows authorized sellers or admins to look up a single variant under a specific product, ensuring precise identification and security. It references the shopping_mall_product_variants Prisma schema table, confirming both the variantId and its association with productId before fetching the variant details. The response includes fields such as SKU code, price, stock_quantity, and the determined set of option values.\n\nAuthorization ensures that only the seller who owns the product or a platform admin can view variant details. Detailed error messaging is returned for absent or mismatched product/variant identifiers, or when permission is denied. The endpoint does not expose any business-internal or unrelated product variant data.\n\nRelated operations include listing variants, updating variant data, or managing inventory/stock directly tied to variant entries. Every variant entity returned is compliant with the attributes as defined by the schema.","summary":"Retrieve detail for a specific variant of a product from the shopping_mall_product_variants table.","parameters":[{"name":"productId","description":"Unique identifier for the parent product.","schema":{"type":"string","format":"uuid"}},{"name":"variantId","description":"Unique identifier for the product variant being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed record for the requested product variant.","typeName":"IShoppingMallProductVariant"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/products/{productId}/variants/{variantId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its variant can be retrieved"},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/variants","method":"post"},"description":"Product variant must be created before its details can be retrieved"}]},{"specification":"This operation creates a new SKU (product variant) under an existing product. The SKU is defined by a unique set of option values and must be unique within the product. Operates on the shopping_mall_product_variants table, using productId as a reference. Requires authorization as the product-owning seller or admin. Enforces uniqueness and validates stock and business rules as defined in the product schema documentation.","description":"Creates a product variant (SKU) as a child resource of a specific product. Required fields include sku_code (unique), option_values_hash (system-generated or client-calculated), price, stock_quantity, and weight. This endpoint is only available to authenticated sellers who own the parent product or to admins with global privileges. On success, a new variant is added; on business rule violation (e.g., duplicate SKU code, illegal option combination), a detailed validation error is returned.\n\nSecurity and permissions are enforced to restrict this operation to the product's owner/seller or platform admins. All input values are sanitized, and the combination of option values is checked for uniqueness and consistency. Referential foreign keys (productId) are validated against the shopping_mall_products table.\n\nError handling includes clear feedback for SKU collisions, input constraint violations (e.g., negative stock, invalid price), and business logic errors (e.g., parent product is deleted or paused). Upon successful creation, the response includes the full new variant entity as defined in the ShoppingMallProductVariant schema.","summary":"Create a product variant (SKU) under an existing product in shopping_mall_product_variants.","parameters":[{"name":"productId","description":"Parent product's unique identifier (UUID) for which to create the variant.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Product variant creation details (SKU, option values hash, price, stock, etc.). Follows IShoppingMallProductVariant.ICreate type.","typeName":"IShoppingMallProductVariant.ICreate"},"responseBody":{"description":"Created variant/SKU entity detail as per ShoppingMallProductVariant schema.","typeName":"IShoppingMallProductVariant"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/seller/products/{productId}/variants","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before a variant can be registered under it"}]},{"specification":"This operation creates a new SKU (product variant) under an existing product. The SKU is defined by a unique set of option values and must be unique within the product. Operates on the shopping_mall_product_variants table, using productId as a reference. Requires authorization as the product-owning seller or admin. Enforces uniqueness and validates stock and business rules as defined in the product schema documentation.","description":"Creates a product variant (SKU) as a child resource of a specific product. Required fields include sku_code (unique), option_values_hash (system-generated or client-calculated), price, stock_quantity, and weight. This endpoint is only available to authenticated sellers who own the parent product or to admins with global privileges. On success, a new variant is added; on business rule violation (e.g., duplicate SKU code, illegal option combination), a detailed validation error is returned.\n\nSecurity and permissions are enforced to restrict this operation to the product's owner/seller or platform admins. All input values are sanitized, and the combination of option values is checked for uniqueness and consistency. Referential foreign keys (productId) are validated against the shopping_mall_products table.\n\nError handling includes clear feedback for SKU collisions, input constraint violations (e.g., negative stock, invalid price), and business logic errors (e.g., parent product is deleted or paused). Upon successful creation, the response includes the full new variant entity as defined in the ShoppingMallProductVariant schema.","summary":"Create a product variant (SKU) under an existing product in shopping_mall_product_variants.","parameters":[{"name":"productId","description":"Parent product's unique identifier (UUID) for which to create the variant.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Product variant creation details (SKU, option values hash, price, stock, etc.). Follows IShoppingMallProductVariant.ICreate type.","typeName":"IShoppingMallProductVariant.ICreate"},"responseBody":{"description":"Created variant/SKU entity detail as per ShoppingMallProductVariant schema.","typeName":"IShoppingMallProductVariant"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/admin/products/{productId}/variants","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before a variant can be registered under it"}]},{"specification":"This operation updates an existing product variant (SKU) under a given product. It uses shopping_mall_product_variants identified by productId and variantId. Supports updating attributes such as SKU code, price, stock, and weight, and enforces all product-level business rules and validation described in the variant table documentation.","description":"Updates a SKU/variant for an existing product. Only accessible to the product's owning seller or admins. Updates may affect SKU code, price, stock, bar code, or option values, with full validation against product-level constraints and invariant checks such as uniqueness.\n\nThis operation references the corresponding product and enforces authorization based on seller ownership or admin role. Attempting to update a SKU with a duplicate code or invalid option values will result in a validation error. Foreign key checks, data type validations, and all business logic defined in the shopping_mall_product_variants schema are strictly enforced. Partial (PUT-style) or full updates should be supported depending on DTO implementation.\n\nOn success, the updated variant entity is returned. Errors include not found, unauthorized, invalid input, collision, or business rule violations. All update events are recorded for audit/history.","summary":"Update a product variant (SKU) for a specific product in shopping_mall_product_variants.","parameters":[{"name":"productId","description":"Identifier of the parent product","schema":{"type":"string","format":"uuid"}},{"name":"variantId","description":"Unique identifier of the variant to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Product variant update data according to IShoppingMallProductVariant.IUpdate DTO.","typeName":"IShoppingMallProductVariant.IUpdate"},"responseBody":{"description":"The updated SKU variant entity as defined in ShoppingMallProductVariant.","typeName":"IShoppingMallProductVariant"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/seller/products/{productId}/variants/{variantId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its variant (SKU) can be updated."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/variants","method":"post"},"description":"SKU/variant must be created before it can be updated."}]},{"specification":"This operation updates an existing product variant (SKU) under a given product. It uses shopping_mall_product_variants identified by productId and variantId. Supports updating attributes such as SKU code, price, stock, and weight, and enforces all product-level business rules and validation described in the variant table documentation.","description":"Updates a SKU/variant for an existing product. Only accessible to the product's owning seller or admins. Updates may affect SKU code, price, stock, bar code, or option values, with full validation against product-level constraints and invariant checks such as uniqueness.\n\nThis operation references the corresponding product and enforces authorization based on seller ownership or admin role. Attempting to update a SKU with a duplicate code or invalid option values will result in a validation error. Foreign key checks, data type validations, and all business logic defined in the shopping_mall_product_variants schema are strictly enforced. Partial (PUT-style) or full updates should be supported depending on DTO implementation.\n\nOn success, the updated variant entity is returned. Errors include not found, unauthorized, invalid input, collision, or business rule violations. All update events are recorded for audit/history.","summary":"Update a product variant (SKU) for a specific product in shopping_mall_product_variants.","parameters":[{"name":"productId","description":"Identifier of the parent product","schema":{"type":"string","format":"uuid"}},{"name":"variantId","description":"Unique identifier of the variant to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Product variant update data according to IShoppingMallProductVariant.IUpdate DTO.","typeName":"IShoppingMallProductVariant.IUpdate"},"responseBody":{"description":"The updated SKU variant entity as defined in ShoppingMallProductVariant.","typeName":"IShoppingMallProductVariant"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/admin/products/{productId}/variants/{variantId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its variant (SKU) can be updated."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/variants","method":"post"},"description":"SKU/variant must be created before it can be updated."}]},{"specification":"This operation deletes a specific product variant (SKU) under a given product. It works on shopping_mall_product_variants, using both productId and variantId for identification. This is a soft delete, setting deleted_at for evidence/audit purposes rather than performing a hard delete. Available to the owning seller or administrators only, per the variant schema documentation.","description":"Deletes (soft-removes) a product variant (SKU) for a specific product, marking it as deleted by setting deleted_at instead of physically removing the record. Only the product owner (seller) or admin can perform this operation. The operation ensures that SKUs linked to past or current order items, or required by product inventory audits, are never physically removed for compliance reasons.\n\nThis operation is strictly checked for business rule and permission compliance. Audit trails are generated for all deletions (soft). If the variant does not exist, does not belong to the seller, or is already deleted, appropriate error responses are returned. The parent productId is used to scope the deletion.\n\nThe response confirms deletion (soft delete, setting deleted_at) without returning the deleted entity, ensuring regulatory compliance and traceability.","summary":"Soft delete (logical removal) of a product variant (SKU) via deleted_at in shopping_mall_product_variants.","parameters":[{"name":"productId","description":"Parent product's unique identifier (UUID) for scoping the variant","schema":{"type":"string","format":"uuid"}},{"name":"variantId","description":"Identifier of the product variant to delete (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/seller/products/{productId}/variants/{variantId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before a variant (SKU) can be deleted."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/variants","method":"post"},"description":"SKU/variant must be created before it can be deleted."}]},{"specification":"This operation deletes a specific product variant (SKU) under a given product. It works on shopping_mall_product_variants, using both productId and variantId for identification. This is a soft delete, setting deleted_at for evidence/audit purposes rather than performing a hard delete. Available to the owning seller or administrators only, per the variant schema documentation.","description":"Deletes (soft-removes) a product variant (SKU) for a specific product, marking it as deleted by setting deleted_at instead of physically removing the record. Only the product owner (seller) or admin can perform this operation. The operation ensures that SKUs linked to past or current order items, or required by product inventory audits, are never physically removed for compliance reasons.\n\nThis operation is strictly checked for business rule and permission compliance. Audit trails are generated for all deletions (soft). If the variant does not exist, does not belong to the seller, or is already deleted, appropriate error responses are returned. The parent productId is used to scope the deletion.\n\nThe response confirms deletion (soft delete, setting deleted_at) without returning the deleted entity, ensuring regulatory compliance and traceability.","summary":"Soft delete (logical removal) of a product variant (SKU) via deleted_at in shopping_mall_product_variants.","parameters":[{"name":"productId","description":"Parent product's unique identifier (UUID) for scoping the variant","schema":{"type":"string","format":"uuid"}},{"name":"variantId","description":"Identifier of the product variant to delete (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/admin/products/{productId}/variants/{variantId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before a variant (SKU) can be deleted."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/variants","method":"post"},"description":"SKU/variant must be created before it can be deleted."}]},{"specification":"Retrieves a filtered, paginated list of product bundles (composed or fixed grouping of products) for a specific product. Operates on the shopping_mall_product_bundles table scoped by productId. Supports advanced search, filtering, sorting, and pagination as defined by IShoppingMallProductBundle.IRequest DTO for complex queries.","description":"Lists bundles associated with a single product, using productId as primary filter. Supports filtering on bundle_type, name, status, and allows sorting by display order or other attributes. Pagination options provide efficient navigation of large bundle sets. Useful for both sellers (to manage bundles) and admins (to audit or review product configurations).\n\nOnly accessible to the owning seller or administrators. The operation enforces permissions and validates that only bundles for the specified product are returned. Errors include unauthorized access, product not found, or invalid query parameters. The response includes only the bundles relevant to the given productId, provided in paginated format for UI efficiency.","summary":"Search and retrieve product bundles for a given product using advanced query/pagination","parameters":[{"name":"productId","description":"Parent product identifier to filter bundles for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Bundle listing/filter/search and pagination options as IShoppingMallProductBundle.IRequest DTO.","typeName":"IShoppingMallProductBundle.IRequest"},"responseBody":{"description":"Paginated product bundle results (summary/detail per IShoppingMallProductBundle, with pagination metadata)","typeName":"IPageIShoppingMallProductBundle"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/seller/products/{productId}/bundles","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before retrieving or managing its product bundles as bundle operations require a valid existing productId."}]},{"specification":"Retrieves a filtered, paginated list of product bundles (composed or fixed grouping of products) for a specific product. Operates on the shopping_mall_product_bundles table scoped by productId. Supports advanced search, filtering, sorting, and pagination as defined by IShoppingMallProductBundle.IRequest DTO for complex queries.","description":"Lists bundles associated with a single product, using productId as primary filter. Supports filtering on bundle_type, name, status, and allows sorting by display order or other attributes. Pagination options provide efficient navigation of large bundle sets. Useful for both sellers (to manage bundles) and admins (to audit or review product configurations).\n\nOnly accessible to the owning seller or administrators. The operation enforces permissions and validates that only bundles for the specified product are returned. Errors include unauthorized access, product not found, or invalid query parameters. The response includes only the bundles relevant to the given productId, provided in paginated format for UI efficiency.","summary":"Search and retrieve product bundles for a given product using advanced query/pagination","parameters":[{"name":"productId","description":"Parent product identifier to filter bundles for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Bundle listing/filter/search and pagination options as IShoppingMallProductBundle.IRequest DTO.","typeName":"IShoppingMallProductBundle.IRequest"},"responseBody":{"description":"Paginated product bundle results (summary/detail per IShoppingMallProductBundle, with pagination metadata)","typeName":"IPageIShoppingMallProductBundle"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/admin/products/{productId}/bundles","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before retrieving or managing its product bundles as bundle operations require a valid existing productId."}]},{"specification":"This operation retrieves the details of a specific product bundle for a product. It is based on the shopping_mall_product_bundles table, which links bundles to a parent product via shopping_mall_product_id, and each bundle has its own unique id (bundleId). A bundle groups products for sale together, can be of type 'fixed' or 'optional', and includes additional metadata such as name, description, and position. This retrieval operation is important for displaying bundle details within the context of the owning product, providing information to customers or for editing by authorized sellers/admins.","description":"This API operation fetches the full details of a single product bundle belonging to a specific product. The operation utilizes the shopping_mall_product_bundles table in the Prisma schema, referencing the parent product's unique productId and the bundle's bundleId as URL path parameters.\n\nThe response includes all business-critical metadata for the bundle, such as its display name, type (fixed or optional), description, and the bundle's configured position within the product's bundle sequence. Additionally, related bundle items (composition) and their ordering are typically included in the response object for comprehensive viewing or editing scenarios.\n\nAuthorization is based on requester roles: customers can generally view bundle information for browsing and purchase; sellers may access their own bundles for management; and admins have global read access. Proper permission enforcement ensures that only authorized users can access restricted or draft bundles where business rules apply.\n\nBusiness logic ensures bundles returned by this operation are active and viewable per product status and channel/section scoping. Any error in locating the product or bundle results in a 404 with a clear error message.\n\nThis operation is closely related to bundle creation, update, and deletion endpoints, which manage the lifecycle of bundles under the same product context.","summary":"Retrieve details of a specific product bundle under a product (shopping_mall_product_bundles table).","parameters":[{"name":"productId","description":"ID of the product to which the bundle belongs (UUID, shopping_mall_products.id).","schema":{"type":"string","format":"uuid"}},{"name":"bundleId","description":"Unique identifier of the product bundle (UUID, shopping_mall_product_bundles.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full bundle details for the specified product and bundle ID, including all bundle metadata and composition.","typeName":"IShoppingMallProductBundle"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/shoppingMall/products/{productId}/bundles/{bundleId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before retrieving a specific bundle because the bundle must belong to an existing product."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/bundles","method":"post"},"description":"Bundle must be created for the given product before it can be retrieved by bundleId."}]},{"specification":"This operation creates a new product bundle (fixed or optional) for a given product, as described by the shopping_mall_product_bundles table. Bundles enable sellers to group multiple products together under a single purchasable unit, with specific configuration such as bundle type, description, and composition. Creation of a bundle requires seller or admin authority and validates business rules including uniqueness of bundle name per product and correct schema population for required fields.","description":"This API operation allows authenticated sellers (or admins) to register a new bundle under an existing product. It operates on the shopping_mall_product_bundles table, creating a new record and linking it to the specified product by productId.\n\nThe request body must supply all mandatory fields such as bundle name, type (fixed/optional), description (optionally), and the initial position/order for display. It also enables definition of constituent bundle items, which are subsequently managed via related endpoints.\n\nRole-based permission enforcement ensures only sellers with ownership of the product, or administrators, are authorized to create bundles. Input validation checks for duplicate bundle names for the same product, ensures required fields are present, and that the parent product is in a valid status for editing (e.g., not deleted or discontinued).\n\nOn successful creation, the response returns the newly created bundle object in full detail, as per the shopping_mall_product_bundles schema. Related operations include updating bundles, removing bundles, and adjusting bundle item composition.","summary":"Create a new product bundle for a given product (shopping_mall_product_bundles table).","parameters":[{"name":"productId","description":"ID of the product to which the new bundle will be attached (UUID, shopping_mall_products.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Bundle creation schema including name, type, description, position, and initial composition information.","typeName":"IShoppingMallProductBundle.ICreate"},"responseBody":{"description":"Details of the newly created product bundle including all metadata and assigned ID.","typeName":"IShoppingMallProductBundle"},"authorizationType":null,"authorizationRole":"seller","name":"create","path":"/shoppingMall/seller/products/{productId}/bundles","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before creating a new product bundle, since each bundle is attached to a product via productId."}]},{"specification":"This operation creates a new product bundle (fixed or optional) for a given product, as described by the shopping_mall_product_bundles table. Bundles enable sellers to group multiple products together under a single purchasable unit, with specific configuration such as bundle type, description, and composition. Creation of a bundle requires seller or admin authority and validates business rules including uniqueness of bundle name per product and correct schema population for required fields.","description":"This API operation allows authenticated sellers (or admins) to register a new bundle under an existing product. It operates on the shopping_mall_product_bundles table, creating a new record and linking it to the specified product by productId.\n\nThe request body must supply all mandatory fields such as bundle name, type (fixed/optional), description (optionally), and the initial position/order for display. It also enables definition of constituent bundle items, which are subsequently managed via related endpoints.\n\nRole-based permission enforcement ensures only sellers with ownership of the product, or administrators, are authorized to create bundles. Input validation checks for duplicate bundle names for the same product, ensures required fields are present, and that the parent product is in a valid status for editing (e.g., not deleted or discontinued).\n\nOn successful creation, the response returns the newly created bundle object in full detail, as per the shopping_mall_product_bundles schema. Related operations include updating bundles, removing bundles, and adjusting bundle item composition.","summary":"Create a new product bundle for a given product (shopping_mall_product_bundles table).","parameters":[{"name":"productId","description":"ID of the product to which the new bundle will be attached (UUID, shopping_mall_products.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Bundle creation schema including name, type, description, position, and initial composition information.","typeName":"IShoppingMallProductBundle.ICreate"},"responseBody":{"description":"Details of the newly created product bundle including all metadata and assigned ID.","typeName":"IShoppingMallProductBundle"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/shoppingMall/admin/products/{productId}/bundles","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before a bundle can be registered to it."}]},{"specification":"This operation updates the details or composition of a specific product bundle under a given product. Based on the shopping_mall_product_bundles table, it allows authorized sellers or administrators to change bundle metadata such as its name, type, description, or display order. This operation is protected to prevent unauthorized updates and enforces all business validations for bundle state and parent product status.","description":"This API operation modifies an existing bundle associated with a product, identified by the productId and bundleId path parameters. It modifies the corresponding row in the shopping_mall_product_bundles table, updating fields like name, type, description, or bundle position as provided in the request body.\n\nOnly sellers who own the product or platform admins are authorized to update bundles. Edit permissions are restricted based on business logic, such as bundle status, the product's lifecycle state, and uniqueness constraints for the bundle name within the product. If an attempt is made to update a bundle under a discontinued or deleted product, or with conflicting business rules, the update is rejected with a clear error message.\n\nOn successful update, the full product bundle information is returned in the response, reflecting all changes. The operation works closely with product bundle creation and deletion endpoints for managing the full bundle lifecycle.","summary":"Update details/metadata for a given product's bundle (shopping_mall_product_bundles table).","parameters":[{"name":"productId","description":"ID of the product to which the bundle belongs (UUID, shopping_mall_products.id).","schema":{"type":"string","format":"uuid"}},{"name":"bundleId","description":"Unique identifier of the product bundle (UUID, shopping_mall_product_bundles.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Bundle update schema including updatable fields such as name, type, description, position, or composition.","typeName":"IShoppingMallProductBundle.IUpdate"},"responseBody":{"description":"Updated product bundle object including all current metadata.","typeName":"IShoppingMallProductBundle"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/products/{productId}/bundles/{bundleId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its bundle can be updated."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/bundles","method":"post"},"description":"Product bundle must be created before it can be updated."}]},{"specification":"This operation updates the details or composition of a specific product bundle under a given product. Based on the shopping_mall_product_bundles table, it allows authorized sellers or administrators to change bundle metadata such as its name, type, description, or display order. This operation is protected to prevent unauthorized updates and enforces all business validations for bundle state and parent product status.","description":"This API operation modifies an existing bundle associated with a product, identified by the productId and bundleId path parameters. It modifies the corresponding row in the shopping_mall_product_bundles table, updating fields like name, type, description, or bundle position as provided in the request body.\n\nOnly sellers who own the product or platform admins are authorized to update bundles. Edit permissions are restricted based on business logic, such as bundle status, the product's lifecycle state, and uniqueness constraints for the bundle name within the product. If an attempt is made to update a bundle under a discontinued or deleted product, or with conflicting business rules, the update is rejected with a clear error message.\n\nOn successful update, the full product bundle information is returned in the response, reflecting all changes. The operation works closely with product bundle creation and deletion endpoints for managing the full bundle lifecycle.","summary":"Update details/metadata for a given product's bundle (shopping_mall_product_bundles table).","parameters":[{"name":"productId","description":"ID of the product to which the bundle belongs (UUID, shopping_mall_products.id).","schema":{"type":"string","format":"uuid"}},{"name":"bundleId","description":"Unique identifier of the product bundle (UUID, shopping_mall_product_bundles.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Bundle update schema including updatable fields such as name, type, description, position, or composition.","typeName":"IShoppingMallProductBundle.IUpdate"},"responseBody":{"description":"Updated product bundle object including all current metadata.","typeName":"IShoppingMallProductBundle"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/products/{productId}/bundles/{bundleId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its bundle can be updated."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/bundles","method":"post"},"description":"Product bundle must be created before it can be updated."}]},{"specification":"This operation deletes (soft delete) a specific product bundle belonging to a product, as recorded in the shopping_mall_product_bundles table. The bundle is not physically removed from the database but marked as deleted to preserve audit trails, history, and support rollback/compliance requirements. Only bundles under products owned by the seller or global admin are eligible for deletion. Associated bundle items are typically marked or cascaded accordingly.","description":"This API operation performs a logical deletion (soft delete) of the specified product bundle under a product. Leveraging the deleted_at timestamp on the shopping_mall_product_bundles table, the operation marks the bundle as deleted, maintaining full auditability for compliance and recovery.\n\nOnly the owning seller or administrative users are authorized to perform this action. Business logic guarantees that a bundle may only be deleted when the parent product is in a permissible state and the user has appropriate permissions. Attempting to delete a bundle under a product not owned by the user, or already marked as deleted/discontinued, results in a business logic error.\n\nNo response body is returned on success, but audit logs and bundle history support compliance and rollback needs. This operation is closely connected to bundle update and create endpoints, providing full lifecycle control over product bundles.","summary":"Soft-delete (logically remove) a product bundle under a product (shopping_mall_product_bundles table).","parameters":[{"name":"productId","description":"ID of the product to which the bundle belongs (UUID, shopping_mall_products.id).","schema":{"type":"string","format":"uuid"}},{"name":"bundleId","description":"Unique identifier of the product bundle (UUID, shopping_mall_product_bundles.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/products/{productId}/bundles/{bundleId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its bundle can be deleted."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/bundles","method":"post"},"description":"Product bundle must be created before it can be deleted."}]},{"specification":"This operation deletes (soft delete) a specific product bundle belonging to a product, as recorded in the shopping_mall_product_bundles table. The bundle is not physically removed from the database but marked as deleted to preserve audit trails, history, and support rollback/compliance requirements. Only bundles under products owned by the seller or global admin are eligible for deletion. Associated bundle items are typically marked or cascaded accordingly.","description":"This API operation performs a logical deletion (soft delete) of the specified product bundle under a product. Leveraging the deleted_at timestamp on the shopping_mall_product_bundles table, the operation marks the bundle as deleted, maintaining full auditability for compliance and recovery.\n\nOnly the owning seller or administrative users are authorized to perform this action. Business logic guarantees that a bundle may only be deleted when the parent product is in a permissible state and the user has appropriate permissions. Attempting to delete a bundle under a product not owned by the user, or already marked as deleted/discontinued, results in a business logic error.\n\nNo response body is returned on success, but audit logs and bundle history support compliance and rollback needs. This operation is closely connected to bundle update and create endpoints, providing full lifecycle control over product bundles.","summary":"Soft-delete (logically remove) a product bundle under a product (shopping_mall_product_bundles table).","parameters":[{"name":"productId","description":"ID of the product to which the bundle belongs (UUID, shopping_mall_products.id).","schema":{"type":"string","format":"uuid"}},{"name":"bundleId","description":"Unique identifier of the product bundle (UUID, shopping_mall_product_bundles.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/products/{productId}/bundles/{bundleId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before a bundle belonging to that product can be soft-deleted."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/bundles","method":"post"},"description":"Product bundle must be created before it can be soft-deleted from a product."}]},{"specification":"This operation retrieves a paginated list of tags attached to a specific product identified by its productId. It operates on the shopping_mall_product_tags table from the Prisma schema (Products domain), enabling advanced filtering, searching, and sorting functionality within a product's tag relationship context. The endpoint supports use cases such as listing all tags for a given product, searching for tags by keyword, and reviewing tag metadata for content curation, SEO optimization, and AI-driven recommendation logic. Pagination ensures usability for products with high-volume tagging, and search parameters may match partial tags or support tag groupings for administrative review.","path":"/shoppingMall/seller/products/{productId}/tags","method":"patch","summary":"Search and paginate all tags associated with a specific product (shopping_mall_product_tags).","description":"Retrieve a filtered and paginated list of tags attached to a particular product in the catalog. This operation supports advanced searching by tag value, filtering by tag characteristics, and sorting for administrative or UX needs.\n\nThe operation is secured, allowing only users with at least seller privileges to access tags for their own products or administrators to access any product's tag list for moderation and SEO.\n\nIt utilizes the shopping_mall_product_tags schema, joining to shopping_mall_products for product context and providing tag-level metadata to support downstream recommendation, personalization, or campaign eligibility logic. Pagination, search, and sorting improve performance and scalability for products with many tags.\n\nValidation ensures productId refers to a real and accessible product and that only authorized actors can query or audit tag relationships. Error handling covers invalid productId, permission denials, and query parameter issues.","parameters":[{"name":"productId","description":"Unique identifier (UUID) of the product whose tags are to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, sort, and pagination options for product tag listing.","typeName":"IShoppingMallProductTag.IRequest"},"responseBody":{"description":"Paginated list of product tag summary information matching the requested search criteria.","typeName":"IPageIShoppingMallProductTag.ISummary"},"authorizationType":null,"authorizationRole":"seller","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its associated tags can be searched or paginated."}]},{"specification":"This operation retrieves a paginated list of tags attached to a specific product identified by its productId. It operates on the shopping_mall_product_tags table from the Prisma schema (Products domain), enabling advanced filtering, searching, and sorting functionality within a product's tag relationship context. The endpoint supports use cases such as listing all tags for a given product, searching for tags by keyword, and reviewing tag metadata for content curation, SEO optimization, and AI-driven recommendation logic. Pagination ensures usability for products with high-volume tagging, and search parameters may match partial tags or support tag groupings for administrative review.","path":"/shoppingMall/admin/products/{productId}/tags","method":"patch","summary":"Search and paginate all tags associated with a specific product (shopping_mall_product_tags).","description":"Retrieve a filtered and paginated list of tags attached to a particular product in the catalog. This operation supports advanced searching by tag value, filtering by tag characteristics, and sorting for administrative or UX needs.\n\nThe operation is secured, allowing only users with at least seller privileges to access tags for their own products or administrators to access any product's tag list for moderation and SEO.\n\nIt utilizes the shopping_mall_product_tags schema, joining to shopping_mall_products for product context and providing tag-level metadata to support downstream recommendation, personalization, or campaign eligibility logic. Pagination, search, and sorting improve performance and scalability for products with many tags.\n\nValidation ensures productId refers to a real and accessible product and that only authorized actors can query or audit tag relationships. Error handling covers invalid productId, permission denials, and query parameter issues.","parameters":[{"name":"productId","description":"Unique identifier (UUID) of the product whose tags are to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, sort, and pagination options for product tag listing.","typeName":"IShoppingMallProductTag.IRequest"},"responseBody":{"description":"Paginated list of product tag summary information matching the requested search criteria.","typeName":"IPageIShoppingMallProductTag.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its associated tags can be searched or paginated by an admin."}]},{"specification":"This operation fetches the complete details of a specific tag (by tagId) associated with a given product (by productId). It operates on the shopping_mall_product_tags table (in the Products domain), ensuring the requested tag is linked to the specified product. This is essential for scenarios such as tag-based content auditing, correction, SEO enhancement, and AI-driven recommendation curation, and allows contextual inspection of tag metadata for business logic validation.","path":"/shoppingMall/seller/products/{productId}/tags/{tagId}","method":"get","summary":"Retrieve a detailed view of a single tag for a given product (shopping_mall_product_tags).","description":"Fetch all metadata about a single tag assigned to a product, ensuring the tagId reference is valid and belongs to the specified productId context. This is used for administrative, seller, or automated review workflows, supporting tasks like tag editing, compliance checks, or displaying full tag info to backend systems.\n\nSecurity controls enforce that only sellers of the product or authorized admins can view the tag details. The operation is implemented over the shopping_mall_product_tags table, joining as needed for context.\n\nValidation ensures both productId and tagId are present, correspond to real entities, and tagId is linked to the correct product. Errors are handled for missing or mismatched tag-product relationships, permission issues, or malformed identifiers.","parameters":[{"name":"productId","description":"Unique identifier (UUID) of the product being referenced.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"Unique identifier (UUID) of the tag linked to the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information and business metadata for the requested product tag.","typeName":"IShoppingMallProductTag"},"authorizationType":null,"authorizationRole":"seller","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before any tags can be attached and then retrieved."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/tags","method":"post"},"description":"Product tag must be created for the product before it can be retrieved using its tagId."}]},{"specification":"This operation fetches the complete details of a specific tag (by tagId) associated with a given product (by productId). It operates on the shopping_mall_product_tags table (in the Products domain), ensuring the requested tag is linked to the specified product. This is essential for scenarios such as tag-based content auditing, correction, SEO enhancement, and AI-driven recommendation curation, and allows contextual inspection of tag metadata for business logic validation.","path":"/shoppingMall/admin/products/{productId}/tags/{tagId}","method":"get","summary":"Retrieve a detailed view of a single tag for a given product (shopping_mall_product_tags).","description":"Fetch all metadata about a single tag assigned to a product, ensuring the tagId reference is valid and belongs to the specified productId context. This is used for administrative, seller, or automated review workflows, supporting tasks like tag editing, compliance checks, or displaying full tag info to backend systems.\n\nSecurity controls enforce that only sellers of the product or authorized admins can view the tag details. The operation is implemented over the shopping_mall_product_tags table, joining as needed for context.\n\nValidation ensures both productId and tagId are present, correspond to real entities, and tagId is linked to the correct product. Errors are handled for missing or mismatched tag-product relationships, permission issues, or malformed identifiers.","parameters":[{"name":"productId","description":"Unique identifier (UUID) of the product being referenced.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"Unique identifier (UUID) of the tag linked to the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information and business metadata for the requested product tag.","typeName":"IShoppingMallProductTag"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its tag can be retrieved or queried by tagId."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/tags","method":"post"},"description":"Tag must be created and associated with the specified product before its detailed information can be retrieved by tagId."}]},{"specification":"This operation creates a new tag on a product identified by productId. It inserts a new row into the shopping_mall_product_tags table (Products domain), associating a tag value with the referenced product for use in search, recommendations, SEO, promotions, and filtering logic. Supports validation to prevent duplicates and enforce tag constraints such as naming conventions, length, and character set. Used by sellers for catalog enrichment and by admins for tagging moderation or campaign targeting.","path":"/shoppingMall/seller/products/{productId}/tags","method":"post","summary":"Create and attach a new tag to a specific product (shopping_mall_product_tags).","description":"Add a new tag to the specified product by submitting a tag value through this endpoint. The operation supports business logic for cleaning, normalizing, and validating tag input, including checks for maximum allowed tags per product, uniqueness, forbidden character set, and length limitations as defined in the system. Duplicates are prevented at both database and logic layers.\n\nOnly users authorized as the seller of the product or as administrators can add tags. The new tag is stored in shopping_mall_product_tags, and if successful, the created tag with metadata is returned for further business processing (AI enrichment, search, campaign eligibility).\n\nValidation enforces product existence, permission, and tag constraints; errors are handled for duplicate attempts, permission denials, or malformed input. System logs and audits track all tag creation for compliance and analytics.","parameters":[{"name":"productId","description":"Unique identifier (UUID) of the product to which the tag is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation payload defining the tag value and related business metadata for the product.","typeName":"IShoppingMallProductTag.ICreate"},"responseBody":{"description":"The newly created tag record including value, association metadata, and system-generated fields.","typeName":"IShoppingMallProductTag"},"authorizationType":null,"authorizationRole":"seller","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before a tag can be added to it."}]},{"specification":"This operation creates a new tag on a product identified by productId. It inserts a new row into the shopping_mall_product_tags table (Products domain), associating a tag value with the referenced product for use in search, recommendations, SEO, promotions, and filtering logic. Supports validation to prevent duplicates and enforce tag constraints such as naming conventions, length, and character set. Used by sellers for catalog enrichment and by admins for tagging moderation or campaign targeting.","path":"/shoppingMall/admin/products/{productId}/tags","method":"post","summary":"Create and attach a new tag to a specific product (shopping_mall_product_tags).","description":"Add a new tag to the specified product by submitting a tag value through this endpoint. The operation supports business logic for cleaning, normalizing, and validating tag input, including checks for maximum allowed tags per product, uniqueness, forbidden character set, and length limitations as defined in the system. Duplicates are prevented at both database and logic layers.\n\nOnly users authorized as the seller of the product or as administrators can add tags. The new tag is stored in shopping_mall_product_tags, and if successful, the created tag with metadata is returned for further business processing (AI enrichment, search, campaign eligibility).\n\nValidation enforces product existence, permission, and tag constraints; errors are handled for duplicate attempts, permission denials, or malformed input. System logs and audits track all tag creation for compliance and analytics.","parameters":[{"name":"productId","description":"Unique identifier (UUID) of the product to which the tag is being added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation payload defining the tag value and related business metadata for the product.","typeName":"IShoppingMallProductTag.ICreate"},"responseBody":{"description":"The newly created tag record including value, association metadata, and system-generated fields.","typeName":"IShoppingMallProductTag"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before a tag can be added to it."}]},{"specification":"This operation updates the value and/or business metadata of a tag assigned to a specific product, identified by productId and tagId. It modifies an existing row in shopping_mall_product_tags (Products domain), enforcing strict validation to maintain tag integrity, uniqueness, and compliance with business rules. Used for correcting, re-labeling, or moderating product tags for catalog/search improvement, fraud/abuse response, or campaign eligibility updates.","path":"/shoppingMall/seller/products/{productId}/tags/{tagId}","method":"put","summary":"Update an existing tag on a product (shopping_mall_product_tags) by tagId.","description":"Edit the tag value or its business-related metadata for a given tag attached to a product. This operation allows qualified sellers (owners) or admin users to update tags for purposes such as correcting typos, normalizing naming, supporting new campaigns, or moderating user-generated tagging results. All updates are strictly validated for system business rules: tag uniqueness within the product, name/character constraints, and association integrity. \n\nUpon successful update, the operation returns the full, updated tag record for audit and downstream system usage. Errors are handled for missing product/tag references, permission issues, or tag input violations.\n\nComprehensive audit logs record every change to ensure compliance and enable rollback or traceability as needed for catalog, AI, or regulatory needs.","parameters":[{"name":"productId","description":"Unique identifier (UUID) of the product whose tag is to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"Unique identifier (UUID) of the tag belonging to the product requiring update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload with the new tag value and/or business metadata to apply to the product tag.","typeName":"IShoppingMallProductTag.IUpdate"},"responseBody":{"description":"The updated tag record, reflecting all changes to value and metadata for business processing and system compliance.","typeName":"IShoppingMallProductTag"},"authorizationType":null,"authorizationRole":"seller","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its tag can be updated."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/tags","method":"post"},"description":"Tag must be created for the specified product before it can be updated by tagId."}]},{"specification":"This operation updates the value and/or business metadata of a tag assigned to a specific product, identified by productId and tagId. It modifies an existing row in shopping_mall_product_tags (Products domain), enforcing strict validation to maintain tag integrity, uniqueness, and compliance with business rules. Used for correcting, re-labeling, or moderating product tags for catalog/search improvement, fraud/abuse response, or campaign eligibility updates.","path":"/shoppingMall/admin/products/{productId}/tags/{tagId}","method":"put","summary":"Update an existing tag on a product (shopping_mall_product_tags) by tagId.","description":"Edit the tag value or its business-related metadata for a given tag attached to a product. This operation allows qualified sellers (owners) or admin users to update tags for purposes such as correcting typos, normalizing naming, supporting new campaigns, or moderating user-generated tagging results. All updates are strictly validated for system business rules: tag uniqueness within the product, name/character constraints, and association integrity. \n\nUpon successful update, the operation returns the full, updated tag record for audit and downstream system usage. Errors are handled for missing product/tag references, permission issues, or tag input violations.\n\nComprehensive audit logs record every change to ensure compliance and enable rollback or traceability as needed for catalog, AI, or regulatory needs.","parameters":[{"name":"productId","description":"Unique identifier (UUID) of the product whose tag is to be updated.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"Unique identifier (UUID) of the tag belonging to the product requiring update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload with the new tag value and/or business metadata to apply to the product tag.","typeName":"IShoppingMallProductTag.IUpdate"},"responseBody":{"description":"The updated tag record, reflecting all changes to value and metadata for business processing and system compliance.","typeName":"IShoppingMallProductTag"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its tag can be updated."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/tags","method":"post"},"description":"Tag must be created for the product before it can be updated."}]},{"specification":"Deletes a tag from a specific product in the product catalog. This operation is mapped to the 'shopping_mall_product_tags' table in the Prisma schema. It removes the association between a given product and its tag, permanently deleting the tag record from the database for compliance and business integrity. The endpoint requires both the product ID and the tag ID, both of which must reference existing, valid records; if not, the operation returns an error.","description":"This operation allows an authenticated seller or admin to permanently delete a tag from a target product. Calling this endpoint removes the tag entry linked to the specified product and tagId in the shopping_mall_product_tags table. The tag cannot be recovered once deleted, and all downstream search, recommendation, and AI personalization logic will reflect this change after the operation.\n\nAuthorization is required for either the seller who owns the product or an admin role with sufficient privileges; permission is checked against both the product and tag relationship. Attempting to delete a tag that is not associated with the product will result in an appropriate error response.\n\nThis operation connects tightly to the system's tag-based search and recommendation modules; removing a tag may impact search rankings, product discoverability, and AI-driven personalization. All deletion events are logged for audit and compliance, and only soft-deleted products may have tags removed if their tag records still exist. Use with caution, as deletion is irreversible.","summary":"Permanently remove a tag from a product (shopping_mall_product_tags).","parameters":[{"name":"productId","description":"Unique identifier of the product whose tag is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"Unique identifier of the tag to delete from the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/products/{productId}/tags/{tagId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its tag can be deleted."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/tags","method":"post"},"description":"Tag must be created for the product before it can be deleted."}]},{"specification":"Deletes a tag from a specific product in the product catalog. This operation is mapped to the 'shopping_mall_product_tags' table in the Prisma schema. It removes the association between a given product and its tag, permanently deleting the tag record from the database for compliance and business integrity. The endpoint requires both the product ID and the tag ID, both of which must reference existing, valid records; if not, the operation returns an error.","description":"This operation allows an authenticated seller or admin to permanently delete a tag from a target product. Calling this endpoint removes the tag entry linked to the specified product and tagId in the shopping_mall_product_tags table. The tag cannot be recovered once deleted, and all downstream search, recommendation, and AI personalization logic will reflect this change after the operation.\n\nAuthorization is required for either the seller who owns the product or an admin role with sufficient privileges; permission is checked against both the product and tag relationship. Attempting to delete a tag that is not associated with the product will result in an appropriate error response.\n\nThis operation connects tightly to the system's tag-based search and recommendation modules; removing a tag may impact search rankings, product discoverability, and AI-driven personalization. All deletion events are logged for audit and compliance, and only soft-deleted products may have tags removed if their tag records still exist. Use with caution, as deletion is irreversible.","summary":"Permanently remove a tag from a product (shopping_mall_product_tags).","parameters":[{"name":"productId","description":"Unique identifier of the product whose tag is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"Unique identifier of the tag to delete from the product.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/products/{productId}/tags/{tagId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its tag can be deleted."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/tags","method":"post"},"description":"Tag must be created for the product before it can be deleted."}]},{"specification":"Retrieves the SEO metadata for a specific product. This operation maps onto the 'shopping_mall_product_seo_metadata' table in the Prisma schema. It fetches the full set of SEO fields (meta title, meta description, and meta keywords) for the given product ID. Used for both UI/UX optimization and external search engine visibility.","description":"This operation allows sellers and administrators to retrieve the full SEO configuration for a designated product in the catalog. The response contains the meta title, meta description, and meta keywords, all as maintained in the shopping_mall_product_seo_metadata entity. It supports management UIs, product editing screens, SEO auditing, and external service integrations for auto-update of product metadata on partner platforms.\n\nAccess control is granted to sellers who own the product, as well as to admins with global privilege. The endpoint checks that the specified product exists and that the requester is permitted to view its SEO data. If the product or its SEO metadata record are missing, an appropriate error is returned, and access may be denied for insufficient privileges.\n\nThe operation does not modify any data. It streams the content of the shopping_mall_product_seo_metadata object for the product, supporting preview interfaces, analytics export, and search engine QA. All accesses are logged for audit and legal compliance.","summary":"Retrieve SEO metadata for a given product (shopping_mall_product_seo_metadata).","parameters":[{"name":"productId","description":"Unique identifier of the product whose SEO metadata to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"SEO metadata of the specified product, including meta title, description, and keywords.","typeName":"IShoppingMallProductSeoMetadata"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/products/{productId}/seo","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its SEO metadata can be retrieved."}]},{"specification":"Retrieves the SEO metadata for a specific product. This operation maps onto the 'shopping_mall_product_seo_metadata' table in the Prisma schema. It fetches the full set of SEO fields (meta title, meta description, and meta keywords) for the given product ID. Used for both UI/UX optimization and external search engine visibility.","description":"This operation allows sellers and administrators to retrieve the full SEO configuration for a designated product in the catalog. The response contains the meta title, meta description, and meta keywords, all as maintained in the shopping_mall_product_seo_metadata entity. It supports management UIs, product editing screens, SEO auditing, and external service integrations for auto-update of product metadata on partner platforms.\n\nAccess control is granted to sellers who own the product, as well as to admins with global privilege. The endpoint checks that the specified product exists and that the requester is permitted to view its SEO data. If the product or its SEO metadata record are missing, an appropriate error is returned, and access may be denied for insufficient privileges.\n\nThe operation does not modify any data. It streams the content of the shopping_mall_product_seo_metadata object for the product, supporting preview interfaces, analytics export, and search engine QA. All accesses are logged for audit and legal compliance.","summary":"Retrieve SEO metadata for a given product (shopping_mall_product_seo_metadata).","parameters":[{"name":"productId","description":"Unique identifier of the product whose SEO metadata to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"SEO metadata of the specified product, including meta title, description, and keywords.","typeName":"IShoppingMallProductSeoMetadata"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/products/{productId}/seo","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its SEO metadata can be retrieved."}]},{"specification":"Updates or creates the SEO metadata for a specific product. This operation targets the 'shopping_mall_product_seo_metadata' table and allows modification of the meta title, meta description, and meta keywords. If the SEO metadata does not exist for the product, it is created; otherwise, the record is updated with new data submitted in the request body.","description":"This operation permits an authenticated seller (who owns the product) or admin to upsert SEO metadata for a product. This covers the fields meta_title, meta_description, and meta_keywords according to the business rules defined in the shopping_mall_product_seo_metadata model. The operation validates that the product exists, the requester has permission, and the new metadata is compliant with length, keyword, and formatting requirements.\n\nIf the product does not yet have SEO metadata, a new record is inserted; if one exists, it is updated with the request body contents. On success, the response is the full resulting SEO metadata object. SEO metadata changes are immediately reflected in product search, display, and external SEO integrations; all updates are snapshotted for audit and rollback support.\n\nRelevant errors, such as forbidden fields, permission violations, or non-existent product ID, result in appropriate error responses. The endpoint supports localization, multi-language content as permitted by the catalog configuration, and triggers downstream update notifications for search/SEO services when changes are committed.","summary":"Update or create product SEO metadata (shopping_mall_product_seo_metadata).","parameters":[{"name":"productId","description":"Unique identifier of the product whose SEO metadata is to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"SEO metadata information to be created or updated, including meta title, description, and keywords.","typeName":"IShoppingMallProductSeoMetadata.IUpdate"},"responseBody":{"description":"The updated or newly created SEO metadata for the product.","typeName":"IShoppingMallProductSeoMetadata"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/products/{productId}/seo","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its SEO metadata can be updated or created."}]},{"specification":"Updates or creates the SEO metadata for a specific product. This operation targets the 'shopping_mall_product_seo_metadata' table and allows modification of the meta title, meta description, and meta keywords. If the SEO metadata does not exist for the product, it is created; otherwise, the record is updated with new data submitted in the request body.","description":"This operation permits an authenticated seller (who owns the product) or admin to upsert SEO metadata for a product. This covers the fields meta_title, meta_description, and meta_keywords according to the business rules defined in the shopping_mall_product_seo_metadata model. The operation validates that the product exists, the requester has permission, and the new metadata is compliant with length, keyword, and formatting requirements.\n\nIf the product does not yet have SEO metadata, a new record is inserted; if one exists, it is updated with the request body contents. On success, the response is the full resulting SEO metadata object. SEO metadata changes are immediately reflected in product search, display, and external SEO integrations; all updates are snapshotted for audit and rollback support.\n\nRelevant errors, such as forbidden fields, permission violations, or non-existent product ID, result in appropriate error responses. The endpoint supports localization, multi-language content as permitted by the catalog configuration, and triggers downstream update notifications for search/SEO services when changes are committed.","summary":"Update or create product SEO metadata (shopping_mall_product_seo_metadata).","parameters":[{"name":"productId","description":"Unique identifier of the product whose SEO metadata is to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"SEO metadata information to be created or updated, including meta title, description, and keywords.","typeName":"IShoppingMallProductSeoMetadata.IUpdate"},"responseBody":{"description":"The updated or newly created SEO metadata for the product.","typeName":"IShoppingMallProductSeoMetadata"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/products/{productId}/seo","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before its SEO metadata can be updated or created."}]},{"specification":"Fetches product content details for a specific product. This operation accesses the 'shopping_mall_product_content' table from the Prisma schema, returning all available fields such as formatted description (Markdown or HTML), return and warranty policy, and locale of product content for the designated product ID.","description":"This operation enables sellers and administrators to retrieve rich content data for any product they own or manage. Information such as product description (in Markdown/HTML), return policy, warranty details, and the content locale are all returned as present in the shopping_mall_product_content table. This is used to populate product edit screens, preview product pages, or synchronize product information with external platforms.\n\nAccess checks enforce that the requester is the owner of the product (seller role) or an authorized admin. The operation returns errors in cases of missing product or content, or if the requester lacks sufficient permission. All access to product content is logged for legal, compliance, or audit purposes, and the endpoint does not allow modifications—purely read-only access.\n\nThe operation supports localization: the product content may be localized to support multi-language catalogs. It outputs all configured content for the product, supporting compliance with privacy, legal display, and business QA workflows.","summary":"Retrieve product content for a specific product (shopping_mall_product_content).","parameters":[{"name":"productId","description":"Unique identifier of the product to fetch content for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Product content details (Markdown/HTML, return and warranty policy, locale) for the specified product.","typeName":"IShoppingMallProductContent"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/products/{productId}/content","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must be created before its content can be retrieved."}]},{"specification":"Fetches product content details for a specific product. This operation accesses the 'shopping_mall_product_content' table from the Prisma schema, returning all available fields such as formatted description (Markdown or HTML), return and warranty policy, and locale of product content for the designated product ID.","description":"This operation enables sellers and administrators to retrieve rich content data for any product they own or manage. Information such as product description (in Markdown/HTML), return policy, warranty details, and the content locale are all returned as present in the shopping_mall_product_content table. This is used to populate product edit screens, preview product pages, or synchronize product information with external platforms.\n\nAccess checks enforce that the requester is the owner of the product (seller role) or an authorized admin. The operation returns errors in cases of missing product or content, or if the requester lacks sufficient permission. All access to product content is logged for legal, compliance, or audit purposes, and the endpoint does not allow modifications—purely read-only access.\n\nThe operation supports localization: the product content may be localized to support multi-language catalogs. It outputs all configured content for the product, supporting compliance with privacy, legal display, and business QA workflows.","summary":"Retrieve product content for a specific product (shopping_mall_product_content).","parameters":[{"name":"productId","description":"Unique identifier of the product to fetch content for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Product content details (Markdown/HTML, return and warranty policy, locale) for the specified product.","typeName":"IShoppingMallProductContent"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/products/{productId}/content","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must be created before content can be retrieved for it."}]},{"specification":"This operation allows updating the content (rich product description, return/warranty policy, and locale-specific information) for a specific product identified by productId. It operates on the shopping_mall_product_content table related to the shopping_mall_products entity. The request body must conform to the IShoppingMallProductContent.IUpdate DTO, enabling authorized sellers to update formatted description, multilingual policy, and structured product content fields for a single product within the mall catalog. It does not enable product creation or status changes—only update of existing content.","description":"Update the rich content of a shopping mall product, maintaining full auditability and support for multilingual data, structured product descriptions, return and warranty policy text. This operation enforces permission checks, ensuring that only the product owner (seller) or platform administrators can alter product content. It references the product and content by their unique identifier (productId) as per the Prisma schema, updating only allowable fields—content_markdown, return_policy, warranty_policy, and locale. \n\nAll changes result in snapshotting the prior state for audit and compliance, preserving immutable historical versions as mandated by the platform's evidence management requirements. Security logic ensures rejection of updates for unauthorized users or for products in finalized/immutable states. Validation includes Markdown/HTML correctness, legal compliance for policy fields, and maximum length rules as defined in the database schema. Any invalid update, role violation, or update to a deleted/discontinued product is denied with an appropriate error code and reason in the response. \n\nRelated APIs include creation of product content when registering a new product and retrieval of product content for read operations. This endpoint purely performs update within the bounds of the defined product content schema.","summary":"Update rich content and policies for an existing shoppingMall product by productId.","parameters":[{"name":"productId","description":"Unique identifier of the product being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update product's content (rich description, return/warranty policy, and locale) as per schema.","typeName":"IShoppingMallProductContent.IUpdate"},"responseBody":{"description":"Updated product content details matching shopping mall product content schema.","typeName":"IShoppingMallProductContent"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/seller/products/{productId}/content","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its rich content and policies can be updated."}]},{"specification":"This operation allows updating the content (rich product description, return/warranty policy, and locale-specific information) for a specific product identified by productId. It operates on the shopping_mall_product_content table related to the shopping_mall_products entity. The request body must conform to the IShoppingMallProductContent.IUpdate DTO, enabling authorized sellers to update formatted description, multilingual policy, and structured product content fields for a single product within the mall catalog. It does not enable product creation or status changes—only update of existing content.","description":"Update the rich content of a shopping mall product, maintaining full auditability and support for multilingual data, structured product descriptions, return and warranty policy text. This operation enforces permission checks, ensuring that only the product owner (seller) or platform administrators can alter product content. It references the product and content by their unique identifier (productId) as per the Prisma schema, updating only allowable fields—content_markdown, return_policy, warranty_policy, and locale. \n\nAll changes result in snapshotting the prior state for audit and compliance, preserving immutable historical versions as mandated by the platform's evidence management requirements. Security logic ensures rejection of updates for unauthorized users or for products in finalized/immutable states. Validation includes Markdown/HTML correctness, legal compliance for policy fields, and maximum length rules as defined in the database schema. Any invalid update, role violation, or update to a deleted/discontinued product is denied with an appropriate error code and reason in the response. \n\nRelated APIs include creation of product content when registering a new product and retrieval of product content for read operations. This endpoint purely performs update within the bounds of the defined product content schema.","summary":"Update rich content and policies for an existing shoppingMall product by productId.","parameters":[{"name":"productId","description":"Unique identifier of the product being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update product's content (rich description, return/warranty policy, and locale) as per schema.","typeName":"IShoppingMallProductContent.IUpdate"},"responseBody":{"description":"Updated product content details matching shopping mall product content schema.","typeName":"IShoppingMallProductContent"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/admin/products/{productId}/content","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its rich content and policies can be updated."}]},{"specification":"This operation retrieves a paginated and filterable list of file attachment links associated with a specific product, given by productId, from the shopping_mall_product_attachment_links table. It supports searching, sorting, and paginating large sets of attached files such as images, manuals, or rich media associated with a product. Typical use cases include displaying gallery images, downloadable spec sheets, or related media on product detail screens.","description":"Returns a structured list of all file attachment links belonging to a product identified by productId. This endpoint allows querying, searching by usage context (purpose), sorting (e.g., by display order or created_at), and supporting pagination parameters (such as page size, offset). Returned data includes all relevant attachment metadata, position/order for gallery usage, and URI for secure access.\n\nSecurity checks restrict access to attachments on unpublished or restricted products—authorization roles (seller/admin) are validated against the product's seller ownership or platform administration. Read-only operation—does not allow modification or upload of new files.\n\nThe results conform to the IPageIShoppingMallProductAttachmentLink summary DTO, ensuring compatibility with standardized response containers. Error responses are returned when the product is not found, access is denied, or query parameters are invalid.","summary":"List file attachment links for a shoppingMall product by productId with pagination and search.","parameters":[{"name":"productId","description":"Unique identifier of the product whose attachments are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query and pagination options for listing product attachments (filter by purpose, pagination, sort, etc.).","typeName":"IShoppingMallProductAttachmentLink.IRequest"},"responseBody":{"description":"Paginated list of shopping mall product attachment links with relevant metadata.","typeName":"IPageIShoppingMallProductAttachmentLink.ISummary"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/seller/products/{productId}/attachments","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its file attachment links can be listed."},{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment file must be created before it can be linked/listed for the product."}]},{"specification":"This operation retrieves a paginated and filterable list of file attachment links associated with a specific product, given by productId, from the shopping_mall_product_attachment_links table. It supports searching, sorting, and paginating large sets of attached files such as images, manuals, or rich media associated with a product. Typical use cases include displaying gallery images, downloadable spec sheets, or related media on product detail screens.","description":"Returns a structured list of all file attachment links belonging to a product identified by productId. This endpoint allows querying, searching by usage context (purpose), sorting (e.g., by display order or created_at), and supporting pagination parameters (such as page size, offset). Returned data includes all relevant attachment metadata, position/order for gallery usage, and URI for secure access.\n\nSecurity checks restrict access to attachments on unpublished or restricted products—authorization roles (seller/admin) are validated against the product's seller ownership or platform administration. Read-only operation—does not allow modification or upload of new files.\n\nThe results conform to the IPageIShoppingMallProductAttachmentLink summary DTO, ensuring compatibility with standardized response containers. Error responses are returned when the product is not found, access is denied, or query parameters are invalid.","summary":"List file attachment links for a shoppingMall product by productId with pagination and search.","parameters":[{"name":"productId","description":"Unique identifier of the product whose attachments are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query and pagination options for listing product attachments (filter by purpose, pagination, sort, etc.).","typeName":"IShoppingMallProductAttachmentLink.IRequest"},"responseBody":{"description":"Paginated list of shopping mall product attachment links with relevant metadata.","typeName":"IPageIShoppingMallProductAttachmentLink.ISummary"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/admin/products/{productId}/attachments","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its attachment links can be listed or filtered. This ensures /shoppingMall/admin/products/{productId}/attachments returns valid attachment associations for a real product."},{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment must exist before it can be referenced or filtered in product attachment links listing. Without an uploaded file, a product cannot have an attachment link."}]},{"specification":"This operation retrieves a single product attachment link and associated metadata for a specific product, given a productId and attachmentLinkId, from the shopping_mall_product_attachment_links table. It allows sellers and administrators to access file linkage info—such as gallery images, documents, or spec files—for display, deletion, or audit purposes.","description":"Retrieve the detailed metadata for a specific product attachment link, including file purpose (e.g., main_image, gallery), order, relation to the product, and secure file reference. This endpoint enforces permission checks, allowing only the product's seller or administrators to access this information. The Prisma schema ensures that each attachment link record is associated with a product and contains metadata for the file, including reference to the underlying attachment.\n\nSecurity checks confirm the existence of both the product and attachment link, enforcing error returns for unauthorized access, non-existent IDs, or attempts to access attachments on deleted/discontinued products. Related endpoints allow batch listing or modification of attachment links per product. No file content is returned—this endpoint is purely for metadata and linkage info.\n\nIf the specified attachment link does not exist, an appropriate error message and code are returned. Use this operation to display detailed info in admin/product management screens or prepare for file delete/update actions.","summary":"Get metadata for a specific product attachment link for a shoppingMall product by productId and attachmentLinkId.","parameters":[{"name":"productId","description":"Unique identifier of the product whose attachment is being accessed.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentLinkId","description":"Unique identifier of the attachment link to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed info for the requested product attachment link, matching the schema.","typeName":"IShoppingMallProductAttachmentLink"},"authorizationRoles":["seller","admin"],"name":"at","path":"/shoppingMall/seller/products/{productId}/attachments/{attachmentLinkId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before a specific attachment link for that product can be retrieved. The attachmentLinkId is only meaningful in the context of a real, existing product."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/attachments","method":"post"},"description":"Attachment link must exist for the product before it can be retrieved by ID. This ensures the attachmentLinkId represents a valid product-attachment relationship."}]},{"specification":"This operation retrieves a single product attachment link and associated metadata for a specific product, given a productId and attachmentLinkId, from the shopping_mall_product_attachment_links table. It allows sellers and administrators to access file linkage info—such as gallery images, documents, or spec files—for display, deletion, or audit purposes.","description":"Retrieve the detailed metadata for a specific product attachment link, including file purpose (e.g., main_image, gallery), order, relation to the product, and secure file reference. This endpoint enforces permission checks, allowing only the product's seller or administrators to access this information. The Prisma schema ensures that each attachment link record is associated with a product and contains metadata for the file, including reference to the underlying attachment.\n\nSecurity checks confirm the existence of both the product and attachment link, enforcing error returns for unauthorized access, non-existent IDs, or attempts to access attachments on deleted/discontinued products. Related endpoints allow batch listing or modification of attachment links per product. No file content is returned—this endpoint is purely for metadata and linkage info.\n\nIf the specified attachment link does not exist, an appropriate error message and code are returned. Use this operation to display detailed info in admin/product management screens or prepare for file delete/update actions.","summary":"Get metadata for a specific product attachment link for a shoppingMall product by productId and attachmentLinkId.","parameters":[{"name":"productId","description":"Unique identifier of the product whose attachment is being accessed.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentLinkId","description":"Unique identifier of the attachment link to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed info for the requested product attachment link, matching the schema.","typeName":"IShoppingMallProductAttachmentLink"},"authorizationRoles":["seller","admin"],"name":"at","path":"/shoppingMall/admin/products/{productId}/attachments/{attachmentLinkId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before a specific attachment link for that product can be retrieved. The attachmentLinkId is only valid for an existing product."},{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/attachments","method":"post"},"description":"Attachment link must exist for the product before it can be returned by this endpoint. Without a created link, details cannot be retrieved."}]},{"specification":"This operation creates a new attachment link for a specified product, associating a previously uploaded file (from shopping_mall_attachments) with a product for purposes such as gallery, thumbnail, or spec documentation. It operates on the shopping_mall_product_attachment_links table. Sellers and admins can use this endpoint to add images, files, or rich media assets to product detail displays, controlling slot/purpose and ordering.","description":"Create a new association between an existing file attachment and a product. The endpoint requires the caller to specify the productId, attachmentId, usage context (purpose), and position/order. The underlying Prisma schema ensures referential integrity to both product and attachment and enforces uniqueness for each attachment-per-purpose combination.\n\nPermission logic ensures that only the product's seller or administrators may add attachment links to a product. The request body is validated against the IShoppingMallProductAttachmentLink.ICreate DTO, including checks that the product exists, the attachment is valid, and that no conflicting links for the same purpose exist for the target product. Upon success, the response contains the newly created attachment link metadata, referencing both the product and the attachment details.\n\nIf any referenced entity does not exist, or permission is insufficient, a comprehensive error message is returned. This does NOT upload the file itself; it only establishes linkage between product and an already registered attachment file.","summary":"Add a new attachment link (image, gallery, or file) to a shoppingMall product by productId.","parameters":[{"name":"productId","description":"Unique identifier for the product to which the attachment will be linked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment link creation data for associating existing attachments to a product as gallery, spec sheet, etc.","typeName":"IShoppingMallProductAttachmentLink.ICreate"},"responseBody":{"description":"The created product attachment link metadata and relationship info.","typeName":"IShoppingMallProductAttachmentLink"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/seller/products/{productId}/attachments","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before an attachment link can be associated with it. The attachment link requires a product context for the relationship to be created."},{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment (file) must be uploaded to the system before it can be linked to a product. Linking is not possible until the file resource exists."}]},{"specification":"This operation creates a new attachment link for a specified product, associating a previously uploaded file (from shopping_mall_attachments) with a product for purposes such as gallery, thumbnail, or spec documentation. It operates on the shopping_mall_product_attachment_links table. Sellers and admins can use this endpoint to add images, files, or rich media assets to product detail displays, controlling slot/purpose and ordering.","description":"Create a new association between an existing file attachment and a product. The endpoint requires the caller to specify the productId, attachmentId, usage context (purpose), and position/order. The underlying Prisma schema ensures referential integrity to both product and attachment and enforces uniqueness for each attachment-per-purpose combination.\n\nPermission logic ensures that only the product's seller or administrators may add attachment links to a product. The request body is validated against the IShoppingMallProductAttachmentLink.ICreate DTO, including checks that the product exists, the attachment is valid, and that no conflicting links for the same purpose exist for the target product. Upon success, the response contains the newly created attachment link metadata, referencing both the product and the attachment details.\n\nIf any referenced entity does not exist, or permission is insufficient, a comprehensive error message is returned. This does NOT upload the file itself; it only establishes linkage between product and an already registered attachment file.","summary":"Add a new attachment link (image, gallery, or file) to a shoppingMall product by productId.","parameters":[{"name":"productId","description":"Unique identifier for the product to which the attachment will be linked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment link creation data for associating existing attachments to a product as gallery, spec sheet, etc.","typeName":"IShoppingMallProductAttachmentLink.ICreate"},"responseBody":{"description":"The created product attachment link metadata and relationship info.","typeName":"IShoppingMallProductAttachmentLink"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/admin/products/{productId}/attachments","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can have an attachment linked to it."},{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment file must exist before it can be linked to a product."}]},{"specification":"This operation deletes an attachment link for a specific product. It interacts with the shopping_mall_product_attachment_links table, utilizing the provided productId and attachmentLinkId to identify the appropriate row. This operation permanently removes the linkage between the given product and its attachment. The product and attachment themselves remain in the database; only their relationship is deleted. All deletions are subject to audit trail logic as outlined in the requirements. Permissions and proper authorization must be enforced to restrict access to rightful owners (sellers) or admins. The deletion will not affect other product-attachment links for the same product or attachment. The operation is a hard delete, as there is no soft-delete column for the link in the Prisma schema.","description":"This endpoint provides the ability to sever the association between a specific product and an attachment by deleting a row from the shopping_mall_product_attachment_links table. Consistent with business rules, this deletion is limited to authorized actors: product owners (sellers) of the relevant product or administrators with suitable privileges.\n\nSecurity and audit are critical: each action is logged for compliance, and attempts by unauthorized actors are denied with actionable error messages. The operation does not affect the underlying attachment file, nor does it alter or remove the product entity—only the join link between them is targeted. Requests must supply both a valid productId and an attachmentLinkId as path parameters, both in UUID format.\n\nThere is no soft-delete for links in the schema, so this operation performs a permanent removal. Since the action potentially affects evidence preservation, downstream Audit and Snapshot workflows must be considered for compliance. Related operations include adding new product/attachment links or listing current attachments for a product, which allow users to manage media associations effectively. In case of database integrity or constraint errors, appropriate error messages are surfaced, and no partial deletions are performed.","summary":"Delete a specific product-attachment link for a product (shopping_mall_product_attachment_links table).","parameters":[{"name":"productId","description":"Unique identifier of the product from which to remove the attachment link.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentLinkId","description":"Unique identifier of the attachment link to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/seller/products/{productId}/attachments/{attachmentLinkId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its attachment link can be deleted."}]},{"specification":"This operation deletes an attachment link for a specific product. It interacts with the shopping_mall_product_attachment_links table, utilizing the provided productId and attachmentLinkId to identify the appropriate row. This operation permanently removes the linkage between the given product and its attachment. The product and attachment themselves remain in the database; only their relationship is deleted. All deletions are subject to audit trail logic as outlined in the requirements. Permissions and proper authorization must be enforced to restrict access to rightful owners (sellers) or admins. The deletion will not affect other product-attachment links for the same product or attachment. The operation is a hard delete, as there is no soft-delete column for the link in the Prisma schema.","description":"This endpoint provides the ability to sever the association between a specific product and an attachment by deleting a row from the shopping_mall_product_attachment_links table. Consistent with business rules, this deletion is limited to authorized actors: product owners (sellers) of the relevant product or administrators with suitable privileges.\n\nSecurity and audit are critical: each action is logged for compliance, and attempts by unauthorized actors are denied with actionable error messages. The operation does not affect the underlying attachment file, nor does it alter or remove the product entity—only the join link between them is targeted. Requests must supply both a valid productId and an attachmentLinkId as path parameters, both in UUID format.\n\nThere is no soft-delete for links in the schema, so this operation performs a permanent removal. Since the action potentially affects evidence preservation, downstream Audit and Snapshot workflows must be considered for compliance. Related operations include adding new product/attachment links or listing current attachments for a product, which allow users to manage media associations effectively. In case of database integrity or constraint errors, appropriate error messages are surfaced, and no partial deletions are performed.","summary":"Delete a specific product-attachment link for a product (shopping_mall_product_attachment_links table).","parameters":[{"name":"productId","description":"Unique identifier of the product from which to remove the attachment link.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentLinkId","description":"Unique identifier of the attachment link to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/admin/products/{productId}/attachments/{attachmentLinkId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its attachment link can be deleted."}]},{"specification":"This operation retrieves a paginated and filtered list of shopping carts for the platform, supporting advanced search by customer, channel, section, status, and date range. It operates on the shopping_mall_carts table and is designed to enable sellers, admins, or customers (with ownership) to perform complex queries for business monitoring, analytics, and workflow integration.","description":"This endpoint allows users to obtain a filtered and paginated list of carts from the shopping_mall_carts table. Leveraging advanced request parameters, users can search across key cart metadata including customer, channel, section, cart status (active, expired, checked_out, deleted), source type, or expiration window. \n\nPagination and sorting options are available to ensure that large datasets can be retrieved efficiently, with sensible defaults for items per page and limit caps to prevent abuse. Security and privacy are critical: customers may only view their own carts, while admins and potentially sellers (if allowed by business policy) may filter by additional dimensions, subject to proper authorization. Sensitive or deleted carts are masked or inaccessible as required.\n\nThis endpoint is designed for integration in admin panels, seller UIs, or customer dashboards, supporting operational needs such as cart monitoring, intervention, or analytics. It interoperates with cart detail (GET /carts/{cartId}) and cart update/creation endpoints. Error handling includes invalid parameter values, unauthorized access, or exceeding page size limits.","summary":"Search, filter, and paginate shopping carts for business monitoring or customer dashboard (shopping_mall_carts table).","parameters":[],"requestBody":{"description":"Filter and pagination request for listing and searching shopping carts.","typeName":"IShoppingMallCart.IRequest"},"responseBody":{"description":"Paginated response of matching shopping carts with summary metadata.","typeName":"IPageIShoppingMallCart.ISummary"},"authorizationRoles":["customer","admin"],"name":"index","path":"/shoppingMall/customer/carts","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"Shopping mall channel must exist before carts can be searched for that channel."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"Shopping mall section must exist within the channel before carts can be searched for that section."}]},{"specification":"This operation retrieves a paginated and filtered list of shopping carts for the platform, supporting advanced search by customer, channel, section, status, and date range. It operates on the shopping_mall_carts table and is designed to enable sellers, admins, or customers (with ownership) to perform complex queries for business monitoring, analytics, and workflow integration.","description":"This endpoint allows users to obtain a filtered and paginated list of carts from the shopping_mall_carts table. Leveraging advanced request parameters, users can search across key cart metadata including customer, channel, section, cart status (active, expired, checked_out, deleted), source type, or expiration window. \n\nPagination and sorting options are available to ensure that large datasets can be retrieved efficiently, with sensible defaults for items per page and limit caps to prevent abuse. Security and privacy are critical: customers may only view their own carts, while admins and potentially sellers (if allowed by business policy) may filter by additional dimensions, subject to proper authorization. Sensitive or deleted carts are masked or inaccessible as required.\n\nThis endpoint is designed for integration in admin panels, seller UIs, or customer dashboards, supporting operational needs such as cart monitoring, intervention, or analytics. It interoperates with cart detail (GET /carts/{cartId}) and cart update/creation endpoints. Error handling includes invalid parameter values, unauthorized access, or exceeding page size limits.","summary":"Search, filter, and paginate shopping carts for business monitoring or customer dashboard (shopping_mall_carts table).","parameters":[],"requestBody":{"description":"Filter and pagination request for listing and searching shopping carts.","typeName":"IShoppingMallCart.IRequest"},"responseBody":{"description":"Paginated response of matching shopping carts with summary metadata.","typeName":"IPageIShoppingMallCart.ISummary"},"authorizationRoles":["customer","admin"],"name":"index","path":"/shoppingMall/admin/carts","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must exist to be listed in search and pagination results. Creating a cart ensures that search operations can return at least one cart for a given customer, channel, or section."}]},{"specification":"This operation retrieves the details of a specific shopping cart by cartId. It operates on the shopping_mall_carts table, returning all relevant cart information, including associated items, products, customer, and status. This enables customers to view the current state of a cart, which is critical for shopping continuity, validation prior to order conversion, and support scenarios.","description":"This endpoint allows an authenticated customer or an admin to retrieve the full details of a specific cart instance using its unique cartId. The response includes all cart metadata (customer, channel, section, status, expiration), as well as the full composition of cart items, product references, quantities, option snapshots, and last update timestamps. \n\nSecurity is pivotal: only the cart owner (customer) or administrators are permitted to use this operation; other requests are denied. Sensitive fields (such as deleted status or expired carts) may be masked as per business logic. This endpoint forms the foundation for cart viewing, real-time cart validation, and pre-checkout workflows.\n\nError scenarios include requesting non-existent carts, permission violations, or attempting to view a cart that has been deleted or expired. This operation interlinks with other cart APIs, including retrieval via search (PATCH /carts), cart modification or deletion, and conversion to order submission. Proper audit logging is expected for compliance.","summary":"Retrieve detailed information for a specific shopping cart (shopping_mall_carts table).","parameters":[{"name":"cartId","description":"Unique identifier of the shopping cart to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping cart information and associated items.","typeName":"IShoppingMallCart"},"authorizationRoles":["customer","admin"],"name":"at","path":"/shoppingMall/customer/carts/{cartId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must be created before it can be retrieved by cartId. Creating a cart ensures the cartId reference points to an existing cart."}]},{"specification":"This operation retrieves the details of a specific shopping cart by cartId. It operates on the shopping_mall_carts table, returning all relevant cart information, including associated items, products, customer, and status. This enables customers to view the current state of a cart, which is critical for shopping continuity, validation prior to order conversion, and support scenarios.","description":"This endpoint allows an authenticated customer or an admin to retrieve the full details of a specific cart instance using its unique cartId. The response includes all cart metadata (customer, channel, section, status, expiration), as well as the full composition of cart items, product references, quantities, option snapshots, and last update timestamps. \n\nSecurity is pivotal: only the cart owner (customer) or administrators are permitted to use this operation; other requests are denied. Sensitive fields (such as deleted status or expired carts) may be masked as per business logic. This endpoint forms the foundation for cart viewing, real-time cart validation, and pre-checkout workflows.\n\nError scenarios include requesting non-existent carts, permission violations, or attempting to view a cart that has been deleted or expired. This operation interlinks with other cart APIs, including retrieval via search (PATCH /carts), cart modification or deletion, and conversion to order submission. Proper audit logging is expected for compliance.","summary":"Retrieve detailed information for a specific shopping cart (shopping_mall_carts table).","parameters":[{"name":"cartId","description":"Unique identifier of the shopping cart to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shopping cart information and associated items.","typeName":"IShoppingMallCart"},"authorizationRoles":["customer","admin"],"name":"at","path":"/shoppingMall/admin/carts/{cartId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must be created before it can be retrieved by cartId. Creating a cart ensures the cartId reference points to an existing cart."}]},{"specification":"This operation creates a new shopping cart instance in the shopping_mall_carts table. It accepts all required metadata for cart initialization, such as customer, channel, section, source type, and initial status. Upon successful creation, it returns the details of the created cart. This is foundational for starting a new shopping or checkout workflow, supporting both guest and registered customers.","description":"This endpoint provides the ability to initialize a new shopping cart entity for an authenticated or guest customer. Submitted parameters must include all required cart metadata—customer identity, the sales channel and section, source type (guest, member, etc), and optionally initial cart items. The cart is created with an active or initial status, and its expiration is set according to business policy.\n\nAll input is validated: channels and sections must exist, customers must be legitimate or guest sessions must be accepted by policy, and initial cart item info (if present) must conform to schema and stock rules. Security rules enforce that customers can only create carts for themselves (or their guest device), while admins may create carts on behalf of any customer for operational or support tasks.\n\nUpon successful creation, the full cart details are returned so the client can proceed with add-to-cart, checkout, or further cart manipulation. Failure scenarios include validation errors with input fields, unauthorized attempts to create carts for other customers, or foreign key constraint violations. This operation interrelates with cart listing and cart detail APIs, supporting a seamless shopping experience.","summary":"Create a new shopping cart (shopping_mall_carts table).","parameters":[],"requestBody":{"description":"Cart creation request including all required metadata (customer, channel, section, etc).","typeName":"IShoppingMallCart.ICreate"},"responseBody":{"description":"Details of the newly created cart instance.","typeName":"IShoppingMallCart"},"authorizationRoles":["customer","admin"],"name":"create","path":"/shoppingMall/customer/carts","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new shopping cart instance in the shopping_mall_carts table. It accepts all required metadata for cart initialization, such as customer, channel, section, source type, and initial status. Upon successful creation, it returns the details of the created cart. This is foundational for starting a new shopping or checkout workflow, supporting both guest and registered customers.","description":"This endpoint provides the ability to initialize a new shopping cart entity for an authenticated or guest customer. Submitted parameters must include all required cart metadata—customer identity, the sales channel and section, source type (guest, member, etc), and optionally initial cart items. The cart is created with an active or initial status, and its expiration is set according to business policy.\n\nAll input is validated: channels and sections must exist, customers must be legitimate or guest sessions must be accepted by policy, and initial cart item info (if present) must conform to schema and stock rules. Security rules enforce that customers can only create carts for themselves (or their guest device), while admins may create carts on behalf of any customer for operational or support tasks.\n\nUpon successful creation, the full cart details are returned so the client can proceed with add-to-cart, checkout, or further cart manipulation. Failure scenarios include validation errors with input fields, unauthorized attempts to create carts for other customers, or foreign key constraint violations. This operation interrelates with cart listing and cart detail APIs, supporting a seamless shopping experience.","summary":"Create a new shopping cart (shopping_mall_carts table).","parameters":[],"requestBody":{"description":"Cart creation request including all required metadata (customer, channel, section, etc).","typeName":"IShoppingMallCart.ICreate"},"responseBody":{"description":"Details of the newly created cart instance.","typeName":"IShoppingMallCart"},"authorizationRoles":["customer","admin"],"name":"create","path":"/shoppingMall/admin/carts","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"Customer cart must exist as a related resource before an admin cart can be created, since creating an admin cart requires valid customer, channel, and section references."}]},{"specification":"This operation updates the content and details of a specific shopping cart, identified by its unique cartId. It allows users to modify the cart's state, such as adjusting the linked section, channel, or cart status, supporting actions like changing the shopping context or reactivating an expired cart. The operation is rooted in the shopping_mall_carts table and enforces that only the owner customer or authorized admin can perform modifications. All updates are audit-trailed for compliance and rollback. This operation does not update cart items themselves, only the cart metadata, and supports validation of session, cart state, and soft deletion logic.","description":"This endpoint enables customers or authorized admin roles to update the details of an existing shopping cart. Typical uses include changing the associated channel or section (such as after switching store context), refreshing cart status (such as from expired to active if business logic permits), or updating session metadata. The action is restricted to the authenticated cart owner or authorized personnel, ensuring that carts cannot be arbitrarily moved between users or accessed without proper session.\n\nAll updates are performed as hard-state changes (not soft-delete) and trigger a compliance audit record. If the cart status is set to 'deleted', the deleted_at timestamp will be populated for soft deletion in line with compliance policies. Other fields, like source or expires_at, can also be updated per business logic. Validation ensures that session context, customer ownership, and cart activity state are enforced.\n\nError handling returns meaningful messages for scenarios such as non-existent cartId, trying to update an already-deleted cart, or a user attempting to modify a cart they do not own. This integrates with the Prisma shopping_mall_carts schema and its authorization logic.","summary":"Update the metadata and state of a shopping cart record (shopping_mall_carts).","parameters":[{"name":"cartId","description":"Unique identifier of the cart to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated metadata and state values for the cart. Only cart-level fields can be changed; cart items require different endpoints.","typeName":"IShoppingMallCart.IUpdate"},"responseBody":{"description":"The updated cart object with current metadata and status after modification.","typeName":"IShoppingMallCart"},"authorizationType":null,"authorizationRole":"customer","name":"update","path":"/shoppingMall/customer/carts/{cartId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"Cart must be created before its metadata or state can be updated."}]},{"specification":"This operation updates the content and details of a specific shopping cart, identified by its unique cartId. It allows users to modify the cart's state, such as adjusting the linked section, channel, or cart status, supporting actions like changing the shopping context or reactivating an expired cart. The operation is rooted in the shopping_mall_carts table and enforces that only the owner customer or authorized admin can perform modifications. All updates are audit-trailed for compliance and rollback. This operation does not update cart items themselves, only the cart metadata, and supports validation of session, cart state, and soft deletion logic.","description":"This endpoint enables customers or authorized admin roles to update the details of an existing shopping cart. Typical uses include changing the associated channel or section (such as after switching store context), refreshing cart status (such as from expired to active if business logic permits), or updating session metadata. The action is restricted to the authenticated cart owner or authorized personnel, ensuring that carts cannot be arbitrarily moved between users or accessed without proper session.\n\nAll updates are performed as hard-state changes (not soft-delete) and trigger a compliance audit record. If the cart status is set to 'deleted', the deleted_at timestamp will be populated for soft deletion in line with compliance policies. Other fields, like source or expires_at, can also be updated per business logic. Validation ensures that session context, customer ownership, and cart activity state are enforced.\n\nError handling returns meaningful messages for scenarios such as non-existent cartId, trying to update an already-deleted cart, or a user attempting to modify a cart they do not own. This integrates with the Prisma shopping_mall_carts schema and its authorization logic.","summary":"Update the metadata and state of a shopping cart record (shopping_mall_carts).","parameters":[{"name":"cartId","description":"Unique identifier of the cart to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated metadata and state values for the cart. Only cart-level fields can be changed; cart items require different endpoints.","typeName":"IShoppingMallCart.IUpdate"},"responseBody":{"description":"The updated cart object with current metadata and status after modification.","typeName":"IShoppingMallCart"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/carts/{cartId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/carts","method":"post"},"description":"Cart must be created before its metadata or state can be updated."}]},{"specification":"This operation logically deletes (soft deletes) a shopping cart identified by its unique cartId, marking it as deleted for compliance and audit history. The endpoint acts on the shopping_mall_carts table, setting the deleted_at timestamp according to soft-deletion policies described in the schema. Only the cart owner (customer) or an admin is allowed to perform this action, with attempt logging and permissions checks. Cart items are not deleted but follow the cart's logical removal, preserving for legal and recovery purposes.","description":"This API endpoint allows an authenticated user or admin to logically delete a cart, marking it as deleted rather than removing it from the database outright. This aligns with regulatory compliance, audit needs, and the platform's evidence trail policies. Only users with ownership of the cart or those with administrative privileges can perform this operation.\n\nUpon successful execution, the deleted_at timestamp of the shopping_mall_carts row is set to the current time. Cart items remain unchanged, but the cart's status is updated and it is hidden from active lists in the UI. Associated cart snapshots or order data remain accessible according to permission controls and are unaffected. Error scenarios include attempts to delete an already-deleted cart, non-existent cartId, or lack of permission based on user context.\n\nThis API is tightly integrated into the legal and business logic of cart management, evidence retention, and recoverability, as described in the Prisma schema's comments.","summary":"Soft delete a shopping cart by cartId (shopping_mall_carts, soft delete).","parameters":[{"name":"cartId","description":"Unique identifier of the cart to be logically deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/carts/{cartId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"Cart must be created before it can be logically deleted (soft delete)."}]},{"specification":"This operation logically deletes (soft deletes) a shopping cart identified by its unique cartId, marking it as deleted for compliance and audit history. The endpoint acts on the shopping_mall_carts table, setting the deleted_at timestamp according to soft-deletion policies described in the schema. Only the cart owner (customer) or an admin is allowed to perform this action, with attempt logging and permissions checks. Cart items are not deleted but follow the cart's logical removal, preserving for legal and recovery purposes.","description":"This API endpoint allows an authenticated user or admin to logically delete a cart, marking it as deleted rather than removing it from the database outright. This aligns with regulatory compliance, audit needs, and the platform's evidence trail policies. Only users with ownership of the cart or those with administrative privileges can perform this operation.\n\nUpon successful execution, the deleted_at timestamp of the shopping_mall_carts row is set to the current time. Cart items remain unchanged, but the cart's status is updated and it is hidden from active lists in the UI. Associated cart snapshots or order data remain accessible according to permission controls and are unaffected. Error scenarios include attempts to delete an already-deleted cart, non-existent cartId, or lack of permission based on user context.\n\nThis API is tightly integrated into the legal and business logic of cart management, evidence retention, and recoverability, as described in the Prisma schema's comments.","summary":"Soft delete a shopping cart by cartId (shopping_mall_carts, soft delete).","parameters":[{"name":"cartId","description":"Unique identifier of the cart to be logically deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/carts/{cartId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/carts","method":"post"},"description":"Cart must be created before it can be logically deleted."}]},{"specification":"This operation retrieves a paginated, filterable list of cart items within a given cart, supporting advanced search, sorting, and batch visibility logic. It performs on the shopping_mall_cart_items table, scoped to a particular cartId. Supports filtering by product, variant, status, or time, as well as custom batch or organizational metadata for bulk processing. This endpoint is used to list and manage items in a user's session cart, ensuring only the owner or authorized roles have access.","description":"Retrieves the complete list of items currently held within a specific shopping cart, enabling the customer or authorized admin roles to see, search, sort, or paginate through the cart's contents. Advanced filtering can be applied based on product or variant, added time, or grouping labels when batch features are enabled.\n\nThe list is always scoped to a single cart via cartId, guaranteeing isolation and privacy between different users' carts. The operation integrates deep business rules, ensuring real-time item data consistency with catalog status, inventory, or product updates (e.g., out-of-stock products appear as inactive items). Results can support batch selection (for example, for mass removal or checkout), with UI-level pagination and sorting options.\n\nThis endpoint ties directly into the cart/checkout workflow and supports personalization/AI modules by providing comprehensive insight into in-session cart activity. Error cases include invalid cartId, unauthorized access, or filtering by fields that do not exist on cart items.","summary":"List and search all items in a specific cart (paginated, filterable; shopping_mall_cart_items).","parameters":[{"name":"cartId","description":"Unique identifier for the cart whose items are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and paging parameters for the cart items within the given cart.","typeName":"IShoppingMallCartItem.IRequest"},"responseBody":{"description":"A paginated list of cart item records matching the filter/paging/ownership context.","typeName":"IPageIShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"customer","name":"index","path":"/shoppingMall/customer/carts/{cartId}/items","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"Cart must be created before its items can be listed or searched."},{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"Cart must contain items before items can be listed."}]},{"specification":"This operation retrieves a paginated, filterable list of cart items within a given cart, supporting advanced search, sorting, and batch visibility logic. It performs on the shopping_mall_cart_items table, scoped to a particular cartId. Supports filtering by product, variant, status, or time, as well as custom batch or organizational metadata for bulk processing. This endpoint is used to list and manage items in a user's session cart, ensuring only the owner or authorized roles have access.","description":"Retrieves the complete list of items currently held within a specific shopping cart, enabling the customer or authorized admin roles to see, search, sort, or paginate through the cart's contents. Advanced filtering can be applied based on product or variant, added time, or grouping labels when batch features are enabled.\n\nThe list is always scoped to a single cart via cartId, guaranteeing isolation and privacy between different users' carts. The operation integrates deep business rules, ensuring real-time item data consistency with catalog status, inventory, or product updates (e.g., out-of-stock products appear as inactive items). Results can support batch selection (for example, for mass removal or checkout), with UI-level pagination and sorting options.\n\nThis endpoint ties directly into the cart/checkout workflow and supports personalization/AI modules by providing comprehensive insight into in-session cart activity. Error cases include invalid cartId, unauthorized access, or filtering by fields that do not exist on cart items.","summary":"List and search all items in a specific cart (paginated, filterable; shopping_mall_cart_items).","parameters":[{"name":"cartId","description":"Unique identifier for the cart whose items are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and paging parameters for the cart items within the given cart.","typeName":"IShoppingMallCartItem.IRequest"},"responseBody":{"description":"A paginated list of cart item records matching the filter/paging/ownership context.","typeName":"IPageIShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/carts/{cartId}/items","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/carts","method":"post"},"description":"Cart must be created before its items can be listed or searched."}]},{"specification":"This operation retrieves detailed information on a specific cart item within a given shopping cart by cartItemId, scoped under the parent cartId. It acts on the shopping_mall_cart_items table, returning full business, product, and option metadata for the requested item. Only the owner of the cart (customer) or an authorized admin may use this endpoint. All item and product state checks are enforced, and responses include real-time data for inventory, variant, and price for checkout validation.","description":"Fetches full details for a single item within a user's cart, using both cartId and cartItemId to guarantee ownership and path-union context. The returned information covers core relationships: the product, selected variant, quantity, and relevant option/variant selections, along with the added timestamp and current status (including inactive or invalid if product status changed since addition).\n\nSecurity and business requirements ensure that only the owner or authorized admin roles may access this resource. The endpoint returns up-to-date product and variant metadata reflecting any catalog status, price, or availability changes at the time of request—critical for checkout validation. Error handling addresses cases such as missing or deleted cart or item, or cross-user access attempts.\n\nThis endpoint is an integral part of user session and checkout flows, supporting UI and personalization logic, and adheres closely to shopping_mall_cart_items table constraints documented in the Prisma schema.","summary":"Retrieve a single cart item with product and variant detail (shopping_mall_cart_items).","parameters":[{"name":"cartId","description":"Parent cart ID for ownership and access scoping.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Cart item ID to identify the record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specific cart item, including all selection, product, and variant fields.","typeName":"IShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/carts/{cartId}/items/{cartItemId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"Cart must be created before a cart item can be retrieved."},{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"Cart item must exist in the cart before its details can be retrieved."}]},{"specification":"This operation retrieves detailed information on a specific cart item within a given shopping cart by cartItemId, scoped under the parent cartId. It acts on the shopping_mall_cart_items table, returning full business, product, and option metadata for the requested item. Only the owner of the cart (customer) or an authorized admin may use this endpoint. All item and product state checks are enforced, and responses include real-time data for inventory, variant, and price for checkout validation.","description":"Fetches full details for a single item within a user's cart, using both cartId and cartItemId to guarantee ownership and path-union context. The returned information covers core relationships: the product, selected variant, quantity, and relevant option/variant selections, along with the added timestamp and current status (including inactive or invalid if product status changed since addition).\n\nSecurity and business requirements ensure that only the owner or authorized admin roles may access this resource. The endpoint returns up-to-date product and variant metadata reflecting any catalog status, price, or availability changes at the time of request—critical for checkout validation. Error handling addresses cases such as missing or deleted cart or item, or cross-user access attempts.\n\nThis endpoint is an integral part of user session and checkout flows, supporting UI and personalization logic, and adheres closely to shopping_mall_cart_items table constraints documented in the Prisma schema.","summary":"Retrieve a single cart item with product and variant detail (shopping_mall_cart_items).","parameters":[{"name":"cartId","description":"Parent cart ID for ownership and access scoping.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"Cart item ID to identify the record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specific cart item, including all selection, product, and variant fields.","typeName":"IShoppingMallCartItem"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/carts/{cartId}/items/{cartItemId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/carts","method":"post"},"description":"The shopping cart must be created before cart items can exist or be retrieved. This ensures the parent cart context for item retrieval."},{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"The cart item must be created (added to the cart) before it can be retrieved by item ID."}]},{"specification":"Creates a new item in the shopping cart associated with the given cartId. This operates on the shopping_mall_cart_items table in the Prisma schema, allowing customers or authenticated users to add products (with optional specific variants and quantities) to their cart for the corresponding cart session. The API request body MUST map exactly to the product/variant/option structure available for the given cart and user, encapsulating all necessary fields such as shopping_mall_product_id, shopping_mall_product_variant_id, quantity, and option_snapshot. Only authenticated users with a valid session and permission on the target cart may perform this operation, and the server must validate product existence, option selection, and inventory availability before adding. The operation links the cart item to the cart, product, and optional variant, updating or rejecting if conflicts are found. Audit/logging must be triggered, and business validation ensures accurate evidence retention for compliance.","path":"/shoppingMall/customer/carts/{cartId}/items","method":"post","summary":"Add a new item to a shopping cart (IShoppingMallCartItem.ICreate)","description":"This endpoint allows a customer to add a new item to their shopping cart, associating a given product (and optionally, specific product variant) with a particular cartId. The API targets the shopping_mall_cart_items table and is used during the add-to-cart flow for authenticated or guest users. The operation supports specifying the product, variant (for selected options), quantity, and a snapshot of the user's option selection for evidence and validation.\n\nBusiness validations include checking the existence and status of the cart (linked to shopping_mall_carts), verifying that the product and optional variant exist and are available for sale, and ensuring that inventory is sufficient for the requested quantity. The API must enforce that only the authenticated user (owner of the cart) or permitted support staff may add items. Any failure due to business rules (e.g., cart status is 'checked_out', inventory shortage, or invalid variant) should return a descriptive error message.\n\nIf the addition is successful, the response returns the updated state of the added cart item, including metadata for subsequent operations such as validation or cart-to-order conversion. All operations must be logged for audit purposes, and evidence retention is enforced for compliance and traceability as outlined in shopping_mall_cart_items schema documentation.","parameters":[{"name":"cartId","description":"The unique identifier of the shopping cart to which the item will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Required information for adding a product (and optional variant/options/quantity) as a cart item, mapping to the IShoppingMallCartItem.ICreate DTO.","typeName":"IShoppingMallCartItem.ICreate"},"responseBody":{"description":"The detailed record of the newly created cart item, encapsulated in the IShoppingMallCartItem DTO.","typeName":"IShoppingMallCartItem"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must be created before any item can be added to it, as the cartId is required to add items."},{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"The product to add must exist before it can be referenced in a cart item."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/variants","method":"post"},"description":"If a product variant is being added, the variant must exist before it can be referenced as part of an item in the cart."}]},{"specification":"Updates an existing cart item in a user's shopping cart, identified by cartId and cartItemId. This operation manipulates the shopping_mall_cart_items table according to the Prisma schema, and allows customers to update the quantity, associated variant/options, or option snapshot for a specific cart item. The API enforces validation against business logic — ensuring that the cart item exists, the new quantity is valid, options are available, and inventory constraints are not violated. Users may only update their own cart items. Audit trails are generated as required for compliance and legal evidence.","path":"/shoppingMall/customer/carts/{cartId}/items/{cartItemId}","method":"put","summary":"Update a cart item (IShoppingMallCartItem.IUpdate), e.g., quantity, variant, options","description":"This endpoint allows updating a specific item in a shopping cart, referenced by cartId and cartItemId. It targets the shopping_mall_cart_items table, supporting changes to properties such as quantity, selected product variant, and option snapshot (for evidence and after-sales). Business rules validate the cart's status, item existence, and ensure that the updated variant/options are valid and in stock. Only the owner of the cart can update items; support/admin may have elevated rights for dispute resolution.\n\nUpon successful update, the API returns the updated cart item, reflecting any changes to inventory or option configuration, and records the operation for audit trail compliance per the shopping_mall_cart_items schema. Attempts to update a cart item in an expired or checked out cart, or with insufficient inventory, must provide context-aware error responses.","parameters":[{"name":"cartId","description":"The unique identifier of the shopping cart containing the item to update.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"The unique identifier of the cart item to update within the cart.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information for updating a cart item, following IShoppingMallCartItem.IUpdate DTO, supporting quantity, variant selection, and options snapshot update.","typeName":"IShoppingMallCartItem.IUpdate"},"responseBody":{"description":"The updated detailed record of the cart item post-update (IShoppingMallCartItem).","typeName":"IShoppingMallCartItem"},"authorizationRoles":["customer"],"name":"update","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must be created before its items can be updated."},{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"A cart item must be created before it can be updated."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/variants","method":"post"},"description":"If updating to a new product variant, that variant must exist before referencing it in the cart item update."}]},{"specification":"Removes an item from a shopping cart (logical soft-deletion), operating on the shopping_mall_cart_items table as defined in the Prisma schema. Given a cartId and cartItemId, this endpoint marks the specified cart item as deleted (via deleted_at), preserving the record for evidence, compliance, and audit needs. Only the cart owner or an authorized role can perform this logical deletion. Business logic ensures that only items in an updatable cart (not checked out/expired) can be deleted. Attempts to delete non-existent, already deleted, or locked items should result in clear error responses, and all operations are audit-logged.","path":"/shoppingMall/customer/carts/{cartId}/items/{cartItemId}","method":"delete","summary":"Remove (soft-delete) a cart item from a shopping cart (IShoppingMallCartItem)","description":"This endpoint allows a user to remove (soft-delete) a specified item (cartItemId) from a shopping cart (cartId). It updates the shopping_mall_cart_items table's deleted_at field rather than hard-deleting rows, in accordance with the schema, ensuring evidence retention for audit and compliance.\n\nThe operation verifies that the cart item exists, is currently active (not already deleted), and that the parent cart is in a state permitting modification. Only the cart owner or an authorized user may perform this action. Attempts to remove items from a checked-out or expired cart should fail with an appropriate error. All deletions are logged for audit/recovery. The API returns a confirmation object or status, but no cart item body on success.","parameters":[{"name":"cartId","description":"The unique identifier of the cart from which the item will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"cartItemId","description":"The unique identifier of the cart item to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"erase","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must be created before any items can be removed."},{"endpoint":{"path":"/shoppingMall/customer/carts/{cartId}/items","method":"post"},"description":"A cart item must be created before it can be logically deleted from a cart."}]},{"specification":"Retrieves the historical audit/snapshot records for a specific shopping cart, enabling evidence review, rollback, and compliance. This operation interfaces with the shopping_mall_cart_snapshots table, supporting detailed search, filter, pagination, and sorting of cart snapshot history. Only users with access to the target cart may view its snapshots. This enables customers, support, or admins to investigate or revert state changes, view the cart's mutation history, and provide evidence in case of disputes.","path":"/shoppingMall/customer/carts/{cartId}/snapshots","method":"patch","summary":"Search paginated audit/history cart snapshots for a given cart (IPageIShoppingMallCartSnapshot)","description":"This advanced search endpoint returns a paginated, filterable list of snapshot history for a specific cart (cartId). The API interacts with the shopping_mall_cart_snapshots table and supports rich queries—allowing clients to filter by creation date, mutation type, or other audit fields as implemented in the IShoppingMallCartSnapshot.IRequest DTO.\n\nBusiness rules verify that only the owner of the cart (or privileged staff) can access these snapshots. The response includes an IPageIShoppingMallCartSnapshot collection, allowing clients to implement evidence trails, rollback views, or compliance reporting. The API enforces evidence retention policies as required by the snapshot schema. Pagination, filtering, and sorting parameters are respected according to DTO capabilities.","parameters":[{"name":"cartId","description":"The unique identifier of the cart whose snapshot history is being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Snapshot query/filter/pagination options following IShoppingMallCartSnapshot.IRequest DTO structure.","typeName":"IShoppingMallCartSnapshot.IRequest"},"responseBody":{"description":"A paginated list of cart snapshot audit records matching the filter/query (IPageIShoppingMallCartSnapshot).","typeName":"IPageIShoppingMallCartSnapshot"},"authorizationRoles":["customer"],"name":"index","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"Shopping cart must exist before its snapshot history can be retrieved. The /shoppingMall/customer/carts POST operation creates the cart referenced by cartId."}]},{"specification":"This operation retrieves a specific snapshot of a shopping cart for audit or rollback purposes. It operates on the shopping_mall_cart_snapshots table, which stores immutable serialized records of entire shopping cart states at critical points in time (e.g., before checkout, before deletion, major item change, etc.). This supports evidence retention for compliance, dispute resolution, and robust rollback scenarios. The endpoint is designed for both operational analytics and customer service situations where legal recovery or customer dispute investigation is required.","path":"/shoppingMall/admin/carts/{cartId}/snapshots/{snapshotId}","method":"get","summary":"Retrieve a specific audit snapshot of a shopping cart state by ID, supporting evidence, rollback, and compliance use-cases. Uses shopping_mall_cart_snapshots.","description":"This API operation retrieves a single immutable snapshot of a shopping cart as recorded in the shopping_mall_cart_snapshots table. Each snapshot captures the full state of the cart, including items, options, and metadata, at a particular event (such as checkout, deletion, or batch modification).\n\nSnapshots are critical for legal compliance, customer dispute evidence, and system rollback functionality. By exposing specific snapshots, this endpoint allows authorized parties to verify historical cart contents, reconstruct user activity, and demonstrate business process auditability. Sensitive personal information should be filtered or masked in accordance with the requester's role and system policy.\n\nAuthorization is required and limited typically to admin, support, or the cart owner, with strong filtering for non-admins. The operation links through both the cart ID and snapshot ID, supporting multi-tenancy and multi-event associations. Error handling will provide clear messages if the snapshot does not exist or access control fails. Logging of all access events supports full audit trails.","parameters":[{"name":"cartId","description":"Target shopping cart's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Unique identifier of the snapshot to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full immutable state of the cart at the time of snapshot, with all items and metadata serialized.","typeName":"IShoppingMallCartSnapshot"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/carts","method":"post"},"description":"Shopping cart must exist before a specific snapshot can be retrieved. The /shoppingMall/admin/carts POST operation creates the cart referenced by cartId."}]},{"specification":"This operation retrieves a paginated, filtered list of orders, supporting advanced search, sort, and analytics needs for customers, sellers, and administrators. Operates on the shopping_mall_orders table, which aggregates key business order flows, statuses, fulfillment state, and financial information. Enables complete operational visibility and customer service reporting for the order lifecycle.","path":"/shoppingMall/admin/orders","method":"patch","summary":"Search and retrieve a filtered, paginated list of orders across all states for CRM, analytics, and reporting. Uses shopping_mall_orders.","description":"This API operation provides advanced search and pagination over the order database, allowing users to filter by customer, channel, section, status (applied, paid, shipping, delivered, completed, cancelled, etc.), date ranges, amounts, and other key criteria defined in IShoppingMallOrder.IRequest.\n\nEach search result returns a summary list or full order details as required, supporting business workflows, customer inquiry handling, fraud analysis, and operational reporting. The endpoint is compatible with CRM dashboards and data export needs, incorporating both user-facing and administrative use-cases. Standard pagination parameters (page, size), multi-level sorting, and advanced filter operators are supported for flexible querying.\n\nAuthorization is required and enforced by business role and segmentation policy: customers only see their own orders, sellers see their own, and admins have global access. Error scenarios provide actionable messages and support high parallel query loads for analytics.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination criteria for advanced order retrieval. Supports complex multi-field queries across date, status, customer, channel, etc.","typeName":"IShoppingMallOrder.IRequest"},"responseBody":{"description":"Paginated list of detailed order objects matching search filters, including status, items, customer, fulfillment, payment, and audit meta. Uses IPageIShoppingMallOrder.","typeName":"IPageIShoppingMallOrder"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"An order must exist in the system before its list can be searched or filtered. The admin POST operation creates a new order record referenced in searches."}]},{"specification":"This operation retrieves full details of a specific order by ID, referencing the shopping_mall_orders table. Used by both customers and staff for order detail views, after-sales workflows, analytics, status checks, and business process automation. The endpoint supports full evidence and compliance retrieval, exposes related items, fulfillment, payment, and shipment status, and is optimized for user-facing order history and staff dashboard integration.","path":"/shoppingMall/admin/orders/{orderId}","method":"get","summary":"Retrieve the full details of a single order by its ID, including all items, status, and linked data. Uses shopping_mall_orders.","description":"This API operation retrieves a complete view of a business order as identified by the unique order ID (UUID). It returns the main order record along with all major related sub-entities (items, fulfillment status, payment, shipment, audit snapshots, and linked customer/seller).\n\nTypical applications include customer order history screens, seller dashboards, after-sales workflow handling, customer service, fraud investigation, and compliance export. The endpoint utilizes strict authorization logic: customers and sellers are segmented by their own records, while admins have full access. Complete error and existence checks are performed, and sensitive data is filtered appropriately per requesting role.\n\nThe operation allows for extension via includes/expansions where necessary (e.g., related shipment, payment), and is the canonical entrypoint for all business rule engines requiring full order context. Includes full audit coverage of all access attempts and provides granular error messages if order is missing or access is denied.","parameters":[{"name":"orderId","description":"Unique identifier for the order to retrieve (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete business, customer, and fulfillment state of the referenced order, including all item, payment, and shipment details. Uses IShoppingMallOrder.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"An order must be created before its details can be retrieved by ID. The admin POST operation creates a single order identified by orderId."}]},{"specification":"This operation creates a new shopping order from an existing cart, payment/application event, or direct input. It operates on the shopping_mall_orders table, validating and consuming cart/option snapshots, allocating inventory, applying business rules (coupon, loyalty, eligibility), and triggering confirmation and payment flows. Used for both member and guest orders. Returns the created order, including all generated sub-entities (items, payments, shipments) and initial status for workflow processing.","path":"/shoppingMall/admin/orders","method":"post","summary":"Create a new order based on an application (cart, user input), validating all business rules, and returning the full created order record. Uses shopping_mall_orders.","description":"This API operation creates a new order in the business catalog, transforming an application cart or direct input into a live shopping order. The endpoint enforces all validation: product availability checks, inventory application, option/value validation, coupon code/promotion handling, and eligibility (minimum/maximum amounts, currency, etc.). If all checks pass, an order record is created along with order items, snapshot events, and payment initializations.\n\nApplicable business rules for stacking/exclusion, segmentation, fulfillment batching, and logistics routing are processed in this operation. The operation is comprehensive: side-effects may include triggering rule engine events, initiating payment and shipment, generating audit trails, and notifying relevant parties. The endpoint is suitable for both authenticated and guest orders as system configuration permits.\n\nAuthorization covers all customers (or public/guest if permitted) with detailed validation error returns for any business rule failure (out-of-stock, eligibility, price change, etc.). It is idempotent against duplicate cart conversion; duplicate submissions with the same cart/application are handled gracefully with an appropriate error or retrieval of the existing order. Success returns the complete created order and all related sub-entities.","parameters":[],"requestBody":{"description":"Order application details: source cart reference, fulfillment instructions, payment method, options, user data, and any coupons applied. Must follow IShoppingMallOrder.ICreate structure.","typeName":"IShoppingMallOrder.ICreate"},"responseBody":{"description":"Fully created order, including all items, fulfillment, payment, shipment, and audit details. Uses IShoppingMallOrder.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"A shopping cart must be created for the customer before an order can be created from it. This ensures a cart instance exists, which the order creation operation may reference as its source."}]},{"specification":"This operation updates the details of an existing order. It targets the shopping_mall_orders table, allowing modifications to order fields such as status, order type, paid amounts, and any additional updates supported by the ShoppingMallOrder.IUpdate schema. The update process ensures that permission checks are enforced, that valid order state transitions are followed, and that all changes are snapshotted for auditing and compliance. Business logic validation ensures no illegal state regressions, and attempts to update a deleted or finalized order will be blocked. The endpoint supports robust error handling if validation, existence, or access checks fail.","description":"This API allows for the update of an order record by order ID. Orders in the shoppingMall system represent the core business transaction structure and include customer linkage, channel/section context, order status, payment details, and audit data. Updates are restricted to appropriate roles and only permitted when the order is not finalized, cancelled, or deleted.\n\nThe update process must enforce all relevant business logic, such as checking for illegal state transitions (e.g., cannot move from delivered to applied), and prevent updates to orders marked deleted. All modifications will trigger storage of a pre-update snapshot in accordance with compliance requirements, ensuring full traceability for disputes and audit. Attempts to update locked, deleted, or read-only orders will result in clear, actionable error messages.\n\nThis operation interacts with the shopping_mall_orders table, referencing comments in the schema regarding state transition, multi-seller support, and evidence retention. It is designed to be used by users with order management privileges and returns the updated order record.","summary":"Update an existing shopping mall order by ID.","parameters":[{"name":"orderId","description":"Order ID to update. Must be a valid UUID representing an order in the shopping_mall_orders table.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the target shopping mall order.","typeName":"IShoppingMallOrder.IUpdate"},"responseBody":{"description":"The updated shopping mall order record after successful modification.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"customer","name":"update","path":"/shoppingMall/customer/orders/{orderId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before its details can be updated."}]},{"specification":"This operation updates the details of an existing order. It targets the shopping_mall_orders table, allowing modifications to order fields such as status, order type, paid amounts, and any additional updates supported by the ShoppingMallOrder.IUpdate schema. The update process ensures that permission checks are enforced, that valid order state transitions are followed, and that all changes are snapshotted for auditing and compliance. Business logic validation ensures no illegal state regressions, and attempts to update a deleted or finalized order will be blocked. The endpoint supports robust error handling if validation, existence, or access checks fail.","description":"This API allows for the update of an order record by order ID. Orders in the shoppingMall system represent the core business transaction structure and include customer linkage, channel/section context, order status, payment details, and audit data. Updates are restricted to appropriate roles and only permitted when the order is not finalized, cancelled, or deleted.\n\nThe update process must enforce all relevant business logic, such as checking for illegal state transitions (e.g., cannot move from delivered to applied), and prevent updates to orders marked deleted. All modifications will trigger storage of a pre-update snapshot in accordance with compliance requirements, ensuring full traceability for disputes and audit. Attempts to update locked, deleted, or read-only orders will result in clear, actionable error messages.\n\nThis operation interacts with the shopping_mall_orders table, referencing comments in the schema regarding state transition, multi-seller support, and evidence retention. It is designed to be used by users with order management privileges and returns the updated order record.","summary":"Update an existing shopping mall order by ID.","parameters":[{"name":"orderId","description":"Order ID to update. Must be a valid UUID representing an order in the shopping_mall_orders table.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the target shopping mall order.","typeName":"IShoppingMallOrder.IUpdate"},"responseBody":{"description":"The updated shopping mall order record after successful modification.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/orders/{orderId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before its details can be updated."}]},{"specification":"This operation updates the details of an existing order. It targets the shopping_mall_orders table, allowing modifications to order fields such as status, order type, paid amounts, and any additional updates supported by the ShoppingMallOrder.IUpdate schema. The update process ensures that permission checks are enforced, that valid order state transitions are followed, and that all changes are snapshotted for auditing and compliance. Business logic validation ensures no illegal state regressions, and attempts to update a deleted or finalized order will be blocked. The endpoint supports robust error handling if validation, existence, or access checks fail.","description":"This API allows for the update of an order record by order ID. Orders in the shoppingMall system represent the core business transaction structure and include customer linkage, channel/section context, order status, payment details, and audit data. Updates are restricted to appropriate roles and only permitted when the order is not finalized, cancelled, or deleted.\n\nThe update process must enforce all relevant business logic, such as checking for illegal state transitions (e.g., cannot move from delivered to applied), and prevent updates to orders marked deleted. All modifications will trigger storage of a pre-update snapshot in accordance with compliance requirements, ensuring full traceability for disputes and audit. Attempts to update locked, deleted, or read-only orders will result in clear, actionable error messages.\n\nThis operation interacts with the shopping_mall_orders table, referencing comments in the schema regarding state transition, multi-seller support, and evidence retention. It is designed to be used by users with order management privileges and returns the updated order record.","summary":"Update an existing shopping mall order by ID.","parameters":[{"name":"orderId","description":"Order ID to update. Must be a valid UUID representing an order in the shopping_mall_orders table.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the target shopping mall order.","typeName":"IShoppingMallOrder.IUpdate"},"responseBody":{"description":"The updated shopping mall order record after successful modification.","typeName":"IShoppingMallOrder"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/orders/{orderId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before it can be updated."}]},{"specification":"This operation removes an order from active records by marking it deleted in the shopping_mall_orders table. Because the schema includes a deleted_at soft-deletion field, this performs a logical (soft) delete, retaining the order for legal, compliance, and audit trail. All related data integrity is preserved, and actions are subject to permission checks, business rules, and evidence snapshot before update. Hard deletion is not permitted unless a specific policy is changed or a physical purge endpoint is defined.","description":"This API marks an order as deleted, enabling soft-delete functionality as required for compliance and audit. Instead of removing the order data, the system sets the deleted_at timestamp, ensuring the record remains accessible for regulatory recovery and historical analysis.\n\nDeletion is only allowed when the order is in a deletable state as per business rules — for example, not finalized, not associated with ongoing shipments, or after permitted cancellation windows. Upon invocation, a snapshot of the order will be saved for evidence, and deletion actions will be logged in the audit trail.\n\nAttempts to delete orders in restricted or non-deletable states will result in clear error messages. The endpoint enforces robust permission and status logic based on schema comments for status and deletion fields.","summary":"Soft delete an existing shopping mall order by order ID.","parameters":[{"name":"orderId","description":"Order ID to soft delete. Must be a valid UUID of an existing order in shopping_mall_orders.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/orders/{orderId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before it can be soft-deleted."}]},{"specification":"This operation removes an order from active records by marking it deleted in the shopping_mall_orders table. Because the schema includes a deleted_at soft-deletion field, this performs a logical (soft) delete, retaining the order for legal, compliance, and audit trail. All related data integrity is preserved, and actions are subject to permission checks, business rules, and evidence snapshot before update. Hard deletion is not permitted unless a specific policy is changed or a physical purge endpoint is defined.","description":"This API marks an order as deleted, enabling soft-delete functionality as required for compliance and audit. Instead of removing the order data, the system sets the deleted_at timestamp, ensuring the record remains accessible for regulatory recovery and historical analysis.\n\nDeletion is only allowed when the order is in a deletable state as per business rules — for example, not finalized, not associated with ongoing shipments, or after permitted cancellation windows. Upon invocation, a snapshot of the order will be saved for evidence, and deletion actions will be logged in the audit trail.\n\nAttempts to delete orders in restricted or non-deletable states will result in clear error messages. The endpoint enforces robust permission and status logic based on schema comments for status and deletion fields.","summary":"Soft delete an existing shopping mall order by order ID.","parameters":[{"name":"orderId","description":"Order ID to soft delete. Must be a valid UUID of an existing order in shopping_mall_orders.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/orders/{orderId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before it can be soft-deleted."}]},{"specification":"This operation removes an order from active records by marking it deleted in the shopping_mall_orders table. Because the schema includes a deleted_at soft-deletion field, this performs a logical (soft) delete, retaining the order for legal, compliance, and audit trail. All related data integrity is preserved, and actions are subject to permission checks, business rules, and evidence snapshot before update. Hard deletion is not permitted unless a specific policy is changed or a physical purge endpoint is defined.","description":"This API marks an order as deleted, enabling soft-delete functionality as required for compliance and audit. Instead of removing the order data, the system sets the deleted_at timestamp, ensuring the record remains accessible for regulatory recovery and historical analysis.\n\nDeletion is only allowed when the order is in a deletable state as per business rules — for example, not finalized, not associated with ongoing shipments, or after permitted cancellation windows. Upon invocation, a snapshot of the order will be saved for evidence, and deletion actions will be logged in the audit trail.\n\nAttempts to delete orders in restricted or non-deletable states will result in clear error messages. The endpoint enforces robust permission and status logic based on schema comments for status and deletion fields.","summary":"Soft delete an existing shopping mall order by order ID.","parameters":[{"name":"orderId","description":"Order ID to soft delete. Must be a valid UUID of an existing order in shopping_mall_orders.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/orders/{orderId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before it can be soft-deleted."}]},{"specification":"This operation retrieves and filters the list of individual items within a specific order, supporting advanced search, sorting, filtering, and pagination. It targets the shopping_mall_order_items table, allowing access to all items (products, bundles) associated with the given order, including quantity, price, status, and discount data. Request parameters support field-specific queries and paging using the ShoppingMallOrderItem.IRequest schema.","description":"This API returns a paginated, filterable list of order items for a given order, identified by its order ID. It is used to provide detailed breakdowns of ordered products, their statuses, quantities, pricing, and discount snapshot details as defined in the shopping_mall_order_items schema. Each order item is linked to a product, variant, and fulfillment logic.\n\nThe request body supports complex filtering (e.g., by status, product ID), including pagination and sorting of results for user interfaces. Permissions are enforced so that only authorized users (order owners or privileged staff) can access item details for a given order.\n\nAll fields in the response follow the schema comments: unit_price, final_price, discount_snapshot, and status. The operation does not expose deleted or inaccessible items and is optimized for audit/compliance traceability. Error handling ensures that requests to non-existent or restricted orders return clear feedback.","summary":"List all items for a specific shopping mall order with filtering, pagination, and sorting.","parameters":[{"name":"orderId","description":"The order ID to retrieve items for. Must be a valid UUID of an existing order.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and sort criteria for retrieving order items.","typeName":"IShoppingMallOrderItem.IRequest"},"responseBody":{"description":"Paginated result set of order items matching the specified filters.","typeName":"IPageIShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"customer","name":"index","path":"/shoppingMall/customer/orders/{orderId}/items","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before its items can be listed."}]},{"specification":"This operation retrieves and filters the list of individual items within a specific order, supporting advanced search, sorting, filtering, and pagination. It targets the shopping_mall_order_items table, allowing access to all items (products, bundles) associated with the given order, including quantity, price, status, and discount data. Request parameters support field-specific queries and paging using the ShoppingMallOrderItem.IRequest schema.","description":"This API returns a paginated, filterable list of order items for a given order, identified by its order ID. It is used to provide detailed breakdowns of ordered products, their statuses, quantities, pricing, and discount snapshot details as defined in the shopping_mall_order_items schema. Each order item is linked to a product, variant, and fulfillment logic.\n\nThe request body supports complex filtering (e.g., by status, product ID), including pagination and sorting of results for user interfaces. Permissions are enforced so that only authorized users (order owners or privileged staff) can access item details for a given order.\n\nAll fields in the response follow the schema comments: unit_price, final_price, discount_snapshot, and status. The operation does not expose deleted or inaccessible items and is optimized for audit/compliance traceability. Error handling ensures that requests to non-existent or restricted orders return clear feedback.","summary":"List all items for a specific shopping mall order with filtering, pagination, and sorting.","parameters":[{"name":"orderId","description":"The order ID to retrieve items for. Must be a valid UUID of an existing order.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and sort criteria for retrieving order items.","typeName":"IShoppingMallOrderItem.IRequest"},"responseBody":{"description":"Paginated result set of order items matching the specified filters.","typeName":"IPageIShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"seller","name":"index","path":"/shoppingMall/seller/orders/{orderId}/items","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before its items can be listed or filtered."}]},{"specification":"This operation retrieves and filters the list of individual items within a specific order, supporting advanced search, sorting, filtering, and pagination. It targets the shopping_mall_order_items table, allowing access to all items (products, bundles) associated with the given order, including quantity, price, status, and discount data. Request parameters support field-specific queries and paging using the ShoppingMallOrderItem.IRequest schema.","description":"This API returns a paginated, filterable list of order items for a given order, identified by its order ID. It is used to provide detailed breakdowns of ordered products, their statuses, quantities, pricing, and discount snapshot details as defined in the shopping_mall_order_items schema. Each order item is linked to a product, variant, and fulfillment logic.\n\nThe request body supports complex filtering (e.g., by status, product ID), including pagination and sorting of results for user interfaces. Permissions are enforced so that only authorized users (order owners or privileged staff) can access item details for a given order.\n\nAll fields in the response follow the schema comments: unit_price, final_price, discount_snapshot, and status. The operation does not expose deleted or inaccessible items and is optimized for audit/compliance traceability. Error handling ensures that requests to non-existent or restricted orders return clear feedback.","summary":"List all items for a specific shopping mall order with filtering, pagination, and sorting.","parameters":[{"name":"orderId","description":"The order ID to retrieve items for. Must be a valid UUID of an existing order.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and sort criteria for retrieving order items.","typeName":"IShoppingMallOrderItem.IRequest"},"responseBody":{"description":"Paginated result set of order items matching the specified filters.","typeName":"IPageIShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/orders/{orderId}/items","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before its items can be listed or filtered."}]},{"specification":"This operation retrieves a single order item (child of an order) with all detail fields, for use in customer, seller, or admin interfaces. It returns product, variant, seller, pricing, status, and audit-relevant metadata. The path requires both orderId and itemId, ensuring strong context and traceability. Returns a detailed view following the ShoppingMallOrderItem schema and enforces access rules, only permitting viewing by authorized users.","description":"This endpoint fetches detailed information about a specific order item belonging to a particular order. Based on the shopping_mall_order_items schema, the operation delivers all key business fields (product linkage, quantity, price, discount snapshot, status, audit fields, etc.) and relates them with the parent order, seller, and product as required for business logic and compliance.\n\nPermission and access-level checks ensure that only users who own the order or staff with the appropriate role can see item details. If the specified order or item does not exist or is not accessible due to status/deletion, a relevant error is returned.\n\nThe response DTO matches the schema, including unit/discounted price, quantity, product and variant references, and status. This operation is critical for order management workflows and after-sales scenarios.","summary":"Get detailed information about a specific shopping mall order item by orderId/itemId.","parameters":[{"name":"orderId","description":"The order ID to which the order item belongs. Must be a valid UUID.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"The unique ID of the order item to retrieve. Must be a valid UUID of an item in shopping_mall_order_items.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The order item record for the specified orderId and itemId.","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/orders/{orderId}/items/{itemId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before accessing specific order items."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be retrieved."}]},{"specification":"This operation retrieves a single order item (child of an order) with all detail fields, for use in customer, seller, or admin interfaces. It returns product, variant, seller, pricing, status, and audit-relevant metadata. The path requires both orderId and itemId, ensuring strong context and traceability. Returns a detailed view following the ShoppingMallOrderItem schema and enforces access rules, only permitting viewing by authorized users.","description":"This endpoint fetches detailed information about a specific order item belonging to a particular order. Based on the shopping_mall_order_items schema, the operation delivers all key business fields (product linkage, quantity, price, discount snapshot, status, audit fields, etc.) and relates them with the parent order, seller, and product as required for business logic and compliance.\n\nPermission and access-level checks ensure that only users who own the order or staff with the appropriate role can see item details. If the specified order or item does not exist or is not accessible due to status/deletion, a relevant error is returned.\n\nThe response DTO matches the schema, including unit/discounted price, quantity, product and variant references, and status. This operation is critical for order management workflows and after-sales scenarios.","summary":"Get detailed information about a specific shopping mall order item by orderId/itemId.","parameters":[{"name":"orderId","description":"The order ID to which the order item belongs. Must be a valid UUID.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"The unique ID of the order item to retrieve. Must be a valid UUID of an item in shopping_mall_order_items.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The order item record for the specified orderId and itemId.","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/orders/{orderId}/items/{itemId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before accessing specific order items."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be retrieved."}]},{"specification":"This operation retrieves a single order item (child of an order) with all detail fields, for use in customer, seller, or admin interfaces. It returns product, variant, seller, pricing, status, and audit-relevant metadata. The path requires both orderId and itemId, ensuring strong context and traceability. Returns a detailed view following the ShoppingMallOrderItem schema and enforces access rules, only permitting viewing by authorized users.","description":"This endpoint fetches detailed information about a specific order item belonging to a particular order. Based on the shopping_mall_order_items schema, the operation delivers all key business fields (product linkage, quantity, price, discount snapshot, status, audit fields, etc.) and relates them with the parent order, seller, and product as required for business logic and compliance.\n\nPermission and access-level checks ensure that only users who own the order or staff with the appropriate role can see item details. If the specified order or item does not exist or is not accessible due to status/deletion, a relevant error is returned.\n\nThe response DTO matches the schema, including unit/discounted price, quantity, product and variant references, and status. This operation is critical for order management workflows and after-sales scenarios.","summary":"Get detailed information about a specific shopping mall order item by orderId/itemId.","parameters":[{"name":"orderId","description":"The order ID to which the order item belongs. Must be a valid UUID.","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"The unique ID of the order item to retrieve. Must be a valid UUID of an item in shopping_mall_order_items.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The order item record for the specified orderId and itemId.","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/orders/{orderId}/items/{itemId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before any order item can be retrieved by orderId and itemId."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must be created before it can be retrieved with the specified itemId under the given orderId."}]},{"specification":"This operation enables the creation of a new order item within an existing order. It operates on the shopping_mall_order_items table, allowing users to add specific products (or variants thereof) to an order after the order has been created but before fulfillment. This may support advanced workflows such as order modification or late addition of products, typical in B2B or flexible fulfillment e-commerce models. The operation ensures proper linkage to the parent order and validates the supplied product, quantity, and any additional configuration according to the business rules described in the shopping_mall_order_items schema (such as status, pricing, and discount application). All new items inherit order context such as channel, customer, and currency from the associated order entity.","description":"Use this endpoint to append a new item to an existing order before the order is finalized and processed for fulfillment. It requires the orderId as a path parameter and expects a request body conforming to IShoppingMallOrderItem.ICreate, defining the product, optional variant, quantity, pricing, and discount snapshot information.\n\nThe operation enforces business logic to prevent addition once an order has reached a non-editable state (e.g., after shipping/fulfillment). It verifies that the selected product and variant are valid for the specified order context (e.g., available in the order's channel, not discontinued, within stock constraints) before item creation. The order and its customer, seller, and channel context are cross-checked.\n\nAuthorization checks ensure that only users with the correct relationship to the order (customer who placed it, seller fulfilling it, or admin) may add items. Security controls, order status validation, and audit trail integration are implemented as per shopping_mall_orders and shopping_mall_order_items table comments. If successful, returns the newly created order item.\n\nRelevant errors include status transition violations, stock or eligibility failures, or access control denial.","summary":"Add a new item to an existing shopping mall order (shopping_mall_order_items)","parameters":[{"name":"orderId","description":"Target order's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details of the order item to create, including product, quantity, variant, price, and discount snapshot","typeName":"IShoppingMallOrderItem.ICreate"},"responseBody":{"description":"The created order item with full detail","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"customer","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before adding a new item to the order."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can be added as an order item."}],"path":"/shoppingMall/customer/orders/{orderId}/items","method":"post"},{"specification":"This operation enables the creation of a new order item within an existing order. It operates on the shopping_mall_order_items table, allowing users to add specific products (or variants thereof) to an order after the order has been created but before fulfillment. This may support advanced workflows such as order modification or late addition of products, typical in B2B or flexible fulfillment e-commerce models. The operation ensures proper linkage to the parent order and validates the supplied product, quantity, and any additional configuration according to the business rules described in the shopping_mall_order_items schema (such as status, pricing, and discount application). All new items inherit order context such as channel, customer, and currency from the associated order entity.","description":"Use this endpoint to append a new item to an existing order before the order is finalized and processed for fulfillment. It requires the orderId as a path parameter and expects a request body conforming to IShoppingMallOrderItem.ICreate, defining the product, optional variant, quantity, pricing, and discount snapshot information.\n\nThe operation enforces business logic to prevent addition once an order has reached a non-editable state (e.g., after shipping/fulfillment). It verifies that the selected product and variant are valid for the specified order context (e.g., available in the order's channel, not discontinued, within stock constraints) before item creation. The order and its customer, seller, and channel context are cross-checked.\n\nAuthorization checks ensure that only users with the correct relationship to the order (customer who placed it, seller fulfilling it, or admin) may add items. Security controls, order status validation, and audit trail integration are implemented as per shopping_mall_orders and shopping_mall_order_items table comments. If successful, returns the newly created order item.\n\nRelevant errors include status transition violations, stock or eligibility failures, or access control denial.","summary":"Add a new item to an existing shopping mall order (shopping_mall_order_items)","parameters":[{"name":"orderId","description":"Target order's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details of the order item to create, including product, quantity, variant, price, and discount snapshot","typeName":"IShoppingMallOrderItem.ICreate"},"responseBody":{"description":"The created order item with full detail","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"seller","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before adding a new item to the order."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can be added as an order item."}],"path":"/shoppingMall/seller/orders/{orderId}/items","method":"post"},{"specification":"This operation enables the creation of a new order item within an existing order. It operates on the shopping_mall_order_items table, allowing users to add specific products (or variants thereof) to an order after the order has been created but before fulfillment. This may support advanced workflows such as order modification or late addition of products, typical in B2B or flexible fulfillment e-commerce models. The operation ensures proper linkage to the parent order and validates the supplied product, quantity, and any additional configuration according to the business rules described in the shopping_mall_order_items schema (such as status, pricing, and discount application). All new items inherit order context such as channel, customer, and currency from the associated order entity.","description":"Use this endpoint to append a new item to an existing order before the order is finalized and processed for fulfillment. It requires the orderId as a path parameter and expects a request body conforming to IShoppingMallOrderItem.ICreate, defining the product, optional variant, quantity, pricing, and discount snapshot information.\n\nThe operation enforces business logic to prevent addition once an order has reached a non-editable state (e.g., after shipping/fulfillment). It verifies that the selected product and variant are valid for the specified order context (e.g., available in the order's channel, not discontinued, within stock constraints) before item creation. The order and its customer, seller, and channel context are cross-checked.\n\nAuthorization checks ensure that only users with the correct relationship to the order (customer who placed it, seller fulfilling it, or admin) may add items. Security controls, order status validation, and audit trail integration are implemented as per shopping_mall_orders and shopping_mall_order_items table comments. If successful, returns the newly created order item.\n\nRelevant errors include status transition violations, stock or eligibility failures, or access control denial.","summary":"Add a new item to an existing shopping mall order (shopping_mall_order_items)","parameters":[{"name":"orderId","description":"Target order's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details of the order item to create, including product, quantity, variant, price, and discount snapshot","typeName":"IShoppingMallOrderItem.ICreate"},"responseBody":{"description":"The created order item with full detail","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before adding a new item to the order."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before it can be added as an order item."}],"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},{"specification":"This operation modifies an existing order item associated with an order, operating on the shopping_mall_order_items table. It allows for updating details such as quantity, selected variant, or price prior to shipment/fulfillment. This supports order-level changes by the owner, seller, or admin within permitted change windows, in accordance with order and item state as defined in the schema. The operation references shopping_mall_order_items for complex business rules such as per-item status, modification eligibility, pricing, discounts, and fulfilment workflow.","description":"This endpoint is used to update an existing order item before it has been processed for fulfillment. Can be used to change the product variant, adjust quantity, update pricing or discount snapshots, or other modifiable attributes defined in IShoppingMallOrderItem.IUpdate. The orderId and itemId path parameters uniquely identify the order and the specific order item to update.\n\nBusiness logic checks verify that the item is eligible for modification (status allows updating, not yet shipped/fulfilled/cancelled) and that changes conform to quantity, pricing, and inventory constraints. Mutation triggers a snapshot/audit entry for compliance and traceability, per shopping_mall_order_items and related snapshot tables.\n\nAuthorization ensures only permitted users—order owner (customer), involved seller, or admin—may update. Related workflows ensure inventory adjustment and downstream delivery/payment status changes follow business rules. Returns the updated order item on success.","summary":"Update an existing shopping mall order item by ID (shopping_mall_order_items)","parameters":[{"name":"orderId","description":"Unique identifier for the target order (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier for the order item to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order item update fields: quantity, variant, price, discounts, etc.","typeName":"IShoppingMallOrderItem.IUpdate"},"responseBody":{"description":"The updated order item object with current values","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"customer","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before any items within it can be updated."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"The order item must exist before it can be updated."}],"path":"/shoppingMall/customer/orders/{orderId}/items/{itemId}","method":"put"},{"specification":"This operation modifies an existing order item associated with an order, operating on the shopping_mall_order_items table. It allows for updating details such as quantity, selected variant, or price prior to shipment/fulfillment. This supports order-level changes by the owner, seller, or admin within permitted change windows, in accordance with order and item state as defined in the schema. The operation references shopping_mall_order_items for complex business rules such as per-item status, modification eligibility, pricing, discounts, and fulfilment workflow.","description":"This endpoint is used to update an existing order item before it has been processed for fulfillment. Can be used to change the product variant, adjust quantity, update pricing or discount snapshots, or other modifiable attributes defined in IShoppingMallOrderItem.IUpdate. The orderId and itemId path parameters uniquely identify the order and the specific order item to update.\n\nBusiness logic checks verify that the item is eligible for modification (status allows updating, not yet shipped/fulfilled/cancelled) and that changes conform to quantity, pricing, and inventory constraints. Mutation triggers a snapshot/audit entry for compliance and traceability, per shopping_mall_order_items and related snapshot tables.\n\nAuthorization ensures only permitted users—order owner (customer), involved seller, or admin—may update. Related workflows ensure inventory adjustment and downstream delivery/payment status changes follow business rules. Returns the updated order item on success.","summary":"Update an existing shopping mall order item by ID (shopping_mall_order_items)","parameters":[{"name":"orderId","description":"Unique identifier for the target order (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier for the order item to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order item update fields: quantity, variant, price, discounts, etc.","typeName":"IShoppingMallOrderItem.IUpdate"},"responseBody":{"description":"The updated order item object with current values","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"seller","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before any items within it can be updated."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"The order item must exist before it can be updated."}],"path":"/shoppingMall/seller/orders/{orderId}/items/{itemId}","method":"put"},{"specification":"This operation modifies an existing order item associated with an order, operating on the shopping_mall_order_items table. It allows for updating details such as quantity, selected variant, or price prior to shipment/fulfillment. This supports order-level changes by the owner, seller, or admin within permitted change windows, in accordance with order and item state as defined in the schema. The operation references shopping_mall_order_items for complex business rules such as per-item status, modification eligibility, pricing, discounts, and fulfilment workflow.","description":"This endpoint is used to update an existing order item before it has been processed for fulfillment. Can be used to change the product variant, adjust quantity, update pricing or discount snapshots, or other modifiable attributes defined in IShoppingMallOrderItem.IUpdate. The orderId and itemId path parameters uniquely identify the order and the specific order item to update.\n\nBusiness logic checks verify that the item is eligible for modification (status allows updating, not yet shipped/fulfilled/cancelled) and that changes conform to quantity, pricing, and inventory constraints. Mutation triggers a snapshot/audit entry for compliance and traceability, per shopping_mall_order_items and related snapshot tables.\n\nAuthorization ensures only permitted users—order owner (customer), involved seller, or admin—may update. Related workflows ensure inventory adjustment and downstream delivery/payment status changes follow business rules. Returns the updated order item on success.","summary":"Update an existing shopping mall order item by ID (shopping_mall_order_items)","parameters":[{"name":"orderId","description":"Unique identifier for the target order (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier for the order item to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Order item update fields: quantity, variant, price, discounts, etc.","typeName":"IShoppingMallOrderItem.IUpdate"},"responseBody":{"description":"The updated order item object with current values","typeName":"IShoppingMallOrderItem"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before any items within it can be updated."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"The order item must exist before it can be updated."}],"path":"/shoppingMall/admin/orders/{orderId}/items/{itemId}","method":"put"},{"specification":"This operation permanently removes (hard delete) an order item from an order, acting on the shopping_mall_order_items table. It is intended for use before fulfillment or shipping begins, when business rules permit complete removal. Shopping_mall_order_items does not specify soft-delete fields for logical deletion, so this operation fully deletes the row per schema design. The operation ensures permitted use through validation of order/item status and required authorization.","description":"Removes an order item by its unique itemId from the specified order, if business and workflow rules allow (e.g., order not yet fulfilled or in shipping). This actions a hard delete—data is completely removed from the shopping_mall_order_items table, per schema, and triggers audit trail/logging for tracking and compliance.\n\nThe endpoint requires both orderId and itemId as path parameters. It validates item eligibility for deletion (e.g., item is not already delivered, paid, or processed) and enforces access control (allowed for order owner, seller, or admins). Improper attempts (on shipped, paid, or finalized items) result in error.\n\nNo request or response body is needed. Upon successful deletion, deletion event is recorded in audit log per compliance rules described in the shopping_mall_order_items and related tables.","summary":"Remove an order item from an order by ID (shopping_mall_order_items)","parameters":[{"name":"orderId","description":"Unique identifier of the parent order (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the order item to be removed (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before any items within it can be deleted."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"The order item must exist before it can be deleted."}],"path":"/shoppingMall/customer/orders/{orderId}/items/{itemId}","method":"delete"},{"specification":"This operation permanently removes (hard delete) an order item from an order, acting on the shopping_mall_order_items table. It is intended for use before fulfillment or shipping begins, when business rules permit complete removal. Shopping_mall_order_items does not specify soft-delete fields for logical deletion, so this operation fully deletes the row per schema design. The operation ensures permitted use through validation of order/item status and required authorization.","description":"Removes an order item by its unique itemId from the specified order, if business and workflow rules allow (e.g., order not yet fulfilled or in shipping). This actions a hard delete—data is completely removed from the shopping_mall_order_items table, per schema, and triggers audit trail/logging for tracking and compliance.\n\nThe endpoint requires both orderId and itemId as path parameters. It validates item eligibility for deletion (e.g., item is not already delivered, paid, or processed) and enforces access control (allowed for order owner, seller, or admins). Improper attempts (on shipped, paid, or finalized items) result in error.\n\nNo request or response body is needed. Upon successful deletion, deletion event is recorded in audit log per compliance rules described in the shopping_mall_order_items and related tables.","summary":"Remove an order item from an order by ID (shopping_mall_order_items)","parameters":[{"name":"orderId","description":"Unique identifier of the parent order (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the order item to be removed (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before an order item can exist and be eligible for deletion."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must exist before it can be deleted from the order."}],"path":"/shoppingMall/seller/orders/{orderId}/items/{itemId}","method":"delete"},{"specification":"This operation permanently removes (hard delete) an order item from an order, acting on the shopping_mall_order_items table. It is intended for use before fulfillment or shipping begins, when business rules permit complete removal. Shopping_mall_order_items does not specify soft-delete fields for logical deletion, so this operation fully deletes the row per schema design. The operation ensures permitted use through validation of order/item status and required authorization.","description":"Removes an order item by its unique itemId from the specified order, if business and workflow rules allow (e.g., order not yet fulfilled or in shipping). This actions a hard delete—data is completely removed from the shopping_mall_order_items table, per schema, and triggers audit trail/logging for tracking and compliance.\n\nThe endpoint requires both orderId and itemId as path parameters. It validates item eligibility for deletion (e.g., item is not already delivered, paid, or processed) and enforces access control (allowed for order owner, seller, or admins). Improper attempts (on shipped, paid, or finalized items) result in error.\n\nNo request or response body is needed. Upon successful deletion, deletion event is recorded in audit log per compliance rules described in the shopping_mall_order_items and related tables.","summary":"Remove an order item from an order by ID (shopping_mall_order_items)","parameters":[{"name":"orderId","description":"Unique identifier of the parent order (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"itemId","description":"Unique identifier of the order item to be removed (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before an order item can exist and be eligible for deletion."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/items","method":"post"},"description":"Order item must exist before it can be deleted from the order."}],"path":"/shoppingMall/admin/orders/{orderId}/items/{itemId}","method":"delete"},{"specification":"Retrieves a paginated and filterable list of historical snapshots for a given order, supporting audit compliance and business evidence requirements. Operates on shopping_mall_order_snapshots schema. The operation supports complex search queries to find snapshots by time, triggering event, or state, and returns results with pagination and sorting options for efficient compliance analysis, rollback checks, or dispute evidence gathering.","description":"Use this endpoint to retrieve a filtered and paginated list of all historical state snapshots for a specific order. Snapshots are created on each key state transition for shopping_mall_orders, preserving the complete serialized order object for audit, compliance, and evidence purposes.\n\nRequest body supports advanced search, pagination, and sorting capabilities, using IShoppingMallOrderSnapshot.IRequest to specify filters such as snapshot event time, snapshot_reason, or actor. The response is a paginated list of snapshots (IPageIShoppingMallOrderSnapshot), facilitating legal, audit, and business investigations.\n\nAuthorization checks allow access for order owners (customers), relevant sellers, and platform admins. Sensitive details are filtered according to role permissions, supporting regional compliance regulations.","summary":"List paginated order snapshot history for a specific order (shopping_mall_order_snapshots)","parameters":[{"name":"orderId","description":"Identifier of the order to retrieve snapshots for (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for order snapshot retrieval","typeName":"IShoppingMallOrderSnapshot.IRequest"},"responseBody":{"description":"Paginated order snapshot history records","typeName":"IPageIShoppingMallOrderSnapshot"},"authorizationType":null,"authorizationRole":"customer","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before its historical snapshots can be listed or retrieved."}],"path":"/shoppingMall/customer/orders/{orderId}/snapshots","method":"patch"},{"specification":"Retrieves a paginated and filterable list of historical snapshots for a given order, supporting audit compliance and business evidence requirements. Operates on shopping_mall_order_snapshots schema. The operation supports complex search queries to find snapshots by time, triggering event, or state, and returns results with pagination and sorting options for efficient compliance analysis, rollback checks, or dispute evidence gathering.","description":"Use this endpoint to retrieve a filtered and paginated list of all historical state snapshots for a specific order. Snapshots are created on each key state transition for shopping_mall_orders, preserving the complete serialized order object for audit, compliance, and evidence purposes.\n\nRequest body supports advanced search, pagination, and sorting capabilities, using IShoppingMallOrderSnapshot.IRequest to specify filters such as snapshot event time, snapshot_reason, or actor. The response is a paginated list of snapshots (IPageIShoppingMallOrderSnapshot), facilitating legal, audit, and business investigations.\n\nAuthorization checks allow access for order owners (customers), relevant sellers, and platform admins. Sensitive details are filtered according to role permissions, supporting regional compliance regulations.","summary":"List paginated order snapshot history for a specific order (shopping_mall_order_snapshots)","parameters":[{"name":"orderId","description":"Identifier of the order to retrieve snapshots for (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for order snapshot retrieval","typeName":"IShoppingMallOrderSnapshot.IRequest"},"responseBody":{"description":"Paginated order snapshot history records","typeName":"IPageIShoppingMallOrderSnapshot"},"authorizationType":null,"authorizationRole":"seller","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before its historical snapshots can be listed or retrieved."}],"path":"/shoppingMall/seller/orders/{orderId}/snapshots","method":"patch"},{"specification":"Retrieves a paginated and filterable list of historical snapshots for a given order, supporting audit compliance and business evidence requirements. Operates on shopping_mall_order_snapshots schema. The operation supports complex search queries to find snapshots by time, triggering event, or state, and returns results with pagination and sorting options for efficient compliance analysis, rollback checks, or dispute evidence gathering.","description":"Use this endpoint to retrieve a filtered and paginated list of all historical state snapshots for a specific order. Snapshots are created on each key state transition for shopping_mall_orders, preserving the complete serialized order object for audit, compliance, and evidence purposes.\n\nRequest body supports advanced search, pagination, and sorting capabilities, using IShoppingMallOrderSnapshot.IRequest to specify filters such as snapshot event time, snapshot_reason, or actor. The response is a paginated list of snapshots (IPageIShoppingMallOrderSnapshot), facilitating legal, audit, and business investigations.\n\nAuthorization checks allow access for order owners (customers), relevant sellers, and platform admins. Sensitive details are filtered according to role permissions, supporting regional compliance regulations.","summary":"List paginated order snapshot history for a specific order (shopping_mall_order_snapshots)","parameters":[{"name":"orderId","description":"Identifier of the order to retrieve snapshots for (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination parameters for order snapshot retrieval","typeName":"IShoppingMallOrderSnapshot.IRequest"},"responseBody":{"description":"Paginated order snapshot history records","typeName":"IPageIShoppingMallOrderSnapshot"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before listing its snapshots, as snapshots only exist for a previously created order."}],"path":"/shoppingMall/admin/orders/{orderId}/snapshots","method":"patch"},{"specification":"Retrieves a specific snapshot of an order for audit, compliance, and evidence purposes. Operates on the shopping_mall_order_snapshots table, referencing by orderId and snapshotId. Returns a complete, immutable record of the order at a particular point in time, reflecting all business data relevant to that version. Used for dispute resolution, rollback, or regulatory/forensic requests. Path parameters are strictly enforced as UUIDs.","description":"This operation allows authorized users (such as administrators or the customer who placed the order) to fetch a single snapshot of an order record based on a snapshot's unique identifier. Each snapshot preserves the immutable state of the order at the moment of a critical business event (such as creation, payment, shipment, cancellation, etc).\n\nSecurity: Only users with rights over the order (the owner, the fulfilling seller, or a system admin) may access the snapshot, as it may contain PII and sensitive transactional data. Permission checks must verify the requesting user's relationship to the order before serving the snapshot.\n\nThe response includes all key order fields and nested data (items, payments, fulfillment, etc.) serialized as at the snapshot time, suitable for compliance export or internal forensic analysis.\n\nLinked DB: shopping_mall_order_snapshots, with foreign key to shopping_mall_orders. This is part of the audit/evidence chain for order lifecycle events. Path parameter 'orderId' is required for context, and 'snapshotId' identifies the exact snapshot entity.\n\nIf the order or snapshot does not exist (or the user has insufficient rights), the system returns HTTP 404 or 403 with an error message in accordance with compliance and privacy standards.","summary":"Retrieve a single historical snapshot of an order for audit and evidence purposes (shopping_mall_order_snapshots).","parameters":[{"name":"orderId","description":"UUID of the target order whose snapshot is being requested.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"UUID of the snapshot record to retrieve, uniquely identifying the historical record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"A complete historical snapshot of the order as at the time of the event, with all serialized data for audit, rollback, or export.","typeName":"IShoppingMallOrderSnapshot"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/orders/{orderId}/snapshots/{snapshotId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before retrieving a historical snapshot, as the snapshot is attached to an existing order."}]},{"specification":"Performs a search and paginated retrieval of payment records associated with a specific order. Operates on the shopping_mall_payments table, filtered by orderId, and supports advanced filtering, searching, and sorting of payment events (pending, paid, canceled, refunded, etc). Enables reconciliation, history lookup, and payment analytics. Returns paginated results according to provided criteria.","description":"Allows authorized users to retrieve a paginated, filtered list of all payments linked to a specific order. Query can include filters for payment status, type, date ranges, or other payment-specific attributes as defined in the request body DTO.\n\nSupports business operations such as viewing all payment attempts, reconciling refunds, and tracking multi-method settlements for complex order flows. Pagination parameters control result size and sorting, adhering to standard patterns for performance and usability.\n\nDB integration: Uses shopping_mall_payments filtered by the given orderId, with possible joins to orders and customers for additional context. Only users with access to the order (customer, related seller, or admin) can use this endpoint. Permission and data masking apply for privacy compliance.\n\nThe response structure includes a list of payment summaries, paginated, and metadata for total count, pages, etc. All returned records are mapped and masked according to user permissions.","summary":"List and search all payment records associated with a specific order (shopping_mall_payments) with pagination and filtering.","parameters":[{"name":"orderId","description":"UUID of the target order to fetch payments for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter criteria for payments, including date range, status, payment type, and pagination parameters.","typeName":"IShoppingMallPayment.IRequest"},"responseBody":{"description":"Paginated list of payment summaries related to the given order, including status and key info.","typeName":"IPageIShoppingMallPayment.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/orders/{orderId}/payments","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before listing or searching for payments related to this order."}]},{"specification":"Retrieves detail for a specific payment record by paymentId, within a particular order. Directly reads shopping_mall_payments linked to both the order and payment entity for detailed status, timing, and business trace. Used for payment tracking, issue resolution, or auditing.","description":"Fetches a single payment instance linked to a given order, returning full details for reconciliation, business audit, or customer service inquiries. Enforces both orderId and paymentId as mandatory UUID parameters, verifying that the payment belongs to the specified order and is accessible by the requesting user.\n\nTypical use cases include analytics of split payments, audit of refunds or failed attempts, and programmatic lookup for order history screens. Only users affiliated to the order (such as admins, the ordering customer, or responsible seller) may access this endpoint; permission checks must be strictly enforced.\n\nResponse includes all available details of the payment (amount, status, type, settlement references, timestamps, failure/cancellation info where relevant), as held in the shopping_mall_payments table and related entities.","summary":"Retrieve detail of a single payment under a specific order (shopping_mall_payments).","parameters":[{"name":"orderId","description":"UUID of the referenced order for context and permission checks.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"UUID of the payment record to fetch; must belong to the given order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full payment record for the given order/paymentId, with business, status, and reconciliation metadata.","typeName":"IShoppingMallPayment"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/orders/{orderId}/payments/{paymentId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before retrieving details of a payment associated with the order."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/payments","method":"post"},"description":"Payment must be created for the order before its details can be retrieved."}]},{"specification":"Creates a new payment record (application/attempt/initiation) associated with an order. Operates on shopping_mall_payments, linking payment detail to the order with support for payment-type specific options and asynchronous flows. Enforces business validation on payment method, amount, and order context. Records all metadata for compliance and reconciliation.","description":"This endpoint allows authorized users to initiate a new payment against an order, specifying all required details such as payment type, amount, customer identity, and optional external references. The system performs validation on payment rules: matching allowed payment methods, checking maximum/minimum values, and ensuring no redundant or conflicting payments for the order.\n\nUpon success, creates a payment record in shopping_mall_payments, links it to the order, and returns the created payment with full business context. Async and external (e.g., virtual account) payments must be correctly flagged and all evidence chains preserved. Audit and PCI compliance apply to the request and response bodies.\n\nSecurity and permission checks ensure this operation can only be performed by authorized roles (e.g., customer placing the order, system admin, possibly seller in limited contexts).\n\nIn the event of validation or business rule failure, returns a clear, actionable 400 or 422 error with specific reason and remediation options.","summary":"Create a new payment for an order (shopping_mall_payments) with full business rule validation.","parameters":[{"name":"orderId","description":"UUID of the order for which payment is being initiated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payment creation details: type, amount, customer, settlement data, etc.","typeName":"IShoppingMallPayment.ICreate"},"responseBody":{"description":"Full detail for the newly created payment, matching business, compliance, and audit requirements.","typeName":"IShoppingMallPayment"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/orders/{orderId}/payments","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before a payment can be created and associated with it"},{"endpoint":{"path":"/shoppingMall/customer/carts","method":"post"},"description":"Shopping cart must be created as part of the order creation prerequisite since cart may be converted to order, and customer context is required for payment association"}]},{"specification":"This operation updates an existing payment record associated with an order in the shopping mall system. It targets the 'shopping_mall_payments' table, utilizing both the orderId (referencing the main order) and paymentId (referencing the specific payment to update). This endpoint allows authorized users or administrators to change any mutable fields in the payment record, such as status, confirmation/cancellation times, payment type, or reference fields, based on the business logic for payment updates or corrections. Updates to a payment record may trigger snapshot/audit changes as per regulatory requirements, and actions are fully auditable for compliance. Business logic ensures updates only occur in valid payment lifecycle states, with proper error handling when state transitions are invalid or the payment is locked due to settlement or reconciliation. Only authorized roles (such as admins or designated finance operators) may use this endpoint for changing payment details.","description":"This operation is used to update all mutable fields of a specific payment (referenced by paymentId) belonging to an order (referenced by orderId) in the shopping mall backend. The 'shopping_mall_payments' entity supports business flows such as confirming payments, marking them as refunded or cancelled, updating payment type, or altering reference fields for asynchronous/external settlements. \n\nUpdates are restricted to valid status transitions, and permission checks must ensure only authorized roles (admin, finance) can perform these modifications. All operations are logged for auditability, and a payment snapshot may be created after the update for compliance. The system will reject updates that attempt to modify immutable fields or transition the payment to illegal states (e.g., marking already settled payments as pending).\n\nThe underlying schema ensures payment records have strong referential binding to orders and customers. Related endpoints allow for payment state transitions, snapshot retrievals, and audit trail inspection. Clients must provide a well-formed update body according to payment business rules and data type constraints.\n\nRelated operations include retrieving specific payments (GET), listing all payments for an order, or creating payment snapshots to preserve history. Errors may occur if referenced orderId/paymentId are not found, or if business rule validation fails.","summary":"Update a specific payment record under an order (shopping_mall_payments).","parameters":[{"name":"orderId","description":"Unique identifier of the order containing the payment to update.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the payment to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Properties to update for the specified payment record. Only mutable fields are accepted.","typeName":"IShoppingMallPayment.IUpdate"},"responseBody":{"description":"The updated payment record with all relevant properties reflecting the applied changes.","typeName":"IShoppingMallPayment"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/orders/{orderId}/payments/{paymentId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before updating an associated payment"},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/payments","method":"post"},"description":"Payment record must already exist under the order to be updated"}]},{"specification":"This operation removes a payment record from the system under a specific order, targeting the 'shopping_mall_payments' table. Payments in the shopping mall backend are typically subject to soft-delete for audit/evidence compliance—'deleted_at' is set and the record remains for regulatory traceability. Only authorized administrative roles can perform this operation. Hard deletion is not performed, preserving the integrity of financial and audit histories. The operation references both orderId (parent order) and paymentId (target payment). This deletion may cascade soft-removal to related payment snapshots. All actions are fully logged for compliance. If the payment does not exist, is already deleted, or cannot be deleted due to immutable state (e.g., reconciled/payment settled), the request is rejected with an appropriate error.","description":"This endpoint soft-deletes a specific payment record (by paymentId) associated with a given order (by orderId) in the shopping mall backend. Payment records are never physically destroyed; instead, the 'deleted_at' timestamp is set for regulatory compliance and audit trail preservation. Only users with administrative permissions may access this operation, and all actions are fully auditable.\n\nBusiness rules ensure that only payments that are not fully reconciled or settled may be logically deleted; otherwise, an error is returned. The system maintains references to related audit/snapshot records and updates payment status upon soft deletion. This operation is critical for compliance environments where financial records cannot be hard deleted.\n\nIf either the payment or the order is not found, or if the payment is locked from deletion due to settlement or ongoing dispute, the request fails and an error describing the problem is provided.","summary":"Soft-delete a specific payment in an order (sets deleted_at on shopping_mall_payments).","parameters":[{"name":"orderId","description":"Unique identifier of the order containing the payment to delete.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the payment to be soft-deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/orders/{orderId}/payments/{paymentId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before deleting an associated payment"},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/payments","method":"post"},"description":"Payment record must be created for the order before it can be deleted"}]},{"specification":"This operation retrieves a paginated list of historical payment snapshots for a given payment (paymentId) under a specific order (orderId) from the 'shopping_mall_payment_snapshots' table. Snapshots support audit/compliance needs and provide evidence for every change or event that affected a payment record over its lifecycle (e.g., creation, update, cancellation, refund). Supports advanced filtering, sorting, and pagination, returning detailed snapshot data for investigations or regulatory export. Accessible only to authorized administrative users.","description":"This endpoint provides a filtered and paginated collection of all historical snapshots for a particular payment (paymentId), under a specific order (orderId). The underlying table, 'shopping_mall_payment_snapshots', stores complete, immutable records of payment states at each significant event—creation, processing, confirmation, update, or deletion. Used for audit, compliance, and dispute investigation.\n\nSupports advanced search by snapshot timestamp, event type (if referenced in the data), and free-text filtering where implemented. Pagination options prevent overload from large audit histories. Only admin roles may access detailed payment snapshots due to sensitive business and personal data. Typical usage scenarios include financial audit, compliance reviews, fraud investigations, and operational support. Related endpoints allow access to the current payment record, as well as creation and update flows for payment entries.\n\nErrors result from missing payment references, invalid order/payment IDs, or out-of-bounds pagination parameters. Output includes all key business/archive fields for reconstructing payment history as required by regulatory or dispute processes.","summary":"Search payment snapshot history for a payment under an order (shopping_mall_payment_snapshots).","parameters":[{"name":"orderId","description":"Unique identifier of the order containing the referenced payment.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the payment whose snapshots are being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for payment snapshot filtering.","typeName":"IShoppingMallPaymentSnapshot.IRequest"},"responseBody":{"description":"Paginated list of payment snapshot records matching the search criteria.","typeName":"IPageIShoppingMallPaymentSnapshot"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/orders/{orderId}/payments/{paymentId}/snapshots","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before listing or searching payment snapshots"},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/payments","method":"post"},"description":"Payment must exist before its history/snapshots can be queried"}]},{"specification":"This operation retrieves the details of a single payment snapshot for a given payment (paymentId) in a specific order (orderId), targeting the 'shopping_mall_payment_snapshots' table. The snapshotId parameter specifies the exact snapshot to be retrieved, identified by its system-unique UUID. The endpoint returns all data fields for the snapshot, enabling full reconstruction of the payment state at a key lifecycle event. Access is restricted to administrative roles for audit, investigation, and compliance purposes. If any referenced entity is missing or access is unauthorized, an error is returned.","description":"This endpoint allows an authorized admin to fetch all information about one specific payment snapshot, designated by snapshotId, for a payment (by paymentId) within an order (by orderId). Payment snapshots capture full immutable records of the payment at each critical state transition for evidence and compliance, such as payment request, confirmation, cancellation, or refund events. \n\nThe result includes all business fields and compliance/audit meta as serialized at the time the snapshot was created. Typical scenarios include dispute resolution, audit export, and compliance reporting. Appropriate error messages are returned if any referenced record is not found, or if authorization rules are not met. Related endpoints enable listing all snapshots or retrieving the latest active payment record.","summary":"Retrieve a specific payment snapshot for a payment in an order (shopping_mall_payment_snapshots).","parameters":[{"name":"orderId","description":"Unique identifier of the order containing the referenced payment.","schema":{"type":"string","format":"uuid"}},{"name":"paymentId","description":"Unique identifier of the payment whose snapshot is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"snapshotId","description":"Unique identifier of the payment snapshot record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full record for the specified payment snapshot, including business data and evidence meta.","typeName":"IShoppingMallPaymentSnapshot"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/orders/{orderId}/payments/{paymentId}/snapshots/{snapshotId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before accessing payment information or any payment snapshots for the order."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/payments","method":"post"},"description":"Payment must be created for the order before a payment snapshot can exist and be retrieved."}]},{"specification":"This operation retrieves a paginated, filterable list of all shipment records related to a specific order. It operates on the shopping_mall_shipments table in the Prisma schema. It supports filtering, searching, and sorting based on shipment status, carrier, tracking number, and shipment timestamps, as well as internal business metadata. Results include details for shipment batches, their delivery status, assigned sellers, and shipment analytics, providing a comprehensive fulfillment overview for both customers and sellers. Pagination options allow scalable browsing of shipment history, supporting complex order workflows such as split/partial shipments, auditability, and after-sales tracking. Only shipments belonging to the specified orderId are returned. Each shipment summary references its relationship with order items and the responsible seller.","description":"This endpoint allows an authenticated user (customer, seller, or admin) to retrieve a paginated and optionally filtered set of all shipment records for a given order (identified by orderId).\n\nSecurity permissions are enforced such that only actors with legitimate access to the specified order can view its shipments. Customers can access only their own orders, sellers only their handled items, and admins have global access. The operation returns shipment summaries including status, tracking numbers, delivery windows, seller info, and per-shipment analytics. Detailed filtering options enable users to analyze fulfillment performance, identify delays, or reconcile after-sales disputes.\n\nThe operation is tightly coupled with the shopping_mall_shipments database model, and supports integration with delivery and after-sales modules. Errors such as unauthorized access or invalid orderId are handled with appropriate status codes and audit logging. Results are returned as paginated collections for performance, and may be used together with shipment detail views or shipment update endpoints as part of a full order management workflow.","summary":"Retrieve a paginated list of shipment batches for a specific order from shopping_mall_shipments","parameters":[{"name":"orderId","description":"Unique identifier of the target order to get shipments for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter options for shipment records, as well as pagination and sorting controls","typeName":"IShoppingMallShipment.IRequest"},"responseBody":{"description":"Paginated shipment summaries for the specified orderId based on filter criteria","typeName":"IPageIShoppingMallShipment.ISummary"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/customer/orders/{orderId}/shipments","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before retrieving or managing shipments related to that order."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"At least one shipment batch must be registered for the order before shipment retrieval is meaningful."}]},{"specification":"This operation retrieves a paginated, filterable list of all shipment records related to a specific order. It operates on the shopping_mall_shipments table in the Prisma schema. It supports filtering, searching, and sorting based on shipment status, carrier, tracking number, and shipment timestamps, as well as internal business metadata. Results include details for shipment batches, their delivery status, assigned sellers, and shipment analytics, providing a comprehensive fulfillment overview for both customers and sellers. Pagination options allow scalable browsing of shipment history, supporting complex order workflows such as split/partial shipments, auditability, and after-sales tracking. Only shipments belonging to the specified orderId are returned. Each shipment summary references its relationship with order items and the responsible seller.","description":"This endpoint allows an authenticated user (customer, seller, or admin) to retrieve a paginated and optionally filtered set of all shipment records for a given order (identified by orderId).\n\nSecurity permissions are enforced such that only actors with legitimate access to the specified order can view its shipments. Customers can access only their own orders, sellers only their handled items, and admins have global access. The operation returns shipment summaries including status, tracking numbers, delivery windows, seller info, and per-shipment analytics. Detailed filtering options enable users to analyze fulfillment performance, identify delays, or reconcile after-sales disputes.\n\nThe operation is tightly coupled with the shopping_mall_shipments database model, and supports integration with delivery and after-sales modules. Errors such as unauthorized access or invalid orderId are handled with appropriate status codes and audit logging. Results are returned as paginated collections for performance, and may be used together with shipment detail views or shipment update endpoints as part of a full order management workflow.","summary":"Retrieve a paginated list of shipment batches for a specific order from shopping_mall_shipments","parameters":[{"name":"orderId","description":"Unique identifier of the target order to get shipments for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter options for shipment records, as well as pagination and sorting controls","typeName":"IShoppingMallShipment.IRequest"},"responseBody":{"description":"Paginated shipment summaries for the specified orderId based on filter criteria","typeName":"IPageIShoppingMallShipment.ISummary"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/seller/orders/{orderId}/shipments","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before retrieving or managing shipments related to that order."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"At least one shipment batch must be registered for the order before shipment retrieval is meaningful."}]},{"specification":"This operation retrieves a paginated, filterable list of all shipment records related to a specific order. It operates on the shopping_mall_shipments table in the Prisma schema. It supports filtering, searching, and sorting based on shipment status, carrier, tracking number, and shipment timestamps, as well as internal business metadata. Results include details for shipment batches, their delivery status, assigned sellers, and shipment analytics, providing a comprehensive fulfillment overview for both customers and sellers. Pagination options allow scalable browsing of shipment history, supporting complex order workflows such as split/partial shipments, auditability, and after-sales tracking. Only shipments belonging to the specified orderId are returned. Each shipment summary references its relationship with order items and the responsible seller.","description":"This endpoint allows an authenticated user (customer, seller, or admin) to retrieve a paginated and optionally filtered set of all shipment records for a given order (identified by orderId).\n\nSecurity permissions are enforced such that only actors with legitimate access to the specified order can view its shipments. Customers can access only their own orders, sellers only their handled items, and admins have global access. The operation returns shipment summaries including status, tracking numbers, delivery windows, seller info, and per-shipment analytics. Detailed filtering options enable users to analyze fulfillment performance, identify delays, or reconcile after-sales disputes.\n\nThe operation is tightly coupled with the shopping_mall_shipments database model, and supports integration with delivery and after-sales modules. Errors such as unauthorized access or invalid orderId are handled with appropriate status codes and audit logging. Results are returned as paginated collections for performance, and may be used together with shipment detail views or shipment update endpoints as part of a full order management workflow.","summary":"Retrieve a paginated list of shipment batches for a specific order from shopping_mall_shipments","parameters":[{"name":"orderId","description":"Unique identifier of the target order to get shipments for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and filter options for shipment records, as well as pagination and sorting controls","typeName":"IShoppingMallShipment.IRequest"},"responseBody":{"description":"Paginated shipment summaries for the specified orderId based on filter criteria","typeName":"IPageIShoppingMallShipment.ISummary"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before retrieving or managing shipments related to that order."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"At least one shipment batch must be registered for the order before shipment retrieval is meaningful."}]},{"specification":"This operation retrieves a detailed information record for a single shipment batch associated with a specific order. It operates on the shopping_mall_shipments table, and returns extensive details about the shipment, such as status history, tracking codes, fulfillment events, carrier info, seller, and shipment item mapping. It allows stakeholders—customer, seller, or admin—to inspect the fulfillment state of a particular shipment instance for logistics monitoring, after-sales claims, or audit purposes. The shipmentId must be valid and must correspond to a shipment belonging to the specified orderId.","description":"This endpoint provides granular shipment details for a specified shipmentId within its parent order (orderId). It enforces strong security so that only stakeholders associated with the order (customer, assigned seller, admin) may retrieve the detail.\n\nThe returned record includes the shipment’s status, all associated shipment items, carrier/tracking links, timestamps for status transitions (requested, shipped, delivered, etc), seller identity, and analytics/meta. Error handling covers not-found, not-belonging-to-order, or unauthorized access cases. This endpoint supports logistics traceability, customer inquiry response, and after-sales case management. The result is primarily consumed in shipment detail views and order history pages.","summary":"Get detailed information on a specific order shipment (shopping_mall_shipments)","parameters":[{"name":"orderId","description":"Unique identifier of the order that includes the specified shipment","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the shipment batch to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shipment information for a single shipment batch, including seller, carrier, and fulfillment mapping","typeName":"IShoppingMallShipment"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/customer/orders/{orderId}/shipments/{shipmentId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before shipment details can be retrieved"},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"Shipment must be registered under the specified order before its detailed information can be retrieved"}]},{"specification":"This operation retrieves a detailed information record for a single shipment batch associated with a specific order. It operates on the shopping_mall_shipments table, and returns extensive details about the shipment, such as status history, tracking codes, fulfillment events, carrier info, seller, and shipment item mapping. It allows stakeholders—customer, seller, or admin—to inspect the fulfillment state of a particular shipment instance for logistics monitoring, after-sales claims, or audit purposes. The shipmentId must be valid and must correspond to a shipment belonging to the specified orderId.","description":"This endpoint provides granular shipment details for a specified shipmentId within its parent order (orderId). It enforces strong security so that only stakeholders associated with the order (customer, assigned seller, admin) may retrieve the detail.\n\nThe returned record includes the shipment’s status, all associated shipment items, carrier/tracking links, timestamps for status transitions (requested, shipped, delivered, etc), seller identity, and analytics/meta. Error handling covers not-found, not-belonging-to-order, or unauthorized access cases. This endpoint supports logistics traceability, customer inquiry response, and after-sales case management. The result is primarily consumed in shipment detail views and order history pages.","summary":"Get detailed information on a specific order shipment (shopping_mall_shipments)","parameters":[{"name":"orderId","description":"Unique identifier of the order that includes the specified shipment","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the shipment batch to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shipment information for a single shipment batch, including seller, carrier, and fulfillment mapping","typeName":"IShoppingMallShipment"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before shipment details can be retrieved"},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"Shipment must be registered under the specified order before its detailed information can be retrieved"}]},{"specification":"This operation retrieves a detailed information record for a single shipment batch associated with a specific order. It operates on the shopping_mall_shipments table, and returns extensive details about the shipment, such as status history, tracking codes, fulfillment events, carrier info, seller, and shipment item mapping. It allows stakeholders—customer, seller, or admin—to inspect the fulfillment state of a particular shipment instance for logistics monitoring, after-sales claims, or audit purposes. The shipmentId must be valid and must correspond to a shipment belonging to the specified orderId.","description":"This endpoint provides granular shipment details for a specified shipmentId within its parent order (orderId). It enforces strong security so that only stakeholders associated with the order (customer, assigned seller, admin) may retrieve the detail.\n\nThe returned record includes the shipment’s status, all associated shipment items, carrier/tracking links, timestamps for status transitions (requested, shipped, delivered, etc), seller identity, and analytics/meta. Error handling covers not-found, not-belonging-to-order, or unauthorized access cases. This endpoint supports logistics traceability, customer inquiry response, and after-sales case management. The result is primarily consumed in shipment detail views and order history pages.","summary":"Get detailed information on a specific order shipment (shopping_mall_shipments)","parameters":[{"name":"orderId","description":"Unique identifier of the order that includes the specified shipment","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the shipment batch to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed shipment information for a single shipment batch, including seller, carrier, and fulfillment mapping","typeName":"IShoppingMallShipment"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before shipment details can be retrieved"},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"Shipment must be registered under the specified order before its detailed information can be retrieved"}]},{"specification":"This operation allows an authorized stakeholder (typically a seller fulfilling the order, or an admin overseeing logistics) to register a new shipment batch for an order. It operates on the shopping_mall_shipments table, inserting a new row with provided batch data—such as seller, carrier, items, and shipment tracking details. Supports creation of split/partial shipments, allowing for complex fulfillment scenarios and asynchronous/batch processing. Business rules enforce that only approved sellers for given order items or authorized admins can register a new shipment batch for a legitimate, in-progress order, and that all required shipment fields are supplied.","description":"An authenticated seller (responsible for fulfillment of items in a given order) or an admin can use this operation to create/register a new shipment record for an order, such as for partial shipments or multi-phase deliveries. The input must include detailed batch and fulfillment data: seller, carrier, items, tracking code, and relevant timestamps. The system validates that the order is eligible for shipment, and enforces permissions so that sellers can create shipments only for items they manage.\n\nUpon successful creation, a new shipment row is recorded to shopping_mall_shipments, with all initial fulfillment metadata. Downstream modules (delivery, after-sales, analytics) can then be triggered. The endpoint returns the full created shipment record, or appropriate error details if business rules are violated (e.g., unauthorized, order state, assignment mismatch, missing required fields). This endpoint is central to complex fulfillment workflows such as multi-seller, split, or staged delivery scenarios.","summary":"Register a new shipment batch for an order in shopping_mall_shipments","parameters":[{"name":"orderId","description":"Unique identifier of the order for which shipment is being created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full creation information for the order shipment batch (seller, carrier, items, tracking info, meta)","typeName":"IShoppingMallShipment.ICreate"},"responseBody":{"description":"Information record of the newly created shipment batch associated with the given order","typeName":"IShoppingMallShipment"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/seller/orders/{orderId}/shipments","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before registering a new shipment batch for the order"}]},{"specification":"This operation allows an authorized stakeholder (typically a seller fulfilling the order, or an admin overseeing logistics) to register a new shipment batch for an order. It operates on the shopping_mall_shipments table, inserting a new row with provided batch data—such as seller, carrier, items, and shipment tracking details. Supports creation of split/partial shipments, allowing for complex fulfillment scenarios and asynchronous/batch processing. Business rules enforce that only approved sellers for given order items or authorized admins can register a new shipment batch for a legitimate, in-progress order, and that all required shipment fields are supplied.","description":"An authenticated seller (responsible for fulfillment of items in a given order) or an admin can use this operation to create/register a new shipment record for an order, such as for partial shipments or multi-phase deliveries. The input must include detailed batch and fulfillment data: seller, carrier, items, tracking code, and relevant timestamps. The system validates that the order is eligible for shipment, and enforces permissions so that sellers can create shipments only for items they manage.\n\nUpon successful creation, a new shipment row is recorded to shopping_mall_shipments, with all initial fulfillment metadata. Downstream modules (delivery, after-sales, analytics) can then be triggered. The endpoint returns the full created shipment record, or appropriate error details if business rules are violated (e.g., unauthorized, order state, assignment mismatch, missing required fields). This endpoint is central to complex fulfillment workflows such as multi-seller, split, or staged delivery scenarios.","summary":"Register a new shipment batch for an order in shopping_mall_shipments","parameters":[{"name":"orderId","description":"Unique identifier of the order for which shipment is being created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full creation information for the order shipment batch (seller, carrier, items, tracking info, meta)","typeName":"IShoppingMallShipment.ICreate"},"responseBody":{"description":"Information record of the newly created shipment batch associated with the given order","typeName":"IShoppingMallShipment"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before a shipment batch can be registered for it"}]},{"specification":"This operation allows an authorized actor (the seller who manages the shipment or an administrator) to update shipment batch information for a specific shipmentId under a given orderId. Updates may cover carrier info, tracking numbers, status transitions (e.g., shipped, delivered, cancelled), and shipment item lists. Business rules ensure that only the shipping seller or admins can modify batch details, and that shipment updates respect order state, shipment immutability rules, and audit requirements. The update is only allowed on shipments the actor has authority over, and enforces compliance for logistics records and after-sales workflows. All updates are versioned for auditability in shopping_mall_shipments.","description":"This endpoint enables the updating of a shipment batch within an order. It is available to the responsible seller or system administrator. Supported updates include shipping carrier, tracking codes, fulfillment status, shipment items, and delivery info. The system enforces that only the authorized actor can perform updates and that the shipmentId actually belongs to the specified orderId.\n\nImmutable fields (IDs, seller) cannot be changed. Errors are returned if unauthorized, if the shipment cannot be updated due to business or audit rules (e.g., already delivered, locked by dispute), or if the supplied data is incomplete. All changes are snapshotted for subsequent audit, dispute, and compliance access. Success returns the updated shipment entity; failures return error details, with relevant business and security context.\n\nThis operation is a key part of order fulfillment, shipping event tracking, and after-sales management workflows.","summary":"Update shipment batch details for specific order shipment in shopping_mall_shipments","parameters":[{"name":"orderId","description":"Unique identifier for the order containing the shipment","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the shipment batch to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the shipment batch (status, tracking, items, carrier, meta)","typeName":"IShoppingMallShipment.IUpdate"},"responseBody":{"description":"Shipment batch with updated information as stored after the operation","typeName":"IShoppingMallShipment"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"A shipment batch must exist for the order before its details can be updated"}]},{"specification":"This operation allows an authorized actor (the seller who manages the shipment or an administrator) to update shipment batch information for a specific shipmentId under a given orderId. Updates may cover carrier info, tracking numbers, status transitions (e.g., shipped, delivered, cancelled), and shipment item lists. Business rules ensure that only the shipping seller or admins can modify batch details, and that shipment updates respect order state, shipment immutability rules, and audit requirements. The update is only allowed on shipments the actor has authority over, and enforces compliance for logistics records and after-sales workflows. All updates are versioned for auditability in shopping_mall_shipments.","description":"This endpoint enables the updating of a shipment batch within an order. It is available to the responsible seller or system administrator. Supported updates include shipping carrier, tracking codes, fulfillment status, shipment items, and delivery info. The system enforces that only the authorized actor can perform updates and that the shipmentId actually belongs to the specified orderId.\n\nImmutable fields (IDs, seller) cannot be changed. Errors are returned if unauthorized, if the shipment cannot be updated due to business or audit rules (e.g., already delivered, locked by dispute), or if the supplied data is incomplete. All changes are snapshotted for subsequent audit, dispute, and compliance access. Success returns the updated shipment entity; failures return error details, with relevant business and security context.\n\nThis operation is a key part of order fulfillment, shipping event tracking, and after-sales management workflows.","summary":"Update shipment batch details for specific order shipment in shopping_mall_shipments","parameters":[{"name":"orderId","description":"Unique identifier for the order containing the shipment","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the shipment batch to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the shipment batch (status, tracking, items, carrier, meta)","typeName":"IShoppingMallShipment.IUpdate"},"responseBody":{"description":"Shipment batch with updated information as stored after the operation","typeName":"IShoppingMallShipment"},"authorizationRoles":["seller","admin"],"name":"update","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"A shipment batch must exist for the order before its details can be updated"}]},{"specification":"This operation deletes a shipment from a specific order. It operates on the shopping_mall_shipments and shopping_mall_orders tables. Hard deletion is not performed; instead, the shipment's deleted_at field is set to the deletion timestamp to maintain full compliance with audit, rollback, and regulatory evidence. This ensures that no physical data is lost and all shipment and order relationships remain intact for dispute, compliance, or historical viewing purposes. Deletion of a shipment also affects associated shipment items tied to that shipment, and all business logic and consistency checks are handled before soft deletion—such as prohibiting deletion of shipments in non-cancelled or critical fulfillment states.","description":"This API operation allows an authorized user to logically delete (soft delete) a shipment associated with an order. The endpoint sets the deleted_at field on the targeted shipment record but does not physically remove the data, in full alignment with compliance, audit, and system evidence requirements defined in the shopping_mall_shipments Prisma schema. \n\nOnly authenticated users with proper permissions can execute this operation, typically sellers responsible for the shipment, or administrators overseeing the order. Business rules are enforced—shipments may only be deleted if not yet shipped or in certain cancelable states; attempts to delete active, shipping, or delivered shipments should be blocked, with error feedback returned detailing the violation. When a shipment with associated shipment items is deleted, those items are not deleted but their relationships are preserved for auditability.\n\nFor comprehensive audit, the system also records the deletion event in compliance logs. Related endpoints include shipment creation, update, listing, and retrieval; updates or deletions will reflect in order fulfillment progress. Error cases include attempts to delete non-existent shipments, already-deleted shipments, or shipments not tied to the specified order.","summary":"Logically delete (soft delete) a specific shipment belonging to an order. Associated with shopping_mall_shipments and shopping_mall_orders.","parameters":[{"name":"orderId","description":"Unique identifier of the target order containing the shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment to be deleted logically.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"A shipment batch must exist before it can be logically (soft) deleted"}]},{"specification":"This operation deletes a shipment from a specific order. It operates on the shopping_mall_shipments and shopping_mall_orders tables. Hard deletion is not performed; instead, the shipment's deleted_at field is set to the deletion timestamp to maintain full compliance with audit, rollback, and regulatory evidence. This ensures that no physical data is lost and all shipment and order relationships remain intact for dispute, compliance, or historical viewing purposes. Deletion of a shipment also affects associated shipment items tied to that shipment, and all business logic and consistency checks are handled before soft deletion—such as prohibiting deletion of shipments in non-cancelled or critical fulfillment states.","description":"This API operation allows an authorized user to logically delete (soft delete) a shipment associated with an order. The endpoint sets the deleted_at field on the targeted shipment record but does not physically remove the data, in full alignment with compliance, audit, and system evidence requirements defined in the shopping_mall_shipments Prisma schema. \n\nOnly authenticated users with proper permissions can execute this operation, typically sellers responsible for the shipment, or administrators overseeing the order. Business rules are enforced—shipments may only be deleted if not yet shipped or in certain cancelable states; attempts to delete active, shipping, or delivered shipments should be blocked, with error feedback returned detailing the violation. When a shipment with associated shipment items is deleted, those items are not deleted but their relationships are preserved for auditability.\n\nFor comprehensive audit, the system also records the deletion event in compliance logs. Related endpoints include shipment creation, update, listing, and retrieval; updates or deletions will reflect in order fulfillment progress. Error cases include attempts to delete non-existent shipments, already-deleted shipments, or shipments not tied to the specified order.","summary":"Logically delete (soft delete) a specific shipment belonging to an order. Associated with shopping_mall_shipments and shopping_mall_orders.","parameters":[{"name":"orderId","description":"Unique identifier of the target order containing the shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment to be deleted logically.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"The shipment must be created before it can be logically deleted from an order."}]},{"specification":"This operation retrieves a paginated and filterable list of shipment items (shopping_mall_shipment_items) for a given order and shipment. Uses business rules to support advanced search, filtering (e.g., by order item, status, product, seller), and sorting based on creation date or other business relevance. Built to handle large orders/shipment batches efficiently for operational and audit purposes.","description":"This API allows users to retrieve a filtered, paginated list of shipment items associated with a specific order and shipment. The operation supports advanced search and filtering, taking advantage of the shopping_mall_shipment_items schema's structure—for example, filtering by referenced order items, quantity, shipment batch, or item creation date. It is optimized for large-scale batch shipments as common in enterprise commerce flows.\n\nAuthorization is required; typically, sellers responsible for the shipment, order owners, or admins may invoke this endpoint. Pagination parameters, complex filters, and sorting options (by created_at, product, fulfillment state) are supported via the request body. The response returns a paginated list including details for each shipment item, supporting business process integration and audit/compliance review.\n\nSecurity considerations include ensuring that only actors linked to the relevant order, shipment, or fulfillment process can access this list. Related endpoints include the ability to retrieve a single item, add shipment items, update shipment item quantities, or remove shipment items from a batch.","summary":"Filter and retrieve a paginated list of shipment items for a specific order shipment. Associated with shopping_mall_shipment_items.","parameters":[{"name":"orderId","description":"Unique identifier for the order containing the shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the shipment whose items are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter, pagination, and sorting criteria for searching shipment items of a shipment.","typeName":"IShoppingMallShipmentItem.IRequest"},"responseBody":{"description":"Paginated, filterable list of shipment items matched against the search criteria.","typeName":"IPageIShoppingMallShipmentItem"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}/items","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"A shipment must be created for the order before you can list or filter shipment items within it."}]},{"specification":"This operation retrieves a paginated and filterable list of shipment items (shopping_mall_shipment_items) for a given order and shipment. Uses business rules to support advanced search, filtering (e.g., by order item, status, product, seller), and sorting based on creation date or other business relevance. Built to handle large orders/shipment batches efficiently for operational and audit purposes.","description":"This API allows users to retrieve a filtered, paginated list of shipment items associated with a specific order and shipment. The operation supports advanced search and filtering, taking advantage of the shopping_mall_shipment_items schema's structure—for example, filtering by referenced order items, quantity, shipment batch, or item creation date. It is optimized for large-scale batch shipments as common in enterprise commerce flows.\n\nAuthorization is required; typically, sellers responsible for the shipment, order owners, or admins may invoke this endpoint. Pagination parameters, complex filters, and sorting options (by created_at, product, fulfillment state) are supported via the request body. The response returns a paginated list including details for each shipment item, supporting business process integration and audit/compliance review.\n\nSecurity considerations include ensuring that only actors linked to the relevant order, shipment, or fulfillment process can access this list. Related endpoints include the ability to retrieve a single item, add shipment items, update shipment item quantities, or remove shipment items from a batch.","summary":"Filter and retrieve a paginated list of shipment items for a specific order shipment. Associated with shopping_mall_shipment_items.","parameters":[{"name":"orderId","description":"Unique identifier for the order containing the shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the shipment whose items are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter, pagination, and sorting criteria for searching shipment items of a shipment.","typeName":"IShoppingMallShipmentItem.IRequest"},"responseBody":{"description":"Paginated, filterable list of shipment items matched against the search criteria.","typeName":"IPageIShoppingMallShipmentItem"},"authorizationRoles":["seller","admin"],"name":"index","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}/items","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"A shipment must be created for the order before you can list or filter shipment items within it."}]},{"specification":"Retrieve the details of a specific shipment item (shopping_mall_shipment_items) by its identifier, tied to both the specific order and shipment. Returns all shipment item information for operational, fulfillment, and audit purposes. The operation checks relationship integrity (that the item indeed belongs to the referenced shipment and order).","description":"This API returns the complete detailed information of a shipment item given its identifier, enforcing that the requested item exists under the specified order and shipment through strict referential checks. Shipment items (shopping_mall_shipment_items) track the number of units shipped for an order item in a specific shipment batch and are critical for batch fulfillment and downstream tracking. This operation supports operational, fulfillment, customer service, and compliance use cases.\n\nPermission checks are enforced: only sellers fulfilling the order, associated admins, or order owners can access the full shipment item details. The response structure includes all relevant attributes as described in the Prisma schema: shipped_quantity, references to shipments and order items, audit metadata (created_at/updated_at), etc. Error handling returns clear responses for missing items, misreferenced shipments, or unauthorized access.\n\nCommonly paired with the shipment items list endpoint, as well as create/update operations for batch shipment management and fulfillment control.","summary":"Retrieve full details for a specific shipment item within an order's shipment. Associated with shopping_mall_shipment_items.","parameters":[{"name":"orderId","description":"Unique identifier for the related order.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the targeted shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentItemId","description":"Unique identifier for the shipment item within the batch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the requested shipment item, including references, quantity, and audit metadata.","typeName":"IShoppingMallShipmentItem"},"authorizationRoles":["seller","admin"],"name":"at","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}/items/{shipmentItemId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"A shipment must be created for the order before you can retrieve specific shipment item details from it."}]},{"specification":"Retrieve the details of a specific shipment item (shopping_mall_shipment_items) by its identifier, tied to both the specific order and shipment. Returns all shipment item information for operational, fulfillment, and audit purposes. The operation checks relationship integrity (that the item indeed belongs to the referenced shipment and order).","description":"This API returns the complete detailed information of a shipment item given its identifier, enforcing that the requested item exists under the specified order and shipment through strict referential checks. Shipment items (shopping_mall_shipment_items) track the number of units shipped for an order item in a specific shipment batch and are critical for batch fulfillment and downstream tracking. This operation supports operational, fulfillment, customer service, and compliance use cases.\n\nPermission checks are enforced: only sellers fulfilling the order, associated admins, or order owners can access the full shipment item details. The response structure includes all relevant attributes as described in the Prisma schema: shipped_quantity, references to shipments and order items, audit metadata (created_at/updated_at), etc. Error handling returns clear responses for missing items, misreferenced shipments, or unauthorized access.\n\nCommonly paired with the shipment items list endpoint, as well as create/update operations for batch shipment management and fulfillment control.","summary":"Retrieve full details for a specific shipment item within an order's shipment. Associated with shopping_mall_shipment_items.","parameters":[{"name":"orderId","description":"Unique identifier for the related order.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the targeted shipment.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentItemId","description":"Unique identifier for the shipment item within the batch.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the requested shipment item, including references, quantity, and audit metadata.","typeName":"IShoppingMallShipmentItem"},"authorizationRoles":["seller","admin"],"name":"at","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}/items/{shipmentItemId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}/items","method":"post"},"description":"The shipment item must exist before it can be retrieved by its identifier."}]},{"specification":"Add a new shipment item (shopping_mall_shipment_items) to an existing shipment as part of a specific order's fulfillment. The operation validates business logic—ensures the item hasn't already been added, that it references valid order items, and that all quantities are legal per order and inventory constraints. Creates the new shipment item record, returning the created entity details.","description":"This API operation creates and adds a new shipment item to the specified shipment of an order. Shipment items represent the discrete quantities of ordered products that are included in a shipment batch and are crucial for supporting complex shipment, tracking, and fulfillment business flows common in large e-commerce platforms.\n\nThe request body must include the required details matching the IShoppingMallShipmentItem.ICreate contract (including which order item is to be marked as shipped, the quantity, and associated product/variant references). Business validation ensures the item is part of the referenced order, is not already fully shipped, and the addition does not violate inventory or order integrity constraints. Errors are returned for attempts to over-ship items, reference non-existent entities, or business rule violations.\n\nAuthorization is restricted to sellers handling fulfillment and system administrators. Upon success, the created shipment item record is returned for UI updating, downstream automation, and audit history. Audit and compliance are ensured by recording all event metadata and linking to relevant order/shipment/fulfillment chains.","summary":"Add a new shipment item to a specific shipment within an order. Associated with shopping_mall_shipment_items.","parameters":[{"name":"orderId","description":"Unique identifier for the target order under which the shipment is being managed.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the parent shipment to which the item will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation request with order item reference, product/variant info, and shipped quantity.","typeName":"IShoppingMallShipmentItem.ICreate"},"responseBody":{"description":"The created shipment item record, including audit fields and references.","typeName":"IShoppingMallShipmentItem"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}/items","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"The parent shipment must be created before adding a shipment item to it."}]},{"specification":"Add a new shipment item (shopping_mall_shipment_items) to an existing shipment as part of a specific order's fulfillment. The operation validates business logic—ensures the item hasn't already been added, that it references valid order items, and that all quantities are legal per order and inventory constraints. Creates the new shipment item record, returning the created entity details.","description":"This API operation creates and adds a new shipment item to the specified shipment of an order. Shipment items represent the discrete quantities of ordered products that are included in a shipment batch and are crucial for supporting complex shipment, tracking, and fulfillment business flows common in large e-commerce platforms.\n\nThe request body must include the required details matching the IShoppingMallShipmentItem.ICreate contract (including which order item is to be marked as shipped, the quantity, and associated product/variant references). Business validation ensures the item is part of the referenced order, is not already fully shipped, and the addition does not violate inventory or order integrity constraints. Errors are returned for attempts to over-ship items, reference non-existent entities, or business rule violations.\n\nAuthorization is restricted to sellers handling fulfillment and system administrators. Upon success, the created shipment item record is returned for UI updating, downstream automation, and audit history. Audit and compliance are ensured by recording all event metadata and linking to relevant order/shipment/fulfillment chains.","summary":"Add a new shipment item to a specific shipment within an order. Associated with shopping_mall_shipment_items.","parameters":[{"name":"orderId","description":"Unique identifier for the target order under which the shipment is being managed.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier for the parent shipment to which the item will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation request with order item reference, product/variant info, and shipped quantity.","typeName":"IShoppingMallShipmentItem.ICreate"},"responseBody":{"description":"The created shipment item record, including audit fields and references.","typeName":"IShoppingMallShipmentItem"},"authorizationRoles":["seller","admin"],"name":"create","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}/items","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"The parent shipment must be created before adding a shipment item to it."}]},{"specification":"This operation allows permitted users to update a specific shipment item associated with a given order and shipment. It operates on the 'shopping_mall_shipment_items' table, which represents associations between shipments (shipment batches for an order) and individual order items being shipped. The API enables updating fields such as shipped_quantity for an item within a shipment. All updates are subject to permission checks (seller handling the order, admin roles), business validation (cannot exceed ordered quantity, cannot update after shipment delivered), and audit logging. The path parameters uniquely identify the order, shipment, and shipment item by their UUIDs, which allows precise targeting of the shipment item for editing. This operation is critical for partial fulfillment scenarios, split shipments, or correcting fulfillment errors. Changes to shipment items are recorded for traceability, and the updated entity is returned upon success.","description":"Update a shipment item—a specific item within an order's shipment batch. This enables correcting quantities, handling partial/shipping errors, or administrative adjustments. Shipment items link shipment batches to order items and are fundamental for partial and multi-shipment workflows.\n\nThis operation requires role-based authorization (seller who owns the shipment's items, or admin). Only items in non-finalized shipments (e.g., not yet fully delivered) are editable; once delivered, shipment items are immutable. All quantity updates are validated against ordered and previously shipped amounts, and negative/inconsistent updates are rejected with a detailed error.\n\nUpdates are auditable: on each mutation, a snapshot or audit event is recorded, preserving the before/after states. Related APIs include shipment state transitions (e.g., marking as shipped or delivered), and shipment item creation/cancellation (as supported by business rules). Errors are raised for invalid shipment IDs/order IDs or lack of permission.\n\nRole checks are enforced at the endpoint level. Sellers may only update shipment items for their own goods and only within allowed states; admins may override. All responses include the updated shipment item state for UI confirmation.","summary":"Update a shipment item for a specific order and shipment (shopping_mall_shipment_items table).","parameters":[{"name":"orderId","description":"Unique identifier of the order containing the shipment and shipment item.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment batch for the order.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentItemId","description":"Unique identifier of the shipment item being updated within the shipment batch.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information of the shipment item, such as shipped_quantity and any allowed editable fields.","typeName":"IShoppingMallShipmentItem.IUpdate"},"responseBody":{"description":"The updated shipment item, including all details and audit-relevant fields.","typeName":"IShoppingMallShipmentItem"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}/items/{shipmentItemId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}/items","method":"post"},"description":"The shipment item must exist before it can be updated."}]},{"specification":"This operation allows permitted users to update a specific shipment item associated with a given order and shipment. It operates on the 'shopping_mall_shipment_items' table, which represents associations between shipments (shipment batches for an order) and individual order items being shipped. The API enables updating fields such as shipped_quantity for an item within a shipment. All updates are subject to permission checks (seller handling the order, admin roles), business validation (cannot exceed ordered quantity, cannot update after shipment delivered), and audit logging. The path parameters uniquely identify the order, shipment, and shipment item by their UUIDs, which allows precise targeting of the shipment item for editing. This operation is critical for partial fulfillment scenarios, split shipments, or correcting fulfillment errors. Changes to shipment items are recorded for traceability, and the updated entity is returned upon success.","description":"Update a shipment item—a specific item within an order's shipment batch. This enables correcting quantities, handling partial/shipping errors, or administrative adjustments. Shipment items link shipment batches to order items and are fundamental for partial and multi-shipment workflows.\n\nThis operation requires role-based authorization (seller who owns the shipment's items, or admin). Only items in non-finalized shipments (e.g., not yet fully delivered) are editable; once delivered, shipment items are immutable. All quantity updates are validated against ordered and previously shipped amounts, and negative/inconsistent updates are rejected with a detailed error.\n\nUpdates are auditable: on each mutation, a snapshot or audit event is recorded, preserving the before/after states. Related APIs include shipment state transitions (e.g., marking as shipped or delivered), and shipment item creation/cancellation (as supported by business rules). Errors are raised for invalid shipment IDs/order IDs or lack of permission.\n\nRole checks are enforced at the endpoint level. Sellers may only update shipment items for their own goods and only within allowed states; admins may override. All responses include the updated shipment item state for UI confirmation.","summary":"Update a shipment item for a specific order and shipment (shopping_mall_shipment_items table).","parameters":[{"name":"orderId","description":"Unique identifier of the order containing the shipment and shipment item.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment batch for the order.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentItemId","description":"Unique identifier of the shipment item being updated within the shipment batch.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated information of the shipment item, such as shipped_quantity and any allowed editable fields.","typeName":"IShoppingMallShipmentItem.IUpdate"},"responseBody":{"description":"The updated shipment item, including all details and audit-relevant fields.","typeName":"IShoppingMallShipmentItem"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}/items/{shipmentItemId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}/items","method":"post"},"description":"Shipment item must be created before it can be updated in the shipment batch."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"Shipment must be created before shipment items can be managed within it."},{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before any shipments or shipment items can be associated with it."}]},{"specification":"This operation allows an authorized seller or administrator to remove (logically delete) a shipment item associated with a specific order and shipment. The endpoint operates on the 'shopping_mall_shipment_items' table and enables the removal of a specific item from a shipment batch, identified by its orderId, shipmentId, and shipmentItemId. The logical deletion (soft-delete) sets a deleted_at timestamp, preserving audit evidence and supporting regulatory compliance. Physical deletion is not performed. This operation is necessary for correcting shipping errors, order cancellations for unshipped items, or administrative workflow actions. Only items that are not finalized (not yet shipped/delivered) can be deleted. Attempting to delete items from completed shipments or without proper permission will result in a business error.","description":"Erase a shipment item (row) from a shipment batch within an order. This supports workflows such as cancelling a scheduled shipment item, correcting an incorrectly included item before fulfillment, or handling pre-shipment administrative errors.\n\nOnly authorized users—sellers responsible for the shipment or system administrators—can perform this action. Logical (soft) deletion is applied by setting the deleted_at field, ensuring traceability and compliance with business/audit requirements. The operation is restricted: only shipment items in shipments that are not yet finalized or shipped can be deleted. Any attempt to \"erase\" after shipping will cause security and business validation errors.\n\nAll deletion events are logged for compliance, referencing the snapshot of the shipment item prior to deletion. Related APIs include updating shipment items, shipment batch status transitions, and the parent order management endpoints. Users will receive either a confirmation of successful erasure or an error indicating the operation was not permissible (due to shipment state, insufficient permission, or invalid IDs).","summary":"Erase (logically delete) a shipment item by orderId, shipmentId, and shipmentItemId (shopping_mall_shipment_items table).","parameters":[{"name":"orderId","description":"Unique identifier of the related order.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment batch.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentItemId","description":"Unique identifier of the shipment item to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}/items/{shipmentItemId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/orders/{orderId}/shipments/{shipmentId}/items","method":"post"},"description":"Shipment item must be created before it can be deleted from the shipment batch."},{"endpoint":{"path":"/shoppingMall/seller/orders/{orderId}/shipments","method":"post"},"description":"Shipment must be created before shipment items can be deleted from it."}]},{"specification":"This operation allows an authorized seller or administrator to remove (logically delete) a shipment item associated with a specific order and shipment. The endpoint operates on the 'shopping_mall_shipment_items' table and enables the removal of a specific item from a shipment batch, identified by its orderId, shipmentId, and shipmentItemId. The logical deletion (soft-delete) sets a deleted_at timestamp, preserving audit evidence and supporting regulatory compliance. Physical deletion is not performed. This operation is necessary for correcting shipping errors, order cancellations for unshipped items, or administrative workflow actions. Only items that are not finalized (not yet shipped/delivered) can be deleted. Attempting to delete items from completed shipments or without proper permission will result in a business error.","description":"Erase a shipment item (row) from a shipment batch within an order. This supports workflows such as cancelling a scheduled shipment item, correcting an incorrectly included item before fulfillment, or handling pre-shipment administrative errors.\n\nOnly authorized users—sellers responsible for the shipment or system administrators—can perform this action. Logical (soft) deletion is applied by setting the deleted_at field, ensuring traceability and compliance with business/audit requirements. The operation is restricted: only shipment items in shipments that are not yet finalized or shipped can be deleted. Any attempt to \"erase\" after shipping will cause security and business validation errors.\n\nAll deletion events are logged for compliance, referencing the snapshot of the shipment item prior to deletion. Related APIs include updating shipment items, shipment batch status transitions, and the parent order management endpoints. Users will receive either a confirmation of successful erasure or an error indicating the operation was not permissible (due to shipment state, insufficient permission, or invalid IDs).","summary":"Erase (logically delete) a shipment item by orderId, shipmentId, and shipmentItemId (shopping_mall_shipment_items table).","parameters":[{"name":"orderId","description":"Unique identifier of the related order.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentId","description":"Unique identifier of the shipment batch.","schema":{"type":"string","format":"uuid"}},{"name":"shipmentItemId","description":"Unique identifier of the shipment item to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}/items/{shipmentItemId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments/{shipmentId}/items","method":"post"},"description":"Shipment item must be created before it can be deleted from the shipment batch."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/shipments","method":"post"},"description":"Shipment must be created before shipment items can be deleted from it."}]},{"specification":"This operation retrieves a filtered, paginated list of delivery records associated with a specific order, enabling customers, sellers, and administrators to view the delivery status and history of an order (from the 'shopping_mall_deliveries' table). The PATCH method allows complex search, filtering (by delivery_status, shipment, recipient, etc.), and sorting (by created_at, status, etc.). The request supports pagination and delivery-specific filters, making it suitable for orders with multiple shipment batches or partial deliveries. Security is enforced: customers may only query their own orders, sellers access only their own shipped items, and admins have full access. The response includes delivery summary information, supporting order tracking, fulfillment workflows, and dispute resolution.","description":"Search and paginate deliveries (delivery windows/address records) for a specific order. This is required for tracking multi-shipment orders, split deliveries, and for enabling users to monitor overall delivery status on complex orders.\n\nAdvanced search filters—by status, shipmentId, recipient name, or time period—are supported. Pagination allows efficient retrieval even for orders with many delivery records (e.g., large B2B orders or split/partial shipments). Security filters are applied: customers can view their own orders, sellers can access deliveries related to their own goods, and admins have global access.\n\nReturned fields include recipient information (with privacy controls), delivery status, timing info, snapshot address as at delivery time, shipment references, and any delivery messages (special instructions). The operation is linked to after-sales workflows (returns/exchanges initiated from delivered items) and audit/evidence modules for compliance. All search parameters and response structures align with the shopping_mall_deliveries schema.\n\nRelated APIs include list/search of shipments for an order and detailed delivery view (GET /orders/{orderId}/deliveries/{deliveryId}). Errors include insufficient permission, non-existent order, or invalid filter parameters.","summary":"Search and paginate deliveries associated with an order (shopping_mall_deliveries table).","parameters":[{"name":"orderId","description":"Unique identifier of the order for which deliveries are queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search filters, sorting, and pagination parameters for querying deliveries within an order.","typeName":"IShoppingMallDelivery.IRequest"},"responseBody":{"description":"Paginated list of delivery records matching the search criteria, including summary fields for display or tracking.","typeName":"IPageIShoppingMallDelivery.ISummary"},"authorizationType":null,"authorizationRole":"customer","name":"index","path":"/shoppingMall/customer/orders/{orderId}/deliveries","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before deliveries can be associated or queried with it."}]},{"specification":"This operation retrieves a filtered, paginated list of delivery records associated with a specific order, enabling customers, sellers, and administrators to view the delivery status and history of an order (from the 'shopping_mall_deliveries' table). The PATCH method allows complex search, filtering (by delivery_status, shipment, recipient, etc.), and sorting (by created_at, status, etc.). The request supports pagination and delivery-specific filters, making it suitable for orders with multiple shipment batches or partial deliveries. Security is enforced: customers may only query their own orders, sellers access only their own shipped items, and admins have full access. The response includes delivery summary information, supporting order tracking, fulfillment workflows, and dispute resolution.","description":"Search and paginate deliveries (delivery windows/address records) for a specific order. This is required for tracking multi-shipment orders, split deliveries, and for enabling users to monitor overall delivery status on complex orders.\n\nAdvanced search filters—by status, shipmentId, recipient name, or time period—are supported. Pagination allows efficient retrieval even for orders with many delivery records (e.g., large B2B orders or split/partial shipments). Security filters are applied: customers can view their own orders, sellers can access deliveries related to their own goods, and admins have global access.\n\nReturned fields include recipient information (with privacy controls), delivery status, timing info, snapshot address as at delivery time, shipment references, and any delivery messages (special instructions). The operation is linked to after-sales workflows (returns/exchanges initiated from delivered items) and audit/evidence modules for compliance. All search parameters and response structures align with the shopping_mall_deliveries schema.\n\nRelated APIs include list/search of shipments for an order and detailed delivery view (GET /orders/{orderId}/deliveries/{deliveryId}). Errors include insufficient permission, non-existent order, or invalid filter parameters.","summary":"Search and paginate deliveries associated with an order (shopping_mall_deliveries table).","parameters":[{"name":"orderId","description":"Unique identifier of the order for which deliveries are queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search filters, sorting, and pagination parameters for querying deliveries within an order.","typeName":"IShoppingMallDelivery.IRequest"},"responseBody":{"description":"Paginated list of delivery records matching the search criteria, including summary fields for display or tracking.","typeName":"IPageIShoppingMallDelivery.ISummary"},"authorizationType":null,"authorizationRole":"seller","name":"index","path":"/shoppingMall/seller/orders/{orderId}/deliveries","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before deliveries can be listed or searched for a specific order."}]},{"specification":"This operation retrieves a filtered, paginated list of delivery records associated with a specific order, enabling customers, sellers, and administrators to view the delivery status and history of an order (from the 'shopping_mall_deliveries' table). The PATCH method allows complex search, filtering (by delivery_status, shipment, recipient, etc.), and sorting (by created_at, status, etc.). The request supports pagination and delivery-specific filters, making it suitable for orders with multiple shipment batches or partial deliveries. Security is enforced: customers may only query their own orders, sellers access only their own shipped items, and admins have full access. The response includes delivery summary information, supporting order tracking, fulfillment workflows, and dispute resolution.","description":"Search and paginate deliveries (delivery windows/address records) for a specific order. This is required for tracking multi-shipment orders, split deliveries, and for enabling users to monitor overall delivery status on complex orders.\n\nAdvanced search filters—by status, shipmentId, recipient name, or time period—are supported. Pagination allows efficient retrieval even for orders with many delivery records (e.g., large B2B orders or split/partial shipments). Security filters are applied: customers can view their own orders, sellers can access deliveries related to their own goods, and admins have global access.\n\nReturned fields include recipient information (with privacy controls), delivery status, timing info, snapshot address as at delivery time, shipment references, and any delivery messages (special instructions). The operation is linked to after-sales workflows (returns/exchanges initiated from delivered items) and audit/evidence modules for compliance. All search parameters and response structures align with the shopping_mall_deliveries schema.\n\nRelated APIs include list/search of shipments for an order and detailed delivery view (GET /orders/{orderId}/deliveries/{deliveryId}). Errors include insufficient permission, non-existent order, or invalid filter parameters.","summary":"Search and paginate deliveries associated with an order (shopping_mall_deliveries table).","parameters":[{"name":"orderId","description":"Unique identifier of the order for which deliveries are queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search filters, sorting, and pagination parameters for querying deliveries within an order.","typeName":"IShoppingMallDelivery.IRequest"},"responseBody":{"description":"Paginated list of delivery records matching the search criteria, including summary fields for display or tracking.","typeName":"IPageIShoppingMallDelivery.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/orders/{orderId}/deliveries","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before deliveries can be listed or searched for a specific order."}]},{"specification":"This operation retrieves detailed information about a specific delivery record for a given order, based on the 'shopping_mall_deliveries' table. It requires both the parent orderId and the specific deliveryId (both UUIDs), ensuring context is preserved for role and permission checks. This API is used by customers, sellers, and admins to view precise delivery details—such as recipient info, address snapshot, delivery status, timing, shipment linkage, number of attempts, and any associated after-sales cases. Permission checks ensure that only actors with the right to view the associated order can access the delivery details: customers must own the order, sellers are limited to relevant delivery items shipped by them, admins have unrestricted access. The operation supports full delivery evidence retrieval for tracking, after-sales processing, complaint handling, and compliance audit. Detailed error responses are returned if the order/delivery combination is invalid or permission is denied.","description":"Retrieve full details for a single delivery associated with an order. This allows users to view address snapshot, recipient info, timing info, delivery status, and evidence of the delivery event.\n\nSecurity is enforced to ensure only permitted actors may access delivery data: customers are restricted to their own orders, sellers to their own items, admins are unrestricted. The endpoint is essential for end-user delivery tracking, support workflows (post-delivery disputes, after-sales actions), and for building comprehensive audit trails.\n\nThe response includes all shopping_mall_deliveries columns, including address, recipient, delivery status, shipment associations, delivery messages, confirmation state, and snapshot linkage for full evidentiary support. Related APIs are the delivery list/search for an order, shipment batching endpoints, and after-sales service initiation operations (returns/exchanges). Error handling covers not found (invalid ID), permission errors, and order-delivery mismatch scenarios. The API supports internationalization and privacy controls for address and contact fields.","summary":"Get details of a delivery for a specific order and deliveryId (shopping_mall_deliveries table).","parameters":[{"name":"orderId","description":"Unique identifier of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"deliveryId","description":"Unique identifier of the delivery record attached to the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed delivery information for the given orderId and deliveryId, including all address, recipient, and tracking fields.","typeName":"IShoppingMallDelivery"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/orders/{orderId}/deliveries/{deliveryId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before any delivery detail can be retrieved for that order."}]},{"specification":"This operation retrieves detailed information about a specific delivery record for a given order, based on the 'shopping_mall_deliveries' table. It requires both the parent orderId and the specific deliveryId (both UUIDs), ensuring context is preserved for role and permission checks. This API is used by customers, sellers, and admins to view precise delivery details—such as recipient info, address snapshot, delivery status, timing, shipment linkage, number of attempts, and any associated after-sales cases. Permission checks ensure that only actors with the right to view the associated order can access the delivery details: customers must own the order, sellers are limited to relevant delivery items shipped by them, admins have unrestricted access. The operation supports full delivery evidence retrieval for tracking, after-sales processing, complaint handling, and compliance audit. Detailed error responses are returned if the order/delivery combination is invalid or permission is denied.","description":"Retrieve full details for a single delivery associated with an order. This allows users to view address snapshot, recipient info, timing info, delivery status, and evidence of the delivery event.\n\nSecurity is enforced to ensure only permitted actors may access delivery data: customers are restricted to their own orders, sellers to their own items, admins are unrestricted. The endpoint is essential for end-user delivery tracking, support workflows (post-delivery disputes, after-sales actions), and for building comprehensive audit trails.\n\nThe response includes all shopping_mall_deliveries columns, including address, recipient, delivery status, shipment associations, delivery messages, confirmation state, and snapshot linkage for full evidentiary support. Related APIs are the delivery list/search for an order, shipment batching endpoints, and after-sales service initiation operations (returns/exchanges). Error handling covers not found (invalid ID), permission errors, and order-delivery mismatch scenarios. The API supports internationalization and privacy controls for address and contact fields.","summary":"Get details of a delivery for a specific order and deliveryId (shopping_mall_deliveries table).","parameters":[{"name":"orderId","description":"Unique identifier of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"deliveryId","description":"Unique identifier of the delivery record attached to the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed delivery information for the given orderId and deliveryId, including all address, recipient, and tracking fields.","typeName":"IShoppingMallDelivery"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/orders/{orderId}/deliveries/{deliveryId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before any delivery detail can be retrieved for that order."}]},{"specification":"This operation retrieves detailed information about a specific delivery record for a given order, based on the 'shopping_mall_deliveries' table. It requires both the parent orderId and the specific deliveryId (both UUIDs), ensuring context is preserved for role and permission checks. This API is used by customers, sellers, and admins to view precise delivery details—such as recipient info, address snapshot, delivery status, timing, shipment linkage, number of attempts, and any associated after-sales cases. Permission checks ensure that only actors with the right to view the associated order can access the delivery details: customers must own the order, sellers are limited to relevant delivery items shipped by them, admins have unrestricted access. The operation supports full delivery evidence retrieval for tracking, after-sales processing, complaint handling, and compliance audit. Detailed error responses are returned if the order/delivery combination is invalid or permission is denied.","description":"Retrieve full details for a single delivery associated with an order. This allows users to view address snapshot, recipient info, timing info, delivery status, and evidence of the delivery event.\n\nSecurity is enforced to ensure only permitted actors may access delivery data: customers are restricted to their own orders, sellers to their own items, admins are unrestricted. The endpoint is essential for end-user delivery tracking, support workflows (post-delivery disputes, after-sales actions), and for building comprehensive audit trails.\n\nThe response includes all shopping_mall_deliveries columns, including address, recipient, delivery status, shipment associations, delivery messages, confirmation state, and snapshot linkage for full evidentiary support. Related APIs are the delivery list/search for an order, shipment batching endpoints, and after-sales service initiation operations (returns/exchanges). Error handling covers not found (invalid ID), permission errors, and order-delivery mismatch scenarios. The API supports internationalization and privacy controls for address and contact fields.","summary":"Get details of a delivery for a specific order and deliveryId (shopping_mall_deliveries table).","parameters":[{"name":"orderId","description":"Unique identifier of the parent order.","schema":{"type":"string","format":"uuid"}},{"name":"deliveryId","description":"Unique identifier of the delivery record attached to the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed delivery information for the given orderId and deliveryId, including all address, recipient, and tracking fields.","typeName":"IShoppingMallDelivery"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/orders/{orderId}/deliveries/{deliveryId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before its delivery details can be retrieved"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/deliveries","method":"post"},"description":"Delivery must be created for the order before its details can be retrieved"}]},{"specification":"This operation creates a new delivery record for a specific order. It operates on the ShoppingMallDeliveries table in the Prisma schema, which stores delivery address and shipment confirmation information for orders. The endpoint allows users (e.g., customers or staff performing on behalf of a customer) to register a new delivery destination, recipient, contact info, and delivery message for an order. This is the entry point for associating a delivery with an order, supporting both initial and split-multi-shipment workflows, and ensures snapshot-level evidence for compliance. Proper validation of address format, contact numbers, and linkage to the related order is enforced by business rules. Order status and delivery status must be coordinated to prevent inconsistencies, such as adding delivery for completed/cancelled orders. The request body must follow the IShoppingMallDelivery.ICreate DTO and the response returns the detailed delivery entity as IShoppingMallDelivery.","description":"Create a new delivery entry for a specific order by providing the necessary recipient and address details. This operation is used during the order fulfillment workflow to specify where and to whom the order (or split portion) should be delivered.\n\nSecurity measures enforce that only users with associated rights to the order (customers who placed the order, authorized staff, or system processes) can perform this action. Business logic ensures that the delivery address and recipient contact information are validated based on locale-specific rules and compliance requirements, including restricted address formats and real-name confirmation if mandated by region.\n\nUpon invocation, the operation links the delivery directly to the designated order and supports integration with split/multi-shipment logic where more than one delivery entry may exist per order. Error handling covers missing or invalid address/contact info, unauthorized access, and inconsistent order status (e.g., order already completed/cancelled).\n\nRelated APIs: Typically used as part of an order-to-fulfillment flow, followed by shipment creation and status updates. Designed for use with audit and evidence preservation as required by the schema's audit-compliance structure.","summary":"Create a delivery address and recipient entry for an order (ShoppingMallDeliveries table).","parameters":[{"name":"orderId","description":"Target order's ID for which the delivery record is to be created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Delivery information including recipient and address for the new delivery entry.","typeName":"IShoppingMallDelivery.ICreate"},"responseBody":{"description":"Created delivery record for the specified order.","typeName":"IShoppingMallDelivery"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/orders/{orderId}/deliveries","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before a delivery entry can be registered for it"}]},{"specification":"This operation updates an existing delivery record for a specific order and delivery ID. It manipulates the ShoppingMallDeliveries table in the Prisma schema, which stores delivery address, recipient, and shipment confirmation information. This endpoint allows authorized users to modify delivery details (address snapshot, delivery message, recipient contact, etc.) before shipment is confirmed or completed. The business logic validates that the delivery is editable (e.g., not already delivered or completed), and the request passes validation for address rules and compliance requirements. All changes are tracked for audit and rollback via the schema's evidence/snapshot design. The request must follow the IShoppingMallDelivery.IUpdate DTO and returns the updated delivery entity as IShoppingMallDelivery.","description":"Update an existing delivery address or recipient info for a specific order and delivery record. This is typically required if the user needs to correct address details, change recipient information, or update delivery instructions prior to shipment dispatch.\n\nSecurity and business logic ensure that only authorized users (typically, the customer who owns the order or authorized staff/admin) can perform this update. The operation validates that the delivery record is still in an editable state (not yet delivered or confirmed), and all inputs must pass stringent address/contact validation according to system and regulatory rules.\n\nThe system records a snapshot of the delivery state before and after the update, preserving full audit history and supporting regulatory or dispute-related rollback. Error cases include unauthorized update attempts, invalid order/delivery IDs, and modification attempts after shipment confirmation.\n\nThis operation is part of the larger order fulfillment and shipment workflow. It may be followed by shipment assignment, delivery status tracking, or after-sales processes if changes are required post-dispatch.","summary":"Update delivery address or recipient information for an order delivery (ShoppingMallDeliveries table).","parameters":[{"name":"orderId","description":"Target order's ID for which the delivery record is being updated.","schema":{"type":"string","format":"uuid"}},{"name":"deliveryId","description":"Unique delivery record ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated delivery information (address, recipient, instructions).","typeName":"IShoppingMallDelivery.IUpdate"},"responseBody":{"description":"Updated delivery record for the specified order and delivery.","typeName":"IShoppingMallDelivery"},"authorizationType":null,"authorizationRole":"customer","name":"update","path":"/shoppingMall/customer/orders/{orderId}/deliveries/{deliveryId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before a delivery entry can be updated"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/deliveries","method":"post"},"description":"Delivery must be created for the order before it can be updated"}]},{"specification":"This operation removes (logically, via soft delete) a delivery record linked to a specific order and delivery ID. The operation is based on the ShoppingMallDeliveries table in the Prisma schema, which stores soft deletion meta (deleted_at) for regulatory compliance and evidence rules. This endpoint enables the user to request deletion or cancellation of a delivery address or recipient record before shipment occurs (cancellation window controlled by business logic). Once logically deleted, the record is hidden from normal views but retained for audit trails. Actual deletion is strictly controlled and never physically removes the record, following legal and business requirements. No request body is required. Authorization must ensure that only the rightful order owner (customer) or privileged staff may perform deletions. No response body is returned on successful deletion, but error cases are reported for attempts to delete delivered/completed shipments or unauthorized access.","description":"Logically delete (soft delete) a delivery record for an order by setting the deleted_at field per the ShoppingMallDeliveries schema. This operation is permissible only if shipment is not yet confirmed or delivered. Soft deletion ensures the delivery record remains in the system for audit, compliance, and dispute resolution, but is excluded from active workflows and normal UI displays.\n\nOnly the customer who placed the order or authorized admin/staff can invoke this deletion, and logic enforces that only deliveries in a cancellable/editable state can be deleted. The action triggers audit log recording for compliance and may notify relevant stakeholders (user and logistics, if applicable).\n\nError cases cover: attempting to delete after shipment confirmation or delivery, unauthorized access, and non-existent delivery IDs linked to the specified order. No response body is returned; operation follows RESTful standards with appropriate status code only.","summary":"Logically delete (soft delete) a delivery address or recipient info for an order (ShoppingMallDeliveries table).","parameters":[{"name":"orderId","description":"Target order's ID for which the delivery record is being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"deliveryId","description":"Unique delivery record ID to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/orders/{orderId}/deliveries/{deliveryId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before a delivery entry can be deleted"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/deliveries","method":"post"},"description":"Delivery must be created for the order before it can be deleted"}]},{"specification":"This operation retrieves a filtered and paginated list of after-sales service records (returns, exchanges, refunds, etc.) associated with a specific order. It operates on the ShoppingMallAfterSaleServices table in the Prisma schema, which tracks after-sales cases, request statuses, reasons, and resolution meta for each order. The request body enables clients to specify search and filter parameters, such as case type, status, time period, and other relevant criteria. Standard system business rules enforce permission checks to ensure only legitimate users (order-placing customers or privileged staff/admins) can access the after-sales records. All response entries follow the IShoppingMallAfterSaleService.ISummary DTO, and paginated results are returned as IPageIShoppingMallAfterSaleService.ISummary.","description":"Query and retrieve a paginated, filtered list of after-sales service cases (returns, exchanges, refunds, etc.) linked to a specific order. The operation supports complex filtering (by case type, status, created date, etc.), sorting, and pagination parameters, making it practical for UI listings and detailed business analytics.\n\nSecurity and business logic enforce that only customers who placed the order, authorized staff, or administrators can query after-sale cases. System checks ensure that the referenced order exists and that the requesting user has legitimate access rights before results are returned.\n\nThis endpoint supports audit evidence requirements by including meta on each after-sales request, and may be chained with detail view or create operations on after-sale records. Error scenarios handle invalid order references, unauthorized access, and malformed query parameters.","summary":"List and search after-sales service records for a specific order (ShoppingMallAfterSaleServices table).","parameters":[{"name":"orderId","description":"Target order's ID for which after-sales cases are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"After-sales case search/filter parameters (caseType, status, date range, etc.)","typeName":"IShoppingMallAfterSaleService.IRequest"},"responseBody":{"description":"Paginated list of after-sales service summaries for the specified order.","typeName":"IPageIShoppingMallAfterSaleService.ISummary"},"authorizationType":null,"authorizationRole":"customer","name":"index","path":"/shoppingMall/customer/orders/{orderId}/afterSaleServices","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before its after-sales service records can be listed or searched"}]},{"specification":"This operation retrieves detailed information for a specific after-sales service case associated with a particular order. It leverages the shopping_mall_after_sale_services table from the Prisma schema. The operation is designed for customers, sellers, and administrators to access full information about a single after-sales record, including case type, status, linked order, evidence snapshot, and resolution messages. The schema supports highly auditable, field-level retrieval consistent with compliance requirements and user business needs.","description":"Retrieve comprehensive details about a single after-sales service case for a specific order. The operation fetches all relevant business data fields, including the associated order ID, after-sale service case type (such as return, exchange, or refund), status, user-provided reasons, linked evidence snapshots, and resolution messaging. \n\nAuthorization and visibility are enforced based on the user's relationship to the order or their platform role: customers can view their own after-sales records, sellers can view only after-sales records linked to their orders/products, and admins can view all. \n\nThis retrieval operation references the shopping_mall_after_sale_services table and pulls all fields defined therein, aligning with audit and legal evidence needs. Error handling ensures that non-existent or unauthorized queries result in clear, actionable errors. \n\nRelated operations include list/search for all after-sale cases and update or delete operations for authorized users.\n","summary":"Retrieve details for a specific after-sales service case by order and afterSaleServiceId (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the target order whose after-sales service is being queried.","schema":{"type":"string","format":"uuid"}},{"name":"afterSaleServiceId","description":"Unique identifier of the target after-sales service case within the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed information for the after-sales service record, including all business fields and auditability context.","typeName":"IShoppingMallAfterSaleService"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/orders/{orderId}/afterSaleServices/{afterSaleServiceId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before an after-sales service record can be retrieved"},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/afterSaleServices","method":"post"},"description":"After-sales service record must be created before it can be retrieved by its ID"}]},{"specification":"This operation retrieves detailed information for a specific after-sales service case associated with a particular order. It leverages the shopping_mall_after_sale_services table from the Prisma schema. The operation is designed for customers, sellers, and administrators to access full information about a single after-sales record, including case type, status, linked order, evidence snapshot, and resolution messages. The schema supports highly auditable, field-level retrieval consistent with compliance requirements and user business needs.","description":"Retrieve comprehensive details about a single after-sales service case for a specific order. The operation fetches all relevant business data fields, including the associated order ID, after-sale service case type (such as return, exchange, or refund), status, user-provided reasons, linked evidence snapshots, and resolution messaging. \n\nAuthorization and visibility are enforced based on the user's relationship to the order or their platform role: customers can view their own after-sales records, sellers can view only after-sales records linked to their orders/products, and admins can view all. \n\nThis retrieval operation references the shopping_mall_after_sale_services table and pulls all fields defined therein, aligning with audit and legal evidence needs. Error handling ensures that non-existent or unauthorized queries result in clear, actionable errors. \n\nRelated operations include list/search for all after-sale cases and update or delete operations for authorized users.\n","summary":"Retrieve details for a specific after-sales service case by order and afterSaleServiceId (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the target order whose after-sales service is being queried.","schema":{"type":"string","format":"uuid"}},{"name":"afterSaleServiceId","description":"Unique identifier of the target after-sales service case within the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed information for the after-sales service record, including all business fields and auditability context.","typeName":"IShoppingMallAfterSaleService"},"authorizationType":null,"authorizationRole":"seller","name":"at","path":"/shoppingMall/seller/orders/{orderId}/afterSaleServices/{afterSaleServiceId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before an after-sales service record can be retrieved"},{"endpoint":{"path":"/shoppingMall/seller/orders/{orderId}/afterSaleServices","method":"post"},"description":"After-sales service record must be created before it can be retrieved by its ID"}]},{"specification":"This operation retrieves detailed information for a specific after-sales service case associated with a particular order. It leverages the shopping_mall_after_sale_services table from the Prisma schema. The operation is designed for customers, sellers, and administrators to access full information about a single after-sales record, including case type, status, linked order, evidence snapshot, and resolution messages. The schema supports highly auditable, field-level retrieval consistent with compliance requirements and user business needs.","description":"Retrieve comprehensive details about a single after-sales service case for a specific order. The operation fetches all relevant business data fields, including the associated order ID, after-sale service case type (such as return, exchange, or refund), status, user-provided reasons, linked evidence snapshots, and resolution messaging. \n\nAuthorization and visibility are enforced based on the user's relationship to the order or their platform role: customers can view their own after-sales records, sellers can view only after-sales records linked to their orders/products, and admins can view all. \n\nThis retrieval operation references the shopping_mall_after_sale_services table and pulls all fields defined therein, aligning with audit and legal evidence needs. Error handling ensures that non-existent or unauthorized queries result in clear, actionable errors. \n\nRelated operations include list/search for all after-sale cases and update or delete operations for authorized users.\n","summary":"Retrieve details for a specific after-sales service case by order and afterSaleServiceId (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the target order whose after-sales service is being queried.","schema":{"type":"string","format":"uuid"}},{"name":"afterSaleServiceId","description":"Unique identifier of the target after-sales service case within the order.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed information for the after-sales service record, including all business fields and auditability context.","typeName":"IShoppingMallAfterSaleService"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/orders/{orderId}/afterSaleServices/{afterSaleServiceId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must be created before an after-sales service record can be retrieved"},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/afterSaleServices","method":"post"},"description":"After-sales service record must be created before it can be retrieved by its ID"}]},{"specification":"This operation creates a new after-sales service case (such as return, exchange, or refund) for a given order. It is based on the shopping_mall_after_sale_services table in the Prisma schema. Accessible to the ordering customer and, in specific workflows, to sellers requesting after-sales actions on a buyer's behalf. The system validates the type, evidence reference, and links to correct order and delivery records, enforcing business, compliance, and eligibility rules, with trigger for audit and notification.","description":"Initiate a new after-sales service process attached to a particular order. This operation enables customers (buyers) to file return/exchange/refund or other after-sales requests against their orders, referencing necessary evidence snapshots and business context. The endpoint accepts comprehensive creation data as mandated by the IShoppingMallAfterSaleService.ICreate DTO, including case type, status, reason, and optional evidence linkages.\n\nBusiness logic enforces eligibility checks: only orders eligible within the after-sales window and matching business rules can trigger a request. If the service is requested by a seller (e.g., for recall), seller audit linkage and escalation apply. The record creation is snapshotted for audit, and notifications are issued to all stakeholders.\n\nResponses provide the freshly created after-sale service record. Security and data integrity are enforced according to the roles and the actor's relationship with the order and service.\n","summary":"Create a new after-sales service record for a specific order (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the order for which the after-sales service is being initiated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to create a new after-sales service record aligned to the provided order, based on business and compliance rules.","typeName":"IShoppingMallAfterSaleService.ICreate"},"responseBody":{"description":"The after-sale service record freshly created, with all business and audit fields populated.","typeName":"IShoppingMallAfterSaleService"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/orders/{orderId}/afterSaleServices","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before an after-sales service case can be created for it. This ensures that any after-sales request, such as return, exchange, or refund, is attached to a valid order."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/deliveries","method":"post"},"description":"Delivery record should exist if the after-sales case references a delivery (e.g., for split/partial shipments, evidence, or delivery-related after-sales scenarios)."}]},{"specification":"This operation creates a new after-sales service case (such as return, exchange, or refund) for a given order. It is based on the shopping_mall_after_sale_services table in the Prisma schema. Accessible to the ordering customer and, in specific workflows, to sellers requesting after-sales actions on a buyer's behalf. The system validates the type, evidence reference, and links to correct order and delivery records, enforcing business, compliance, and eligibility rules, with trigger for audit and notification.","description":"Initiate a new after-sales service process attached to a particular order. This operation enables customers (buyers) to file return/exchange/refund or other after-sales requests against their orders, referencing necessary evidence snapshots and business context. The endpoint accepts comprehensive creation data as mandated by the IShoppingMallAfterSaleService.ICreate DTO, including case type, status, reason, and optional evidence linkages.\n\nBusiness logic enforces eligibility checks: only orders eligible within the after-sales window and matching business rules can trigger a request. If the service is requested by a seller (e.g., for recall), seller audit linkage and escalation apply. The record creation is snapshotted for audit, and notifications are issued to all stakeholders.\n\nResponses provide the freshly created after-sale service record. Security and data integrity are enforced according to the roles and the actor's relationship with the order and service.\n","summary":"Create a new after-sales service record for a specific order (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the order for which the after-sales service is being initiated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to create a new after-sales service record aligned to the provided order, based on business and compliance rules.","typeName":"IShoppingMallAfterSaleService.ICreate"},"responseBody":{"description":"The after-sale service record freshly created, with all business and audit fields populated.","typeName":"IShoppingMallAfterSaleService"},"authorizationType":null,"authorizationRole":"seller","name":"create","path":"/shoppingMall/seller/orders/{orderId}/afterSaleServices","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before a seller can initiate an after-sales service case for it. An after-sales request like return, exchange, or refund must reference a valid order."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/deliveries","method":"post"},"description":"Delivery record should exist if the after-sales case references a delivery, supporting workflows for split shipments, evidence, or delivery-specific after-sales activities."}]},{"specification":"This operation creates a new after-sales service case (such as return, exchange, or refund) for a given order. It is based on the shopping_mall_after_sale_services table in the Prisma schema. Accessible to the ordering customer and, in specific workflows, to sellers requesting after-sales actions on a buyer's behalf. The system validates the type, evidence reference, and links to correct order and delivery records, enforcing business, compliance, and eligibility rules, with trigger for audit and notification.","description":"Initiate a new after-sales service process attached to a particular order. This operation enables customers (buyers) to file return/exchange/refund or other after-sales requests against their orders, referencing necessary evidence snapshots and business context. The endpoint accepts comprehensive creation data as mandated by the IShoppingMallAfterSaleService.ICreate DTO, including case type, status, reason, and optional evidence linkages.\n\nBusiness logic enforces eligibility checks: only orders eligible within the after-sales window and matching business rules can trigger a request. If the service is requested by a seller (e.g., for recall), seller audit linkage and escalation apply. The record creation is snapshotted for audit, and notifications are issued to all stakeholders.\n\nResponses provide the freshly created after-sale service record. Security and data integrity are enforced according to the roles and the actor's relationship with the order and service.\n","summary":"Create a new after-sales service record for a specific order (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the order for which the after-sales service is being initiated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to create a new after-sales service record aligned to the provided order, based on business and compliance rules.","typeName":"IShoppingMallAfterSaleService.ICreate"},"responseBody":{"description":"The after-sale service record freshly created, with all business and audit fields populated.","typeName":"IShoppingMallAfterSaleService"},"authorizationType":null,"authorizationRole":"admin","name":"create","path":"/shoppingMall/admin/orders/{orderId}/afterSaleServices","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before the admin can create an after-sales service case for it. Any after-sales service case has to be linked to a valid order."},{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/deliveries","method":"post"},"description":"Delivery record should exist if the after-sales service is associated with a particular delivery (referenced by shopping_mall_delivery_id), especially for partial shipments or evidence tracking."}]},{"specification":"This operation updates an existing after-sales service case associated with a specific order. It operates on the shopping_mall_after_sale_services table according to the Prisma schema. Updates may involve status changes (e.g., processing, approved, denied), adding resolution messaging, or modifying user-provided reasons or evidence. Proper business validation and audit tracking are enforced, with strict permission based on the user’s relationship to the case.","description":"Update the information for a specific after-sales service case within an order. Permitted updates include status transitions (such as processing, approved, or denied), updated resolution messages, and changes to user-submitted reasons or evidence reference fields as permitted by business logic and authorization. \n\nThe endpoint consumes data per the IShoppingMallAfterSaleService.IUpdate DTO and validates that all updates comply with business rules and eligibility (e.g., certain statuses can only transition in allowed ways; after-sales services may be locked after resolution or escalation). All updates are snapshotted for compliance, and notification flows may be triggered depending on the update.\n\nOnly authorized actors can perform updates: requesting customers for their own cases (with constraints), sellers for seller-side workflow, and admins for oversight and dispute scenarios. Unauthorized updates yield clear, actionable errors.\n","summary":"Update an after-sales service record for a specific order (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the order to which this after-sales service belongs.","schema":{"type":"string","format":"uuid"}},{"name":"afterSaleServiceId","description":"Unique identifier of the after-sales service case being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to update the after-sales service record, following business rules and compliance.","typeName":"IShoppingMallAfterSaleService.IUpdate"},"responseBody":{"description":"The updated after-sales service record with all permissible business fields.","typeName":"IShoppingMallAfterSaleService"},"authorizationType":null,"authorizationRole":"customer","name":"update","path":"/shoppingMall/customer/orders/{orderId}/afterSaleServices/{afterSaleServiceId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"Order must exist before you can update an after-sales service case associated with that order. This ensures updates are only performed on valid, existing order cases."},{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/afterSaleServices","method":"post"},"description":"An after-sales service case must be created before it can be updated. The update endpoint requires an existing after-sale service record related to the order."}]},{"specification":"This operation updates an existing after-sales service case associated with a specific order. It operates on the shopping_mall_after_sale_services table according to the Prisma schema. Updates may involve status changes (e.g., processing, approved, denied), adding resolution messaging, or modifying user-provided reasons or evidence. Proper business validation and audit tracking are enforced, with strict permission based on the user’s relationship to the case.","description":"Update the information for a specific after-sales service case within an order. Permitted updates include status transitions (such as processing, approved, or denied), updated resolution messages, and changes to user-submitted reasons or evidence reference fields as permitted by business logic and authorization. \n\nThe endpoint consumes data per the IShoppingMallAfterSaleService.IUpdate DTO and validates that all updates comply with business rules and eligibility (e.g., certain statuses can only transition in allowed ways; after-sales services may be locked after resolution or escalation). All updates are snapshotted for compliance, and notification flows may be triggered depending on the update.\n\nOnly authorized actors can perform updates: requesting customers for their own cases (with constraints), sellers for seller-side workflow, and admins for oversight and dispute scenarios. Unauthorized updates yield clear, actionable errors.\n","summary":"Update an after-sales service record for a specific order (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the order to which this after-sales service belongs.","schema":{"type":"string","format":"uuid"}},{"name":"afterSaleServiceId","description":"Unique identifier of the after-sales service case being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to update the after-sales service record, following business rules and compliance.","typeName":"IShoppingMallAfterSaleService.IUpdate"},"responseBody":{"description":"The updated after-sales service record with all permissible business fields.","typeName":"IShoppingMallAfterSaleService"},"authorizationType":null,"authorizationRole":"seller","name":"update","path":"/shoppingMall/seller/orders/{orderId}/afterSaleServices/{afterSaleServiceId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/orders/{orderId}/afterSaleServices","method":"post"},"description":"After-sales service case must exist before it can be updated."}]},{"specification":"This operation updates an existing after-sales service case associated with a specific order. It operates on the shopping_mall_after_sale_services table according to the Prisma schema. Updates may involve status changes (e.g., processing, approved, denied), adding resolution messaging, or modifying user-provided reasons or evidence. Proper business validation and audit tracking are enforced, with strict permission based on the user’s relationship to the case.","description":"Update the information for a specific after-sales service case within an order. Permitted updates include status transitions (such as processing, approved, or denied), updated resolution messages, and changes to user-submitted reasons or evidence reference fields as permitted by business logic and authorization. \n\nThe endpoint consumes data per the IShoppingMallAfterSaleService.IUpdate DTO and validates that all updates comply with business rules and eligibility (e.g., certain statuses can only transition in allowed ways; after-sales services may be locked after resolution or escalation). All updates are snapshotted for compliance, and notification flows may be triggered depending on the update.\n\nOnly authorized actors can perform updates: requesting customers for their own cases (with constraints), sellers for seller-side workflow, and admins for oversight and dispute scenarios. Unauthorized updates yield clear, actionable errors.\n","summary":"Update an after-sales service record for a specific order (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the order to which this after-sales service belongs.","schema":{"type":"string","format":"uuid"}},{"name":"afterSaleServiceId","description":"Unique identifier of the after-sales service case being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields required to update the after-sales service record, following business rules and compliance.","typeName":"IShoppingMallAfterSaleService.IUpdate"},"responseBody":{"description":"The updated after-sales service record with all permissible business fields.","typeName":"IShoppingMallAfterSaleService"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/orders/{orderId}/afterSaleServices/{afterSaleServiceId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/orders/{orderId}/afterSaleServices","method":"post"},"description":"After-sales service case must exist before it can be updated."}]},{"specification":"This operation removes (soft deletes) an after-sales service case record for a specific order and afterSaleServiceId. It references the shopping_mall_after_sale_services table in the Prisma schema. This is a soft deletion, setting a deleted_at timestamp for compliance, evidence-preserving audit, and regulatory purposes. Actual removal is never performed; only users with proper authorization may perform this operation.","description":"Logically remove an after-sales service case by marking it as deleted—setting its deleted_at field—rather than removing the record from the database. This implements a soft deletion, retaining the full evidence trail for compliance and dispute requirements. \n\nActors authorized to perform this operation include the requester for their own after-sales cases (within permissions), the responsible seller in specific after-sales flows, and administrators with audit privileges. If attempted on an already resolved, locked, or escalated after-sales case, the operation will block with an error explaining required next steps or stating compliance lock-out.\n\nThis operation ensures that no actual data is lost (just flagged as deleted), which is critical for audit/legal compliance in regulated e-commerce. All deletions are snapshotted, and audit/deletion event logs are created.\n","summary":"Soft delete (logically remove) an after-sales service record for a specific order (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the order related to the after-sales service being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"afterSaleServiceId","description":"Unique identifier of the after-sales service case to be logically deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/orders/{orderId}/afterSaleServices/{afterSaleServiceId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/afterSaleServices","method":"post"},"description":"After-sales service case must exist before it can be deleted (soft-deleted)."}]},{"specification":"This operation removes (soft deletes) an after-sales service case record for a specific order and afterSaleServiceId. It references the shopping_mall_after_sale_services table in the Prisma schema. This is a soft deletion, setting a deleted_at timestamp for compliance, evidence-preserving audit, and regulatory purposes. Actual removal is never performed; only users with proper authorization may perform this operation.","description":"Logically remove an after-sales service case by marking it as deleted—setting its deleted_at field—rather than removing the record from the database. This implements a soft deletion, retaining the full evidence trail for compliance and dispute requirements. \n\nActors authorized to perform this operation include the requester for their own after-sales cases (within permissions), the responsible seller in specific after-sales flows, and administrators with audit privileges. If attempted on an already resolved, locked, or escalated after-sales case, the operation will block with an error explaining required next steps or stating compliance lock-out.\n\nThis operation ensures that no actual data is lost (just flagged as deleted), which is critical for audit/legal compliance in regulated e-commerce. All deletions are snapshotted, and audit/deletion event logs are created.\n","summary":"Soft delete (logically remove) an after-sales service record for a specific order (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the order related to the after-sales service being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"afterSaleServiceId","description":"Unique identifier of the after-sales service case to be logically deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","path":"/shoppingMall/seller/orders/{orderId}/afterSaleServices/{afterSaleServiceId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/orders/{orderId}/afterSaleServices","method":"post"},"description":"After-sales service case must exist before it can be deleted (soft-deleted)."}]},{"specification":"This operation removes (soft deletes) an after-sales service case record for a specific order and afterSaleServiceId. It references the shopping_mall_after_sale_services table in the Prisma schema. This is a soft deletion, setting a deleted_at timestamp for compliance, evidence-preserving audit, and regulatory purposes. Actual removal is never performed; only users with proper authorization may perform this operation.","description":"Logically remove an after-sales service case by marking it as deleted—setting its deleted_at field—rather than removing the record from the database. This implements a soft deletion, retaining the full evidence trail for compliance and dispute requirements. \n\nActors authorized to perform this operation include the requester for their own after-sales cases (within permissions), the responsible seller in specific after-sales flows, and administrators with audit privileges. If attempted on an already resolved, locked, or escalated after-sales case, the operation will block with an error explaining required next steps or stating compliance lock-out.\n\nThis operation ensures that no actual data is lost (just flagged as deleted), which is critical for audit/legal compliance in regulated e-commerce. All deletions are snapshotted, and audit/deletion event logs are created.\n","summary":"Soft delete (logically remove) an after-sales service record for a specific order (shopping_mall_after_sale_services).","parameters":[{"name":"orderId","description":"Unique identifier of the order related to the after-sales service being deleted.","schema":{"type":"string","format":"uuid"}},{"name":"afterSaleServiceId","description":"Unique identifier of the after-sales service case to be logically deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/orders/{orderId}/afterSaleServices/{afterSaleServiceId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/orders/{orderId}/afterSaleServices","method":"post"},"description":"After-sales service record must exist before it can be logically removed (soft deleted). Creating an after-sales service ensures afterSaleServiceId is available for deletion."}]},{"specification":"This operation enables advanced searching, filtering, and sorting of discount/coupon records in the shopping mall backend. It leverages the shopping_mall_coupons table to allow administrative and seller users to precisely locate coupons by attributes such as code, type, discount characteristics, validity period, targeting logic, and status. Supports robust pagination and complex queries for analytics, business management, or campaign review.","path":"/shoppingMall/admin/coupons","method":"patch","summary":"Search and filter shopping mall coupons with advanced criteria (Patch, shopping_mall_coupons)","description":"Retrieve a paginated and filterable list of coupons defined in the shopping mall system. This operation references the shopping_mall_coupons table, supporting selection by code, type (public, private, one-time), discount type, stackability, exclusivity, min/max order amounts, status (active, expired, draft), and issuance/usage statistics.\n\nIntended for administrative and seller roles managing promotions, targeting, audit, or campaign effectiveness. Highly granular search enables easy analysis and monitoring of promotional campaigns across all or segmented business contexts.\n\nSecurity requires the requesting user to have admin or seller privileges in the platform. Pagination and sorting supported for efficient UI and analytics display. Response delivers a page encapsulating summary data for matching coupons, including key identifiers and basic promotional characteristics. Error handling covers invalid filter parameters, overbroad searches, and permission issues.","parameters":[],"requestBody":{"description":"Advanced search/request parameters for coupon retrieval, including filters, pagination, and sort options.","typeName":"IShoppingMallCoupon.IRequest"},"responseBody":{"description":"Paginated list of coupon summaries matching search and filter criteria.","typeName":"IPageIShoppingMallCoupon.ISummary"},"authorizationRoles":["admin","seller"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation enables advanced searching, filtering, and sorting of discount/coupon records in the shopping mall backend. It leverages the shopping_mall_coupons table to allow administrative and seller users to precisely locate coupons by attributes such as code, type, discount characteristics, validity period, targeting logic, and status. Supports robust pagination and complex queries for analytics, business management, or campaign review.","path":"/shoppingMall/seller/coupons","method":"patch","summary":"Search and filter shopping mall coupons with advanced criteria (Patch, shopping_mall_coupons)","description":"Retrieve a paginated and filterable list of coupons defined in the shopping mall system. This operation references the shopping_mall_coupons table, supporting selection by code, type (public, private, one-time), discount type, stackability, exclusivity, min/max order amounts, status (active, expired, draft), and issuance/usage statistics.\n\nIntended for administrative and seller roles managing promotions, targeting, audit, or campaign effectiveness. Highly granular search enables easy analysis and monitoring of promotional campaigns across all or segmented business contexts.\n\nSecurity requires the requesting user to have admin or seller privileges in the platform. Pagination and sorting supported for efficient UI and analytics display. Response delivers a page encapsulating summary data for matching coupons, including key identifiers and basic promotional characteristics. Error handling covers invalid filter parameters, overbroad searches, and permission issues.","parameters":[],"requestBody":{"description":"Advanced search/request parameters for coupon retrieval, including filters, pagination, and sort options.","typeName":"IShoppingMallCoupon.IRequest"},"responseBody":{"description":"Paginated list of coupon summaries matching search and filter criteria.","typeName":"IPageIShoppingMallCoupon.ISummary"},"authorizationRoles":["admin","seller"],"name":"index","authorizationRole":"seller","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the full details of a single coupon based on its unique identifier from the shopping_mall_coupons table. It exposes all configuration fields, business rules, targeting, eligibility constraints, statistics, and audit-relevant metadata for administrative decision making or campaign review.","path":"/shoppingMall/admin/coupons/{couponId}","method":"get","summary":"Get detailed information for a single coupon by ID (Get, shopping_mall_coupons)","description":"Return the full set of attributes and configuration details for a single coupon in the shopping mall backend. References the shopping_mall_coupons table, allowing authorized admin or seller roles to inspect code, title, description, coupon type, discount logic, eligibility, stack/exclusive flags, usage and issuance caps, dates, business status, targeting, and analytics fields.\n\nSecurity requires the user to be an admin or seller with appropriate permissions. Used for campaign effectiveness review, business rule validation, or auditing promotional logic. Returns rich detail, supporting both operational and compliance needs.\n\nIf the couponId does not exist, or access is not permitted for the current user/role, an error indicating 'not found' or 'forbidden' will be returned.","parameters":[{"name":"couponId","description":"Unique identifier of the coupon to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed coupon information as defined by shopping_mall_coupons schema.","typeName":"IShoppingMallCoupon"},"authorizationRoles":["admin","seller"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/coupons","method":"post"},"description":"Coupon must exist before detailed information can be retrieved by couponId. Creating a coupon ensures couponId is available for this operation."}]},{"specification":"This operation retrieves the full details of a single coupon based on its unique identifier from the shopping_mall_coupons table. It exposes all configuration fields, business rules, targeting, eligibility constraints, statistics, and audit-relevant metadata for administrative decision making or campaign review.","path":"/shoppingMall/seller/coupons/{couponId}","method":"get","summary":"Get detailed information for a single coupon by ID (Get, shopping_mall_coupons)","description":"Return the full set of attributes and configuration details for a single coupon in the shopping mall backend. References the shopping_mall_coupons table, allowing authorized admin or seller roles to inspect code, title, description, coupon type, discount logic, eligibility, stack/exclusive flags, usage and issuance caps, dates, business status, targeting, and analytics fields.\n\nSecurity requires the user to be an admin or seller with appropriate permissions. Used for campaign effectiveness review, business rule validation, or auditing promotional logic. Returns rich detail, supporting both operational and compliance needs.\n\nIf the couponId does not exist, or access is not permitted for the current user/role, an error indicating 'not found' or 'forbidden' will be returned.","parameters":[{"name":"couponId","description":"Unique identifier of the coupon to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete detailed coupon information as defined by shopping_mall_coupons schema.","typeName":"IShoppingMallCoupon"},"authorizationRoles":["admin","seller"],"name":"at","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/coupons","method":"post"},"description":"Coupon must be created before its detailed information can be retrieved."}]},{"specification":"This operation allows the creation of a new coupon definition in the shopping mall backend, targeting the shopping_mall_coupons table. Supports all configuration for business rules, stack/exclusive logic, discount types, issuance and eligibility parameters, and promotion meta. Triggers full validation for each input and audit trail creation for compliance.","path":"/shoppingMall/admin/coupons","method":"post","summary":"Create a new coupon definition (Post, shopping_mall_coupons)","description":"Insert a new coupon into the shopping mall's coupon system. The request body follows the IShoppingMallCoupon.ICreate DTO matching the shopping_mall_coupons table structure, including all policy configuration, targeting, stackable/exclusive logic, usage caps, validity period, and descriptive meta fields for campaign or individual usage.\n\nBusiness rules enforce unique code, proper stack/exclusive flags, and all validation on required fields and discount configuration. The operation is available only to admin or seller accounts with appropriate privileges. Upon success, the API returns the complete coupon resource as created. Errors are returned for invalid input, code collisions, or insufficient permissions. An audit snapshot is created for legal/compliance traceability.","parameters":[],"requestBody":{"description":"Information for new coupon creation, including code, discount properties, targeting, stack/exclusivity, issuance limits, and validity period.","typeName":"IShoppingMallCoupon.ICreate"},"responseBody":{"description":"Full coupon as created and stored (business object with all relevant fields).","typeName":"IShoppingMallCoupon"},"authorizationRoles":["admin","seller"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/couponCampaigns","method":"post"},"description":"Coupon campaign must exist if this coupon is being associated with a campaign (shopping_mall_coupon_campaign_id) at creation time."}]},{"specification":"This operation allows the creation of a new coupon definition in the shopping mall backend, targeting the shopping_mall_coupons table. Supports all configuration for business rules, stack/exclusive logic, discount types, issuance and eligibility parameters, and promotion meta. Triggers full validation for each input and audit trail creation for compliance.","path":"/shoppingMall/seller/coupons","method":"post","summary":"Create a new coupon definition (Post, shopping_mall_coupons)","description":"Insert a new coupon into the shopping mall's coupon system. The request body follows the IShoppingMallCoupon.ICreate DTO matching the shopping_mall_coupons table structure, including all policy configuration, targeting, stackable/exclusive logic, usage caps, validity period, and descriptive meta fields for campaign or individual usage.\n\nBusiness rules enforce unique code, proper stack/exclusive flags, and all validation on required fields and discount configuration. The operation is available only to admin or seller accounts with appropriate privileges. Upon success, the API returns the complete coupon resource as created. Errors are returned for invalid input, code collisions, or insufficient permissions. An audit snapshot is created for legal/compliance traceability.","parameters":[],"requestBody":{"description":"Information for new coupon creation, including code, discount properties, targeting, stack/exclusivity, issuance limits, and validity period.","typeName":"IShoppingMallCoupon.ICreate"},"responseBody":{"description":"Full coupon as created and stored (business object with all relevant fields).","typeName":"IShoppingMallCoupon"},"authorizationRoles":["admin","seller"],"name":"create","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/couponCampaigns","method":"post"},"description":"Coupon campaign must exist if this coupon is being associated with a campaign (shopping_mall_coupon_campaign_id) at creation time."}]},{"specification":"This operation updates an existing coupon record in the shopping mall backend by its unique identifier, interfacing directly with the shopping_mall_coupons table. It supports modification of all business-controlled fields, such as discount properties, stack/exclusivity flags, eligibility, status, and detail fields, with comprehensive field validation and audit preservation for each change.","path":"/shoppingMall/admin/coupons/{couponId}","method":"put","summary":"Update existing coupon definition by ID (Put, shopping_mall_coupons)","description":"Modify a coupon resource by its unique ID, providing all fields allowed for update on the shopping_mall_coupons table according to business and campaign rules. The IShoppingMallCoupon.IUpdate request body provides the full configuration scope, including stackable/exclusive, targeting, discount logic, usage/issuance settings, status, and descriptive/campaign meta.\n\nIntended exclusively for admin or seller roles with sufficient privileges. Any changes are validated for correctness and business logic adherence, including uniqueness for code and proper numerical bounds. Operation ensures audit record and compliance chain for all mutations.\n\nIf the couponId does not match any existing record, a not found error is returned. Permission denial triggers forbidden errors. Validation failures (e.g., invalid stack/exclusive conflict, illegal discount type, out-of-bound parameters) result in error responses with field-level feedback. On success, returns the fully updated coupon resource.","parameters":[{"name":"couponId","description":"ID of the coupon to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for target coupon definition (discount policy, duration, stack/exclusive, campaign meta, etc).","typeName":"IShoppingMallCoupon.IUpdate"},"responseBody":{"description":"The updated coupon resource after successful modification.","typeName":"IShoppingMallCoupon"},"authorizationRoles":["admin","seller"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/coupons","method":"post"},"description":"The coupon to be updated must already exist before it can be modified."},{"endpoint":{"path":"/shoppingMall/admin/couponCampaigns","method":"post"},"description":"Coupon campaign must exist if updating coupon_campaign_id association for the target coupon."}]},{"specification":"This operation updates an existing coupon record in the shopping mall backend by its unique identifier, interfacing directly with the shopping_mall_coupons table. It supports modification of all business-controlled fields, such as discount properties, stack/exclusivity flags, eligibility, status, and detail fields, with comprehensive field validation and audit preservation for each change.","path":"/shoppingMall/seller/coupons/{couponId}","method":"put","summary":"Update existing coupon definition by ID (Put, shopping_mall_coupons)","description":"Modify a coupon resource by its unique ID, providing all fields allowed for update on the shopping_mall_coupons table according to business and campaign rules. The IShoppingMallCoupon.IUpdate request body provides the full configuration scope, including stackable/exclusive, targeting, discount logic, usage/issuance settings, status, and descriptive/campaign meta.\n\nIntended exclusively for admin or seller roles with sufficient privileges. Any changes are validated for correctness and business logic adherence, including uniqueness for code and proper numerical bounds. Operation ensures audit record and compliance chain for all mutations.\n\nIf the couponId does not match any existing record, a not found error is returned. Permission denial triggers forbidden errors. Validation failures (e.g., invalid stack/exclusive conflict, illegal discount type, out-of-bound parameters) result in error responses with field-level feedback. On success, returns the fully updated coupon resource.","parameters":[{"name":"couponId","description":"ID of the coupon to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for target coupon definition (discount policy, duration, stack/exclusive, campaign meta, etc).","typeName":"IShoppingMallCoupon.IUpdate"},"responseBody":{"description":"The updated coupon resource after successful modification.","typeName":"IShoppingMallCoupon"},"authorizationRoles":["admin","seller"],"name":"update","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/coupons","method":"post"},"description":"Coupon must exist before it can be updated."},{"endpoint":{"path":"/shoppingMall/admin/couponCampaigns","method":"post"},"description":"Coupon campaign must exist before a coupon can reference it during update."}]},{"specification":"This operation permanently deletes an existing coupon entity by its unique coupon ID. It performs a hard delete (as supported by the Prisma schema with a 'deleted_at' soft-deletion timestamp column) by marking the coupon record as logically deleted for compliance purposes rather than physical removal. This ensures all historical issuance, usage, and analytics records linked to this coupon remain accessible for audit, legal, and dispute-resolution workflows. All deletion actions are preserved for regulatory evidence and can be referenced in compliance-related audit logs.","description":"Delete (logically, via soft-delete) a coupon record identified by its unique couponId. This operation updates the deleted_at timestamp to preserve the coupon for compliance and audit, while making it inactive and unavailable for issuance or redemption in business logic.\n\nPermission to erase a coupon is strictly limited to administrator roles, as deleting a coupon can impact active campaign integrity, user analytics, and ongoing orders referencing the coupon. Attempts to delete a coupon in use or participating in an active campaign should be validated in provider logic, with business rules enforcing safe removal protocols.\n\nErrors in this operation may occur if the specified coupon does not exist, is already deleted, or business rules preclude its deletion (e.g., active usage, campaign dependency). All such attempts are logged with detailed rejection reasons for compliance tracking.","summary":"Logically delete a coupon, preserving it for compliance and audit purposes.","parameters":[{"name":"couponId","description":"Unique identifier of the coupon to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/coupons/{couponId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/coupons","method":"post"},"description":"Coupon must exist before it can be deleted."}]},{"specification":"Retrieves a filtered and paginated list of coupon issuance records for a specified coupon, supporting advanced search criteria, status filtering, and analytics integration. This operates on the CouponIssuances table, with queries scoped to the coupon identified by couponId, and offers flexible search on issuance status, assigned customer, usage counts, and other meta fields. Results include pagination and can be sorted or filtered for administrative review, campaign analytics, or fraud detection use cases.","description":"This operation lists all issuances of a particular coupon, providing advanced filtering by issuance status, recipient (customer), time range, and other relevant meta fields. It supports pagination and sorting for administrative review and high-volume campaign scenarios.\n\nTypical users include platform administrators or campaign managers, who require comprehensive tools to audit coupon allocation, monitor usage trends, or investigate fraud/abuse. The operation includes security mechanisms in implementation to prevent leakage of customer PII and enforces strict access controls. Large-scale queries may be rate-limited for operational resilience.\n\nError conditions include the invalid or non-existent couponId, improper search criteria, or exceeding allowable result page sizes. All access to this listing is logged for platform analytics and compliance.","summary":"Search and paginate coupon issuances for a specified coupon.","parameters":[{"name":"couponId","description":"The UUID of the coupon whose issuances are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complex search, filter, pagination, and sort criteria for coupon issuances linked to the specified coupon.","typeName":"IShoppingMallCouponIssuance.IRequest"},"responseBody":{"description":"Paginated results including issuance data, issuance status, associated customers, usage counts, and relevant analytics.","typeName":"IPageIShoppingMallCouponIssuance"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/coupons/{couponId}/issuances","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/coupons","method":"post"},"description":"Coupon must exist before querying its issuances."},{"endpoint":{"path":"/shoppingMall/admin/coupons/{couponId}/issuances","method":"post"},"description":"Coupon issuance must exist before it can be searched or paginated."}]},{"specification":"Fetch the detailed information of a single coupon issuance by its unique issuance ID under a specified coupon. This accesses the CouponIssuances table and provides all metadata, linkage to the coupon, recipient customer, issuance/expiry, and usage counts for full audit and management requirements.","description":"Retrieve comprehensive details about a particular coupon issuance, identified by issuanceId within the context of a couponId. The response includes recipient customer (if present), issuance and expiration timestamps, usage status, linked coupon detail, and all relevant business meta.\n\nThis API is primarily for administrative users who need to review or manage individual coupon issuance records for campaign management, dispute resolution, or compliance checks. Implementation enforces robust permission checks and may redact or mask sensitive customer fields for privacy.\n\nCommon error cases include invalid or missing couponId or issuanceId, or access attempts by unauthorized users. Extensive audit logging is recommended for all read events to align with best practices in financial coupon operations.","summary":"Get details of a specific coupon issuance by coupon and issuance ID.","parameters":[{"name":"couponId","description":"The UUID of the coupon to which this issuance belongs.","schema":{"type":"string","format":"uuid"}},{"name":"issuanceId","description":"The UUID of the specific issuance to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete coupon issuance information, including metadata, customer linkage, usage status, and all relevant audit fields.","typeName":"IShoppingMallCouponIssuance"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/coupons/{couponId}/issuances/{issuanceId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/coupons","method":"post"},"description":"Coupon must exist before retrieving issuance detail."},{"endpoint":{"path":"/shoppingMall/admin/coupons/{couponId}/issuances","method":"post"},"description":"Coupon issuance must exist before it can be retrieved in detail."}]},{"specification":"Create a new coupon issuance for an existing coupon, assigning the issuance either to a specified customer (for private or one-time use) or for bulk/public distribution as defined by business rules. Operates on the CouponIssuances table, validates all business rules (eligibility, issuance cap, expiration, recipient), and supports admin-controlled and automated campaign flows. Triggers appropriate hooks for notification and analytics on successful creation.","description":"Generates a new coupon issuance linked to the specified coupon ID. The request body contains all required details about the recipient (if any), issuance mode (bulk, public, one-time), validity period, and optional custom meta. All business rule validations—such as per-coupon issuance caps, per-user limits, eligible segmentation, and duplication checks—are enforced at this step.\n\nThe endpoint is accessed by admin roles or campaign managers who require granular control over coupon distribution for marketing or customer service. Side effects include notification delivery (if recipient is a customer), update of analytic counters, and audit trail creation for regulatory compliance.\n\nOn error (e.g., exceeding issuance limits or failing validation), the operation must return actionable business error codes. All creation attempts are tracked for fraud, abuse prevention, and reporting.","summary":"Create a new issuance (assignment) for a coupon identified by couponId.","parameters":[{"name":"couponId","description":"ID of the coupon to which this new issuance will be linked.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Coupon issuance creation information—recipient (customerId, optional), mode, validity window, and any meta required for business rules.","typeName":"IShoppingMallCouponIssuance.ICreate"},"responseBody":{"description":"The created coupon issuance entity, with all audit and meta fields populated.","typeName":"IShoppingMallCouponIssuance"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/coupons/{couponId}/issuances","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/coupons","method":"post"},"description":"Coupon must be created before any issuance can be assigned or linked to it."}]},{"specification":"This operation updates a specific coupon issuance entity referenced by both its parent coupon and the issuance ID. It enables administrative or business-role users to modify the details of a coupon issuance, such as usage limits, expiration, or assigned customer. The operation directly interacts with the shopping_mall_coupon_issuances table from the Prisma schema and is essential for correcting, revoking, or updating assignment details post-creation.","description":"This API operation allows an authorized admin or business user to update the details of a coupon issuance identified by both the parent coupon ID and specific issuance ID. According to the shopping_mall_coupon_issuances table, this is used to correct issuance parameters such as expiration date, usage cap, or issuance status after the initial assignment.\n\nSecurity is paramount, so only users with administrative or advanced business privileges should be permitted to update coupon issuances, especially because these changes can have direct financial or promotional impact. Request payloads must be validated to ensure no duplication or invalid status transitions occur, and business rules about maximum allowable changes or retroactive modifications must be enforced.\n\nIssuance records are linked to shopping_mall_coupons (for definition), shopping_mall_customers (assignment), and downstream coupon usages. The API must ensure referential integrity and consistency with the coupon's business logic. Auditing must be implemented to track all changes for regulatory and promotional compliance.\n\nRelated operations may include creating new coupon issuances (POST), reading details (GET), or revoking an issuance (DELETE). Error handling must address missing or invalid IDs, conflicts with coupon constraints, and authorization issues.\n","summary":"Update an existing coupon issuance by coupon and issuance ID in the shopping_mall_coupon_issuances table.","parameters":[{"name":"couponId","description":"The unique identifier of the parent coupon to which this issuance belongs.","schema":{"type":"string","format":"uuid"}},{"name":"issuanceId","description":"The unique identifier for the specific coupon issuance record to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the coupon issuance, such as expires_at, usage_limit, and status. Structure must match IShoppingMallCouponIssuance.IUpdate DTO.","typeName":"IShoppingMallCouponIssuance.IUpdate"},"responseBody":{"description":"Updated coupon issuance entity as per business and audit requirements, reflecting all applied changes.","typeName":"IShoppingMallCouponIssuance"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/coupons/{couponId}/issuances/{issuanceId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/coupons","method":"post"},"description":"Coupon must be created before a specific issuance can be updated, as issuance references its parent coupon."},{"endpoint":{"path":"/shoppingMall/admin/coupons/{couponId}/issuances","method":"post"},"description":"Coupon issuance entity must be created before it can be updated."}]},{"specification":"This operation removes (logically deletes) a specific coupon issuance from the system, referenced by both parent coupon ID and issuance ID. It is crucial for administrators to revoke or clean up erroneous, expired, or misapplied coupon issuances as part of operational management. Directly maps to the shopping_mall_coupon_issuances table, supporting the platform's audit and compliance requirements through soft-deletion.","description":"Through this API, an authorized admin can logically delete a specific coupon issuance entity from the platform. According to the Prisma schema comments on shopping_mall_coupon_issuances, the delete operation will typically set the deleted_at timestamp, ensuring the record remains available for audit and compliance review. Actual removal should not physically erase the row to maintain evidence of all coupon activities.\n\nThis is essential for cases such as mistakenly issued coupons, revoked promotions, or correcting business errors. The system must enforce referential integrity, preventing the deletion of issuances that have already been redeemed or are linked to ongoing promotional analytics where deletion could affect reporting.\n\nError handling must address missing or invalid coupon IDs, non-existent or already-deleted issuance records, and attempts to delete issuances that do not satisfy business rules for revocation. Proper audit logs are to be generated for each execution of this operation.\n\nAuthorization is restricted to admin users, and related operations include reading (GET), updating (PUT), and creating (POST) coupon issuances. Soft-delete strategy is enforced for audit integrity.\n","summary":"Logically delete (revoke) a coupon issuance by coupon and issuance ID from the shopping_mall_coupon_issuances table.","parameters":[{"name":"couponId","description":"The unique identifier of the coupon to which the issuance belongs.","schema":{"type":"string","format":"uuid"}},{"name":"issuanceId","description":"The unique identifier for the specific coupon issuance record to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/coupons/{couponId}/issuances/{issuanceId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/coupons","method":"post"},"description":"Coupon must exist before an issuance (assignment) can be deleted, as every issuance is linked to a coupon."},{"endpoint":{"path":"/shoppingMall/admin/coupons/{couponId}/issuances","method":"post"},"description":"Coupon issuance must exist before it can be deleted."}]},{"specification":"Retrieves a filtered and paginated list of coupon campaigns, supporting advanced searching, filtering, and sorting. This endpoint interfaces with the shopping_mall_coupon_campaigns table, allowing business and admin users to analyze, manage, and audit ongoing or historic coupon campaigns with comprehensive query support. Designed for operational analytics, campaign management, and platform-wide promotion insights.","description":"This API operation allows authorized admin users to search and retrieve a paginated collection of coupon campaigns configured in the shopping mall system. Through the fields of shopping_mall_coupon_campaigns, users can filter campaigns by name, status, date range, and description, as well as sort by business status or activation window. The request body supports IShoppingMallCouponCampaign.IRequest for advanced querying, including search filters and pagination.\n\nResults will be delivered in a paginated structure, referencing the IPageIShoppingMallCouponCampaign.ISummary type for optimized list display. Security and privacy policies restrict this endpoint to admins, since campaign data may encompass sensitive promotional strategies and performance. Any search or list operation should limit results for extremely large datasets and enforce rate limiting for intensive analytics use cases.\n\nThis endpoint supports business process flows such as campaign status tracking, planning, or bulk analytics. Edge cases, such as overlapping campaigns or deleted data, must be handled gracefully. Errors from invalid filters, page boundaries, or unauthorized requests should be consistently surfaced via standard API error responses.\n\nRelated endpoints include campaign creation (POST), campaign status updates (PUT), and reading campaign details (GET by ID).","summary":"Search/filter and paginate coupon campaigns from the shopping_mall_coupon_campaigns table.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination parameters for campaign search, matching IShoppingMallCouponCampaign.IRequest.","typeName":"IShoppingMallCouponCampaign.IRequest"},"responseBody":{"description":"Paginated container of campaign summaries, listing core campaign attributes for high-level management and analytics.","typeName":"IPageIShoppingMallCouponCampaign.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/couponCampaigns","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/couponCampaigns","method":"post"},"description":"At least one coupon campaign must be created to allow advanced search, filtering, and pagination on campaign data."}]},{"specification":"Retrieves the detailed record of a single coupon campaign identified by its unique campaign ID. This operation is essential for business and platform admin users to examine, audit, or manage the configuration, status, or history of a coupon campaign. Directly maps to the shopping_mall_coupon_campaigns table, returning all available fields per schema for the identified campaign.","description":"This API endpoint provides full details of a coupon campaign configured within the shopping mall system, resolving all fields from shopping_mall_coupon_campaigns. The operation requires a campaignId path parameter of type UUID, which uniquely identifies the campaign to retrieve.\n\nSecurity is restricted to admin roles due to the strategic and potentially sensitive nature of campaign configuration—including period, terms, and analytics. The response body references IShoppingMallCouponCampaign, containing comprehensive campaign metadata, status indicators, and activation windows. If the specified campaign does not exist or is soft-deleted, the system returns a suitable error message or not-found response.\n\nThe operation supports business flows such as campaign planning, status auditing, and downstream promotional/analytics orchestration. Related endpoints include campaign search (PATCH), creation (POST), updating (PUT), and logical deletion (DELETE). All read operations should be audit-logged for compliance.\n","summary":"Get complete details of a coupon campaign by its campaignId from shopping_mall_coupon_campaigns.","parameters":[{"name":"campaignId","description":"Unique identifier for the coupon campaign to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed coupon campaign entity capturing all configuration, period, and business status fields.","typeName":"IShoppingMallCouponCampaign"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/couponCampaigns/{campaignId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/couponCampaigns","method":"post"},"description":"A coupon campaign must be created before its details can be retrieved by campaignId."}]},{"specification":"This operation creates a new coupon campaign in the shopping mall platform. It operates on the shopping_mall_coupon_campaigns table as defined in the Prisma schema, allowing administrators to specify all the core properties required for a coupon campaign, such as name, description, duration (starts_at and ends_at), business status, and any additional metadata. The campaign can be used to group multiple coupons under a business concept, such as a promotional event, season, or collaboration. Upon creation, the campaign is available for coupon linkage, issuance, and analytics tracking. The system enforces validation rules for unique campaign name, required fields, and date consistency, and maintains compliance with audit trails for campaign creation.","path":"/shoppingMall/admin/couponCampaigns","method":"post","description":"This endpoint creates a new coupon campaign by inserting a record into the shopping_mall_coupon_campaigns table. The operation requires the administrator to supply all mandatory fields, including the campaign name (which must be unique), optional description, start and end times, and the present business status. The campaign can be in draft, active, or another valid state upon creation, according to the business requirements. Audit and compliance rules require that all creation events are logged including the actor/admin and timestamp. Validation checks ensure the campaign name is not duplicated and the start time precedes the end time.\n\nRole-based permissions mean only admin accounts, identified via authentication and authorization mechanisms, can invoke this operation. The operation is extensible for future features such as campaign analytics, multi-language description, and advanced scheduling. Related operations include updating a campaign, deleting a campaign, and listing active campaigns. Errors are returned if input validation fails or if a campaign name conflict occurs.","summary":"Create a new coupon campaign (shopping_mall_coupon_campaigns table)","parameters":[],"requestBody":{"description":"Coupon campaign creation fields (name, description, schedule, business status, optional metadata)","typeName":"IShoppingMallCouponCampaign.ICreate"},"responseBody":{"description":"Created coupon campaign object with all fields including assigned campaign ID and metadata","typeName":"IShoppingMallCouponCampaign"},"authorizationRole":"admin","authorizationType":null,"name":"create","prerequisites":[]},{"specification":"This operation updates an existing coupon campaign in the shopping mall platform. It applies updates to the shopping_mall_coupon_campaigns table by campaignId and enables modification of any mutable fields, such as the campaign name, description, schedule, or business status. Business validation enforces that the campaignId exists, the new name does not conflict with other campaigns, and that scheduling fields are logically consistent. Updates are recorded in audit logs for compliance.","path":"/shoppingMall/admin/couponCampaigns/{campaignId}","method":"put","description":"This endpoint allows an administrator to update a coupon campaign's metadata (name, description, scheduling, status) in the shopping_mall_coupon_campaigns table. The operation checks for the existence of the campaign identified by the provided campaignId parameter, then applies changes to the permitted fields. Validation ensures updated names remain unique and that the timing fields are logically ordered. All updates are subject to compliance/audit trails recording who performed the update and when.\n\nOnly administrators may execute this operation, and attempts to update nonexistent or deleted campaigns result in error responses. Related operations include creating a new campaign and deleting or listing campaigns. Updated records reflect the new state immediately on success.","summary":"Update an existing coupon campaign (shopping_mall_coupon_campaigns table) by campaignId","parameters":[{"name":"campaignId","description":"The unique identifier of the coupon campaign to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for mutable fields of the coupon campaign (name, description, schedule, business status, etc)","typeName":"IShoppingMallCouponCampaign.IUpdate"},"responseBody":{"description":"The updated coupon campaign record reflecting new field values","typeName":"IShoppingMallCouponCampaign"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/couponCampaigns","method":"post"},"description":"A coupon campaign must be created before it can be updated by campaignId."}]},{"specification":"This operation logically deletes (soft deletes) a coupon campaign in the shopping mall platform by updating the deleted_at field in the shopping_mall_coupon_campaigns table for the specified campaignId. The action preserves the campaign record and its relationship to coupons and analytics for compliance and legal evidence, but excludes the campaign from active operations and queries. The system restricts deletion to admins and ensures associated coupons/campaigns are not in active use. Audit logs record the operation.","path":"/shoppingMall/admin/couponCampaigns/{campaignId}","method":"delete","description":"This endpoint allows administrators to logically delete (soft delete) a coupon campaign identified by the campaignId parameter in the shopping_mall_coupon_campaigns table. Instead of physically removing the data, the deleted_at timestamp is set, preserving historical, analytical, and legal information, while removing the campaign from all business and API responses except those intended for audit/compliance purposes. The operation enforces that the campaign is not already deleted, may check that associated coupons are also safely handled, and always creates a corresponding audit trail event documenting the actor and timestamp.\n\nRestricted to admin users, this operation prevents accidental or unauthorized campaign erasure. Attempts to delete an already deleted or non-existent campaign will fail with a clear error. Soft-deleted campaigns remain available for compliance, analytics, or restoration workflows.","summary":"Soft delete (logically delete) a coupon campaign (shopping_mall_coupon_campaigns table) by campaignId","parameters":[{"name":"campaignId","description":"The unique identifier of the coupon campaign to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/couponCampaigns","method":"post"},"description":"A coupon campaign must be created before it can be deleted by campaignId."}]},{"specification":"This operation retrieves a paginated, filtered list of user deposit accounts from the shopping_mall_deposits table. It supports advanced search, filtering, and sorting on deposit status, balance, associated customer, and date ranges. The operation is intended for administrators to review user balances, search for fraud, or audit user assets. Returned results include pagination metadata and summary statistics.","path":"/shoppingMall/admin/deposits","method":"patch","description":"This endpoint retrieves a paginated and filtered list of deposit accounts (electronic wallet balances) stored in the shopping_mall_deposits table. Administrators may use flexible search criteria (status, minimum/maximum balance, customer association, time windows) bundled in the request body. The response contains an array of deposit summaries and pagination metadata, providing an overview and drill-down capability for finance and audit operations.\n\nStrict access controls ensure only admin roles can enumerate, review, or audit all deposit accounts. Regular users may only access their own balance via a tailored endpoint, not this administrative overview. Error scenarios include invalid filters, excessive result windows, or internal errors. Related APIs exist for deposit transaction history and user-specific balance viewing.","summary":"Admin search/list of all user deposit accounts (shopping_mall_deposits table) with filtering and pagination","parameters":[],"requestBody":{"description":"Filter and search parameters for finding deposit accounts (status, balance window, customer, etc) with pagination and sort options","typeName":"IShoppingMallDeposit.IRequest"},"responseBody":{"description":"Paginated deposit account list with summary information and pagination meta","typeName":"IPageIShoppingMallDeposit.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"A customer must have an existing deposit account before their deposits can be searched or listed by admin. This ensures records exist for listing, searching, and filtering."}]},{"specification":"This operation retrieves detailed information about a specific deposit account entity using its unique depositId. It queries the shopping_mall_deposits table and returns all business data including current balance, status, timestamps, and customer linkage. Soft-deleted (logically removed) deposits will show deletion metadata. The deposit account is the central point for all user monetary transactions (top-up, spend, refund).","description":"Retrieve a single deposit account by its unique identifier. This API provides detailed information on the balance, status, timestamps, and the associated customer of the deposit account.\n\nThis operation accesses the shopping_mall_deposits table. The data returned includes both financial state (balance/status) and audit metadata (created, updated, soft-deleted timestamps) as defined in the Prisma schema.\n\nOnly the owner customer (authenticated) or administrators may use this endpoint, enforced via authorization role in the response. Unauthorized attempts are denied with standard permission errors. Error responses include not-found for non-existent or inaccessible depositId, or forbidden if access is outside permitted scope.\n\nRelated APIs for deposit transactions and account ledgers are available but not directly listed here.","summary":"Get details of a specific deposit account by its ID from shopping_mall_deposits table.","parameters":[{"name":"depositId","description":"Unique identifier for the deposit account (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete deposit account information, including balance, status, audit data, and customer linkage.","typeName":"IShoppingMallDeposit"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/deposits/{depositId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"A deposit account must be created before it can be queried by its ID. Without creation, the depositId would not exist for lookup."}]},{"specification":"This operation creates a new deposit account for a customer, initializing all required account fields and initial balance as specified in the request. It acts on the shopping_mall_deposits table, accepting structured account creation data and returning the persisted record. Only authenticated users can create deposit accounts, and business rules prevent duplicate accounts per customer.","description":"Create a new deposit account for a user. This endpoint receives account initialization data—linking to the customer, setting initial balance, and status. Validation checks include ensuring a customer does not already have an existing active deposit account (enforced by Prisma unique constraint). Attempts to create a duplicate will return a business conflict error.\n\nOnly authenticated users are allowed to trigger deposit account creation (role: customer). Audit fields (created_at, updated_at) are set by the system. Responses include the new deposit account object as persisted in the database.","summary":"Create a new deposit account for a customer in shopping_mall_deposits table.","parameters":[],"requestBody":{"description":"Initial deposit account creation data including customer linkage, balance, and status.","typeName":"IShoppingMallDeposit.ICreate"},"responseBody":{"description":"The deposit account object as created and stored in the database.","typeName":"IShoppingMallDeposit"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/deposits","method":"post","prerequisites":[]},{"specification":"This operation updates details of an existing deposit account specified by depositId. It allows status changes, updates to audit fields, and correction of balance only through approved workflows (manual adjustment, review). Acts on the shopping_mall_deposits table. Returns the updated entity on success. Only the account holder or admin can update, and all changes are audited.","description":"Update the status or other modifiable properties of an existing deposit account using its depositId. This includes status transitions (e.g., active, frozen, under_review, closed) and, where permitted, balance adjustments following regulatory or business-policy controls.\n\nDirect arbitrary changes to the balance field are restricted and require proper audit/reason according to business process—this API should only be used in the context of manual adjustments, administrative reviews, or customer-initiated account status changes. Attempts to update non-existent or soft-deleted deposits will result in not-found errors.\n\nAll update actions are performed with full audit logging, and only authorized actors (account owner or admin) are allowed. No other fields beyond those allowed in IShoppingMallDeposit.IUpdate may be modified through this operation.","summary":"Update existing deposit account data by depositId in shopping_mall_deposits.","parameters":[{"name":"depositId","description":"Unique identifier for the deposit account (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated deposit account data (e.g., status, manual adjustments, or review outcome).","typeName":"IShoppingMallDeposit.IUpdate"},"responseBody":{"description":"The updated deposit account entity after successful modification.","typeName":"IShoppingMallDeposit"},"authorizationType":null,"authorizationRole":"customer","name":"update","path":"/shoppingMall/customer/deposits/{depositId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"A deposit account must exist before it can be updated. This operation ensures the deposit being modified is present in the system."}]},{"specification":"This operation permanently removes (hard deletes) a deposit account from the system based on its depositId. Because the shopping_mall_deposits schema includes a deleted_at timestamp, this API performs a soft delete by setting deleted_at, not a full hard delete. Only account owners or administrators may perform this operation. Once marked deleted, the account cannot be used for further transactions.","description":"Mark the specified deposit account as soft-deleted by setting the deleted_at timestamp. This logical deletion ensures the record is retained for audit and compliance purposes, in line with regulatory requirements for financial systems.\n\nOnly the owner (authenticated user) or an administrator can invoke this delete operation. If the depositId does not exist, a not-found error is returned. After soft deletion, all transactional activity (payments, refunds) for this account are blocked, but historical data remains queryable for evidence and compliance.\n\nAttempts to hard-delete the physical record are denied—only logical deletion supported per schema. An audit trail records who, when, and why the deletion occurred.\n\nError handling includes business logic errors (e.g., trying to delete an already-deleted deposit), and appropriate security checks for role-based permission enforcement.","summary":"Soft-delete (logical removal) of deposit account by depositId in shopping_mall_deposits table.","parameters":[{"name":"depositId","description":"Unique identifier for the deposit account (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/deposits/{depositId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"Deposit account must exist before it can be deleted. The POST operation creates a deposit account which is referenced by depositId."}]},{"specification":"This operation retrieves the complete transaction history for a specific digital deposit account, supporting advanced filtering and pagination. It is based on the 'shopping_mall_deposit_transactions' table in the Prisma schema and enables customers to review all income, outcome, refund, and administrative transactions against their deposit account. Filtering options may include status, type, date range, amount range, business reason, or connection to a parent order. This endpoint enforces customer-scoped access for privacy, supports full auditability, and is essential for financial transparency, dispute resolution, and fraud monitoring.","description":"Retrieve all transactions belonging to a specific user's digital deposit account, as referenced by the depositId path parameter. The operation supports complex querying options—such as searching by transaction type, business status, order reference, or time window—to provide comprehensive visibility over deposit activity. This multi-role endpoint requires authentication as the customer owner or an administrator with audit permissions.\n\nReturned results can be filtered and paginated to handle large account histories efficiently. All records returned are compliant with the regulatory requirement for evidentiary reporting. Responses exclude logically deleted transactions by default, but the schema supports soft deletion for compliance/audit purposes. This operation directly references 'shopping_mall_deposit_transactions' and returns paged data using the appropriate DTO.\n\nSecurity and role validation are critical—customers may access only their own deposit account transactions, while administrators can access all. Rate-limiting and access logging should be applied due to the sensitivity of financial data.","path":"/shoppingMall/customer/deposits/{depositId}/transactions","method":"patch","summary":"List/filter all transactions in a specific deposit account (IShoppingMallDepositTransaction)","parameters":[{"name":"depositId","description":"ID of the target deposit account for which transactions will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination parameters for the deposit account transaction query. May include type, business_status, order reference, date range, or amount range.","typeName":"IShoppingMallDepositTransaction.IRequest"},"responseBody":{"description":"Paginated results containing deposit transactions matching the requested filter criteria.","typeName":"IPageIShoppingMallDepositTransaction"},"authorizationRoles":["customer","admin"],"name":"index","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"Deposit account must exist before transactions can be listed or filtered. The POST operation creates the deposit account referenced by depositId."}]},{"specification":"This operation retrieves the complete transaction history for a specific digital deposit account, supporting advanced filtering and pagination. It is based on the 'shopping_mall_deposit_transactions' table in the Prisma schema and enables customers to review all income, outcome, refund, and administrative transactions against their deposit account. Filtering options may include status, type, date range, amount range, business reason, or connection to a parent order. This endpoint enforces customer-scoped access for privacy, supports full auditability, and is essential for financial transparency, dispute resolution, and fraud monitoring.","description":"Retrieve all transactions belonging to a specific user's digital deposit account, as referenced by the depositId path parameter. The operation supports complex querying options—such as searching by transaction type, business status, order reference, or time window—to provide comprehensive visibility over deposit activity. This multi-role endpoint requires authentication as the customer owner or an administrator with audit permissions.\n\nReturned results can be filtered and paginated to handle large account histories efficiently. All records returned are compliant with the regulatory requirement for evidentiary reporting. Responses exclude logically deleted transactions by default, but the schema supports soft deletion for compliance/audit purposes. This operation directly references 'shopping_mall_deposit_transactions' and returns paged data using the appropriate DTO.\n\nSecurity and role validation are critical—customers may access only their own deposit account transactions, while administrators can access all. Rate-limiting and access logging should be applied due to the sensitivity of financial data.","path":"/shoppingMall/admin/deposits/{depositId}/transactions","method":"patch","summary":"List/filter all transactions in a specific deposit account (IShoppingMallDepositTransaction)","parameters":[{"name":"depositId","description":"ID of the target deposit account for which transactions will be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination parameters for the deposit account transaction query. May include type, business_status, order reference, date range, or amount range.","typeName":"IShoppingMallDepositTransaction.IRequest"},"responseBody":{"description":"Paginated results containing deposit transactions matching the requested filter criteria.","typeName":"IPageIShoppingMallDepositTransaction"},"authorizationRoles":["customer","admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"Deposit account must exist before admin can list or filter transactions. The POST operation creates the deposit account referenced by depositId."}]},{"specification":"This operation retrieves the details of a single deposit transaction identified by its transactionId and its parent depositId. Refers to the 'shopping_mall_deposit_transactions' table. The endpoint allows detailed inspection of individual transaction events for compliance, customer review, or administrative monitoring. Only available to the account owner or administrators by policy, due to the sensitivity of financial data.","description":"Retrieve full information for a specific digital deposit transaction, using both the depositId and transactionId as identifiers. This operation returns all relevant metadata; such as transaction type, order or evidence linkage, business status, amount, reversal history, and audit reference. This is essential for supporting customer queries, handling financial disputes, enabling refund workflows, and investigating suspected fraud or risk cases.\n\nThe operation strictly enforces access control: only the deposit account owner or system administrators may access individual transaction details for privacy and security reasons. Every access is logged for an audit trail. Data is returned as a fully detailed DTO, with all soft deletion or reversal metadata included as required.","path":"/shoppingMall/customer/deposits/{depositId}/transactions/{transactionId}","method":"get","summary":"Retrieve a specific deposit transaction by transactionId (IShoppingMallDepositTransaction)","parameters":[{"name":"depositId","description":"ID of the parent deposit account (for cross-verification and access control).","schema":{"type":"string","format":"uuid"}},{"name":"transactionId","description":"Unique identifier for the deposit transaction to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed deposit transaction information for the specified record.","typeName":"IShoppingMallDepositTransaction"},"authorizationRoles":["customer","admin"],"name":"at","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"Deposit account must exist before its transactions can be retrieved. The POST operation creates the deposit account referenced by depositId."},{"endpoint":{"path":"/shoppingMall/customer/deposits/{depositId}/transactions","method":"post"},"description":"Deposit transaction must exist before it can be retrieved by transactionId. The POST operation creates a transaction for the specified depositId."}]},{"specification":"This operation retrieves the details of a single deposit transaction identified by its transactionId and its parent depositId. Refers to the 'shopping_mall_deposit_transactions' table. The endpoint allows detailed inspection of individual transaction events for compliance, customer review, or administrative monitoring. Only available to the account owner or administrators by policy, due to the sensitivity of financial data.","description":"Retrieve full information for a specific digital deposit transaction, using both the depositId and transactionId as identifiers. This operation returns all relevant metadata; such as transaction type, order or evidence linkage, business status, amount, reversal history, and audit reference. This is essential for supporting customer queries, handling financial disputes, enabling refund workflows, and investigating suspected fraud or risk cases.\n\nThe operation strictly enforces access control: only the deposit account owner or system administrators may access individual transaction details for privacy and security reasons. Every access is logged for an audit trail. Data is returned as a fully detailed DTO, with all soft deletion or reversal metadata included as required.","path":"/shoppingMall/admin/deposits/{depositId}/transactions/{transactionId}","method":"get","summary":"Retrieve a specific deposit transaction by transactionId (IShoppingMallDepositTransaction)","parameters":[{"name":"depositId","description":"ID of the parent deposit account (for cross-verification and access control).","schema":{"type":"string","format":"uuid"}},{"name":"transactionId","description":"Unique identifier for the deposit transaction to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed deposit transaction information for the specified record.","typeName":"IShoppingMallDepositTransaction"},"authorizationRoles":["customer","admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"A deposit account must be created before any transaction associated with a deposit account can be retrieved for compliance details."},{"endpoint":{"path":"/shoppingMall/customer/deposits/{depositId}/transactions","method":"post"},"description":"A deposit transaction must be created in order to retrieve its details by transactionId and depositId."}]},{"specification":"This operation creates a new transaction entry for a digital deposit account, supporting operations such as manual deposit, withdrawal, top-up, admin adjustment, refund, bonus, or reversal. Creation must follow strict validation for financial integrity, fraud/risk controls, and compliance audit trails. Connects to the 'shopping_mall_deposit_transactions' table, and appends entries affecting both the deposit account balance and the audit chain. Access is restricted to account owners for standard use, but administrators can perform adjustments or risk-mitigation actions.","description":"Create a new transaction for a specific user's digital deposit account. The request payload determines the transaction type (income, outcome, refund, admin_adjustment, etc.), amount, business status, and any linked references (such as orders or audit events). Upon creation, the operation enforces business rule validation—including non-negative balances, valid status transitions, and fraud/risk heuristics—and updates the target deposit's balance accordingly.\n\nAll creation events are appended to the deposit's audit log and may trigger compliance or risk scoring. This operation supports customer-initiated activity (manual top-up, refund, spending) as well as admin-initiated adjustments (freezing, deductions, fraud response). Strong access control ensures only the deposit owner (for personal use) or authorized admins (for adjustments/mitigation) can create new records. Upon success, the fully detailed transaction DTO is returned, including the updated status and linkage metadata.","path":"/shoppingMall/customer/deposits/{depositId}/transactions","method":"post","summary":"Create/deposit a new transaction record for a digital wallet (IShoppingMallDepositTransaction)","parameters":[{"name":"depositId","description":"ID of the target deposit account the new transaction will be applied to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complete information required to create a new deposit transaction—type, amount, status, references, evidence, and reason.","typeName":"IShoppingMallDepositTransaction.ICreate"},"responseBody":{"description":"The newly created deposit transaction as a detail DTO.","typeName":"IShoppingMallDepositTransaction"},"authorizationRoles":["customer","admin"],"name":"create","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"A deposit account must exist before a transaction can be created for it."}]},{"specification":"This operation creates a new transaction entry for a digital deposit account, supporting operations such as manual deposit, withdrawal, top-up, admin adjustment, refund, bonus, or reversal. Creation must follow strict validation for financial integrity, fraud/risk controls, and compliance audit trails. Connects to the 'shopping_mall_deposit_transactions' table, and appends entries affecting both the deposit account balance and the audit chain. Access is restricted to account owners for standard use, but administrators can perform adjustments or risk-mitigation actions.","description":"Create a new transaction for a specific user's digital deposit account. The request payload determines the transaction type (income, outcome, refund, admin_adjustment, etc.), amount, business status, and any linked references (such as orders or audit events). Upon creation, the operation enforces business rule validation—including non-negative balances, valid status transitions, and fraud/risk heuristics—and updates the target deposit's balance accordingly.\n\nAll creation events are appended to the deposit's audit log and may trigger compliance or risk scoring. This operation supports customer-initiated activity (manual top-up, refund, spending) as well as admin-initiated adjustments (freezing, deductions, fraud response). Strong access control ensures only the deposit owner (for personal use) or authorized admins (for adjustments/mitigation) can create new records. Upon success, the fully detailed transaction DTO is returned, including the updated status and linkage metadata.","path":"/shoppingMall/admin/deposits/{depositId}/transactions","method":"post","summary":"Create/deposit a new transaction record for a digital wallet (IShoppingMallDepositTransaction)","parameters":[{"name":"depositId","description":"ID of the target deposit account the new transaction will be applied to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Complete information required to create a new deposit transaction—type, amount, status, references, evidence, and reason.","typeName":"IShoppingMallDepositTransaction.ICreate"},"responseBody":{"description":"The newly created deposit transaction as a detail DTO.","typeName":"IShoppingMallDepositTransaction"},"authorizationRoles":["customer","admin"],"name":"create","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"A deposit account must exist before a transaction can be created by an admin for that account."}]},{"specification":"This operation updates an existing deposit transaction, supporting status transitions (e.g., from pending to confirmed, failed, or reversed), fraud investigation metadata, or user-provided explanations. Updates reference the 'shopping_mall_deposit_transactions' table and enforce financial rules: only allowed status transitions, immutability of certain fields, and audit chaining. Admins primarily perform financial reversals, adjustments, or error correction; users may only update reversals or explanations if allowed by business logic.","description":"Modify a specific transaction within a digital deposit account, as referenced by depositId and transactionId. Permitted updates include status advancement, fraud/risk flagging, reversal/adjustment actions, and administrative explanations. Strict validation enforces eligible transitions, ensuring core financial invariants are respected (e.g., no negative post-factum balances, evidentiary snapshots on reversal). All updates generate audit events detailing before/after state, actor, and reason for change.\n\nWhile admins can perform more extensive updates (status, fraud marking, correction), users are limited to allowed fields per business rules and only for their own account transactions. Every operation is logged for regulatory/audit compliance, and errors on improper updates are surfaced with actionable messages. Responses return the fully revised transaction DTO upon success.","path":"/shoppingMall/customer/deposits/{depositId}/transactions/{transactionId}","method":"put","summary":"Update a specific transaction for a deposit account (IShoppingMallDepositTransaction)","parameters":[{"name":"depositId","description":"ID of the deposit account parent. Required for access control and context.","schema":{"type":"string","format":"uuid"}},{"name":"transactionId","description":"ID of the transaction to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified deposit transaction—e.g., business_status, reversal info, fraud markers, etc.","typeName":"IShoppingMallDepositTransaction.IUpdate"},"responseBody":{"description":"The updated deposit transaction record as a detail DTO.","typeName":"IShoppingMallDepositTransaction"},"authorizationRoles":["customer","admin"],"name":"update","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"A deposit account must be created before a transaction within it can be updated."},{"endpoint":{"path":"/shoppingMall/customer/deposits/{depositId}/transactions","method":"post"},"description":"A transaction must be created within the deposit account before it can be updated."}]},{"specification":"This operation updates an existing deposit transaction, supporting status transitions (e.g., from pending to confirmed, failed, or reversed), fraud investigation metadata, or user-provided explanations. Updates reference the 'shopping_mall_deposit_transactions' table and enforce financial rules: only allowed status transitions, immutability of certain fields, and audit chaining. Admins primarily perform financial reversals, adjustments, or error correction; users may only update reversals or explanations if allowed by business logic.","description":"Modify a specific transaction within a digital deposit account, as referenced by depositId and transactionId. Permitted updates include status advancement, fraud/risk flagging, reversal/adjustment actions, and administrative explanations. Strict validation enforces eligible transitions, ensuring core financial invariants are respected (e.g., no negative post-factum balances, evidentiary snapshots on reversal). All updates generate audit events detailing before/after state, actor, and reason for change.\n\nWhile admins can perform more extensive updates (status, fraud marking, correction), users are limited to allowed fields per business rules and only for their own account transactions. Every operation is logged for regulatory/audit compliance, and errors on improper updates are surfaced with actionable messages. Responses return the fully revised transaction DTO upon success.","path":"/shoppingMall/admin/deposits/{depositId}/transactions/{transactionId}","method":"put","summary":"Update a specific transaction for a deposit account (IShoppingMallDepositTransaction)","parameters":[{"name":"depositId","description":"ID of the deposit account parent. Required for access control and context.","schema":{"type":"string","format":"uuid"}},{"name":"transactionId","description":"ID of the transaction to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified deposit transaction—e.g., business_status, reversal info, fraud markers, etc.","typeName":"IShoppingMallDepositTransaction.IUpdate"},"responseBody":{"description":"The updated deposit transaction record as a detail DTO.","typeName":"IShoppingMallDepositTransaction"},"authorizationRoles":["customer","admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"Deposit account must be created before the transaction can be updated."},{"endpoint":{"path":"/shoppingMall/customer/deposits/{depositId}/transactions","method":"post"},"description":"Deposit transaction must exist before it can be updated."}]},{"specification":"This operation removes a specific deposit transaction record for a user, targeting the deposit ledger. It is associated with the shopping_mall_deposit_transactions table in the Prisma DB, which logs all inflow and outflow events for deposit balances. This operation is used for compliance-correct removal (e.g., record correction, admin-initiated reversal) following strict audit, traceability, and business requirement rules. Since the schema has a 'deleted_at' field, this is a logical (soft) delete, preserving record for evidence and auditability. Only users with sufficient privileges may invoke this erase operation, and all delete actions are audit-logged for regulatory compliance. This operation only removes the transaction from active business views; actual balance corrections and compliance evidence are managed elsewhere.","description":"Delete (logically/soft) a specific deposit transaction entry for a given deposit within the shopping mall's digital coin/balance system. The API targets the shopping_mall_deposit_transactions entity as defined in the Prisma model, storing transaction events for all deposit operations including income, outcome, refunds, and administrative adjustments. The operation sets the 'deleted_at' field for the targeted row, indicating it has been logically deleted rather than physically erased, in accordance with regulatory and audit requirements.\n\nPermissions for this endpoint are tightly controlled: typically, only admin users or trusted compliance staff may perform logical deletion, and an audit log must be written (not shown in API response). Authorization checks ensure system integrity and prevent inappropriate tampering with financial history. All related evidence, balance reconciliation, and business-side reversals must be implemented in service/business logic, not this endpoint directly.\n\nRelated endpoints may include transaction creation (POST), viewing single/multiple transactions (GET/PATCH), and evidence snapshot retrieval for compliance/audit resolution. On error (e.g., record not found, insufficient permission), the API returns a clear error message and never returns or exposes deleted transaction details.\n\nThis operation is part of the full deposit/fraud/audit management suite. It requires both depositId and transactionId as path parameters, enforced as UUIDs matching the underlying schema. Attempting to erase a transaction for a mismatched deposit or already-deleted record results in error.","summary":"Logically deletes (soft-delete) a specific deposit transaction for evidence and compliance purposes.","parameters":[{"name":"depositId","description":"Unique identifier for the deposit record containing the transaction; must be a valid UUID as per shopping_mall_deposits.id.","schema":{"type":"string","format":"uuid"}},{"name":"transactionId","description":"Unique identifier for the deposit transaction to be logically deleted; must match shopping_mall_deposit_transactions.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/deposits/{depositId}/transactions/{transactionId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/deposits","method":"post"},"description":"Deposit account must be created before a transaction can exist and be deleted."},{"endpoint":{"path":"/shoppingMall/customer/deposits/{depositId}/transactions","method":"post"},"description":"Deposit transaction must exist before it can be logically deleted."}]},{"specification":"This operation retrieves a filtered, paginated list of all mileage (loyalty/point system) accounts available to the requester. It supports advanced search, sorting, and filtering based on business requirements. The operation is performed on the shopping_mall_mileages table and designed for administrators to audit, manage, and monitor point balances, status (active, expired, etc.), and per-user histories. Filtering capabilities may include status, balance ranges, expiration date, or per-user selection. This endpoint enables operational analytics, compliance checks, and batch reporting for all customer mileage accounts. No direct personal data is exposed unless role/permission allows.","description":"Fetches a list of all mileage (loyalty/point) accounts in the system according to search, filter, and pagination parameters. The shopping_mall_mileages table models each user's mileage/point balance account, used for rewards, campaigns, and compliance audit. This endpoint supports complex request bodies for multifaceted filter/search/sort; it returns a paginated summary suitable for admin analytics dash boards and operational view. Searchable fields typically include account status (active, expired, frozen), expiry date, balance thresholds, and per-user scoping. Only admin users can access all mileage accounts; this operation never exposes raw PII, linking only on business identifiers. Related endpoints include single account detail queries (GET), creation (POST), and mileage transaction history (PATCH/GET on transactions).","summary":"Search and retrieve a filtered, paginated list of shopping mall mileage/point accounts for administrative use.","parameters":[],"requestBody":{"description":"Complex search/filter/sort parameters for mileage (loyalty point) account retrieval and pagination; supports status, balance, and user-based filtering.","typeName":"IShoppingMallMileage.IRequest"},"responseBody":{"description":"Paginated results of mileage/point account summaries matching the search criteria, with pagination and totals for admin dashboards.","typeName":"IPageIShoppingMallMileage.ISummary"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/mileages","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must be created before performing search or filter operations."}]},{"specification":"This operation retrieves detailed information for a single mileage (loyalty/point) account by its unique identifier. It operates on the shopping_mall_mileages table, which holds per-user mileage/point balances, statuses, expiration info, and links to relevant loyalty history. This operation is used for audit, account review, customer support, and loyalty campaign logic, returning the full entity details as per the DB model. Permissions are enforced to ensure only administrators or business staff can access arbitrary accounts; customers may only access their own accounts elsewhere. Not suitable for direct modification, but can inform business eligibility/rule logic elsewhere.","description":"Fetches a detailed, non-editable view of a particular mileage (loyalty/point system) account using its unique mileageId (UUID). The shopping_mall_mileages entity provides per-user point balances, status, and expiry/creation metadata for loyalty programs. This operation is important for admin audit/compliance, support review, or before taking further action on the account. Authorization is limited to administrative/business users; personal account viewing for end customers is handled through user-specific endpoints.\n\nIf the account is not found (invalid or deleted ID) or user lacks permission, the operation returns a clear error code and no account data. Related endpoints include account searching (PATCH /mileages), creation (POST), and transaction viewing. This operation enforces all business security policies, masking or excluding sensitive data as per role and context.","summary":"Retrieve the detailed information of a specific mileage (loyalty point) account by its ID.","parameters":[{"name":"mileageId","description":"Unique identifier for the mileage account record; must be a valid UUID as per shopping_mall_mileages.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the mileage (loyalty/point) account entity specified, including balance, status, expiry, and audit meta.","typeName":"IShoppingMallMileage"},"authorizationRoles":["admin"],"name":"at","path":"/shoppingMall/admin/mileages/{mileageId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must be created before its details can be retrieved."}]},{"specification":"This operation creates a new mileage (loyalty/point) account entity, typically when onboarding a new user or initializing loyalty balances. It works on the shopping_mall_mileages table, which tracks user point balances, status, expiry, and audit meta. Account creation is controlled by admin role to avoid fraudulent abuse or over-issuance; input validation is performed for business legitimacy. This operation is related to user registration or campaign/bonus event enablement. Appropriate business logic should ensure that only unique, uninitialized accounts are created for each customer, and initial balance/status are validated according to requirements. Error responses are provided for duplicate, invalid, or unauthorized attempts. The full created entity is returned on success.","description":"Creates a new mileage (loyalty/point system) account within the shopping mall platform. The shopping_mall_mileages entity captures per-user loyalty point balances and audit meta for all active mileage/point use. This endpoint can be used to initialize a default mileage account for new customers or issue a special loyalty account for bonus campaigns. Permissions are restricted to administrators or business automation modules to maintain regulatory and business integrity.\n\nAll input values are validated per schema and business logic before record creation—duplicate mileage accounts for a user are not allowed, and status/expiry fields are checked for compliance. Success returns the full mileage entity. Related endpoints include retrieval (GET), search (PATCH), and transaction management. Error scenarios provide clear business rationales (e.g., already initialized, bad status value, insufficient permission).","summary":"Create a new shopping mall mileage (loyalty/point) account entity for a user or campaign.","parameters":[],"requestBody":{"description":"Payload for new mileage (loyalty point) account creation; must match schema and business rules for initial status, balance, customer link, etc.","typeName":"IShoppingMallMileage.ICreate"},"responseBody":{"description":"The complete newly created mileage account entity, including balance, status, expiration, and audit meta as per schema.","typeName":"IShoppingMallMileage"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/mileages","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing mileage (loyalty/point system) account by its unique ID. It targets the shopping_mall_mileages table, allowing the user to adjust mileage account attributes such as balance, status, and expiration according to business or administrative requirements. The request body structure must closely align with the mileage fields defined in the Prisma schema, including those for balance, account status, expiration, and soft deletion.","description":"Update a specific mileage record by its UUID from the shopping_mall_mileages table. This operation is used for administrative or customer self-service adjustments to a user's mileage (loyalty point) account, such as balance corrections, status changes (active, expired, frozen), or setting of expiration dates. \n\nThis API requires careful handling of concurrency and security, as altering mileage balances can affect user experience and financial reconciliation. Business rules may restrict who can update which fields, and all actions are typically logged for compliance. The operation also checks the validity of mileage status, ensures non-negative balances, and handles expiration fields as defined in the schema.\n\nAuthorization is enforced based on role: only account owners or administrators may update their mileage. All updates are versioned and may be snapshotted for audit and rollback. Related operations include retrieving a mileage account, paging through transaction history, and account creation or logical deletion. Validation errors should be explicitly communicated, and all field changes require strict audit logging and, where applicable, consent for critical changes (such as balance adjustment).","summary":"Update the details of a mileage (loyalty/point) account in the shopping_mall_mileages table.","parameters":[{"name":"mileageId","description":"The unique identifier of the mileage account to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated mileage account information, including fields such as balance, status, and expiration as defined by the schema.","typeName":"IShoppingMallMileage.IUpdate"},"responseBody":{"description":"The updated mileage account record after modification.","typeName":"IShoppingMallMileage"},"authorizationType":null,"authorizationRole":"customer","name":"update","path":"/shoppingMall/customer/mileages/{mileageId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"A mileage account must exist before it can be updated using its unique ID."}]},{"specification":"This operation updates an existing mileage (loyalty/point system) account by its unique ID. It targets the shopping_mall_mileages table, allowing the user to adjust mileage account attributes such as balance, status, and expiration according to business or administrative requirements. The request body structure must closely align with the mileage fields defined in the Prisma schema, including those for balance, account status, expiration, and soft deletion.","description":"Update a specific mileage record by its UUID from the shopping_mall_mileages table. This operation is used for administrative or customer self-service adjustments to a user's mileage (loyalty point) account, such as balance corrections, status changes (active, expired, frozen), or setting of expiration dates. \n\nThis API requires careful handling of concurrency and security, as altering mileage balances can affect user experience and financial reconciliation. Business rules may restrict who can update which fields, and all actions are typically logged for compliance. The operation also checks the validity of mileage status, ensures non-negative balances, and handles expiration fields as defined in the schema.\n\nAuthorization is enforced based on role: only account owners or administrators may update their mileage. All updates are versioned and may be snapshotted for audit and rollback. Related operations include retrieving a mileage account, paging through transaction history, and account creation or logical deletion. Validation errors should be explicitly communicated, and all field changes require strict audit logging and, where applicable, consent for critical changes (such as balance adjustment).","summary":"Update the details of a mileage (loyalty/point) account in the shopping_mall_mileages table.","parameters":[{"name":"mileageId","description":"The unique identifier of the mileage account to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated mileage account information, including fields such as balance, status, and expiration as defined by the schema.","typeName":"IShoppingMallMileage.IUpdate"},"responseBody":{"description":"The updated mileage account record after modification.","typeName":"IShoppingMallMileage"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/mileages/{mileageId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"A mileage account must exist before it can be updated by admin using its unique ID."}]},{"specification":"This operation performs a logical (soft) deletion of a user's mileage (loyalty/point) account in the shopping_mall_mileages table based on its UUID. Rather than permanently removing the record, it sets the deleted_at field as per the schema's soft deletion policy, and the account is retained for compliance, audit, and dispute resolution.","description":"Soft-delete an existing mileage (loyalty/point) account given its UUID. This operation is intended for either account owners or administrators to deactivate or logically remove a mileage account without losing historical data, as required for legal, financial, or user service reasons.\n\nThe operation simply marks the deleted_at timestamp in accordance with the schema-defined soft delete design. No data is permanently erased, ensuring full audit trails and recoverability for regulatory compliance (such as GDPR/CCPA erasure on proper approval). Only authorized users—typically the owner of the mileage or administrators—may trigger this operation. Coupled with business logic and permission checks, the API ensures no active balance is lost or misaccounted. Related operations include restoring a logically deleted mileage, listing active/inactive accounts, or querying snapshot evidence for disputes.\n\nImplementation MUST NOT physically remove the record or affect associated mileage transactions and analytics. All actions are strictly logged for compliance.","summary":"Soft-delete (logically remove) a mileage account by marking deleted_at in shopping_mall_mileages table.","parameters":[{"name":"mileageId","description":"The unique identifier of the mileage account to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/mileages/{mileageId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"A mileage account must exist before it can be soft-deleted (logically removed) by the customer."}]},{"specification":"This operation performs a logical (soft) deletion of a user's mileage (loyalty/point) account in the shopping_mall_mileages table based on its UUID. Rather than permanently removing the record, it sets the deleted_at field as per the schema's soft deletion policy, and the account is retained for compliance, audit, and dispute resolution.","description":"Soft-delete an existing mileage (loyalty/point) account given its UUID. This operation is intended for either account owners or administrators to deactivate or logically remove a mileage account without losing historical data, as required for legal, financial, or user service reasons.\n\nThe operation simply marks the deleted_at timestamp in accordance with the schema-defined soft delete design. No data is permanently erased, ensuring full audit trails and recoverability for regulatory compliance (such as GDPR/CCPA erasure on proper approval). Only authorized users—typically the owner of the mileage or administrators—may trigger this operation. Coupled with business logic and permission checks, the API ensures no active balance is lost or misaccounted. Related operations include restoring a logically deleted mileage, listing active/inactive accounts, or querying snapshot evidence for disputes.\n\nImplementation MUST NOT physically remove the record or affect associated mileage transactions and analytics. All actions are strictly logged for compliance.","summary":"Soft-delete (logically remove) a mileage account by marking deleted_at in shopping_mall_mileages table.","parameters":[{"name":"mileageId","description":"The unique identifier of the mileage account to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/mileages/{mileageId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must be created before it can be soft-deleted."}]},{"specification":"This operation retrieves a paginated or filtered list of all transactions associated with a specific mileage (loyalty/point) account, by its UUID. It references the shopping_mall_mileage_transactions table and supports search, pagination, sorting, and filtering across transaction history.","description":"Retrieve the full or filtered transaction history for a given mileage account (UUID), as recorded in the shopping_mall_mileage_transactions table. This includes accrual, redemption, expiry, adjustments, and donation/bonus transactions, all tied to the mileage account as per the schema.\n\nThe operation supports complex filtering (e.g., transaction type, status, date ranges), sorting (by date or amount), and standard pagination (page/size parameters) to allow users or administrators to browse both recent and historic transactions. Security and authorization ensure only account owners or authorized admins may view the data, which may contain sensitive financial or loyalty information.\n\nBusiness logic in this operation enforces strict visibility: customers can only see their own mileage transactions, while admins may access broader histories for support, audit, or compliance. Transactions are immutable and provide evidence-grade history for audit trails, dispute resolution, or bonus calculation. All responses comply with data privacy and retention rules.","summary":"List and filter all transactions for a specific mileage (loyalty/point) account using shopping_mall_mileage_transactions table.","parameters":[{"name":"mileageId","description":"UUID of the mileage account for which transactions are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and sorting criteria for listing mileage transactions.","typeName":"IShoppingMallMileageTransaction.IRequest"},"responseBody":{"description":"Paginated and filtered list of all matching mileage transaction records.","typeName":"IPageIShoppingMallMileageTransaction"},"authorizationType":null,"authorizationRole":"customer","name":"index","path":"/shoppingMall/customer/mileages/{mileageId}/transactions","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must be created before its transactions can be listed."}]},{"specification":"This operation retrieves a paginated or filtered list of all transactions associated with a specific mileage (loyalty/point) account, by its UUID. It references the shopping_mall_mileage_transactions table and supports search, pagination, sorting, and filtering across transaction history.","description":"Retrieve the full or filtered transaction history for a given mileage account (UUID), as recorded in the shopping_mall_mileage_transactions table. This includes accrual, redemption, expiry, adjustments, and donation/bonus transactions, all tied to the mileage account as per the schema.\n\nThe operation supports complex filtering (e.g., transaction type, status, date ranges), sorting (by date or amount), and standard pagination (page/size parameters) to allow users or administrators to browse both recent and historic transactions. Security and authorization ensure only account owners or authorized admins may view the data, which may contain sensitive financial or loyalty information.\n\nBusiness logic in this operation enforces strict visibility: customers can only see their own mileage transactions, while admins may access broader histories for support, audit, or compliance. Transactions are immutable and provide evidence-grade history for audit trails, dispute resolution, or bonus calculation. All responses comply with data privacy and retention rules.","summary":"List and filter all transactions for a specific mileage (loyalty/point) account using shopping_mall_mileage_transactions table.","parameters":[{"name":"mileageId","description":"UUID of the mileage account for which transactions are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, pagination, and sorting criteria for listing mileage transactions.","typeName":"IShoppingMallMileageTransaction.IRequest"},"responseBody":{"description":"Paginated and filtered list of all matching mileage transaction records.","typeName":"IPageIShoppingMallMileageTransaction"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/mileages/{mileageId}/transactions","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must be created before its transactions can be listed."}]},{"specification":"This operation retrieves the details of a single transaction record by its unique transactionId UUID, associated with a specific mileage account (UUID). It reads from the shopping_mall_mileage_transactions table, returning full details of the transaction including type, amount, business status, related order (if any), and audit metadata.","description":"Get the complete details of a single mileage (loyalty/point) transaction for a specific mileage account, using both the account UUID and transaction UUID. The operation pulls from the shopping_mall_mileage_transactions table and ensures that access is restricted to only account owners or authorized administrators.\n\nBusiness rules strictly enforce that a user cannot access transactions outside their own account, while administrators can retrieve any transaction for support/audit. Standard validation is applied to confirm both IDs are valid and related. This endpoint is useful for customers reviewing their point activity or for support/finance resolving disputes.\n\nInformation returned includes the full transaction record: transaction type (accrual, spend, adjustment, etc.), amount, status, timestamps, business reason, evidence_reference, and any related order. All access is logged for privacy and compliance.","summary":"Retrieve detailed information for a single mileage transaction record from shopping_mall_mileage_transactions table.","parameters":[{"name":"mileageId","description":"UUID of the parent mileage account.","schema":{"type":"string","format":"uuid"}},{"name":"transactionId","description":"UUID of the specific transaction to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed mileage transaction record for the specified transaction ID.","typeName":"IShoppingMallMileageTransaction"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/mileages/{mileageId}/transactions/{transactionId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must be created before any transactions can exist or be retrieved."},{"endpoint":{"path":"/shoppingMall/admin/mileages/{mileageId}/transactions","method":"post"},"description":"A mileage transaction must be created for the specified mileage account before its transaction details can be retrieved."}]},{"specification":"This operation retrieves the details of a single transaction record by its unique transactionId UUID, associated with a specific mileage account (UUID). It reads from the shopping_mall_mileage_transactions table, returning full details of the transaction including type, amount, business status, related order (if any), and audit metadata.","description":"Get the complete details of a single mileage (loyalty/point) transaction for a specific mileage account, using both the account UUID and transaction UUID. The operation pulls from the shopping_mall_mileage_transactions table and ensures that access is restricted to only account owners or authorized administrators.\n\nBusiness rules strictly enforce that a user cannot access transactions outside their own account, while administrators can retrieve any transaction for support/audit. Standard validation is applied to confirm both IDs are valid and related. This endpoint is useful for customers reviewing their point activity or for support/finance resolving disputes.\n\nInformation returned includes the full transaction record: transaction type (accrual, spend, adjustment, etc.), amount, status, timestamps, business reason, evidence_reference, and any related order. All access is logged for privacy and compliance.","summary":"Retrieve detailed information for a single mileage transaction record from shopping_mall_mileage_transactions table.","parameters":[{"name":"mileageId","description":"UUID of the parent mileage account.","schema":{"type":"string","format":"uuid"}},{"name":"transactionId","description":"UUID of the specific transaction to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed mileage transaction record for the specified transaction ID.","typeName":"IShoppingMallMileageTransaction"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/mileages/{mileageId}/transactions/{transactionId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must be created before its transaction details can be retrieved."},{"endpoint":{"path":"/shoppingMall/admin/mileages/{mileageId}/transactions","method":"post"},"description":"Mileage transaction must be created before it can be fetched."}]},{"specification":"This operation allows a customer to create a new mileage transaction for a specific mileage account. The scope is a single user's mileage balance as represented in the shopping_mall_mileages table, and the new transaction must be written into shopping_mall_mileage_transactions. The creation of the transaction supports auditability and regulatory compliance, with explicit tracking of accruals, spending, expirations, adjustments, bonuses, or refunds as defined in the schema. All actions are linked to the user and may reference an order if applicable. The operation validates business rules—such as non-negative values, type (accrue, spend, expire, etc.), and must ensure balance sufficiency for spend-type transactions. All transaction creation is fully auditable and triggers balance recalculation on success.","description":"Create a new transaction for an existing mileage account (shopping_mall_mileages) belonging to a customer. This API writes a row in shopping_mall_mileage_transactions and is used when users accrue, spend, receive bonuses, or have miles expire. The API validates sufficient balance for spending/expiration, enforces constraints for transaction type (e.g., no accrual for frozen accounts), and records the business reason (campaign, purchase, refund, manual, etc.). The action is fully auditable, with a new transaction created for every mutation, never overwriting previous transactions. If the operation is successful, updated mileage and a reference to the transaction are returned. The API enforces role-based permissions: only the account owner or an admin may create a transaction, and audit logs are generated for compliance. Edge cases, such as attempts to spend more than the available balance, are rejected with descriptive errors. Related APIs include PUT for transaction update and DELETE for transaction cancellation/reversal. All values respect regulatory and promotional rules linked to the account type.","summary":"Create a new mileage transaction for a given mileage account (shopping_mall_mileages).","parameters":[{"name":"mileageId","description":"The unique identifier of the target mileage account for which the transaction is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload describing the type, amount, business context, and reference IDs for the new mileage transaction. Follows the IShoppingMallMileageTransaction.ICreate DTO specification.","typeName":"IShoppingMallMileageTransaction.ICreate"},"responseBody":{"description":"The created mileage transaction, including all assigned fields and calculated balances, following IShoppingMallMileageTransaction schema.","typeName":"IShoppingMallMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"create","path":"/shoppingMall/customer/mileages/{mileageId}/transactions","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must exist before a transaction can be created under it."}]},{"specification":"This operation allows a customer to create a new mileage transaction for a specific mileage account. The scope is a single user's mileage balance as represented in the shopping_mall_mileages table, and the new transaction must be written into shopping_mall_mileage_transactions. The creation of the transaction supports auditability and regulatory compliance, with explicit tracking of accruals, spending, expirations, adjustments, bonuses, or refunds as defined in the schema. All actions are linked to the user and may reference an order if applicable. The operation validates business rules—such as non-negative values, type (accrue, spend, expire, etc.), and must ensure balance sufficiency for spend-type transactions. All transaction creation is fully auditable and triggers balance recalculation on success.","description":"Create a new transaction for an existing mileage account (shopping_mall_mileages) belonging to a customer. This API writes a row in shopping_mall_mileage_transactions and is used when users accrue, spend, receive bonuses, or have miles expire. The API validates sufficient balance for spending/expiration, enforces constraints for transaction type (e.g., no accrual for frozen accounts), and records the business reason (campaign, purchase, refund, manual, etc.). The action is fully auditable, with a new transaction created for every mutation, never overwriting previous transactions. If the operation is successful, updated mileage and a reference to the transaction are returned. The API enforces role-based permissions: only the account owner or an admin may create a transaction, and audit logs are generated for compliance. Edge cases, such as attempts to spend more than the available balance, are rejected with descriptive errors. Related APIs include PUT for transaction update and DELETE for transaction cancellation/reversal. All values respect regulatory and promotional rules linked to the account type.","summary":"Create a new mileage transaction for a given mileage account (shopping_mall_mileages).","parameters":[{"name":"mileageId","description":"The unique identifier of the target mileage account for which the transaction is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload describing the type, amount, business context, and reference IDs for the new mileage transaction. Follows the IShoppingMallMileageTransaction.ICreate DTO specification.","typeName":"IShoppingMallMileageTransaction.ICreate"},"responseBody":{"description":"The created mileage transaction, including all assigned fields and calculated balances, following IShoppingMallMileageTransaction schema.","typeName":"IShoppingMallMileageTransaction"},"authorizationRoles":["customer","admin"],"name":"create","path":"/shoppingMall/admin/mileages/{mileageId}/transactions","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must exist before a transaction can be created under it."}]},{"specification":"This operation updates an existing mileage transaction in the shopping_mall_mileage_transactions table. It is used to modify details such as business status, reason, or evidence references, subject to audit and compliance restrictions. The operation ensures immutability of core transaction data, only allowing fields specified in IShoppingMallMileageTransaction.IUpdate DTO to be changed. A transaction can only be updated before it is finalized/expired. On success, an updated transaction record is returned. All changes are snapshotted for full auditability.","description":"Update an existing transaction for a user's mileage account (shopping_mall_mileages and shopping_mall_mileage_transactions). This API is typically used for administrative or error-correction purposes—updating status, reason, or evidence—but does not allow changing core event amounts or types after finalization. Validations prevent update of finalized or expired transactions. When a transaction is updated, a snapshot of the previous state is kept for compliance, traceability, and rollback. The operation provides descriptive error messages if the transaction is locked or if fields are immutable. Success returns the updated transaction. The action is permitted for admins or, in certain cases, for the customer by business policy.","summary":"Update an existing mileage transaction record by transactionId.","parameters":[{"name":"mileageId","description":"The unique identifier of the mileage account to which the transaction belongs.","schema":{"type":"string","format":"uuid"}},{"name":"transactionId","description":"The unique identifier of the transaction to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the mileage transaction. Follows IShoppingMallMileageTransaction.IUpdate structure; only mutable fields may be updated.","typeName":"IShoppingMallMileageTransaction.IUpdate"},"responseBody":{"description":"The updated mileage transaction entity after applied changes, with audit trail.","typeName":"IShoppingMallMileageTransaction"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/mileages/{mileageId}/transactions/{transactionId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/mileages","method":"post"},"description":"Mileage account must exist before its transaction can be updated."},{"endpoint":{"path":"/shoppingMall/admin/mileages/{mileageId}/transactions","method":"post"},"description":"Mileage transaction must be created before it can be updated."}]},{"specification":"This operation allows an authorized user to cancel or logically delete a mileage transaction from the shopping_mall_mileage_transactions table. The transaction is marked as deleted (soft delete) or reversed, retaining full audit evidence. All reversals must be referenced in compliance logs. Only admin users may directly erase transactions; customers may request cancellation via business workflows. The operation is not allowed on finalized or expired transactions unless business logic allows. The response confirms completion with no body. All deletions are recorded in audit logs for regulatory requirements.","description":"Erase (soft delete or reverse) a mileage transaction for a specified mileage account. This operation marks the transaction as deleted using the deleted_at column, without removing data from the database, to meet audit and compliance requirements. The operation is accessible only to administrators or elevated permission roles. Customers may only request deletion, which triggers an admin review. Attempts to erase finalized or non-existent transactions will result in a detailed error. Audit logs of reversal or deletion are created, and regulatory holds are checked when applicable. No response body is returned on success.","summary":"Logically delete (soft delete or reverse) a mileage transaction by its transactionId for a mileage account.","parameters":[{"name":"mileageId","description":"The unique identifier of the mileage account containing the transaction.","schema":{"type":"string","format":"uuid"}},{"name":"transactionId","description":"The unique identifier of the transaction to be erased (soft deleted/reversed).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/mileages/{mileageId}/transactions/{transactionId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of shopping mall donation records with advanced filtering, search, and sorting capabilities. It operates on the shopping_mall_donations table and supports complex queries to retrieve donation transactions based on customer, source type (deposit or mileage), target campaign code, status, date ranges, and amount. The operation supports pagination for large data sets and is accessible to admins for system-wide analytics, and to customers for their donation history.","description":"Retrieve a filtered, paginated list of donation records from the shopping_mall_donations table. This operation allows both users and administrators to view donation transactions based on various criteria, including customer identity, donation source type (deposit or mileage), campaign code, and status. Pagination parameters ensure efficient navigation through potentially large result sets. Administrators can view system-wide or filtered analytics; customers can view their personal donation history. Search parameters may include time range, amount range, campaign, and transaction status. The operation ensures sensitive information is properly masked for non-admin users, and permission checks prevent cross-user data access. The response contains a paginated summary of donation transactions and relevant statistics.","summary":"Search and retrieve a paginated, filtered list of donation records.","parameters":[],"requestBody":{"description":"Search and pagination parameters for donation filtering, defined by IShoppingMallDonation.IRequest. Supports filtering by customer, campaign code, amount, date range, and status.","typeName":"IShoppingMallDonation.IRequest"},"responseBody":{"description":"Paginated list of donation records (summarized) matching search and filtering criteria. Returns in IPageIShoppingMallDonation.ISummary format.","typeName":"IPageIShoppingMallDonation.ISummary"},"authorizationRoles":["customer","admin"],"name":"index","path":"/shoppingMall/customer/donations","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/donations","method":"post"},"description":"Donation must exist before it can be searched and listed in paginated donation records."}]},{"specification":"This operation retrieves a paginated list of shopping mall donation records with advanced filtering, search, and sorting capabilities. It operates on the shopping_mall_donations table and supports complex queries to retrieve donation transactions based on customer, source type (deposit or mileage), target campaign code, status, date ranges, and amount. The operation supports pagination for large data sets and is accessible to admins for system-wide analytics, and to customers for their donation history.","description":"Retrieve a filtered, paginated list of donation records from the shopping_mall_donations table. This operation allows both users and administrators to view donation transactions based on various criteria, including customer identity, donation source type (deposit or mileage), campaign code, and status. Pagination parameters ensure efficient navigation through potentially large result sets. Administrators can view system-wide or filtered analytics; customers can view their personal donation history. Search parameters may include time range, amount range, campaign, and transaction status. The operation ensures sensitive information is properly masked for non-admin users, and permission checks prevent cross-user data access. The response contains a paginated summary of donation transactions and relevant statistics.","summary":"Search and retrieve a paginated, filtered list of donation records.","parameters":[],"requestBody":{"description":"Search and pagination parameters for donation filtering, defined by IShoppingMallDonation.IRequest. Supports filtering by customer, campaign code, amount, date range, and status.","typeName":"IShoppingMallDonation.IRequest"},"responseBody":{"description":"Paginated list of donation records (summarized) matching search and filtering criteria. Returns in IPageIShoppingMallDonation.ISummary format.","typeName":"IPageIShoppingMallDonation.ISummary"},"authorizationRoles":["customer","admin"],"name":"index","path":"/shoppingMall/admin/donations","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/donations","method":"post"},"description":"Donation must exist before it can be searched and listed in paginated donation records."}]},{"specification":"Retrieve a single donation record by unique donation ID (UUID) from the shopping mall system. This operation targets the shopping_mall_donations table, providing detailed information on a specific deposit or mileage donation event, including donor, amount, campaign code, evidence, and audit fields. The endpoint ensures full transparency into user-initiated donation events for compliance, analytics, or customer support contexts.","description":"This operation retrieves a detailed donation record for a given donation identified by its unique UUID in the shopping_mall_donations table. The donation record includes the donating customer, source type (deposit or mileage), related campaign/event code, transferred amount, donation status (pending, confirmed, failed, refunded, etc.), and full timestamp/audit metadata. \n\nThe endpoint is designed for auditability—enabling compliant review of donation evidence, transparency for analytics, and support for legal inquiries. Only authorized users may access donation records. Customers may request their own information; administrators can access records for compliance, fraud tracking, or dispute resolution. \n\nValidation enforces that donationId matches an extant record and that access controls are respected. Errors may occur if the donation is missing, deleted, or if the caller lacks permission. Related endpoints include donation creation, update, and logical deletion.","summary":"Get details of a specific donation by its UUID from the shopping_mall_donations table.","parameters":[{"name":"donationId","description":"The unique identifier (UUID) of the donation to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full donation record, including donor, source, amount, campaign reference, status, evidence snapshot, and audit fields.","typeName":"IShoppingMallDonation"},"authorizationType":null,"authorizationRole":"customer","name":"at","path":"/shoppingMall/customer/donations/{donationId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/donations","method":"post"},"description":"Donation must be created before it can be retrieved by its UUID."}]},{"specification":"Retrieve a single donation record by unique donation ID (UUID) from the shopping mall system. This operation targets the shopping_mall_donations table, providing detailed information on a specific deposit or mileage donation event, including donor, amount, campaign code, evidence, and audit fields. The endpoint ensures full transparency into user-initiated donation events for compliance, analytics, or customer support contexts.","description":"This operation retrieves a detailed donation record for a given donation identified by its unique UUID in the shopping_mall_donations table. The donation record includes the donating customer, source type (deposit or mileage), related campaign/event code, transferred amount, donation status (pending, confirmed, failed, refunded, etc.), and full timestamp/audit metadata. \n\nThe endpoint is designed for auditability—enabling compliant review of donation evidence, transparency for analytics, and support for legal inquiries. Only authorized users may access donation records. Customers may request their own information; administrators can access records for compliance, fraud tracking, or dispute resolution. \n\nValidation enforces that donationId matches an extant record and that access controls are respected. Errors may occur if the donation is missing, deleted, or if the caller lacks permission. Related endpoints include donation creation, update, and logical deletion.","summary":"Get details of a specific donation by its UUID from the shopping_mall_donations table.","parameters":[{"name":"donationId","description":"The unique identifier (UUID) of the donation to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full donation record, including donor, source, amount, campaign reference, status, evidence snapshot, and audit fields.","typeName":"IShoppingMallDonation"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/donations/{donationId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/donations","method":"post"},"description":"The donation must be created before it can be retrieved."}]},{"specification":"Create a new donation entry in the shopping_mall_donations table for a customer. This API enables deposit or mileage-based charitable or campaign donations, recording the complete context of the transaction: donor, source (deposit/mileage), campaign code, amount, evidence, and full audit trail. Only authenticated users may create donation records.","description":"This operation enables a customer to initiate a new donation using either their deposit balance or mileage points towards a specified campaign. Upon receiving a valid request, the system will validate the donor’s current balance, ensure donation limits or campaign constraints are respected, and record all relevant metadata in the shopping_mall_donations table. Donation creation includes specifying the donation source (deposit or mileage), source account, donation target campaign code, and the intended donation amount.\n\nSecurity and compliance checks are enforced. Only authenticated customers may use this endpoint, and they may only donate from balances belonging to their own account. Business logic validates availability of funds, campaign eligibility, anti-fraud, and that the target campaign code is active if business policies require. On success, the donation is recorded and can be traced for dashboard, historical, or investigative purposes. Errors include insufficient balance, invalid campaign, or fraud detection triggers. Administrative operations for reviewing or analyzing donations are provided separately.","summary":"Create a new donation (deposit or mileage) to a specified campaign, enforcing validation and audit trail.","parameters":[],"requestBody":{"description":"Donation details: source (deposit or mileage), source account, target campaign, and amount.","typeName":"IShoppingMallDonation.ICreate"},"responseBody":{"description":"The created donation entry with all metadata, audit fields, and evidence snapshot reference.","typeName":"IShoppingMallDonation"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/donations","method":"post","prerequisites":[]},{"specification":"Update a previously created donation entry in the shopping_mall_donations table by its UUID. Permitted only for donations that are in an updatable state (e.g., pending review, failed, under investigation). The operation allows changing eligible fields (such as status, evidence, or notes), with full audit tracking and compliance requirements.","description":"This operation allows the update of a donation record, identified by donationId, in the shopping_mall_donations table. Typically used for administrative or support-driven interventions—such as marking a donation as confirmed, failed, refunded, or associating an updated evidence reference or compliance note. For customers, access is strictly limited to their own donations and is only allowed while the donation remains pending, not after finalization.\n\nValidation rules ensure only eligible status transitions or field updates are allowed per business policy and compliance. All update events generate new audit logs, preserving traceability for legal and regulatory needs. The update endpoint does not permit modifying the core donation actor, amount, or target campaign; it is reserved for non-destructive mutations related to status and evidence. Attempts to update finalized, deleted, or unauthorized donations are rejected with a clear error message.","summary":"Update an existing donation entry’s allowed fields (status, evidence, notes) by its UUID.","parameters":[{"name":"donationId","description":"The unique identifier (UUID) of the donation to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Allowed update info: new status (pending, confirmed, failed, refunded), evidence link, or compliance note, subject to business policy.","typeName":"IShoppingMallDonation.IUpdate"},"responseBody":{"description":"The updated donation object reflecting new status, audit metadata, or compliance context.","typeName":"IShoppingMallDonation"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/shoppingMall/admin/donations/{donationId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/donations","method":"post"},"description":"The donation must be created before it can be updated."}]},{"specification":"Logically delete (soft remove) a donation record by its UUID from the shopping_mall_donations table. This operation sets the deleted_at timestamp, preserving the record for audit and compliance. Only permitted for administrators or the donation’s owner prior to final settlement, per compliance and evidence retention policies.","description":"This operation performs logical deletion (soft delete) of the specified donation, referenced by donationId. Rather than removing the record from the database, it sets the deleted_at timestamp to guarantee regulatory evidence retention, auditability, and rollback capabilities. The deletion is only permitted if the donation is not in a finalized or protected state (e.g., after refund/settlement for certain jurisdictions per business logic), and enforces authorization so only the owner or an admin may remove the record. \n\nThis operation complies with data governance requirements, snapshot/evidence retention policies, and ensures consistency with the system’s commitment to non-destructive removal. Attempting to delete a protected, non-existent, or unauthorized donation results in a clear error, with all actions logged for compliance. Use corresponding endpoints for read/recovery as needed.","summary":"Logically delete (soft remove) a donation by its UUID, retaining data for evidence and compliance.","parameters":[{"name":"donationId","description":"The UUID of the donation to logically delete (soft remove).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/shoppingMall/admin/donations/{donationId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/donations","method":"post"},"description":"The donation must be created before it can be logically deleted (soft removed)."}]},{"specification":"Logically delete (soft remove) a donation record by its UUID from the shopping_mall_donations table. This operation sets the deleted_at timestamp, preserving the record for audit and compliance. Only permitted for administrators or the donation’s owner prior to final settlement, per compliance and evidence retention policies.","description":"This operation performs logical deletion (soft delete) of the specified donation, referenced by donationId. Rather than removing the record from the database, it sets the deleted_at timestamp to guarantee regulatory evidence retention, auditability, and rollback capabilities. The deletion is only permitted if the donation is not in a finalized or protected state (e.g., after refund/settlement for certain jurisdictions per business logic), and enforces authorization so only the owner or an admin may remove the record. \n\nThis operation complies with data governance requirements, snapshot/evidence retention policies, and ensures consistency with the system’s commitment to non-destructive removal. Attempting to delete a protected, non-existent, or unauthorized donation results in a clear error, with all actions logged for compliance. Use corresponding endpoints for read/recovery as needed.","summary":"Logically delete (soft remove) a donation by its UUID, retaining data for evidence and compliance.","parameters":[{"name":"donationId","description":"The UUID of the donation to logically delete (soft remove).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/donations/{donationId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/donations","method":"post"},"description":"A donation must exist before it can be logically deleted (soft removed). Creating a donation ensures the donationId being deleted is valid and present in the system."}]},{"specification":"Retrieves a paginated and filtered list of bulletin boards from the shopping mall backend. Operates on the shopping_mall_boards table, supporting advanced searching, filtering (by channel/section, visibility, moderation, created_at, etc.), and sorting. Designed for administrators, sellers, and customers to discover available boards within channels or sections, respecting audit, compliance, and localization/business rules.","path":"/shoppingMall/boards","method":"patch","summary":"Search and retrieve a paginated, filtered list of bulletin boards.","description":"This operation retrieves a list of boards configured in the shopping mall platform, allowing clients to filter by channel, section, visibility, moderation settings, or keywords in the title and description. Returned board data includes all visible boards matching search criteria, with full pagination and sorting control for scalable UIs.\n\nSecurity and access to individual board metadata are governed by user role, board visibility (public/private/role-restricted), and moderation state. Only boards not soft-deleted (deleted_at is null) are included in results.\n\nSupports auditing and compliance requirements by only exposing board metadata as allowed by platform policies, and provides essential building blocks for board, inquiry, or review navigation endpoints.\n\nThis aligns with the shopping_mall_boards schema; board, channel, and section identifiers are validated against existing relationships. Bad or unauthorized queries result in errors with reason codes and business logic feedback. Filtering on soft/hard deletes, section/channel validity, or role-based visibility is strictly enforced.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination criteria for board list retrieval.","typeName":"IShoppingMallBoard.IRequest"},"responseBody":{"description":"Paginated list of board summaries matching filter/search criteria.","typeName":"IPageIShoppingMallBoard.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"At least one board must exist in order to search or retrieve a list of bulletin boards. This operation creates a bulletin board, which is necessary for any subsequent search to return results."}]},{"specification":"Retrieves all visible and authorized metadata for a single bulletin board identified by boardId. Operates on the shopping_mall_boards table and returns board configuration, structure, and business properties (visibility, moderation, expiry, etc.), with additional context for UI rendering and board navigation.","path":"/shoppingMall/boards/{boardId}","method":"get","summary":"Get detailed information for a single bulletin board by ID.","description":"This operation retrieves full detail about a specified board, including display configuration, description, visibility rules, moderation requirements, and linkage to channel/section. Supports localization and role-based access (e.g., hides private boards or restricted metadata from unauthorized users).\n\nAccess is tightly controlled: only boards not soft-deleted (deleted_at is null) and accessible to the requesting user (based on their role and the board visibility/permissions column) are returned. Unauthorized access attempts are rejected with error codes.\n\nBoard metadata integrates with board and post APIs for seamless construction of Q&A, inquiry, or review UIs. All data accurately reflects the shopping_mall_boards schema, ensuring auditability and compliance with evidence policies.","parameters":[{"name":"boardId","description":"Unique identifier of the bulletin board to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed board metadata and configuration for the requested board.","typeName":"IShoppingMallBoard"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"A bulletin board must be created before its details can be retrieved by boardId. This ensures the requested boardId is valid and represents an existing board."}]},{"specification":"Creates a new bulletin board within a channel or section. Operates on the shopping_mall_boards table, supporting the registration of board display names, description, visibility (public/private/role-based), moderation requirements, and optional expiry settings. Accessible to administrators and, in channel/section contexts, authorized sellers/managers.","path":"/shoppingMall/admin/boards","method":"post","summary":"Create a new bulletin board with full configuration and access settings.","description":"This operation allows administrators or authorized users to register a new board in the shopping mall backend, specifying parameters such as channel ID, section ID, title, description, visibility (public, channel, or section-restricted), whether moderation is required, and optional post expiry policy. All required business fields are validated for uniqueness and compliance with naming/policy guidelines (e.g., within-channel title uniqueness).\n\nSecurity controls require authenticated users with board management rights; all actions are audited for compliance. Invalid, duplicate, or unauthorized board creation attempts result in reasoned error responses.\n\nUpon creation, the endpoint returns the complete configuration of the new board per shopping_mall_boards schema, for immediate UI reflection or rule engine integration.","parameters":[],"requestBody":{"description":"Board creation data including channel/section assignment, display and access configuration.","typeName":"IShoppingMallBoard.ICreate"},"responseBody":{"description":"The newly created board with its configuration and access properties.","typeName":"IShoppingMallBoard"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/channels","method":"post"},"description":"A shopping mall channel must exist before a bulletin board can be created, as boards must be associated with a specific channel."},{"endpoint":{"path":"/shoppingMall/admin/channels/{channelId}/sections","method":"post"},"description":"A shopping mall section must exist if the new board is to be associated with a particular section within a channel. This ensures optional section-scoped boards can be created."}]},{"specification":"Updates metadata and configuration for an existing bulletin board specified by boardId. Operates on the shopping_mall_boards table, supporting update of display name, visibility settings, moderation requirement, post expiry days, and business context properties. Designed for administrators and authorized managers (per business rules/policy). Partial or full updates are allowed, with validation against business and audit requirements.","path":"/shoppingMall/admin/boards/{boardId}","method":"put","summary":"Update configuration, visibility, or moderation rules for a bulletin board.","description":"This operation updates properties of a specified board, such as channel and section linkage, display title, description, visibility, moderation requirement, and policy settings (e.g., post expiry). All changes are strictly controlled by business rules, and uniqueness/authorization (e.g., only one 'main' board per channel) is enforced.\n\nOnly users with board management/administrative rights can perform these updates; actions are fully audited. Attempts to update non-existent, deleted, or unauthorized boards yield error responses with feedback for correction.\n\nResponse returns the updated board metadata, directly reflecting storage in the shopping_mall_boards schema, for UI and configuration management integration.","parameters":[{"name":"boardId","description":"Identifier of the bulletin board to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Board update fields: display, business, moderation, or policy changes.","typeName":"IShoppingMallBoard.IUpdate"},"responseBody":{"description":"The updated board entity reflecting all changes.","typeName":"IShoppingMallBoard"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"The board must exist before its configuration, visibility, or moderation rules can be updated."}]},{"specification":"This operation permanently deletes a board from the system. It is associated with the 'shopping_mall_boards' table in the Prisma schema. This operation ensures complete removal of the board entity, performing a hard or soft delete as dictated by the database column 'deleted_at'. Related posts, permissions, and configurations depending on application rules may also be affected, but the primary function is to make the board inaccessible and prevent new posts. Typically used by administrators as part of content moderation, restructuring, or channel maintenance workflows.","description":"The delete board operation enables privileged roles, typically administrators, to remove a board entity from the system. This operation targets the 'shopping_mall_boards' table and sets the 'deleted_at' field with the current timestamp, enforcing a logical (soft) deletion policy. All posts and content associated with the board will become inaccessible and preserved for audit and compliance purposes as per system rules.\n\nSecurity is paramount: only roles with elevated permission, such as 'admin', can call this endpoint. When invoked, dependent business logic is responsible for handling cascading effects on child posts or metadata, as well as triggering compliance or notification workflows.\n\nThe endpoint will validate that the specified board exists and isn't already deleted; non-existent IDs or already-deleted boards yield a business error. The deletion event will be audit-logged for compliance, with downstream moderation and evidence logic triggered where required by business or regulatory rules.","summary":"Soft delete a board by its ID in the shopping_mall_boards table.","parameters":[{"name":"boardId","description":"The unique identifier of the board to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/boards/{boardId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"The board must exist before it can be deleted."}]},{"specification":"This operation retrieves a paginated, filtered, and sorted collection of posts from a specific board. Associated with the 'shopping_mall_board_posts' table in the Prisma schema, it allows advanced search queries including filtering by post attributes, visibility, moderation status, reply hierarchy, creation/update time, and more. The endpoint supports flexible role-based data exposure as board posts are visible to a variety of authenticated roles with permissions varying by role type and board configuration.","description":"Fetch a filtered, paginated list of board posts from a specific board. This operation utilizes the 'shopping_mall_board_posts' table and supports complex list retrieval including filters for moderation status, visibility, post type, author, hierarchical threading, and search on body/title content. The request supports multi-criteria search, custom sorting (by created_at, reply_level, author, or title), and advanced pagination controls.\n\nAll business roles (customer, seller, admin) may access this endpoint, but the details returned per post and the posts shown may vary based on requester role, board configuration, and post visibility (public, private, restricted). Rate limits, content masking or additional compliance measures may apply for boards with private or sensitive content.\n\nComplex business logic may apply to determine which posts are accessible, ensuring only permitted posts and details are included in each response depending on requester's privileges.","summary":"Retrieve a paginated, filtered list of board posts for a specific board.","parameters":[{"name":"boardId","description":"The unique identifier of the board whose posts are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced search, filter, pagination, and sorting criteria for listing board posts.","typeName":"IShoppingMallBoardPost.IRequest"},"responseBody":{"description":"Paginated response with filtered, accessible board posts and summaries for the board.","typeName":"IPageIShoppingMallBoardPost.ISummary"},"authorizationRoles":[],"name":"index","path":"/shoppingMall/boards/{boardId}/posts","method":"patch","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"The board must be created before its posts can be listed, searched, or paginated."}]},{"specification":"This operation retrieves comprehensive details on a single board post identified by its postId, within the context of the specified boardId. Data is sourced from the 'shopping_mall_board_posts' table, providing all primary fields, full content, relationships (e.g., comments, attachments, replies), and supporting advanced permission logic as determined by role and board configuration. Utilized by customers, sellers, or admins to read specific posts and their metadata/audit/version details for business, moderation, or compliance purposes.","description":"Upon successful authorization and access control checks, this retrieves detailed information for a post from the 'shopping_mall_board_posts' table by boardId and postId. The response includes all primary post properties, including title, body, moderation status, author data (masked as appropriate), content/threading details, links to version history and attachments, as well as related entities (like product or order links if applicable).\n\nSecurity controls are enforced so only permitted roles (customer, seller, admin) may access the details, with content masked or restricted based on post visibility, moderation state, and board rules. Board and post existence, soft-deletion state, and access rights are validated. Read access may trigger notification, audit logging, or rate-limiting according to compliance or business policy.","summary":"Get full details of a board post by boardId and postId, with role-based filtering and audit compliance.","parameters":[{"name":"boardId","description":"The unique identifier of the parent board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"The unique identifier of the target post within the board.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comprehensive details on the board post, with all accessible relationships and audit information.","typeName":"IShoppingMallBoardPost"},"authorizationRoles":[],"name":"at","path":"/shoppingMall/boards/{boardId}/posts/{postId}","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"The board must exist before a specific post within it can be retrieved with details."},{"endpoint":{"path":"/shoppingMall/customer/boards/{boardId}/posts","method":"post"},"description":"The post must be created before it can be retrieved by postId for auditing, moderation detail, or viewing all fields."}]},{"specification":"This operation allows an authenticated user (customer, seller, or admin) with permission to create a new post in an existing board. The post may represent a new thread, inquiry, or response at root/reply level depending on board logic. Associated with the 'shopping_mall_board_posts' table, this endpoint validates the provided input against all registration and content policies (mandatory fields, moderation, etc.), sets appropriate status fields, and triggers versioning, notifications, and compliance logic as dictated by board configuration and business rules.","description":"Create a new board post in the given board as defined in the 'shopping_mall_board_posts' table. The operation accepts all fields necessary for content registration, including title, body, reply/thread context, linked product or order if required, visibility, and author identity (automatically from the authenticated context).\n\nThe endpoint enforces all business policies, such as board post structure, maximum body/title length, moderation requirements, and notification triggers. If moderation is enabled, the post will be set to the 'pending' or 'unapproved' status until reviewed. Compliance features snapshot the post at creation, and all primary/foreign relationships (author, parent, product, etc.) are validated for existence and access rights. Rate limiting, duplicate content checks, and anti-spam controls are also triggered on create.","summary":"Create a new board post in a specific board, handling validations, relationships, and moderation policies.","parameters":[{"name":"boardId","description":"The unique identifier of the board in which to create the post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details of the new board post being created (title, body, relationships, etc.), validated per business/board policy.","typeName":"IShoppingMallBoardPost.ICreate"},"responseBody":{"description":"Full data for the created board post, including status and all relevant relationships.","typeName":"IShoppingMallBoardPost"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/boards/{boardId}/posts","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must be created before a post can be added to it."}]},{"specification":"This operation allows an authorized user (such as the original author, admin, or seller, depending on post ownership) to update the content, title, or visibility of a specific board post within a given board. It targets the shopping_mall_board_posts table and supports modification of Markdown or HTML body, moderation status, and meta fields. The operation incorporates comprehensive update validation including ownership/role checks, audit trail creation, and snapshot triggering according to the business rules for content mutation and compliance. Business logic must guarantee only permitted roles may edit posts, and modifications require full justification trail for legal and audit needs. Snapshots must be recorded pre- and post-update for compliance, and any edits may trigger content moderation workflows. Attempts to modify posts outside access rights must be rejected with actionable error codes. Updates to official answers should only be allowed for sellers or admins with scope to the relevant board or product.","path":"/shoppingMall/customer/boards/{boardId}/posts/{postId}","method":"put","summary":"Update a specific board post within a board (shopping_mall_board_posts table).","description":"Update the content, title, and meta fields of a board post belonging to the specified board. This operation is essential for users (customers, sellers, admins) to revise or correct their contributions. Security and permission logic is enforced based on post authorship and user role, following the comments in the shopping_mall_board_posts Prisma schema.\n\nThe API ensures only permitted users can update their own or officially authorized posts, performing full validation of moderation rules and visibility requirements. Every update triggers a preservation snapshot for audit trail purposes as required by the snapshot management logic in both the business requirements and the shopping_mall_board_post_snapshots schema. Unauthorized or invalid update attempts are blocked and produce a descriptive error.\n\nThis operation is closely linked to moderation, notification, and board activity logging, ensuring all edits or meta changes are traceable and reversible as per compliance and dispute needs. Clients should also use relevant GET operations to refresh and sync updated content after a successful update.","parameters":[{"name":"boardId","description":"Unique ID of the target board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique ID of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated board post content and meta fields.","typeName":"IShoppingMallBoardPost.IUpdate"},"responseBody":{"description":"The updated board post object after successful modification.","typeName":"IShoppingMallBoardPost"},"authorizationType":null,"authorizationRole":"customer","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must exist before updating a post in it."}]},{"specification":"This operation allows an authorized user (such as the original author, admin, or seller, depending on post ownership) to update the content, title, or visibility of a specific board post within a given board. It targets the shopping_mall_board_posts table and supports modification of Markdown or HTML body, moderation status, and meta fields. The operation incorporates comprehensive update validation including ownership/role checks, audit trail creation, and snapshot triggering according to the business rules for content mutation and compliance. Business logic must guarantee only permitted roles may edit posts, and modifications require full justification trail for legal and audit needs. Snapshots must be recorded pre- and post-update for compliance, and any edits may trigger content moderation workflows. Attempts to modify posts outside access rights must be rejected with actionable error codes. Updates to official answers should only be allowed for sellers or admins with scope to the relevant board or product.","path":"/shoppingMall/seller/boards/{boardId}/posts/{postId}","method":"put","summary":"Update a specific board post within a board (shopping_mall_board_posts table).","description":"Update the content, title, and meta fields of a board post belonging to the specified board. This operation is essential for users (customers, sellers, admins) to revise or correct their contributions. Security and permission logic is enforced based on post authorship and user role, following the comments in the shopping_mall_board_posts Prisma schema.\n\nThe API ensures only permitted users can update their own or officially authorized posts, performing full validation of moderation rules and visibility requirements. Every update triggers a preservation snapshot for audit trail purposes as required by the snapshot management logic in both the business requirements and the shopping_mall_board_post_snapshots schema. Unauthorized or invalid update attempts are blocked and produce a descriptive error.\n\nThis operation is closely linked to moderation, notification, and board activity logging, ensuring all edits or meta changes are traceable and reversible as per compliance and dispute needs. Clients should also use relevant GET operations to refresh and sync updated content after a successful update.","parameters":[{"name":"boardId","description":"Unique ID of the target board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique ID of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated board post content and meta fields.","typeName":"IShoppingMallBoardPost.IUpdate"},"responseBody":{"description":"The updated board post object after successful modification.","typeName":"IShoppingMallBoardPost"},"authorizationType":null,"authorizationRole":"seller","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must exist before updating a post in it."}]},{"specification":"This operation allows an authorized user (such as the original author, admin, or seller, depending on post ownership) to update the content, title, or visibility of a specific board post within a given board. It targets the shopping_mall_board_posts table and supports modification of Markdown or HTML body, moderation status, and meta fields. The operation incorporates comprehensive update validation including ownership/role checks, audit trail creation, and snapshot triggering according to the business rules for content mutation and compliance. Business logic must guarantee only permitted roles may edit posts, and modifications require full justification trail for legal and audit needs. Snapshots must be recorded pre- and post-update for compliance, and any edits may trigger content moderation workflows. Attempts to modify posts outside access rights must be rejected with actionable error codes. Updates to official answers should only be allowed for sellers or admins with scope to the relevant board or product.","path":"/shoppingMall/admin/boards/{boardId}/posts/{postId}","method":"put","summary":"Update a specific board post within a board (shopping_mall_board_posts table).","description":"Update the content, title, and meta fields of a board post belonging to the specified board. This operation is essential for users (customers, sellers, admins) to revise or correct their contributions. Security and permission logic is enforced based on post authorship and user role, following the comments in the shopping_mall_board_posts Prisma schema.\n\nThe API ensures only permitted users can update their own or officially authorized posts, performing full validation of moderation rules and visibility requirements. Every update triggers a preservation snapshot for audit trail purposes as required by the snapshot management logic in both the business requirements and the shopping_mall_board_post_snapshots schema. Unauthorized or invalid update attempts are blocked and produce a descriptive error.\n\nThis operation is closely linked to moderation, notification, and board activity logging, ensuring all edits or meta changes are traceable and reversible as per compliance and dispute needs. Clients should also use relevant GET operations to refresh and sync updated content after a successful update.","parameters":[{"name":"boardId","description":"Unique ID of the target board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique ID of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated board post content and meta fields.","typeName":"IShoppingMallBoardPost.IUpdate"},"responseBody":{"description":"The updated board post object after successful modification.","typeName":"IShoppingMallBoardPost"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must exist before updating a post in it."}]},{"specification":"This operation performs a soft delete on a specific board post within a board, marking it as logically deleted while preserving all historical data and prior audit trails. The target is the shopping_mall_board_posts table and its associated snapshots in shopping_mall_board_post_snapshots. Only the post's author, a seller for their own posts, or an admin may perform this operation, and all actions are auditable. The operation must validate permission, prevent hard deletion, and maintain compliance with evidence retention rules. The deleted_at timestamp is set to indicate logical removal; content remains recoverable for compliance, moderation, or legal review according to audit retention policies. Unauthorized deletion attempts trigger descriptive, actionable errors.","path":"/shoppingMall/customer/boards/{boardId}/posts/{postId}","method":"delete","summary":"Soft delete a specific board post, marking it as logically removed (shopping_mall_board_posts).","description":"Perform a logical (soft) delete on a board post, recording the deletion event and marking the post as removed by setting deleted_at. The operation enforces that only owners, sellers with appropriate permissions, or administrators may delete the post, following security and role requirements from business rules and the Prisma schema.\n\nDeletion actions are fully auditable, do not physically remove the post, and ensure all previous versions and replies are preserved for potential recovery, compliance, and dispute resolution. Related snapshot entries must be retained for audit trails as directed by shopping_mall_board_post_snapshots. Any errors related to unauthorized access, invalid post state, or compliance-related blockage are surfaced with clear error codes and messages.\n\nClients should update UI listings to reflect the soft deletion state and may display available recovery or dispute options based on the user's role.","parameters":[{"name":"boardId","description":"Unique ID of the target board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique ID of the post to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must exist before a post can be deleted from it."}]},{"specification":"This operation performs a soft delete on a specific board post within a board, marking it as logically deleted while preserving all historical data and prior audit trails. The target is the shopping_mall_board_posts table and its associated snapshots in shopping_mall_board_post_snapshots. Only the post's author, a seller for their own posts, or an admin may perform this operation, and all actions are auditable. The operation must validate permission, prevent hard deletion, and maintain compliance with evidence retention rules. The deleted_at timestamp is set to indicate logical removal; content remains recoverable for compliance, moderation, or legal review according to audit retention policies. Unauthorized deletion attempts trigger descriptive, actionable errors.","path":"/shoppingMall/seller/boards/{boardId}/posts/{postId}","method":"delete","summary":"Soft delete a specific board post, marking it as logically removed (shopping_mall_board_posts).","description":"Perform a logical (soft) delete on a board post, recording the deletion event and marking the post as removed by setting deleted_at. The operation enforces that only owners, sellers with appropriate permissions, or administrators may delete the post, following security and role requirements from business rules and the Prisma schema.\n\nDeletion actions are fully auditable, do not physically remove the post, and ensure all previous versions and replies are preserved for potential recovery, compliance, and dispute resolution. Related snapshot entries must be retained for audit trails as directed by shopping_mall_board_post_snapshots. Any errors related to unauthorized access, invalid post state, or compliance-related blockage are surfaced with clear error codes and messages.\n\nClients should update UI listings to reflect the soft deletion state and may display available recovery or dispute options based on the user's role.","parameters":[{"name":"boardId","description":"Unique ID of the target board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique ID of the post to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"seller","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must exist before a post can be deleted from it."}]},{"specification":"This operation performs a soft delete on a specific board post within a board, marking it as logically deleted while preserving all historical data and prior audit trails. The target is the shopping_mall_board_posts table and its associated snapshots in shopping_mall_board_post_snapshots. Only the post's author, a seller for their own posts, or an admin may perform this operation, and all actions are auditable. The operation must validate permission, prevent hard deletion, and maintain compliance with evidence retention rules. The deleted_at timestamp is set to indicate logical removal; content remains recoverable for compliance, moderation, or legal review according to audit retention policies. Unauthorized deletion attempts trigger descriptive, actionable errors.","path":"/shoppingMall/admin/boards/{boardId}/posts/{postId}","method":"delete","summary":"Soft delete a specific board post, marking it as logically removed (shopping_mall_board_posts).","description":"Perform a logical (soft) delete on a board post, recording the deletion event and marking the post as removed by setting deleted_at. The operation enforces that only owners, sellers with appropriate permissions, or administrators may delete the post, following security and role requirements from business rules and the Prisma schema.\n\nDeletion actions are fully auditable, do not physically remove the post, and ensure all previous versions and replies are preserved for potential recovery, compliance, and dispute resolution. Related snapshot entries must be retained for audit trails as directed by shopping_mall_board_post_snapshots. Any errors related to unauthorized access, invalid post state, or compliance-related blockage are surfaced with clear error codes and messages.\n\nClients should update UI listings to reflect the soft deletion state and may display available recovery or dispute options based on the user's role.","parameters":[{"name":"boardId","description":"Unique ID of the target board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique ID of the post to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must exist before a post can be deleted from it."}]},{"specification":"This operation retrieves a filtered, sorted, and paginated list of comments attached to a given board post. It fetches comment records from the shopping_mall_comments table filtered by board post, supporting search, sorting, threading level, and moderation state as query parameters in the request body, and returns paginated IShoppingMallComment.ISummary results. The operation is open to all roles that have visibility on the parent post, performing role- and visibility-aware data filtering. It is vital for board UIs, compliance review, and moderation workflows, leveraging field and relationship comments from the shopping_mall_comments schema. Pagination and sorting must be efficient for high-traffic boards. The request must specify filtering options like reply level, date range, moderation status, and keyword search for comment bodies. The list only includes comments that are not marked as deleted, except for admin access which may see all.","path":"/shoppingMall/boards/{boardId}/posts/{postId}/comments","method":"patch","summary":"Retrieve a paginated list of comments for a board post (shopping_mall_comments).","description":"Fetch, filter, and paginate comments linked to a specific board post as identified by boardId and postId. The operation enables board viewers to access ongoing comment threads according to sorting and visibility logic. Integrated security checks apply, ensuring that only comments appropriate to the viewer's permissions are returned according to the visibility and moderation status fields in shopping_mall_comments.\n\nBusiness logic includes full support for search and advanced filters, including reply thread level, moderation status, authorship, and time ranges. Response objects only include non-deleted comments by default; admin users may see all, including soft-deleted items for moderation and audit workflows. Pagination and sorting parameters must follow platform-wide standards for UI consistency and high-volume support. This operation is essential for board UIs, moderation interfaces, and compliance review.\n\nThe Prisma schema's threaded and multi-role author structure is respected, and detailed relationships to parent comments, posts, and moderation fields are reflected in both search and response formats.","parameters":[{"name":"boardId","description":"Unique ID of the board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique ID of the post whose comments are requested.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, sort, search, and pagination parameters for comment retrieval.","typeName":"IShoppingMallComment.IRequest"},"responseBody":{"description":"Paginated list of comment summaries matching the given filter for the post.","typeName":"IPageIShoppingMallComment.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must exist before comments can be queried for a post in it."}]},{"specification":"This operation retrieves the full detail of a specific comment associated with a board post, using both board and post nesting for accurate context. The shopping_mall_comments table is used, cross-referencing post and board for secure lookup. The operation is available to all users with permission to read the parent post, but additional business logic masks private or moderated comment details based on user role and authorship. Returned fields follow the shopping_mall_comments schema and include parent/child threading, moderation data, replies, and linked audit/snapshot references. The response reflects all comment metadata except for redacted/private internal content per business rule. If the comment is deleted, the operation returns error or a redacted object depending on user role and compliance context.","path":"/shoppingMall/boards/{boardId}/posts/{postId}/comments/{commentId}","method":"get","summary":"Get a specific comment on a board post by its ID (shopping_mall_comments).","description":"Retrieve the full detail of a comment associated with a specific board post and comment ID. Permissions and data masking are enforced according to comment authorship, parent board post visibility, thread level, and post moderation status, as specified in the shopping_mall_comments Prisma schema and business requirement documents.\n\nThis operation supports clients needing to display an individual comment, including all main fields, author role (customer, seller, admin), threading metadata, moderation status, and any associated audit or compliance data. It also manages logic for content masking when comments are marked as private, moderated, or deleted, showing limited or redacted results based on the requesting user's permissions. Error handling covers not found, access denied, or redacted content scenarios.\n\nClients should use this endpoint for comment detail view, compliance resolution workflows, or threaded UI navigation.","parameters":[{"name":"boardId","description":"Unique ID of the board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique ID of the post the comment belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique ID of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full comment object, with moderation and compliance meta; may be redacted for privacy or compliance, per business rules.","typeName":"IShoppingMallComment"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must be created before any posts or comments can exist on it."},{"endpoint":{"path":"/shoppingMall/customer/boards/{boardId}/posts","method":"post"},"description":"Post must be created within the board before any comments can be associated with it."},{"endpoint":{"path":"/shoppingMall/customer/boards/{boardId}/posts/{postId}/comments","method":"post"},"description":"Comment must be created before it can be retrieved by its ID."}]},{"specification":"This operation allows an authenticated user to create a new comment on a specific post within a board. It operates on the shopping_mall_comments table, supporting multi-role authorship (customer, seller, admin) and enables hierarchical/threaded commenting. When a comment is created, full audit and moderation logic apply as described in the schema. The parent entities are identified via boardId and postId, ensuring that the comment is associated with the correct board and post. All attachments or media should be managed via related attachment APIs. Business rules enforce permission to comment, input validation, and initial moderation status, as required for user-generated content.","description":"This endpoint enables users to submit new comments on a designated post within a bulletin board, supporting threaded discussions and multi-role interaction. Upon creation, the comment records authorship (customer, seller, or admin), content, and relational references to the parent post. Permission checks are applied to enforce who may comment based on board or post visibility, and the initial moderation status is set (pending/approved) depending on board configuration.\n\nThe comment body supports Markdown formatting. The system ensures that the new comment is correctly associated with the board and post by enforcing integrity on boardId and postId. Moderation fields allow for workflows where comments may require approval before publication, with clear tracking of moderation status and explanations. Audit trails are written for each comment creation for compliance and evidence purposes.\n\nAttachments to comments, if necessary, are handled by a separate attachment API and are not part of this operation. Rate limits and anti-abuse measures apply as required by business configuration. Related endpoints include updating and deleting comments, listing thread comments, and managing attachments.","summary":"Create a new comment on a specific board post (shopping_mall_comments).","parameters":[{"name":"boardId","description":"Unique identifier of the target board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the post to comment on.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new comment under a specific post. Includes role-determined author fields and comment content.","typeName":"IShoppingMallComment.ICreate"},"responseBody":{"description":"The created comment including all relational, authorship, and audit metadata.","typeName":"IShoppingMallComment"},"authorizationType":null,"authorizationRole":"customer","name":"create","path":"/shoppingMall/customer/boards/{boardId}/posts/{postId}/comments","method":"post","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must be created before posts and comments can be added."},{"endpoint":{"path":"/shoppingMall/customer/boards/{boardId}/posts","method":"post"},"description":"Post must be created within the board before any comments can be added to it."}]},{"specification":"This operation allows an authenticated user with permission (typically the comment author or an administrator) to update an existing comment on a board post. It works with the shopping_mall_comments table, supporting moderation flows. The parent board, post, and target comment are identified by boardId, postId, and commentId, respectively. Updates are versioned for audit/evidence via supporting snapshot tables. Input is validated for permission, content policy, and moderation rules.","description":"This endpoint supports editing an existing comment associated with a specific board post. The operation validates that the acting user is either the comment author or an authorized moderator/admin, enforcing strict permission and moderation policies. The update process supports changing the comment body and may also include updating moderation status or reason if initiated by an admin.\n\nEvery update is snapshotted for audit and evidence retention by leveraging the comment snapshot mechanism in the underlying schema. All changes—whether by the user or moderator—are logged and versioned, maintaining a full traceable history of the comment's edits for compliance and potential rollback.\n\nInput validation ensures the edited comment adheres to permitted content guidelines (Markdown, length, etc.). Related operations include comment creation, deletion, moderation flagging, and listing thread comments.","summary":"Update an existing comment on a board post (shopping_mall_comments).","parameters":[{"name":"boardId","description":"Unique identifier of the target board.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the post containing the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information necessary for updating the content of an existing comment; supports author- or moderator-initiated changes.","typeName":"IShoppingMallComment.IUpdate"},"responseBody":{"description":"The updated comment including current state, authorship, and all relevant moderation/audit fields.","typeName":"IShoppingMallComment"},"authorizationType":null,"authorizationRole":"customer","name":"update","path":"/shoppingMall/customer/boards/{boardId}/posts/{postId}/comments/{commentId}","method":"put","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must be created before any posts or comments can exist on it."},{"endpoint":{"path":"/shoppingMall/customer/boards/{boardId}/posts","method":"post"},"description":"Post must be created within the board before comments can exist and be updated."},{"endpoint":{"path":"/shoppingMall/customer/boards/{boardId}/posts/{postId}/comments","method":"post"},"description":"Comment must be created before it can be updated by its ID."}]},{"specification":"This operation enables the logical (soft) deletion of a comment on a board post, supporting audit and evidence retention requirements by marking the comment with a deleted timestamp rather than removing it from the database. It operates on the shopping_mall_comments table, with boardId, postId, and commentId as context. Only the comment author or an authorized admin/moderator may perform this action. Audit trails are preserved for legal and compliance purposes; related comment snapshot entries are also managed as needed by business logic.","description":"This endpoint logically removes (soft deletes) a specific comment from a board post by setting the deleted_at timestamp in the corresponding comment record. Deletion rights are restricted to the comment's author or users with appropriate moderation privileges such as admins. Upon deletion, all historical and audit data are preserved in compliance with evidence retention policy.\n\nSoft deleted comments are no longer displayed in standard thread listings but may be accessible to authorized staff for moderation, audit, or dispute review. This action triggers an audit log entry and, if configured, notifies relevant users of the deletion event. Attempts to delete already deleted or unauthorized comments will be rejected with appropriate error messages. Associated comment snapshot records remain for future legal review or recovery.","summary":"Logically (soft) delete an existing comment on a board post (shopping_mall_comments).","parameters":[{"name":"boardId","description":"Unique identifier of the board containing the post and comment.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the post containing the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","path":"/shoppingMall/customer/boards/{boardId}/posts/{postId}/comments/{commentId}","method":"delete","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/boards","method":"post"},"description":"Board must be created before any posts or comments can exist on it."},{"endpoint":{"path":"/shoppingMall/customer/boards/{boardId}/posts","method":"post"},"description":"Post must be created within the board before comments can exist and be deleted."},{"endpoint":{"path":"/shoppingMall/customer/boards/{boardId}/posts/{postId}/comments","method":"post"},"description":"Comment must be created before it can be deleted by its ID."}]},{"specification":"This operation retrieves a filtered and paginated list of product inquiries for a specific product. It works with the shopping_mall_product_inquiries table and supports advanced filtering (e.g., answered/unanswered, visibility, author type, date ranges). The target productId is supplied as a path parameter. The request body specifies pagination, sort order, and extended filtering criteria. The response is a paginated collection of inquiry summaries with key metadata for efficient frontend rendering and additional filtering options.","description":"This endpoint returns a searched and paginated list of inquiries attached to a particular product, enabling features such as advanced filtering (e.g., only show unanswered questions, author role filtering, date-based ranges, or visibility-level selection). The operation optimizes frontend rendering by returning summary records rather than full inquiry objects and supports efficient search/list experience for customers, sellers, and admins.\n\nThe operation enforces access and privacy restrictions based on author and viewer roles. For example, private inquiries are only listable by authors, responders, or admins, while public inquiries are visible according to product and site business rules. The filter request body supports specifying page size, sort, author, status, and additional inquiry properties. This operation is designed to integrate with inquiry creation, detail retrieval, and answer submission endpoints as part of the full Q&A board feature set.","summary":"List and search product inquiries (shopping_mall_product_inquiries) for a specific product with advanced filtering.","parameters":[{"name":"productId","description":"Unique identifier of the product whose inquiries are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Criteria for filtering, sorting, and paginating product inquiries associated with a product.","typeName":"IShoppingMallProductInquiry.IRequest"},"responseBody":{"description":"Paginated list of product inquiry summaries matching filter and search criteria.","typeName":"IPageIShoppingMallProductInquiry.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/shoppingMall/products/{productId}/inquiries","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before any inquiries related to it can be listed, searched, or attached. This prerequisite ensures that the referenced productId is valid and present in the database before querying its inquiries."}]},{"specification":"This operation retrieves detailed information about a specific product inquiry, allowing retrieval of all fields and associated relationships from the shopping_mall_product_inquiries table. The endpoint is designed to provide full details of an inquiry, including visibility, answer status, moderation state, and audit metadata, with support for differentiating author roles (customer or seller) as described in the schema. The operation also integrates with linked product data. Access is restricted to authenticated users who have permission to view the inquiry (i.e., the inquirer, the seller for their product, or administrators), with privacy filtering enforced based on the inquiry's is_private field.","path":"/shoppingMall/customer/products/{productId}/inquiries/{inquiryId}","method":"get","summary":"Retrieve details of a specific product inquiry (shopping_mall_product_inquiries) by inquiryId.","description":"This API operation retrieves detailed information about a single product inquiry from the shopping_mall_product_inquiries table using the inquiry's unique identifier and the related product's identifier. The endpoint delivers all core business fields such as title, body, is_private, answered, moderation_status, and timestamps, as well as information about the author (customer or seller).\n\nAccess control is enforced by examining the inquirer, seller relationship to the product, and administrative privilege. For private inquiries, visibility is limited to the author, seller, and admin roles; for public inquiries, all authenticated users may view the inquiry details. The operation supports robust audit and compliance requirements, including returning fields necessary for evidence and moderation workflows as described in the Prisma schema documentation.\n\nError scenarios, such as unauthorized access to private content or non-existent inquiry/product, return appropriate error messages. This API operation complements list/index endpoints and pairs with creation, update, and delete routes for the same entity.","parameters":[{"name":"productId","description":"Unique identifier of the target product related to the inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier of the product inquiry record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full information of the specified product inquiry record, including all business, audit, and author fields.","typeName":"IShoppingMallProductInquiry"},"authorizationRole":"customer","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries","method":"post"},"description":"Product inquiry must be created first to ensure the inquiryId exists and is valid before attempting to retrieve its details. The referenced productId and inquiryId must both exist."}]},{"specification":"This operation retrieves detailed information about a specific product inquiry, allowing retrieval of all fields and associated relationships from the shopping_mall_product_inquiries table. The endpoint is designed to provide full details of an inquiry, including visibility, answer status, moderation state, and audit metadata, with support for differentiating author roles (customer or seller) as described in the schema. The operation also integrates with linked product data. Access is restricted to authenticated users who have permission to view the inquiry (i.e., the inquirer, the seller for their product, or administrators), with privacy filtering enforced based on the inquiry's is_private field.","path":"/shoppingMall/seller/products/{productId}/inquiries/{inquiryId}","method":"get","summary":"Retrieve details of a specific product inquiry (shopping_mall_product_inquiries) by inquiryId.","description":"This API operation retrieves detailed information about a single product inquiry from the shopping_mall_product_inquiries table using the inquiry's unique identifier and the related product's identifier. The endpoint delivers all core business fields such as title, body, is_private, answered, moderation_status, and timestamps, as well as information about the author (customer or seller).\n\nAccess control is enforced by examining the inquirer, seller relationship to the product, and administrative privilege. For private inquiries, visibility is limited to the author, seller, and admin roles; for public inquiries, all authenticated users may view the inquiry details. The operation supports robust audit and compliance requirements, including returning fields necessary for evidence and moderation workflows as described in the Prisma schema documentation.\n\nError scenarios, such as unauthorized access to private content or non-existent inquiry/product, return appropriate error messages. This API operation complements list/index endpoints and pairs with creation, update, and delete routes for the same entity.","parameters":[{"name":"productId","description":"Unique identifier of the target product related to the inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier of the product inquiry record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full information of the specified product inquiry record, including all business, audit, and author fields.","typeName":"IShoppingMallProductInquiry"},"authorizationRole":"seller","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries","method":"post"},"description":"Product inquiry must be created before retrieving its detail, so that the inquiryId is present and valid for the given productId."}]},{"specification":"This operation retrieves detailed information about a specific product inquiry, allowing retrieval of all fields and associated relationships from the shopping_mall_product_inquiries table. The endpoint is designed to provide full details of an inquiry, including visibility, answer status, moderation state, and audit metadata, with support for differentiating author roles (customer or seller) as described in the schema. The operation also integrates with linked product data. Access is restricted to authenticated users who have permission to view the inquiry (i.e., the inquirer, the seller for their product, or administrators), with privacy filtering enforced based on the inquiry's is_private field.","path":"/shoppingMall/admin/products/{productId}/inquiries/{inquiryId}","method":"get","summary":"Retrieve details of a specific product inquiry (shopping_mall_product_inquiries) by inquiryId.","description":"This API operation retrieves detailed information about a single product inquiry from the shopping_mall_product_inquiries table using the inquiry's unique identifier and the related product's identifier. The endpoint delivers all core business fields such as title, body, is_private, answered, moderation_status, and timestamps, as well as information about the author (customer or seller).\n\nAccess control is enforced by examining the inquirer, seller relationship to the product, and administrative privilege. For private inquiries, visibility is limited to the author, seller, and admin roles; for public inquiries, all authenticated users may view the inquiry details. The operation supports robust audit and compliance requirements, including returning fields necessary for evidence and moderation workflows as described in the Prisma schema documentation.\n\nError scenarios, such as unauthorized access to private content or non-existent inquiry/product, return appropriate error messages. This API operation complements list/index endpoints and pairs with creation, update, and delete routes for the same entity.","parameters":[{"name":"productId","description":"Unique identifier of the target product related to the inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier of the product inquiry record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full information of the specified product inquiry record, including all business, audit, and author fields.","typeName":"IShoppingMallProductInquiry"},"authorizationRole":"admin","authorizationType":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries","method":"post"},"description":"A product inquiry must exist to retrieve its admin-level information. This ensures that both productId and inquiryId reference valid entities."}]},{"specification":"This operation creates a new product inquiry associated with a given product. It writes a record to the shopping_mall_product_inquiries table, validating required fields, applying business logic for moderation (e.g., if moderation is required, inquiry is created with pending status), and linking to author roles (customer or seller) and the product. The endpoint enforces authentication, ownership, and approval logic as defined in the Actors and Product domains.","path":"/shoppingMall/customer/products/{productId}/inquiries","method":"post","summary":"Create a new inquiry for a specific product (shopping_mall_product_inquiries).","description":"This API endpoint allows an authenticated user (customer or seller) to submit an inquiry related to a specific product, creating a new record in the shopping_mall_product_inquiries table. The request validates presence of all required fields (body, and optionally title), links the inquiry to the product specified by productId, and records author metadata based on the user's role. Privacy settings (is_private) and initial moderation status are enforced per the business rules and the schema definition.\n\nOn submission, moderation workflows may be triggered depending on configuration (e.g., board or product settings), and notification logic may queue notices for the seller or admin. The response payload includes the entire inquiry record as persisted, supporting integration into customer or seller interfaces for confirmation and review. Validation failures, unauthorized access, or referencing non-existent products are handled with actionable error messages.\n\nThis endpoint complements update, retrieval, and deletion APIs for product inquiries and supports auditability, evidence preservation, and notification logic as outlined in system requirements.","parameters":[{"name":"productId","description":"Unique identifier of the product for which the inquiry is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Inquiry creation details, including inquiry content, visibility, and author context. Required fields are body and is_private; others are optional per schema.","typeName":"IShoppingMallProductInquiry.ICreate"},"responseBody":{"description":"The complete product inquiry record after creation as stored in the database, including all standard and audit fields.","typeName":"IShoppingMallProductInquiry"},"authorizationRole":"customer","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before an inquiry can be created for it."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before an inquiry can be created for it."}]},{"specification":"This operation creates a new product inquiry associated with a given product. It writes a record to the shopping_mall_product_inquiries table, validating required fields, applying business logic for moderation (e.g., if moderation is required, inquiry is created with pending status), and linking to author roles (customer or seller) and the product. The endpoint enforces authentication, ownership, and approval logic as defined in the Actors and Product domains.","path":"/shoppingMall/seller/products/{productId}/inquiries","method":"post","summary":"Create a new inquiry for a specific product (shopping_mall_product_inquiries).","description":"This API endpoint allows an authenticated user (customer or seller) to submit an inquiry related to a specific product, creating a new record in the shopping_mall_product_inquiries table. The request validates presence of all required fields (body, and optionally title), links the inquiry to the product specified by productId, and records author metadata based on the user's role. Privacy settings (is_private) and initial moderation status are enforced per the business rules and the schema definition.\n\nOn submission, moderation workflows may be triggered depending on configuration (e.g., board or product settings), and notification logic may queue notices for the seller or admin. The response payload includes the entire inquiry record as persisted, supporting integration into customer or seller interfaces for confirmation and review. Validation failures, unauthorized access, or referencing non-existent products are handled with actionable error messages.\n\nThis endpoint complements update, retrieval, and deletion APIs for product inquiries and supports auditability, evidence preservation, and notification logic as outlined in system requirements.","parameters":[{"name":"productId","description":"Unique identifier of the product for which the inquiry is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Inquiry creation details, including inquiry content, visibility, and author context. Required fields are body and is_private; others are optional per schema.","typeName":"IShoppingMallProductInquiry.ICreate"},"responseBody":{"description":"The complete product inquiry record after creation as stored in the database, including all standard and audit fields.","typeName":"IShoppingMallProductInquiry"},"authorizationRole":"seller","authorizationType":null,"name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before an inquiry can be created for it."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before an inquiry can be created for it."}]},{"specification":"This operation updates an existing product inquiry record in the shopping_mall_product_inquiries table with new content or metadata. It allows the author (customer or seller), or an admin, to edit inquiry fields according to permission and moderation logic. The update applies validation rules for editability, privacy, visibility, and audit workflow enforcement, ensuring edited state is snapshotted for compliance.","path":"/shoppingMall/customer/products/{productId}/inquiries/{inquiryId}","method":"put","summary":"Update an existing product inquiry (shopping_mall_product_inquiries) by inquiryId.","description":"This API endpoint permits the update of an existing product inquiry’s fields by the author or a privileged admin. Editable fields include title, body, and is_private (privacy), subject to business rules. The record is identified by inquiryId and scoped to the related product via productId. Audit constraints require that every edit creates an immutable snapshot in the associated version history table, preserving rollback capability and legal evidence as described in the Prisma schema.\n\nPermission checks enforce that only the author (customer or seller), or an admin, may perform the update, and that the inquiry is not already deleted or locked by moderation. Any changes in moderation status, notification triggers, or sensitive context (such as changing privacy from public to private) are validated according to the system’s compliance and moderation model. Appropriate errors are returned on validation, permission, or record existence failures.","parameters":[{"name":"productId","description":"Unique identifier of the product related to the inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier of the product inquiry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated inquiry details (content, privacy, etc.) following edit validation, as defined in the schema.","typeName":"IShoppingMallProductInquiry.IUpdate"},"responseBody":{"description":"Updated product inquiry information after successful edit, including audit, version, and moderation state fields.","typeName":"IShoppingMallProductInquiry"},"authorizationRole":"customer","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its inquiry can be updated."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its inquiry can be updated."}]},{"specification":"This operation updates an existing product inquiry record in the shopping_mall_product_inquiries table with new content or metadata. It allows the author (customer or seller), or an admin, to edit inquiry fields according to permission and moderation logic. The update applies validation rules for editability, privacy, visibility, and audit workflow enforcement, ensuring edited state is snapshotted for compliance.","path":"/shoppingMall/seller/products/{productId}/inquiries/{inquiryId}","method":"put","summary":"Update an existing product inquiry (shopping_mall_product_inquiries) by inquiryId.","description":"This API endpoint permits the update of an existing product inquiry’s fields by the author or a privileged admin. Editable fields include title, body, and is_private (privacy), subject to business rules. The record is identified by inquiryId and scoped to the related product via productId. Audit constraints require that every edit creates an immutable snapshot in the associated version history table, preserving rollback capability and legal evidence as described in the Prisma schema.\n\nPermission checks enforce that only the author (customer or seller), or an admin, may perform the update, and that the inquiry is not already deleted or locked by moderation. Any changes in moderation status, notification triggers, or sensitive context (such as changing privacy from public to private) are validated according to the system’s compliance and moderation model. Appropriate errors are returned on validation, permission, or record existence failures.","parameters":[{"name":"productId","description":"Unique identifier of the product related to the inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier of the product inquiry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated inquiry details (content, privacy, etc.) following edit validation, as defined in the schema.","typeName":"IShoppingMallProductInquiry.IUpdate"},"responseBody":{"description":"Updated product inquiry information after successful edit, including audit, version, and moderation state fields.","typeName":"IShoppingMallProductInquiry"},"authorizationRole":"seller","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"Product must exist before its inquiry can be updated."},{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"Product must exist before its inquiry can be updated."}]},{"specification":"This operation updates an existing product inquiry record in the shopping_mall_product_inquiries table with new content or metadata. It allows the author (customer or seller), or an admin, to edit inquiry fields according to permission and moderation logic. The update applies validation rules for editability, privacy, visibility, and audit workflow enforcement, ensuring edited state is snapshotted for compliance.","path":"/shoppingMall/admin/products/{productId}/inquiries/{inquiryId}","method":"put","summary":"Update an existing product inquiry (shopping_mall_product_inquiries) by inquiryId.","description":"This API endpoint permits the update of an existing product inquiry’s fields by the author or a privileged admin. Editable fields include title, body, and is_private (privacy), subject to business rules. The record is identified by inquiryId and scoped to the related product via productId. Audit constraints require that every edit creates an immutable snapshot in the associated version history table, preserving rollback capability and legal evidence as described in the Prisma schema.\n\nPermission checks enforce that only the author (customer or seller), or an admin, may perform the update, and that the inquiry is not already deleted or locked by moderation. Any changes in moderation status, notification triggers, or sensitive context (such as changing privacy from public to private) are validated according to the system’s compliance and moderation model. Appropriate errors are returned on validation, permission, or record existence failures.","parameters":[{"name":"productId","description":"Unique identifier of the product related to the inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier of the product inquiry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated inquiry details (content, privacy, etc.) following edit validation, as defined in the schema.","typeName":"IShoppingMallProductInquiry.IUpdate"},"responseBody":{"description":"Updated product inquiry information after successful edit, including audit, version, and moderation state fields.","typeName":"IShoppingMallProductInquiry"},"authorizationRole":"admin","authorizationType":null,"name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/inquiries","method":"post"},"description":"A product inquiry must exist before it can be updated by inquiryId. The create operation ensures that both productId and inquiryId are created and available for update or soft deletion operations."}]},{"specification":"This operation performs a soft delete on a specific product inquiry by setting the deleted_at timestamp in the shopping_mall_product_inquiries table. Only the author (customer or seller) or an admin may delete; soft deletion ensures the inquiry remains for evidence and audit but is no longer returned in normal list or detail queries. The system enforces audit trail rules, permission verification, and proper notification to moderators if necessary.","path":"/shoppingMall/customer/products/{productId}/inquiries/{inquiryId}","method":"delete","summary":"Soft delete a product inquiry (shopping_mall_product_inquiries) by inquiryId.","description":"This API operation logically deletes (soft deletes) a product inquiry, marking the record with a deleted_at timestamp rather than removing it from the database, aligning with audit and compliance requirements for evidence preservation as described in the schema. The inquiry is identified by inquiryId and productId, and soft deletion can only be performed by the inquiry’s author (customer or seller) or an admin with sufficient privileges.\n\nUpon soft delete, the inquiry becomes excluded from future list or get operations for regular users, but is retained for legal, moderation, and rollback workflows. This action also triggers audit log generation and may notify moderators or linked authors per notification configuration. Unauthorized deletion attempts, requests for non-existent or already deleted inquiries, or attempts to delete another user's inquiry are denied with appropriate errors.\n\nThis endpoint is intended to work alongside creation, update, and retrieval APIs for inquiries, supporting full evidence trail and compliance logic.","parameters":[{"name":"productId","description":"Unique identifier of the product related to the inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier of the product inquiry to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"customer","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/inquiries","method":"post"},"description":"A product inquiry must be created before it can be soft deleted by inquiryId. This ensures that the referenced inquiry exists for the delete operation."}]},{"specification":"This operation performs a soft delete on a specific product inquiry by setting the deleted_at timestamp in the shopping_mall_product_inquiries table. Only the author (customer or seller) or an admin may delete; soft deletion ensures the inquiry remains for evidence and audit but is no longer returned in normal list or detail queries. The system enforces audit trail rules, permission verification, and proper notification to moderators if necessary.","path":"/shoppingMall/seller/products/{productId}/inquiries/{inquiryId}","method":"delete","summary":"Soft delete a product inquiry (shopping_mall_product_inquiries) by inquiryId.","description":"This API operation logically deletes (soft deletes) a product inquiry, marking the record with a deleted_at timestamp rather than removing it from the database, aligning with audit and compliance requirements for evidence preservation as described in the schema. The inquiry is identified by inquiryId and productId, and soft deletion can only be performed by the inquiry’s author (customer or seller) or an admin with sufficient privileges.\n\nUpon soft delete, the inquiry becomes excluded from future list or get operations for regular users, but is retained for legal, moderation, and rollback workflows. This action also triggers audit log generation and may notify moderators or linked authors per notification configuration. Unauthorized deletion attempts, requests for non-existent or already deleted inquiries, or attempts to delete another user's inquiry are denied with appropriate errors.\n\nThis endpoint is intended to work alongside creation, update, and retrieval APIs for inquiries, supporting full evidence trail and compliance logic.","parameters":[{"name":"productId","description":"Unique identifier of the product related to the inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier of the product inquiry to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"seller","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/inquiries","method":"post"},"description":"A product inquiry must be created before it can be soft deleted by seller. The create endpoint establishes both the product and the initial inquiry required for this operation."}]},{"specification":"This operation performs a soft delete on a specific product inquiry by setting the deleted_at timestamp in the shopping_mall_product_inquiries table. Only the author (customer or seller) or an admin may delete; soft deletion ensures the inquiry remains for evidence and audit but is no longer returned in normal list or detail queries. The system enforces audit trail rules, permission verification, and proper notification to moderators if necessary.","path":"/shoppingMall/admin/products/{productId}/inquiries/{inquiryId}","method":"delete","summary":"Soft delete a product inquiry (shopping_mall_product_inquiries) by inquiryId.","description":"This API operation logically deletes (soft deletes) a product inquiry, marking the record with a deleted_at timestamp rather than removing it from the database, aligning with audit and compliance requirements for evidence preservation as described in the schema. The inquiry is identified by inquiryId and productId, and soft deletion can only be performed by the inquiry’s author (customer or seller) or an admin with sufficient privileges.\n\nUpon soft delete, the inquiry becomes excluded from future list or get operations for regular users, but is retained for legal, moderation, and rollback workflows. This action also triggers audit log generation and may notify moderators or linked authors per notification configuration. Unauthorized deletion attempts, requests for non-existent or already deleted inquiries, or attempts to delete another user's inquiry are denied with appropriate errors.\n\nThis endpoint is intended to work alongside creation, update, and retrieval APIs for inquiries, supporting full evidence trail and compliance logic.","parameters":[{"name":"productId","description":"Unique identifier of the product related to the inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier of the product inquiry to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/inquiries","method":"post"},"description":"A product inquiry must be created before an admin can soft delete it by inquiryId. This prerequisite ensures the targeted inquiry record is valid and present for deletion."}]},{"specification":"Retrieve a list of answers for a specific product inquiry. This operates on the shopping_mall_inquiry_answers table, allowing both customers and staff to retrieve responses for an inquiry. Supports threaded, official, and multi-role answer retrieval. Designed for audit trail and moderation.","path":"/shoppingMall/products/{productId}/inquiries/{inquiryId}/answers","method":"patch","description":"This endpoint retrieves paginated, filtered, and sorted answers for a specified product's inquiry. It supports advanced search and list options, including author type (seller/admin), moderation status, official answer flag, and full audit compliance.\n\nRole-specific responses are enabled, showing full detail for sellers/admins and privacy-protected fields for ordinary users. Pagination, query, and sorting enhance usability for large boards. Only authorized users can view private or restricted answers, and related moderation states are considered.\n\nThis leverages the shopping_mall_inquiry_answers schema—each answer includes references to seller/admin authorship, main body, moderation state, timestamps, and official-answer flag. Filtering supports status, author, and meta-search (such as pending moderation or official answers only).","summary":"Retrieve paginated, filtered answers for a product inquiry (shopping_mall_inquiry_answers)","parameters":[{"name":"productId","description":"Target product's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Target inquiry's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination/filtering criteria for inquiry answers","typeName":"IShoppingMallInquiryAnswer.IRequest"},"responseBody":{"description":"Paginated, filtered answer list with status and authorship info","typeName":"IPageIShoppingMallInquiryAnswer"},"authorizationType":null,"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries","method":"post"},"description":"The product inquiry must be created before answers for it can be retrieved. Use this endpoint to create the inquiry referenced by inquiryId."}]},{"specification":"Retrieve a specific answer to a product inquiry using its unique identifier. This operates on the shopping_mall_inquiry_answers table, returning full detail including authorship, moderation state, and official answer status. Allows both private and public answer retrieval based on user role and permissions.","path":"/shoppingMall/products/{productId}/inquiries/{inquiryId}/answers/{answerId}","method":"get","description":"Fetch the full answer detail for a single product inquiry's answer. Requires authorization—ordinary users may only view public or their own answers, while sellers and admins may access additional metadata such as moderation status or reviewer information.\n\nThe schema supports threading (parent/child linkage), official-answer flags, author (seller or admin), moderation and notification information. The response provides all answer content and meta except for internal moderation data if requester lacks privilege. Used in moderation, thread display, or evidence presentation workflows.\n\nThis references the shopping_mall_inquiry_answers schema: answerId uniquely selects the answer row for the target inquiry/product.","summary":"Get detailed information for a specific product inquiry answer (shopping_mall_inquiry_answers)","parameters":[{"name":"productId","description":"Target product's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Target inquiry's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"answerId","description":"Target answer's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full answer detail for the inquiry, scoped for role and access level","typeName":"IShoppingMallInquiryAnswer"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries","method":"post"},"description":"The product inquiry for this answer must exist before retrieving the answer."},{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries/{inquiryId}/answers","method":"post"},"description":"The inquiry answer itself must be created first before it can be fetched by this operation."}]},{"specification":"Create a new official or threaded answer for a specific product inquiry. Operates on shopping_mall_inquiry_answers; supports seller/admin authorship, moderation hooks, threaded response structure, and notification triggers. Verifies that inquiry is eligible for response.","path":"/shoppingMall/seller/products/{productId}/inquiries/{inquiryId}/answers","method":"post","description":"Creates a new answer to a product inquiry for a specified product. Permitted actors are sellers (answering their own products/inquiries) or admins (platform moderation or official responses). The schema records responder (seller/admin), body, official-answer flag, and relation to the target inquiry.\n\nValidation ensures that only authorized users can answer, that the inquiry is still open and not already answered if exclusive, and that moderation/notification flags are set correctly. The post is subject to moderation workflow with audit trail created on submission. Any attached files or thread context are referenced in the request body.","summary":"Create a new answer for a product inquiry (shopping_mall_inquiry_answers)","parameters":[{"name":"productId","description":"Target product's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Target inquiry's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Answer content, authorship info, moderation/meta for new answer creation","typeName":"IShoppingMallInquiryAnswer.ICreate"},"responseBody":{"description":"Full answer entity as created, including moderation state and audit meta","typeName":"IShoppingMallInquiryAnswer"},"authorizationType":null,"authorizationRole":"seller","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries","method":"post"},"description":"A product inquiry must exist for the given product before an answer can be created for it."}]},{"specification":"Create a new official or threaded answer for a specific product inquiry. Operates on shopping_mall_inquiry_answers; supports seller/admin authorship, moderation hooks, threaded response structure, and notification triggers. Verifies that inquiry is eligible for response.","path":"/shoppingMall/admin/products/{productId}/inquiries/{inquiryId}/answers","method":"post","description":"Creates a new answer to a product inquiry for a specified product. Permitted actors are sellers (answering their own products/inquiries) or admins (platform moderation or official responses). The schema records responder (seller/admin), body, official-answer flag, and relation to the target inquiry.\n\nValidation ensures that only authorized users can answer, that the inquiry is still open and not already answered if exclusive, and that moderation/notification flags are set correctly. The post is subject to moderation workflow with audit trail created on submission. Any attached files or thread context are referenced in the request body.","summary":"Create a new answer for a product inquiry (shopping_mall_inquiry_answers)","parameters":[{"name":"productId","description":"Target product's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Target inquiry's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Answer content, authorship info, moderation/meta for new answer creation","typeName":"IShoppingMallInquiryAnswer.ICreate"},"responseBody":{"description":"Full answer entity as created, including moderation state and audit meta","typeName":"IShoppingMallInquiryAnswer"},"authorizationType":null,"authorizationRole":"admin","name":"create","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries","method":"post"},"description":"A product inquiry must exist for the given product before an admin answer can be created for it."}]},{"specification":"Update a specific answer for a product inquiry. This allows sellers/admins to revise their previously submitted answer, subject to moderation and audit. Operates on shopping_mall_inquiry_answers, recording full version history with immutable snapshots after each edit.","path":"/shoppingMall/seller/products/{productId}/inquiries/{inquiryId}/answers/{answerId}","method":"put","description":"Updates an existing product inquiry answer by its unique answerId for the given product/inquiry context. Authorization checks ensure only the author (seller/admin) or an admin with override rights can edit the answer. Post-update, the system records a full snapshot for compliance/history.\n\nAll moderated fields (body, official-answer flag, moderation status, etc.) are eligible for update, subject to business validation. The operation triggers moderation flows and audit logs, ensuring traceable compliance under dispute or compliance requests. Historical versions of the answer are accessible for admins.","summary":"Update an existing answer to a product inquiry (shopping_mall_inquiry_answers)","parameters":[{"name":"productId","description":"Target product's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Target inquiry's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"answerId","description":"Target answer's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update, including moderation state, content, and thread/meta","typeName":"IShoppingMallInquiryAnswer.IUpdate"},"responseBody":{"description":"Updated answer entity with relevant snapshot and moderation meta","typeName":"IShoppingMallInquiryAnswer"},"authorizationType":null,"authorizationRole":"seller","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries/{inquiryId}/answers","method":"post"},"description":"A product inquiry answer must exist before it can be updated."}]},{"specification":"Update a specific answer for a product inquiry. This allows sellers/admins to revise their previously submitted answer, subject to moderation and audit. Operates on shopping_mall_inquiry_answers, recording full version history with immutable snapshots after each edit.","path":"/shoppingMall/admin/products/{productId}/inquiries/{inquiryId}/answers/{answerId}","method":"put","description":"Updates an existing product inquiry answer by its unique answerId for the given product/inquiry context. Authorization checks ensure only the author (seller/admin) or an admin with override rights can edit the answer. Post-update, the system records a full snapshot for compliance/history.\n\nAll moderated fields (body, official-answer flag, moderation status, etc.) are eligible for update, subject to business validation. The operation triggers moderation flows and audit logs, ensuring traceable compliance under dispute or compliance requests. Historical versions of the answer are accessible for admins.","summary":"Update an existing answer to a product inquiry (shopping_mall_inquiry_answers)","parameters":[{"name":"productId","description":"Target product's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Target inquiry's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}},{"name":"answerId","description":"Target answer's unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update, including moderation state, content, and thread/meta","typeName":"IShoppingMallInquiryAnswer.IUpdate"},"responseBody":{"description":"Updated answer entity with relevant snapshot and moderation meta","typeName":"IShoppingMallInquiryAnswer"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/inquiries/{inquiryId}/answers","method":"post"},"description":"A product inquiry answer must exist before it can be updated."}]},{"specification":"This operation permanently removes a specific answer to a product inquiry. It corresponds to the shopping_mall_inquiry_answers table in the Prisma schema. Deletion is only available for sellers or admins who originally authored the answer, or have global moderation permissions. The operation uses hard (permanent) deletion, as the table has 'deleted_at' for soft deletion. The operation requires productId, inquiryId, and answerId path parameters to uniquely identify the answer to be deleted. On successful deletion, no response body is returned. Audit and moderation logs are managed via system-level triggers and do not require direct user intervention.","description":"This endpoint is designed to delete a single answer from a product inquiry within the system. It is associated with the shopping_mall_inquiry_answers table in the Prisma schema, which tracks official answers provided by sellers or administrators to inquiries posted about products. \n\nDeletion rights are typically restricted to the answer's author, corresponding seller, or an administrator with moderation privileges. Since soft delete is supported (via the 'deleted_at' field), this operation will mark the record as deleted while retaining its history for evidence and compliance purposes. \n\nTo perform the operation, the requestor must specify the target productId, inquiryId, and answerId in the path. Each ID must be a valid UUID, corresponding to the hierarchy: product → inquiry → answer. \n\nSecurity: Only authenticated sellers (for their own products/inquiries) or admins may execute this API. An audit log entry will be saved, and attempts to delete unauthorized/nonexistent or already-deleted answers will result in a relevant error. \n\nRelated operations include creating, updating, or retrieving answers through the respective endpoints. This deletion operation ensures compliance by preserving the deleted state, enabling full legal traceability and rollback if necessary.","summary":"Permanently deletes a specific answer to a product inquiry (shopping_mall_inquiry_answers).","parameters":[{"name":"productId","description":"Unique identifier for the target product.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier for the product inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"answerId","description":"Unique identifier for the answer to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/seller/products/{productId}/inquiries/{inquiryId}/answers/{answerId}","method":"delete","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products/{productId}/inquiries/{inquiryId}/answers","method":"post"},"description":"A product inquiry answer must exist before it can be deleted."}]},{"specification":"This operation permanently removes a specific answer to a product inquiry. It corresponds to the shopping_mall_inquiry_answers table in the Prisma schema. Deletion is only available for sellers or admins who originally authored the answer, or have global moderation permissions. The operation uses hard (permanent) deletion, as the table has 'deleted_at' for soft deletion. The operation requires productId, inquiryId, and answerId path parameters to uniquely identify the answer to be deleted. On successful deletion, no response body is returned. Audit and moderation logs are managed via system-level triggers and do not require direct user intervention.","description":"This endpoint is designed to delete a single answer from a product inquiry within the system. It is associated with the shopping_mall_inquiry_answers table in the Prisma schema, which tracks official answers provided by sellers or administrators to inquiries posted about products. \n\nDeletion rights are typically restricted to the answer's author, corresponding seller, or an administrator with moderation privileges. Since soft delete is supported (via the 'deleted_at' field), this operation will mark the record as deleted while retaining its history for evidence and compliance purposes. \n\nTo perform the operation, the requestor must specify the target productId, inquiryId, and answerId in the path. Each ID must be a valid UUID, corresponding to the hierarchy: product → inquiry → answer. \n\nSecurity: Only authenticated sellers (for their own products/inquiries) or admins may execute this API. An audit log entry will be saved, and attempts to delete unauthorized/nonexistent or already-deleted answers will result in a relevant error. \n\nRelated operations include creating, updating, or retrieving answers through the respective endpoints. This deletion operation ensures compliance by preserving the deleted state, enabling full legal traceability and rollback if necessary.","summary":"Permanently deletes a specific answer to a product inquiry (shopping_mall_inquiry_answers).","parameters":[{"name":"productId","description":"Unique identifier for the target product.","schema":{"type":"string","format":"uuid"}},{"name":"inquiryId","description":"Unique identifier for the product inquiry.","schema":{"type":"string","format":"uuid"}},{"name":"answerId","description":"Unique identifier for the answer to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["seller","admin"],"name":"erase","path":"/shoppingMall/admin/products/{productId}/inquiries/{inquiryId}/answers/{answerId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products/{productId}/inquiries/{inquiryId}/answers","method":"post"},"description":"A product inquiry answer must exist before it can be deleted."}]},{"specification":"This operation retrieves a filtered, paginated list of product review summaries with comprehensive search and sort features. Based on the shopping_mall_reviews table in the Prisma schema, it supports complex query parameters such as reviewer, product, rating, moderation status, and date. The endpoint is suitable for use in review management dashboards, analytics, or public product displays. Role-based access ensures customers see only their own reviews, while sellers/admins can see broader sets depending on permissions.","description":"Use this endpoint to search and retrieve a paginated collection of product review summaries. The operation leverages the shopping_mall_reviews table, referencing all available review metadata, including associations to products, orders, reviewers (customer or seller), and moderation status fields.\n\nThis endpoint is optimized for advanced filtering—clients can search or sort review data by product, rating, moderation status, creation date, reviewer, or associated order. Full pagination support allows efficient data loading for dashboards, listing pages, and analytics. \n\nSecurity: Customers can only access their own reviews. Sellers access reviews on their listed products. Admins may access all reviews system-wide for moderation and reporting purposes.\n\nThe response includes only summary details (not full review content or thread), suitable for listing views or analytics screens. Related APIs include review detail retrieval (GET /reviews/{reviewId}), creation, and update endpoints.","summary":"Retrieve a filtered, paginated list of product review summaries (shopping_mall_reviews).","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for retrieving product review summaries.","typeName":"IShoppingMallReview.IRequest"},"responseBody":{"description":"Paginated summary list of product reviews matching search criteria.","typeName":"IPageIShoppingMallReview.ISummary"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/customer/reviews","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"A product review must be created before it can be listed in a filtered, paginated summary. The PATCH operation depends on the existence of at least one review in the database."}]},{"specification":"This operation retrieves a filtered, paginated list of product review summaries with comprehensive search and sort features. Based on the shopping_mall_reviews table in the Prisma schema, it supports complex query parameters such as reviewer, product, rating, moderation status, and date. The endpoint is suitable for use in review management dashboards, analytics, or public product displays. Role-based access ensures customers see only their own reviews, while sellers/admins can see broader sets depending on permissions.","description":"Use this endpoint to search and retrieve a paginated collection of product review summaries. The operation leverages the shopping_mall_reviews table, referencing all available review metadata, including associations to products, orders, reviewers (customer or seller), and moderation status fields.\n\nThis endpoint is optimized for advanced filtering—clients can search or sort review data by product, rating, moderation status, creation date, reviewer, or associated order. Full pagination support allows efficient data loading for dashboards, listing pages, and analytics. \n\nSecurity: Customers can only access their own reviews. Sellers access reviews on their listed products. Admins may access all reviews system-wide for moderation and reporting purposes.\n\nThe response includes only summary details (not full review content or thread), suitable for listing views or analytics screens. Related APIs include review detail retrieval (GET /reviews/{reviewId}), creation, and update endpoints.","summary":"Retrieve a filtered, paginated list of product review summaries (shopping_mall_reviews).","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for retrieving product review summaries.","typeName":"IShoppingMallReview.IRequest"},"responseBody":{"description":"Paginated summary list of product reviews matching search criteria.","typeName":"IPageIShoppingMallReview.ISummary"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/seller/reviews","method":"patch","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"A product must be registered by the seller before any product reviews can exist or be listed. The PATCH for seller review summaries requires products to exist as review targets."}]},{"specification":"This operation retrieves a filtered, paginated list of product review summaries with comprehensive search and sort features. Based on the shopping_mall_reviews table in the Prisma schema, it supports complex query parameters such as reviewer, product, rating, moderation status, and date. The endpoint is suitable for use in review management dashboards, analytics, or public product displays. Role-based access ensures customers see only their own reviews, while sellers/admins can see broader sets depending on permissions.","description":"Use this endpoint to search and retrieve a paginated collection of product review summaries. The operation leverages the shopping_mall_reviews table, referencing all available review metadata, including associations to products, orders, reviewers (customer or seller), and moderation status fields.\n\nThis endpoint is optimized for advanced filtering—clients can search or sort review data by product, rating, moderation status, creation date, reviewer, or associated order. Full pagination support allows efficient data loading for dashboards, listing pages, and analytics. \n\nSecurity: Customers can only access their own reviews. Sellers access reviews on their listed products. Admins may access all reviews system-wide for moderation and reporting purposes.\n\nThe response includes only summary details (not full review content or thread), suitable for listing views or analytics screens. Related APIs include review detail retrieval (GET /reviews/{reviewId}), creation, and update endpoints.","summary":"Retrieve a filtered, paginated list of product review summaries (shopping_mall_reviews).","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for retrieving product review summaries.","typeName":"IShoppingMallReview.IRequest"},"responseBody":{"description":"Paginated summary list of product reviews matching search criteria.","typeName":"IPageIShoppingMallReview.ISummary"},"authorizationRoles":["customer","seller","admin"],"name":"index","path":"/shoppingMall/admin/reviews","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/products","method":"post"},"description":"An admin must register a product before any reviews can exist or be displayed. Product creation is a prerequisite for the admin product review summary list."}]},{"specification":"This operation retrieves detailed information on a single product review. It is directly linked to the shopping_mall_reviews table, returning full metadata, rating, moderation status, reviewer details, and any associated responses or attachments. This endpoint is suitable for user review management, moderation, or analytics. Authorization is required to protect private or sensitive review content; owners, associated sellers, and admins (depending on data sensitivity) can use this endpoint.","description":"This endpoint is designed to fetch complete details for a single product review, based on its unique reviewId. The review is identified by its shopping_mall_reviews.id, which is a UUID.\n\nReturned details include all core fields of the review: product association, order reference, reviewer (customer or seller), rating, moderation status, timestamps, and any attached content or meta. Associated fields such as notifications, moderation notes, and linked thread references are also included in the response as available.\n\nAccess control ensures that customers may only view their own reviews, sellers may access reviews concerning their products, and administrators may view any review for moderation purposes. If the review does not exist, is deleted, or access is unauthorized, an appropriate error is returned.\n\nRelated endpoints include list/search, creation, and update APIs for product reviews.","summary":"Retrieve detailed information for a specific product review (shopping_mall_reviews).","parameters":[{"name":"reviewId","description":"Unique identifier for the target product review.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail view of the product review with all available fields and metadata.","typeName":"IShoppingMallReview"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/customer/reviews/{reviewId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"A product review must be created before its detailed information can be retrieved by reviewId, as the GET operation requires a valid review to exist in the system."}]},{"specification":"This operation retrieves detailed information on a single product review. It is directly linked to the shopping_mall_reviews table, returning full metadata, rating, moderation status, reviewer details, and any associated responses or attachments. This endpoint is suitable for user review management, moderation, or analytics. Authorization is required to protect private or sensitive review content; owners, associated sellers, and admins (depending on data sensitivity) can use this endpoint.","description":"This endpoint is designed to fetch complete details for a single product review, based on its unique reviewId. The review is identified by its shopping_mall_reviews.id, which is a UUID.\n\nReturned details include all core fields of the review: product association, order reference, reviewer (customer or seller), rating, moderation status, timestamps, and any attached content or meta. Associated fields such as notifications, moderation notes, and linked thread references are also included in the response as available.\n\nAccess control ensures that customers may only view their own reviews, sellers may access reviews concerning their products, and administrators may view any review for moderation purposes. If the review does not exist, is deleted, or access is unauthorized, an appropriate error is returned.\n\nRelated endpoints include list/search, creation, and update APIs for product reviews.","summary":"Retrieve detailed information for a specific product review (shopping_mall_reviews).","parameters":[{"name":"reviewId","description":"Unique identifier for the target product review.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail view of the product review with all available fields and metadata.","typeName":"IShoppingMallReview"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/seller/reviews/{reviewId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"A product review must exist before it can be retrieved by its ID. The creation operation ensures there is a reviewId to use for retrieval and further actions."}]},{"specification":"This operation retrieves detailed information on a single product review. It is directly linked to the shopping_mall_reviews table, returning full metadata, rating, moderation status, reviewer details, and any associated responses or attachments. This endpoint is suitable for user review management, moderation, or analytics. Authorization is required to protect private or sensitive review content; owners, associated sellers, and admins (depending on data sensitivity) can use this endpoint.","description":"This endpoint is designed to fetch complete details for a single product review, based on its unique reviewId. The review is identified by its shopping_mall_reviews.id, which is a UUID.\n\nReturned details include all core fields of the review: product association, order reference, reviewer (customer or seller), rating, moderation status, timestamps, and any attached content or meta. Associated fields such as notifications, moderation notes, and linked thread references are also included in the response as available.\n\nAccess control ensures that customers may only view their own reviews, sellers may access reviews concerning their products, and administrators may view any review for moderation purposes. If the review does not exist, is deleted, or access is unauthorized, an appropriate error is returned.\n\nRelated endpoints include list/search, creation, and update APIs for product reviews.","summary":"Retrieve detailed information for a specific product review (shopping_mall_reviews).","parameters":[{"name":"reviewId","description":"Unique identifier for the target product review.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail view of the product review with all available fields and metadata.","typeName":"IShoppingMallReview"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/admin/reviews/{reviewId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"A review record must be present to look up by reviewId. The review creation is necessary to generate a review that can be accessed by an admin."}]},{"specification":"This operation creates a new product review in the shopping mall backend. The review is associated with a specific product and order, tied to the submitting customer (and optionally seller), and captures rating, text, moderation state, and attachments. On success, a full review detail is returned. All necessary validation (verified purchase, single-review-per-purchase) is handled by business logic at this endpoint.","description":"This POST endpoint enables customers (and in limited cases, sellers or admins) to submit a new product review. The request body must include the product ID, order ID, reviewer (customer), rating, review text, and any relevant metadata or attachments.\n\nReviews are tied to a verified purchase—you must provide a valid order and product association, and only one review is permitted per product per order per customer, enforced by a unique constraint in the schema. Moderation status is set according to platform policy, possibly requiring administrative approval before publication.\n\nOn successful creation, the API returns the full product review object, including its database-generated ID, references, and all provided fields. The system also triggers downstream workflows, such as review notification, analytics update, and potential loyalty/mileage accrual. Errors are returned if required constraints (verified purchase, single-review policy, etc.) are violated.","summary":"Create a new product review for a purchased product (shopping_mall_reviews).","parameters":[],"requestBody":{"description":"All relevant fields required to create a new product review: product ID, order ID, customer ID, rating, text, etc.","typeName":"IShoppingMallReview.ICreate"},"responseBody":{"description":"The full product review entity as created, including IDs, references, and provided content.","typeName":"IShoppingMallReview"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/reviews","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/products","method":"post"},"description":"A product must be registered before a review for it can be created. Ensures that shopping_mall_product_id provided in review creation is valid."},{"endpoint":{"path":"/shoppingMall/admin/orders","method":"post"},"description":"An order must exist (i.e., a purchase must have occurred) before a review can be created. This allows the review to be tied to a verified purchased order via shopping_mall_order_id."}]},{"specification":"This operation updates an existing review entity in the shopping mall platform. It interacts with the shopping_mall_reviews table and allows modifications to a single review, such as updating its rating, title, body text, and moderation status. The operation requires reviewId as a path parameter and expects an update request body, enforcing business rules such as only allowing the author or authorized roles (admin for moderation) to update reviews. All updates are snapshotted according to audit requirements.","description":"This endpoint allows an authenticated customer (review author) or an admin to update the content and rating of an existing product review. The reviewId path parameter identifies which review to update. The review's body, title, rating, and moderation_status can be changed within permitted business rules. All modifications are snapshotted for compliance and evidence, supporting rollback, dispute, and complete audit requirements under platform policy.\n\nSecurity is enforced so only the review's creator (customer) or an admin may perform updates, with stricter controls for sensitive moderation status fields. Update requests that attempt to modify immutable fields, violate review uniqueness, or lack appropriate permissions will result in an error with a clear business error message. The endpoint supports full internationalization and follows access control policies as defined in system requirements.\n\nRelated operations include review creation (POST /reviews), review retrieval (GET /reviews/{reviewId}), and review moderation (PUT with admin role). Edge cases include handling of reviews under moderation hold, denied updates post soft-deletion, and audit snapshot triggers for every event.","summary":"Update an existing product review in the shopping mall (shopping_mall_reviews table).","parameters":[{"name":"reviewId","description":"Unique identifier of the review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Review update payload: rating, title, body, moderation_status, etc.","typeName":"IShoppingMallReview.IUpdate"},"responseBody":{"description":"The updated review entity with all current fields and relationships","typeName":"IShoppingMallReview"},"authorizationRoles":["customer","admin"],"name":"update","path":"/shoppingMall/customer/reviews/{reviewId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"A review must be created before it can be updated by reviewId. Creation is required to ensure a reviewId exists to update."}]},{"specification":"This operation updates an existing review entity in the shopping mall platform. It interacts with the shopping_mall_reviews table and allows modifications to a single review, such as updating its rating, title, body text, and moderation status. The operation requires reviewId as a path parameter and expects an update request body, enforcing business rules such as only allowing the author or authorized roles (admin for moderation) to update reviews. All updates are snapshotted according to audit requirements.","description":"This endpoint allows an authenticated customer (review author) or an admin to update the content and rating of an existing product review. The reviewId path parameter identifies which review to update. The review's body, title, rating, and moderation_status can be changed within permitted business rules. All modifications are snapshotted for compliance and evidence, supporting rollback, dispute, and complete audit requirements under platform policy.\n\nSecurity is enforced so only the review's creator (customer) or an admin may perform updates, with stricter controls for sensitive moderation status fields. Update requests that attempt to modify immutable fields, violate review uniqueness, or lack appropriate permissions will result in an error with a clear business error message. The endpoint supports full internationalization and follows access control policies as defined in system requirements.\n\nRelated operations include review creation (POST /reviews), review retrieval (GET /reviews/{reviewId}), and review moderation (PUT with admin role). Edge cases include handling of reviews under moderation hold, denied updates post soft-deletion, and audit snapshot triggers for every event.","summary":"Update an existing product review in the shopping mall (shopping_mall_reviews table).","parameters":[{"name":"reviewId","description":"Unique identifier of the review to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Review update payload: rating, title, body, moderation_status, etc.","typeName":"IShoppingMallReview.IUpdate"},"responseBody":{"description":"The updated review entity with all current fields and relationships","typeName":"IShoppingMallReview"},"authorizationRoles":["customer","admin"],"name":"update","path":"/shoppingMall/admin/reviews/{reviewId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"A product review must exist before it can be updated. Create the product review via POST /shoppingMall/customer/reviews so that reviewId will be available for the update operation."}]},{"specification":"This operation performs a logical deletion (soft delete) of a review entity from the shopping_mall_reviews table by setting the deleted_at timestamp. It is intended for cases where a user wishes to retract a review or where an admin must remove inappropriate content. Only the author or an admin may delete a review. Logical deletion ensures the review is not visible to the public but is preserved for audit, evidence, and compliance purposes. Deletion actions are snapshotted and a deletion event is recorded.","description":"This endpoint allows the author of the review (customer) or an admin to logically delete (soft delete) a product review by setting its deleted_at field. The reviewId path parameter uniquely identifies the review to be deleted. The system enforces strict permission so that only the review's creator or administrators can perform this action. Soft deletion hides the review from user-facing APIs and search while preserving it in the database for compliance, rollback, and dispute evidence. Logical deletions trigger a snapshot and deletion event for regulatory traceability and audit.\n\nAttempting to delete a review that is already deleted, does not exist, or where the user lacks permission results in a business logic error. Reviews under legal or dispute hold may be exempt and return a specific error. Related endpoints include review creation, update, retrieval, and the review snapshot history API.","summary":"Soft delete (logical removal) of a review from the shopping mall (shopping_mall_reviews table).","parameters":[{"name":"reviewId","description":"Unique identifier of the review to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","path":"/shoppingMall/customer/reviews/{reviewId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"A product review must be created before it can be deleted. Ensure the review exists by creating it via POST /shoppingMall/customer/reviews before attempting deletion."}]},{"specification":"This operation performs a logical deletion (soft delete) of a review entity from the shopping_mall_reviews table by setting the deleted_at timestamp. It is intended for cases where a user wishes to retract a review or where an admin must remove inappropriate content. Only the author or an admin may delete a review. Logical deletion ensures the review is not visible to the public but is preserved for audit, evidence, and compliance purposes. Deletion actions are snapshotted and a deletion event is recorded.","description":"This endpoint allows the author of the review (customer) or an admin to logically delete (soft delete) a product review by setting its deleted_at field. The reviewId path parameter uniquely identifies the review to be deleted. The system enforces strict permission so that only the review's creator or administrators can perform this action. Soft deletion hides the review from user-facing APIs and search while preserving it in the database for compliance, rollback, and dispute evidence. Logical deletions trigger a snapshot and deletion event for regulatory traceability and audit.\n\nAttempting to delete a review that is already deleted, does not exist, or where the user lacks permission results in a business logic error. Reviews under legal or dispute hold may be exempt and return a specific error. Related endpoints include review creation, update, retrieval, and the review snapshot history API.","summary":"Soft delete (logical removal) of a review from the shopping mall (shopping_mall_reviews table).","parameters":[{"name":"reviewId","description":"Unique identifier of the review to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","path":"/shoppingMall/admin/reviews/{reviewId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/reviews","method":"post"},"description":"A product review must be created before it can be deleted. Ensure the review exists by creating it via POST /shoppingMall/customer/reviews before attempting deletion."}]},{"specification":"Retrieves a filtered, paginated list of a customer's favorited products with advanced search, sorting, and batch operations. This operation works on the shopping_mall_favorite_products and shopping_mall_favorite_snapshots tables, supports filtering by notification status, batch label, date, etc., and is designed for the customer to view and organize their product favorites efficiently. Pagination and sorting are supported, and the operation is fully auditable and localized.","description":"This endpoint enables an authenticated customer to retrieve a paginated, searchable, and sortable list of all products they have favorited. Results may be filtered by organizational batch_label, notification_enabled status, or creation/update timestamps. Each record includes the linked product entity and the snapshot preserved at the moment of favoriting for audit and evidence. This supports personalized list management, notification setting review, and batch organizing actions.\n\nSecurity requires customer authentication; only the requesting user's favorites are accessible unless an admin queries for support/audit purposes. The endpoint supports pagination controls (page, limit), sorting (by created date, name, favorite status), and advanced search for favorites featuring localized or full product text. Error handling includes permission denials for non-authenticated access and validation for out-of-range pagination. This operation is fully auditable, supporting rollback and compliance requests, and integrates with notification preferences for downstream alerting.\n\nPaired operations include creating and deleting a favorite (POST/DELETE /favoriteProducts/{favoriteProductId}), batch updates, and exporting favorites for personalization or evidence export.","summary":"Search, filter, and paginate a customer's favorited products (shopping_mall_favorite_products table).","parameters":[],"requestBody":{"description":"Search and pagination filters for favorite products batch operations and organization.","typeName":"IShoppingMallFavoriteProduct.IRequest"},"responseBody":{"description":"Paginated, filtered list of favorited products and their preserved snapshots","typeName":"IPageIShoppingMallFavoriteProduct"},"authorizationRoles":["customer"],"name":"index","path":"/shoppingMall/customer/favoriteProducts","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[]},{"specification":"Retrieve full details for a single favorited product by its favoriteProductId. This operation fetches the shopping_mall_favorite_products entity, validating ownership or admin access, and includes the related snapshot and product entity. Used for personalization (viewing, organizing, notification management) and audit/compliance. Sensitive fields and access are filtered by role.","description":"This endpoint retrieves detailed information about a single product favorited by a user, identified by favoriteProductId. The result includes the full favorite record, all meta fields (such as notification_enabled and batch_label), links to the preserved product snapshot, and the original product entity, if present. Security is enforced so that only the favoriting user may access their own favorite records; admin access is granted for support or compliance audit. The result supports review for personalization, notification settings, batch labels, and export or evidence operations.\n\nAttempts to retrieve a favorite that does not exist, is deleted, or is not owned by the user will return an error according to platform business rules. The operation also integrates with downstream personalization, notification, and snapshot export logic, and is part of the broader user-facing favorites management suite.","summary":"Retrieve a detailed favorited product by ID (shopping_mall_favorite_products table).","parameters":[{"name":"favoriteProductId","description":"Unique identifier of the favorited product entry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed favorite product record, related snapshot, and product entity","typeName":"IShoppingMallFavoriteProduct"},"authorizationRoles":["customer","admin"],"name":"at","path":"/shoppingMall/customer/favoriteProducts/{favoriteProductId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteProducts","method":"post"},"description":"A favorite product record must be created before it can be retrieved by its favoriteProductId."}]},{"specification":"Retrieve full details for a single favorited product by its favoriteProductId. This operation fetches the shopping_mall_favorite_products entity, validating ownership or admin access, and includes the related snapshot and product entity. Used for personalization (viewing, organizing, notification management) and audit/compliance. Sensitive fields and access are filtered by role.","description":"This endpoint retrieves detailed information about a single product favorited by a user, identified by favoriteProductId. The result includes the full favorite record, all meta fields (such as notification_enabled and batch_label), links to the preserved product snapshot, and the original product entity, if present. Security is enforced so that only the favoriting user may access their own favorite records; admin access is granted for support or compliance audit. The result supports review for personalization, notification settings, batch labels, and export or evidence operations.\n\nAttempts to retrieve a favorite that does not exist, is deleted, or is not owned by the user will return an error according to platform business rules. The operation also integrates with downstream personalization, notification, and snapshot export logic, and is part of the broader user-facing favorites management suite.","summary":"Retrieve a detailed favorited product by ID (shopping_mall_favorite_products table).","parameters":[{"name":"favoriteProductId","description":"Unique identifier of the favorited product entry to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed favorite product record, related snapshot, and product entity","typeName":"IShoppingMallFavoriteProduct"},"authorizationRoles":["customer","admin"],"name":"at","path":"/shoppingMall/admin/favoriteProducts/{favoriteProductId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteProducts","method":"post"},"description":"A favorite product record must be created before it can be retrieved by its favoriteProductId (even for admin access)."}]},{"specification":"This operation allows an authenticated customer to create a new favorite product record. It operates on the shopping_mall_favorite_products table. The customer provides the necessary identifiers for the product (and any snapshot metadata), establishing a persistent, auditable record of the favorited product. The operation enforces uniqueness (a product cannot be favorited twice by the same user) and attaches a snapshot reference as required for compliance and personalization workflows. The API also supports enabling notifications for future changes to the product or favorite status.","description":"Customers use this endpoint to mark a product as a favorite. Favoriting a product not only records the customer-product association but also snaps a historical record of the product's business state at the time of favoriting, supporting downstream AI-driven personalization and audit requirements.\n\nPermission checks ensure only authenticated customers can perform this action on their own behalf. Attempting to favorite a product that is already favorited returns a constrained error; attempts to favorite non-existent or deleted products also fail with explicit validation errors. The business logic validates the presence of the product and available snapshot. Creation triggers personalized notification enablers if requested by the user. All records preserve compliance with evidence retention rules and are never physically deleted.\n\nAny operation error (constraint violations, missing fields, unauthorized) returns well-formed error codes and reason messages in the response.\n\nThis API is tightly linked to shopping_mall_favorite_products (the main favorite record), shopping_mall_products (target entity), and shopping_mall_customers (acting user identity) in the schema. The request and response DTOs are versioned with the service prefix for future extensibility.","summary":"Create a new favorite product entry for the authenticated customer (shopping_mall_favorite_products).","parameters":[],"requestBody":{"description":"Details for the favorite product, including product and snapshot identifiers, notification preference, and batch organization label.","typeName":"IShoppingMallFavoriteProduct.ICreate"},"responseBody":{"description":"Created favorite product record with full audit snapshot, notification state, and customer/product IDs.","typeName":"IShoppingMallFavoriteProduct"},"authorizationRoles":["customer"],"name":"create","path":"/shoppingMall/customer/favoriteProducts","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates a favorite product entry for the authenticated customer. It targets a specific favorite product record by its unique identifier in shopping_mall_favorite_products. The API permits updating properties such as notification preference or a batch label for organizing favorites. The target favorite must belong to the requesting user, and permission checks are enforced. All changes are auditable and tracked with timestamps.","description":"Authenticated customers may use this endpoint to update details of an existing favorite product instance, such as enabling/disabling notifications or adjusting the batch/organizational label assigned to the favorite. The operation enforces ownership verification—the specified favorite must exist and belong to the requesting user.\n\nUpdates are limited to mutable fields like label/tags or notification triggers; the association between the user and the product remains fixed. All successful updates are timestamped for audit, with changes reflected in future personalization and notification workflows. Attempting to update a favorite not owned by the user, or one that does not exist or has been deleted, leads to error responses with explicit reason codes.\n\nLinked schema entities for this operation are shopping_mall_favorite_products, shopping_mall_customers, and shopping_mall_products (via snapshot/favorite association). Security and compliance constraints are strictly enforced.","summary":"Update properties (such as notification preference or label) of a favorite product for the current customer (shopping_mall_favorite_products).","parameters":[{"name":"favoriteProductId","description":"Unique identifier of the favorite product record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the favorite product, such as notification status or batch label.","typeName":"IShoppingMallFavoriteProduct.IUpdate"},"responseBody":{"description":"The updated favorite product record with new properties and audit meta.","typeName":"IShoppingMallFavoriteProduct"},"authorizationRoles":["customer"],"name":"update","path":"/shoppingMall/customer/favoriteProducts/{favoriteProductId}","method":"put","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteProducts","method":"post"},"description":"A favorite product must exist before it can have its properties (like notification preference or label) updated by favoriteProductId."}]},{"specification":"This operation deletes (logically/soft delete) a favorite product entry for an authenticated customer. Using the unique favorite product identifier, it marks the favorite as deleted for audit/compliance, but does not remove the record from the database physically, supporting regulatory and personalization workflows. The operation checks user ownership, existence, and handles all error cases gracefully.","description":"Customers may use this endpoint to remove a product from their favorites. The API enforces that customers can only delete their own favorite records, not those of others. The deletion is soft—setting a deleted_at timestamp and preserving the record for evidence retention, personalization audit, and possible future recovery scenarios.\n\nAttempts to remove a favorite that does not exist, is already deleted, or does not belong to the authenticated user will result in validation or permission errors with explicit reason codes. All operations generate audit records, ensuring compliance with legal and business requirements. There is no response body; success is confirmed by standard HTTP status codes.\n\nLinked schema entities include shopping_mall_favorite_products (main favorite record), shopping_mall_customers (user context), and audit/snapshot tables for evidence chain.","summary":"Soft delete (mark as removed) a favorite product belonging to the current customer (shopping_mall_favorite_products).","parameters":[{"name":"favoriteProductId","description":"Unique identifier of the favorite product record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer"],"name":"erase","path":"/shoppingMall/customer/favoriteProducts/{favoriteProductId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteProducts","method":"post"},"description":"Favorite product must exist before it can be deleted. The POST operation creates the favorite product entry that is later deleted by this operation."}]},{"specification":"This operation retrieves a paginated, filtered, and sortable list of favorite addresses for the authenticated customer. The underlying table is shopping_mall_favorite_addresses. The endpoint supports batch/bulk operations, filtering by batch label, creation date, or notification state, and supports integration with personalized notification triggers. The client supplies search criteria and paging parameters; results are returned in pages for UI efficiency.","description":"Authenticated users may query their favorited addresses using this endpoint, supporting advanced filtering (such as by label/tag/notification state), pagination, and batch-friendly operations for organizing large favorite lists. Each address record is linked to its evidence snapshot at the time of favoriting, fulfilling both personalization input and audit/evidence requirements.\n\nThe underlying query only returns addresses owned by the authenticated customer; attempting to query the favorites of others is strictly prohibited by permission checks. Full pagination is implemented with configurable page size and sort order. Errors are returned for invalid search parameters or when the user is not authenticated.\n\nThis operation is based on shopping_mall_favorite_addresses (lookup by customer), and joins with shopping_mall_favorite_snapshots for historical business data. All responses support localization and audit policies, and returned records reflect exact field definitions in the DB schema.","summary":"Retrieve a filtered and paginated list of favorite addresses for the current customer (shopping_mall_favorite_addresses).","parameters":[],"requestBody":{"description":"Search, filtering, and pagination criteria for retrieving favorite addresses.","typeName":"IShoppingMallFavoriteAddress.IRequest"},"responseBody":{"description":"Paginated list of favorite address records matching the search criteria, including audit snapshots.","typeName":"IPageIShoppingMallFavoriteAddress"},"authorizationRoles":["customer"],"name":"index","path":"/shoppingMall/customer/favoriteAddresses","method":"patch","authorizationRole":"customer","authorizationType":null,"prerequisites":[]},{"specification":"Retrieves a detailed view of a single favorited address entry for the requesting authenticated customer. This operation targets the shopping_mall_favorite_addresses table, providing evidence-grade information about the favorited address, associated snapshot, user-specific notification preferences, and organization metadata. Reference integrity is enforced via a UUID for identification, allowing users to audit, manage, and review individual favorites and attached address state at time of favoriting.","path":"/shoppingMall/customer/favoriteAddresses/{favoriteAddressId}","method":"get","summary":"Retrieve a specific favorited address for the authenticated user, including resolved address snapshot and notification metadata (shopping_mall_favorite_addresses).","description":"This operation fetches all available detail about a single entry from the shopping_mall_favorite_addresses table, matching the provided favoriteAddressId. The client must be authenticated as a customer and may only access their own favorited entries (permissions enforced). All address favorite fields—including batch_label, notification_enabled, and links to the immutable snapshot (at time of favorite creation)—are included in the response. The snapshot entity preserves a historical record allowing audit, rollback, or dispute evidence.\n\nSecurity checks ensure only the owning customer can retrieve the favorited address, rejecting attempts to access non-owned or deleted entries. If the favorite is logically deleted (deleted_at not null), the operation returns a not-found error. If permission violation is detected, a 403 Forbidden response is returned.\n\nError handling covers invalid/missing UUID, non-existent resources, or permission failures, returning standardized error codes and clarifying context for the user. Related operations include the ability to list all favorites, create new favorites, update labels/notification, or logically remove favorite addresses; all actions are tracked for compliance and personalization workflows.","parameters":[{"name":"favoriteAddressId","description":"Unique identifier for the favorite address to retrieve (UUID from shopping_mall_favorite_addresses.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specific favorited address, including attached snapshot, notification status, and organization labels.","typeName":"IShoppingMallFavoriteAddress"},"authorizationType":null,"authorizationRole":"customer","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteAddresses","method":"post"},"description":"Favorite address must exist before it can be retrieved by ID. The POST operation creates the address favorite entry that can later be accessed by its unique ID."}]},{"specification":"Creates a new favorited address entry for the authenticated customer, capturing a snapshot of the address at time of favoriting and setting notification/batch metadata. This operation inserts into shopping_mall_favorite_addresses and snapshot tables, enforcing uniqueness and auditability.","path":"/shoppingMall/customer/favoriteAddresses","method":"post","summary":"Create a new favorited address for the authenticated customer (shopping_mall_favorite_addresses).","description":"This operation allows an authenticated customer to mark one of their addresses as a favorite, creating a record in shopping_mall_favorite_addresses. The request requires the address ID (UUID), optional organization/batch label, and notification preference. Upon creation, a snapshot of the favorited address entity is captured and referenced, ensuring complete evidence for audit, personalization, and notification workflows.\n\nBusiness logic enforces customer authentication, ownership validation (only the customer's own addresses are eligible), and checks for duplicates—rejecting attempts to favorite the same address more than once. If the address is not found or permission is violated, an appropriate error code is returned. All operation steps are logged for compliance. Success returns the created favorite address including metadata and the attached snapshot reference.","parameters":[],"requestBody":{"description":"Data to create a new favorite address: address UUID, organization label (optional), and notification preference.","typeName":"IShoppingMallFavoriteAddress.ICreate"},"responseBody":{"description":"The newly created favorite address entity, with associated snapshot and user-configured metadata.","typeName":"IShoppingMallFavoriteAddress"},"authorizationType":null,"authorizationRole":"customer","name":"create","prerequisites":[]},{"specification":"Updates metadata for a favorited address—including notification_enabled and batch_label—for the authenticated customer. This targets shopping_mall_favorite_addresses, supporting corrections, organization, or personalized notification preference changes without removing the favorite itself. Only the owner may update their favorite; operations are fully auditable.","path":"/shoppingMall/customer/favoriteAddresses/{favoriteAddressId}","method":"put","summary":"Update notification or batch metadata for a specific favorited address (shopping_mall_favorite_addresses).","description":"This operation allows an authenticated customer to modify details of their favorited address entry. Supported updates include toggling notification_enabled (for entity change alerts) and editing batch_label (for organizational purposes). The core favorite reference and snapshot state are immutable, preserving audit integrity. Only the user who created the favorite can perform this update; attempts to modify another user's favorite address are denied with a 403 error.\n\nValidation enforces that the favoriteAddressId belongs to the authenticated user and is not logically deleted. Changes are persisted, and the response includes the full, now-updated favorite address entity (including snapshot reference). Audit logs are created for evidence traceability, with all modification attempts captured (successful or denied).","parameters":[{"name":"favoriteAddressId","description":"Unique identifier of the favorited address to update (UUID from shopping_mall_favorite_addresses.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload including updatable fields for a favorited address: notification_enabled and batch_label.","typeName":"IShoppingMallFavoriteAddress.IUpdate"},"responseBody":{"description":"The updated favorite address entity, confirming new notification/batch settings and snapshot reference.","typeName":"IShoppingMallFavoriteAddress"},"authorizationType":null,"authorizationRole":"customer","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteAddresses","method":"post"},"description":"Favorite address must exist before it can be updated. Creating a favorite address is required to obtain a valid favoriteAddressId for the update operation."}]},{"specification":"Removes a favored address from the customer's personal favorites list by performing a logical (soft) delete in shopping_mall_favorite_addresses. The entry is retained for audit/evidence but excluded from queries and notifications, preserving the snapshot chain for compliance. Only the owner can remove their favorite.","path":"/shoppingMall/customer/favoriteAddresses/{favoriteAddressId}","method":"delete","summary":"Remove (soft delete) a favorited address for the authenticated customer (shopping_mall_favorite_addresses).","description":"This operation marks a favorited address for the currently authenticated customer as deleted, performing a soft delete by setting the deleted_at field in shopping_mall_favorite_addresses. After this operation, the favorite is no longer shown in get/list operations or included in notifications, but the full audit/snapshot history is preserved for compliance, export, and dispute resolution. Attempts to remove a favorite belonging to another user or an already-removed entry result in an error.\n\nSecurity controls strictly enforce ownership; unauthorized delete requests receive a 403 Forbidden response. Deleted favorites remain present for legal retention but are hidden from user-facing APIs. All soft-delete actions are tracked in the audit log. This endpoint supports user-driven address list organization and privacy management in compliance with regulations.","parameters":[{"name":"favoriteAddressId","description":"Unique identifier of the favorite address to remove (UUID from shopping_mall_favorite_addresses.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"customer","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteAddresses","method":"post"},"description":"Favorite address must exist before it can be deleted. Creating a favorite address is required to obtain a valid favoriteAddressId for the delete operation."}]},{"specification":"Retrieves a filtered, paginated list of favorite product inquiries (Q&A) for the current authenticated user. Based on the shopping_mall_favorite_inquiries table in the Prisma schema, this endpoint allows searching, sorting, and batch operations for favorite inquiries. Includes support for filtering by product, inquiry, notification status, or custom labels. Response includes immutable inquiry and product snapshot data for audit and compliance purposes, supporting evidence-grade history per business rules.","path":"/shoppingMall/customer/favoriteInquiries","method":"patch","summary":"Search and retrieve a paginated list of favorite product inquiries for the user.","description":"This operation enables a user to search and retrieve a list of their favorited product inquiries within the shopping mall platform. The request supports advanced search filters, including inquiry/product reference, notification preference, tagging/label, and date ranges, allowing flexible organization of favorites for personalization and notification management.\n\nIt references the shopping_mall_favorite_inquiries entity, which links the user (customer) to inquiry and immutable snapshot (shopping_mall_favorite_snapshots), ensuring all evidence is preserved for compliance and audit. The response structure includes essential details for display, batch management (e.g., organize/remove), and notification triggers.\n\nSecurity is enforced so only the authenticated user can access their own favorite inquiries. Admins performing audit queries must use separate admin endpoints according to business policy. The endpoint supports pagination, configurable page size, and sorting by created date or custom batch label, ensuring optimal UX and efficient querying for large favorite lists.","parameters":[],"requestBody":{"description":"Search filters, pagination, sorting, and batch labeling parameters for favorite inquiry listing.","typeName":"IShoppingMallFavoriteInquiry.IRequest"},"responseBody":{"description":"Paginated result set of favorite inquiries, including inquiry/product, snapshot, and notification settings.","typeName":"IPageIShoppingMallFavoriteInquiry"},"authorizationRoles":["customer"],"name":"index","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteInquiries","method":"post"},"description":"Favorite inquiry must exist before it can be searched, filtered, or listed for the user. Creating a favorite inquiry is needed to ensure favorite inquiries are available for retrieval and listing."}]},{"specification":"Retrieves the details of a single favorite product inquiry for the authenticated user by its unique favorite inquiry ID. This operates on the shopping_mall_favorite_inquiries table, returning the referenced inquiry and its immutable snapshot, as well as notification settings and organizational labels. Ensures users can view full details and evidence relevant to their favorited product inquiries.","path":"/shoppingMall/customer/favoriteInquiries/{favoriteInquiryId}","method":"get","summary":"Retrieve the details of a specific favorite product inquiry by ID for the user.","description":"This operation fetches detailed information for a single favorite inquiry record, identified by favoriteInquiryId, scoped to the current authenticated customer. It provides the associated inquiry, the snapshot captured during favoriting, product references, notification status, and any custom labels/tags added by the user.\n\nThe endpoint strictly enforces user-level access: users can only view their own favorite inquiries. Attempting to access another user's favorite inquiry will result in a security error. Error handling includes not found (404) for invalid IDs or deleted/nonexistent favorites, and forbidden (403) for cross-user access Attempts.\n\nData returned is derived from shopping_mall_favorite_inquiries and its linked inquiry and product snapshot in shopping_mall_favorite_snapshots, preserving compliance and personalization logic.","parameters":[{"name":"favoriteInquiryId","description":"Unique identifier of the favorite inquiry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the user's favorite inquiry, including inquiry, snapshot, and notification settings.","typeName":"IShoppingMallFavoriteInquiry"},"authorizationRoles":["customer"],"name":"at","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteInquiries","method":"post"},"description":"Favorite inquiry must exist before its details can be retrieved. Creating a favorite inquiry is required to obtain a valid favoriteInquiryId for the get operation."}]},{"specification":"Creates a new favorite inquiry record for the current authenticated user. This is a user-initiated operation to mark an inquiry (from shopping_mall_product_inquiries) as a favorite, storing a compliance-grade snapshot at the moment of favoriting and configuring notification triggers/tags as needed. The operation writes to shopping_mall_favorite_inquiries, enforcing uniqueness per inquiry/customer and full audit trail requirements.","path":"/shoppingMall/customer/favoriteInquiries","method":"post","summary":"Mark a product inquiry as a favorite for the user and store its snapshot.","description":"This operation allows users to favorite a specific product inquiry, linking it to their favorites list with a preserved, immutable snapshot for audit and evidence purposes. The user provides the inquiry to favorite, notification preference, and any optional organizational label. The system verifies entity validity, ownership/visibility rules (e.g., cannot favorite another user's private inquiry), and prevents duplicate favorites for the same inquiry by the same user.\n\nUpon successful creation, a shopping_mall_favorite_inquiries record is written, referencing the immutable snapshot in shopping_mall_favorite_snapshots. Notification settings and user-supplied labels/tags are included. Re-favoriting after delete triggers a new snapshot and favorite record.\n\nBusiness rules include respecting soft deletion (inquiries/favorites), audit trail enforcement, and strict permission checks: only the owner of the favorite can create or manage these records. Admins may perform override operations for audit via separate admin API if needed.","parameters":[],"requestBody":{"description":"Data required to mark a product inquiry as a favorite (inquiry reference, notification settings, optional label).","typeName":"IShoppingMallFavoriteInquiry.ICreate"},"responseBody":{"description":"Created favorite inquiry record, including linked inquiry, snapshot, and settings.","typeName":"IShoppingMallFavoriteInquiry"},"authorizationRoles":["customer"],"name":"create","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/products/{productId}/inquiries","method":"post"},"description":"Product inquiry must exist before it can be favorited by a user. The favorite record references a valid product inquiry by its ID, which must be present in the system before a favorite can be created."}]},{"specification":"Updates metadata for a user's favorite inquiry record, such as notification preferences or batch organization label. This operation modifies an existing favorite in shopping_mall_favorite_inquiries, identified by favoriteInquiryId, scoped to the authenticated user, and preserves audit trail requirements. Supports user-driven update of notification triggers and label/tag fields. Ensures users can manage personalized favorite inquiry settings efficiently.","path":"/shoppingMall/customer/favoriteInquiries/{favoriteInquiryId}","method":"put","summary":"Update notification or label settings for a specific favorite inquiry by ID.","description":"This operation enables users to modify notification preferences and batch-organizational information (e.g., label/tag) for one of their favorite inquiries. Access is granted only if the favoriteInquiryId belongs to the current authenticated user; cross-user modification is strictly forbidden and enforced with 403 errors.\n\nThe endpoint touches only metadata (notification_enabled, batch_label), never altering the linked snapshot or underlying inquiry. Error handling includes validation on favoriteInquiryId (must exist and not be deleted), and only allows update if the favorite is active and owned by the requesting user. All changes are logged for audit and compliance.\n\nData modified is persisted in shopping_mall_favorite_inquiries, following business logic and compliance requirements. System generates appropriate audit trail for every change per evidence-grade requirements.","parameters":[{"name":"favoriteInquiryId","description":"Unique identifier for the favorite inquiry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the favorite inquiry (notification or label/organization info).","typeName":"IShoppingMallFavoriteInquiry.IUpdate"},"responseBody":{"description":"Updated favorite inquiry record with revised metadata and settings.","typeName":"IShoppingMallFavoriteInquiry"},"authorizationRoles":["customer"],"name":"update","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteInquiries","method":"post"},"description":"A favorite inquiry record must be created before it can be updated by its ID. The update operation requires an existing favorite inquiry in the system."}]},{"specification":"This operation deletes a favorited inquiry record for a customer. It performs a logical (soft) delete on the shopping_mall_favorite_inquiries table by setting the deleted_at timestamp for the specified favoriteInquiryId. This ensures auditability and compliance, preserving the snapshot reference for evidence, and disables any notifications associated with the favorited inquiry. The endpoint can only be called by the user who originally favorited the inquiry or by an administrator for compliance and support cases. The operation never physically removes records, maintaining traceability for compliance and future audit requests.","description":"This endpoint enables a customer to unfavorite a previously favorited product inquiry. Instead of physically deleting the favorite record, it performs a soft deletion by setting the deleted_at timestamp, preserving the full snapshot history of the associated inquiry for audit, compliance, and potential future dispute resolution.\n\nRole-based security is enforced: customers can remove their own favorite inquiries, while platform administrators can remove any for regulatory or support purposes. The endpoint does not require a request body.\n\nBusiness logic will ensure that upon unfavoriting, any active notifications linked to this favorite are unsubscribed. The deletion is audit-logged, and the action can be viewed in the user's favorite inquiry management interface.\n\nError handling includes: 404 for nonexistent or already deleted favoriteInquiryId, 403 if requesting actor lacks proper ownership/access, and audit trail creation for successful and failed attempts.\n","summary":"Soft delete a favorited inquiry by ID in shopping_mall_favorite_inquiries (Favorites module).","parameters":[{"name":"favoriteInquiryId","description":"ID of the favorited inquiry to be removed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","path":"/shoppingMall/customer/favoriteInquiries/{favoriteInquiryId}","method":"delete","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteInquiries","method":"post"},"description":"A favorite inquiry record must exist before it can be logically deleted by its ID. The deletion operation only applies to an existing favorite record."}]},{"specification":"This operation deletes a favorited inquiry record for a customer. It performs a logical (soft) delete on the shopping_mall_favorite_inquiries table by setting the deleted_at timestamp for the specified favoriteInquiryId. This ensures auditability and compliance, preserving the snapshot reference for evidence, and disables any notifications associated with the favorited inquiry. The endpoint can only be called by the user who originally favorited the inquiry or by an administrator for compliance and support cases. The operation never physically removes records, maintaining traceability for compliance and future audit requests.","description":"This endpoint enables a customer to unfavorite a previously favorited product inquiry. Instead of physically deleting the favorite record, it performs a soft deletion by setting the deleted_at timestamp, preserving the full snapshot history of the associated inquiry for audit, compliance, and potential future dispute resolution.\n\nRole-based security is enforced: customers can remove their own favorite inquiries, while platform administrators can remove any for regulatory or support purposes. The endpoint does not require a request body.\n\nBusiness logic will ensure that upon unfavoriting, any active notifications linked to this favorite are unsubscribed. The deletion is audit-logged, and the action can be viewed in the user's favorite inquiry management interface.\n\nError handling includes: 404 for nonexistent or already deleted favoriteInquiryId, 403 if requesting actor lacks proper ownership/access, and audit trail creation for successful and failed attempts.\n","summary":"Soft delete a favorited inquiry by ID in shopping_mall_favorite_inquiries (Favorites module).","parameters":[{"name":"favoriteInquiryId","description":"ID of the favorited inquiry to be removed","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["customer","admin"],"name":"erase","path":"/shoppingMall/admin/favoriteInquiries/{favoriteInquiryId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/favoriteInquiries","method":"post"},"description":"A favorite inquiry record must exist before an admin can perform a logical delete by its ID. The admin deletion can only be applied to an active favorite record."}]},{"specification":"This operation retrieves a filtered, paginated list of all file attachments in the shopping mall platform. It operates over the shopping_mall_attachments table, supporting advanced search, filtering by file type, business module, access scope, uploader, creation date, and deletion status. The endpoint is crucial for administrators and file managers to audit, review, and manage attachments across all business domains, ensuring compliance and security, and supports analytics workflows. Pagination, sorting, and multi-criteria search are included.","description":"Fetches a paginated list of file attachments, allowing advanced filtering, search, and sorting across the entire attachment store. Attachment records include key metadata fields such as filename, extension, mime type, upload context, business logical source, permission scope, and time metadata.\n\nAdmins and authorized file managers use this operation to audit and oversee file usage, storage, and distribution platform-wide. The operation supports filtering by filename, mime type, extension, user role, logical source, created_at window, and deletion status. Pagination parameters (page, size) and sorting (by created_at, name, size) are standard, complying with audit and compliance requirements for file management and evidence collection.\n\nSecurity and privacy considerations ensure only authorized roles can view or manage restricted/private files. Business logic enforces resource quota and access visibility rules. Error handling covers search syntax, permission failures (403), and system-level limits (429, 500). Results are paginated and ordered as requested.\n","summary":"Search and paginate shopping mall file attachments (attachment list).","parameters":[],"requestBody":{"description":"Attachment file search, filtering, and pagination instructions.","typeName":"IShoppingMallAttachment.IRequest"},"responseBody":{"description":"Paginated list of attachment file records with full metadata and access scope.","typeName":"IPageIShoppingMallAttachment"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/attachments","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves detailed metadata and content reference for a specific file attachment using its unique attachmentId. It queries the shopping_mall_attachments table and joins any related attachment_versions for file versioning and CDN URL resolution. This endpoint can be used by file download handlers, audit managers, or business modules needing secure access to file information and download links for presentation or further processing. Visibility and permission checks are strictly enforced at the attachment level.","description":"Fetches the current, latest metadata for a specific file attachment identified by attachmentId. Metadata includes filename, extension, MIME type, size, current CDN/server URL, permission scope, version management links, hash for integrity, logical business source, description, and time/ownership fields. The response can include a list or link to file versions if versioning is enabled on the file.\n\nCallers use this to display, audit, or access downloadable resources within the platform securely. Download permissions are enforced using the permission_scope on the attachment, ensuring only qualified users, admins, or entity owners can retrieve file links. Errors include 404 for invalid or deleted files, 403 for unauthorized attempts, and audit trails for all retrievals. Business logic may log access by actor ID and context for compliance.","summary":"Retrieve metadata and file info for a specific attachment by attachmentId (shopping_mall_attachments).","parameters":[{"name":"attachmentId","description":"ID of the file attachment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment metadata, version info, server/CDN download URL, and all audit fields.","typeName":"IShoppingMallAttachment"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/customer/attachments/{attachmentId}","method":"get","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/attachments","method":"post"},"description":"Attachment must be created before its metadata can be retrieved by attachmentId"}]},{"specification":"This operation retrieves detailed metadata and content reference for a specific file attachment using its unique attachmentId. It queries the shopping_mall_attachments table and joins any related attachment_versions for file versioning and CDN URL resolution. This endpoint can be used by file download handlers, audit managers, or business modules needing secure access to file information and download links for presentation or further processing. Visibility and permission checks are strictly enforced at the attachment level.","description":"Fetches the current, latest metadata for a specific file attachment identified by attachmentId. Metadata includes filename, extension, MIME type, size, current CDN/server URL, permission scope, version management links, hash for integrity, logical business source, description, and time/ownership fields. The response can include a list or link to file versions if versioning is enabled on the file.\n\nCallers use this to display, audit, or access downloadable resources within the platform securely. Download permissions are enforced using the permission_scope on the attachment, ensuring only qualified users, admins, or entity owners can retrieve file links. Errors include 404 for invalid or deleted files, 403 for unauthorized attempts, and audit trails for all retrievals. Business logic may log access by actor ID and context for compliance.","summary":"Retrieve metadata and file info for a specific attachment by attachmentId (shopping_mall_attachments).","parameters":[{"name":"attachmentId","description":"ID of the file attachment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment metadata, version info, server/CDN download URL, and all audit fields.","typeName":"IShoppingMallAttachment"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/seller/attachments/{attachmentId}","method":"get","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/seller/attachments","method":"post"},"description":"Attachment must be created before its metadata can be retrieved by attachmentId"}]},{"specification":"This operation retrieves detailed metadata and content reference for a specific file attachment using its unique attachmentId. It queries the shopping_mall_attachments table and joins any related attachment_versions for file versioning and CDN URL resolution. This endpoint can be used by file download handlers, audit managers, or business modules needing secure access to file information and download links for presentation or further processing. Visibility and permission checks are strictly enforced at the attachment level.","description":"Fetches the current, latest metadata for a specific file attachment identified by attachmentId. Metadata includes filename, extension, MIME type, size, current CDN/server URL, permission scope, version management links, hash for integrity, logical business source, description, and time/ownership fields. The response can include a list or link to file versions if versioning is enabled on the file.\n\nCallers use this to display, audit, or access downloadable resources within the platform securely. Download permissions are enforced using the permission_scope on the attachment, ensuring only qualified users, admins, or entity owners can retrieve file links. Errors include 404 for invalid or deleted files, 403 for unauthorized attempts, and audit trails for all retrievals. Business logic may log access by actor ID and context for compliance.","summary":"Retrieve metadata and file info for a specific attachment by attachmentId (shopping_mall_attachments).","parameters":[{"name":"attachmentId","description":"ID of the file attachment to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Attachment metadata, version info, server/CDN download URL, and all audit fields.","typeName":"IShoppingMallAttachment"},"authorizationRoles":["customer","seller","admin"],"name":"at","path":"/shoppingMall/admin/attachments/{attachmentId}","method":"get","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment must be created before its metadata can be retrieved by attachmentId"}]},{"specification":"This endpoint allows users to upload a new attachment (file) to the platform. On successful upload, an entry is created in shopping_mall_attachments along with necessary metadata and access scope. The initial version record is also generated in shopping_mall_attachment_versions, supporting versioned updates and future evidence management. The operation is central to all modules requiring secure uploads, such as products, board posts, reviews, and audit evidence, with file size/type checks, metadata extraction, and access policy enforcement on the backend.","description":"Permits uploading a new file attachment to the platform. The request must include a file reference (URI or temporary storage pointer after frontend upload), business context fields (intended module/entity, expected permission scope), and optional description tags. Uploaded files are validated by type, size, and policy before being stored and indexed on the backend. Upon success, metadata is created for the primary attachment entity as well as the initial version in the version table.\n\nFile uploads by users are permission checked: only authenticated actors (customers, sellers, admins) may initiate uploads. Business logic applies quota enforcement and extension/format validation, and performs malware/virus scans and any compliance-related pre-processing. The operation may generate public or restricted URLs based on permission_scope. Errors include file invalidation (415), exceeded quota (429), or permission failure (403). The response includes the full attachment metadata and permitted download URLs for future use.\n","summary":"Upload/create a new file attachment with metadata and version in shopping_mall_attachments/shopping_mall_attachment_versions.","parameters":[],"requestBody":{"description":"Attachment creation/upload data including file reference, intended purpose, extension, and permissions.","typeName":"IShoppingMallAttachment.ICreate"},"responseBody":{"description":"The metadata, permissions, and downloadable references for the newly registered file attachment.","typeName":"IShoppingMallAttachment"},"authorizationRoles":["customer","seller","admin"],"name":"create","path":"/shoppingMall/customer/attachments","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[]},{"specification":"This endpoint allows users to upload a new attachment (file) to the platform. On successful upload, an entry is created in shopping_mall_attachments along with necessary metadata and access scope. The initial version record is also generated in shopping_mall_attachment_versions, supporting versioned updates and future evidence management. The operation is central to all modules requiring secure uploads, such as products, board posts, reviews, and audit evidence, with file size/type checks, metadata extraction, and access policy enforcement on the backend.","description":"Permits uploading a new file attachment to the platform. The request must include a file reference (URI or temporary storage pointer after frontend upload), business context fields (intended module/entity, expected permission scope), and optional description tags. Uploaded files are validated by type, size, and policy before being stored and indexed on the backend. Upon success, metadata is created for the primary attachment entity as well as the initial version in the version table.\n\nFile uploads by users are permission checked: only authenticated actors (customers, sellers, admins) may initiate uploads. Business logic applies quota enforcement and extension/format validation, and performs malware/virus scans and any compliance-related pre-processing. The operation may generate public or restricted URLs based on permission_scope. Errors include file invalidation (415), exceeded quota (429), or permission failure (403). The response includes the full attachment metadata and permitted download URLs for future use.\n","summary":"Upload/create a new file attachment with metadata and version in shopping_mall_attachments/shopping_mall_attachment_versions.","parameters":[],"requestBody":{"description":"Attachment creation/upload data including file reference, intended purpose, extension, and permissions.","typeName":"IShoppingMallAttachment.ICreate"},"responseBody":{"description":"The metadata, permissions, and downloadable references for the newly registered file attachment.","typeName":"IShoppingMallAttachment"},"authorizationRoles":["customer","seller","admin"],"name":"create","path":"/shoppingMall/seller/attachments","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[]},{"specification":"This endpoint allows users to upload a new attachment (file) to the platform. On successful upload, an entry is created in shopping_mall_attachments along with necessary metadata and access scope. The initial version record is also generated in shopping_mall_attachment_versions, supporting versioned updates and future evidence management. The operation is central to all modules requiring secure uploads, such as products, board posts, reviews, and audit evidence, with file size/type checks, metadata extraction, and access policy enforcement on the backend.","description":"Permits uploading a new file attachment to the platform. The request must include a file reference (URI or temporary storage pointer after frontend upload), business context fields (intended module/entity, expected permission scope), and optional description tags. Uploaded files are validated by type, size, and policy before being stored and indexed on the backend. Upon success, metadata is created for the primary attachment entity as well as the initial version in the version table.\n\nFile uploads by users are permission checked: only authenticated actors (customers, sellers, admins) may initiate uploads. Business logic applies quota enforcement and extension/format validation, and performs malware/virus scans and any compliance-related pre-processing. The operation may generate public or restricted URLs based on permission_scope. Errors include file invalidation (415), exceeded quota (429), or permission failure (403). The response includes the full attachment metadata and permitted download URLs for future use.\n","summary":"Upload/create a new file attachment with metadata and version in shopping_mall_attachments/shopping_mall_attachment_versions.","parameters":[],"requestBody":{"description":"Attachment creation/upload data including file reference, intended purpose, extension, and permissions.","typeName":"IShoppingMallAttachment.ICreate"},"responseBody":{"description":"The metadata, permissions, and downloadable references for the newly registered file attachment.","typeName":"IShoppingMallAttachment"},"authorizationRoles":["customer","seller","admin"],"name":"create","path":"/shoppingMall/admin/attachments","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Update the metadata or properties of a file attachment record. This endpoint allows users to modify key business properties of an attachment such as filename, file extension, MIME type, access permissions, or logical description. The operation is mapped to the shopping_mall_attachments table, where each attachment is uniquely identified by an attachmentId. All updates are subject to permission checks, version control, and audit logging. Critical business and compliance rules are enforced, especially for permissions and exposure of sensitive content. This operation does not accept file content changes—only metadata updates. New versions of file content are managed under dedicated version endpoints.","path":"/shoppingMall/admin/attachments/{attachmentId}","method":"put","summary":"Update a specific attachment's metadata in shopping_mall_attachments table","description":"This API operation updates metadata of an existing file attachment. The endpoint modifies fields like filename, file extension, MIME type, permission scope, logical source, or display description for the attachment specified by attachmentId. All changes are validated for compliance with business logic, permission scopes, and auditability requirements.\n\nSecurity is enforced so that only authorized users (the original uploader or admins with proper privileges) can modify attachment records. All changes are snapshotted, and a full audit log is maintained for regulatory and security purposes. The underlying business entity remains unchanged; this endpoint does not upload or replace file content. Only metadata properties are editable. Attempting to update immutable properties or manipulate file content via this endpoint will result in an error.\n\nThis endpoint directly affects only the shopping_mall_attachments table, ensuring strict validation of all mutable fields in the schema's specification comments. Any errors in user permissions, attachment not found, or invalid metadata will be reported with actionable error messages. This API works in concert with the attachment versioning endpoint for full file lifecycle management.","parameters":[{"name":"attachmentId","description":"Unique identifier of the attachment record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new metadata to apply to the attachment. Modifiable fields include filename, file extension, MIME type, permission scope, logical source, and description. File content cannot be updated from this endpoint.","typeName":"IShoppingMallAttachment.IUpdate"},"responseBody":{"description":"The updated attachment record with all current metadata fields after the modification.","typeName":"IShoppingMallAttachment"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment must exist before its metadata can be updated. The POST operation creates a new attachment, providing the attachmentId that can then be referenced for updating in this PUT operation."}]},{"specification":"Logically delete (soft delete) a file attachment from the shopping mall platform. This endpoint sets the deleted_at timestamp for the attachment identified by attachmentId, ensuring the attachment remains in the database for audit and compliance purposes. Direct file recovery, download, or linkage is prohibited after logical deletion except for authorized compliance users. Hard deletion is not performed to preserve evidence and regulatory audit trails. The operation enforces permission checks and compliance, and is tracked with full audit logging.","path":"/shoppingMall/admin/attachments/{attachmentId}","method":"delete","summary":"Logically delete (soft delete) a specific attachment record in shopping_mall_attachments table","description":"This API operation performs a logical (soft) deletion of a file attachment entity. The endpoint sets the deleted_at timestamp of the targeted record, disabling any further access, download, or linkage for standard users. Compliance and audit users retain read-only access for legal/dispute review purposes.\n\nOnly users with admin privileges or explicit attachment management permission may invoke this endpoint. All deletions are non-destructive and fully audited, as required by platform compliance standards (GDPR, audit trails, evidence retention). Attempting to delete an already-deleted or non-existent attachment results in a descriptive error message. This operation covers only metadata-level deletion and does not erase physical file storage—physical deletion is managed by separate retention processes at the system level.\n\nThe endpoint ensures full compliance with the soft-delete pattern described in the schema comments and does not perform a hard delete under any circumstances. Associated attachment versions and business links remain, but are inaccessible through standard business operations.","parameters":[{"name":"attachmentId","description":"Unique identifier of the attachment record to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment must exist before it can be logically deleted (soft deleted) by attachmentId."}]},{"specification":"Retrieve a paginated list of all attachment versions for a given attachment. This endpoint allows authorized users to list historical versions of file content or meta for the attachment identified by attachmentId. The operation returns version metadata without file content. Supports filtering, pagination, and sorting per business need. Underlying data is in the shopping_mall_attachment_versions table and is cross-referenced by shopping_mall_attachments.","path":"/shoppingMall/admin/attachments/{attachmentId}/versions","method":"patch","summary":"List and paginate versions for a specific attachment from shopping_mall_attachment_versions","description":"This API operation retrieves a list of all versions associated with a specific attachment. The endpoint supports advanced filtering, pagination, and sorting of attachment versions according to request parameters. Only metadata about each version (e.g., version number, mime type, upload timestamp, hash) is returned—not file binary content.\n\nPermissions and role checks enforce access: typically, the uploader and users with admin role or required business permissions may access version lists. Downloading individual versions requires separate endpoints.\n\nA robust audit log of all access attempts is maintained—with errors for unauthorized or failed lookups explained in descriptive messages. Returned data reflects all versioning metadata for the attachmentId specified, allowing clients to display selectable version histories or audit records. This operation references the shopping_mall_attachment_versions table and indexes on shopping_mall_attachments.","parameters":[{"name":"attachmentId","description":"Unique identifier of the attachment for which to list versions","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter, pagination, and sorting parameters for listing attachment versions.","typeName":"IShoppingMallAttachmentVersion.IRequest"},"responseBody":{"description":"Paginated list of all attachment versions related to the specified attachmentId.","typeName":"IPageIShoppingMallAttachmentVersion"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment must exist before its versions can be listed or paginated by attachmentId."}]},{"specification":"Retrieve details for a specific version of an attachment by primary key. This endpoint returns all metadata for the requested attachment version identified by attachmentId and versionId. Only users with administrative or attachment owner permissions may access version details. This operation cross-references the shopping_mall_attachment_versions table, enforcing full business and security constraints. Binary file download is not included in this operation—use a dedicated file serving endpoint if required.","path":"/shoppingMall/admin/attachments/{attachmentId}/versions/{versionId}","method":"get","summary":"Retrieve a specific version's metadata for an attachment from shopping_mall_attachment_versions","description":"This API operation retrieves all metadata for a single attachment version, uniquely identified by both attachmentId and versionId (version primary key). Details include filename, file extension, mime type, size, hash, server URL, and audit metadata for the requested version.\n\nStrict role and permission checks are enforced: only admin users or the original uploader may retrieve version metadata. The binary file content is not returned via this endpoint. All access is logged for compliance and regulatory audit, with robust error messages for unauthorized or not-found records.\n\nThis endpoint operates solely on the shopping_mall_attachment_versions table, providing comprehensive read access to version metadata while protecting binary file content and enforcing evidence retention policies described in the schema comments.","parameters":[{"name":"attachmentId","description":"Unique identifier of the parent attachment","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"Unique identifier of the version record to retrieve (primary key)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All metadata for the requested attachment version.","typeName":"IShoppingMallAttachmentVersion"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment must exist before a specific version's metadata can be retrieved by attachmentId and versionId."},{"endpoint":{"path":"/shoppingMall/admin/attachments/{attachmentId}/versions","method":"post"},"description":"Attachment version must exist before its metadata can be retrieved by versionId for a given attachmentId."}]},{"specification":"This operation creates a new version for an existing attachment in the Attachments domain. It uses the shopping_mall_attachments and shopping_mall_attachment_versions tables. The API expects a request containing metadata about the new file version, such as the uploaded file URI, version number, uploader identifier, filename, extension, mime type, and other metadata fields.\n\nThis endpoint will validate that the attachmentId exists, associate the new version with the specified attachment, increment the version number, and store the uploaded file's reference and metadata for audit and compliance. File upload is always handled via URI property (not multipart). All previous versions of the file are retained for permanent audit trail and evidence preservation, in line with compliance requirements for legal recovery and rollback. Versioning operations enforce validity of uploader (must be customer, seller, or admin ID as per the system roles), and new versioning is not permitted on deleted (soft or hard) attachments.\n\nThe response returns the full metadata of the new attachment version, including identifiers, version info, upload timestamp, and audit-related metadata. Errors are returned if the parent attachment does not exist, the file fails validation, or permissions/security policies are not satisfied.","description":"Create a new file version for an existing attachment by supplying all relevant metadata and the server URI for the uploaded file content. This operation must be used when a user (customer, seller, or admin) uploads a new version of an existing file for business entities (products, reviews, orders, posts, etc.).\n\nPermission checks are enforced to ensure only authorized users can update the target attachment. The system validates that the supplied URI points to a compliant file (size, type, structure) and updates are only possible for attachments where the current user has replacement privileges.\n\nAll previous versions for the attachment are preserved and retrievable via audit APIs. Every new version increments the version number sequentially and forms a time-stamped chain of versions for evidence and regulatory compliance. If compliance, retention, or GDPR rules require blocking version updates, a detailed error is returned explaining the constraint.\n\nRelated endpoints include listing all versions of an attachment, retrieving a single version, and replacing file versions for attachments used in shopping mall business entities. This operation cannot be used if the parent attachment is soft/hard deleted; such requests return a business logic error. On success, it returns the full attachment version metadata.","summary":"Create a new version for a given attachment (shopping_mall_attachment_versions table).","parameters":[{"name":"attachmentId","description":"Target attachment's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Metadata required to create a new attachment version for an existing attachment. Includes server file URI, version info, and audit metadata.","typeName":"IShoppingMallAttachmentVersion.ICreate"},"responseBody":{"description":"Detailed metadata for the newly created attachment version, including identifiers, version info, audit, and compliance meta.","typeName":"IShoppingMallAttachmentVersion"},"authorizationRoles":["admin","seller","customer"],"name":"create","path":"/shoppingMall/admin/attachments/{attachmentId}/versions","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/attachments","method":"post"},"description":"Attachment must exist before a new version can be created for it."}]},{"specification":"This operation creates a new version for an existing attachment in the Attachments domain. It uses the shopping_mall_attachments and shopping_mall_attachment_versions tables. The API expects a request containing metadata about the new file version, such as the uploaded file URI, version number, uploader identifier, filename, extension, mime type, and other metadata fields.\n\nThis endpoint will validate that the attachmentId exists, associate the new version with the specified attachment, increment the version number, and store the uploaded file's reference and metadata for audit and compliance. File upload is always handled via URI property (not multipart). All previous versions of the file are retained for permanent audit trail and evidence preservation, in line with compliance requirements for legal recovery and rollback. Versioning operations enforce validity of uploader (must be customer, seller, or admin ID as per the system roles), and new versioning is not permitted on deleted (soft or hard) attachments.\n\nThe response returns the full metadata of the new attachment version, including identifiers, version info, upload timestamp, and audit-related metadata. Errors are returned if the parent attachment does not exist, the file fails validation, or permissions/security policies are not satisfied.","description":"Create a new file version for an existing attachment by supplying all relevant metadata and the server URI for the uploaded file content. This operation must be used when a user (customer, seller, or admin) uploads a new version of an existing file for business entities (products, reviews, orders, posts, etc.).\n\nPermission checks are enforced to ensure only authorized users can update the target attachment. The system validates that the supplied URI points to a compliant file (size, type, structure) and updates are only possible for attachments where the current user has replacement privileges.\n\nAll previous versions for the attachment are preserved and retrievable via audit APIs. Every new version increments the version number sequentially and forms a time-stamped chain of versions for evidence and regulatory compliance. If compliance, retention, or GDPR rules require blocking version updates, a detailed error is returned explaining the constraint.\n\nRelated endpoints include listing all versions of an attachment, retrieving a single version, and replacing file versions for attachments used in shopping mall business entities. This operation cannot be used if the parent attachment is soft/hard deleted; such requests return a business logic error. On success, it returns the full attachment version metadata.","summary":"Create a new version for a given attachment (shopping_mall_attachment_versions table).","parameters":[{"name":"attachmentId","description":"Target attachment's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Metadata required to create a new attachment version for an existing attachment. Includes server file URI, version info, and audit metadata.","typeName":"IShoppingMallAttachmentVersion.ICreate"},"responseBody":{"description":"Detailed metadata for the newly created attachment version, including identifiers, version info, audit, and compliance meta.","typeName":"IShoppingMallAttachmentVersion"},"authorizationRoles":["admin","seller","customer"],"name":"create","path":"/shoppingMall/seller/attachments/{attachmentId}/versions","method":"post","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/attachments","method":"post"},"description":"A file attachment must exist before creating a new version for it. This operation provides the initial attachment (file resource) referenced by attachmentId."}]},{"specification":"This operation creates a new version for an existing attachment in the Attachments domain. It uses the shopping_mall_attachments and shopping_mall_attachment_versions tables. The API expects a request containing metadata about the new file version, such as the uploaded file URI, version number, uploader identifier, filename, extension, mime type, and other metadata fields.\n\nThis endpoint will validate that the attachmentId exists, associate the new version with the specified attachment, increment the version number, and store the uploaded file's reference and metadata for audit and compliance. File upload is always handled via URI property (not multipart). All previous versions of the file are retained for permanent audit trail and evidence preservation, in line with compliance requirements for legal recovery and rollback. Versioning operations enforce validity of uploader (must be customer, seller, or admin ID as per the system roles), and new versioning is not permitted on deleted (soft or hard) attachments.\n\nThe response returns the full metadata of the new attachment version, including identifiers, version info, upload timestamp, and audit-related metadata. Errors are returned if the parent attachment does not exist, the file fails validation, or permissions/security policies are not satisfied.","description":"Create a new file version for an existing attachment by supplying all relevant metadata and the server URI for the uploaded file content. This operation must be used when a user (customer, seller, or admin) uploads a new version of an existing file for business entities (products, reviews, orders, posts, etc.).\n\nPermission checks are enforced to ensure only authorized users can update the target attachment. The system validates that the supplied URI points to a compliant file (size, type, structure) and updates are only possible for attachments where the current user has replacement privileges.\n\nAll previous versions for the attachment are preserved and retrievable via audit APIs. Every new version increments the version number sequentially and forms a time-stamped chain of versions for evidence and regulatory compliance. If compliance, retention, or GDPR rules require blocking version updates, a detailed error is returned explaining the constraint.\n\nRelated endpoints include listing all versions of an attachment, retrieving a single version, and replacing file versions for attachments used in shopping mall business entities. This operation cannot be used if the parent attachment is soft/hard deleted; such requests return a business logic error. On success, it returns the full attachment version metadata.","summary":"Create a new version for a given attachment (shopping_mall_attachment_versions table).","parameters":[{"name":"attachmentId","description":"Target attachment's unique identifier (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Metadata required to create a new attachment version for an existing attachment. Includes server file URI, version info, and audit metadata.","typeName":"IShoppingMallAttachmentVersion.ICreate"},"responseBody":{"description":"Detailed metadata for the newly created attachment version, including identifiers, version info, audit, and compliance meta.","typeName":"IShoppingMallAttachmentVersion"},"authorizationRoles":["admin","seller","customer"],"name":"create","path":"/shoppingMall/customer/attachments/{attachmentId}/versions","method":"post","authorizationRole":"customer","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/attachments","method":"post"},"description":"A file attachment must exist before creating a new version for it. This operation provides the initial attachment (file resource) referenced by attachmentId."}]},{"specification":"This operation updates metadata or properties for an existing attachment file version. It works directly with the shopping_mall_attachment_versions table, enforcing constraints so that only mutable fields (such as filename, description, or permission scope) can be updated—never the physical file itself. This enables correction of display or business context data for a versioned file, with all edits permanently logged for audit history.\n\nThe operation validates both the attachmentId and versionId for existence and relationship. Only administrators, the original uploader, or explicitly authorized users may update an attachment version. Mutations are controlled by compliance, audit, and permission policies. Attempting to alter immutable file properties or edit deleted/locked versions will result in a business error.\n\nSuccessful execution results in the updated attachment version metadata. Audit information always records which user performed the update and when the change occurred. Carefully log all changes for compliance and evidence retention.","description":"Update mutable business metadata for a specific version of an attachment file, such as filename, description, or permission settings. This action is only available for users with edit rights (admin, original uploader, or authorized party) and for attachment versions that are neither deleted nor locked for compliance reasons.\n\nPersistence of updates is permanent: the modification is logged, and past versions are recoverable via snapshot and audit subsystems. If any business constraint blocks the update (e.g., immutable fields, soft/hard deleted file, policy violation), the system returns an error explaining why the operation was denied.\n\nThis endpoint may be used in conjunction with version listing, retrieval, or replacement APIs as part of a broader attachment/file management workflow.","summary":"Update metadata for an existing attachment version (shopping_mall_attachment_versions table).","parameters":[{"name":"attachmentId","description":"UUID of the parent attachment.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"UUID of the version of the attachment file to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the attachment version, only allowing fields that are strictly mutable per compliance.","typeName":"IShoppingMallAttachmentVersion.IUpdate"},"responseBody":{"description":"Updated attachment version metadata reflecting changes to mutable properties.","typeName":"IShoppingMallAttachmentVersion"},"authorizationRoles":["admin","seller"],"name":"update","path":"/shoppingMall/admin/attachments/{attachmentId}/versions/{versionId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/attachments","method":"post"},"description":"A file attachment must exist before updating its version metadata. This ensures the attachmentId is valid for the update operation."},{"endpoint":{"path":"/shoppingMall/customer/attachments/{attachmentId}/versions","method":"post"},"description":"The specific attachment version must exist before it can be updated. This operation creates the version referenced by versionId."}]},{"specification":"This operation updates metadata or properties for an existing attachment file version. It works directly with the shopping_mall_attachment_versions table, enforcing constraints so that only mutable fields (such as filename, description, or permission scope) can be updated—never the physical file itself. This enables correction of display or business context data for a versioned file, with all edits permanently logged for audit history.\n\nThe operation validates both the attachmentId and versionId for existence and relationship. Only administrators, the original uploader, or explicitly authorized users may update an attachment version. Mutations are controlled by compliance, audit, and permission policies. Attempting to alter immutable file properties or edit deleted/locked versions will result in a business error.\n\nSuccessful execution results in the updated attachment version metadata. Audit information always records which user performed the update and when the change occurred. Carefully log all changes for compliance and evidence retention.","description":"Update mutable business metadata for a specific version of an attachment file, such as filename, description, or permission settings. This action is only available for users with edit rights (admin, original uploader, or authorized party) and for attachment versions that are neither deleted nor locked for compliance reasons.\n\nPersistence of updates is permanent: the modification is logged, and past versions are recoverable via snapshot and audit subsystems. If any business constraint blocks the update (e.g., immutable fields, soft/hard deleted file, policy violation), the system returns an error explaining why the operation was denied.\n\nThis endpoint may be used in conjunction with version listing, retrieval, or replacement APIs as part of a broader attachment/file management workflow.","summary":"Update metadata for an existing attachment version (shopping_mall_attachment_versions table).","parameters":[{"name":"attachmentId","description":"UUID of the parent attachment.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"UUID of the version of the attachment file to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the attachment version, only allowing fields that are strictly mutable per compliance.","typeName":"IShoppingMallAttachmentVersion.IUpdate"},"responseBody":{"description":"Updated attachment version metadata reflecting changes to mutable properties.","typeName":"IShoppingMallAttachmentVersion"},"authorizationRoles":["admin","seller"],"name":"update","path":"/shoppingMall/seller/attachments/{attachmentId}/versions/{versionId}","method":"put","authorizationRole":"seller","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/customer/attachments","method":"post"},"description":"A file attachment must exist before updating its version metadata. This ensures the attachmentId is valid for the update operation."},{"endpoint":{"path":"/shoppingMall/customer/attachments/{attachmentId}/versions","method":"post"},"description":"The specific attachment version must exist before it can be updated. This operation creates the version referenced by versionId."}]},{"specification":"This operation performs a soft deletion (logical removal) of a specific attachment file version. It operates on the shopping_mall_attachment_versions table and marks the relevant version as deleted by populating the deleted_at column. Previous versions and audit snapshots remain intact for evidentiary and compliance purposes. Only admins, and in some cases, the original uploader or privileged seller, may perform deletes. The operation can only be performed if the version is not already deleted or in a locked state for regulatory or compliance reasons.\n\nThis endpoint is part of the attachment/file management lifecycle and ensures that deleted file versions are retained for legal, compliance, and restoration needs per audit policy. No actual file content is removed from disk until all regulatory retention windows are exhausted. Invalid attempts (e.g., deleting a version not owned by the caller, deleting an immutable/compliance-locked version, or nonexistent version) will result in business rule errors.","description":"Soft-delete (logically remove) a file version of an attachment, ensuring that the deleted_at field is set while maintaining full audit traceability. This operation is typically available only to administrators, and possibly the original uploader under certain circumstances, in accord with platform policy.\n\nThe endpoint will fail with a clear error if the user tries to delete a version that is already deleted, does not exist, or is compliance-locked. Attempts by unauthorized users or for compliance-sealed files are rejected and fully logged for audit.\n\nRelated APIs in this file management domain include creating, updating, listing, and restoring file versions. Physical removal of file content is always deferred until all legal retention policies are resolved.","summary":"Soft-delete a specific attachment version (shopping_mall_attachment_versions table).","parameters":[{"name":"attachmentId","description":"UUID of the parent attachment.","schema":{"type":"string","format":"uuid"}},{"name":"versionId","description":"UUID of the version to be soft deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/attachments/{attachmentId}/versions/{versionId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/attachments/{attachmentId}/versions","method":"post"},"description":"Attachment version must exist before it can be soft-deleted. Creating a new attachment version ensures that the versionId is available for logical removal."}]},{"specification":"This operation retrieves a paginated, filterable list of attachment-entity links for the shopping mall system. It operates on the shopping_mall_entity_attachment_links table and returns all entity/attachment bindings according to complex search criteria such as entity type, entity ID, purpose, role visibility, creation date, or logical deletion status. This enables system administrators or authorized business users to explore the relationships between business entities (such as products, orders, posts) and their associated files, for audit, evidence, or linkage management purposes.\n\nThe operation returns paginated results and supports sorting, filtering, advanced search, and role-based access. Each entity-attachment link in the results includes full metadata for attachment, linkage purpose, roles, and audit data. Errors are returned if search is invalid or access is unauthorized.","description":"Retrieve a pageable, searchable, and sortable list of entity-attachment links for the shopping mall backend system. This operation allows system administrators and privileged business users to enumerate, filter, and analyze all file links associated with business entities such as products, orders, reviews, or comments, based on flexible search criteria.\n\nAccess controls limit the results to those entities/attachments allowed by the caller's role and visibility permissions. The payload supports pagination (page number/size), optional filtering by entity type, ID, role, linkage purpose, attachment ID, and created/deleted state. The response returns a paginated object containing entity-attachment link metadata, audit info, and optionally summaries of both attachments and linked entities for system review purposes.\n\nThis operation is part of the larger attachment/file management, evidence, and compliance suite for the modular shopping mall platform. Use it to support audit, evidence query, or downstream AI/business analytics workflows.","summary":"Search and retrieve a paginated list of entity/file links (shopping_mall_entity_attachment_links table).","parameters":[],"requestBody":{"description":"Search criteria for entity-attachment links, including pagination, filters, and sort order.","typeName":"IShoppingMallEntityAttachmentLink.IRequest"},"responseBody":{"description":"Paginated set of entity-attachment link records with metadata for attachments, entities, visibility, and audit.","typeName":"IPageIShoppingMallEntityAttachmentLink"},"authorizationRoles":["admin"],"name":"index","path":"/shoppingMall/admin/entityAttachmentLinks","method":"patch","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/entityAttachmentLinks","method":"post"},"description":"At least one entity-attachment link must exist in order to search, paginate, or retrieve link records. Creating an entity-attachment link ensures that the entity_id and attachment_id are available for lookup."}]},{"specification":"Retrieve the details of a specific entity-attachment link, operating on the shopping_mall_entity_attachment_links table. This operation is primarily used to fetch all relevant associations and metadata for a file or attachment connected to any business entity (such as product, order, etc.). The operation requires the unique identifier for the entityAttachmentLink entity.","description":"This operation fetches the details of a specific entity-attachment link from the shopping_mall_entity_attachment_links table. It is used to retrieve all association metadata, including the business entity (e.g., product, order, review) related to the attachment, as well as permission details and context of linkage. The entity-attachment link contains references to the target entity (with entity type and ID), linked attachment ID, the user who performed the linking, the purpose of the attachment (such as evidence, thumbnail, document), business context, and audit-compliance fields. Sensitive attributes such as createdAt, deletedAt, and permission scope are also returned if the requesting user has appropriate permissions.\n\nThis endpoint is read-only and does not require authentication for public attachments, but restricted resources enforce permission checks. The operation will return all non-deleted, logically active entity-attachment links, and fail if the link is not found or access is denied. All responses are formatted according to the IShoppingMallEntityAttachmentLink schema and include error handling for missing IDs, permission violations, or deleted entities.","summary":"Retrieve entity-attachment link details by ID (shopping_mall_entity_attachment_links table).","parameters":[{"name":"entityAttachmentLinkId","description":"Unique identifier of the entity-attachment link (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified entity-attachment link.","typeName":"IShoppingMallEntityAttachmentLink"},"authorizationRoles":[],"name":"at","path":"/shoppingMall/entityAttachmentLinks/{entityAttachmentLinkId}","method":"get","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/entityAttachmentLinks","method":"post"},"description":"Entity-attachment link must exist before it can be retrieved by id. Creating the entity-attachment link ensures that the entityAttachmentLinkId is available for detailed retrieval."}]},{"specification":"Create a new entity-attachment link record, operating on the shopping_mall_entity_attachment_links table. This operation is used for associating uploaded files (attachments) with a business entity (like product, order, review, board, etc.) and recording their permission scopes and audit metadata.","description":"This operation creates an association between an attachment (file resource) and a business entity (product, order, review, etc.) by inserting a new record in the shopping_mall_entity_attachment_links table. The request includes the attachment ID, entity type (e.g., 'product', 'order', 'review'), the related entity's UUID, the ID of the user performing the action, the purpose or context (such as 'evidence', 'thumbnail'), any visibility constraints, and audit meta fields.\n\nOn creation, the operation enforces permission checks according to the current user's role and visibility context, ensuring only permitted users can link attachments to protected business entities. The created entity-attachment link is subsequently used throughout the platform to retrieve or authorize access to the file. Logical business constraints such as unique (entity_type, entity_id, attachment_id) triples are enforced. The response includes full details of the association as per IShoppingMallEntityAttachmentLink. In case of violation (duplicate, invalid reference, or permission error), appropriate error messages are returned.","summary":"Create a new entity-attachment link (shopping_mall_entity_attachment_links table).","parameters":[],"requestBody":{"description":"Payload to create an entity-attachment link, associating an attachment to a business entity.","typeName":"IShoppingMallEntityAttachmentLink.ICreate"},"responseBody":{"description":"Details of the newly created entity-attachment link.","typeName":"IShoppingMallEntityAttachmentLink"},"authorizationRoles":["admin"],"name":"create","path":"/shoppingMall/admin/entityAttachmentLinks","method":"post","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Update the details of a specific entity-attachment link, for the shopping_mall_entity_attachment_links table. This operation enables administrators to modify attributes such as permission scope, purpose, and meta-context for the link between an attachment and a business entity.","description":"This endpoint allows the update of an entity-attachment link's metadata, such as purpose, permission scope, or visibility roles, by accepting a payload conforming to IShoppingMallEntityAttachmentLink.IUpdate. The operation validates the existence of the link (by UUID), verifies administrative permissions, and applies requested changes.\n\nUpdates may include modifying the business context (purpose), changing who can access the attachment via role-based visibility, or adding audit-related context like justification for permission changes. The operation does not allow changing the attachment, entity type, or link target for audit integrity. If the target record is not found, deleted, or permissions are insufficient, appropriate errors are returned. The response includes the full, updated entity-attachment link definition as specified by IShoppingMallEntityAttachmentLink.","summary":"Update an entity-attachment link by ID (shopping_mall_entity_attachment_links table).","parameters":[{"name":"entityAttachmentLinkId","description":"Unique identifier of the entity-attachment link (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload containing updated attributes for the entity-attachment link.","typeName":"IShoppingMallEntityAttachmentLink.IUpdate"},"responseBody":{"description":"Updated information for the specified entity-attachment link.","typeName":"IShoppingMallEntityAttachmentLink"},"authorizationRoles":["admin"],"name":"update","path":"/shoppingMall/admin/entityAttachmentLinks/{entityAttachmentLinkId}","method":"put","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/entityAttachmentLinks","method":"post"},"description":"The entity-attachment link must be created before it can be updated."}]},{"specification":"Delete (soft-delete) an entity-attachment link by its unique identifier in the shopping_mall_entity_attachment_links table. This operation is designed for administrative removal of logical attachment associations while preserving full audit history and evidence for compliance.","description":"This operation marks the specified entity-attachment link as deleted (soft-delete) by setting the deleted_at timestamp, as supported by the shopping_mall_entity_attachment_links schema. Full audit history of the association is preserved for compliance, dispute resolution, or legal needs. The operation verifies administrator permissions and the current active state of the link before performing the removal.\n\nSoft-deleted links are excluded from normal queries but retained for regulatory retrieval and audit. If the entity-attachment link is already deleted, not found, or access is denied, error messages are returned. No response body is included; success can be confirmed by HTTP status and subsequent retrieval attempts.","summary":"Soft-delete an entity-attachment link by ID (shopping_mall_entity_attachment_links table).","parameters":[{"name":"entityAttachmentLinkId","description":"Unique identifier of the entity-attachment link (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","path":"/shoppingMall/admin/entityAttachmentLinks/{entityAttachmentLinkId}","method":"delete","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/entityAttachmentLinks","method":"post"},"description":"The entity-attachment link must be created before it can be deleted."}]},{"specification":"This API operation provides advanced, paginated search capabilities over the entity snapshot records in the shopping mall backend. It enables administrators and compliant business users to audit historical state captures for any business entity, supporting complex filtering, time-range queries, and type-based access. This is essential for regulatory evidence, dispute, and compliance recovery, aligning with the 'shopping_mall_entity_snapshots' table in the Prisma schema. The input request supports detailed search criteria, including entity type, entity ID, actor, event reason, and audit trails. The output provides paginated entity snapshot data for in-depth analysis and integration with forensic tooling.","description":"Retrieve a filtered, paginated list of entity snapshots for any auditable business object within the shopping mall platform. This operation supports sophisticated search/filtering by entity_type (such as product, customer, order, review, etc.), entity_id, event reason, or the snapshot_actor_id (who performed the triggering event), as well as event and snapshot time ranges.\n\nThe endpoint supports business audit functions, rollback/dispute investigation, and regulatory compliance requests by allowing fine-grained analysis of all historical state captures. Permission to access specific types of entity snapshots is restricted to high-authorization roles (generally 'admin'), given the potential PII or regulated information included in snapshot_data.\n\nThis operation queries the 'shopping_mall_entity_snapshots' table as defined in the Actors, Products, Orders, and other domains, returning matching records with full serialized state and metadata. Large result sets are delivered using a standard paginated response payload to support scalable audit operations. Related operations include detailed snapshot retrieval (GET /entitySnapshots/{entitySnapshotId}) and the audit log list endpoint. Error cases include invalid filters, role-based access restrictions, and malformed queries.","summary":"Search and paginate entity snapshot audit history (shopping_mall_entity_snapshots) with filters.","parameters":[],"requestBody":{"description":"Entity snapshot search filters, pagination, and sort options.","typeName":"IShoppingMallEntitySnapshot.IRequest"},"responseBody":{"description":"Paginated list of matched entity snapshot records for audit/recovery.","typeName":"IPageIShoppingMallEntitySnapshot"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/entitySnapshots","method":"patch","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/entityAttachmentLinks","method":"post"},"description":"An entity-attachment link must be created before its snapshot audit history can be queried."}]},{"specification":"This API operation retrieves the complete details for a single entity snapshot, identified by its unique ID. It directly accesses the shopping_mall_entity_snapshots table, returning all immutable fields and serialized snapshot data. This is essential for evidence recovery, rollback validation, legal audits, or detailed analysis of any business object’s historical state. Only highly privileged roles (admin) can access this, given the possible inclusion of sensitive/PII data in snapshot_data. This function is critical for compliance, dispute resolution, and forensic review.","description":"Retrieve the full historical state for a specific entity snapshot within the shopping mall backend system. This operation references the shopping_mall_entity_snapshots Prisma schema, which tracks immutable, point-in-time captures of every critical business object (Customer, Product, Order, etc.) as required for evidence preservation and regulatory compliance.\n\nThe endpoint is secured so that only administrative roles can access it, due to its exposure of full serialized entity data, which may include sensitive information. Typical use cases include compliance audits, dispute/rollback analysis, and verification of proper business rule enforcement at the time of the snapshot event.\n\nThe operation is designed to be used in conjunction with the paginated index endpoint (PATCH /entitySnapshots), especially when detailed insight into a given snapshot instance is required. Possible error responses include not found, forbidden (insufficient role), and bad request (malformed snapshot ID).","summary":"Retrieve detailed information for a historic entity snapshot (shopping_mall_entity_snapshots).","parameters":[{"name":"entitySnapshotId","description":"Unique identifier of the desired entity snapshot record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the entity snapshot, including data, type, and metadata.","typeName":"IShoppingMallEntitySnapshot"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/entitySnapshots/{entitySnapshotId}","method":"get","prerequisites":[{"endpoint":{"path":"/shoppingMall/admin/entityAttachmentLinks","method":"post"},"description":"An entity-attachment link must be created before its snapshot can be retrieved."}]},{"specification":"This API operation provides full-featured, paginated audit log search over the shopping mall platform’s business domains. It interacts with the shopping_mall_audit_logs table, supporting extensive filters: entity type, entity ID, event type, actor, result, time range, and related snapshot references. Designed for system administrators and compliance officers, this endpoint is essential for tracing system events, validating business rule execution, tracking access, and supporting legal audit demand. Input DTO provides search, pagination, and sort controls; the output is paginated audit log records.","description":"Retrieve a filtered, paginated view of all business event and system audit logs for the shopping mall backend. This operation leverages advanced filters, allowing for queries by entity_type (such as order, product, customer, etc.), entity_id, event_type (create, update, delete, permission_granted, etc.), actor_id (who performed the action), event result, and reference to associated snapshot records.\n\nThe endpoint supports audit, compliance, and operational tracing – essential for legal evidence, security monitoring, and business workflow validation. Access to audit logs is restricted to administrators, as logs may reference sensitive operational or user data. Large result volumes are returned via a standard pagination pattern for performance and scalability.\n\nThis operation works over the 'shopping_mall_audit_logs' table as defined in the Snapshots schema. It is closely related to entity snapshot operations (PATCH /entitySnapshots) and provides event-level traceability across the platform. Error handling includes permission checks, invalid filter criteria, and malformed queries.","summary":"Search system audit logs (shopping_mall_audit_logs) with advanced, paginated filters for compliance tracing.","parameters":[],"requestBody":{"description":"Audit log search and pagination criteria.","typeName":"IShoppingMallAuditLog.IRequest"},"responseBody":{"description":"Paginated result list of audit log records matching filter criteria.","typeName":"IPageIShoppingMallAuditLog"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/shoppingMall/admin/auditLogs","method":"patch","prerequisites":[]},{"specification":"This API operation retrieves the detailed information for a single audit log entry, identified by its unique ID. It references the shopping_mall_audit_logs table, returning full metadata: entity involved, actor, event type, result, message/context, snapshot reference, and event timestamp. Used for system forensics, regulatory compliance, and business rule validation by privileged admin roles. Input is the auditLogId as path parameter; output is the full audit log record. Only admins may access this data, as it may include sensitive event context or confidential data. The endpoint supports detailed investigation in response to issues discovered via the audit log search endpoint (PATCH /auditLogs).","description":"Retrieve complete event detail for a specific audit log entry in the shopping mall platform’s system. This operation queries the shopping_mall_audit_logs Prisma schema table, covering all aspects of the target event: linked entity (entity_type, entity_id), actor_id, event_type, event_result, event_message, associated snapshot reference, and time/event audit metadata.\n\nThis endpoint is secured for administrative use only, as audit log data may reveal sensitive operational or security-related information. It is essential for incident investigation, legal compliance requests, and thorough validation of system integrity or business rule enforcement.\n\nThe endpoint is intended for use alongside the general audit log search endpoint, enabling system administrators or compliance officers to drill down to the root cause or context of significant business system events. Error responses include not found, forbidden access, or invalid auditLogId.","summary":"Retrieve full detailed context for a system audit log record (shopping_mall_audit_logs).","parameters":[{"name":"auditLogId","description":"Unique identifier for the desired audit log event.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full system audit log entry detail, context, and event metadata.","typeName":"IShoppingMallAuditLog"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/shoppingMall/admin/auditLogs/{auditLogId}","method":"get","prerequisites":[]},{"specification":"This operation retrieves a filtered and paginated list of deletion events from the shopping mall system. It operates on the shopping_mall_deletion_events table in the Prisma schema, enabling authorized administrators to search, sort, and audit events where logical deletions have occurred for entities such as products, orders, reviews, or users. Supports complex filtering by entity type, actor, reason, date range, and linked snapshot information, reflecting full audit and compliance needs for legal and operational purposes.","path":"/shoppingMall/admin/deletionEvents","method":"patch","summary":"Search and retrieve a filtered, paginated list of entity deletion events (shopping_mall_deletion_events) for compliance and audit.","description":"Retrieve a filtered and paginated list of deletion events from the shopping mall's system-wide audit trail. This operation allows administrators to query logical deletions across all managed business entities, supporting advanced search criteria such as entity type (e.g., product, order, review), deletion reason, deleted_by_id, date ranges, and linkage to entity snapshots.\n\nThe operation returns results in a paginated format, including relevant metadata and references to snapshots for evidence or rollback scenarios. It is intended for use by compliance and audit personnel to ensure data removal actions are legitimate and traceable according to legal and business policies.\n\nSecurity considerations require that this operation is restricted to administrators with proper audit or data governance roles, preventing unauthorized access to sensitive deletion records. Rate limiting, data masking (where necessary for privacy), and full query audit logging are recommended when implementing this API.\n\nThis endpoint is directly backed by the shopping_mall_deletion_events Prisma schema table, capturing all key fields for traceability, including entity_type, entity_id, deleted_by_id, deletion_reason, snapshot_id, and timestamps. The response structure mirrors the compliance and governance needs defined in requirements, enabling legal export and robust analysis.","parameters":[],"requestBody":{"description":"Filter, search, and pagination criteria for deletion event retrieval.","typeName":"IShoppingMallDeletionEvent.IRequest"},"responseBody":{"description":"Paginated list of deletion events and metadata matching search criteria.","typeName":"IPageIShoppingMallDeletionEvent"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the details of a single deletion event record from the shopping_mall_deletion_events table, identified by its unique deletionEventId. It is designed for administrators to audit, review, or investigate the exact circumstances of a logical deletion action, including the entity type and ID, who performed the deletion, the rationale, the linked snapshot for evidence, and all relevant timestamps.","path":"/shoppingMall/admin/deletionEvents/{deletionEventId}","method":"get","summary":"Retrieve detailed information about a specific deletion event (shopping_mall_deletion_events) for audit and compliance review.","description":"Returns the full details of a single deletion event from the shopping mall's data deletion audit log, based on the unique deletionEventId. This operation is used by compliance, audit, or admin personnel to investigate entity removals, including the type of entity affected, deleted_by_id (actor), deletion_reason, and any related snapshot evidence.\n\nThe operation strictly enforces admin-level access and is logged for compliance traceability. Sensitive data may be masked if entity_type warrants additional privacy measures (e.g., user accounts).\n\nThis API is critical for fulfilling regulatory requirements and enabling legal or governance queries about all logical removals. It is directly based on the shopping_mall_deletion_events table schema with all corresponding fields and relationships, providing an immutable record for system-integrity and audit workflows.","parameters":[{"name":"deletionEventId","description":"Unique identifier of the target deletion event to be retrieved for audit or compliance review.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the targeted deletion event, including audit and evidence metadata.","typeName":"IShoppingMallDeletionEvent"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[]}],"components":{"authorization":[{"name":"customer","description":"A user who browses, purchases, reviews, and manages orders/addresses. Can favorite products, make inquiries, and use coupons, deposits, and mileage. Receives personalized recommendations.","kind":"member"},{"name":"seller","description":"A member with permission to register, update, and manage products, view and handle orders for their own products, answer inquiries, analyze sales performance, and issue coupons for their goods.","kind":"member"},{"name":"admin","description":"An administrator with elevated permissions. Can manage users, sellers, and products globally. Oversees operations, audits logs, configures channels, and manages compliance settings for the entire platform.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIShoppingMallChannel.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallChannel.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSection.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSection.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallChannelCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallChannelCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallConfiguration":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallConfiguration"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCustomer.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCustomer.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallSeller.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallSeller.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCustomerIdentity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCustomerIdentity.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallExternalAccount.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallExternalAccount.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAdminRoleEscalation.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAdminRoleEscalation.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallUserConnection.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallUserConnection.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallUserAgreement.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallUserAgreement.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProduct.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProduct.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductOption.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductOption.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductVariant.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductVariant.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductBundle":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductBundle"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductTag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductTag.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductAttachmentLink.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductAttachmentLink.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCart.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCart.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCartItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCartItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCartSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCartSnapshot"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrder":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrder"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallOrderSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderSnapshot"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallPayment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallPayment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallPaymentSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallPaymentSnapshot"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallShipment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallShipment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallShipmentItem":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallShipmentItem"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallDelivery.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallDelivery.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAfterSaleService.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAfterSaleService.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCoupon.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCoupon.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCouponIssuance":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCouponIssuance"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallCouponCampaign.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallCouponCampaign.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallDeposit.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallDeposit.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallDepositTransaction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallDepositTransaction"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallMileage.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallMileage.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallMileageTransaction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallMileageTransaction"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallDonation.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallDonation.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallBoard.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallBoard.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallBoardPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallBoardPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallProductInquiry.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallProductInquiry.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallInquiryAnswer":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallInquiryAnswer"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallReview.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallReview.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallFavoriteProduct":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallFavoriteProduct"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallFavoriteAddress":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallFavoriteAddress"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallFavoriteInquiry":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallFavoriteInquiry"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAttachment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAttachmentVersion":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAttachmentVersion"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallEntityAttachmentLink":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallEntityAttachmentLink"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallEntitySnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallEntitySnapshot"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIShoppingMallDeletionEvent":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallDeletionEvent"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IShoppingMallCustomer.IJoin":{"type":"object","properties":{"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"UUID of the channel to which the customer is registering. Required for tenant/business unit scoping. Must be a valid, existing channel."},"email":{"type":"string","format":"email","description":"Customer's primary email. Required and must be unique within the channel. Used for login and notifications."},"password":{"type":"string","minLength":6,"maxLength":128,"description":"Plain password to register the account. This field is accepted in registration and will be hashed into password_hash. DO NOT accept password_hash directly from the user. Should meet security requirements for complexity. Optional if registering via OAuth (in which case, omit or provide as an empty string)."},"name":{"type":"string","maxLength":64,"description":"Customer's real name or preferred display name. Required for identity and personalized operations."},"phone":{"oneOf":[{"type":"string","pattern":"^[0-9\\-\\+]{7,20}$","description":"Mobile/contact phone number for identity verification. Optional."},{"type":"null"}],"description":"Mobile/contact phone number for identity verification. Optional; may be null if not required by policy."}},"required":["shopping_mall_channel_id","email","name"],"description":"Payload for customer registration (join) on the shopping mall platform. This structure references only fields that exist in the shopping_mall_customers schema and reflects the required information for the join endpoint. The password is included in plaintext for secure hashing on the backend at account creation; password_hash is never accepted from the client. All registration attempts must ensure the uniqueness of the email within the channel and proper error handling for violations. Optional phone is included if required by channel policy. This type does NOT include status/kyc_status, which are system-assigned upon registration.","x-samchon-prisma-schema":"shopping_mall_customers"},"IShoppingMallCustomer.ILogin":{"type":"object","properties":{"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"UUID of the channel to which the login attempt is directed. Customers may have accounts in multiple channels; this ensures the login is scoped correctly. Must match an existing channel."},"email":{"type":"string","format":"email","description":"The customer's email address previously registered in the platform. Required for login."},"password":{"type":"string","minLength":6,"maxLength":128,"description":"Plain password to authenticate this login. This is NEVER hashed on the client and always sent in plaintext for secure comparison server-side. The backend will hash and verify against password_hash in shopping_mall_customers."}},"required":["shopping_mall_channel_id","email","password"],"description":"Login credentials for customer authentication (shopping_mall_customers). All fields strictly reflect properties present in the login operation and schema. Channel ID is required for multi-tenant resolution. The password must always be provided as plaintext for secure backend hashing and comparison."},"IShoppingMallCustomer.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"JWT refresh token issued by the platform for session continuation. Required for refresh flows; must be valid, unexpired, and linked to an active customer session."}},"required":["refresh_token"],"description":"Payload for session refresh operation, containing the required refresh token to be validated and exchanged for new authentication tokens. This type matches the input expected for refresh authentication flows."},"IShoppingMallCustomer.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID identifier of the customer in the shopping_mall_customers table. Provided for consistent referencing across all modules."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"The UUID of the channel (tenant/store) to which this customer is linked."},"email":{"type":"string","format":"email","description":"The customer's email address as registered in the system. Immutable after registration."},"phone":{"oneOf":[{"type":"string","pattern":"^[0-9\\-\\+]{7,20}$","description":"Optional customer phone number if provided at registration or later update."},{"type":"null"}],"description":"Phone number as provided in registration. May be null if not present."},"name":{"type":"string","maxLength":64,"description":"The customer's real or display name. Used for personalization and identification."},"status":{"type":"string","description":"Current lifecycle status for the customer profile (values: active, pending, suspended, withdrawn, etc)."},"kyc_status":{"type":"string","description":"KYC/identity verification state (values: pending, verified, denied, etc)."},"created_at":{"type":"string","format":"date-time","description":"ISO8601 UTC timestamp of customer account creation. Used for audit, analytics, and display."},"updated_at":{"type":"string","format":"date-time","description":"ISO8601 UTC timestamp of last customer record update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"ISO8601 UTC timestamp of soft deletion (if deleted), or null if not deleted."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","shopping_mall_channel_id","email","name","status","kyc_status","created_at","updated_at","token"],"description":"Response structure returning all core schema fields for the customer, reflecting current state and session after join/login/refresh. On success, always includes token property using IAuthorizationToken per platform-wide authentication response convention.","x-samchon-prisma-schema":"shopping_mall_customers"},"IShoppingMallSeller.IJoin":{"type":"object","x-samchon-prisma-schema":"shopping_mall_sellers","properties":{"email":{"type":"string","format":"email","description":"Email of the seller, which is inherited from the customer's primary email. Registered channel's {@link shopping_mall_channels.id}. Used for identity and login. Must be unique per channel."},"password":{"type":"string","description":"Plaintext password to be hashed and stored as password_hash. If using OAuth/external authentication, this may be omitted. Not stored directly—must be hashed by the backend before persisting to shopping_mall_customers.password_hash."},"name":{"type":"string","description":"Legal or preferred name for the seller, used for personalized interactions and compliance. Maps to shopping_mall_customers.name."},"phone":{"oneOf":[{"type":"string","description":"Seller's phone number as allowed by platform policy, if channel requires phone validation."},{"type":"null"}],"description":"Optional phone/contact information for seller onboarding."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel to which the seller is being registered. Required for multi-tenant segmentation, maps to shopping_mall_channels.id."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Home section/shop for the seller (e.g., for channel/section scoping), references shopping_mall_sections.id."},"profile_name":{"type":"string","description":"Display name for the seller, as used for branding or public profile (maps to shopping_mall_sellers.profile_name)."},"kyc_status":{"type":"string","description":"Status for KYC/identity verification, initial state is usually 'pending'. Business logic sets this at onboarding."}},"required":["email","name","shopping_mall_channel_id","shopping_mall_section_id","profile_name"],"description":"Seller registration payload for onboarding a seller in the shopping mall. Fields include those required both in shopping_mall_customers (email, name, phone) and shopping_mall_sellers (channel, section, profile, and optional KYC). Password is sent in plain text for login-based auth and backend hashes before storing.\n\nThe registration does NOT include system fields (id, created_at, updated_at, deleted_at, approval_at), nor fields managed by system only (status is set to 'pending' or 'active' automatically). This DTO is for onboarding/register (POST) operation only."},"IShoppingMallSeller.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID that uniquely identifies the seller account (as registered in shopping_mall_sellers.id)"},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Base customer record {@link shopping_mall_customers.id} for permission inheritance and login linkage."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Home section/shop for the seller {@link shopping_mall_sections.id}. Used for channel/section scoping."},"profile_name":{"type":"string","description":"Seller's public display name or shop title."},"status":{"type":"string","description":"Seller approval/lifecycle status (pending, active, suspended, rejected, withdrawn)."},"approval_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime seller was formally approved. Null if not yet approved."},"kyc_status":{"type":"string","description":"KYC/identity check status (pending, verified, denied, etc)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (UTC ISO-8601)."},"updated_at":{"type":"string","format":"date-time","description":"Record last modification timestamp (auto-update)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for audit/compliance. Null if not deleted."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"seller":{"$ref":"#/components/schemas/IShoppingMallSeller.ISummary","description":"Summary information about the authenticated seller; see ISummary for reference. Includes non-sensitive, public-facing fields only."}},"required":["id","shopping_mall_customer_id","shopping_mall_section_id","profile_name","status","kyc_status","created_at","updated_at","token"],"description":"Authorization response for a successfully authenticated seller. Contains seller uuid, JWT token, and public seller information. Used as response for join/login/refresh APIs. DTO structure follows project convention and OpenAPI best practices."},"IShoppingMallSeller.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address used by the seller for authentication, as defined in shopping_mall_customers.email (must be unique per channel)."},"password":{"type":"string","description":"Plaintext password to authenticate against shopping_mall_customers.password_hash. Sent in plaintext over HTTPS, always hashed for comparison in backend logic."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel ID for login context to guarantee uniqueness (multi-tenant segmentation). References shopping_mall_channels.id."}},"required":["email","password","shopping_mall_channel_id"],"description":"Seller login payload for authentication. Includes email, channel ID for scoping, and password."},"IShoppingMallSeller.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"The JWT refresh token for the seller session to be refreshed. Must be a valid and unexpired refresh token, issued after join/login."}},"required":["refresh_token"],"description":"Refresh token request object for seller sessions. Used to issue a new access token upon presentation of a valid refresh token. The token property is named 'refresh_token' in alignment with OpenAPI conventions."},"IShoppingMallSeller.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_sellers","properties":{"id":{"type":"string","format":"uuid","description":"Unique seller account identifier (primary key in shopping_mall_sellers)."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"References seller's home section/shop (shopping_mall_sections.id). Required for scoping sellers in admin UI or workflow."},"profile_name":{"type":"string","description":"Seller's public-facing display name or shop title, e.g., 'Acme Products'."},"status":{"type":"string","description":"Seller account workflow status: 'pending', 'active', 'suspended', etc. Used for onboarding and workflow control."},"approval_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime the seller account was approved. May be null if not yet approved in onboarding workflow."},"kyc_status":{"type":"string","description":"Seller KYC identity business state, e.g., 'pending', 'verified', 'denied'. For onboarding and compliance analytics."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the seller account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp the seller account was last changed."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Logical deletion timestamp, present if seller account is deleted/withdrawn for audit/compliance. Otherwise null."}},"required":["id","shopping_mall_section_id","profile_name","status","kyc_status","created_at","updated_at"],"description":"Summary view for shopping mall seller accounts, suitable for platform admin, onboarding review, or seller search interfaces. Includes only workflow, contact, and basic audit fields—never sensitive credentials or deep business associations. Backed by shopping_mall_sellers table; adheres to summary DTO pattern for search-indexed entities."},"IShoppingMallAdmin.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator login email. Unique across all admins. Must be a valid business email address and is required for authentication as the primary credential."},"password":{"type":"string","description":"Administrator's raw password to be set on registration. Will be securely hashed and stored as password_hash. Plaintext password is only accepted here for registration and login flows."},"name":{"type":"string","description":"Full legal name of the administrator. Used for compliance, logging, and business context. Required field."}},"required":["email","password","name"],"description":"Payload for registering a new admin. Requires email, raw password (to be hashed), and full name. Only accepts fields present in the admin schema and is used for join/registration endpoints."},"IShoppingMallAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator login email. Must correspond to a registered admin account."},"password":{"type":"string","description":"Raw password for authentication. Compared securely to stored hash."}},"required":["email","password"],"description":"Credentials for admin login. Requires email and password. Password is securely checked against the stored hashed value."},"IShoppingMallAdmin.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Long-lived JWT refresh token for session renewal. Must be a valid, previously issued token that has not expired or been revoked."}},"required":["refreshToken"],"description":"Payload to refresh session tokens for an admin using an existing valid refresh token. Used as body for session renewal endpoints."},"IShoppingMallAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated admin user."},"email":{"type":"string","format":"email","description":"Administrator's email address linked to the authorized session."},"name":{"type":"string","description":"Full name of the administrator returned in the authorized session."},"status":{"type":"string","description":"Admin account state (active, suspended, pending, withdrawn, etc)."},"kyc_status":{"type":"string","description":"KYC/identity verification status (pending, verified, denied, etc)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (UTC ISO-8601)."},"updated_at":{"type":"string","format":"date-time","description":"Record last modification timestamp (auto-update)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for audit/compliance. Null if not deleted."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","name","status","kyc_status","created_at","updated_at","token"],"description":"Authorization result for admin join/login/refresh endpoints. Contains admin identity and tokens following IAuthorized pattern. Token property uses standard IAuthorizationToken."},"IShoppingMallChannel.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for the paginated shopping mall channel search results. Optional; defaults to 1. Used for backend pagination and UI navigation."},"limit":{"type":"integer","description":"Limit of records per page for pagination. Optional; defaults to a system or API maximum according to business policy."},"search":{"type":"string","description":"Free-text search query for filtering shopping mall channels. Typically applied to code, name, or description fields using 'contains' or regex matching."},"code":{"type":"string","description":"Filter by channel's unique business code. If specified, restricts results to channels matching this code exactly."},"name":{"type":"string","description":"Filter by human-readable name of the channel. Performs partial or case-insensitive matching to allow UI-driven search."},"description":{"type":"string","description":"Filter by channel description. Supports advanced/query searching within the description text."}},"required":[],"description":"Search and filter request DTO for shopping mall channels.\n\nEncapsulates all supported filtering, search, and pagination options as used in PATCH /shoppingMall/admin/channels. Optional fields allow flexible querying of shopping mall channels for admin and backoffice UI."},"IShoppingMallChannel":{"type":"object","x-samchon-prisma-schema":"shopping_mall_channels","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUUID uniquely identifying the shopping mall channel entity, e.g., 'f5cd735a-935f-4d1d-801e-24854bb4b4e0'."},"code":{"type":"string","description":"Unique business code for the channel (e.g., 'main', 'korea', 'brandX'). Used for routing, logical partitioning, and channel-specific business rule scoping. Must be unique within the database."},"name":{"type":"string","description":"Human-readable channel name or business label. Used for admin UI display, configuration, and external communications referencing this channel."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"General description and business context of the channel. Optional; supports Markdown or rich text. Used to provide background for administrators and business logic."},"created_at":{"type":"string","format":"date-time","description":"Channel creation time in timezone-aware ISO 8601 format (e.g., '2024-03-01T09:00:00.000Z'). Reflects initial registration timestamp; read-only."},"updated_at":{"type":"string","format":"date-time","description":"Last update time of the channel info. Always in timezone-aware ISO 8601 format. Reflects latest metadata update as of write."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Channel deletion time if this entity is soft deleted, according to system compliance and audit rules. Null if the channel is not deleted. Used for logical delete and audit trails."}},"required":["id","code","name","created_at","updated_at"],"description":"Complete entity profile for shopping mall channel (shopping_mall_channels table).\n\nMatches all defined fields in the Prisma schema for shopping mall channels, including primary key, business code, display name, description, and system audit fields for creation, updates, and logical deletion. This structure guarantees forward and backward compatibility for admin, operations, and audit APIs."},"IShoppingMallChannel.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_channels","properties":{"code":{"type":"string","description":"Business-unique code for the new channel (e.g. 'main', 'brandX'). Must be unique across all records and will be used for API routing, business logic scoping, and UI display. Required."},"name":{"type":"string","description":"Display/business name for the channel. Human-readable and required for all new channel creation. Used in admin UI and communications."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business context, rationale, or Markdown-formatted info, shown in admin panels. Not required; can be provided for richer channel documentation."}},"required":["code","name"],"description":"DTO for creating a new shopping mall channel (POST /shoppingMall/admin/channels).\n\nContains required and optional fields for registering a new channel in the system; directly maps to the Prisma shopping_mall_channels model. Audit fields such as id, created_at, etc. are system-generated and excluded from the create payload."},"IShoppingMallChannel.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_channels","properties":{"code":{"type":"string","description":"If provided, replaces the existing business code of the channel. Must remain unique within the database and be non-nullable. Used for API routing, channel logic, and business context."},"name":{"type":"string","description":"Updates the display/business name for the channel. Used for UI display, admin changes, and business logic."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updates or clears the channel's richtext/markdown description. Null clears the current description."}},"required":[],"description":"DTO for updating an existing shopping mall channel entity (PUT /shoppingMall/admin/channels/{channelId}).\n\nAllows partial or full updates to mutable channel fields (code, name, description). Audit/system fields (created_at, updated_at, deleted_at, id) are excluded from client-supplied input and managed by the backend layer. Enforces data integrity and audit traceability."},"IShoppingMallSection.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for section listing. Used for pagination control.","minimum":1},"limit":{"type":"integer","description":"Number of records to return per page. Helps manage pagination and performance constraints.","minimum":1},"sort":{"type":"string","description":"Field to sort the list of sections by. May support values like 'display_order', 'created_at', or 'name'. Optional; default depends on backend implementation."},"order":{"oneOf":[{"const":"asc","description":"Order direction for sorting. Accepts 'asc' (ascending) or 'desc' (descending). Defaults to 'asc' if not specified."},{"const":"desc","description":"Order direction for sorting. Accepts 'asc' (ascending) or 'desc' (descending). Defaults to 'asc' if not specified."}],"description":"Order direction for sorting. Accepts 'asc' (ascending) or 'desc' (descending). Defaults to 'asc' if not specified."},"name":{"type":"string","description":"Filter for section name. Partial string match for searching by display name. Optional."},"code":{"type":"string","description":"Filter for section code. Supports exact or partial string search. Optional."},"display_order":{"type":"integer","description":"Filter for section display order. Allows listing sections by a specific order index. Optional."},"status":{"type":"string","description":"Filter by section business status (e.g., active, deleted, paused). Value set is platform-defined and optional."},"created_at_start":{"type":"string","format":"date-time","description":"Filter for sections created after this timestamp (inclusive). ISO 8601 format. Optional."},"created_at_end":{"type":"string","format":"date-time","description":"Filter for sections created before this timestamp (inclusive). ISO 8601 format. Optional."},"updated_at_start":{"type":"string","format":"date-time","description":"Filter for sections updated after this timestamp (inclusive). ISO 8601 format. Optional."},"updated_at_end":{"type":"string","format":"date-time","description":"Filter for sections updated before this timestamp (inclusive). ISO 8601 format. Optional."}},"required":[],"description":"Request parameters for searching, filtering, and paginating shopping mall sections. Supports advanced query scenarios such as searching by section name, code, display order, and date windows. Controls sort and pagination; designed for admin UI or channel configuration workflows. All fields are optional to maximize query flexibility."},"IShoppingMallSection":{"type":"object","x-samchon-prisma-schema":"shopping_mall_sections","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for the shopping mall section."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Belonged channel's unique identifier (foreign key to shopping_mall_channels.id)."},"code":{"type":"string","description":"Unique section code, scoped to channel. Used for business identification and routing (e.g., 'home', 'event', 'bestseller')."},"name":{"type":"string","description":"Section display name as rendered in admin UI or customer application."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short description of the section's purpose. Nullable. Used for business context or UI hints."},"display_order":{"type":"integer","description":"Display order index for listing sections within a channel. Used to control UI position and business prioritization."},"created_at":{"type":"string","format":"date-time","description":"Section creation timestamp (UTC, ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Time of last update to this section (UTC, ISO 8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Section deletion time (soft delete); set if section is logically removed but not purged. Null if active. Used for audit and evidence retention."}},"required":["id","shopping_mall_channel_id","code","name","display_order","created_at","updated_at"],"description":"Defines a logical section within a shopping mall channel (e.g., 'Best Deal', 'International'). Includes unique identifier, linkage to parent channel, business code, display name, description, sort order, and audit fields. Supports soft deletion via 'deleted_at'. Follows Prisma shopping_mall_sections schema. Used in listing, editing, and management endpoints."},"IShoppingMallSection.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_sections","properties":{"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel under which the section is being created. Must be an existing shopping_mall_channels.id. Required."},"code":{"type":"string","description":"Section code unique within this channel. Used for business identification and routing."},"name":{"type":"string","description":"Section display name for administration and storefront UI."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description of the section's purpose or business context. Nullable."},"display_order":{"type":"integer","description":"Integer representing order for UI display. Used to determine list position among sections in a channel."}},"required":["shopping_mall_channel_id","code","name","display_order"],"description":"Fields required to create a new shopping mall section (entity in shopping_mall_sections Prisma model). Required: channel reference, code, name, and display_order; description is optional. Section creation is the primary step towards organizing the structure of a channel and supports virtual corners and merchandising logic."},"IShoppingMallSection.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_sections","properties":{"code":{"type":"string","description":"New or updated section code to uniquely identify the section within a channel. Optional; must remain unique if changed."},"name":{"type":"string","description":"New or updated display name for the section. Optional."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"New or updated section description. Nullable and optional."},"display_order":{"type":"integer","description":"Updated display order for the section within its channel. Optional; controls UI sorting and business priority."}},"required":[],"description":"DTO for updating properties of an existing shopping mall section (shopping_mall_sections table row). All fields are optional: code, name, description, and display_order. Used in PATCH/PUT endpoints to change business attributes, labels, or UI arrangement of sections within a shopping mall channel without affecting audit fields or channel association."},"IShoppingMallChannelCategory.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination: must be an unsigned integer (>=1), default 1.","minimum":1},{"type":"null"}],"description":"Page number for results pagination. Must be a positive integer. Defaults to first page if omitted."},"limit":{"oneOf":[{"type":"integer","description":"Number of records per page; unsigned integer, suggested default 100. Recommended business limits apply.","minimum":1},{"type":"null"}],"description":"Max number of records per page in paginated results. Minimum 1; system default 100. For admin requests; may be capped at business policy upper bound."},"sortBy":{"oneOf":[{"const":"created_at","description":"Sorting column. Allowed: 'created_at', 'name', 'display_order'. Custom implementations may add more fields. Case-sensitive."},{"const":"name","description":"Sorting column. Allowed: 'created_at', 'name', 'display_order'. Custom implementations may add more fields. Case-sensitive."},{"const":"display_order","description":"Sorting column. Allowed: 'created_at', 'name', 'display_order'. Custom implementations may add more fields. Case-sensitive."}],"description":"Sorting column. Allowed: 'created_at', 'name', 'display_order'. Custom implementations may add more fields. Case-sensitive."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sorting direction; must be 'asc' or 'desc'. Default 'asc'."},{"const":"desc","description":"Sorting direction; must be 'asc' or 'desc'. Default 'asc'."}],"description":"Sorting direction; must be 'asc' or 'desc'. Default 'asc'."},"search":{"type":"string","description":"General search keyword for name or description. Enables full-text or fuzzy match on category name/description."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter for direct child categories under the given parent_id."},{"type":"null"}],"description":"UUID of parent category (optional; filters for child categories under this parent). Null for top-level categories."},"code":{"type":"string","description":"Exact business code filter (per-schema unique per channel)."},"name":{"type":"string","description":"Filter for categories by (partial or full) channel-specific name."},"status":{"type":"string","description":"Custom status or visibility code filter if supported by business logic or extensions (optional)."}},"description":"Filtering, sorting, and pagination parameters for channel-specific category list retrieval in shopping_mall_channel_categories.\nThis request DTO enables advanced admin UI, channel editor, or catalog management with support for tree queries, text search, and business code lookup. See shopping_mall_channel_categories schema docs for allowed properties.","required":[]},"IShoppingMallChannelCategory":{"type":"object","x-samchon-prisma-schema":"shopping_mall_channel_categories","properties":{"id":{"type":"string","format":"uuid","description":"Primary key; unique UUID for the channel category."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Foreign key to parent channel; UUID of the shopping_mall_channels record."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Parent category UUID (nullable; null for top-level categories)."},{"type":"null"}],"description":"UUID of the parent category for nesting; nullable for root categories. Links recursive hierarchy."},"code":{"type":"string","description":"Unique business code scoped to channel (and optionally parent). Used in routing, logic, and admin UI."},"name":{"type":"string","description":"Human-readable category name for product classification and admin operations."},"description":{"oneOf":[{"type":"string","description":"Long-form description of this category (optional)."},{"type":"null"}],"description":"Optional documentation or display details for the category. Supports Markdown/HTML."},"display_order":{"type":"integer","description":"Integer indicating UI display order within parent/channel. Lower values display first."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) of creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) of most recent update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp; null when active."},{"type":"null"}],"description":"If present, marks entity as logically deleted for audit/compliance reasons."}},"description":"Represents a single hierarchical category (node) in a shopping mall channel category tree. Used for product classification, merchandising, and campaign logic. Fully defined by shopping_mall_channel_categories schema. All fields must correspond exactly to DB columns; verify timestamps per schema.","required":["id","shopping_mall_channel_id","code","name","display_order","created_at","updated_at"]},"IShoppingMallChannelCategory.ICreate":{"type":"object","properties":{"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"UUID of the parent channel in which this category is to be created."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of parent category for hierarchy (nullable for root-level)."},{"type":"null"}],"description":"Parent category UUID for hierarchical nesting (null for root)."},"code":{"type":"string","description":"Unique category code for API, business, and admin identification. Must be unique within channel."},"name":{"type":"string","description":"Human-friendly display name for the category. Will be used in admin UI, API, and sometimes end-user display."},"description":{"oneOf":[{"type":"string","description":"Detailed description or Markdown of business/category purpose (optional)."},{"type":"null"}],"description":"(Optional) Extended documentation or display-purpose description. Markdown/HTML accepted."},"display_order":{"type":"integer","description":"Order among sibling categories in the same parent; integer—lower = higher (0,1,2,...). Must be unique per-sibling group."}},"description":"DTO for registering (creating) a new category node in a channel. All required fields must map to shopping_mall_channel_categories Prisma model, and additional fields must correspond to valid columns. See schema for parent linkage, code uniqueness constraints, and admin UI requirements.","required":["shopping_mall_channel_id","code","name","display_order"]},"IShoppingMallChannelCategory.IUpdate":{"type":"object","properties":{"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"New parent category; nullable for reparenting to root."},{"type":"null"}],"description":"Change the parent category in category tree (nullable = move to root). Must not create cycles. Optional."},"code":{"type":"string","description":"Update business code (must remain unique in channel). Optional."},"name":{"type":"string","description":"Update category display name (optional)."},"description":{"oneOf":[{"type":"string","description":"Update long description (optional)."},{"type":"null"}],"description":"Change extended description (Markdown/HTML). Optional."},"display_order":{"type":"integer","description":"Change UI order within parent; unique among siblings. Optional."}},"description":"DTO for editing existing categories by admin or privileged user. Only mutable properties from shopping_mall_channel_categories are allowed (must exist in schema). Null values may be supplied for nullable fields (e.g., to reparent as root). Required fields per Prisma model are omitted here (partial for update). Cyclic parent assignment must be prevented by service layer. See Prisma schema for details.","required":[]},"IShoppingMallConfiguration.IRequest":{"type":"object","properties":{"shopping_mall_channel_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter to retrieve only configuration records scoped to a specific channel. References the shopping_mall_channels table primary key. If omitted, results may include both global and channel-specific records."},"key":{"type":"string","description":"Filter for configuration records matching this business-level key (e.g., 'feature_flag_shipping', 'legal_policy_en'). Partial matches supported for search. Used to narrow down results to relevant configuration categories."},"revision":{"type":"integer","description":"Optional filter for configuration records with a specific revision/version number. Used to audit or retrieve a particular snapshot in time for configuration records."},"description":{"type":"string","description":"Filter on the description field for full-text search across configuration explanations or business context annotations."},"created_at_from":{"type":"string","format":"date-time","description":"Filter to return only configuration records created after this ISO-8601 UTC timestamp."},"created_at_to":{"type":"string","format":"date-time","description":"Filter to return only configuration records created before this ISO-8601 UTC timestamp."},"updated_at_from":{"type":"string","format":"date-time","description":"Filter to return only configuration records updated after this ISO-8601 UTC timestamp."},"updated_at_to":{"type":"string","format":"date-time","description":"Filter to return only configuration records updated before this ISO-8601 UTC timestamp."},"deleted":{"type":"boolean","description":"If true, include logically deleted (soft-deleted) configuration records (where deleted_at is set). If false or omitted, only return active/non-deleted records."},"page":{"type":"integer","description":"Pagination: The page number of results to return. Must be a positive integer."},"limit":{"type":"integer","description":"Pagination: Maximum number of results per page. Typical default is 50-100; higher values may be restricted for performance."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort field for result ordering. Enum: 'created_at', 'updated_at', 'revision', 'key'."},{"const":"updated_at","description":"Sort field for result ordering. Enum: 'created_at', 'updated_at', 'revision', 'key'."},{"const":"revision","description":"Sort field for result ordering. Enum: 'created_at', 'updated_at', 'revision', 'key'."},{"const":"key","description":"Sort field for result ordering. Enum: 'created_at', 'updated_at', 'revision', 'key'."}],"description":"Sort field for result ordering. Enum: 'created_at', 'updated_at', 'revision', 'key'."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction for ordering by sort_by field. Enum: 'asc', 'desc', default is 'desc' (most recent first)."},{"const":"desc","description":"Sort direction for ordering by sort_by field. Enum: 'asc', 'desc', default is 'desc' (most recent first)."}],"description":"Sort direction for ordering by sort_by field. Enum: 'asc', 'desc', default is 'desc' (most recent first)."}},"required":[],"description":"Request structure for filtering, searching, and paginating configuration records in shopping_mall_configurations. Used by admin users or system UIs to efficiently query global and channel-specific config with fine-grained search and sorting."},"IShoppingMallConfiguration":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for configuration record. Universally unique and references a single versioned configuration entity."},"shopping_mall_channel_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If present, indicates which shopping mall channel this configuration is scoped to. Null indicates a global configuration entry. Foreign key to shopping_mall_channels table."},"key":{"type":"string","description":"Business-level key or identifier for this configuration. Example: 'feature_flag_shipping', 'legal_policy_en', 'default_currency'."},"value":{"type":"string","description":"The configuration's value as a text/blob. May be JSON, plain text, or rendered HTML. The format depends on the configuration key and is determined by business logic or frontend expectation."},"revision":{"type":"integer","description":"Sequential revision/version number for this configuration entry. Incremented on every value update, allowing for snapshot history and rollback."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional explanation or business context of the configuration value. Used for documentation, business audit, or admin UI display."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO-8601, UTC) when this configuration record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO-8601, UTC) when this configuration record was last modified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. If set, this record is logically deleted, retained for audit and compliance, but omitted from active business operations."}},"required":["id","key","value","revision","created_at","updated_at"],"description":"Represents a configurable business or platform setting, scoped globally or to a particular channel. Supports versioning/auditing, soft delete, and descriptive business/explanation metadata. Matches shopping_mall_configurations Prisma schema columns."},"IShoppingMallConfiguration.ICreate":{"type":"object","properties":{"shopping_mall_channel_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional/nullable) Channel ID for channel-scoped configuration (foreign key to shopping_mall_channels.id). If omitted or null, configuration is global."},"key":{"type":"string","description":"Unique business-level identifier for the configuration record. Must not duplicate an existing key within the same channel (if present)."},"value":{"type":"string","description":"The configuration's initial value. Accepts string, JSON, or text as determined by business logic."},"revision":{"type":"integer","description":"Initial revision number for the configuration. Usually set to 1 on creation."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business/administrative explanation of the configuration's business meaning."}},"required":["key","value","revision"],"description":"DTO for creating (inserting) a new configuration record in shopping_mall_configurations. Must populate required columns and optionally provide channel association and business description."},"IShoppingMallConfiguration.IUpdate":{"type":"object","properties":{"shopping_mall_channel_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional/nullable) If present, updates the channel-scope of this configuration record."},"key":{"type":"string","description":"(Optional) If provided, updates the configuration's key/identifier. Must maintain overall key uniqueness within channel/business scope."},"value":{"type":"string","description":"(Optional) If provided, updates the configuration value. Allows changes to arbitrary text/JSON content, depending on business policy."},"revision":{"type":"integer","description":"(Optional) If provided, sets the new revision/version number for this configuration entry. Should be incremented in business logic."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional admin/business explanation of the configuration value or its change."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional for admin/Audit use) If present, marks the configuration as logically deleted with a UTC timestamp. Null value can un-delete."}},"required":[],"description":"DTO for updating an existing configuration record in shopping_mall_configurations. All properties optional, only present fields will be applied. Immutable fields (id, created_at) cannot be updated from this DTO."},"IShoppingMallCustomer.IRequest":{"type":"object","properties":{"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"The unique identifier of the channel this customer is associated with. Used for scoping customer queries to a particular storefront, brand, or business context."},"email":{"type":"string","description":"Customer email address for search/filter. Partial or full match supported. Unique per channel in actual customer records."},"name":{"type":"string","description":"Customer's legal or preferred name for full-text search."},"status":{"type":"string","description":"Account status filter, e.g., active, pending, suspended, withdrawn. May accept one, many, or all values, according to business rules."},"kyc_status":{"type":"string","description":"KYC/identity verification filter, e.g., pending, verified, denied. Used to find customers by their identity compliance progress."},"created_after":{"type":"string","format":"date-time","description":"Return customers created after this timestamp."},"created_before":{"type":"string","format":"date-time","description":"Return customers created before this timestamp."},"deleted":{"type":"boolean","description":"If true, include only soft-deleted records. If false, exclude deleted. If absent, ignore deletion in filtering."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination, starts at 1."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Records per page. Defaults to 100 if not specified. Max 200."},"sort":{"type":"string","description":"Sorting specification, e.g., 'created_at desc', 'name asc'. Business logic may support multiple fields separated by comma."}},"required":[],"description":"Search filter and pagination options for retrieving shopping mall customer profiles. All fields are optional in advanced search use-cases."},"IShoppingMallCustomer":{"type":"object","x-samchon-prisma-schema":"shopping_mall_customers","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID for the customer record."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"References the unique ID of the channel the customer is registered with."},"email":{"type":"string","description":"Customer's unique email per channel. Used for login and communication."},"phone":{"oneOf":[{"type":"string","description":"Optional mobile/contact phone number if provided."},{"type":"null"}],"description":"Optional mobile/contact phone number if provided."},"name":{"type":"string","description":"Customer's legal or preferred name."},"status":{"type":"string","description":"Account status, e.g., active, pending, suspended, withdrawn, etc."},"kyc_status":{"type":"string","description":"KYC/identity verification status: pending, verified, denied, etc."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the customer record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the customer record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion time for audit/compliance. Null if not deleted."}},"required":["id","shopping_mall_channel_id","email","name","status","kyc_status","created_at","updated_at"],"description":"Full customer profile as stored in the shopping_mall_customers table. All business and audit fields included per schema."},"IShoppingMallCustomer.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_customers","properties":{"email":{"type":"string","description":"(Optional) New email address for the customer. Must be unique per channel when updating."},"phone":{"oneOf":[{"type":"string","description":"(Optional) Updated phone/mobile number."},{"type":"null"}],"description":"(Optional) Updated phone/mobile number."},"name":{"type":"string","description":"(Optional) Legal or preferred name update."},"status":{"type":"string","description":"(Optional) Update for the customer's account status."},"kyc_status":{"type":"string","description":"(Optional) Update for the customer's KYC verification status."}},"required":[],"description":"Fields permitted for update on shopping_mall_customers. All properties optional; only supply those to be modified. System-managed audit fields must not be included here."},"IShoppingMallSeller.IRequest":{"type":"object","properties":{"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Filter sellers by the owning/home section they belong to."},"profile_name":{"type":"string","description":"Seller's display name or shop title. Supports partial or full-text search."},"status":{"type":"string","description":"Account status filter, e.g., pending, active, suspended, rejected, withdrawn."},"kyc_status":{"type":"string","description":"KYC/identity state filter, e.g., pending, verified, denied."},"approval_after":{"type":"string","format":"date-time","description":"Return sellers approved after this timestamp."},"approval_before":{"type":"string","format":"date-time","description":"Return sellers approved before this timestamp."},"created_after":{"type":"string","format":"date-time","description":"Return sellers created after this timestamp."},"created_before":{"type":"string","format":"date-time","description":"Return sellers created before this timestamp."},"deleted":{"type":"boolean","description":"If true, show only deleted (soft-deleted) sellers. If false, exclude deleted. If absent, don't filter by deletion."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (starts at 1)."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Number of results per page. Max 200, default business policy is 100."},"sort":{"type":"string","description":"Sort specification, e.g., 'created_at desc', 'profile_name asc'."}},"required":[],"description":"Search/pagination/filter DTO for listing shopping mall sellers. All fields are optional; supply any number for targeted review."},"IShoppingMallSeller":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\nUnique identifier for the seller entity."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Base customer record {@link shopping_mall_customers.id} for permission inheritance and login linkage."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Home section/shop for the seller {@link shopping_mall_sections.id}. Used for channel/section scoping."},"profile_name":{"type":"string","description":"Seller's public display name or shop title."},"status":{"type":"string","description":"Seller approval/lifecycle status (pending, active, suspended, rejected, withdrawn)."},"approval_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime seller was formally approved. Null if not yet approved."},"kyc_status":{"type":"string","description":"KYC/identity check status (pending, verified, denied, etc)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (UTC ISO-8601)."},"updated_at":{"type":"string","format":"date-time","description":"Record last modification timestamp (auto-update)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for audit/compliance. Null if not deleted."}},"required":["id","shopping_mall_customer_id","shopping_mall_section_id","profile_name","status","kyc_status","created_at","updated_at"],"description":"Seller account information.\nIdentifies vendors with permissions to list/manage products and access sales analytics for their own goods.\nInherits all customer fields plus seller-specific status, escalation, verification, and profile meta.\nLinks to customer entity, has audit/snapshot, and supports soft delete."},"IShoppingMallSeller.IUpdate":{"type":"object","properties":{"profile_name":{"type":"string","description":"Seller's public display name or shop title."},"status":{"type":"string","description":"Seller approval/lifecycle status (pending, active, suspended, rejected, withdrawn)."},"approval_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime seller was formally approved. Null if not yet approved."},"kyc_status":{"type":"string","description":"KYC/identity check status (pending, verified, denied, etc)."}},"required":[],"description":"Update DTO for seller.\nIncludes fields permitted to be updated for seller profile, status, approval, or KYC state.\nAll fields are optional; only include those being changed."},"IShoppingMallAdmin.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number of the results to retrieve (pagination)."},"limit":{"type":"integer","minimum":1,"default":20,"description":"Number of results per page (pagination)."},"status":{"type":"string","description":"Filter by admin status (active, suspended, pending, withdrawn, etc)."},"kyc_status":{"type":"string","description":"Filter by KYC/identity verification status (pending, verified, denied, etc)."},"email":{"type":"string","description":"Search or filter by admin email address."},"name":{"type":"string","description":"Search or filter by admin full legal name."},"created_from":{"type":"string","format":"date-time","description":"Filter for admins created after this datetime (inclusive)."},"created_to":{"type":"string","format":"date-time","description":"Filter for admins created before this datetime (inclusive)."}},"required":[],"description":"Request/query DTO for administration search.\nSupports advanced filtering, pagination, and search for admin accounts."},"IShoppingMallAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\nUnique identifier for the admin entity."},"email":{"type":"string","description":"Admin login email. Unique across all admins (no duplication allowed)."},"name":{"type":"string","description":"Full legal name (compliance, logging, and business context)."},"status":{"type":"string","description":"Admin account state (active, suspended, pending, withdrawn, etc)."},"kyc_status":{"type":"string","description":"KYC/identity verification status (pending, verified, denied, etc)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (UTC ISO-8601)."},"updated_at":{"type":"string","format":"date-time","description":"Record last modification timestamp (auto-update)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for audit/compliance. Null if not deleted."}},"required":["id","email","name","status","kyc_status","created_at","updated_at"],"description":"Platform administrator profiles with role-based privilege separation.\nControls all system-level configuration, moderation, and audit features.\nCore entity for admin authentication, KYC validation, and independent login.\nLinked to escalation, audit, and admin snapshot tables."},"IShoppingMallAdmin.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_admins","properties":{"email":{"type":"string","format":"email","description":"Admin login email address. Must be unique across all admins. Used for authentication and system notifications. Referenced in the shopping_mall_admins Prisma model as the primary login identifier.\n\nChanging this value updates the admin's primary contact and login credential. Format should match a valid business email pattern. Uniqueness is enforced at the DB level."},"password_hash":{"type":"string","description":"Hashed password for admin authentication (never plain text). All password changes must be securely hashed before updating this field. Must match strong cryptographic password hash standards (e.g., bcrypt, argon2).\n\nThis property aligns directly with security requirements and should never expose the actual password value in any request or response."},"name":{"type":"string","description":"The admin's full legal name, used for identity, compliance, logging, and business context. This field appears on audit trails and in admin-facing UIs. Must follow the naming conventions established by business requirements. See shopping_mall_admins.name in the schema."},"status":{"type":"string","description":"Admin account state (active, suspended, pending, withdrawn, etc). Must be one of the business-defined status codes as described in shopping_mall_admins schema. Controls admin's platform privileges and visibility."},"kyc_status":{"type":"string","description":"KYC (Know Your Customer) / identity verification state: (e.g., pending, verified, denied). Follows legal/regulatory requirements for compliance tracking and must match the allowed status codes in the schema. See shopping_mall_admins.kyc_status for allowed values."}},"required":["email","name","status","kyc_status"],"description":"Update payload for administrator account fields. Updates to email, name, status, KYC and password_hash are permitted; all changes are fully tracked. Property descriptions reference shopping_mall_admins Prisma columns."},"IShoppingMallCustomerIdentity.IRequest":{"type":"object","properties":{"identity_type":{"type":"string","description":"Filter by identity type (e.g., government_id, passport, driver's_license, resident_number). Must match types from the database. Optional for filtering. Reference: shopping_mall_customer_identities.identity_type."},"status":{"type":"string","description":"Filter by identity verification status (e.g., pending, verified, rejected, expired). Matches allowed values in the shopping_mall_customer_identities schema. Optional for filtering."},"issuer":{"type":"string","description":"Filter results by issuer (e.g., government agency, authority, or business unit that issued the ID). Optional. shopping_mall_customer_identities.issuer."},"verified_at_start":{"type":"string","format":"date-time","description":"Start of date range filter for verified_at timestamp. Returns identities verified on or after this ISO8601 timestamp. Optional."},"verified_at_end":{"type":"string","format":"date-time","description":"End of date range filter for verified_at timestamp. Returns identities verified on or before this ISO8601 timestamp. Optional."},"page":{"type":"integer","description":"Page number for pagination. Optional."},"limit":{"type":"integer","description":"Number of results per page for pagination. Optional."}},"required":[],"description":"Advanced search and filter parameters for listing customer identity verification records (KYC). All fields are optional and can be combined for complex filter conditions."},"IShoppingMallCustomerIdentity":{"type":"object","x-samchon-prisma-schema":"shopping_mall_customer_identities","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the customer identity record. Matches shopping_mall_customer_identities.id. Required for read/update operations."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Foreign key to the customer owning this identity record. Referenced from shopping_mall_customers.id. Required for linkage and business context."},"identity_type":{"type":"string","description":"Type of identity: government_id, passport, driver's_license, resident_number, and more as required by regional compliance. Must match allowable types in the shopping_mall_customer_identities schema. See documentation for values and constraints."},"identity_value":{"type":"string","description":"Hashed or encrypted value of the identifier, as stored for privacy and KYC. Typically never exposed raw to users—used in compliance, regulated validation flows, and audit. (shopping_mall_customer_identities.identity_value in schema)."},"issuer":{"type":"string","description":"The authority or source who issued this identity document. Optional in compliance with regional norms (e.g., government, issuer agency). See shopping_mall_customer_identities.issuer. Nullable as per schema."},"issue_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date/time when the identity or ID/proof was issued by the authority. Optional. Must be valid ISO8601 timestamp if present; nullable if not known. See shopping_mall_customer_identities.issue_date."},"verified_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when this identity record was conclusively verified, either by staff or automated model. Optional. Valid ISO8601, nullable. shopping_mall_customer_identities.verified_at."},"status":{"type":"string","description":"Current verification status of this identity: pending, verified, rejected, expired, etc. Must match values defined in shopping_mall_customer_identities.status. Used for workflow gating, business logic, and compliance."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp in UTC ISO8601 format. Set at creation; immutable. Schema column: shopping_mall_customer_identities.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Record last modification timestamp (auto-update); updated on changes to this record. UTC ISO8601. Schema column: shopping_mall_customer_identities.updated_at."}},"required":["id","shopping_mall_customer_id","identity_type","identity_value","status","created_at","updated_at"],"description":"Customer identity verification record (KYC) entity. Maps to a single record in shopping_mall_customer_identities, capturing all business fields, verification data, and audit metadata according to DB schema."},"IShoppingMallCustomerIdentity.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_customer_identities","properties":{"identity_type":{"type":"string","description":"Type of identity to update (e.g., government_id, passport, driver's_license, resident_number). Must match allowed values. Reference: shopping_mall_customer_identities.identity_type."},"identity_value":{"type":"string","description":"Hashed or encrypted identity value for privacy. Updates this identifier in compliance situations. Reference: shopping_mall_customer_identities.identity_value."},"issuer":{"type":"string","description":"Updated issuing authority for this identity (optional). Reference: shopping_mall_customer_identities.issuer. Nullable."},"issue_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Change or set the identity's issue date (optional); requires ISO8601 if set, nullable if omitted. Reference: shopping_mall_customer_identities.issue_date."},"verified_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Set or clear the verified_at timestamp (when identity was confirmed). ISO8601, nullable. Reference: shopping_mall_customer_identities.verified_at."},"status":{"type":"string","description":"Update the current verification status: pending, verified, rejected, expired, etc. Reference: shopping_mall_customer_identities.status."}},"required":["status"],"description":"Update payload for editing an existing customer identity (KYC) record. All fields except status are optional in request. References shopping_mall_customer_identities Prisma column documentation."},"IShoppingMallExternalAccount.IRequest":{"type":"object","properties":{"provider":{"type":"string","description":"OAuth provider name. Defines the external identity provider (e.g., google, apple, kakao, naver, etc)."},"status":{"type":"string","description":"Account status (active, revoked, expired, pending)."},"external_user_id":{"type":"string","description":"External provider's user identifier (subject/UID)."},"linked_at_start":{"type":"string","format":"date-time","description":"Start of date range filter (inclusive) for linked_at. ISO 8601 format."},"linked_at_end":{"type":"string","format":"date-time","description":"End of date range filter (inclusive) for linked_at. ISO 8601 format."},"page":{"type":"integer","minimum":1,"description":"Results page number for pagination (1-based index)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum records per page for pagination."},"sort_by":{"type":"string","description":"Sort field (e.g., linked_at, status, provider)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order (asc/desc) for the selected sort_by field."},{"const":"desc","description":"Sort order (asc/desc) for the selected sort_by field."}],"description":"Sort order (asc/desc) for the selected sort_by field."}},"required":[],"description":"Advanced search/filter/pagination criteria for retrieving external social/OAuth accounts associated with a customer. All properties are optional and used for query construction."},"IShoppingMallExternalAccount":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier of the external account association."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Linked customer ID (owner of this social/OAuth account association)."},"provider":{"type":"string","description":"OAuth/social provider identifier (e.g., google, apple, kakao, naver, etc)."},"external_user_id":{"type":"string","description":"Unique subject/account ID from the provider, e.g., openid subject."},"linked_at":{"type":"string","format":"date-time","description":"Datetime when this external account was linked to the customer."},"status":{"type":"string","description":"Account linkage status—active, revoked, expired, pending, etc."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp. ISO 8601."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp. ISO 8601."}},"required":["id","shopping_mall_customer_id","provider","external_user_id","linked_at","status","created_at","updated_at"],"description":"Represents an external OAuth/social account linkage for a user. Fields mirror shopping_mall_external_accounts Prisma schema. This is a response/detail type; all fields are guaranteed to exist."},"IShoppingMallExternalAccount.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Updated status for the account linkage (e.g., active, revoked, expired, pending)."},"linked_at":{"type":"string","format":"date-time","description":"(Admin only) Overwrite linkage timestamp. ISO 8601. Typically not provided except for compliance data correction."}},"required":[],"description":"Payload to update an external account's metadata. May be used to set the status (revoked, active, expired, etc.) or adjust linkage time. Only mutable fields are included."},"IShoppingMallAdminRoleEscalation.IRequest":{"type":"object","properties":{"escalation_type":{"type":"string","description":"Type of escalation, e.g., customer_to_admin, seller_to_admin, privilege_update, etc."},"status":{"type":"string","description":"Escalation status to filter on (pending, approved, rejected, cancelled, etc)."},"requestor_id":{"type":"string","format":"uuid","description":"Filter by user/customer/seller requesting the escalation."},"reviewed_by_id":{"type":"string","format":"uuid","description":"Filter by reviewer/admin who processed the escalation."},"created_at_start":{"type":"string","format":"date-time","description":"Start of escalation creation time range (inclusive). ISO 8601."},"created_at_end":{"type":"string","format":"date-time","description":"End of escalation creation time range (inclusive). ISO 8601."},"page":{"type":"integer","minimum":1,"description":"Results page number for pagination (1-based)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum records per page."},"sort_by":{"type":"string","description":"Sort field (e.g., created_at, status, escalation_type)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order (asc or desc)."},{"const":"desc","description":"Sort order (asc or desc)."}],"description":"Sort order (asc or desc)."}},"required":[],"description":"Advanced filter/search/pagination criteria for admin role escalation requests. All fields are optional for query flexibility. Supports status, type, actor, reviewer, and time window filtering."},"IShoppingMallAdminRoleEscalation":{"type":"object","x-samchon-prisma-schema":"shopping_mall_admin_role_escalations","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for the admin role escalation request. UUID format as per Prisma and system standards."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"The admin's ID targeted by this escalation (i.e., the admin being escalated, or, in the case of privilege updates, the privileged account). References shopping_mall_admins.id."},"requestor_id":{"type":"string","format":"uuid","description":"ID of the user (customer or seller) requesting the escalation. UUID, not a direct relation to Actors but must match an entity in the system."},"escalation_type":{"type":"string","description":"Type of escalation: customer_to_admin, seller_to_admin, privilege_update, etc. Used for business tracking and type-specific workflow logic."},"status":{"type":"string","description":"Escalation workflow status. Allowed values include: pending, approved, rejected, cancelled, etc. Used to manage current processing state."},"reviewed_by_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the reviewer/admin who processed or approved this escalation. Null if still pending."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional approval/rejection reason, or audit context note. Provides additional business, compliance, or workflow context."},"created_at":{"type":"string","format":"date-time","description":"Escalation request creation timestamp (UTC, ISO-8601)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the escalation record."}},"required":["id","shopping_mall_admin_id","requestor_id","escalation_type","status","created_at","updated_at"],"description":"Admin role elevation requests and approvals. Tracks escalation attempts (customer→admin, seller→admin, privilege_update), workflow status, reviewer, approval/rejection reasons, and evidence snapshot linkage. Used for audit, compliance, and onboarding processes. Sourced from the shopping_mall_admin_role_escalations table."},"IShoppingMallAdminRoleEscalation.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_admin_role_escalations","properties":{"status":{"type":"string","description":"Workflow status of the escalation, e.g., approved, rejected, cancelled. Must be set to a valid status for business workflow."},"reviewed_by_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the admin who reviews (approves/rejects/cancels) the escalation. Nullable; required on approval or rejection."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason for approval/rejection/cancellation. Descriptive string for audit trail, business context, or error evidence."}},"required":["status"],"description":"Update payload for an admin role escalation record. Used for setting status, adding approval/rejection information, and updating the reviewer. Only specified fields are updatable according to business and compliance rules."},"IShoppingMallUserConnection.IRequest":{"type":"object","properties":{"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) Filter: actor's unique ID (customer, seller, or admin UUID). Enables search for sessions by specific actor."},"actor_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Filter: actor type (customer, seller, admin). Limits session search to a specific user type."},"channel_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) Filter: channel context (UUID) for which the connection/session occurred."},"ip_address":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Filter: IP address. Returns sessions by IP address match (supports analytics, fraud investigation)."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Filter: User agent string (browser/app info)."},"login_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Filter: lower bound of login date/time window (ISO8601)."},"login_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Filter: upper bound of login date/time window (ISO8601)."},"logout_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Filter: lower bound of logout date/time window (ISO8601)."},"logout_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Filter: upper bound of logout date/time window (ISO8601)."},"auth_context":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Filter: authentication context (e.g., password, OAuth/google/apple, device)."},"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"(Optional) Pagination: page number (1-based)."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"(Optional) Pagination: number of records to return per page."}},"required":[],"description":"DTO used for advanced search and filtering of user connection/session records (shopping_mall_user_connections). Allows complex queries for session retrieval, audit, and analytics."},"IShoppingMallUserConnection":{"type":"object","x-samchon-prisma-schema":"shopping_mall_user_connections","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the user connection/session record."},"actor_id":{"type":"string","format":"uuid","description":"Associated actor's id; refers to customer, seller, or admin depending on session context. Foreign reference tracked at application logic level."},"actor_type":{"type":"string","description":"Actor type (customer, seller, admin); string discriminator for role."},"channel_id":{"type":"string","format":"uuid","description":"Channel context for this connection (UUID)."},"ip_address":{"type":"string","description":"Remote IP address of the session (IPv4/IPv6 literal)."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User agent string of browser/app/device; records client agent for session/event. May be null for non-standard agents."},"login_at":{"type":"string","format":"date-time","description":"Datetime of login/session establishment (ISO-8601 UTC)."},"logout_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime of logout/session end if known; null if session is current/open."},"auth_context":{"type":"string","description":"Auth context meta (e.g., how login was performed: password, OAuth, role, device/2FA)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (UTC ISO-8601)."}},"required":["id","actor_id","actor_type","channel_id","ip_address","login_at","auth_context","created_at"],"description":"User connection/session record. Tracks login/logout/IP/device metadata for business, compliance, security, and analytics scenarios. Corresponds to shopping_mall_user_connections table."},"IShoppingMallUserConnection.IUpdate":{"type":"object","properties":{"user_agent":{"oneOf":[{"type":"string","description":"User agent string (browser/app/device info) for the connection session. Optional, and set for device risk analytics and session management. May be updated for annotation, compliance, or security review purposes."},{"type":"null"}],"description":"User agent string (browser/app/device info) for the connection session. Optional, and set for device risk analytics and session management. May be updated for annotation, compliance, or security review purposes."},"auth_context":{"type":"string","description":"Authentication context: how this connection was authenticated. E.g., 'password', 'oauth/google', 'role:customer', 'device/2fa'. Updatable for audit trail, risk management, or to support explanation of session review. Should match the method by which the user established the session."}},"required":[],"description":"Payload for updating a user connection/session record (shopping_mall_user_connections table). Allows amendment or annotation of metadata for compliance, device labeling, risk scoring, or session context tracking. Only properties explicitly defined in the schema can be updated."},"IShoppingMallUserAgreement.IRequest":{"type":"object","properties":{"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter by associated actor's unique identifier (customer, seller, admin, etc.). Optional: only applies filtering if present."},{"type":"null"}],"description":"Filter by associated actor's unique identifier (customer, seller, admin, etc.). Optional: only applies filtering if present."},"actor_type":{"oneOf":[{"type":"string","description":"Filter by actor's type (customer, seller, admin, etc.). Optional enum or open string. Only applies filtering if present."},{"type":"null"}],"description":"Filter by actor's type (customer, seller, admin, etc.). Optional enum or open string. Only applies filtering if present."},"agreement_type":{"oneOf":[{"type":"string","description":"Filter by agreement category, e.g., 'Terms', 'Privacy', or 'MarketingConsent'. Optional."},{"type":"null"}],"description":"Filter by agreement category, e.g., 'Terms', 'Privacy', or 'MarketingConsent'. Optional."},"version":{"oneOf":[{"type":"string","description":"Search by agreement document version (e.g., '2024-03.1'). Optional."},{"type":"null"}],"description":"Search by agreement document version (e.g., '2024-03.1'). Optional."},"accepted_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound filter for acceptance timestamp (inclusive). Optional: only applies filtering if present. Use ISO8601 date-time."},{"type":"null"}],"description":"Lower bound filter for acceptance timestamp (inclusive). Optional: only applies filtering if present. Use ISO8601 date-time."},"accepted_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound filter for acceptance timestamp (inclusive). Optional: only applies filtering if present. Use ISO8601 date-time."},{"type":"null"}],"description":"Upper bound filter for acceptance timestamp (inclusive). Optional: only applies filtering if present. Use ISO8601 date-time."},"withdrawn_at_from":{"oneOf":[{"type":"string","format":"date-time","description":"Lower bound filter for withdrawal timestamp (inclusive). Optional: only applies filtering if present. Use ISO8601 date-time."},{"type":"null"}],"description":"Lower bound filter for withdrawal timestamp (inclusive). Optional: only applies filtering if present. Use ISO8601 date-time."},"withdrawn_at_to":{"oneOf":[{"type":"string","format":"date-time","description":"Upper bound filter for withdrawal timestamp (inclusive). Optional: only applies filtering if present. Use ISO8601 date-time."},{"type":"null"}],"description":"Upper bound filter for withdrawal timestamp (inclusive). Optional: only applies filtering if present. Use ISO8601 date-time."},"page":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"description":"Requested result page (pagination). Optional."},{"type":"null"}],"description":"Requested result page (pagination). Optional."},"limit":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"maximum":250,"description":"Number of records per page (pagination). Optional, default varies."},{"type":"null"}],"description":"Number of records per page (pagination). Optional, default varies."},"sort_by":{"oneOf":[{"type":"string","description":"Sort result by a specific column (e.g., 'accepted_at', 'withdrawn_at'). Optional."},{"type":"null"}],"description":"Sort result by a specific column (e.g., 'accepted_at', 'withdrawn_at'). Optional."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction for results. Optional. Allowed values: 'asc', 'desc'."},{"const":"desc","description":"Sort direction for results. Optional. Allowed values: 'asc', 'desc'."},{"type":"null"}],"description":"Sort direction for results. Optional. Allowed values: 'asc', 'desc'."}},"required":[],"description":"Advanced query body for searching and filtering user agreement records (shopping_mall_user_agreements table). All fields are optional and act as filters or pagination/sorting controls when present."},"IShoppingMallUserAgreement":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user agreement record."},"actor_id":{"type":"string","format":"uuid","description":"Associated actor's ID (customer, seller, or admin), as per application-layer discriminator."},"actor_type":{"type":"string","description":"Discriminator for actor type: 'customer', 'seller', or 'admin'."},"agreement_type":{"type":"string","description":"Type of agreement: contract term, privacy, consent, etc. Business-level string."},"version":{"type":"string","description":"Agreement version (e.g., document version '2024-03.1')."},"accepted_at":{"type":"string","format":"date-time","description":"Timestamp when this agreement/version was accepted."},"withdrawn_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of when the user withdrew this agreement (null if not withdrawn)."},{"type":"null"}],"description":"Timestamp of when the user withdrew this agreement (null if not withdrawn)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp the record was created."}},"required":["id","actor_id","actor_type","agreement_type","version","accepted_at","created_at"],"description":"User agreement record from shopping_mall_user_agreements. Represents a point of acceptance for terms, privacy, marketing, or other policy documents, linked to a specific actor. May support withdrawal/opt-out tracking. Designed for compliance evidence, audit, and privacy."},"IShoppingMallUserAgreement.IUpdate":{"type":"object","properties":{"accepted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update the agreement acceptance timestamp (set/revise). Set to ISO8601 date-time string or null to clear."},{"type":"null"}],"description":"Update the agreement acceptance timestamp (set/revise). Set to ISO8601 date-time string or null to clear."},"withdrawn_at":{"oneOf":[{"type":"string","format":"date-time","description":"Update/set the withdrawal timestamp. Set to ISO8601 date-time string. Null means agreement is not withdrawn."},{"type":"null"}],"description":"Update/set the withdrawal timestamp. Set to ISO8601 date-time string. Null means agreement is not withdrawn."},"agreement_type":{"oneOf":[{"type":"string","description":"Update agreement category (e.g., 'Terms', 'Privacy', or 'MarketingConsent'). Optional/business, only if versioning adjustments are needed."},{"type":"null"}],"description":"Update agreement category (e.g., 'Terms', 'Privacy', or 'MarketingConsent'). Optional/business, only if versioning adjustments are needed."},"version":{"oneOf":[{"type":"string","description":"Update agreement document version (e.g., '2024-03.1'). Optional: only update when agreement version changes. Must match document."},{"type":"null"}],"description":"Update agreement document version (e.g., '2024-03.1'). Optional: only update when agreement version changes. Must match document."}},"required":[],"description":"Payload for updating a user agreement record (shopping_mall_user_agreements table). Allows changing timestamps or, in rare cases, type/version for error/correction flows. Only specified fields are updated. Set withdrawn_at as ISO8601 or null for consent withdrawal; set accepted_at for acceptance corrections."},"IShoppingMallProduct.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination.","minimum":1},"limit":{"type":"integer","description":"Maximum number of records per page.","minimum":1,"default":20},"sort_by":{"type":"string","description":"Field to sort the products by (e.g., name, created_at, updated_at, price)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order direction. Can be 'asc' or 'desc'."},{"const":"desc","description":"Sort order direction. Can be 'asc' or 'desc'."}],"description":"Sort order direction. Can be 'asc' or 'desc'."},"search":{"type":"string","description":"Full-text search filter on product name/code/description."},"channel_id":{"type":"string","format":"uuid","description":"Filter for products belonging to a specific channel (shopping_mall_channels.id)."},"section_id":{"type":"string","format":"uuid","description":"Filter for products under a specific section (shopping_mall_sections.id)."},"category_id":{"type":"string","format":"uuid","description":"Filter for products belonging to a specific category (shopping_mall_channel_categories.id)."},"seller_id":{"type":"string","format":"uuid","description":"Filter for products owned by a particular seller (shopping_mall_sellers.id)."},"status":{"type":"string","description":"Current status of the product (e.g., Draft, Active, Paused, Discontinued, Deleted). See Products schema for allowed values."},"business_status":{"type":"string","description":"Business workflow state (e.g., Approval, Pending Activation, Blocked, Suspended, etc)."},"code":{"type":"string","description":"Filter for products with an exact business/product code."},"name":{"type":"string","description":"Filter for product(s) by display name (full or partial)."},"created_at_from":{"type":"string","format":"date-time","description":"Filter products created after this date/time (ISO 8601)."},"created_at_to":{"type":"string","format":"date-time","description":"Filter products created before this date/time (ISO 8601)."},"updated_at_from":{"type":"string","format":"date-time","description":"Filter products updated after this date/time (ISO 8601)."},"updated_at_to":{"type":"string","format":"date-time","description":"Filter products updated before this date/time (ISO 8601)."}},"required":[],"description":"Filtering, searching, and pagination parameters for retrieving a list of products. Every property is optional for maximum flexibility; combine as needed for advanced queries."},"IShoppingMallProduct":{"type":"object","x-samchon-prisma-schema":"shopping_mall_products","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key for product."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Seller who owns the product (shopping_mall_sellers.id)."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel where the product is listed (shopping_mall_channels.id)."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Section where product is grouped (shopping_mall_sections.id)."},"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Primary category for filtering & search (shopping_mall_channel_categories.id)."},"code":{"type":"string","description":"Business-facing, unique product code per seller/channel."},"name":{"type":"string","description":"Product display name for customers and search."},"status":{"type":"string","description":"Product status (e.g., Draft, Active, Paused, Discontinued, Deleted)."},"business_status":{"type":"string","description":"Business workflow state (e.g., Approval, Pending Activation, Blocked, Suspended, etc)."},"created_at":{"type":"string","format":"date-time","description":"Product creation timestamp (ISO 8601 formatted)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (ISO 8601 formatted)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp (nullable; ISO 8601)."}},"required":["id","shopping_mall_seller_id","shopping_mall_channel_id","shopping_mall_section_id","shopping_mall_category_id","code","name","status","business_status","created_at","updated_at"],"description":"Comprehensive product entity corresponding to shopping_mall_products; includes all base DB fields for business/product logic, audit, and compliance. Designed for use in read responses, detail pages, and business workflows. Field mappings and descriptions are strictly per Prisma schema. NEVER include properties not in the base schema."},"IShoppingMallProduct.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_products","properties":{"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Seller who owns the product (shopping_mall_sellers.id)."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel where the product is registered (shopping_mall_channels.id)."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Section to associate the product (shopping_mall_sections.id)."},"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Primary category for product classification (shopping_mall_channel_categories.id)."},"code":{"type":"string","description":"Business-unique product code per seller/channel."},"name":{"type":"string","description":"Product display name."},"status":{"type":"string","description":"Product status (Draft, Active, Paused, Discontinued, Deleted)."},"business_status":{"type":"string","description":"Workflow state (Approval, Pending Activation, Blocked, Suspended, etc)."}},"required":["shopping_mall_seller_id","shopping_mall_channel_id","shopping_mall_section_id","shopping_mall_category_id","code","name","status","business_status"],"description":"Data required to register a new product; maps only to properties present in shopping_mall_products table. System fields like id, created_at, updated_at, deleted_at are NOT accepted as input (generated by system). No business logic fields not defined in prisma schema are allowed."},"IShoppingMallProduct.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_products","properties":{"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel ID to update (shopping_mall_channels.id)."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Section ID to update (shopping_mall_sections.id)."},"shopping_mall_category_id":{"type":"string","format":"uuid","description":"Category ID to update (shopping_mall_channel_categories.id)."},"code":{"type":"string","description":"Update of business-facing product code."},"name":{"type":"string","description":"Product display name to update."},"status":{"type":"string","description":"Update status for product (Draft, Active, Paused, Discontinued, Deleted)."},"business_status":{"type":"string","description":"Update business/workflow state."}},"required":[],"description":"Fields permitted for product update; maps only to updatable columns in shopping_mall_products. All fields optional; id/shopping_mall_seller_id, created_at, updated_at, deleted_at are not configurable by client. Do not accept system-generated or non-DB-backed fields."},"IShoppingMallProductOption.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number to retrieve (1-based index). Optional. If omitted, defaults to first page. Used for paginated queries.","minimum":1},{"type":"null"}],"description":"Page number for paginated retrieval. Optional."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of items to return per page. Optional. Defaults to system max (e.g., 50/100).","minimum":1},{"type":"null"}],"description":"Page size (max results per page) for paginated list."},"search":{"type":"string","description":"Keyword search against option name or other user-facing fields. Optional."},"sort":{"type":"string","description":"Sort order for results (e.g., 'position:asc', 'name:desc'). Optional. Must match supported sort fields."},"name":{"type":"string","description":"Filter: Option name (exact or partial match, case-insensitive). Optional."},"required":{"type":"boolean","description":"Filter: Only required/optional product options."}},"required":[],"description":"Query parameters for searching and paginating product options. Used in filtered PATCH or GET list operations for product options API. All properties are optional, supporting advanced query and filtering workflows for options attached to products."},"IShoppingMallProductOption":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_options","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the product option row. References shopping_mall_product_options.id (UUID)."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Parent product's unique identifier (shopping_mall_products.id)."},"name":{"type":"string","description":"Display label of the product option (e.g., 'Color', 'Size')."},"required":{"type":"boolean","description":"Indicates if this option is mandatory for purchase (true=must select; false=optional)."},"position":{"type":"integer","description":"UI display order for option selection and sorting. Lower numbers appear earlier in option lists."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp for this option (ISO 8601 'date-time'). References shopping_mall_product_options.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (ISO 8601 'date-time'). Updated automatically on change. References shopping_mall_product_options.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp (ISO 8601 'date-time'). Null if option is active."},{"type":"null"}],"description":"Soft delete timestamp for audit/evidence. Present when option has been logically removed, otherwise null."}},"required":["id","shopping_mall_product_id","name","required","position","created_at","updated_at"],"description":"Represents a single product option (e.g., color, size) as registered under a product in the shopping mall system. Implements all fields from the shopping_mall_product_options table, supporting identification, UI display, business rules (mandatory/optional), and audit operations. All date-time fields are ISO 8601 format. The presence of deleted_at indicates soft deletion for compliance/evidence audits."},"IShoppingMallProductOption.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_options","properties":{"name":{"type":"string","description":"The display name of the product option users will see when customizing or selecting product attributes. Must be non-empty. (e.g., 'Color', 'Size')"},"required":{"type":"boolean","description":"Set to true if customers must select a value for this option to purchase the product; false if selection can be omitted."},"position":{"type":"integer","description":"Integer representing the UI order of the option among other options for the product. Lower numbers appear first. Optional on create; if omitted, default or auto-increment logic may assign order."}},"required":["name","required","position"],"description":"Request body for creating a new product option for a product. Only accepts schema-defined fields: option name, whether selection is mandatory, and UI display position. Excludes system-managed and relational fields (id, created_at, updated_at, deleted_at)."},"IShoppingMallProductOption.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_options","properties":{"name":{"type":"string","description":"Update to the display label for the product option (e.g., correcting from 'Sizee' to 'Size'). Optional; omit or null to leave unchanged."},"required":{"type":"boolean","description":"Update whether this option is mandatory to select for purchase. Optional; omit or null to leave unchanged."},"position":{"type":"integer","description":"Update the UI display order of the option among its siblings. Optional; omit or null to leave unchanged."}},"required":[],"description":"Request body for modifying properties of an existing product option. Accepts any subset of the updatable fields; all properties are optional and may be omitted/null for partial updates (PATCH/PUT). System-managed fields (id, product, created_at, updated_at, deleted_at) are not accepted in update requests."},"IShoppingMallProductVariant.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Optional; if omitted, defaults to 1."},"limit":{"type":"integer","description":"How many records per page. Optional; default should be reasonable for the context (e.g., 20 or 50)."},"sort":{"type":"string","description":"Sort ordering preference for the product variant list. Possible values: 'created_at', 'price', 'stock_quantity', etc. Optional."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction for ordering (ascending or descending). Optional."},{"const":"desc","description":"Sort direction for ordering (ascending or descending). Optional."}],"description":"Sort direction for ordering (ascending or descending). Optional."},"sku_code":{"type":"string","description":"SKU code to search for or filter on. Allows partial/fuzzy matching by underlying business logic. Optional."},"priceMin":{"type":"number","description":"Minimum price to filter products by. Optional."},"priceMax":{"type":"number","description":"Maximum price to filter products by. Optional."},"stockMin":{"type":"integer","description":"Minimum stock quantity to filter on. Optional."},"stockMax":{"type":"integer","description":"Maximum stock quantity to filter on. Optional."},"createdAfter":{"type":"string","format":"date-time","description":"ISO8601 date filter: only variants created AFTER this date/time. Optional."},"createdBefore":{"type":"string","format":"date-time","description":"ISO8601 date filter: only variants created BEFORE this date/time. Optional."},"deleted":{"type":"boolean","description":"Include soft-deleted (logically erased) variants in search. Optional."}},"description":"Product Variant list/search paging and filter. Used to retrieve product variant (SKU) records according to business rule and operational query. Optional filter and pagination fields are present, but all are optional (except possibly page/limit in system); response is a paginated array.","required":[]},"IShoppingMallProductVariant":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_variants","properties":{"id":{"type":"string","description":"Primary key.","format":"uuid"},"shopping_mall_product_id":{"type":"string","description":"Parent product this variant belongs to. References shopping_mall_products.id","format":"uuid"},"sku_code":{"type":"string","description":"Internal SKU code/identifier unique within product."},"bar_code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Bar code or EAN/UPC for the variant (optional)."},"option_values_hash":{"type":"string","description":"Deterministic hash of selected option values for this variant (enables fast lookup and uniqueness enforcement)."},"price":{"type":"number","description":"Sales price of this variant/SKU."},"stock_quantity":{"type":"integer","description":"Current inventory quantity (redundant with inventory events, but used for listing performance)."},"weight":{"type":"number","description":"Weight for shipping calculations. Required for delivery use-cases."},"created_at":{"type":"string","format":"date-time","description":"Variant creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp, null if active."}},"required":["id","shopping_mall_product_id","sku_code","option_values_hash","price","stock_quantity","weight","created_at","updated_at"],"description":"Each row represents a unique SKU (stock keeping unit) defined by a combination of option values for a product. Critical for inventory and order management but not user-managed directly. Maps directly to shopping_mall_product_variants Prisma table."},"IShoppingMallProductVariant.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_variants","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Parent product ID that this variant will be added to (required; references shopping_mall_products)."},"sku_code":{"type":"string","description":"Unique SKU code/identifier for the variant. Required, must be unique within product."},"bar_code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Bar code/EAN/UPC (optional; null if not supplied)."},"option_values_hash":{"type":"string","description":"Hash representing the selected option values for the variant. Required; ensures combination uniqueness and fast lookup."},"price":{"type":"number","description":"Sales price for this SKU. Required."},"stock_quantity":{"type":"integer","description":"Initial inventory quantity for this SKU (must be >= 0). Required."},"weight":{"type":"number","description":"Weight for shipping calculations (required for delivery logic). Required."}},"required":["shopping_mall_product_id","sku_code","option_values_hash","price","stock_quantity","weight"],"description":"Create DTO for product variant. Used to register a new SKU (option combination) for a product. Matches fields in shopping_mall_product_variants except for system fields (id, timestamps, deleted_at, etc.), which are generated by the system/backoffice. DO NOT include fields not present in the Prisma schema for this table (especially system- and context-managed fields)."},"IShoppingMallProductVariant.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_variants","properties":{"sku_code":{"type":"string","description":"Unique SKU code/identifier for the variant (optional on update; only supplied if changing SKU code)."},"bar_code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Bar code/EAN/UPC (optional; may be set to null to clear bar code value)."},"option_values_hash":{"type":"string","description":"Hash representing the selected option values (optional on update; required if changing option arrangement for the variant)."},"price":{"type":"number","description":"Sales price for this SKU (optional for update)."},"stock_quantity":{"type":"integer","description":"Updated inventory quantity for this SKU (must remain >= 0). Optional."},"weight":{"type":"number","description":"Weight for shipping calculations. Optional update."}},"required":[],"description":"Update DTO for product variant. Used for PATCH/PUT operations to modify one or more updatable fields on the variant SKU. All fields optional; only those to be changed are submitted. System-managed fields (id, created_at, updated_at, deleted_at, shopping_mall_product_id) MUST NOT be included in this DTO. Only fields present in the Prisma schema for this table may be included."},"IShoppingMallProductBundle.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Results page to retrieve (1-based index). Used for pagination. Optional; defaults may apply in the system."},"limit":{"type":"integer","minimum":1,"description":"Maximum number of bundle results per page. Optional; bounded by system maximum."},"search":{"type":"string","description":"Optional free-text search filter for bundle name, code, or description. Partial word, case-insensitive matches may be applied depending on implementation."},"bundle_type":{"type":"string","description":"Type of the product bundle. Should match the bundle_type field in the product bundle entity. Optional filter; expects exact match if provided (e.g., 'fixed', 'optional')."},"sort_by":{"type":"string","description":"Optional sort field for ordering bundles in the result. May include values such as 'position', 'created_at', or 'name'. Available fields may vary by implementation."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for the chosen sort field. Allowed values: 'asc', 'desc'. Optional; defaults to system preference."},{"const":"desc","description":"Sort order for the chosen sort field. Allowed values: 'asc', 'desc'. Optional; defaults to system preference."}],"description":"Sort order for the chosen sort field. Allowed values: 'asc', 'desc'. Optional; defaults to system preference."}},"required":[],"description":"Request structure for searching, filtering, or paginating product bundles for a parent product.\n\nSupports pagination (page, limit), keyword searching (search), bundle type filter, and sort options for result ordering. Used in endpoints fetching a page or filtered set of product bundles linked to a parent product, primarily by sellers or administrators. No required keys; all options are optional for flexible querying.","x-samchon-prisma-schema":"shopping_mall_product_bundles"},"IShoppingMallProductBundle":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_bundles","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this product bundle. References shopping_mall_product_bundles.id in the database."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Reference to the parent product for which this bundle is defined. Corresponds to shopping_mall_products.id."},"name":{"type":"string","description":"Bundle display name for customers. Uniquely distinguishes this bundle per product."},"bundle_type":{"type":"string","description":"Type of bundle: e.g., 'fixed' (must include all items) or 'optional' (user-selectable). String, but should follow a controlled vocabulary in business logic."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short (optional) description of the bundle contents, configuration, or purpose. Null if not supplied."},"position":{"type":"integer","description":"Display order for multiple bundles attached to the same product. Lower numbers usually appear first in the UI."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the bundle was created (in UTC, RFC 3339 format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this bundle (in UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp representing soft deletion of the bundle. Null if bundle is active; set to UTC timestamp if logically removed."}},"required":["id","shopping_mall_product_id","name","bundle_type","position","created_at","updated_at"],"description":"Represents a product bundle/composite product in the shopping mall platform. Each bundle groups one or more products under a parent product, allowing customers to purchase a set rather than individual items. Includes information about display name, bundle type (fixed or optional), order within product, and timestamps. The bundle may be soft deleted (deleted_at) for compliance/audit. Relationships to constituent bundle items and parent product are managed by related endpoints and are not embedded here."},"IShoppingMallProductBundle.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_bundles","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"UUID referencing the parent product for which this new bundle is being created. Must point to a valid shopping_mall_products.id."},"name":{"type":"string","description":"Display name for the bundle as seen by customers. Must be unique per product."},"bundle_type":{"type":"string","description":"Type of bundle: typically 'fixed' (all items included) or 'optional' (selectable items). Must follow business controlled vocabulary for bundle types."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-readable description of what the bundle includes. Null if not supplied."},"position":{"type":"integer","description":"Display order for the bundle among all bundles for the product. Lower numbers appear first in sorting/UIs. If omitted, defaults to 'end' or system preference."}},"required":["shopping_mall_product_id","name","bundle_type","position"],"description":"DTO type for creating a new product bundle associated with a parent product. Includes display name, type, optional description, and UI position. Excludes primary key (id) and audit timestamps, which are set by the system. All business rules for uniqueness and product eligibility apply at creation."},"IShoppingMallProductBundle.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_bundles","properties":{"name":{"type":"string","description":"New value for the bundle's display name. Unique per parent product. Optional; include if updating name."},"bundle_type":{"type":"string","description":"Updated bundle type: e.g., 'fixed' or 'optional'. Optional; include if updating bundle_type."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional new human-readable description. Supply null to clear, or a string to set/replace description."},"position":{"type":"integer","description":"Updated display order for this bundle among others. Optional; only include if changing position."}},"required":[],"description":"DTO type for updating an existing product bundle. All fields are optional (PATCH semantics): supply only those that should be changed. Primary key and parent product reference are immutable here. Allows update of name, type, optional description, and UI position. System sets audit/updated_at fields automatically. Excludes creation/deletion timestamps."},"IShoppingMallProductTag.IRequest":{"type":"object","properties":{"productId":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the product whose tags are to be retrieved. This property enables advanced search and filtering of product tags based on the associated product entity. Must reference an existing product in the catalog."},"tag":{"type":"string","description":"Exact or partial tag value to filter product tags. Case-insensitive and supports fuzzy or keyword search depending on system implementation. Used for searching tags assigned to the product for SEO, recommendation, or campaign logic."},"page":{"type":"integer","description":"The index of the results page for pagination (1-based). Determines which subset of tag results is returned, enabling efficient batch/tag list processing."},"limit":{"type":"integer","description":"Maximum number of results to return per page. Used for controlling response size during pagination in tag searches."},"sort":{"type":"string","description":"Sort direction or field for ordering results, such as 'created_at', 'tag', or compound values per business/UI need."}},"required":["productId"],"description":"Query and filtering parameters for listing, searching, and paginating tags attached to a specific product. Used in tag management/list endpoints, allowing clients to retrieve tags based on product, partial tag match, or paging requirements. All properties correspond to search parameter expectations in enterprise commerce systems."},"IShoppingMallProductTag":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_tags","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the product tag record. Uniquely identifies each tag entry for a product. Required for any tag-based CRUD or batch operation."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"References the unique product entity (from shopping_mall_products table) to which the tag is assigned. Used in API operations for validation and lookup."},"tag":{"type":"string","description":"Assigned tag value or keyword for this product. Used for search, recommendation, and filtering in catalog and external integrations. Must be a valid tag string as per platform policy."}},"required":["id","shopping_mall_product_id","tag"],"description":"Defines a tag record attached to a product. Represents a keyword, label, or classification used for product search, SEO enhancement, recommendation, and campaign logic. Each tag is uniquely assigned to a product and plays a key role in product discoverability, grouping, and analytics. Sensitive security fields and internal meta are omitted; structure is fully aligned with the shopping_mall_product_tags Prisma schema."},"IShoppingMallProductTag.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_tags","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"References the product (from shopping_mall_products) to which this tag will be attached. Required for every tag creation operation."},"tag":{"type":"string","description":"Tag value/keyword assigned to the product for search, recommendation, or campaign logic. Must follow naming/length constraints in system policy."}},"required":["shopping_mall_product_id","tag"],"description":"Payload for creating a new tag attached to a specific product. Used in product tag creation endpoints. Both properties must conform to the reference and value constraints of the shopping_mall_product_tags schema. Unique constraint enforced on the combination of product and tag."},"IShoppingMallProductTag.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_tags","properties":{"tag":{"type":"string","description":"Updated tag value for this product. Must adhere to naming conventions, and be unique for the given product. Used to correct, normalize, or re-label tags for product discoverability and analytics."}},"required":["tag"],"description":"Payload for updating an existing tag for a specific product. Used in tag update endpoints for correcting typographical errors, normalizing values, or supporting campaign/SEO policy updates. Only the tag string is updatable; product reference is immutable for audit and referential integrity."},"IShoppingMallProductSeoMetadata":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_seo_metadata","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for SEO metadata of a product per the shopping_mall_product_seo_metadata table. Used to relate SEO fields to a single product. Must be a valid UUID string."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product for which this SEO meta is attached. Refers to {@link shopping_mall_products.id}. Required for the association in the catalog context."},"meta_title":{"type":"string","description":"SEO meta title for the product. Should be concise and relevant for search engines and users. Column in shopping_mall_product_seo_metadata."},"meta_description":{"type":"string","description":"SEO meta description for the product. Generally a brief, high-quality, human-readable summary for search listings. Column in shopping_mall_product_seo_metadata."},"meta_keywords":{"type":"string","description":"SEO meta keywords, comma-separated, that are relevant to the product. Used for search optimization and catalog classification. This column should include only valid keywords according to current SEO best practices."}},"required":["id","shopping_mall_product_id","meta_title","meta_description","meta_keywords"],"description":"SEO metadata schema tied to a product in the platform catalog. Includes meta-title, -description, and raw keywords for search optimization and external integration. Reference to shopping_mall_product_seo_metadata in the Prisma schema. Used for algorithmic and compliance-driven SEO computation. Sensitive to localization and internationalization policies."},"IShoppingMallProductSeoMetadata.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_seo_metadata","properties":{"meta_title":{"type":"string","description":"Updated SEO meta title for the product. Used for search and preview listing. Column in shopping_mall_product_seo_metadata."},"meta_description":{"type":"string","description":"Updated SEO meta description for the product. This is typically a brief text preview. Column in shopping_mall_product_seo_metadata."},"meta_keywords":{"type":"string","description":"Updated SEO meta keywords (comma-separated values). Used for keyword-based searching and visibility filtering. Column in shopping_mall_product_seo_metadata."}},"required":["meta_title","meta_description","meta_keywords"],"description":"Schema for updating the SEO metadata of a product in the catalog. All fields are required for proper update. Tied to shopping_mall_product_seo_metadata per Prisma schema. Changes are reflected immediately in catalog visibility, search, or recommendation modules."},"IShoppingMallProductContent":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_content","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the product content in shopping_mall_product_content table. Refers to a specific per-locale, per-product content record."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product for which this content is provided. Foreign key to {@link shopping_mall_products.id}."},"content_markdown":{"type":"string","description":"Formatted product description in Markdown or HTML. Used as primary content for product detail page. Column from shopping_mall_product_content."},"return_policy":{"type":"string","description":"Return policy text. Localized, shown to customers. Contains the allowed returns process and terms. Column in shopping_mall_product_content."},"warranty_policy":{"type":"string","description":"Warranty/aftersales policy text. Localized, describes warranty support for the product. Column in shopping_mall_product_content."},"locale":{"type":"string","description":"Language and region code for content localization. Used for rendering the appropriate content per user context. Examples: 'en-US', 'ko-KR'. Column in shopping_mall_product_content."}},"required":["id","shopping_mall_product_id","content_markdown","return_policy","warranty_policy","locale"],"description":"Rich content object schema for a product. Contains formatted description, return policy, warranty policy, and locale information. Applies directly to a product-id and supports localization strategies. References shopping_mall_product_content in the Prisma schema. Required for compliance and internationalization of product display."},"IShoppingMallProductContent.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_content","properties":{"content_markdown":{"type":"string","description":"Updated formatted product description in Markdown or HTML. Used for main content in product detail screens."},"return_policy":{"type":"string","description":"Updated return policy for the product. Localized and seen by customers."},"warranty_policy":{"type":"string","description":"Updated warranty/aftersales policy for the product. Localized and business-compliant."},"locale":{"type":"string","description":"Updated language-region code for content. Should match ISO code standards, e.g., 'en-US'."}},"required":["content_markdown","return_policy","warranty_policy","locale"],"description":"Schema for the update payload when editing a product's rich content block. Only includes business-relevant content fields and locale, per the shopping_mall_product_content table in the Prisma schema."},"IShoppingMallProductAttachmentLink.IRequest":{"type":"object","properties":{"productId":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the shopping mall product whose attachments are to be listed. Used to filter attachment links for a specific product."},"purpose":{"type":"string","description":"(Optional) If specified, filters results to attachment links with this purpose. E.g. 'main_image', 'gallery', 'spec_sheet', etc."},"position":{"type":"integer","description":"(Optional) If specified, filters results to only attachment links at this display position/order."},"attachmentId":{"type":"string","format":"uuid","description":"(Optional) If specified, filters to only attachment links referencing this attachment UUID."},"sort":{"oneOf":[{"const":"created_at","description":"(Optional) Sort order for returned list. Accepts 'created_at' or 'position'—default is 'position' if unspecified."},{"const":"position","description":"(Optional) Sort order for returned list. Accepts 'created_at' or 'position'—default is 'position' if unspecified."}],"description":"(Optional) Sort order for returned list. Accepts 'created_at' or 'position'—default is 'position' if unspecified."},"order":{"oneOf":[{"const":"asc","description":"(Optional) Sort direction. 'asc' for ascending or 'desc' for descending—default is 'asc'."},{"const":"desc","description":"(Optional) Sort direction. 'asc' for ascending or 'desc' for descending—default is 'asc'."}],"description":"(Optional) Sort direction. 'asc' for ascending or 'desc' for descending—default is 'asc'."},"page":{"type":"integer","minimum":1,"description":"(Optional) Page number for pagination. Used to fetch a specific page of results. Default is 1 if omitted."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"(Optional) Page size for pagination. Controls maximum number of results per page. Default is usually 20 or 50; maximum 100 entries per page."}},"required":["productId"],"description":"Request body for listing/searching product attachment links. Supports filtering by product, usage context/purpose, specific attachment, position, and paginated results. Used for endpoints returning lists of product-attached files/images and compatible with pagination and sort."},"IShoppingMallProductAttachmentLink":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_attachment_links","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier of this product attachment link row."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Foreign Key. Product for which this file is attached. See shopping_mall_products.id."},"attachment_id":{"type":"string","format":"uuid","description":"Foreign Key. Linked attachment file reference (shopping_mall_attachments.id)."},"purpose":{"type":"string","description":"Business purpose for this attachment (e.g., main_image, gallery, spec_sheet). Used for UIs and logic."},"position":{"type":"integer","description":"Order for displaying attachments of the same purpose/category."},"product":{"$ref":"#/components/schemas/IShoppingMallProduct","description":"Related product entity (embedded/ref)."},"attachment":{"$ref":"#/components/schemas/IShoppingMallAttachment","description":"Related attachment entity (embedded/ref)."}},"required":["id","shopping_mall_product_id","attachment_id","purpose","position"],"description":"Represents the association between a product and its attached file/resource. Maps directly to shopping_mall_product_attachment_links in the schema. Used to specify and order images, files, or media attached to a product for gallery, main image, documents, or other business purposes. Relationship fields (product, attachment) can embed referenced objects, assisting in DTO expansion. Position and purpose support UI/logic for file ordering and grouping."},"IShoppingMallProductAttachmentLink.ICreate":{"type":"object","properties":{"attachment_id":{"type":"string","format":"uuid","description":"Attachment file reference to link (shopping_mall_attachments.id). Must point to existing uploaded file/attachment."},"purpose":{"type":"string","description":"Business usage for this attachment (e.g., main_image, gallery, spec_sheet). Dictates the UI grouping, file context, and role."},"position":{"type":"integer","description":"Order for displaying this attachment within its group/purpose. 0-based integer; unique per (product, purpose)."},"productId":{"type":"string","format":"uuid","description":"ID of the product to which this attachment will be linked. Only needed if URI does not supply it in route."}},"required":["attachment_id","purpose","position"],"description":"Request body for creating/attaching a new file link to a product. Associates an attachment (previously uploaded file) to a product for presentation, gallery, document storage, or business logic. Requires reference to file (attachment_id), intended purpose, UI ordering (position), and currently active product (productId, if not supplied via URI/route)."},"IShoppingMallCart.IRequest":{"type":"object","properties":{"customerId":{"type":"string","format":"uuid","description":"(Optional) Filter carts to those belonging to a specific customer (shopping_mall_customers.id). Used in admin/support scenarios; users see their own carts by default."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"(Optional) Filter by the sales channel in which the cart was created (shopping_mall_channels.id)."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"(Optional) Only return carts from this specific section (shopping_mall_sections.id)."},"status":{"oneOf":[{"const":"active","description":"(Optional) Filter by cart status. Accepts only values as defined in the cart status enum."},{"const":"expired","description":"(Optional) Filter by cart status. Accepts only values as defined in the cart status enum."},{"const":"checked_out","description":"(Optional) Filter by cart status. Accepts only values as defined in the cart status enum."},{"const":"deleted","description":"(Optional) Filter by cart status. Accepts only values as defined in the cart status enum."}],"description":"(Optional) Filter by cart status. Accepts only values as defined in the cart status enum."},"source":{"oneOf":[{"const":"guest","description":"(Optional) Restrict to carts created as guest, as a member, or migrated. Controls segmentation and session logic."},{"const":"member","description":"(Optional) Restrict to carts created as guest, as a member, or migrated. Controls segmentation and session logic."},{"const":"migrated","description":"(Optional) Restrict to carts created as guest, as a member, or migrated. Controls segmentation and session logic."}],"description":"(Optional) Restrict to carts created as guest, as a member, or migrated. Controls segmentation and session logic."},"created_from":{"type":"string","format":"date-time","description":"(Optional) Return carts created on or after this UTC timestamp (ISO 8601)."},"created_to":{"type":"string","format":"date-time","description":"(Optional) Only return carts created on or before this timestamp (ISO 8601, UTC)."},"expires_from":{"type":"string","format":"date-time","description":"(Optional) Return carts expiring on or after this timestamp."},"expires_to":{"type":"string","format":"date-time","description":"(Optional) Only include carts expiring on or before this UTC timestamp."},"sort":{"oneOf":[{"const":"created_at","description":"Sorting field; one of 'created_at', 'updated_at', or 'expires_at'. Default is 'created_at'."},{"const":"updated_at","description":"Sorting field; one of 'created_at', 'updated_at', or 'expires_at'. Default is 'created_at'."},{"const":"expires_at","description":"Sorting field; one of 'created_at', 'updated_at', or 'expires_at'. Default is 'created_at'."}],"description":"Sorting field; one of 'created_at', 'updated_at', or 'expires_at'. Default is 'created_at'."},"order":{"oneOf":[{"const":"asc","description":"Sort direction; 'asc' for ascending, 'desc' for descending. Default is 'desc'."},{"const":"desc","description":"Sort direction; 'asc' for ascending, 'desc' for descending. Default is 'desc'."}],"description":"Sort direction; 'asc' for ascending, 'desc' for descending. Default is 'desc'."},"page":{"type":"integer","minimum":1,"description":"Pagination: which page of results to fetch (1-based). Default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page (default system config or specified by client), usually 20/50."}},"required":[],"description":"Request body for listing or searching shopping cart entities. Used for paginated/admin/customer cart search with filters on customer, status, channel, section, time range, source, and pagination/sorting controls. All filter fields are optional; using none retrieves own carts/page 1. Date parameters use ISO 8601 (UTC, RFC 3339 format)."},"IShoppingMallCart":{"type":"object","x-samchon-prisma-schema":"shopping_mall_carts","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier of this cart instance (UUID)."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's {@link shopping_mall_customers.id}. The unique user owning this shopping cart."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Associated sales channel {@link shopping_mall_channels.id}. Denotes which business channel/storefront this cart is for."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Associated section within channel {@link shopping_mall_sections.id}. Logical grouping or shop/location this cart is tied to."},"source":{"type":"string","description":"The source of the cart (guest, member, migrated, etc.). Used to distinguish how this cart was initiated."},"status":{"type":"string","description":"Status of the cart (active, expired, checked_out, deleted). Business value managed by the application."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration timestamp for automatic cart archival (ISO8601/UTC). Nullable."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of this cart (ISO8601/UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of this cart (ISO8601/UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for audit/evidence compliance (nullable, only present if cart is deleted)."}},"required":["id","shopping_mall_customer_id","shopping_mall_channel_id","shopping_mall_section_id","source","status","created_at","updated_at"],"description":"Represents a shopping cart entity managed per customer and channel/section. Used to persist a shopping session and manage transition from guest to member, as described by the shopping_mall_carts Prisma model. Contains core cart metadata, ownership, linkage, status, and audit fields. Does not directly contain the cart items."},"IShoppingMallCart.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_carts","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"ID of the customer to whom the cart is assigned (required for member carts)."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel/storefront the cart is created for."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Section ID within the channel/grouping this cart is assigned to."},"source":{"type":"string","description":"Source of the cart (guest, member, migration, etc). See system business rules for valid string values."}},"required":["shopping_mall_customer_id","shopping_mall_channel_id","shopping_mall_section_id","source"],"description":"DTO for creating a new shopping cart. Requires assignment to channel, section, and customer (if authenticated). No status field is set by the client; initial status defaults to system value (e.g., active). Follows the shopping_mall_carts schema for creation operations."},"IShoppingMallCart.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_carts","properties":{"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"New channel/storefront context for moving the cart (optional)."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"New section/group context for the cart (optional)."},"source":{"type":"string","description":"Updated source context for the cart (optional; business audits may use this for migration or batch correction)."},"status":{"type":"string","description":"Updated status for workflow operations. Only controlled values per business logic are accepted by the backend (e.g., active, expired, checked_out, deleted)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration time for the cart (nullable, may be reset by batch or admin update)."}},"required":[],"description":"DTO for updating existing shopping cart metadata. All fields are optional and only those provided will be changed. Prisma model: shopping_mall_carts."},"IShoppingMallCartItem.IRequest":{"type":"object","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Filter cart items by specific product ID."},"shopping_mall_product_variant_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by specific product variant ID if present (nullable for base product items)."},"created_at_from":{"type":"string","format":"date-time","description":"If set, only cart items created after this time are returned."},"created_at_to":{"type":"string","format":"date-time","description":"If set, only cart items created before this time are returned."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of items to return per page (pagination limit)."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (starts at 1)."},"sort":{"type":"string","description":"Order by field (e.g., 'created_at DESC', 'quantity ASC'). Backend validates allowed values."}},"required":[],"description":"DTO for advanced querying, filtering, and pagination of items within a cart. Used to allow business logic to retrieve subsets of cart items by filter, segment, or page view. Does not directly reflect DB schema; enables advanced RESTful API list semantics."},"IShoppingMallCartItem":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the cart item."},"shopping_mall_cart_id":{"type":"string","format":"uuid","description":"Parent cart id (foreign key to shopping_mall_carts)."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Associated product id."},"shopping_mall_product_variant_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Selected variant ID (nullable), reference to shopping_mall_product_variants."},"quantity":{"type":"integer","description":"Quantity selected for this item."},"option_snapshot":{"type":"string","description":"Serialized snapshot of selected options for evidence/audit."},"created_at":{"type":"string","format":"date-time","description":"Cart item creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for historical tracking."}},"required":["id","shopping_mall_cart_id","shopping_mall_product_id","quantity","option_snapshot","created_at","updated_at"],"description":"A cart item within a shopping cart, representing a product or variant, with quantity and snapshot option data, as defined in shopping_mall_cart_items Prisma schema.","x-samchon-prisma-schema":"shopping_mall_cart_items"},"IShoppingMallCartItem.ICreate":{"type":"object","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Target product id to be added to cart."},"shopping_mall_product_variant_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Selected product variant id. Nullable if not using variant."},"quantity":{"type":"integer","description":"Requested quantity for cart item."},"option_snapshot":{"type":"string","description":"Snapshot of selected options at time of cart addition."}},"required":["shopping_mall_product_id","quantity","option_snapshot"],"description":"Fields required to create a new shopping cart item; must reference product, quantity, and snapshot. Variant is nullable and optional. Maps to shopping_mall_cart_items (creation variant)."},"IShoppingMallCartItem.IUpdate":{"type":"object","properties":{"shopping_mall_product_variant_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"New product variant id if changing variant. Nullable."},"quantity":{"type":"integer","description":"Update to the requested quantity."},"option_snapshot":{"type":"string","description":"Updated JSON snapshot of selected options (for evidence, after option/variant change)."}},"required":[],"description":"Fields for updating an existing cart item; all optional fields, supporting partial modification. Typically, only quantity, variant, or option snapshot will be updated."},"IShoppingMallCartSnapshot.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for paging snapshots."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Records per page."},"created_after":{"type":"string","format":"date-time","description":"Filter: only show snapshots created after this timestamp."},"created_before":{"type":"string","format":"date-time","description":"Filter: only show snapshots created before this timestamp."}},"required":[],"description":"Request DTO for searching/paginating shopping_mall_cart_snapshots. Enables snapshot history analysis for a cart; allows filtering by date, page, and limit."},"IShoppingMallCartSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique snapshot identifier for cart snapshot records."},"shopping_mall_cart_id":{"type":"string","format":"uuid","description":"Source cart instance {@link shopping_mall_carts.id}."},"snapshot_data":{"type":"string","description":"Immutable serialized JSON of the cart structure at snapshot time."},"created_at":{"type":"string","format":"date-time","description":"Snapshot creation timestamp (UTC ISO-8601)."}},"required":["id","shopping_mall_cart_id","snapshot_data","created_at"],"description":"Historical snapshot of a shopping cart instance for audit, compliance, and evidence retention. Stores point-in-time state of cart with all items and data before/after key changes, checkout, or deletion. Used for legal compliance, rollback, and dispute scenarios. Corresponds to shopping_mall_cart_snapshots table."},"IShoppingMallOrder.IRequest":{"type":"object","description":"Order list/search request DTO. For admin/backoffice—never exposed to public role users.","properties":{"status":{"type":"string","description":"Filter by order status."},"order_type":{"type":"string","description":"Filter by type."},"created_from":{"type":"string","format":"date-time","description":"Lower bound on created_at."},"created_to":{"type":"string","format":"date-time","description":"Upper bound on created_at."},"page":{"type":"integer","minimum":1,"description":"Page number (1-based)."},"limit":{"type":"integer","description":"Result count per page."}},"required":[]},"IShoppingMallOrder":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Order record UUID."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Order-placing customer {@link shopping_mall_customers.id}."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Target channel's UUID for the order."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Target section's UUID for the order."},"shopping_mall_cart_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Originating cart instance {@link shopping_mall_carts.id}. Nullable."},"external_order_ref":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reference to external order/payment systems for events or integrations."},"status":{"type":"string","description":"Order status (applied, payment_required, paid, in_fulfillment, shipping, delivered, completed, cancelled, split, etc)."},"order_type":{"type":"string","description":"Type of order (normal, split, group, aftersales, etc)."},"total_amount":{"type":"number","description":"Total order amount at application time."},"paid_amount":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Actual paid amount (may differ due to coupon, error correction, etc)."},"currency":{"type":"string","description":"Order currency."},"created_at":{"type":"string","format":"date-time","description":"Order creation time."},"updated_at":{"type":"string","format":"date-time","description":"Last update time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (for legal recovery, never physically deleted)."},"order_items":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderItem"},"description":"List of order items. Array of IShoppingMallOrderItem."},"payments":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallPayment"},"description":"List of payment records for this order."},"shipments":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallShipment"},"description":"List of shipment batches for this order."},"deliveries":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallDelivery"},"description":"List of deliveries for this order."},"after_sale_services":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAfterSaleService"},"description":"List of after-sales services for this order."}},"required":["id","shopping_mall_customer_id","shopping_mall_channel_id","shopping_mall_section_id","status","order_type","total_amount","currency","created_at","updated_at"],"description":"Main business order entity record. Ties customer, channel/section, and core order context. Supports multi-item, multi-seller, and multi-status (applied, paid, fulfilled, split, cancelled, etc). Legal evidence; all state transitions are snapshotted. Includes arrays for order items, payments, shipments, deliveries, after-sale services. Corresponds to shopping_mall_orders table."},"IShoppingMallOrder.ICreate":{"type":"object","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"ID of the customer placing the order."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel where the order is placed (sales channel/storefront UUID)."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Section/group within channel."},"shopping_mall_cart_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Originating cart instance to convert to order. May be null if direct order creation."},"external_order_ref":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reference to external system for integration, if any."},"order_type":{"type":"string","description":"Type of order being created: normal, split, group, etc."},"total_amount":{"type":"number","description":"Expected total amount of the order. Must match the sum/calculation of items added."},"currency":{"type":"string","description":"Order currency code, e.g., 'USD', 'KRW'."},"order_items":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallOrderItem.ICreate"},"description":"List of order items to include in the order."},"deliveries":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallDelivery.ICreate"},"description":"List of delivery instructions/recipients for the order."},"payments":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallPayment.ICreate"},"description":"Initial payment attempts or settlement allocation for this order."},"after_sale_services":{"type":"array","items":{"$ref":"#/components/schemas/IShoppingMallAfterSaleService.ICreate"},"description":"Related after-sales services to create with order, if any."}},"required":["shopping_mall_customer_id","shopping_mall_channel_id","shopping_mall_section_id","order_type","total_amount","currency","order_items","deliveries","payments"],"description":"Request payload structure for creating a new shopping mall order. Corresponds to creation-time columns in shopping_mall_orders and nested entities. Accepts all required keys for order workflow, excludes properties only available post-creation (ID, created_at, etc.). Includes nested create DTOs for items, payments, deliveries, etc."},"IShoppingMallOrder.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Order status (can only be updated per workflow)."},"order_type":{"type":"string","description":"Order type."},"paid_amount":{"type":"number","format":"double","description":"Paid amount (may be corrected)."},"currency":{"type":"string","description":"Order currency code."}},"required":[],"description":"**FIXED**: All properties are now optional, conforming to Partial<T> update DTO policy. This allows PATCH or partial update logic on allowed fields only. Included explicit required: [] to comply with JSON schema object requirements."},"IShoppingMallOrderItem.IRequest":{"type":"object","description":"Order item search/list request DTO.","properties":{"status":{"type":"string","description":"Filter by status."},"product_id":{"type":"string","format":"uuid","description":"Filter by product."},"page":{"type":"integer","minimum":1,"description":"Page number."},"limit":{"type":"integer","description":"Items per page."}},"required":[]},"IShoppingMallOrderItem":{"type":"object","x-samchon-prisma-schema":"shopping_mall_order_items","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of this order item."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Reference to the parent order's unique identifier. Indicates which order this order item belongs to."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Reference to the product being ordered."},"shopping_mall_product_variant_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional reference to the specific product variant/option being ordered, if any."},{"type":"null"}],"description":"Optional reference to the specific product variant/option being ordered, if any."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Seller responsible for fulfilling this order item."},"quantity":{"type":"integer","description":"The number of units for this order item."},"unit_price":{"type":"number","format":"double","description":"Unit price of the item at the time of order (before discounts are applied)."},"final_price":{"type":"number","format":"double","description":"Final price (per unit) after all discounts, coupons, and adjustments."},"discount_snapshot":{"oneOf":[{"type":"string","description":"Serialized snapshot of discounts/coupons applied to this order item at the time of order. Used for evidence, dispute, and rollback."},{"type":"null"}],"description":"Serialized snapshot of discounts/coupons applied to this order item at the time of order. Used for evidence, dispute, and rollback."},"status":{"type":"string","description":"Current status of the order item, e.g., 'ordered', 'paid', 'fulfilled', 'cancelled', 'returned', etc."},"created_at":{"type":"string","format":"date-time","description":"Datetime this order item was created."},"updated_at":{"type":"string","format":"date-time","description":"Datetime this order item was most recently updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp for historical tracking. Null if not deleted."},{"type":"null"}],"description":"Soft delete timestamp for historical tracking. Null if not deleted."}},"required":["id","shopping_mall_order_id","shopping_mall_product_id","shopping_mall_seller_id","quantity","unit_price","final_price","status","created_at","updated_at"],"description":"Main entity DTO for order item in the shopping mall order system. Represents one product or bundled component within an order. Contains all essential business fields, references, pricing and quantity, discount/evidence snapshot, status, and standard audit metadata. Directly matches the shopping_mall_order_items table in the database."},"IShoppingMallOrderItem.ICreate":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Required. The unique identifier of the order to which this item will belong. Must match an existing order."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Required. The product that is being added to this order item. Must match a valid product."},"shopping_mall_product_variant_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional. The specific variant (option combination) of the product being ordered. Nullable if no variant."},{"type":"null"}],"description":"Optional. The specific variant (option combination) of the product being ordered. Nullable if no variant."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Required. The seller responsible for this product. Must be assigned at create."},"quantity":{"type":"integer","description":"Required. Number of units of the product being ordered. Must be positive."},"unit_price":{"type":"number","format":"double","description":"Required. Unit price at order time before discounting."},"final_price":{"type":"number","format":"double","description":"Required. Final price per unit after all discounts/coupons applied (may be equal to unit_price if no discounts)."},"discount_snapshot":{"oneOf":[{"type":"string","description":"Optional. Serialized representation (e.g., JSON) of all discounts/coupons applied when this item was added to the order."},{"type":"null"}],"description":"Optional. Serialized representation (e.g., JSON) of all discounts/coupons applied when this item was added to the order."},"status":{"type":"string","description":"Initial status for this order item after creation, e.g. 'ordered', 'paid', etc."}},"required":["shopping_mall_order_id","shopping_mall_product_id","shopping_mall_seller_id","quantity","unit_price","final_price","status"],"description":"DTO for creating a new order item under an order. Used in POST order item operations, this includes all required business fields and references (order, product, seller), quantity, pricing, discount snapshot, variant/option reference, and initial status. All required fields must be supplied in create requests and validated against the current product/order/seller status. Based on shopping_mall_order_items schema."},"IShoppingMallOrderItem.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_order_items","description":"Patch update to order item; any field optional.","properties":{"status":{"type":"string","description":"New status."},"final_price":{"type":"number","format":"double","description":"Update/correct final price."}},"required":[]},"IShoppingMallOrderSnapshot.IRequest":{"type":"object","properties":{"order_snapshot_id":{"type":"string","format":"uuid","description":"Query for a specific snapshot by its unique ID (optional)."},"created_at_start":{"type":"string","format":"date-time","description":"ISO 8601 timestamp representing the start of the creation time filter. Only snapshots created after or at this time are included (optional)."},"created_at_end":{"type":"string","format":"date-time","description":"ISO 8601 timestamp representing the end of the creation time filter. Only snapshots created before or at this time are included (optional)."},"page":{"type":"integer","description":"Page number for pagination. Starts at 1. Default is 1. Optional."},"limit":{"type":"integer","description":"Number of records per page. Default is 20, maximum is 100. Optional."}},"required":[],"description":"Request search/filter parameters for listing order snapshots. Used for advanced audit, compliance, evidence, or rollback operations in the shopping_mall_order_snapshots table. All fields are optional; if not provided, the list will include all accessible snapshots with system defaults for pagination.\n\nPagination is server controlled; clients can set 'limit' and 'page' fields to navigate results. Snapshots are typically ordered from newest to oldest by created_at."},"IShoppingMallOrderSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the order snapshot record. Maps to the 'id' field of shopping_mall_order_snapshots."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the shopping mall order this snapshot refers to."},"snapshot_data":{"type":"string","description":"Immutable serialized (JSON or structured string) record of the order at snapshot moment, including all business fields and related items/payments. Used for audit, rollback, or compliance recovery."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the snapshot was created. Indicates the point-in-time version of the order entity."}},"required":["id","shopping_mall_order_id","snapshot_data","created_at"],"description":"Order snapshot record. Represents the full state of an order as captured in shopping_mall_order_snapshots at a particular business event or system mutation (creation, update, cancellation, status change, etc).\n\nFields provide complete evidentiary context for audit, dispute, and recovery, storing all relevant order details as a serialized object. Each snapshot is immutable; the full order entity can be reconstructed at the given moment in system history."},"IShoppingMallPayment.IRequest":{"type":"object","properties":{"payment_id":{"type":"string","format":"uuid","description":"Specific payment record (UUID) to retrieve or operate on (optional)."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order UUID for which to list or search payment records (optional; if not provided, returns all matching payments accessible in scope)."},"payment_type":{"type":"string","description":"Type of payment to filter for (e.g., 'card', 'virtual_account', 'deposit', 'mileage', 'split', etc). Enum defined by business logic; optional."},"status":{"type":"string","description":"Payment status to filter for (e.g., 'pending', 'paid', 'cancelled', 'failed', 'refunded', etc). Enum defined by business logic. Optional."},"date_from":{"type":"string","format":"date-time","description":"ISO 8601 starting timestamp filter—include only payments on or after this date (optional)."},"date_to":{"type":"string","format":"date-time","description":"ISO 8601 ending timestamp filter—include only payments on or before this date (optional)."},"currency":{"type":"string","description":"Currency code filter (optional)—search only payments matching a given currency, e.g., 'USD', 'KRW', etc."},"external_payment_ref":{"type":"string","description":"External payment reference string (optional) for searching on a specific gateway/provider/payment system's reference field."},"page":{"type":"integer","description":"Pagination control: page number (starts at 1). Optional; default is 1."},"limit":{"type":"integer","description":"Pagination control: number of payments per page. Optional; default is 20, maximum is 100."}},"required":[],"description":"Search filter and pagination request schema for listing and retrieving payment records tied to shopping_mall_orders via shopping_mall_payments. All fields are optional, supporting complex business filter logic for audit, reconciliation, analytics, or support/CS scenarios. Pagination fields follow system conventions. The schema aligns with business requirements for robust payment analytics, fraud review, and refund/investigation workflows. Do not include fields that do not exist in the shopping_mall_payments table."},"IShoppingMallPayment":{"type":"object","x-samchon-prisma-schema":"shopping_mall_payments","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier of the payment record."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Linked order id from shopping_mall_orders. Identifies which order this payment is for."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Paying customer id from shopping_mall_customers."},"payment_type":{"type":"string","description":"Type of payment. E.g.: 'card', 'virtual_account', 'deposit', 'mileage', 'split', etc."},"external_payment_ref":{"oneOf":[{"type":"string","description":"External system payment reference string, such as a PSP transaction ID, virtual account number, or payment gateway reference. Nullable for payment types that do not use an external payment system (e.g., internal deposit, mileage, etc.)."},{"type":"null","description":"Null if the payment does not have any external system reference or such a reference is inapplicable to the payment type."}],"description":"External system payment reference string, such as a PSP transaction ID, virtual account number, or payment gateway reference. Nullable for payment types that do not use an external payment system (e.g., internal deposit, mileage, etc.)."},"status":{"type":"string","description":"Payment status. E.g.: 'pending', 'paid', 'cancelled', 'failed', 'refunded', etc."},"amount":{"type":"number","description":"Amount covered by this payment."},"currency":{"type":"string","description":"Currency of transaction (system supports multi-currency)."},"requested_at":{"type":"string","format":"date-time","description":"Time payment was initiated (ISO-8601 UTC format)."},"confirmed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when this payment was confirmed by the business logic, payment processor, or settlement module. Null if not yet confirmed."},{"type":"null","description":"Null if the payment has not been confirmed or confirmation is not applicable for this status/type."}],"description":"Timestamp (ISO 8601) when this payment was confirmed by the business logic, payment processor, or settlement module. Null if not yet confirmed."},"cancelled_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when payment was cancelled/refunded. Null if not cancelled/refunded."},{"type":"null","description":"Null if the payment has not been cancelled or refunded."}],"description":"Timestamp (ISO 8601) when payment was cancelled/refunded. Null if not cancelled/refunded."},"created_at":{"type":"string","format":"date-time","description":"Row creation time (for audit trail)."},"updated_at":{"type":"string","format":"date-time","description":"Row last update time (for audit trail)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp if the payment has been logically deleted for compliance/evidence. Null if not logically deleted."},{"type":"null","description":"Null if the payment is not logically deleted."}],"description":"Soft deletion timestamp if the payment has been logically deleted for compliance/evidence. Null if not logically deleted."}},"required":["id","shopping_mall_order_id","shopping_mall_customer_id","payment_type","status","amount","currency","requested_at","created_at","updated_at"],"description":"A payment record associated with a shopping mall order. Tracks each payment, refund, or settlement method flow. Includes support for asynchronous payment, multiple partial payments, per-channel payment configuration. Indexed for audit/tracing."},"IShoppingMallPayment.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_payments","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Linked order {@link shopping_mall_orders.id}."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Paying customer {@link shopping_mall_customers.id}."},"payment_type":{"type":"string","description":"Payment type (e.g., 'card', 'virtual_account', 'deposit', 'mileage', 'split')."},"external_payment_ref":{"oneOf":[{"type":"string","description":"External system payment reference string such as third-party transaction id, PSP ref, or virtual account number. Nullable for payment types that do not use an external ref (e.g., internal deposit, mileage, etc.)."},{"type":"null","description":"Null if no external reference is provided or not applicable for this payment type."}],"description":"External system payment reference string such as third-party transaction id, PSP ref, or virtual account number. Nullable for payment types that do not use an external ref (e.g., internal deposit, mileage, etc.)."},"status":{"type":"string","description":"Initial payment status (e.g., 'pending')."},"amount":{"type":"number","description":"Amount covered by this payment."},"currency":{"type":"string","description":"Currency of transaction (system supports multi-currency)."},"requested_at":{"type":"string","format":"date-time","description":"Time payment was requested/initiated (ISO-8601 UTC format)."}},"required":["shopping_mall_order_id","shopping_mall_customer_id","payment_type","status","amount","currency","requested_at"],"description":"Information required to create a new payment record for an order. Includes payment type, status, order/customer linkage, amount, currency, external ref, and timestamp. Follows shopping_mall_payments schema."},"IShoppingMallPayment.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_payments","properties":{"payment_type":{"type":"string","description":"Payment type to update (e.g., 'card', 'virtual_account', etc.)."},"external_payment_ref":{"oneOf":[{"type":"string","description":"External payment system reference to update to (e.g., PSP ref, virtual account id, etc.). May be set to null to clear existing ref."},{"type":"null","description":"Null if the external payment reference should be removed for this payment record."}],"description":"External payment system reference to update to (e.g., PSP ref, virtual account id, etc.). May be set to null to clear existing ref."},"status":{"type":"string","description":"Update the status of the payment record (e.g., 'paid', 'cancelled', etc.)."},"amount":{"type":"number","description":"Update the amount, if correction/adjustment is required."},"currency":{"type":"string","description":"Currency of the payment after update (if adjustment/spillover occurs)."},"requested_at":{"type":"string","format":"date-time","description":"Updated ISO8601 time (UTC) payment request was sent, if changed."},"confirmed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Updated confirmation time (ISO8601, UTC). Null if not applicable."},{"type":"null","description":"Null if the payment was not (re-)confirmed or data should be cleared."}],"description":"Updated confirmation time (ISO8601, UTC). Null if not applicable."},"cancelled_at":{"oneOf":[{"type":"string","format":"date-time","description":"Updated cancellation/refund time (ISO8601, UTC). Null if not cancelled/refunded."},{"type":"null","description":"Null if the cancellation/refund time should be cleared."}],"description":"Updated cancellation/refund time (ISO8601, UTC). Null if not cancelled/refunded."},"updated_at":{"type":"string","format":"date-time","description":"Update timestamp (should be set to the request/audit event time if provided, otherwise handled by backend)."}},"required":[],"description":"Fields that can be updated on a payment record. All fields are optional; use only to update payment type, status, external ref, amount, times, or currency as per payment update API."},"IShoppingMallPaymentSnapshot.IRequest":{"type":"object","properties":{"shopping_mall_payment_id":{"type":"string","format":"uuid","description":"The ID of the payment whose snapshots should be listed."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Only include snapshots created_at after this (inclusive) time (ISO-8601 UTC)."},{"type":"null","description":"Null to ignore lower bound on created_at."}],"description":"Only include snapshots created_at after this (inclusive) time (ISO-8601 UTC)."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"Only include snapshots created_at before this (inclusive) time (ISO-8601 UTC)."},{"type":"null","description":"Null to ignore upper bound on created_at."}],"description":"Only include snapshots created_at before this (inclusive) time (ISO-8601 UTC)."},"limit":{"type":"integer","description":"How many records to fetch per page. Default 50."},"page":{"type":"integer","description":"Page number, starting from 1."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort by a supported field (created_at or id)."},{"const":"id","description":"Sort by a supported field (created_at or id)."}],"description":"Sort by a supported field (created_at or id)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order (ascending or descending)."},{"const":"desc","description":"Sort order (ascending or descending)."}],"description":"Sort order (ascending or descending)."}},"required":["shopping_mall_payment_id"],"description":"Request parameters for searching, paginating, or filtering payment snapshot records in shopping_mall_payment_snapshots. Allows querying by payment ID, date range, paging, sorting, etc."},"IShoppingMallPaymentSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the payment snapshot record. Uniquely identifies one immutable, point-in-time snapshot of a payment in the system."},"shopping_mall_payment_id":{"type":"string","format":"uuid","description":"Reference to the source payment (shopping_mall_payments.id) for which this snapshot was captured. Enables resolution of current vs historic state of a payment object."},"snapshot_data":{"type":"string","description":"Serialized, immutable snapshot of the payment state at this audit event. Contains all business properties (amount, status, payment type, references, timestamps, etc.) as of the snapshot time, typically in JSON format for easy audit/rollback."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601, UTC) when the payment snapshot was created. Indicates exact moment of evidence capture and is used for audit ordering."}},"required":["id","shopping_mall_payment_id","snapshot_data","created_at"],"description":"A snapshot of a payment's state, captured at an audit-relevant event (such as requested, confirmed, cancelled, refunded). Used for legal traceability, dispute reconstruction, and compliance with financial evidence requirements. Immutable after creation. Often referenced by compliance and analytics modules. Maps directly to the shopping_mall_payment_snapshots table. Includes snapshot details per business and audit rules.","x-samchon-prisma-schema":"shopping_mall_payment_snapshots"},"IShoppingMallShipment.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Page number of results (1-based). Must be a positive integer if specified."},{"type":"null"}],"description":"Page number for paginated search (optional). If not provided, defaults to first page."},"limit":{"oneOf":[{"type":"integer","minimum":1,"description":"Maximum number of records to return per page. Used for pagination control. Must be a positive integer if specified."},{"type":"null"}],"description":"Limit of records per page for pagination. If not specified, the system default is applied."},"status":{"type":"string","description":"Filter for shipment records by shipment status (pending, shipped, delivered, etc). Status values are as defined by business requirements and the shopping_mall_shipments.status column. Optional. If excluded, all statuses are included."},"shipment_code":{"type":"string","description":"Shipment code or tracking number filter. Enables search for a specific shipment batch by its business-unique identifier. Optional."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Seller responsible for the shipment. Used to filter for shipments managed by a particular seller. Optional."},"created_from":{"type":"string","format":"date-time","description":"Start of the creation date range for filtering (inclusive). Only returns shipments created at or after this time. ISO 8601 UTC format. Optional."},"created_to":{"type":"string","format":"date-time","description":"End of the creation date range for filtering (inclusive). Only returns shipments created at or before this time. ISO 8601 UTC format. Optional."}},"required":[],"description":"Search, filter, and pagination parameters for retrieving shopping mall shipments. Used in shipment list endpoints. Optional fields provide flexibility for targeted queries. Field semantics are bound to the shopping_mall_shipments schema."},"IShoppingMallShipment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the shipment batch record. Uniquely identifies a shipment transaction in the system."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Reference to the main order (shopping_mall_orders.id) this shipment is fulfilling. Connects shipment batch to business order context."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"The seller responsible for fulfillment of this shipment batch. Used for multi-seller/split-shipment support."},"shipment_code":{"type":"string","description":"System or business-unique shipment code for batch tracking, potentially mapped to external logistics or carrier tracking codes. Non-null."},"external_tracking_number":{"type":"string","description":"External carrier's shipment tracking number. Set if provided by third-party logistics/fulfillment integration. Nullable."},"status":{"type":"string","description":"Status of shipment batch. Example values: pending, shipped, delivered, returned, cancelled, etc. Status rules are governed by business process; see schema documentation."},"carrier":{"type":"string","description":"Carrier/service used for this shipment batch. Nullable; set if logistics partner is assigned."},"requested_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of shipment initiation, null if not yet requested."},{"type":"null"}],"description":"Datetime when the shipment batch was requested for fulfillment (nullable)."},"shipped_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when goods were handed over to carrier (nullable)."},{"type":"null"}],"description":"Datetime when goods were shipped (nullable, set when shipment is outbound)."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when shipment delivery was confirmed (nullable)."},{"type":"null"}],"description":"Datetime when shipment was delivered (nullable, set on completed delivery)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601/UTC) when shipment record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601/UTC) when shipment record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp (ISO 8601/UTC) when this shipment record was soft-deleted (nullable)."},{"type":"null"}],"description":"Indicates logical deletion for compliance/audit, or null if still active."}},"required":["id","shopping_mall_order_id","shopping_mall_seller_id","shipment_code","status","created_at","updated_at"],"description":"Represents a shipment batch associated with an order. Corresponds to a physical or logical fulfillment event in the mall platform. Handles multi-seller/split fulfillment, status tracking, carrier/integration meta, and audit fields. Soft deletion is enforced for compliance. Maps directly to shopping_mall_shipments table. For additional detail, see shopping_mall_shipment_items (not in this object).","x-samchon-prisma-schema":"shopping_mall_shipments"},"IShoppingMallShipment.ICreate":{"type":"object","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Foreign key referencing the parent order (shopping_mall_orders.id) for which this shipment batch is being created. Required."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Foreign key referencing the seller responsible for this shipment batch (shopping_mall_sellers.id). Determines fulfillment and operational permissions. Required."},"shipment_code":{"type":"string","description":"Business-unique code identifying this shipment batch. Used for internal and external tracking."},"external_tracking_number":{"type":"string","description":"External carrier's shipment/tracking number (optional, set only if integrating with outside logistics/carrier APIs). Nullable."},"carrier":{"type":"string","description":"Carrier/logistics provider information (optional; null or blank for self-fulfillment, string value for external partner)."},"requested_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime requested for fulfillment (ISO 8601, UTC). Only set if request initiated immediately; generally nullable for planned shipments."},{"type":"null"}],"description":"Initial fulfillment requested datetime (nullable)."},"status":{"type":"string","description":"Initial status of this shipment batch (e.g., 'pending', 'requested'). Used to indicate start of shipment workflow. Status must align to business logic as per shopping_mall_shipments.status. Required."}},"required":["shopping_mall_order_id","shopping_mall_seller_id","shipment_code","status"],"description":"Creation schema for a new shipment batch within an order. Used to establish fulfillment, logistics, and carrier metadata at shipment registration. May be referenced by subsequent shipment item creation. Only allows fields that exist in shopping_mall_shipments schema and are writable at creation. Audit fields and update meta are managed by the backend system. See shopping_mall_shipments documentation.","x-samchon-prisma-schema":"shopping_mall_shipments"},"IShoppingMallShipment.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_shipments","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Parent order ID this shipment belongs to. References shopping_mall_orders.id."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Seller responsible for this shipment batch (shopping_mall_sellers.id)."},"shipment_code":{"type":"string","description":"Unique shipment code for tracking. Used for logistics and fulfillment reference."},"external_tracking_number":{"type":"string","description":"Tracking number as provided by the external logistics/courier. May be null if not assigned yet."},"status":{"type":"string","description":"Shipment status (e.g., pending, shipped, delivered, returned, cancelled, etc). Must match status business rules and enum set used in system."},"carrier":{"type":"string","description":"Carrier/logistics provider name if present. Nullable."},"requested_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime the shipment was requested/allocated. Nullable - can be set or cleared."},"shipped_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime when goods were turned over to carrier. Nullable."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Time when delivery was confirmed by tracking system or recipient. Nullable."}},"required":[],"description":"DTO for updating an existing shipment batch/session.\n\nAllows updating carrier/tracking info, status, and fulfillment-related fields. Only fields that exist in shopping_mall_shipments schema may be set. Fields not provided will not be changed. Used by authorized sellers/admins to manage shipment status during the order lifecycle.\n\nTimestamps are nullable and may be set/cleared per fulfillment rules. All updates are snapshotted for audit per compliance. Business logic may restrict transitions/status depending on current state (e.g. can't mark as delivered before shipped, etc).\n\nDoes NOT permit changing shipment id, order foreign key, or seller id after shipment is created."},"IShoppingMallShipmentItem.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination. Must be >= 1; default is 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records to return per page. Default: 20, Max: 100."},"order_item_id":{"type":"string","format":"uuid","description":"Filter by the unique order item (shopping_mall_order_items.id) related to this shipment item."},"product_id":{"type":"string","format":"uuid","description":"Optional filter for all items for a given product (shopping_mall_products.id)."},"status":{"type":"string","description":"(Optional) Filter by status or business state for shipment items, if such state is tracked (e.g., only active/unshipped)."}},"required":[],"description":"Request DTO for searching, filtering, and paginating shipment items linked to a shipment batch.\n\nAllows filtering by parent order item, product, or (if modeled) shipment item status. Provides page/limit for pagination, supporting high-volume batch fulfillment and audit UIs.\n\nFields must map directly to filterable fields in shopping_mall_shipment_items or its relationships. Used by advanced fulfillment dashboards, admin audit tools, or seller shipment item query screens."},"IShoppingMallShipmentItem":{"type":"object","x-samchon-prisma-schema":"shopping_mall_shipment_items","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this shipment item entry (PK, shopping_mall_shipment_items.id)."},"shopping_mall_shipment_id":{"type":"string","format":"uuid","description":"ID of the parent shipment batch (shopping_mall_shipments.id)."},"shopping_mall_order_item_id":{"type":"string","format":"uuid","description":"ID of the associated order item (shopping_mall_order_items.id)."},"shipped_quantity":{"type":"integer","description":"Number of units of the order item shipped in this batch. Must be >= 1."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the shipment item record was created (ISO 8601, system UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last update to this record (audit and evidence compliance, ISO 8601)."}},"required":["id","shopping_mall_shipment_id","shopping_mall_order_item_id","shipped_quantity","created_at","updated_at"],"description":"Represents a row in the shipment-item batch table (shopping_mall_shipment_items).\n\nDefines which order item is shipped in the current batch, how many units, and preserves essential audit information. Used for traceability and evidence in split/multi-shipment scenarios in the shopping mall platform.\n\nAll references are by UUID to ensure robust cross-entity linkage. Creation and update timestamps are required to support audit trail and evidence compliance in fulfillment and customer support workflows."},"IShoppingMallShipmentItem.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_shipment_items","properties":{"shopping_mall_order_item_id":{"type":"string","format":"uuid","description":"ID of the order item (shopping_mall_order_items.id) to be shipped."},"shipped_quantity":{"type":"integer","minimum":1,"description":"Number of units to mark as shipped in this shipment batch. Must be >= 1. Must not exceed remaining unshipped quantity on the order item."}},"required":["shopping_mall_order_item_id","shipped_quantity"],"description":"DTO for creating a new shipment item attached to a shipment batch.\n\nRequires the order item reference and the shipped quantity (>= 1, must not exceed open fulfillment for this order item). References shopping_mall_shipment_items schema fields.\n\nUsed by sellers/admins to register which order item/\nbundle/sku is fulfilled in a particular shipment, how many units are shipped, and to enable downstream delivery tracking, evidence, and inventory logic.\n\nBusiness validation enforces that the target order item exists, is eligible for shipment, and has sufficient quantity remaining for the given shipped_quantity."},"IShoppingMallShipmentItem.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_shipment_items","description":"Update object for a shipment item in an order shipment batch. Represents changes to the number of units shipped for an order item in a specific shipment as part of order fulfillment. Only 'shipped_quantity' (the quantity shipped in this item-batch) is updatable; all IDs are immutable for audit trail and compliance. Used by logistics workflows for correcting fulfillment errors or handling batch/split shipments. All updates are snapshotted for evidence and audit, and are only allowed for shipment items not marked as shipped/delivered. This object must match the shopping_mall_shipment_items schema and only contain updatable fields.","properties":{"shipped_quantity":{"type":"integer","description":"The updated quantity of this order item included in the shipment batch. Must be a non-negative integer and not exceed the remaining quantity available for shipment from the order item. Use this to update shipment counts in partial, batch, or correction scenarios. Required for any update to the shipment item. If set to zero, indicates removal of all quantities from this shipment batch."}},"required":["shipped_quantity"]},"IShoppingMallDelivery.IRequest":{"type":"object","description":"Request object for searching, filtering, and paginating delivery records associated with an order. Allows advanced querying by delivery_status, shipment ID, recipient, address, confirmation state, delivery attempts, and time periods. Used by fulfillment monitoring, after-sales, and customer UX for order delivery management and analytics. Supports paging and sort controls.","properties":{"page":{"type":"integer","description":"Page number for pagination. Starts at 1. Optional, for paginated results."},"limit":{"type":"integer","description":"Maximum number of results per page. Optional; defaults to a system-configured value or 20/50."},"delivery_status":{"type":"string","description":"Delivery status to filter results (e.g., 'prepared', 'dispatched', 'delivered', 'confirmed', etc). Must match actual system status values from the database."},"recipient_name":{"type":"string","description":"Filter results for deliveries matching recipient's name (case-insensitive partial match allowed). Optional."},"recipient_phone":{"type":"string","description":"Filter for deliveries to this contact phone number. Exact match or partial, business policy dependent. Optional."},"shipment_id":{"type":"string","format":"uuid","description":"Shipment UUID filter; returns only deliveries associated with the given shipment batch."},"confirmed_at_from":{"type":"string","format":"date-time","description":"ISO8601 lower-bound for confirmed_at field (i.e., only deliveries confirmed after this datetime). Optional."},"confirmed_at_to":{"type":"string","format":"date-time","description":"ISO8601 upper-bound for confirmed_at field. Optional."},"created_at_from":{"type":"string","format":"date-time","description":"Lower-bound for delivery record creation date. Optional."},"created_at_to":{"type":"string","format":"date-time","description":"Upper-bound for delivery record creation date. Optional."},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort field for delivery search. Must be one of the allowed enum values."},{"const":"recipient_name","description":"Sort field for delivery search. Must be one of the allowed enum values."},{"const":"delivery_status","description":"Sort field for delivery search. Must be one of the allowed enum values."},{"const":"confirmed_at","description":"Sort field for delivery search. Must be one of the allowed enum values."}],"description":"Sort field for delivery search. Must be one of the allowed enum values."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction for deliveries (ascending/descending). Optional, default is 'desc'."},{"const":"desc","description":"Sort direction for deliveries (ascending/descending). Optional, default is 'desc'."}],"description":"Sort direction for deliveries (ascending/descending). Optional, default is 'desc'."}},"required":[]},"IShoppingMallDelivery":{"type":"object","x-samchon-prisma-schema":"shopping_mall_deliveries","description":"Detailed entity type representing an order's delivery window/address in the shopping mall platform. Each record specifies where, to whom, and under what delivery instructions an order (or shipment batch) should be delivered. Includes address snapshot (immutable at delivery creation), recipient, contact info, status, delivered/confirmed state, and metadata for audit/evidence. Used in multi-fulfillment scenarios and international logistics. All fields reflect the shopping_mall_deliveries Prisma schema, including status and audit meta. Links to downstream after-sales and compliance modules. Sensitive information is included only for authorized actors (customer, seller, admin).","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the delivery record (primary key)."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Foreign key to the parent order. Uniquely identifies which order this delivery belongs to."},"shopping_mall_shipment_id":{"type":"string","format":"uuid","description":"Optional foreign key to the shipment this delivery is mapped to, if shipment is tracked in split delivery scenarios. May be null if the delivery is global for the order."},"recipient_name":{"type":"string","description":"Name of the delivery recipient as submitted for the order/delivery. Used for courier handover and compliance."},"recipient_phone":{"type":"string","description":"Contact phone number for the recipient. May be regionally formatted. Used for delivery coordination."},"address_snapshot":{"type":"string","description":"Full delivery address (structured or serialized) as captured at the moment of delivery creation. Used for immutable evidence and compliance."},"delivery_message":{"type":"string","description":"Customer-provided message or instruction for the courier/logistics provider. Optional."},"delivery_status":{"type":"string","description":"The current delivery status: 'prepared', 'dispatched', 'delivered', 'returned', 'failed', 'confirmed', or other allowed system statuses. Indicates physical fulfillment process."},"confirmed_at":{"type":"string","format":"date-time","description":"Timestamp indicating when delivery was completed and confirmed by customer/system. Null if delivery is still in process."},"delivery_attempts":{"type":"integer","description":"Number of attempts made to deliver the order. Increases on each failed/missed delivery attempt."},"created_at":{"type":"string","format":"date-time","description":"Datetime delivery record was created."},"updated_at":{"type":"string","format":"date-time","description":"Datetime delivery record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the delivery record. Null if delivery is active."}},"required":["id","shopping_mall_order_id","recipient_name","recipient_phone","address_snapshot","delivery_status","delivery_attempts","created_at","updated_at"]},"IShoppingMallDelivery.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_deliveries","description":"Creation DTO for a new delivery record for an order in the shopping mall platform. Used to register a delivery window, recipient, and address at ordering/fulfillment time. This object is passed during initial creation of delivery records and does not include system timestamps or audit meta fields (which are set automatically). All required properties must be populated for a valid delivery. This DTO is referenced only during insert and not for updates.","properties":{"shopping_mall_order_id":{"type":"string","format":"uuid","description":"UUID reference to the order for which this delivery is created. Must match a valid shopping_mall_orders record."},"shopping_mall_shipment_id":{"type":"string","format":"uuid","description":"Optional UUID reference to the shipment batch this delivery corresponds to. Use if doing split/multi-shipment deliveries; may be null."},"recipient_name":{"type":"string","description":"Delivery recipient name (as it will appear to courier/logistics). Required."},"recipient_phone":{"type":"string","description":"Delivery recipient's contact phone number. Must be valid for region/country; required."},"address_snapshot":{"type":"string","description":"Serialized address of the recipient at the point of delivery creation. Must include all fields necessary for courier/delivery provider. Optional or required based on platform settings."},"delivery_message":{"type":"string","description":"Delivery message or customer comment for logistics (instructions, access notes, etc). Optional."},"delivery_status":{"type":"string","description":"Initial delivery status for the record, typically 'prepared', 'pending', or other allowed status based on workflow rules. Required."},"delivery_attempts":{"type":"integer","description":"Initial number of delivery attempts (typically 0 or 1 when first created). Required."}},"required":["shopping_mall_order_id","recipient_name","recipient_phone","delivery_status","delivery_attempts"]},"IShoppingMallDelivery.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_deliveries","properties":{"recipient_name":{"type":"string","description":"Recipient name at time of delivery. When updating, supply the new recipient name per delivery record policy. Maps directly to shopping_mall_deliveries.recipient_name."},"recipient_phone":{"type":"string","description":"Contact phone of recipient. Updated if delivery recipient phone changes. See shopping_mall_deliveries.recipient_phone."},"address_snapshot":{"type":"string","description":"Full delivery address/final snapshot for compliance/audit. When updating, provide new full address as serialized (JSON, string). Preserves audit evidence. See shopping_mall_deliveries.address_snapshot."},"delivery_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User-supplied delivery message/instructions; nullable. Provided in update payload if notes or delivery message change. See shopping_mall_deliveries.delivery_message."},"delivery_status":{"type":"string","description":"Updated delivery status (prepared, dispatched, delivered, returned, failed, confirmed, etc). Controls allowed transitions according to platform business rules. See shopping_mall_deliveries.delivery_status."},"confirmed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"New confirmation time (ISO8601, date-time) for successful delivery. Nullable; only set when confirming delivery. Maps to shopping_mall_deliveries.confirmed_at."},"delivery_attempts":{"type":"integer","description":"If business logic allows updating attempts, provide new total number of delivery attempts. See shopping_mall_deliveries.delivery_attempts."}},"description":"Update payload for a delivery address record in shopping_mall_deliveries. This type is used to update delivery information including the recipient, contact, address, delivery message, status, and confirmation time per delivery and evidence/audit requirements. Only include fields to be updated.","required":["recipient_name","recipient_phone","address_snapshot","delivery_status","delivery_attempts"]},"IShoppingMallAfterSaleService.IRequest":{"type":"object","properties":{"case_type":{"type":"string","description":"Type of case (return, exchange, refund, repair, etc). String value matches shopping_mall_after_sale_services.case_type for searching specific types."},"status":{"type":"string","description":"Status (requested, processing, approved, denied, in_delivery, completed, cancelled). See shopping_mall_after_sale_services.status. Used for status filtering."},"reason":{"type":"string","description":"Text for user-provided reason, supports filtering or search. Maps to shopping_mall_after_sale_services.reason."},"created_from":{"type":"string","format":"date-time","description":"Optional ISO8601 timestamp to filter query by after-sales service creation timestamp >= this value."},"created_to":{"type":"string","format":"date-time","description":"Optional ISO8601 timestamp to filter query by after-sales service creation timestamp <= this value."},"page":{"type":"integer","description":"Pagination page number. Optional."},"limit":{"type":"integer","description":"Pagination limit per page. Optional."}},"required":[],"description":"Search/pagination/filter schema for querying after-sales service records. Applies standard pagination, status/case filtering, and reason/text search for after-sales services. Includes time range filtering for creation date if needed. Used for PATCH after-sale-service search endpoints."},"IShoppingMallAfterSaleService":{"type":"object","x-samchon-prisma-schema":"shopping_mall_after_sale_services","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key (UUID). Uniquely identifies this after-sales service record in shopping_mall_after_sale_services table."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Referenced order's ID for this after-sales case. Maps to shopping_mall_after_sale_services.shopping_mall_order_id for foreign key relation."},"shopping_mall_delivery_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Referenced delivery ID if after-sales case is linked to a delivery record. Nullable. See shopping_mall_after_sale_services.shopping_mall_delivery_id."},"case_type":{"type":"string","description":"Type of case (return, exchange, refund, repair, etc). Controls after-sales business flow. See shopping_mall_after_sale_services.case_type."},"status":{"type":"string","description":"Case status (requested, processing, approved, denied, in_delivery, completed, cancelled). See shopping_mall_after_sale_services.status."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user-supplied reason for request. Text field, audit/evidence context. See shopping_mall_after_sale_services.reason."},"evidence_snapshot":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reference to order/delivery/item snapshots at time of request. Optional; for audit or dispute evidence. See shopping_mall_after_sale_services.evidence_snapshot."},"resolution_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Resolution information from platform/seller/support. Null unless resolved. See shopping_mall_after_sale_services.resolution_message."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp in ISO8601 UTC time. See shopping_mall_after_sale_services.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update UTC timestamp for this after-sales record. Syncs to shopping_mall_after_sale_services.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (logical delete). Null if active. See shopping_mall_after_sale_services.deleted_at."}},"description":"Full after-sales service entity as persisted in shopping_mall_after_sale_services. Includes order/delivery reference, case details, status, evidence, resolution info, and audit timestamps. Used for detail queries, service process, compliance, and audit/recovery. All fields align directly with Prisma schema.","required":["id","shopping_mall_order_id","case_type","status","created_at","updated_at"]},"IShoppingMallAfterSaleService.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_after_sale_services","properties":{"case_type":{"type":"string","description":"Type of after-sales case (return, exchange, refund, repair, etc). Required at creation; determines workflow. Matches shopping_mall_after_sale_services.case_type."},"shopping_mall_delivery_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional delivery ID if after-sales request is attached to a delivery (split/partial shipments, evidence). Null if not used."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User-supplied reason for request (text). Required for most customer-initiated cases; audit/evidence. Maps to shopping_mall_after_sale_services.reason."},"evidence_snapshot":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reference/evidence snapshot for the after-sales event. Used for compliance/audit disputes. Nullable."},"resolution_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Can be provided if resolution info is supplied at creation (rare). Usually set later in admin/seller workflow."}},"required":["case_type"],"description":"Creation schema for an after-sales service record. Used when customer or business files a new after-sales request on order/delivery. Required: case_type (flow), and optionally delivery linkage, free-text reason, snapshot evidence, and pre-supplied resolution message if available (most workflows set this later via update). Referenced by POST after-sales create endpoints and direct prisma insert logic."},"IShoppingMallAfterSaleService.IUpdate":{"type":"object","description":"DTO for updating an after-sales (return/exchange/refund/etc.) service. Only fields existing in the Prisma schema can be updated. All fields are optional for partial update pattern. Used by after-sales management endpoints to edit case status, evidence, reason, or resolution.","properties":{"case_type":{"type":"string","description":"Type of after-sales service (e.g., 'return', 'exchange', 'refund', 'repair'). Must match one of the values used in the business context. Not required for all updates."},"status":{"type":"string","description":"Current status of the after-sales case (e.g., 'requested', 'processing', 'approved', 'denied', 'in_delivery', 'completed', 'cancelled')."},"reason":{"type":"string","description":"(Optional) User-provided reason for the after-sales request. Used for customer explanation, support review, or compliance evidence purposes."},"evidence_snapshot":{"type":"string","description":"(Optional) Reference (e.g., snapshot URL or evidence ID) to the snapshot or evidence record related to the after-sales service."},"resolution_message":{"type":"string","description":"(Optional) Human-readable resolution or update message from platform, seller, or support, giving context for case decision or finalization."}},"required":[]},"IShoppingMallCoupon.IRequest":{"type":"object","description":"DTO for searching and filtering coupons in the shopping mall platform. Used in listing, pagination, admin/seller dashboards for advanced filtering. Include only existing fields in principal model. All fields optional for flexible query.","properties":{"code":{"type":"string","description":"Coupon code for exact or partial match search."},"coupon_type":{"type":"string","description":"Type of coupon to filter (e.g., 'public', 'private', 'one-time')."},"discount_type":{"type":"string","description":"Type of discount the coupon provides (e.g., 'amount', 'percentage', 'free_shipping')."},"business_status":{"type":"string","description":"Workflow/business status filter for coupon (e.g., 'active', 'draft', 'paused', 'expired')."},"title":{"type":"string","description":"Filter by coupon title (full/partial match)."},"issued_at_from":{"type":"string","format":"date-time","description":"ISO8601 date-time filter for coupons issued after this timestamp (inclusive)."},"issued_at_to":{"type":"string","format":"date-time","description":"ISO8601 date-time filter for coupons issued before this timestamp (inclusive)."},"expires_at_from":{"type":"string","format":"date-time","description":"ISO8601 date-time filter for coupons expiring after this timestamp (inclusive)."},"expires_at_to":{"type":"string","format":"date-time","description":"ISO8601 date-time filter for coupons expiring before this timestamp (inclusive)."},"stackable":{"type":"boolean","description":"Search for stackable (true) or exclusive (false) coupons."},"exclusive":{"type":"boolean","description":"Search for exclusive coupons (true) or stackable ones (false)."},"usage_limit_total_min":{"type":"integer","description":"Find coupons with a minimum total usage cap. "},"usage_limit_total_max":{"type":"integer","description":"Find coupons with a maximum total usage cap. "},"usage_limit_per_user_min":{"type":"integer","description":"Filter to coupons with a minimum per-user usage cap."},"usage_limit_per_user_max":{"type":"integer","description":"Filter to coupons with a maximum per-user usage cap."},"issued_count_min":{"type":"integer","description":"Find coupons with at least this many issued."},"issued_count_max":{"type":"integer","description":"Find coupons with at most this many issued."},"used_count_min":{"type":"integer","description":"Find coupons with at least this many usages."},"used_count_max":{"type":"integer","description":"Find coupons with at most this many usages."},"sort":{"type":"string","description":"Sort field (e.g., 'issued_at', 'expires_at', 'issued_count', 'used_count')."},"order":{"oneOf":[{"const":"asc","description":"Sort direction: ascending or descending."},{"const":"desc","description":"Sort direction: ascending or descending."}],"description":"Sort direction: ascending or descending."},"page":{"type":"integer","description":"Pagination: one-based page number."},"limit":{"type":"integer","description":"Pagination: number of results per page."}},"required":[]},"IShoppingMallCoupon":{"type":"object","x-samchon-prisma-schema":"shopping_mall_coupons","description":"Main coupon entity for shopping mall discount/coupon definition. Maps all properties to Prisma schema shopping_mall_coupons. Used in coupon creation, update, detail, and summary endpoints. Sensitive and PII fields are not present. Each property is referenced from Prisma with business domain context.","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Coupon unique identifier."},"shopping_mall_coupon_campaign_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Associated campaign's unique identifier, or null if none (see campaign linkage)."},"code":{"type":"string","description":"Unique coupon code or template (for single/bulk issuance)."},"title":{"type":"string","description":"Coupon title/label, user-facing."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Coupon description (terms, usage, etc). May be null."},"coupon_type":{"type":"string","description":"Type of coupon (public, private, one-time, seller, etc)."},"discount_type":{"type":"string","description":"Discount logic: 'amount', 'percentage', 'free_shipping', etc."},"discount_value":{"type":"number","description":"Discount value (amount/percentage depending on discount_type)."},"min_order_amount":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Minimum eligible order amount for coupon use."},"max_discount_amount":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Maximum discount (for capped percentage types)."},"stackable":{"type":"boolean","description":"Whether coupon can be stacked with others."},"exclusive":{"type":"boolean","description":"If true, coupon is exclusive (cannot be combined)."},"usage_limit_total":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Total usage cap for this coupon (nullable for unlimited)."},"usage_limit_per_user":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Per-user usage cap for this coupon (nullable for unlimited)."},"issuance_limit_total":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Total issuances allowed for this coupon."},"issued_count":{"type":"integer","description":"Running total of times coupon issued."},"used_count":{"type":"integer","description":"Running total of times coupon used."},"issued_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Coupon activation/start time. Nullable if not yet issued."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Coupon expiration/end time."},"business_status":{"type":"string","description":"Workflow status (e.g., 'draft', 'active', 'paused', 'expired', 'deleted')."},"created_at":{"type":"string","format":"date-time","description":"Coupon creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Coupon last update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Logical deletion timestamp."}},"required":["id","code","title","coupon_type","discount_type","discount_value","stackable","exclusive","issued_count","used_count","business_status","created_at","updated_at"]},"IShoppingMallCoupon.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_coupons","description":"DTO for creating new coupon definitions. Only fields allowed on creation from the Prisma schema included. ID, counts, timestamps, and system-managed fields are omitted. Coupon code, title, type, discount_type, discount_value, stackable, exclusive, and eligible limits must be set/validated by business logic. Used by POST coupon endpoints.","properties":{"shopping_mall_coupon_campaign_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Associated campaign's UUID, if assigning to campaign (nullable)."},"code":{"type":"string","description":"Unique coupon code or template for issuance."},"title":{"type":"string","description":"Coupon title/label."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Business-side description text. Optional."},"coupon_type":{"type":"string","description":"Type of coupon (public, private, one-time, seller, etc)."},"discount_type":{"type":"string","description":"Discount logic for coupon ('amount', 'percentage', etc)."},"discount_value":{"type":"number","description":"Discount value (amount or percentage depending on type)."},"min_order_amount":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Minimum eligible order amount for coupon use."},"max_discount_amount":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Maximum discount amount (for capped percentage coupons)."},"stackable":{"type":"boolean","description":"May this coupon be used with others?"},"exclusive":{"type":"boolean","description":"If true, this coupon cannot be combined with others."},"usage_limit_total":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Total usage/cap for this coupon (nullable for unlimited)."},"usage_limit_per_user":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Usage cap per user (nullable for unlimited)."},"issuance_limit_total":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Issuance cap for this coupon (null for unlimited)."},"issued_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Coupon activation/start time (null if immediately active)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Coupon expiration/end time."},"business_status":{"type":"string","description":"Coupon business status at creation ('draft', 'active', etc)."}},"required":["code","title","coupon_type","discount_type","discount_value","stackable","exclusive","business_status"]},"IShoppingMallCoupon.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_coupons","properties":{"shopping_mall_coupon_campaign_id":{"type":"string","format":"uuid","description":"Optional FK to a coupon campaign (UUID). If null, this coupon is stand-alone.\n\nThis identifies the parent campaign of this coupon for event-based, seasonal, or segment-based business logic."},"code":{"type":"string","description":"Coupon code (unique). Used for manual entry, promotional insert, or bulk distribution. Must be unique system-wide."},"title":{"type":"string","description":"Display title for the coupon, shown in list views and promotional materials. Immutable once issued to maintain evidence."},"description":{"oneOf":[{"type":"string","description":"Long description, terms, and detail for user communication and compliance."},{"type":"null"}],"description":"Long description, terms, and detail for user communication and compliance."},"coupon_type":{"type":"string","description":"Type of coupon: public, private, one-time, or other business segmentation. Business enum with allowable values defined by campaign/marketing logic."},"discount_type":{"type":"string","description":"Discount logic type. Allowed values include 'amount', 'percentage', 'free_shipping', etc. Only supported logics per business rules are permitted."},"discount_value":{"type":"number","description":"For 'amount' or 'percentage' types, the actual discount. For 'amount', this is monetary (not negative). For 'percentage', should be from 0-100."},"min_order_amount":{"oneOf":[{"type":"number","description":"Minimum order amount eligible for coupon application. Null means no minimum enforced."},{"type":"null"}],"description":"Minimum order amount eligible for coupon application. Null means no minimum enforced."},"max_discount_amount":{"oneOf":[{"type":"number","description":"Maximum discount that can be applied if 'discount_type' is 'percentage' or where cap is required."},{"type":"null"}],"description":"Maximum discount that can be applied if 'discount_type' is 'percentage' or where cap is required."},"stackable":{"type":"boolean","description":"If true, coupon can be combined with other stackable coupons (per business logic)."},"exclusive":{"type":"boolean","description":"Coupon is mutually exclusive — if true, cannot be combined with any other coupon in same order/application."},"usage_limit_total":{"oneOf":[{"type":"integer","description":"Total number of times this coupon can be used across the entire lifecycle (public limit)."},{"type":"null"}],"description":"Total number of times this coupon can be used across the entire lifecycle (public limit)."},"usage_limit_per_user":{"oneOf":[{"type":"integer","description":"How many times an individual user can redeem this coupon."},{"type":"null"}],"description":"How many times an individual user can redeem this coupon."},"issuance_limit_total":{"oneOf":[{"type":"integer","description":"Total number of distinct issuances permitted for this coupon (bulk/one-time logic)."},{"type":"null"}],"description":"Total number of distinct issuances permitted for this coupon (bulk/one-time logic)."},"issued_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when coupon becomes valid for use/issuance (UTC ISO8601)."},{"type":"null"}],"description":"Datetime when coupon becomes valid for use/issuance (UTC ISO8601)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Coupon hard expiration. After this time, the coupon cannot be redeemed. Null means open-ended."},{"type":"null"}],"description":"Coupon hard expiration. After this time, the coupon cannot be redeemed. Null means open-ended."},"business_status":{"type":"string","description":"Coupon lifecycle business status: draft, active, paused, expired, deleted, etc. Allowed transitions per workflow."}},"required":["code","title","coupon_type","discount_type","discount_value","stackable","exclusive","business_status"],"description":"DTO to update a coupon definition in the system. Must reference only fields present in shopping_mall_coupons, supporting business rules for coupon logic, stackability, eligibility, issuance, and usage. Partial updates allowed, all modifications are audited and preserved for compliance."},"IShoppingMallCouponIssuance.IRequest":{"type":"object","properties":{"shopping_mall_coupon_id":{"type":"string","format":"uuid","description":"(Optional) Filter by the associated coupon's unique identifier."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"(Optional) Only issuances assigned to this customer."},"status":{"type":"string","description":"(Optional) Restrict to a given issuance status (e.g., 'active', 'expired', 'redeemed', 'revoked', etc.)."},"code":{"type":"string","description":"(Optional) Search by the issued coupon code (exact match or partial, depending on backend logic)."},"issued_at_from":{"type":"string","format":"date-time","description":"(Optional) Range filter for issuance creation date - start."},"issued_at_to":{"type":"string","format":"date-time","description":"(Optional) Range filter for issuance creation date - end."},"expires_at_from":{"type":"string","format":"date-time","description":"(Optional) Range filter for expiration date - start."},"expires_at_to":{"type":"string","format":"date-time","description":"(Optional) Range filter for expiration date - end."},"page":{"type":"integer","description":"Page number for pagination (1-based, optional)."},"limit":{"type":"integer","description":"Maximum number of records per page (optional, default 20 or per system settings)."},"sort":{"type":"string","description":"(Optional) Sorting preference, e.g., 'issued_at desc', 'status', etc."}},"required":[],"description":"Request DTO for searching and filtering coupon issuance records. Used by admins/sellers to page through, audit, or batch-modify coupon issuances with support for advanced query scenarios. Filters include coupon, customer, status, code, issuance and expiry time ranges, and sorting/pagination support as per corporate API convention."},"IShoppingMallCouponIssuance":{"type":"object","x-samchon-prisma-schema":"shopping_mall_coupon_issuances","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for coupon issuance. System-generated, a unique UUID for this issuance event."},"shopping_mall_coupon_id":{"type":"string","format":"uuid","description":"FK to coupon master entity. References the parent coupon being issued or redeemed."},"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional FK to customer or user account entity if coupon is customer-specific or for private/targeted distributions."},{"type":"null"}],"description":"Optional FK to customer or user account entity if coupon is customer-specific or for private/targeted distributions."},"code":{"type":"string","description":"Returned coupon code, unique per issuance - may match coupon's master code for public coupons or be unique for one-time or single-use issuances."},"issued_at":{"type":"string","format":"date-time","description":"Datetime this issuance instance was created and/or activated."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime this issuance instance expires (supersedes or overrides parent coupon's expires_at for personalized/segment cases)."},{"type":"null"}],"description":"Datetime this issuance instance expires (supersedes or overrides parent coupon's expires_at for personalized/segment cases)."},"usage_limit":{"oneOf":[{"type":"integer","description":"How many times this specific issuance (for a customer) may be redeemed. Often null if global per-coupon limit is in effect."},{"type":"null"}],"description":"How many times this specific issuance (for a customer) may be redeemed. Often null if global per-coupon limit is in effect."},"used_count":{"type":"integer","description":"Running counter of how many times this issuance has been redeemed (must not exceed usage_limit or coupon's global limit)."},"status":{"type":"string","description":"Lifecycle state of the issuance: 'active', 'expired', 'redeemed', 'revoked', etc."},"created_at":{"type":"string","format":"date-time","description":"UTC ISO timestamp when issuance record was created (audit, evidence, and ordering)."},"updated_at":{"type":"string","format":"date-time","description":"UTC ISO timestamp of last modification/update (audit, evidence, optimistic concurrency)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp; when set, this issuance is logically removed but kept for compliance and audit evidence."},{"type":"null"}],"description":"Soft deletion timestamp; when set, this issuance is logically removed but kept for compliance and audit evidence."}},"required":["id","shopping_mall_coupon_id","code","issued_at","status","created_at","updated_at","used_count"],"description":"Read DTO for a single coupon issuance. Represents one specific allocation/assignment of a coupon to a customer or code, tracking activation, expiration, usage counts, and evidence meta. All fields are as in the shopping_mall_coupon_issuances schema for evidence, compliance, and business analytics."},"IShoppingMallCouponIssuance.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_coupon_issuances","properties":{"shopping_mall_coupon_id":{"type":"string","format":"uuid","description":"FK to coupon master entity; UUID of the coupon to be issued."},"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional customer UUID for targeted or private coupon issuance. Can be null for public or bulk distribution workflows."},{"type":"null"}],"description":"Optional customer UUID for targeted or private coupon issuance. Can be null for public or bulk distribution workflows."},"code":{"type":"string","description":"Requested issued coupon code. For public/master coupons, may match parent's code; for private/single-use, should be unique per issuance."},"issued_at":{"type":"string","format":"date-time","description":"Issuance creation/activation timestamp (UTC, ISO8601)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time","description":"Expiration datetime for this issuance only; may override parent coupon's expires_at for custom cases."},{"type":"null"}],"description":"Expiration datetime for this issuance only; may override parent coupon's expires_at for custom cases."},"usage_limit":{"oneOf":[{"type":"integer","description":"Limits for this issuance only—how many times it may be used, can be null to inherit from coupon's global config."},{"type":"null"}],"description":"Limits for this issuance only—how many times it may be used, can be null to inherit from coupon's global config."}},"required":["shopping_mall_coupon_id","code","issued_at"],"description":"DTO for creating (allocating/assigning) a new coupon issuance, mapping to shopping_mall_coupon_issuances table. Only fields directly in schema. Used by admins, sellers, or for self-service to assign a coupon instance (public, personal, one-time, or segment) to a user or generate a unique code."},"IShoppingMallCouponIssuance.IUpdate":{"type":"object","properties":{"expires_at":{"type":"string","format":"date-time","description":"Expiration for this issuance (may differ from base coupon)."},"usage_limit":{"type":"integer","description":"Usage limit for this actor (may override per-user global)."},"status":{"type":"string","description":"Issuance status (active, expired, redeemed, revoked, etc)."}},"description":"Update payload for a coupon issuance. Supports changing per-issuance usage limits, expiration, and status. All field updates are validated for business rule compliance. Does NOT support changing fundamental coupon/customer linkage.","required":[],"x-samchon-prisma-schema":"shopping_mall_coupon_issuances"},"IShoppingMallCouponCampaign.IRequest":{"type":"object","properties":{"name":{"type":"string","description":"Filter for campaign name (supports partial match)."},"business_status":{"type":"string","description":"Search filter by campaign workflow status."},"starts_at_from":{"type":"string","format":"date-time","description":"Filter for campaign start after this date (inclusive)."},"starts_at_to":{"type":"string","format":"date-time","description":"Filter for campaign start before this date (inclusive)."},"ends_at_from":{"type":"string","format":"date-time","description":"Filter for campaign end after this date (inclusive)."},"ends_at_to":{"type":"string","format":"date-time","description":"Filter for campaign end before this date (inclusive)."},"page":{"type":"integer","description":"Current page number (pagination)."},"limit":{"type":"integer","description":"Records per page (pagination)."}},"description":"Advanced search and filter criteria for coupon campaign listing. Allows filtering by campaign name (partial), business status, date ranges, and pagination controls. Used in admin UI and campaign analytics.","required":[]},"IShoppingMallCouponCampaign":{"type":"object","x-samchon-prisma-schema":"shopping_mall_coupon_campaigns","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"name":{"type":"string","description":"Business-facing campaign name."},"description":{"oneOf":[{"type":"string","description":"Campaign description and terms."},{"type":"null"}],"description":"Campaign description and terms."},"starts_at":{"oneOf":[{"type":"string","format":"date-time","description":"Campaign activation/start time."},{"type":"null"}],"description":"Campaign activation/start time."},"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"Campaign end/expiration time."},{"type":"null"}],"description":"Campaign end/expiration time."},"business_status":{"type":"string","description":"Workflow status: draft, active, paused, expired, deleted, etc."},"created_at":{"type":"string","format":"date-time","description":"Campaign creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Campaign update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Logical deletion timestamp, for partitioning and audit."},{"type":"null"}],"description":"Logical deletion timestamp, for partitioning and audit."}},"required":["id","name","business_status","created_at","updated_at"],"description":"Coupon campaign entity. Represents a campaign grouping one or more coupons under a business concept. Contains metadata, business status, scheduling fields, and audit trail fields. Directly associated with the 'shopping_mall_coupon_campaigns' table."},"IShoppingMallCouponCampaign.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_coupon_campaigns","properties":{"name":{"type":"string","description":"Business-facing campaign name."},"description":{"oneOf":[{"type":"string","description":"Campaign description and terms."},{"type":"null"}],"description":"Campaign description and terms."},"starts_at":{"oneOf":[{"type":"string","format":"date-time","description":"Campaign activation/start time."},{"type":"null"}],"description":"Campaign activation/start time."},"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"Campaign end/expiration time."},{"type":"null"}],"description":"Campaign end/expiration time."},"business_status":{"type":"string","description":"Workflow status: draft, active, paused, expired, deleted, etc."}},"required":["name","business_status"],"description":"Creation DTO for a coupon campaign. Used to register a new coupon campaign in the shopping mall system. Matches the business and audit fields in 'shopping_mall_coupon_campaigns'."},"IShoppingMallCouponCampaign.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"Business-facing campaign name."},"description":{"oneOf":[{"type":"string","description":"Campaign description and terms."},{"type":"null"}],"description":"Campaign description and terms."},"starts_at":{"oneOf":[{"type":"string","format":"date-time","description":"Campaign activation or start time for the coupon campaign. Uses ISO 8601 date-time format. Determines when the campaign becomes active. Null if the campaign is unscheduled."},{"type":"null","description":"No activation time specified; the campaign is always inactive until a start time is set."}],"description":"Activation/start time for coupon campaign (ISO 8601). If null, campaign has no set start."},"ends_at":{"oneOf":[{"type":"string","format":"date-time","description":"Campaign end or expiration time. Uses ISO 8601 date-time format. Marks when the campaign becomes inactive or ends; governs coupon validity when associated."},{"type":"null","description":"No expiration defined; campaign is ongoing until otherwise updated."}],"description":"End/expiration time for coupon campaign (ISO 8601). If null, campaign is indefinitely open."},"business_status":{"type":"string","description":"Workflow status: draft, active, paused, expired, deleted, etc."}},"required":["name","business_status"],"description":"DTO for updating a coupon campaign. Allows modifications to name, description, active window, and status. Maps to editable properties in shopping_mall_coupon_campaigns. All fields are for campaign-level metadata, not for coupon logic. Dates must be ISO 8601. Status must follow enum values in business logic."},"IShoppingMallDeposit.IRequest":{"type":"object","properties":{"status":{"type":"string","description":"Account status filter (active, frozen, closed, etc)."},"min_balance":{"type":"number","description":"Minimum balance filter for search (inclusive)."},"max_balance":{"type":"number","description":"Maximum balance filter for search (inclusive)."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Filter deposits by belonged customer's UUID."},"created_from":{"type":"string","format":"date-time","description":"Filter by deposits created after this date/time."},"created_to":{"type":"string","format":"date-time","description":"Filter by deposits created before this date/time."},"updated_from":{"type":"string","format":"date-time","description":"Filter by deposits updated after this date/time."},"updated_to":{"type":"string","format":"date-time","description":"Filter by deposits updated before this date/time."},"page":{"type":"integer","description":"Pagination: which page to retrieve (1-based index).","minimum":1},"limit":{"type":"integer","description":"Pagination: number of records per page.","minimum":1}},"required":[],"description":"Search, filter, and pagination DTO for deposits. Allows filtered search on deposit account audit fields and value ranges. All fields are optional but paginated queries should provide page/limit. Reflects fields in shopping_mall_deposits used for list/search APIs."},"IShoppingMallDeposit":{"type":"object","x-samchon-prisma-schema":"shopping_mall_deposits","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the deposit account."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's UUID. Each deposit account is tied to one user account."},"balance":{"type":"number","description":"Current deposit balance (in system currency units). Always non-negative, may reflect pending operations until settled."},"status":{"type":"string","description":"Account status (active, frozen, closed, under_review, etc.) for financial and compliance operations."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the deposit record was created (ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update to the deposit record (ISO 8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp if deposit record was soft-deleted (ISO 8601)."},{"type":"null","description":"Deposit record is not deleted."}],"description":"Timestamp if deposit record is soft-deleted. Null unless deleted."}},"required":["id","shopping_mall_customer_id","balance","status","created_at","updated_at"],"description":"Business deposit (electronic wallet) entity for a user. Contains current balance, audit fields, and status for compliance. Never used directly for transaction history, but is the core reference for all deposit logic. Maps directly to shopping_mall_deposits Prisma model. SOFT DELETE uses deleted_at. All date fields are ISO 8601."},"IShoppingMallDeposit.ICreate":{"type":"object","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's UUID. Each deposit account is tied to one user account and is unique (enforced by DB)."},"balance":{"type":"number","description":"Initial deposit balance at account creation. Must be non-negative. Usually set to 0 by business rule or admin policy."},"status":{"type":"string","description":"Initial account status (e.g., active or under_review). Should match allowed status values in business logic."}},"required":["shopping_mall_customer_id","balance","status"],"description":"Request DTO for creating a new deposit account. Used at account opening, onboarding, or admin creation. All fields are required. Uniqueness for per-customer enforced in schema. Placement and values must comply with system type and business rules."},"IShoppingMallDeposit.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Account status (active, frozen, closed, under_review, etc.) for financial and compliance operations.\n\nUpdates to this field are typically restricted to admin, fraud, or business logic events. Only supported values should match the business enum at the application level (see `shopping_mall_deposits.status`)."},"balance":{"type":"number","description":"Current deposit balance (in system currency units) as a float.\n\nTypically, changes to this field are rare and only allowed by authorized business logic for refunds, adjustments, or manual correction. Must always be non-negative and accurately verified if changed. System-controlled and evidence/audit-logged for compliance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp if deposit record is soft-deleted (ISO 8601 with timezone). Set this to current time string (or null to restore/undelete)."}},"required":[],"description":"Update payload for a deposit account in the shopping mall platform.\n\nAllows updates to the deposit account's business status (`status`), manual adjustment of balance (`balance` — admin only), and soft-deletion or restoration (`deleted_at`). Only fields present are updated. All actions are strictly audit-logged per compliance rules. Follows `shopping_mall_deposits` schema for field definitions.\n"},"IShoppingMallDepositTransaction.IRequest":{"type":"object","properties":{"business_status":{"type":"string","description":"Filter: Business-side processing status (applied, confirmed, failed, in_review, reversed, etc.).\n\nOptional. Restricts listing of transactions to those with a specific business status."},"type":{"type":"string","description":"Filter: Transaction type (income, outcome, refund, admin_adjustment, reversal, etc.).\n\nOptional. Limits search to transactions of the specified type. Should reflect domain enum."},"start_date":{"type":"string","format":"date-time","description":"Filter: Inclusive lower bound for transaction timestamp (created_at >= start_date), in ISO 8601 format.\n\nOptional. Can be used for date range queries."},"end_date":{"type":"string","format":"date-time","description":"Filter: Exclusive upper bound for transaction timestamp (created_at < end_date), in ISO 8601 format.\n\nOptional. Together with start_date for filtering."},"order_id":{"type":"string","format":"uuid","description":"Filter: Linked order transaction by UUID.\n\nOptional. When specified, returns only transactions tied to a particular order ID (shopping_mall_orders.id)."},"reason":{"type":"string","description":"Filter: Detailed business reason, event, or note substring (promo, adjustment, campaign).\n\nOptional, used for free-text matching in transaction 'reason' field."},"page":{"type":"integer","minimum":1,"description":"Pagination: Page number (1-based).\n\nOptional, default may be 1."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Pagination: Maximum number of items per page.\n\nOptional, typical system default is 50 or 100. Should not exceed 200."},"sort":{"oneOf":[{"const":"created_at:asc","description":"Sorting order for transaction records by creation timestamp.\n\nOptional. Allowed values: 'created_at:asc', 'created_at:desc'. Default: 'created_at:desc'."},{"const":"created_at:desc","description":"Sorting order for transaction records by creation timestamp.\n\nOptional. Allowed values: 'created_at:asc', 'created_at:desc'. Default: 'created_at:desc'."}],"description":"Sorting order for transaction records by creation timestamp.\n\nOptional. Allowed values: 'created_at:asc', 'created_at:desc'. Default: 'created_at:desc'."}},"required":[],"description":"Filtering, search, pagination, and sort criteria for listing deposit transactions.\n\nUsed with paged transaction listing API. All fields optional."},"IShoppingMallDepositTransaction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key (UUID) for the deposit transaction record."},"shopping_mall_deposit_id":{"type":"string","format":"uuid","description":"Deposit account (UUID) this transaction is associated with. FK to shopping_mall_deposits.id."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Target customer (UUID, FK to shopping_mall_customers.id) for user-level audit/evidence. Always present."},"shopping_mall_order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Linked order transaction (UUID) if applicable (nullable). References shopping_mall_orders.id."},"type":{"type":"string","description":"Transaction type. Enum: income, outcome, refund, admin_adjustment, reversal, etc. Must match domain logic. Required."},"amount":{"type":"number","description":"Transaction amount (float, always positive). Must be non-negative and reflect system currency units. Required."},"business_status":{"type":"string","description":"Processing status: applied, confirmed, failed, in_review, reversed, etc. Enum at the application level. Required."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Business reason (campaign, event, manual adjustment) or free-text note. Nullable."},"evidence_reference":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reference to order, audit, or snapshot for evidence (nullable)."},"reversed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when transaction was reversed/cancelled. ISO 8601 or null if never reversed."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp (ISO 8601, required)."},"updated_at":{"type":"string","format":"date-time","description":"Record's last update timestamp (ISO 8601, required)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp (null if still active). Required. Logical removal for audit/compliance."}},"required":["id","shopping_mall_deposit_id","shopping_mall_customer_id","type","amount","business_status","created_at","updated_at","deleted_at"],"description":"Full detail for a deposit transaction event in a customer's digital wallet. Each record logs a balance event: income, outcome, refund, admin adjustment, or reversal.\n\nFields and audit meta must match `shopping_mall_deposit_transactions` schema."},"IShoppingMallDepositTransaction.ICreate":{"type":"object","properties":{"type":{"type":"string","description":"Transaction type: income, outcome, refund, admin_adjustment, reversal, etc. Must be allowed type by application logic. Required."},"amount":{"type":"number","description":"Transaction amount (positive float, non-negative, system currency units). Required."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Customer (UUID, FK to shopping_mall_customers.id) who owns/affects this deposit transaction. Required."},"shopping_mall_order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Linked order reference (nullable UUID), if transaction is tied to an order. Optional."},"business_status":{"type":"string","description":"Processing/business status (applied, confirmed, failed, in_review, reversed, etc.). Required."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text business reason, context (campaign, manual adjustment). Nullable. Optional."},"evidence_reference":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional evidence/audit/snapshot reference string. Used for compliance trace or business linkage. Nullable."}},"required":["type","amount","shopping_mall_customer_id","business_status"],"description":"Creation DTO for a new deposit transaction.\n\nDefines all required data to record a digital wallet event for a customer (income, outcome, refund, etc). Additional context (reason, evidence_reference, order linkage) may be provided if applicable. Fully validated and compliant with `shopping_mall_deposit_transactions` Prisma schema."},"IShoppingMallDepositTransaction.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Processing/business status (applied, confirmed, failed, in_review, reversed, etc.). Consult the platform's business rules for available values. May be updated only in restricted contexts."},"business_status":{"type":"string","description":"Business-side processing status (applied, confirmed, failed, in_review, reversed, etc.). Used for business logic and may correspond to 'status'. Updated according to workflow."},"reason":{"oneOf":[{"type":"string","description":"Detailed business reason or description for transaction (top-up, purchase, refund, bonus, manual debit, etc.). Optional."},{"type":"null"}],"description":"Detailed business reason or description for transaction (top-up, purchase, refund, bonus, manual debit, etc.). Optional."},"evidence_reference":{"oneOf":[{"type":"string","description":"Optional reference to evidence, audit record, or snapshot backing this transaction. May be null on update."},{"type":"null"}],"description":"Optional reference to evidence, audit record, or snapshot backing this transaction. May be null on update."},"reversed_at":{"oneOf":[{"type":"string","format":"date-time","description":"If this transaction was reversed/cancelled, indicates the datetime in ISO-8601 format; null otherwise."},{"type":"null"}],"description":"If this transaction was reversed/cancelled, indicates the datetime in ISO-8601 format; null otherwise."}},"required":[],"description":"Payload for updating an existing deposit transaction in the digital deposit ledger. Allows business status and reason to be changed, along with reference to reversal or evidence. Only mutable fields are strictly allowed."},"IShoppingMallMileage.IRequest":{"type":"object","properties":{"status":{"type":"string","description":"Account status (active, expired, frozen)."},"min_balance":{"type":"number","description":"Filter for minimum balance to retrieve accounts with at least this amount."},"max_balance":{"type":"number","description":"Filter for maximum balance to retrieve accounts with no more than this value."},"expired_before":{"type":"string","format":"date-time","description":"Return accounts expiring before this ISO-8601 timestamp."},"expired_after":{"type":"string","format":"date-time","description":"Return accounts expiring after this ISO-8601 timestamp."},"customer_id":{"type":"string","format":"uuid","description":"Filter results to mileage accounts associated with this customer UUID."},"page":{"type":"integer","minimum":1,"description":"Pagination: page number to retrieve."},"limit":{"type":"integer","minimum":1,"description":"Pagination: number of items per page."}},"required":[],"description":"Request DTO for filtering and paginating the list of mileage (loyalty point) accounts in the shopping mall system. Used by admins for analytics and compliance. Only the fields listed in the schema may be used for search."},"IShoppingMallMileage":{"type":"object","x-samchon-prisma-schema":"shopping_mall_mileages","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for the mileage account record."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"The customer UUID this mileage account belongs to."},"balance":{"type":"number","description":"Current usable mileage/point balance. Non-negative value representing available loyalty points."},"status":{"type":"string","description":"Account status (active, expired, frozen). Indicates current ability to accrue or spend mileage."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when all current mileage expires if not renewed or spent. Used for campaign/bonus mileages with deadlines."},{"type":"null"}],"description":"Datetime when all current mileage expires if not renewed or spent. Used for campaign/bonus mileages with deadlines."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the mileage account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update to the mileage account."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp; null if active. If present, this account is considered logically removed and excluded from active use."},{"type":"null"}],"description":"Soft-delete timestamp; null if active. If present, this account is considered logically removed and excluded from active use."}},"required":["id","shopping_mall_customer_id","balance","status","created_at","updated_at"],"description":"Entity representing a user's mileage (loyalty/point system) account in the shopping mall. Each mileage record tracks point balance, status (active, expired, frozen), expiration details, and audit metadata. All fields map 1:1 to the schema."},"IShoppingMallMileage.ICreate":{"type":"object","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"The UUID of the customer this new mileage account will be attached to."},"balance":{"type":"number","description":"Initial mileage/point balance. Must be a non-negative number."},"status":{"type":"string","description":"Initial account status for the mileage account (e.g., 'active', 'expired', 'frozen')."},"expired_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optional expiration date for the account balance or campaign mileage, as ISO-8601 timestamp. Null for no expiration."},{"type":"null"}],"description":"Optional expiration date for the account balance or campaign mileage, as ISO-8601 timestamp. Null for no expiration."}},"required":["shopping_mall_customer_id","balance","status"],"description":"Payload schema for creating a new mileage (loyalty/point) account entity. Used by admins for onboarding or campaign launches. Only the listed fields are valid for creation."},"IShoppingMallMileage.IUpdate":{"type":"object","description":"Object schema for updating a mileage (loyalty/point system) account record in the shopping_mall_mileages table. Includes fields for status, balance, and expiry, supporting role-based field mutability according to business rules (see description). All properties must match their definitions in the underlying Prisma schema; any omitted field will not be updated unless explicitly set to null for nullable types. Audit logging is expected for all changes.","x-samchon-prisma-schema":"shopping_mall_mileages","properties":{"balance":{"type":"number","description":"Current usable mileage/point balance (system currency units or points, depending on configuration). Non-negative value representing available loyalty points. When updating, must not decrement below zero. Only administrators can directly set balance except where business logic allows user adjustment (e.g., points redemption order flows)."},"status":{"type":"string","description":"Account status (active, expired, frozen, etc.). Indicates current ability to accrue or spend mileage. Possible values may be defined by business rules/enum mapping. Examples: 'active', 'expired', 'frozen'. Only mutable by administrators or customer in specific business cases (e.g., self-initiated withdrawal)."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime when all current mileage expires if not renewed or spent. If null, no expiration is set. Must be an ISO 8601 string when present."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp; null if active. Updated by business soft-delete flows or administrative erasure for compliance."}},"required":[]},"IShoppingMallMileageTransaction.IRequest":{"type":"object","description":"Schema for requesting a search/filter operation on mileage (loyalty points) transactions. Supports filtering by transaction type, business_status, order reference, reason, and date ranges, as well as paging and sorting. All fields are optional; only included criteria are applied.","properties":{"type":{"type":"string","description":"Type of mileage transaction. Valid values: 'accrual', 'spend', 'expiration', 'bonus', 'adjustment', 'refund'. Optional filter."},"business_status":{"type":"string","description":"Processing/business status to filter (applied, confirmed, failed, expired, reversed, in_review). Optional filter."},"reason":{"type":"string","description":"Business reason filter (promo, adjustment, campaign, system grant, manual). Enables LIKE or tag-based search. Optional."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Filter by associated order (UUID) if listing transactions linked to a specific order. Optional."},"created_from":{"type":"string","format":"date-time","description":"Filter: start of creation date window (inclusive, ISO 8601)."},"created_to":{"type":"string","format":"date-time","description":"Filter: end of creation date window (inclusive, ISO 8601)."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-based). Optional. Defaults to 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of transactions per page (pagination). Optional. Defaults to business/system setting, e.g., 20 or 50."},"sort_by":{"type":"string","description":"Field to sort results by. May include: 'created_at', 'amount', 'type', etc. Optional."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order (ascending/descending). Optional."},{"const":"desc","description":"Sort order (ascending/descending). Optional."}],"description":"Sort order (ascending/descending). Optional."}},"required":[]},"IShoppingMallMileageTransaction":{"type":"object","description":"Full DTO for a shopping mall mileage (loyalty point) transaction. Models a single change in mileage/point balance, as found in shopping_mall_mileage_transactions. All fields map directly to schema columns and are evidence/audit grade. This type is not used for mutation, only for retrieval/external representation (GET or aggregate responses).","x-samchon-prisma-schema":"shopping_mall_mileage_transactions","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key: Unique identifier for the transaction record (UUID)."},"shopping_mall_mileage_id":{"type":"string","format":"uuid","description":"Foreign Key: Associated mileage account for which this transaction occurred."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Foreign Key: The customer/user linked to this mileage transaction."},"shopping_mall_order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional Foreign Key: Related shopping mall order. Null if transaction not linked to specific order."},"type":{"type":"string","description":"Transaction type: 'accrual', 'spend', 'expiration', 'bonus', 'adjustment', 'refund'. May be mapped to business enums for frontend."},"amount":{"type":"number","description":"Mileage amount for this transaction. Positive for earning, negative for deduction/expiration. Unit determined by system configuration."},"business_status":{"type":"string","description":"Business status of transaction. Examples: 'applied', 'confirmed', 'failed', 'expired', 'reversed', 'in_review'."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business reason/event context for this transaction (promo, adjustment, campaign, manual)."},"evidence_reference":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional evidence, snapshot, or compliance reference for this event (may be file link, audit ID, or internal reference)."},"reversed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date/time this event was reversed/cancelled, if applicable (ISO 8601 UTC). Null if not reversed."},"created_at":{"type":"string","format":"date-time","description":"Datetime this transaction was created (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Datetime this transaction was last updated (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp if event was deleted/cancelled. Null otherwise."}},"required":["id","shopping_mall_mileage_id","shopping_mall_customer_id","type","amount","business_status","created_at","updated_at"]},"IShoppingMallMileageTransaction.ICreate":{"type":"object","description":"Schema for creating a new mileage (loyalty/point) transaction. Required fields: type, amount, business_status. Optional: reason, shopping_mall_order_id, evidence_reference. On transaction creation (earn/spend/expiration/bonus/etc), this record is inserted and the associated mileage account is updated accordingly. All fields must comply with Prisma column constraints and business rules. Amount must always be positive (sign is inferred from type).","x-samchon-prisma-schema":"shopping_mall_mileage_transactions","properties":{"type":{"type":"string","description":"Transaction type. Required. Valid values: 'accrual', 'spend', 'expiration', 'bonus', 'adjustment', 'refund'."},"amount":{"type":"number","minimum":0,"description":"Amount of points for the transaction. Required. Must be positive (> 0). Direction of change (earn/spend) is inferred from type."},"business_status":{"type":"string","description":"Business processing status at event creation. Examples: 'applied', 'confirmed', 'failed', 'expired', 'reversed', 'in_review'. Required."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reason, context, or business event causing the transaction. Optional field. Examples: 'promo', 'adjustment', 'system bonus', 'manual correction'. Null if not provided."},"shopping_mall_order_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of associated order if this transaction is linked to an order event. Optional, null if not applicable."},"evidence_reference":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional reference or pointer to associated evidence artifact, audit record, or snapshot for legal or dispute compliance."}},"required":["type","amount","business_status"]},"IShoppingMallMileageTransaction.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_mileage_transactions","properties":{"type":{"type":"string","description":"Transaction type (accrual, spend, expiration, bonus, refund, adjustment, etc.). Determines the business logic for how the mileage transaction affects the user's mileage balance and audit chain. Acceptable values follow business/enum constraints and must align with business and compliance requirements."},"business_status":{"type":"string","description":"Processing and workflow status for the transaction (e.g., applied, confirmed, failed, expired, reversed, in_review). May be advanced or modified by admins for fraud, compliance, or customer support. Valid values depend on current business status and must reflect actual system workflow."},"reason":{"type":"string","description":"Free-form or enumerated field providing human/machine-readable reason for the transaction (event, campaign, adjustment, refund, donation, etc.). Used for compliance, analytics, campaign tracking, or error correction. Nullable and optional as per schema."},"evidence_reference":{"type":"string","description":"Optional reference to compliance, audit, or related snapshot/evidence for this transaction. Used to link this transaction to relevant business events for regulatory compliance or fraud/audit investigation. Nullable."},"reversed_at":{"type":"string","format":"date-time","description":"Timestamp indicating when this transaction was reversed or cancelled, if applicable. Nullable. Used for regulatory compliance, fraud investigation, or business rollback situations."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp if the transaction is logically deleted (soft delete). Nullable, only set by compliance/audit policy. Not directly settable by clients; managed by administrative workflows."}},"description":"Update fields for a user mileage transaction in the shopping_mall_mileage_transactions table. Used to adjust non-core metadata, status, or audit linkages. Does not allow mutation of core transaction amount or parent relationships, only of business/audit metadata per compliance, business, or error-correction scenario. All fields are optional and only the fields to update need to be included; PATCH/PUT semantics as per business rule.","required":[]},"IShoppingMallDonation.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. Used to select which page of results to return in a multi-page list. Positive integer; default varies by API business rules."},"limit":{"type":"integer","description":"Number of donation records to return per page. Allows the client to control the number of results for pagination. Positive integer; capped per business limits."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Filter: Restricts to donations performed by the specified customer UUID. Only permitted for administrators or the owner for privacy/compliance."},"source_type":{"type":"string","description":"Filter: Source type of the donation (either 'deposit' or 'mileage'). Restricts search to donations from only one funding type as stored in shopping_mall_donations.source_type."},"target_campaign_code":{"type":"string","description":"Filter: The business campaign code for the destination of donations. Allows filtering donations to a given campaign or event."},"status":{"type":"string","description":"Filter: Restricts to donations by status (e.g., 'pending', 'confirmed', 'failed', 'refunded', etc.). Reflects workflow state for operational or reporting needs."},"amount_min":{"type":"number","description":"Filter: Minimum donation value for results. Filters out donations with an amount less than this value."},"amount_max":{"type":"number","description":"Filter: Maximum donation value for results. Limits the donations by their maximum currency or point contribution."},"created_at_from":{"type":"string","format":"date-time","description":"Filter: Lower-bound for donation creation time window (inclusive) using an ISO 8601 formatted date-time string."},"created_at_to":{"type":"string","format":"date-time","description":"Filter: Upper-bound for donation creation time window (inclusive) using an ISO 8601 formatted date-time string."}},"description":"Request search, pagination, and filter parameters for donation retrieval in shopping_mall_donations. Used for both admin and customer donation listing with role-specific security filters applied at the service layer. All properties are optional; defaults applied by API as necessary.","required":[]},"IShoppingMallDonation":{"type":"object","x-samchon-prisma-schema":"shopping_mall_donations","properties":{"id":{"type":"string","format":"uuid","description":"Primary key, unique global identifier (UUID) for each donation event per Prisma schema. Used for audit, evidence, and linking with recipient campaigns/events."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"ID of the customer who performed the donation. Foreign key to shopping_mall_customers. Used for audit, privacy, and personalization/business analytics."},"source_type":{"type":"string","description":"Type of source for the donation: either 'deposit' for digital deposit coin donations, or 'mileage' for loyalty/point system donations. Required for regulatory compliance and analytic separation."},"source_entity_id":{"type":"string","format":"uuid","description":"UUID reference to the actual source account used: either shopping_mall_deposits.id or shopping_mall_mileages.id depending on source_type. Nullable in schema if required by business."},"target_campaign_code":{"type":"string","description":"Business code, string identifier of the destination campaign for the donation. Used for analytics, campaign reporting, and evidence tracking."},"amount":{"type":"number","description":"Donation amount, must be non-negative, expresses the value in either deposit currency or mileage points. Type enforced by business logic; value is positive, zero not permitted."},"status":{"type":"string","description":"Current logical status of the donation (pending, confirmed, refunded, under_review, failed, etc.) per Prisma schema and business rules."},"evidence_reference":{"type":"string","description":"Optional business/audit reference for the compliance snapshot, reason, or context of donation. Helps with regulatory queries/audit exports."},"donated_at":{"type":"string","format":"date-time","description":"Timestamp the donation was made (ISO 8601 UTC). Primary date for analytics, sorting, compliance, and time-window search."},"created_at":{"type":"string","format":"date-time","description":"Primary system record creation timestamp. Evidence tracking required for audit/compliance situations."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last record update (audit and workflow integrity)."},"deleted_at":{"type":"string","format":"date-time","description":"If present, donation logically deleted/hidden for audit, evidence, regulatory or privacy reasons. Otherwise, donation is live/visible."}},"required":["id","shopping_mall_customer_id","source_type","source_entity_id","target_campaign_code","amount","status","donated_at","created_at","updated_at"],"description":"Donation record per shopping_mall_donations schema. Captures all evidence-grade fields associated with a user's deposit or mileage donation event, including business role metadata for campaign, source, audit, and compliance. Fields are mapped precisely to the underlying Prisma schema documentation and used for functional, analytic, and legal/compliance purposes."},"IShoppingMallDonation.ICreate":{"type":"object","properties":{"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"UUID of the donating customer. Foreign key for the donation. In most situations populated automatically based on authenticated session; only admins can override or set for proxy donations."},"source_type":{"oneOf":[{"const":"deposit","description":"Whether the donation is from the user's deposit (system cash, wallet, 'deposit') or from mileage/loyalty points ('mileage'). Must match one of the two permitted types, any other values are rejected by schema and business rules."},{"const":"mileage","description":"Whether the donation is from the user's deposit (system cash, wallet, 'deposit') or from mileage/loyalty points ('mileage'). Must match one of the two permitted types, any other values are rejected by schema and business rules."}],"description":"Whether the donation is from the user's deposit (system cash, wallet, 'deposit') or from mileage/loyalty points ('mileage'). Must match one of the two permitted types, any other values are rejected by schema and business rules."},"source_entity_id":{"type":"string","format":"uuid","description":"UUID reference to the actual source entity used: shopping_mall_deposits.id if source_type is 'deposit', or shopping_mall_mileages.id if source_type is 'mileage'. Not nullable; must reference a valid, active source account for the donor/customer. Validity checks performed at service layer."},"target_campaign_code":{"type":"string","description":"String business code or key for the destination campaign to which the donation is being applied. Used to join donations to campaigns for analytics, notification, or reporting."},"amount":{"type":"number","description":"Donation amount (currency units for deposit, point units for mileage). Must be strictly positive and less than or equal to current balance. Enforced by business logic. Zero/negative amounts not accepted."},"evidence_reference":{"type":"string","description":"Optional reference for audit, compliance, or evidence chain—business meta or snapshot link. Nullable; used in compliance, dispute, or campaign promotions."}},"required":["shopping_mall_customer_id","source_type","source_entity_id","target_campaign_code","amount"],"description":"DTO to create a new donation record in shopping_mall_donations (by POST or batch operation), as required for customer-initiated deposit/mileage donation or campaign-driven donation event. Maps to core business, audit, and campaign logic as defined in the Prisma schema."},"IShoppingMallDonation.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_donations","properties":{"status":{"type":"string","description":"Donation status (pending, confirmed, failed, refunded, under_review, etc.).\n\nThis field tracks the current state of the donation workflow. When the status is updated, appropriate side effects may be triggered, such as notifications or accounting adjustments."},"evidence_reference":{"oneOf":[{"type":"string","description":"Optional reference to evidence record, snapshot, or compliance document.\n\nThis can be a document ID, URI, or a string code tying the donation to external audit evidence, regulatory case, fraud review, or refund investigation. May be set to null if not applicable."},{"type":"null"}],"description":"Optional reference to evidence record, snapshot, or compliance document.\n\nThis can be a document ID, URI, or a string code tying the donation to external audit evidence, regulatory case, fraud review, or refund investigation. May be set to null if not applicable."},"resolution_message":{"oneOf":[{"type":"string","description":"Administrative resolution message or compliance note regarding the donation.\n\nUsed for specifying context for refunds, audit decisions, moderation comments, or customer service notes. Can be empty if not updated."},{"type":"null"}],"description":"Administrative resolution message or compliance note regarding the donation.\n\nUsed for specifying context for refunds, audit decisions, moderation comments, or customer service notes. Can be empty if not updated."}},"required":["status"],"description":"DTO for updating an existing donation record.\n\nOnly mutable fields (such as status, evidence, notes, or resolution message) are updatable. The operation is subject to business validation (e.g., finalized/refunded donations cannot be updated except by admin) and audit trail requirements.\n\nAll field changes are snapshotted for evidence. Other fields in shopping_mall_donations (such as donor, amount, or campaign) are immutable after creation and cannot be changed here."},"IShoppingMallBoard.IRequest":{"type":"object","properties":{"shopping_mall_channel_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter boards by channel ID. Used to return only boards belonging to the specified channel."},{"type":"null"}],"description":"Filter boards by channel ID. Used to return only boards belonging to the specified channel."},"shopping_mall_section_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter boards by section ID. Returns only boards belonging to this section, if supplied."},{"type":"null"}],"description":"Filter boards by section ID. Returns only boards belonging to this section, if supplied."},"visibility":{"oneOf":[{"type":"string","description":"Board visibility filter. Use values defined in the visibility enum (e.g., public, private, channel-restricted, section-restricted)."},{"type":"null"}],"description":"Board visibility filter. Use values defined in the visibility enum (e.g., public, private, channel-restricted, section-restricted)."},"moderation_required":{"oneOf":[{"type":"boolean","description":"If true, only boards requiring moderation of all posts are returned. If false, returns boards that do not require moderation."},{"type":"null"}],"description":"If true, only boards requiring moderation of all posts are returned. If false, returns boards that do not require moderation."},"title":{"oneOf":[{"type":"string","description":"Filter boards by (partial) title match. Supports case-insensitive search and typically used with 'ILIKE' or fulltext queries."},{"type":"null"}],"description":"Filter boards by (partial) title match. Supports case-insensitive search and typically used with 'ILIKE' or fulltext queries."},"description":{"oneOf":[{"type":"string","description":"Filter boards by description field, supporting partial search for documentation, explainers, or functional area."},{"type":"null"}],"description":"Filter boards by description field, supporting partial search for documentation, explainers, or functional area."},"created_from":{"oneOf":[{"type":"string","format":"date-time","description":"Return boards created at or after this datetime (ISO 8601 format). Temporal filter supporting advanced search workflows."},{"type":"null"}],"description":"Return boards created at or after this datetime (ISO 8601 format). Temporal filter supporting advanced search workflows."},"created_to":{"oneOf":[{"type":"string","format":"date-time","description":"Return boards created at or before this datetime. Use with created_from for date range export/search."},{"type":"null"}],"description":"Return boards created at or before this datetime. Use with created_from for date range export/search."},"deleted":{"oneOf":[{"type":"boolean","description":"Filter logic for logically deleted boards. If true, only soft-deleted boards returned (deleted_at not null). If false or omitted, only active boards are returned."},{"type":"null"}],"description":"Filter logic for logically deleted boards. If true, only soft-deleted boards returned (deleted_at not null). If false or omitted, only active boards are returned."},"page":{"oneOf":[{"type":"integer","minimum":1,"description":"Page number for pagination (1-based index). If not provided or null, defaults to 1."},{"type":"null"}],"description":"Page number for pagination (1-based index). If not provided or null, defaults to 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of items per page (default 20, max 100)."},{"type":"null"}],"description":"Maximum number of items per page (default 20, max 100)."},"sort_by":{"oneOf":[{"type":"string","description":"Sorting field (e.g., name, created_at, display_order). Enum values depend on board schema; must match an indexed column."},{"type":"null"}],"description":"Sorting field (e.g., name, created_at, display_order). Enum values depend on board schema; must match an indexed column."},"sort_order":{"oneOf":[{"const":"asc","description":"Sorting order (ascending/descending). Can only be 'asc' or 'desc'."},{"const":"desc","description":"Sorting order (ascending/descending). Can only be 'asc' or 'desc'."},{"type":"null"}],"description":"Sorting order (ascending/descending). Can only be 'asc' or 'desc'."}},"required":[],"description":"Advanced filtering, search, and pagination DTO for board list endpoints.\n\nAllows complex search scenarios, partial matching, and flexible pagination of board entities in the modular mall backend. See property description for field format and business logic. All fields are optional; defaults will be handled in controller/provider logic."},"IShoppingMallBoard":{"type":"object","x-samchon-prisma-schema":"shopping_mall_boards","properties":{"id":{"type":"string","format":"uuid","description":"Board primary key (UUID).\n\nThis is the system-unique identifier for the board entity."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Reference to the parent channel (shopping_mall_channels.id)."},"shopping_mall_section_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the parent mall section (shopping_mall_sections.id), if present for section-specific boards."},{"type":"null"}],"description":"Reference to the parent mall section (shopping_mall_sections.id), if present for section-specific boards."},"title":{"type":"string","description":"Board display name/title, visible to all roles."},"description":{"oneOf":[{"type":"string","description":"Optional explanation or purpose of the board, typically Markdown-supported."},{"type":"null"}],"description":"Optional explanation or purpose of the board, typically Markdown-supported."},"visibility":{"type":"string","description":"Board visibility scope. Allowed values: public, private, channel-restricted, section-restricted.\n\nThis field controls read access enforcement for the board. Should match the enum options in the DB schema."},"moderation_required":{"type":"boolean","description":"Whether all posts on this board require moderation prior to publication.\n\nIf true, new posts will be set to a pending moderation state."},"post_expiry_days":{"oneOf":[{"type":"integer","description":"The number of days until posts are auto-archived/expire from user view. Null if no expiry is set."},{"type":"null"}],"description":"The number of days until posts are auto-archived/expire from user view. Null if no expiry is set."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) when the board entity was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601) of the board's most recent update, including configuration/visibility/relationship changes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp (null if board is currently active). During a soft-delete, the record is retained for audit/evidence."},{"type":"null"}],"description":"Soft delete timestamp (null if board is currently active). During a soft-delete, the record is retained for audit/evidence."}},"required":["id","shopping_mall_channel_id","title","visibility","moderation_required","created_at","updated_at"],"description":"Detailed board entity for bulletin/Q&A/review system.\n\nRepresents all business, audit, and configuration fields for a bulletin board used by customers, sellers, admins for posts, inquiries, or reviews. Board configuration and role/visibility logic are enforced using the fields above. Most fields correspond directly to DB columns in shopping_mall_boards table; see schema for exact details.\n\nID, channel reference, title, visibility, moderation_required, created/updated timestamps are always required. Fields like section ID, board description, expiry setting, or deletion status may be null or omitted depending on board type and business configuration."},"IShoppingMallBoard.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_boards","properties":{"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel ID for board placement (shopping_mall_channels.id). Required for all board creation."},"shopping_mall_section_id":{"oneOf":[{"type":"string","format":"uuid","description":"Section ID for this board (shopping_mall_sections.id). Optional. For section-level boards, supply this field."},{"type":"null"}],"description":"Section ID for this board (shopping_mall_sections.id). Optional. For section-level boards, supply this field."},"title":{"type":"string","description":"Board display name/title, unique within channel/section as per DB constraint."},"description":{"oneOf":[{"type":"string","description":"Optional board description or documentation. Markdown or plain text supported."},{"type":"null"}],"description":"Optional board description or documentation. Markdown or plain text supported."},"visibility":{"type":"string","description":"Board visibility setting. Acceptable enum values: public, private, channel-restricted, section-restricted.\n\nControls default read access after creation. Role/controller logic must enforce policy."},"moderation_required":{"type":"boolean","description":"Flag indicating if all posts to this board require moderation before being shown publicly.\n\nIf true, all create post requests will go into pending moderation queue."},"post_expiry_days":{"oneOf":[{"type":"integer","description":"Optional setting for board-level post expiry/auto-archival (in days). Null or absent for no expiry."},{"type":"null"}],"description":"Optional setting for board-level post expiry/auto-archival (in days). Null or absent for no expiry."}},"required":["shopping_mall_channel_id","title","visibility","moderation_required"],"description":"DTO for creating a new board entity.\n\nEnforces required fields for placement (channel_id), display (title), role/access (visibility), and default moderation policy. Section ID, board description, and post expiry window are optional. See schema and business documentation for logic on enum values and expected combinations.\n\nCompliance: only admins or authorized users can create new boards. Unique constraints (channel-section-title) enforced at DB level. Created/updated timestamps are managed at persistence time; not included here."},"IShoppingMallBoard.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Display title of the bulletin board.\n\nUsed for end-user and administration UIs. Must be unique per channel. Titles enable users to understand a board’s purpose and context immediately during navigation."},"description":{"type":"string","description":"Business description and Markdown-supported detailed documentation of the board's operation and target audience.\n\nIntended for admins when editing or auditing board configuration. Explains the business rules, target posting use-cases, and policy details."},"visibility":{"type":"string","description":"Defines who may access/read/write the board. Typical values include: public, private, channel, section, registered-users."},"moderation_required":{"type":"boolean","description":"If true, posts in this board require moderator/admin approval before publication.\n\nEnables stricter content controls for boards with legal/compliance or brand sensitivity."},"post_expiry_days":{"type":"integer","description":"Retention policy for posts in this board, in days (if any).\n\nValue is null for unlimited. When set, posts after expiry are archived or hidden based on business logic."}},"required":[],"x-samchon-prisma-schema":"shopping_mall_boards","description":"Update DTO for bulletin board configuration.\n\nAllows editing of board display, moderation policy, visibility rules, and post expiry logic. Used by administrators to maintain and reconfigure boards according to business or compliance needs."},"IShoppingMallBoardPost.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"The page number for pagination. Defaults to 1 if not provided."},"limit":{"type":"integer","description":"How many posts per page to return. Defaults to system or board-level default."},"sort":{"type":"string","description":"Sort order for post listing (e.g. created_at desc, reply_level asc, etc)."},"filter":{"type":"string","description":"Advanced search or role-specific filter; may include moderation status, author type, text search, or status."},"reply_level":{"type":"integer","description":"Filter posts by reply depth (0 = root thread, 1 = reply, 2+ nested replies)."},"author_type":{"type":"string","description":"If set, filters posts to those created by a particular author type (customer, seller, admin) according to the Actors event model."},"moderation_status":{"type":"string","description":"Show only posts with a matching moderation state (e.g., approved, denied, pending)."},"visibility":{"type":"string","description":"Show only posts matching a certain visibility classification. E.g., public, private to owner, etc."},"created_after":{"type":"string","format":"date-time","description":"Restrict search to posts created after this ISO 8601 datetime."},"created_before":{"type":"string","format":"date-time","description":"Restrict search to posts created before this ISO 8601 datetime."},"title":{"type":"string","description":"Optional search by post title (supports substring or similarity search)."},"body":{"type":"string","description":"Optional search by post body/content (supports substring or similarity search)."}},"required":[],"description":"Advanced search/filter/query/request schema for board posts. Used to paginate/filter/sort board posts in a listing API for moderation, analytics, or business UI.\n\nAllows searching by author, content, reply depth, role, created window, moderation status/visibility, and other advanced business rules. Extensible for future business requirements."},"IShoppingMallBoardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the board post.\n\nUnique UUID identifier for referencing board posts from business logic, reply threading, and moderation workflows."},"shopping_mall_board_id":{"type":"string","format":"uuid","description":"Relation to owning board. References 'shopping_mall_boards.id'."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"If the post author is a customer, this field links to their customer ID. Nullable if another role created the post."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"If the post author is a seller, references their seller ID. Nullable if another role created the post."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"If the post was authored by an admin, contains the admin's ID. Nullable for non-admin posts."},"shopping_mall_parent_post_id":{"type":"string","format":"uuid","description":"Parent post for reply/threading. Null for root thread; set for replies."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"If linked to a specific product (e.g., review, Q&A), reference its product ID."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"If related to a specific order, holds the order's ID (nullable)."},"title":{"type":"string","description":"Post or thread title as seen in UIs or advanced business search."},"body":{"type":"string","description":"Main content of the post. Markdown or HTML supported according to business rules. Full content is provided here for display/moderation."},"reply_level":{"type":"integer","description":"Depth in reply/thread structure (0=main post, 1=first-level reply, etc.)."},"is_official_answer":{"type":"boolean","description":"If true, this post is an official answer by a seller or admin (e.g., product Q&A, moderation response)."},"visibility":{"type":"string","description":"Defines access rules; can be values like public, private, registered-only, depending on business needs."},"moderation_status":{"type":"string","description":"Current moderation review state (e.g., pending, approved, denied, flagged for review)."},"moderation_reason":{"type":"string","description":"If moderation_status is not 'approved', detail for reviewer decision or business context."},"created_at":{"type":"string","format":"date-time","description":"Post creation timestamp in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Last update time for the post. Used for displaying edit state or analytics."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp for logical deletion (null if not deleted). When set, post is soft-deleted; still retained for audit/evidence purposes."}},"required":["id","shopping_mall_board_id","body","reply_level","is_official_answer","visibility","moderation_status","created_at","updated_at"],"x-samchon-prisma-schema":"shopping_mall_board_posts","description":"Full business and audit representation for a bulletin board post.\n\nContains all required fields for business logic, moderation, evidence, and relationship context (product, order, thread). Used for full detail render, moderation, and analytics in board/post UIs. This type is directly mapped to DB and all update/create operations must use properties from the Prisma schema only."},"IShoppingMallBoardPost.ICreate":{"type":"object","properties":{"shopping_mall_board_id":{"type":"string","format":"uuid","description":"Target board's ID for this post. Required to anchor the post to a bulletin board, supporting business and moderation context."},"shopping_mall_parent_post_id":{"type":"string","format":"uuid","description":"If this post is a reply, point to the parent post's ID. Null for root threads or main topics."},"title":{"type":"string","description":"Title of the post/thread for advanced navigation and search. No title is required for minor replies."},"body":{"type":"string","description":"Main post content. Required for creation, Markdown or HTML syntax permitted as per board settings."},"is_official_answer":{"type":"boolean","description":"If true, marks this as an official answer (e.g., for Q&A boards, moderation posts, admin/seller responses). Requires correct role for submission."},"visibility":{"type":"string","description":"Posting visibility (public, private, registered-only). Settable according to user role and board configuration."},"moderation_status":{"type":"string","description":"Initial moderation state. Typically: pending, approved, or depends on board moderation policy. Submission as 'pending' triggers moderation flow, while 'approved' goes live immediately. Valid values are subject to business configuration and role permissions."},"moderation_reason":{"type":"string","description":"Optional initial moderation reason for posts being submitted into moderation (e.g., moderation comment, submission rationale)."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"If post links explicitly to a product (for Q&A, review, etc.), reference product's ID."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"If this post is associated with a specific order, set order ID (nullable for non-order posts)."}},"required":["shopping_mall_board_id","body","reply_level","is_official_answer","visibility","moderation_status"],"x-samchon-prisma-schema":"shopping_mall_board_posts","description":"Request DTO for creating a bulletin board post.\n\nUsed in create (POST) operations, this schema sets required and optional fields for posts on boards—thread, reply, moderation, and content business rules enforced per schema and business requirements. Field presence matches board configuration and system moderation policies."},"IShoppingMallBoardPost.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_board_posts","properties":{"title":{"oneOf":[{"type":"string","description":"Post or article title. Editable. Null means no title or not provided. Must reflect actual business meaning per board context."},{"type":"null"}],"description":"Post or article title. Editable. Null means no title or not provided. Must reflect actual business meaning per board context."},"body":{"type":"string","description":"Main content body of the board post, supporting Markdown or HTML. Business rules may apply for required/optional content, maximum length, and permitted formats. Required for update; must follow policy described in schema."},"visibility":{"type":"string","description":"Visibility of the post. Permitted values depend on board configuration; e.g., 'public', 'registered-users', 'private', etc. Defines which platform users may see the post."},"moderation_status":{"type":"string","description":"Moderation workflow status. Controlled vocabulary such as 'pending', 'approved', 'denied', etc. Platform rules may restrict which statuses can be set on update. Use values from underlying Prisma schema/business logic."},"moderation_reason":{"oneOf":[{"type":"string","description":"Optional explanation for moderation state. Provides context for rejection, limitation, or feedback. Free-form string, null if not applicable or not set."},{"type":"null"}],"description":"Optional explanation for moderation state. Provides context for rejection, limitation, or feedback. Free-form string, null if not applicable or not set."}},"required":["body"],"description":"Update DTO for shopping mall board posts. Permits editing of body, title, visibility, moderation status, and moderation reason. Title and moderation_reason are nullable; body is required. Properties reflect modifiable fields only per schema, and status options must follow controlled values as required by moderation workflow/business logic. Designed for multi-role editing (customer, seller, admin) with role- and board-based field restrictions applied by provider logic."},"IShoppingMallComment.IRequest":{"type":"object","properties":{"reply_level":{"oneOf":[{"type":"integer","description":"Thread depth filter (root=0), for recursive/threaded comments. Provide to limit comments to a certain reply level."},{"type":"null"}],"description":"Thread depth filter (root=0), for recursive/threaded comments. Provide to limit comments to a certain reply level."},"moderation_status":{"oneOf":[{"type":"string","description":"Filter comments by moderation state (e.g., 'pending', 'approved', 'denied'). Enum values follow moderation workflow."},{"type":"null"}],"description":"Filter comments by moderation state (e.g., 'pending', 'approved', 'denied'). Enum values follow moderation workflow."},"author_type":{"oneOf":[{"type":"string","description":"Optional filter to control author role: 'customer', 'seller', or 'admin'. Only returns comments authored by specified role if present."},{"type":"null"}],"description":"Optional filter to control author role: 'customer', 'seller', or 'admin'. Only returns comments authored by specified role if present."},"created_at":{"oneOf":[{"type":"string","format":"date-time","description":"ISO 8601 date-time string filter; return only comments created since this point. Used for incremental fetch or analytics."},{"type":"null"}],"description":"ISO 8601 date-time string filter; return only comments created since this point. Used for incremental fetch or analytics."},"sort":{"oneOf":[{"type":"string","description":"Sort order. Examples: 'created_at:desc', 'reply_level:asc'. Only allowed values enforced by provider logic."},{"type":"null"}],"description":"Sort order. Examples: 'created_at:desc', 'reply_level:asc'. Only allowed values enforced by provider logic."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination, starting at 1 by default."},{"type":"null"}],"description":"Page number for pagination, starting at 1 by default."},"limit":{"oneOf":[{"type":"integer","description":"Maximum comments per page. Business logic may constrain allowed size."},{"type":"null"}],"description":"Maximum comments per page. Business logic may constrain allowed size."},"search":{"oneOf":[{"type":"string","description":"Full-text or keyword search in comment body. Supports advanced search/filter functionality, subject to business search policy."},{"type":"null"}],"description":"Full-text or keyword search in comment body. Supports advanced search/filter functionality, subject to business search policy."}},"required":[],"description":"Query parameters and filters for searching, listing, and paginating board post comments. All properties are optional; if none are provided, returns default set. Filtering enum or value options follow schema business logic. Used for retrieving summary or full threaded comment lists per board post, by customers, sellers, or admins."},"IShoppingMallComment":{"type":"object","x-samchon-prisma-schema":"shopping_mall_comments","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) for the comment."},"shopping_mall_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this comment is attached to a board post, the related post's UUID."},{"type":"null"}],"description":"If this comment is attached to a board post, the related post's UUID."},"shopping_mall_product_inquiry_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this comment is attached to a product inquiry, its UUID."},{"type":"null"}],"description":"If this comment is attached to a product inquiry, its UUID."},"shopping_mall_review_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this comment is attached to a review, its UUID."},{"type":"null"}],"description":"If this comment is attached to a review, its UUID."},"shopping_mall_parent_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this is a reply, parent comment's UUID reference."},{"type":"null"}],"description":"If this is a reply, parent comment's UUID reference."},"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid","description":"Authored-by: customer's UUID, or null if not customer."},{"type":"null"}],"description":"Authored-by: customer's UUID, or null if not customer."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid","description":"Authored-by: seller's UUID, or null if not seller."},{"type":"null"}],"description":"Authored-by: seller's UUID, or null if not seller."},"shopping_mall_admin_id":{"oneOf":[{"type":"string","format":"uuid","description":"Authored-by: admin's UUID, or null if not admin."},{"type":"null"}],"description":"Authored-by: admin's UUID, or null if not admin."},"body":{"type":"string","description":"Comment text (Markdown supported). Required and user-facing. All role and content policies apply."},"level":{"type":"integer","description":"Thread level of comment (root=0). Used for threaded/reply structure."},"moderation_status":{"type":"string","description":"Moderation state (pending/approved/etc). Controls visibility and editing rights."},"moderation_reason":{"oneOf":[{"type":"string","description":"Brief explanation for moderation state (optional)."},{"type":"null"}],"description":"Brief explanation for moderation state (optional)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this comment was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last modification."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Time when comment was soft-deleted, or null if active."},{"type":"null"}],"description":"Time when comment was soft-deleted, or null if active."}},"required":["id","body","level","moderation_status","created_at","updated_at"],"description":"Complete comment information for a board post, product inquiry, or review. Strongly typed for multi-role authors, reply threading, moderation, audit, and evidence management. Follows business structure and audit policies for shopping_mall_comments table."},"IShoppingMallComment.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_comments","properties":{"body":{"type":"string","description":"Text body of the comment. Markdown supported. Required for comment creation."},"shopping_mall_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this comment is attached to a board post, its UUID. Mutually exclusive with review/inquiry fields; provider logic enforces."},{"type":"null"}],"description":"If this comment is attached to a board post, its UUID. Mutually exclusive with review/inquiry fields; provider logic enforces."},"shopping_mall_product_inquiry_id":{"oneOf":[{"type":"string","format":"uuid","description":"If this comment is attached to a product inquiry, its UUID. See business rules for relation exclusivity."},{"type":"null"}],"description":"If this comment is attached to a product inquiry, its UUID. See business rules for relation exclusivity."},"shopping_mall_review_id":{"oneOf":[{"type":"string","format":"uuid","description":"If comment is attached to a review, related review UUID."},{"type":"null"}],"description":"If comment is attached to a review, related review UUID."},"shopping_mall_parent_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"For replies, the parent comment's UUID (optional, null if root)."},{"type":"null"}],"description":"For replies, the parent comment's UUID (optional, null if root)."}},"required":["body"],"description":"DTO for creating a new comment on a post, inquiry, or review. Must specify body and one of board_post_id, product_inquiry_id, or review_id. Follows all validation constraints for authorship, target entity, and threading/relationship per shopping_mall_comments schema and business rules."},"IShoppingMallComment.IUpdate":{"type":"object","description":"Schema for updating an existing comment on a board post. Allows authorized users (author/admin) to update mutable fields of a comment such as its body (Markdown), moderation status, moderation reason, and batch label. Only defined properties may be updated; attempted mutation of non-schema fields is prohibited. All changes are audit-logged and snapshotted for evidence compliance and forensic review. This update request is linked to 'shopping_mall_comments'.\n\nThis schema strictly prohibits adding or using fields not explicitly listed here. Each property includes detailed documentation referencing original schema comments. All fields are English-documented with multiple paragraphs where detail is needed.\n\nSee 'shopping_mall_comments' for field definitions, constraints, and audit requirements.","properties":{"body":{"type":"string","description":"The text content of the comment after edit.\n\nSupports Markdown formatting with length and content restrictions as specified in the original schema. On update, the previous value is snapshotted for compliance and rollback. Edits must comply with business and community guidelines."},"moderation_status":{"type":"string","description":"Updated moderation status for the comment. Must reflect allowed values in the business domain (e.g., 'pending', 'approved', 'rejected'). Status change triggers audit snapshot and, when moving to 'approved', may result in the comment becoming visible.\n\nBusiness logic dictates what transitions are allowed depending on user role (author vs. admin)."},"moderation_reason":{"type":"string","description":"Business or compliance-required reason for changing the moderation status or triggering a workflow. Typically required if the status is set to 'rejected' or moved by an admin. Helps maintain transparency and auditability."},"batch_label":{"type":"string","description":"Optional custom label or tag for batch operations, user-driven organization, or notifications. Not used by default business flows, but included for user-organization or marketing batch/label actions. See schema for any restrictions on label formats."}},"required":[],"x-samchon-prisma-schema":"shopping_mall_comments"},"IShoppingMallProductInquiry.IRequest":{"type":"object","description":"Paging and filtering schema for searching product inquiries (Q&A) for a specific product. Represents list/search request body for PATCH /products/{productId}/inquiries, aligned with 'shopping_mall_product_inquiries' and supporting advanced filtering, sort, and pagination features. Used by listing, analytics, UI, and batch moderation. Each field is presented in detail and documented in English as per schema-driven policy.\n\nRefer to the Prisma schema and requirement analysis for supported filters and their meaning.","properties":{"page":{"type":"integer","description":"Page number (1-based) for pagination. Optional, defaults to 1 if omitted.","minimum":1},"limit":{"type":"integer","description":"Maximum number of results per page for pagination efficiency. Optional, business rules may set a sensible upper bound (e.g., 100).","minimum":1,"maximum":100},"answered":{"oneOf":[{"type":"boolean","description":"If true, filters to only answered inquiries. If false, returns only unanswered inquiries. If unspecified, no filter on answer status."},{"type":"null"}],"description":"If true, filters to only answered inquiries. If false, returns only unanswered inquiries. If unspecified, no filter on answer status."},"is_private":{"oneOf":[{"type":"boolean","description":"Whether to return only private inquiries (true), only public (false), or both (if omitted). Defaults to all if unspecified."},{"type":"null"}],"description":"Whether to return only private inquiries (true), only public (false), or both (if omitted). Defaults to all if unspecified."},"moderation_status":{"type":"string","description":"Filter inquiries by moderation status. Must match allowed values in business rules such as 'pending', 'approved', 'rejected'."},"author_type":{"type":"string","description":"Filter inquiries by role of author ('customer' or 'seller'). Must match allowed values from schema specification."},"created_from":{"type":"string","description":"ISO8601 date string. Only include inquiries created at or after this datetime."},"created_to":{"type":"string","description":"ISO8601 date string. Only include inquiries created before or at this datetime."},"search":{"type":"string","description":"Full-text search string for inquiry content, title, or relevant user-visible fields."},"sort_by":{"type":"string","description":"Sorting field (e.g., 'created_at', 'answered', etc.) according to business rules, schema, and UI needs."},"order":{"oneOf":[{"const":"asc","description":"Sort order, one of 'asc' or 'desc'. Defaults to 'desc' if not specified."},{"const":"desc","description":"Sort order, one of 'asc' or 'desc'. Defaults to 'desc' if not specified."}],"description":"Sort order, one of 'asc' or 'desc'. Defaults to 'desc' if not specified."}},"required":[],"x-samchon-prisma-schema":"shopping_mall_product_inquiries"},"IShoppingMallProductInquiry":{"type":"object","description":"A complete product inquiry record as presented to API consumers. Maps to a row in the shopping_mall_product_inquiries table and exposes all business-relevant fields (questionary content, author references, privacy, moderation state, timestamps, etc). Used for detail retrieval (GET by id), response after create, update, or batch-access endpoints.\n\nIncludes all explicit column/documentation fields in the source schema with English descriptions. Strictly NO additional properties may be used. Relationships (author, product reference, etc.) are represented by native fields or loaded separately according to DTO design.\n\nSee schema for explicit field constraints and audit/compliance requirements.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID, @db.Uuid) for the inquiry record."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Foreign key reference to the associated product this inquiry concerns, mapping to shopping_mall_products.id. Required and non-null."},"shopping_mall_customer_id":{"oneOf":[{"type":"string","format":"uuid","description":"Foreign key reference to the customer who authored the inquiry (if applicable). Null if the author is a seller or not known."},{"type":"null"}],"description":"Foreign key reference to the customer who authored the inquiry (if applicable). Null if the author is a seller or not known."},"shopping_mall_seller_id":{"oneOf":[{"type":"string","format":"uuid","description":"Foreign key reference to a seller if the inquiry is seller-authored. Null if not authored by seller."},{"type":"null"}],"description":"Foreign key reference to a seller if the inquiry is seller-authored. Null if not authored by seller."},"title":{"oneOf":[{"type":"string","description":"Optional short summary/title for the inquiry. May be provided for business/marketing, but not required."},{"type":"null"}],"description":"Optional short summary/title for the inquiry. May be provided for business/marketing, but not required."},"body":{"type":"string","description":"Full content body of the inquiry. Required. Supports user-facing formatting (plain or Markdown as per schema/business policy)."},"is_private":{"type":"boolean","description":"True if inquiry is marked as private (visible only to author, relevant seller/admin, and business logic). Otherwise, visible per board/product rules."},"answered":{"type":"boolean","description":"True if an official answer exists for this inquiry. Otherwise, false."},"moderation_status":{"type":"string","description":"Indicates moderation workflow state (e.g., 'pending', 'approved', 'rejected', etc.), according to business rules."},"created_at":{"type":"string","format":"date-time","description":"UTC timestamp when the inquiry was created."},"updated_at":{"type":"string","format":"date-time","description":"UTC timestamp when the inquiry was last modified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set if the inquiry has been logically deleted (soft delete). Otherwise, null."},{"type":"null"}],"description":"Set if the inquiry has been logically deleted (soft delete). Otherwise, null."}},"required":["id","shopping_mall_product_id","body","is_private","answered","moderation_status","created_at","updated_at"],"x-samchon-prisma-schema":"shopping_mall_product_inquiries"},"IShoppingMallProductInquiry.ICreate":{"type":"object","description":"Schema for request body when creating a new product inquiry for a specific product (shopping_mall_product_inquiries). Captures all business-relevant input fields including inquiry content, privacy flag, and optional title. Author fields (customer, seller) are implicitly derived from authentication context and must NOT be provided by API clients. On create, the system enforces all validation and defaulting rules from the schema, including audit snapshot and compliance meta.\n\nStrictly prohibit submission of extra/non-schema fields. All properties are described in English, following Prisma DB documentation for columns.\n\nSee shopping_mall_product_inquiries schema for required/optional logic and audit requirements.","properties":{"body":{"type":"string","description":"The primary content of the inquiry being created. Required. Supports Markdown or plaintext. Must comply with input constraints (length, allowed markup, business/PII policy)."},"title":{"oneOf":[{"type":"string","description":"Optional summary or headline for the inquiry. Can be used for display, sorting, or search as per business need. May be omitted or set to null."},{"type":"null"}],"description":"Optional summary or headline for the inquiry. Can be used for display, sorting, or search as per business need. May be omitted or set to null."},"is_private":{"type":"boolean","description":"True to create inquiry marked as private (hidden from public users except author and relevant staff); false for public inquiries per product/board policy."}},"required":["body","is_private"],"x-samchon-prisma-schema":"shopping_mall_product_inquiries"},"IShoppingMallProductInquiry.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_inquiries","properties":{"title":{"type":"string","description":"Inquiry summary/title. Editable. Optional per schema, may provide short headline for the inquiry."},"body":{"type":"string","description":"Full inquiry content (markdown or text). This is editable by the inquiry's author or appropriate admin roles. Required for any update."},"is_private":{"type":"boolean","description":"If true, restricts inquiry visibility to only author, seller, and admin. Affects privacy and compliance enforcement. Editable during update."},"moderation_status":{"type":"string","description":"Moderation state of the inquiry (pending, approved, etc.). Should only be set by moderators or admins. For most users, not editable. Optional but may be included for escalation or admin workflows."},"answered":{"type":"boolean","description":"True when an answer is posted. Only system/seller/admins set this; not user-editable except in moderation/admin actions. Optional, but may be provided in moderation update."}},"required":["body"],"description":"DTO for updating an existing product inquiry record, as described in the shopping_mall_product_inquiries Prisma schema. Fields are generally optional except 'body', which is always required for content updates. Handles title, body, privacy (is_private), and moderation status as allowed by business logic. Do not include fields not described in the schema."},"IShoppingMallInquiryAnswer.IRequest":{"type":"object","required":[],"properties":{"page":{"type":"integer","format":"uint32","description":"Page number for pagination. Optional; defaults to first page if not specified."},"limit":{"type":"integer","format":"uint32","description":"Number of records to return per page. Optional; default as per platform standard."},"authorType":{"type":"string","description":"Filter by answer author's role: 'seller' or 'admin'. Optional."},"moderation_status":{"type":"string","description":"Filter answers by their moderation state (e.g., pending, approved). Optional, field as per schema."},"official_answer":{"type":"boolean","description":"Filter to official answers only (true), user or informal answers (false), or all (unset). Optional."}},"description":"Request DTO for searching/paginating answers to a product inquiry. Supports filters for pagination, answer author role, moderation status, or official answer. No required properties; all filters are optional."},"IShoppingMallInquiryAnswer":{"type":"object","x-samchon-prisma-schema":"shopping_mall_inquiry_answers","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the answer."},"shopping_mall_product_inquiry_id":{"type":"string","format":"uuid","description":"Foreign key reference to the inquiry this answer addresses."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Reference to the seller if the answer is authored by a seller. Nullable."},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Reference to the admin if answer is authored by an admin. Nullable."},"body":{"type":"string","description":"Main answer content body. Required."},"moderation_status":{"type":"string","description":"Moderation status (pending, approved, etc.)."},"official_answer":{"type":"boolean","description":"True if this is the official/accepted answer for the inquiry."},"notified_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when customer was notified of the answer."},{"type":"null"}],"description":"Datetime when the concerned user (usually inquiry author) was notified of the answer. Nullable."},"created_at":{"type":"string","format":"date-time","description":"Answer creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this answer."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime when answer was soft-deleted. Nullable."}},"required":["id","shopping_mall_product_inquiry_id","body","moderation_status","official_answer","created_at","updated_at"],"description":"Full DTO for a product inquiry answer, strictly reflecting fields defined on shopping_mall_inquiry_answers. Nullable/optional fields are included as per schema definition."},"IShoppingMallInquiryAnswer.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_inquiry_answers","properties":{"body":{"type":"string","description":"Answer body text (markdown/HTML). Required."},"official_answer":{"type":"boolean","description":"True if this is the official/primary answer. Optional; defaults per business logic if not supplied."},"moderation_status":{"type":"string","description":"Initial moderation state for the answer (e.g., 'pending', 'approved'). Optional; auto-set for most users but available in admin/seller flows."}},"required":["body"],"description":"DTO for creating a new inquiry answer for a specified product inquiry. The answer body is always required, official_answer and moderation_status are optional per business role and moderation configuration."},"IShoppingMallInquiryAnswer.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_inquiry_answers","properties":{"body":{"type":"string","description":"The main content of the answer to the product inquiry. Supports Markdown or HTML formatting as adopted by the platform. This property holds the full, potentially multi-paragraph answer text provided by a seller or admin. Subject to platform formatting and moderation rules."},"moderation_status":{"type":"string","description":"Indicates the moderation workflow status for this answer (e.g., 'pending', 'approved', 'denied'). Determines if the answer is published, under review, or hidden. Rope-based workflows may enforce status value enums external to DB schema."},"moderation_reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Describes the reason/context for the current moderation_status. May be used to record why an answer was rejected, edited, or escalated. Allows null for unmoderated or approved content."},"official_answer":{"type":"boolean","description":"Flag indicating whether this answer is marked as the official response for the inquiry. Only allowed for seller/admin roles and may be used in display or workflow logic (e.g., 'Is this the authoritative answer?')."}},"required":["body"],"description":"Request DTO for updating a product inquiry answer. Maps to shopping_mall_inquiry_answers. Supports updating the body, moderation state, moderation reason, and the official answer flag. All fields are validated upon update and audit-snapshotted for compliance."},"IShoppingMallReview.IRequest":{"type":"object","properties":{"product_id":{"type":"string","format":"uuid","description":"Optional. Filter: Only return reviews associated with the given product ID."},"customer_id":{"type":"string","format":"uuid","description":"Optional. Filter: Only return reviews written by the specified customer."},"seller_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional. Filter: Return reviews associated with this seller as the reviewer (admin/seller context only). Can be null to ignore the filter."},"status":{"type":"string","description":"Optional. Filter: Only include reviews with the specified moderation_status (e.g., 'pending', 'approved', 'denied'). May be exact or partial match as per implementation."},"rating_min":{"type":"integer","description":"Optional. Minimum review rating (inclusive). Enables searching by review score for analytics or filtering (e.g., show all reviews rated 4+ stars)."},"rating_max":{"type":"integer","description":"Optional. Maximum review rating (inclusive)."},"created_from":{"type":"string","format":"date-time","description":"Optional. Filter: Only include reviews created after this ISO 8601 timestamp (inclusive)."},"created_to":{"type":"string","format":"date-time","description":"Optional. Filter: Only include reviews created before this ISO 8601 timestamp (inclusive)."},"search":{"type":"string","description":"Optional. Free-text predicate for searching within review body, title, or other fields. Used for keyword or fuzzy search interfaces."},"page":{"type":"integer","description":"Optional. Requested page number (pagination). Defaults to 1 if omitted."},"limit":{"type":"integer","description":"Optional. Results per page (pagination). Platform default applies if omitted."},"order_by":{"type":"string","description":"Optional. Sort order: must match business-supported column (e.g., 'created_at', 'rating')."}},"required":[],"description":"Request DTO for searching/filtering product reviews. Used for review list UIs, dashboards, and analytics, supporting filtering, free-text, and pagination as required by shopping_mall_reviews domain."},"IShoppingMallReview":{"type":"object","x-samchon-prisma-schema":"shopping_mall_reviews","description":"Represents a single product review as recorded in the shopping mall platform, corresponding to the 'shopping_mall_reviews' Prisma table. This entity captures all critical information about a review, including the product it references, the order context for verified purchase, reviewer account (customer or seller, only if present in the record), rating, review content, moderation and notification state, all timestamps for audit purposes, and logical deletion evidence. \n\nEach review is linked to exactly one product and one order, providing evidence of purchase and eligibility. Reviews may be created by customers or sellers, but customer reviews are standard for product verification. Key business rules prevent duplicate reviews per (product, order, customer) combination, as enforced by a unique constraint. Moderation workflows apply for compliance and quality, and status fields track notification, audit, or evidence chain events. \n\nThis schema is used for all read and detail operations related to reviews; create/update use strict variants. Detailed descriptions for each property reference the comments in the Prisma schema 'shopping_mall_reviews' table.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key. Unique identifier for the review, auto-generated by the system."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Foreign key for the reviewed product, referencing the shopping_mall_products table."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Foreign key for the order associated with this review (verifies purchase; references shopping_mall_orders)."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Reviewer (customer) foreign key, referencing shopping_mall_customers."},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Optional. Reviewer (seller) foreign key, referencing shopping_mall_sellers. Present only if review created by a seller."},"rating":{"type":"integer","description":"Review score as an integer (e.g., 1 to 5 stars). Business rules apply for allowable range and value."},"title":{"type":"string","description":"Title or summary of the review, if provided. May be nullable."},"body":{"type":"string","description":"Full text content of the review. Can be Markdown or plain text, not intended for very large content. Used for display, moderation, and evidence."},"moderation_status":{"type":"string","description":"Moderation process state: e.g., 'pending', 'approved', 'denied'. Refer to business logic for valid values."},"notified_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date/time when the review was notified (optional, may be null). Used for audit and notification logic."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for review creation (ISO 8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update to the review (ISO 8601, UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp for compliance; null if active, set if logically deleted."}},"required":["id","shopping_mall_product_id","shopping_mall_order_id","shopping_mall_customer_id","rating","body","moderation_status","created_at","updated_at"],"descriptionSummary":"Product review business object for shopping mall platform. Links to product, order, customer (and optionally seller). Full evidence, moderation, audit and compliance are covered. No phantom fields or system internals are exposed."},"IShoppingMallReview.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_reviews","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Target product to review (shopping_mall_products.id). Required. Must be a valid product and the user must have completed a purchase."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order through which the product was purchased for review. Required. Enforces 'verified purchase' policy."},"rating":{"type":"integer","description":"Review rating value. Typically required, value 1-5. Enforced by business and UI."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional review headline by user. May be null if no title is provided."},"body":{"type":"string","description":"Main review content. Markdown or HTML supported per platform. Mandatory for submission."}},"required":["shopping_mall_product_id","shopping_mall_order_id","rating","body"],"description":"Request DTO for creating a new review. Maps to shopping_mall_reviews. Requires a product, order, rating, and body text. Supports optional headline/title. Validates that only verified purchases are eligible for review and all business rules for moderation and evidence are enforced."},"IShoppingMallReview.IUpdate":{"type":"object","description":"This schema defines the structure for updating an existing product review in the shopping mall system. It only includes properties that are updatable according to the business rules and aligns entirely with the shopping_mall_reviews Prisma schema. Only the review's author (customer), an admin, or authorized staff can invoke updates to a review record. Depending on business workflow, fields may trigger moderation state changes, audit snapshot creation, or compliance notifications. All updates are logged. Properties are subject to validation rules, such as required type/value constraints and only permitted transitions for moderation fields. The schema guarantees no phantom fields – only allowing modifications to properties that exist in the DB model and are documented as editable in business and compliance specifications. This is the patch/update DTO for single review mutability, not for review creation.","x-samchon-prisma-schema":"shopping_mall_reviews","properties":{"rating":{"type":"integer","description":"The review's star or point rating as an integer, typically on a 1-5 scale. Used for analytics, filtering, and product display. Only editable by the original reviewer or admins. Must match platform's review/rating policy.","minimum":1,"maximum":5},"title":{"type":"string","description":"A short headline for the review, as seen in review listings or product displays. Optional per the Prisma schema and required for review creation/update when the business enforces headline reviews.","maxLength":255},"body":{"type":"string","description":"The full plain text or markdown content of the review. This forms the main body shown to users and stored for analytics, moderation, and export. Supports multi-language characters and formatting by markdown or HTML. Updates to this property are always snapshotted for audit and legal compliance."},"moderation_status":{"type":"string","description":"Current moderation status for compliance, such as 'pending', 'approved', 'denied'. Only updatable by admins or moderation staff; regular users can trigger moderation flows by editing content, but cannot directly change this value. Enum values are managed via the business policy – do not insert non-schema values."},"notified_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"UTC ISO8601 datetime for when notification about this review was last triggered to relevant stakeholders (author, seller, admin). Can be set to null (no notification sent yet) or updated to now when notifications are retried or delivered. Used for after-sales and compliance workflows."}},"required":[],"title":"Update DTO for Shopping Mall Product Review"},"IShoppingMallFavoriteProduct.IRequest":{"type":"object","description":"Schema for filtering and pagination request parameters when listing a customer's favorited products. All properties are optional and match supported search, filter, batch, and sorting features from the backend. Used to perform advanced queries, listing, batch operations, and organizing favorites. Only properties present in the shopping_mall_favorite_products and related tables may be used for search or filter logic. Properties such as notification status, label/tag, or favorite creation time are supported. This DTO is designed as a request payload for list/batch endpoints.","properties":{"page":{"type":"integer","description":"Page number for pagination (1-based). Used to fetch a specific subset of the paged results. Optional; default is 1 if not provided.","minimum":1},"limit":{"type":"integer","description":"Number of items per page for pagination. Controls the page size for returned favorite products. Optional; business default may be applied if missing.","minimum":1,"maximum":500},"batch_label":{"type":"string","description":"String label/tag for grouping, batch operation, or UI organization of favorite products. Optional filter, used for listing favorites with a particular tag/group. Case-insensitive partial match recommended on the backend."},"notification_enabled":{"type":"boolean","description":"If true, filter to only return favorite products with notifications enabled. If false, only those with notifications turned off. Optional; omit to fetch all."},"created_after":{"type":"string","format":"date-time","description":"Filters to favorites created after (greater than) this ISO8601 UTC date-time."},"created_before":{"type":"string","format":"date-time","description":"Filters to favorites created before (less than) this ISO8601 UTC date-time."}},"required":[],"title":"Request DTO for listing/searching Favorite Products"},"IShoppingMallFavoriteProduct":{"type":"object","description":"Schema representing a single favorite product record as stored in shopping_mall_favorite_products. Used for API response, export, and evidence in compliance audits. Includes all business fields, current audit timestamps, associated snapshot and product references. Only fields found in the DB model and with business relevance for favorite operation, audit, or personalization are present. Does not include embedded nested product entity; only references. Excludes deleted_at if soft-deleted (only returned if requested for compliance view).","x-samchon-prisma-schema":"shopping_mall_favorite_products","properties":{"id":{"type":"string","format":"uuid","description":"UUID primary key of the favorite product record in the DB."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"UUID reference to the favoriting customer (as per shopping_mall_customers.id)."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"UUID reference to the product that has been favorited (as per shopping_mall_products.id)."},"shopping_mall_favorite_snapshot_id":{"type":"string","format":"uuid","description":"UUID for the snapshot of the product/business entity preserved at time of favoriting (from shopping_mall_favorite_snapshots)."},"notification_enabled":{"type":"boolean","description":"If true, notifications for events relating to this favorite product are sent to the customer. False disables notifications. Used for batch notification processing, personalization, and system alerts. Editable by the user."},"batch_label":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional organizational tag/label for grouping/batch operations in the UI or personalization module. Not required; null means no grouping."},"created_at":{"type":"string","format":"date-time","description":"Datetime the favorite product record was created (favorited/added) in UTC ISO8601."},"updated_at":{"type":"string","format":"date-time","description":"Datetime the favorite product record was last updated. Used for tracking re-organizations, label/notification preference changes, or evidence audits."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for logical soft-deletion. Null means the favorite is active; set to non-null if logically removed from favorites for audit/evidence. Not returned unless explicitly requested in compliance modes."}},"required":["id","shopping_mall_customer_id","shopping_mall_product_id","shopping_mall_favorite_snapshot_id","notification_enabled","created_at","updated_at"],"title":"Favorite Product Entity"},"IShoppingMallFavoriteProduct.ICreate":{"type":"object","description":"Schema for creating a new favorite product record for a customer as per shopping_mall_favorite_products. Used for POST requests to favorite a product. All properties marked as required must be provided by the client; optional ones follow business logic. Only properties that exist in the DB schema and are required for record creation are included. Does not accept fields that are system-managed or only available post-creation (such as created_at, id). Creator is always inferred from authentication context, not client-specified IDs. This DTO is strictly for creation; updates must use the update DTO.","x-samchon-prisma-schema":"shopping_mall_favorite_products","properties":{"shopping_mall_product_id":{"type":"string","format":"uuid","description":"UUID of the product being favorited (must exist in shopping_mall_products, not soft-deleted)."},"shopping_mall_favorite_snapshot_id":{"type":"string","format":"uuid","description":"UUID reference to the product state snapshot at time of favoriting (must exist in shopping_mall_favorite_snapshots)."},"notification_enabled":{"type":"boolean","description":"Whether to enable notifications for this favorite; true to receive alerts about the product, false otherwise."},"batch_label":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional field; if provided, assigns a grouping label/tag to the favorite for UI and batch operations."}},"required":["shopping_mall_product_id","shopping_mall_favorite_snapshot_id","notification_enabled"],"title":"Create DTO for Favorite Product"},"IShoppingMallFavoriteProduct.IUpdate":{"type":"object","properties":{"notification_enabled":{"type":"boolean","description":"Whether notifications are enabled for entity changes after favoriting.\n\nBoolean indicating whether the customer wants to receive notifications about changes to the favorited product (e.g., restock, price drop, update, etc.)."},"batch_label":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional custom label or tag for user batch operation for organizing favorites. May be used for batch updates, mass removal, etc. Null if not assigned."}},"required":[],"description":"Update payload for customer's favorite product entity.\n\nAllows modifying notification preferences (notification_enabled) and organizational label (batch_label) for a favorited product entry. Ownership is enforced: only the owning customer can update their favorite. Does NOT allow changing references to the favorited product or snapshot.\n\nAll updates are audit-logged and timestamps are updated for compliance and personalization workflows."},"IShoppingMallFavoriteAddress.IRequest":{"type":"object","properties":{"batch_label":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter: Organizational label or user-supplied tag for batch operation management. Null to match entries with no label. Optional."},"notification_enabled":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Optional filter on notification enabled status: true/false for specific notification preference or null for all."},"created_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"ISO-8601 datetime string (inclusive, UTC). Filter for items created at or after this timestamp. Optional: If null, no lower bound is enforced."},"created_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"ISO-8601 datetime string (inclusive, UTC). Filter for items created at or before this timestamp. Optional: If null, no upper bound is enforced."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination. Optional, default 1."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page size for pagination. Optional, default system page size."},"sort":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional sort criteria: typically created_at, batch_label, etc."}},"required":[],"description":"Request DTO for searching and paginating favorite addresses for the authenticated customer.\n\nAllows filtering by organizational label, notification settings, creation date range, and supports pagination (page, limit) as well as custom sort. Only returns favorite addresses owned by the requesting user."},"IShoppingMallFavoriteAddress":{"type":"object","x-samchon-prisma-schema":"shopping_mall_favorite_addresses","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key: Unique identifier for the favorite address entry."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Reference to the favoriting customer's shopping_mall_customers.id."},"shopping_mall_favorite_snapshot_id":{"type":"string","format":"uuid","description":"Reference to the snapshot record at the moment of favoriting (shopping_mall_favorite_snapshots.id)."},"shopping_mall_address_id":{"type":"string","format":"uuid","description":"Business-level ID of the favorited address (must correspond to shopping_mall_addresses)."},"notification_enabled":{"type":"boolean","description":"Whether notifications (e.g., address update, delivery event) are enabled for this favorite address."},"batch_label":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Customer organizational label/tag for batch operation (e.g., organizational context for UI or API batch management)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when favorite was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update to favorite (meta, not address entity)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when favorite was removed (soft delete); null if still active."}},"required":["id","shopping_mall_customer_id","shopping_mall_favorite_snapshot_id","shopping_mall_address_id","notification_enabled","created_at","updated_at"],"description":"Represents a user-favorited address. Links the shopping_mall_customers entry, the corresponding address business ID, and a snapshot at time of favoriting.\n\nSupports notification preferences and optional labels for organizing favorites.\n\nAll modifications are audit-logged for compliance and evidence purposes. The record is never hard-deleted; logical (soft) deletion uses deleted_at."},"IShoppingMallFavoriteAddress.ICreate":{"type":"object","properties":{"shopping_mall_address_id":{"type":"string","format":"uuid","description":"UUID reference to the favorited address (external/business-level address system), not a Prisma relation. Must refer to an existing, accessible address that belongs to the authenticated customer."},"notification_enabled":{"type":"boolean","description":"Whether notifications (e.g., address update, delivery event) are enabled for this favorite."},"batch_label":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional customer-supplied label/tag for organizing or batch management of favorite addresses."}},"required":["shopping_mall_address_id","notification_enabled"],"description":"Input type for creating a favorited address. Used by customers to mark an address as favorite and set notification and organizational preferences.\n\nEnforces business rules on address existence/ownership, prevents duplication, and creates a snapshot at the moment of favoriting for audit and personalization purposes."},"IShoppingMallFavoriteAddress.IUpdate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_favorite_addresses","properties":{"notification_enabled":{"type":"boolean","description":"Indicates whether notifications are enabled for this favorited address. When true, the user receives entity change alerts or delivery event notifications. Changing this property updates live notification preferences for favorite address events."},"batch_label":{"oneOf":[{"type":"string","description":"Optional tag or organizational label assigned by the user for batch operations (e.g., grouping favorites, folders). Allows user to file this favorite under a custom category or for personalized organization."},{"type":"null"}],"description":"Batch label or organizational tag for the favorite address. Set to null to clear grouping or labeling of this favorite."}},"required":[],"description":"DTO for updating a user's favorite address entity. This object supports modifications to notification_enabled (turning address change/delivery notifications on/off) and batch_label (a user-defined label or folder grouping). Used in PATCH/PUT operations on the shopping_mall_favorite_addresses table. No address relationship or snapshot can be changed here; only metadata of the favorite."},"IShoppingMallFavoriteInquiry.IRequest":{"type":"object","properties":{"productId":{"type":"string","format":"uuid","description":"(Optional) Related product's unique identifier. Filters favorite inquiries linked to this product only."},"notification_enabled":{"type":"boolean","description":"(Optional) Filter: only include favorites where notifications are enabled/disabled based on this value."},"batch_label":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Search or group by a specific batch/organization label the user assigned to favorite inquiries. Set to null to query favorites with no label."},"created_from":{"type":"string","format":"date-time","description":"(Optional) Start of creation timestamp filter window (ISO 8601 UTC)—favorites created after or at this time will be included."},"created_to":{"type":"string","format":"date-time","description":"(Optional) End of creation timestamp filter window (ISO 8601 UTC)—favorites created before or at this time will be included."},"sort_field":{"oneOf":[{"const":"created_at","description":"(Optional) Field used for sorting results: created_at or updated_at."},{"const":"updated_at","description":"(Optional) Field used for sorting results: created_at or updated_at."}],"description":"(Optional) Field used for sorting results: created_at or updated_at."},"sort_order":{"oneOf":[{"const":"asc","description":"(Optional) Sort order: 'asc' = ascending, 'desc' = descending. Used with sort_field."},{"const":"desc","description":"(Optional) Sort order: 'asc' = ascending, 'desc' = descending. Used with sort_field."}],"description":"(Optional) Sort order: 'asc' = ascending, 'desc' = descending. Used with sort_field."},"page":{"type":"integer","minimum":1,"description":"(Optional) Page number for pagination. Defaults to 1 if not specified."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"(Optional) Number of favorites per page for pagination. Default and max determined by business rule."}},"required":[],"description":"Request DTO for searching and filtering a customer's favorite inquiries. Allows filtering by product, notification setting, label, and date range. Supports sorting, pagination, and custom organizational workflows. This object maps to favorite Q&A list endpoint search parameters for efficient batch and personalized retrieval."},"IShoppingMallFavoriteInquiry":{"type":"object","x-samchon-prisma-schema":"shopping_mall_favorite_inquiries","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the favorited inquiry (UUID). Unique per favorite entry."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Favoriting customer's ID (UUID). FK to shopping_mall_customers.id for ownership verification."},"shopping_mall_product_inquiry_id":{"type":"string","format":"uuid","description":"Favorited inquiry's record ID (UUID) from shopping_mall_product_inquiries. Indicates which inquiry this favorite refers to."},"shopping_mall_favorite_snapshot_id":{"type":"string","format":"uuid","description":"Snapshot ID (UUID) from shopping_mall_favorite_snapshots taken at the time of favoriting. Preserves immutable business data of the inquiry at favoriting for audit/evidence."},"notification_enabled":{"type":"boolean","description":"Whether notifications are enabled for updates to this favorited inquiry (e.g., new answers, moderation events)."},"batch_label":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User-supplied label for organizing or grouping favorites (e.g. for evidence folders or personalized organization)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this favorite was created (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Last metadata update time (batch_label/notification) (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion time. Null if not deleted, otherwise contains ISO 8601 UTC deletion timestamp."}},"required":["id","shopping_mall_customer_id","shopping_mall_product_inquiry_id","shopping_mall_favorite_snapshot_id","notification_enabled","created_at","updated_at"],"description":"The canonical favorite inquiry entity as persisted in shopping_mall_favorite_inquiries. Contains all metadata needed for audit, personalization, evidence, and notification triggers. Supports business workflows of Q&A favoriting for compliance, batch management, or personalized monitoring."},"IShoppingMallFavoriteInquiry.ICreate":{"type":"object","x-samchon-prisma-schema":"shopping_mall_favorite_inquiries","properties":{"shopping_mall_product_inquiry_id":{"type":"string","format":"uuid","description":"ID of the product inquiry being favorited, from shopping_mall_product_inquiries.id. Required for favorite creation."},"notification_enabled":{"type":"boolean","description":"Whether to enable notifications for this favorite Q&A. Default is true (user receives update notices)."},"batch_label":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User-defined batch/group label for organizing or tagging this favorited inquiry. Optional."}},"required":["shopping_mall_product_inquiry_id"],"description":"DTO for creating a favorite inquiry for a customer. Requires inquiry ID, and optionally sets organizational label and notification trigger for Q&A change alerts. The favorite snapshot entity is managed automatically on creation per system evidence policy."},"IShoppingMallFavoriteInquiry.IUpdate":{"type":"object","properties":{"batch_label":{"type":"string","description":"Custom batch or organization label for this favorite inquiry, used to categorize or group favorites in the user interface or for batch operations. Allows customers to easily label or tag their favorite inquiries with user-specific values for filtering or personalization. Optional, max length is 64 characters for UI and compliance. Should not be used for evidence—purely for organization or personalization."},"notification_enabled":{"type":"boolean","description":"Enable or disable notifications for updates related to this favorite inquiry, such as new answers, moderation events, or status changes. When set to true, the system notifies the customer of significant events about the inquiry via their preferred channels (email, in-app, push, etc). If false, notifications for this favorite are suppressed. Optional; if omitted, inherits the value from when the favorite was created. Customers can toggle this to manage alert fatigue or interest in the inquiry."}},"required":[],"description":"Update payload for a favorite product inquiry entry for the authenticated customer (shopping_mall_favorite_inquiries). Allows the user to update notification and organizational label fields for personalization, evidence audit, or UI management. No fields are required—all are optional and PATCH-like. Business logic ensures at least one field is present to trigger an update."},"IShoppingMallAttachment.IRequest":{"type":"object","properties":{"filename":{"type":"string","description":"Filter attachments by the filename (case-insensitive, partial match allowed). Used for filename searches in the attachment browser or evidence module."},"file_extension":{"type":"string","description":"Filter files by extension (e.g., 'jpg', 'pdf'). No dot prefix required. Typically used to restrict results to certain upload formats."},"mime_type":{"type":"string","description":"Filter attachments based on MIME type (e.g., 'image/png', 'application/pdf'). Enables searching for file types regardless of extension."},"permission_scope":{"type":"string","description":"Filters attachments to those with a specific permission scope, such as 'admin_only', 'seller', 'customer', 'public', as defined in system configuration. Useful for permission audits or access listings."},"logical_source":{"type":"string","description":"Restricts results to files originating from a specific module or business logic context (e.g., 'product', 'order', 'review', 'board_post'). Enables module- or feature-specific evidence tracing or content curation."},"created_at_from":{"type":"string","format":"date-time","description":"Filter attachments created at or after the given ISO8601 timestamp."},"created_at_to":{"type":"string","format":"date-time","description":"Filter attachments created at or before the given ISO8601 timestamp."},"deleted_at":{"type":"boolean","description":"If true, only return attachments that are soft deleted (deleted_at not null); if false, return only active (not deleted) files."},"page":{"type":"integer","minimum":1,"description":"Page number for result pagination (starts at 1)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of results per page. Typical default is 20 or 50; must not exceed 100."},"sort":{"type":"string","description":"Sort order as a string, with values such as 'created_at desc', 'created_at asc', 'filename asc', etc. Must adhere to backend-allowed sort columns/directions."}},"required":[],"description":"Search and filter criteria for attachment file listing (shopping_mall_attachments). Used for paginated, filtered search of uploaded files across all modules. All fields are optional and can be freely combined for advanced queries."},"IShoppingMallAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the file attachment record. Primary key for all attachment references in the system."},"filename":{"type":"string","description":"Original or user-assigned file name including extension, presented for display and legacy traceability. Typically has a max length of 256 characters."},"file_extension":{"type":"string","description":"File extension for the attachment (e.g., 'jpg', 'pdf'), typically lowercase. Used for filtering, content negotiation, and UI rendering."},"mime_type":{"type":"string","description":"MIME type for the uploaded file (e.g., 'image/png', 'application/pdf'). Used for server-side rendering logic, evidence processing, and media browser compatibility."},"size_bytes":{"type":"integer","description":"Size of the file in bytes. Used for client download estimates, quota enforcement, and system monitoring."},"server_url":{"type":"string","maxLength":80000,"description":"Direct URL or CDN URI for secure download access. May reference S3, GCS, or other file storage backends. Permissions are enforced via the 'permission_scope' property."},"public_accessible":{"type":"boolean","description":"If true, this attachment can be accessed via unauthenticated public links; if false, requires access control enforcement. Used to serve media in public-facing contexts."},"permission_scope":{"type":"string","description":"String tag describing what roles, domains, or business logic layers may access this attachment. Values could include 'admin_only', 'seller', 'customer', 'public', or domain-specific tags. Used to scope access handlers in file delivery endpoints. Optional."},"logical_source":{"type":"string","description":"Describes the business use-case, process, or origin context for the uploaded file (e.g. 'product', 'board_post', 'order', etc). Useful for grouping, analytics, and compliance. Optional."},"hash_md5":{"type":"string","description":"MD5 (or other hash) for file integrity validation and de-duplication. Uniqueness enforced at the DB level. Used for anti-tampering, evidence, and S3 dedup."},"description":{"type":"string","description":"Human-readable note, description, or annotation for the file attachment. Used in file managers, review tools, or audit logs. Optional."},"created_at":{"type":"string","format":"date-time","description":"Timestamp in ISO8601 when the attachment was registered/uploaded. Used for audit trail and time-based evidence."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when metadata or file versioning was last updated. Used for evidence chain, UI highlighting, and compliance."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp when the record was soft deleted (or null if not deleted). Used for logical deletion pattern. Optional."}},"required":["id","filename","file_extension","mime_type","size_bytes","server_url","public_accessible","hash_md5","created_at","updated_at"],"description":"Primary metadata object for a file attachment registered in the platform (shopping_mall_attachments table). Encapsulates all file meta, access control hints, business context, and audit timestamps. Underlies file references for all business domains and access flows."},"IShoppingMallAttachment.ICreate":{"type":"object","properties":{"filename":{"type":"string","description":"Original filename for the file upload, including extension. Used for display, traceability, and legacy import."},"file_extension":{"type":"string","description":"File extension (e.g., 'jpg', 'pdf') for rapid filtering and display. Should be provided explicitly if not inferrable from file upload."},"mime_type":{"type":"string","description":"MIME type (e.g., 'image/png', 'application/pdf') for server/logic compatibility. Must match the file content type. Used for evidence intake and content negotiation."},"size_bytes":{"type":"integer","description":"File size in bytes, used for quota enforcement, browser reporting, and performance."},"server_url":{"type":"string","maxLength":80000,"description":"(Write-once at upload) The storage location or CDN URI for this attachment. Must be a valid URI, either from the upload service or file ingestion backend."},"public_accessible":{"type":"boolean","description":"If true, the file is to be made available for public download without authentication. Used for product images or public bulletin boards. If false, permission enforcement applies."},"permission_scope":{"type":"string","description":"Business tag for domain/role-based permissions and access restrictions. Typical values: 'admin_only', 'seller', 'customer', 'public', or custom tags. Optional."},"logical_source":{"type":"string","description":"Describes which business domain, feature, or context is registering this attachment for analytics or audit. Optional. E.g., 'product-image', 'order-receipt', 'legal-document', etc."},"description":{"type":"string","description":"Freeform note or context annotation for the file, presented in admin/file-manager UI, not evidence chain. Optional."}},"required":["filename","file_extension","mime_type","size_bytes","server_url","public_accessible"],"description":"Payload for registering a new file attachment entry in the platform. Does not allow for backdating evidence—timestamps are system-assigned. Only meta fields required at upload step are included; permission, logical_source, and description are optional for business/future extensibility. File versioning, evidence, and downstream linkage are handled separately."},"IShoppingMallAttachment.IUpdate":{"type":"object","properties":{"filename":{"type":"string","description":"The user-supplied or system-updated filename for the attachment, including extension.\n\nUpdating this field changes the main display name shown to users for this attachment, which can be important for download UX and system evidence. It must match the file extension constraint where required and adhere to business upload naming policies.\n\nNull or empty string is forbidden. Example: 'invoice_20241004.pdf'."},"file_extension":{"type":"string","description":"The new or corrected file extension for the attachment, beginning with a dot (e.g. '.pdf') and matching the format of the underlying file content. This field is used to quickly determine file type for download or UI display, and must accurately reflect the MIME type of the content.\n\nChanging this value does not alter the file itself, only the registry's knowledge or display of the type. Leave unchanged for non-update. Example: '.jpg'."},"mime_type":{"type":"string","description":"The new or corrected MIME type for this attachment.\n\nStandard IANA content-type, e.g. 'application/pdf', 'image/png', 'text/html'. Used by downstream modules to handle, validate, or serve the file appropriately. Must accurately describe the file content; this field may not be changed for compliance-locked files or records that are already deleted."},"permission_scope":{"type":"string","description":"Optional update to the access permission scope string for this attachment. Examples: 'admin_only', 'customer', 'seller', 'audit_only'.\n\nDetermines who can download or view this attachment and may be used by file serving systems to implement ACL/role-based controls on download. May be null if intended for public/unrestricted access."},"logical_source":{"type":"string","description":"Optional update to the logical business source or origin module of the attachment.\n\n E.g. 'product', 'board_post', 'order', 'review'. This assists with UI context, analytics, and system lifecycle management. Leave null for unchanged or if the original context does not require update."},"description":{"type":"string","description":"The updated description or human-readable context for this file attachment. Updated to provide more business or evidence-relevant information for admins, users, or compliance workflows. Optional. Long values are allowed and may support Markdown or business formatting rules. Non-null strings must adhere to platform maximum length."}},"required":[],"description":"Payload for updating mutable metadata for an attachment entity (shopping_mall_attachments table). Only defined fields in this DTO may be updated; other system/identity/audit fields are immutable and excluded."},"IShoppingMallAttachmentVersion.IRequest":{"type":"object","properties":{"attachmentId":{"type":"string","format":"uuid","description":"For filtering: attachment ID to which the version(s) belong. Used for querying all versions of a single attachment."},"filename":{"type":"string","description":"Filter by filename at version upload time. This string may be matched exactly or by fuzzy search as defined by the backend. Use to search for historic versions by name."},"file_extension":{"type":"string","description":"Filter attachment versions based on their file extension (e.g., '.pdf', '.jpg'). Only versions with a matching extension value will be returned in query results."},"mime_type":{"type":"string","description":"Mime-type (e.g., 'application/pdf') filter. Use this for narrowing to versions with specific content types, as needed for evidence or business audit/reporting."},"uploader_id":{"type":"string","format":"uuid","description":"Filter by the UUID of the user, customer, seller, or admin who performed the upload. Helpful in large organizations to track or scope responsibility/audit chain for version updates."},"hash_md5":{"type":"string","description":"Search or lookup by cryptographic MD5 hash for validation, deduplication, or integrity checking. Used to ensure content identity, or for cross-checking with external systems/evidence files."},"created_at":{"type":"string","format":"date-time","description":"Optional timestamp or range filter for version creation time (ISO8601, UTC). Client or backend logic should support filtering multiple creations in a time window if needed."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter to include only deleted versions or only active versions. A value of null means only versions not deleted will be considered; otherwise filter by specific deleted timestamp."},"sort":{"oneOf":[{"const":"created_at","description":"Sort key for paginated results. Must be one of the allowed field names. Example: 'created_at'."},{"const":"filename","description":"Sort key for paginated results. Must be one of the allowed field names. Example: 'created_at'."},{"const":"file_extension","description":"Sort key for paginated results. Must be one of the allowed field names. Example: 'created_at'."},{"const":"mime_type","description":"Sort key for paginated results. Must be one of the allowed field names. Example: 'created_at'."},{"const":"uploader_id","description":"Sort key for paginated results. Must be one of the allowed field names. Example: 'created_at'."}],"description":"Sort key for paginated results. Must be one of the allowed field names. Example: 'created_at'."},"order":{"oneOf":[{"const":"asc","description":"Result order for sort parameter. 'asc' for ascending, 'desc' for descending. Example: 'desc'."},{"const":"desc","description":"Result order for sort parameter. 'asc' for ascending, 'desc' for descending. Example: 'desc'."}],"description":"Result order for sort parameter. 'asc' for ascending, 'desc' for descending. Example: 'desc'."},"page":{"type":"integer","minimum":1,"description":"Pagination: which page of results to return (1-based index)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: maximum number of results to return per page. Default and maximum may be enforced by provider."}},"required":[],"description":"Filter/search/query and pagination parameters for listing or searching versions of a specific attachment in shopping_mall_attachment_versions."},"IShoppingMallAttachmentVersion":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of this attachment version. System-generated UUID referencing the versioned file record. Required for evidence chain, download, or audit referencing."},"shopping_mall_attachment_id":{"type":"string","format":"uuid","description":"Foreign key referencing the master Attachment entity to which this version is linked. Must match a shopping_mall_attachments.id."},"version_number":{"type":"integer","description":"Version number for the attachment, 1-based, unique within an attachment. Increments by 1 for each new uploaded version. Used for audit versioning, download, and rollback purposes. Does not reset or skip numbers."},"uploader_id":{"type":"string","format":"uuid","description":"UUID referencing the user (customer, seller, admin, or system) who uploaded this version. Provides audit/context for uploads, evidence, and traceability."},"filename":{"type":"string","description":"Filename at time of upload for this version. Includes extension, reflects what user provided or system assigned at versioning. Example: '20240210_tradesheet_final_v2.pdf'."},"file_extension":{"type":"string","description":"File extension for this version, beginning with a dot (e.g., '.pdf'). Used for UX and validation. Must match filename extension/content type."},"mime_type":{"type":"string","description":"IANA-standard MIME type for this file version (e.g., 'application/pdf', 'image/png'). Used by file downloaders, preview modules, audit, and for permitted business logic checks."},"size_bytes":{"type":"integer","description":"Exact size of this version in bytes. Unchanged for entire lifetime of this version. Must match actual blob size stored by system. Used for storage quota, audit, compliance enforcement. Must be non-negative."},"server_url":{"type":"string","description":"Fully qualified URL (may reference CDN, internal/object storage, or external resource) for downloading or previewing this version of the file. URL must comply with security rules and not leak unpublished/forbidden files. May include signed tokens or be time-limited."},"hash_md5":{"type":"string","description":"MD5 hex digest of file as uploaded for this version. Used to ensure file integrity, enable quick duplicate/match audit searches, and for certain business compliance policies (e.g., known-evidence rules)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601 UTC) when this version was uploaded. Immutable, required for full audit evidence. Used for chain-of-custody and compliance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp for this file version. Null if not deleted, otherwise set to the time when version was removed per compliance/policy/dispute. May only be set by admin users. Required for rollback/evidence logic."}},"required":["id","shopping_mall_attachment_id","version_number","uploader_id","filename","file_extension","mime_type","size_bytes","server_url","hash_md5","created_at","deleted_at"],"description":"Attachment version entity describing all file metadata, audit, and download context for a single versioned file in shopping_mall_attachment_versions. Includes business logic for compliance, rollback, and evidence."},"IShoppingMallAttachmentVersion.ICreate":{"type":"object","properties":{"server_url":{"type":"string","description":"String URL/reference to uploaded file in storage server, CDN, or object store. Must point to a successful upload location (not a browser temp URI).\n\nUsed to supply the file content for this version. The backend will move/store/copy as appropriate for evidence policy. Links may be time-limited or internal to business infrastructure."},"filename":{"type":"string","description":"User- or system-supplied filename for this version, including required extension. Used for user downloads, evidence trails, and business context/meta reporting. Must match business naming policy and extension requirements (see file_extension)."},"file_extension":{"type":"string","description":"Extension of the new version's file, starting with a dot (e.g., '.pdf'). Must reflect actual content for business and compliance rules. Used for UX and server-side file filtering/matching. Example: '.csv'."},"mime_type":{"type":"string","description":"IANA-standard MIME type of the new version ('application/pdf', 'image/jpeg', etc.). Must match file content and backend validation rules. Used for analytic and compliance reporting."},"size_bytes":{"type":"integer","description":"Exact size in bytes of the file as uploaded. Must match actual uploaded content size and facilitate business logic for file size quota and sorting. Must be non-negative."},"hash_md5":{"type":"string","description":"Hex-encoded, lowercase MD5 digest of uploaded file for this version. Used to guarantee evidentiary chain, audit, and enable rapid deduplication or identification. Must match server-calculated hash or will fail validation."},"uploader_id":{"type":"string","format":"uuid","description":"UUID ID of the user, seller, admin, or system who performed the upload. Used for tracking, audit, and business reporting. Must resolve to an authorized actor for this version event."}},"required":["server_url","filename","file_extension","mime_type","size_bytes","hash_md5","uploader_id"],"description":"Payload for uploading a new attachment version (shopping_mall_attachment_versions). File content is referenced by upload URL; all known business metadata and evidence requirements must be supplied. Only fields allowed by policy and business rules."},"IShoppingMallAttachmentVersion.IUpdate":{"type":"object","description":"Schema for updating metadata of an existing attachment version in the shopping mall system. Only editable properties such as filename, file_extension, mime_type, or description should be included. Does not allow changing parent attachment or file content. Used by admin, original uploader, or authorized business role; all changes are audited and linked to compliance evidence. Refer to shopping_mall_attachment_versions Prisma table for allowed fields.","properties":{"filename":{"type":"string","description":"The new filename to assign for this version. May include extension; actual file content remains unchanged. Used for correcting or updating display name in UI and audit."},"file_extension":{"type":"string","description":"Updated extension for the file (e.g., '.jpg', '.pdf'). Serves business, compliance, and filtering needs; should reflect actual file extension or desired business category."},"mime_type":{"type":"string","description":"The new MIME type for the file version. Must accurately describe the file's format (e.g., 'image/png', 'application/pdf'). Used for compliance, analytics, and downstream access control."},"description":{"type":"string","description":"Optional: Updated human-readable note or business context for this version. Displayed in file managers and audit logs. Can provide context for changes, compliance, or version tracking."}},"required":[]},"IShoppingMallEntityAttachmentLink.IRequest":{"type":"object","description":"Search, pagination and filtering criteria for retrieving entity-attachment links. Used for PATCH/list operations on entity-attachment associations in the shopping mall platform. Supports advanced querying by entity type, entity id, attachment id, purpose, permission scope, role, and creation/deletion state. Refer to shopping_mall_entity_attachment_links Prisma table.","properties":{"entity_type":{"type":"string","description":"String discriminator describing entity type for this link. E.g., 'product', 'order', 'review', 'board_post' etc. Used for filtering links to a particular business object kind."},"entity_id":{"type":"string","description":"UUID identifier for the business entity being filtered. When specified, limits results to a particular instance of the given entity type.","format":"uuid"},"attachment_id":{"type":"string","description":"UUID identifier for the linked file attachment. Used for filtering for links referencing a particular file.","format":"uuid"},"purpose":{"type":"string","description":"Purpose context for the link (e.g., 'evidence', 'thumbnail', 'document'). Allows searching for attachments by their usage or business meaning."},"visible_to_roles":{"type":"string","description":"Comma-separated string of roles/groups that can view/access the attachment. E.g., 'admin,seller,customer'. Used to filter visible links by role."},"page":{"type":"integer","description":"Requested page number for pagination. Defaults to 1 if not specified.","minimum":1},"limit":{"type":"integer","description":"Number of rows per page for pagination; default and maximum subject to business policy, typically 25-100.","minimum":1},"sort":{"type":"string","description":"Field name for sort ordering; defaults to created_at descending, may support other business fields."},"deleted_state":{"oneOf":[{"const":"all","description":"Indicates whether to return all, only active, or only logically deleted records. Values: 'all', 'active', 'deleted'."},{"const":"active","description":"Indicates whether to return all, only active, or only logically deleted records. Values: 'all', 'active', 'deleted'."},{"const":"deleted","description":"Indicates whether to return all, only active, or only logically deleted records. Values: 'all', 'active', 'deleted'."}],"description":"Indicates whether to return all, only active, or only logically deleted records. Values: 'all', 'active', 'deleted'."}},"required":[]},"IShoppingMallEntityAttachmentLink":{"type":"object","description":"Schema for an entity-attachment link (shopping_mall_entity_attachment_links). Represents the relationship between a file attachment and a business entity (product, order, review, etc.) for evidence, audit, compliance, and UI display purposes. Refer to shopping_mall_entity_attachment_links Prisma table.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this entity-attachment link."},"shopping_mall_attachment_id":{"type":"string","format":"uuid","description":"Attachment UUID (PK) – link to the file in shopping_mall_attachments."},"entity_type":{"type":"string","description":"String discriminator for the attached business entity type (e.g., 'product', 'order')."},"entity_id":{"type":"string","format":"uuid","description":"UUID ID of the attached entity (business object) referenced."},"linked_by_user_id":{"type":"string","format":"uuid","description":"User who performed/authorized the link. Supports audit trail, permission, and accountability."},"purpose":{"type":"string","description":"Business/contextual purpose of the attachment, e.g., 'evidence', 'thumbnail', 'document' (nullable, optional)."},"visible_to_roles":{"type":"string","description":"Comma-separated string of roles/group codes allowed to access this attachment link (nullable for public)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the link was created (ISO UTC format)."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp/logical deletion for link (null if active, otherwise soft deleted)."}},"required":["id","shopping_mall_attachment_id","entity_type","entity_id","linked_by_user_id","created_at"]},"IShoppingMallEntityAttachmentLink.ICreate":{"type":"object","description":"Schema for creating a new entity-attachment link (shopping_mall_entity_attachment_links). Used for associating an uploaded attachment with a business entity. See shopping_mall_entity_attachment_links Prisma table. Required for POST/create operations.","properties":{"shopping_mall_attachment_id":{"type":"string","format":"uuid","description":"Attachment file's UUID to link."},"entity_type":{"type":"string","description":"String discriminator designating business entity type (e.g., product, order, review)."},"entity_id":{"type":"string","format":"uuid","description":"UUID identifier for the entity being linked."},"linked_by_user_id":{"type":"string","format":"uuid","description":"User ID performing the link for audit/permission context."},"purpose":{"type":"string","description":"Business purpose for the file link (e.g., evidence, thumbnail, document). Optional – nullable."},"visible_to_roles":{"type":"string","description":"Comma-separated string list of business roles allowed to access the link (e.g., 'admin,seller'). Null for public/unrestricted."}},"required":["shopping_mall_attachment_id","entity_type","entity_id","linked_by_user_id"]},"IShoppingMallEntityAttachmentLink.IUpdate":{"type":"object","properties":{"purpose":{"type":"string","description":"Describes the business context or usage of this attachment link (e.g., 'evidence', 'thumbnail', 'document').\n\nDefines how the attachment is intended to be used in relation to the linked business entity, such as a product, order, review, or post. Changing the purpose may impact access, notifications, or evidence linkage depending on business logic."},"visible_to_roles":{"oneOf":[{"type":"string","description":"A comma-separated list of role/group codes (e.g., 'admin,seller,customer') permitted to access this attachment link.\n\nUse to refine permissions for who may read (download/view) the linked file. Null means universal visibility. The roles must align with platform-defined user groups and may affect notification, approval flows, and audit event triggers."},{"type":"null"}],"description":"Who may access this attachment link (role list). String (comma/semicolon-separated) or null for public."}},"required":[],"description":"Update payload for an entity-attachment link (shopping_mall_entity_attachment_links table).\n\nPermits updating the business purpose (usage context) or the roles/groups permitted to access the attachment link. Used for remapping file context (evidence, UI role), or controlling access/granting visibility to specified business roles.\n\nOmitting all fields means no changes. This object is interpreted as 'partial update' (patch)."},"IShoppingMallEntitySnapshot.IRequest":{"type":"object","properties":{"entity_type":{"type":"string","description":"The string identifier for the business entity type (e.g., 'customer', 'order', 'product', etc).\n\nSupports search for snapshots of a particular domain/table/type."},"entity_id":{"type":"string","format":"uuid","description":"The UUID of the business entity whose snapshots are being queried.\n\nAllows filtering of snapshots for a specific item within the identified entity_type."},"snapshot_reason":{"type":"string","description":"The business reason or context for the snapshot acquisition (e.g., 'creation', 'update', 'delete', 'compliance_event').\n\nUsed to filter/search for snapshots taken during particular business flows or events."},"snapshot_actor_id":{"type":"string","format":"uuid","description":"UUID for the actor who triggered the snapshot (user/admin/seller/system routine).\n\nMay refer to customers, admins, sellers, or a system actor. Enables actor/audit-level search."},"event_time_from":{"type":"string","format":"date-time","description":"Lower bound for the event_time (ISO8601 format) - supports searching for snapshots created at or after this time.\n\nUsed for date-range filtered snapshot/audit search."},"event_time_to":{"type":"string","format":"date-time","description":"Upper bound for the event_time (ISO8601 format) - restricts search to snapshots taken before this date/time.\n\nComplements event_time_from for range search."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (starts at 1). Used to fetch specific pages of results during large search operations."},"limit":{"type":"integer","minimum":1,"description":"Number of records per page for pagination. (system default and max are business-configurable; advise 100 or less for large datasets)."},"sort":{"type":"string","description":"Sorting expression for results (e.g., 'event_time desc', 'entity_type asc', etc).\n\nAllows advanced sort configuration for results."}},"required":[],"description":"Request object for searching entity snapshot records (shopping_mall_entity_snapshots).\n\nEnables advanced filtering, date-range search, actor/entity-type scope search, and full pagination/sort."},"IShoppingMallEntitySnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the snapshot record."},"entity_type":{"type":"string","description":"The type/category for the referenced business entity (e.g., 'customer', 'order', 'product'). Determines polymorphic linking."},"entity_id":{"type":"string","format":"uuid","description":"UUID of the entity instance whose state is snapshotted."},"snapshot_reason":{"type":"string","description":"Describes why the snapshot was taken (e.g., 'creation', 'update', 'delete', 'compliance', etc). Business/audit context."},"snapshot_actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Actor/trigger for the snapshot event. May be user, admin, seller, or system process (nullable for system events)."},"snapshot_data":{"type":"string","description":"Serialized (often JSON) entity state at snapshot time. May contain embedded PII, historical evidence, and all business-data needed to reconstruct entity at this point."},"event_time":{"type":"string","format":"date-time","description":"Timestamp of the business event triggering the snapshot."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this snapshot record itself was written (system timestamp, not always equal event_time)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update to the snapshot record (normally immutable, but supports evidence-annotation or legal correction flows)."}},"required":["id","entity_type","entity_id","snapshot_reason","snapshot_data","event_time","created_at","updated_at"],"description":"Immutable, point-in-time evidence snapshot of a business entity's state, suitable for compliance, audit, forensic, and rollback needs. Directly reflects the shopping_mall_entity_snapshots table structure. May contain PII or sensitive data as required by compliance logic."},"IShoppingMallAuditLog.IRequest":{"type":"object","properties":{"entity_type":{"type":"string","description":"Type of target entity (e.g., 'order', 'product', 'customer'), used for scoped event search in audit logs."},"entity_id":{"type":"string","format":"uuid","description":"UUID/ID of the specific entity instance. Enables audit searching for events affecting a given item."},"event_type":{"type":"string","description":"Category of audit event (e.g., 'create', 'update', 'delete', 'workflow_transition', etc)."},"actor_id":{"type":"string","format":"uuid","description":"UUID identifying the user/admin/seller/system that performed the audited event. Enables actor-scoped event search."},"event_result":{"type":"string","description":"Result status of the audited event (e.g. 'success', 'failure', 'denied', error code, etc.)"},"event_time_from":{"type":"string","format":"date-time","description":"Lower bound for event time (ISO8601 string) to restrict search to events at or after a certain time."},"event_time_to":{"type":"string","format":"date-time","description":"Upper bound for event time (ISO8601 string) for searching up to a cutoff event time."},"snapshot_id":{"type":"string","format":"uuid","description":"UUID of the entity snapshot associated with the audit event. Allows search for audit events linked to a specific evidence snapshot."},"event_message":{"type":"string","description":"Free-text or structured event message (error, result context, human-readable note). Enables text-based/debug search."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (1-based, system default=1 if null/omitted)."},"limit":{"type":"integer","minimum":1,"description":"Result size per page for pagination (system default and maximum enforced by business rules)."},"sort":{"type":"string","description":"Sorting instruction for results (e.g., 'event_time desc', 'actor_id asc'). Syntax is backend-implementation-specific."}},"required":[],"description":"Request body for searching and paginating audit log records. Supports advanced filtering by entity, actor, event type, result, timestamp, message, and linkages to snapshots. Used for compliance, forensic, and security/audit monitoring of business events."},"IShoppingMallAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the audit log entry (UUID format)."},"entity_type":{"type":"string","description":"Type of the entity involved in the audit event (polymorphic, e.g., 'order', 'product', 'customer')."},"entity_id":{"type":"string","format":"uuid","description":"ID of the entity involved in the audit event (polymorphic association)."},"event_type":{"type":"string","description":"Type/category of event (e.g., create, update, delete, login, permission_granted, error, workflow_transition, business_rule_eval, etc.)."},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"User/admin/seller or system process that performed/triggered the event. Used for accountability and forensics."},"snapshot_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional reference to the associated snapshot (if relevant to this audit event or state change)."},"event_result":{"type":"string","description":"Result of the audited event (success, failure, denied, completed, partial, error code). Human/machine readable for business trace/audit."},"event_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Detailed message or context (structured or free-form) about the event itself (error details, input parameters, automated reasoning)."},"event_time":{"type":"string","format":"date-time","description":"When this audited event occurred (precise business event time, ISO 8601 format)."},"created_at":{"type":"string","format":"date-time","description":"Time when this audit log record was written (system timestamp, ISO 8601 format)."}},"required":["id","entity_type","entity_id","event_type","event_result","event_time","created_at"],"description":"Full system audit log entry detailing the type, actor, event result/message, timestamps, and related snapshot for compliance, evidence, and forensic traceability.\n\nLinked to shopping_mall_audit_logs table. Used for legal audit, business rule tracing, and security event tracking. See Prisma schema for additional business logic and column constraints."},"IShoppingMallDeletionEvent.IRequest":{"type":"object","properties":{"entity_type":{"type":"string","description":"Filter by entity type affected by deletion (e.g., 'product', 'order', 'review'). Optional for search."},"entity_id":{"type":"string","format":"uuid","description":"Filter by entity id deleted. Optional for query."},"deleted_by_id":{"type":"string","format":"uuid","description":"Filter by actor who performed the delete operation. Optional, matches deleted_by_id column."},"deletion_reason":{"type":"string","description":"Filter by business or system reason for deletion."},"snapshot_id":{"type":"string","format":"uuid","description":"Filter by reference to the snapshot capturing entity state at or before deletion."},"deleted_at_start":{"type":"string","format":"date-time","description":"Filter for logical deletion records from this time (inclusive)."},"deleted_at_end":{"type":"string","format":"date-time","description":"Filter for logical deletion records up to this time (exclusive)."},"page":{"type":"integer","minimum":1,"description":"Pagination: Current page number (1-based, default 1)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: Records per page (default: 20, max: 100)."},"sort_field":{"type":"string","description":"Sort field name (e.g., 'deleted_at', 'entity_type')."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for results (ascending or descending)."},{"const":"desc","description":"Sort order for results (ascending or descending)."}],"description":"Sort order for results (ascending or descending)."}},"required":[],"description":"Query body for searching logical deletion events for any business entity (product, order, review, etc) in the system. Supports pagination, filtering by entity type/id, deletion actor, reason, time range, and sorting. All fields are optional for flexible search/user dashboards."},"IShoppingMallDeletionEvent":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the logical deletion event record."},"entity_type":{"type":"string","description":"Type of entity affected by deletion (e.g., 'product', 'order', 'review')."},"entity_id":{"type":"string","format":"uuid","description":"ID of the entity deleted (polymorphic)."},"deleted_by_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Actor (user/admin/system) who performed the delete operation."},"deletion_reason":{"type":"string","description":"Business or system reason for deletion (user request, policy violation, auto-expiry, admin action)."},"snapshot_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Reference to the snapshot capturing the entity at/before deletion."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp when entity was marked deleted (ISO 8601 format)."},"created_at":{"type":"string","format":"date-time","description":"Record creation time for the deletion event (system timestamp, ISO 8601)."}},"required":["id","entity_type","entity_id","deletion_reason","deleted_at","created_at"],"description":"Logical deletion (soft delete) event record for compliance/evidence. Marks removal of entities by entity_type/id, actor, reason, and snapshot. Preserved for audit, legal review, GDPR/CCPA compliance, integrated with evidence chain systems."},"IShoppingMallChannel.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the channel (UUID)."},"code":{"type":"string","description":"Unique business code for the channel (e.g., 'main', 'korea', 'brandX'). Used for API routing and business rule scoping."},"name":{"type":"string","description":"Human-readable name of the channel for business UI and communication."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"General description and business context of the channel (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Channel creation time (ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Last update time of the channel info (ISO 8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Channel deletion time (soft delete, nullable, ISO 8601)."}},"required":["id","code","name","created_at","updated_at"],"description":"Summary DTO providing key public-facing, searchable fields for shopping mall channel listing UI or administrative dashboards.\n\nLinked to shopping_mall_channels table. Includes code, name, description (nullable), and audit timestamps, omitting heavy relational data. Used for list/search result rows."},"IShoppingMallSection.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_sections","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the mall section. This is the primary key in the shopping_mall_sections table. Example: 'a8c16761-2f19-4b27-8c7b-5719083fb3e5'."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Identifier of the channel this section belongs to. This forms a foreign key relationship with shopping_mall_channels.id. Example: 'c13b8b50-6645-11eb-9439-0242ac130002'."},"code":{"type":"string","description":"Section business code, unique in the channel. Used for API routes and admin/business identification. Example: 'bestseller', 'eventy2025'."},"name":{"type":"string","description":"Section display name as shown to users or in admin UI. Example: 'Best Deals', '2025 Event'. This is required."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short description of the section. May be null if not provided. Used in admin UI and for business communication."},"display_order":{"type":"integer","description":"Evaluation order (integer) for listing sections within a channel. Lower numbers typically appear first. Example: 1, 10, 20."}},"required":["id","shopping_mall_channel_id","code","name","display_order"],"description":"Summary view of a mall section for list displays and search operations. Represents the most important identifying information and business context for managing sections in the platform.\n\nReferences shopping_mall_sections for structure and business logic. Use for efficient administrative, seller, and advanced search UI rendering."},"IShoppingMallChannelCategory.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_channel_categories","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of this category (primary key in shopping_mall_channel_categories)."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"ID of the channel this category belongs to (foreign key to shopping_mall_channels.id). Required."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If present, references another category as the parent for tree hierarchy, otherwise null for root categories."},"code":{"type":"string","description":"Unique business code, scoped to the channel (and possibly parent). Used for routing, rule logic, and admin definition. Example: 'menswear', 'sale'."},"name":{"type":"string","description":"Display name for category (shown to user, admin, and in search). Example: 'Men's Wear', 'Sale'."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business description for display/categorization. Null if not defined."},"display_order":{"type":"integer","description":"Order for UI/admin display within channel/parent. Used to sequence presentation. Typical examples: 1, 10, 20."}},"required":["id","shopping_mall_channel_id","code","name","display_order"],"description":"Summary structure for a category node under a channel. Used for channel category lists, drop-downs, search facets, or management in the UI. Follows shopping_mall_channel_categories table for core fields."},"IShoppingMallCustomer.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_customers","properties":{"id":{"type":"string","format":"uuid","description":"Customer primary key (shopping_mall_customers.id)."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel ID for business segmentation; cross references shopping_mall_channels. Required."},"email":{"type":"string","description":"Email address—unique per channel, required for login unless oauth-only. Example: customer@example.com"},"name":{"type":"string","description":"Customer's legal or preferred display name for address, statement, or greeting. Required."},"status":{"type":"string","description":"Customer account status (business workflow). Common values: 'active', 'pending', 'suspended', 'withdrawn', etc. Used in admin and support flows."},"kyc_status":{"type":"string","description":"KYC/identity verification state. Example values: 'pending', 'verified', 'denied'. Used for compliance and onboarding business logic."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of creation."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp of last update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp (if present) indicating this record has been soft deleted. Null if still active."}},"required":["id","shopping_mall_channel_id","email","name","status","kyc_status","created_at","updated_at"],"description":"Summary and list-view optimized type for shopping mall customers. Contains identifying, status, and audit information but not sensitive credential columns (no password_hash, phone, PII, or external accounts). Reference shopping_mall_customers table for business logic. Used in administrative search, compliance, or platform analytic listings."},"IShoppingMallAdmin.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_admins","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the admin account. Corresponds to the @id field in the shopping_mall_admins schema. Must be a valid UUID."},"email":{"type":"string","format":"email","description":"Administrator login email, unique across all admin accounts. Used for identifying and authenticating the administrator. Must be a valid email address."},"name":{"type":"string","description":"Full legal name of the administrator for compliance, logging, and business context. Sourced from the 'name' column of the shopping_mall_admins table."},"status":{"type":"string","description":"Admin account state indicating platform access rights: possible values include 'active', 'suspended', 'pending', 'withdrawn', and any other status used in the shopping_mall_admins table. Used for platform and login access control."},"kyc_status":{"type":"string","description":"KYC (Know Your Customer) or identity verification status for compliance purposes. Typically one of: 'pending', 'verified', 'denied', 'expired', etc. Sourced from the kyc_status field."},"created_at":{"type":"string","format":"date-time","description":"The datetime (ISO 8601 format) when the admin record was created. Used for audit and traceability."},"updated_at":{"type":"string","format":"date-time","description":"Last modification datetime (ISO 8601) of this admin account. Used for recency tracking and audit logging."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if the admin account has been logically deleted (nullable field). Null indicates the admin is still active."}},"required":["id","email","name","status","kyc_status","created_at","updated_at"],"description":"Summary DTO for an administrator account. Provides basic metadata and status required for list displays, dashboards, and search results, referencing the shopping_mall_admins schema. Omits authentication fields, audit traces, and role escalation workflows for brevity."},"IShoppingMallCustomerIdentity.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_customer_identities","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the customer identity record. UUID format; references primary key in shopping_mall_customer_identities."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Reference ID of the customer (shopping_mall_customers.id) for whom this identity applies."},"identity_type":{"type":"string","description":"Declared type of identity: e.g., 'government_id', 'passport', 'driver's_license', 'resident_number', etc. Used for validation and auditing."},"status":{"type":"string","description":"KYC/identity verification status: options may include 'pending', 'verified', 'rejected', 'expired', etc. Used for workflow and customer onboarding policies."},"issuer":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Issuing authority, such as a governmental or regulatory body. May be null if not recorded per jurisdiction."},"issue_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Date of issuance for the identity document (nullable). ISO 8601 format if present."},"verified_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime at which the identity was confirmed as valid. Null if pending/unverified; ISO 8601 format if set."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (UTC ISO-8601) of the identity record."},"updated_at":{"type":"string","format":"date-time","description":"Last modification (auto-update) timestamp (ISO-8601) for the identity record."}},"required":["id","shopping_mall_customer_id","identity_type","status","created_at","updated_at"],"description":"Summary DTO for a customer identity (KYC). Used in search/filter list and evidence UIs. References the shopping_mall_customer_identities schema, while suppressing any actual PII (identity_value, sensitive hashes) for compliance and privacy."},"IShoppingMallExternalAccount.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_external_accounts","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the external OAuth/social account record. UUID as primary key."},"provider":{"type":"string","description":"OAuth provider name associated with the account (e.g., 'google', 'apple', 'kakao', 'naver', etc.)."},"status":{"type":"string","description":"Status of the external account binding: values such as 'active', 'revoked', 'expired', 'pending', as recorded in the schema."},"linked_at":{"type":"string","format":"date-time","description":"Datetime the external account was linked to the customer. ISO 8601 format."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"UUID of the linked customer (shopping_mall_customers.id)."},"external_user_id":{"type":"string","description":"Identifier for the user's account at the provider side (subject or user_id). Does not reveal login secrets; purely for system traceability."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601) for the OAuth account record."},"updated_at":{"type":"string","format":"date-time","description":"Last modified timestamp (ISO 8601) of this external account."}},"required":["id","provider","status","linked_at","shopping_mall_customer_id","external_user_id","created_at","updated_at"],"description":"Summary DTO for an external OAuth/social account record attached to a customer, for use in listing, audit, or OAuth account review. Corresponds directly to the shopping_mall_external_accounts schema."},"IShoppingMallAdminRoleEscalation.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_admin_role_escalations","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Value from Prisma: shopping_mall_admin_role_escalations.id"},"shopping_mall_admin_id":{"type":"string","format":"uuid","description":"Admin's ID targeted by this escalation. Prisma: shopping_mall_admin_role_escalations.shopping_mall_admin_id"},"escalation_type":{"type":"string","description":"Type of escalation (e.g., customer_to_admin, seller_to_admin). Prisma: shopping_mall_admin_role_escalations.escalation_type"},"status":{"type":"string","description":"Escalation workflow status (e.g., pending, approved, rejected, cancelled). Prisma: shopping_mall_admin_role_escalations.status"},"created_at":{"type":"string","format":"date-time","description":"Escalation request creation timestamp (audit). Prisma: shopping_mall_admin_role_escalations.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the escalation record. Prisma: shopping_mall_admin_role_escalations.updated_at"}},"required":["id","shopping_mall_admin_id","escalation_type","status","created_at","updated_at"],"description":"Admin role escalation summary. Based on Prisma model shopping_mall_admin_role_escalations.\n\nRepresents a summary view of administrator role elevation requests for dashboards or list views."},"IShoppingMallUserConnection.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_user_connections","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Connections table unique ID. Prisma: shopping_mall_user_connections.id"},"actor_id":{"type":"string","format":"uuid","description":"Associated actor's id; refers to customer, seller, or admin. Prisma: shopping_mall_user_connections.actor_id"},"actor_type":{"type":"string","description":"Discriminator: 'customer', 'seller', 'admin'. Prisma: shopping_mall_user_connections.actor_type"},"channel_id":{"type":"string","format":"uuid","description":"Channel context for this connection. Prisma: shopping_mall_user_connections.channel_id"},"ip_address":{"type":"string","description":"Remote IP address. Prisma: shopping_mall_user_connections.ip_address"},"login_at":{"type":"string","format":"date-time","description":"Datetime of login/session establishment. Prisma: shopping_mall_user_connections.login_at"},"logout_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable. Logout/session end time. Prisma: shopping_mall_user_connections.logout_at"}},"required":["id","actor_id","actor_type","channel_id","ip_address","login_at"],"description":"Summary for user session/connection. Based on shopping_mall_user_connections. Used in paginated audit logs or device session listings."},"IShoppingMallUserAgreement.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_user_agreements","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Agreement record id. Prisma: shopping_mall_user_agreements.id"},"actor_id":{"type":"string","format":"uuid","description":"Associated actor's id. Prisma: shopping_mall_user_agreements.actor_id"},"actor_type":{"type":"string","description":"Discriminator for actor type (customer, seller, admin). Prisma: shopping_mall_user_agreements.actor_type"},"agreement_type":{"type":"string","description":"Agreement type—'Terms', 'Privacy', etc. Prisma: shopping_mall_user_agreements.agreement_type"},"version":{"type":"string","description":"Document version string. Prisma: shopping_mall_user_agreements.version"},"accepted_at":{"type":"string","format":"date-time","description":"Datetime when agreement was accepted. Prisma: shopping_mall_user_agreements.accepted_at"},"withdrawn_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp if user withdraws agreement. Prisma: withdrawn_at"},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp. Prisma: created_at"}},"required":["id","actor_id","actor_type","agreement_type","version","accepted_at","created_at"],"description":"Summary of user agreement acceptance for compliance audit/search based on shopping_mall_user_agreements table."},"IShoppingMallProduct.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_products","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Product unique identifier. Prisma: shopping_mall_products.id"},"shopping_mall_seller_id":{"type":"string","format":"uuid","description":"Seller who owns product. Prisma: shopping_mall_products.shopping_mall_seller_id"},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Channel where the product is listed. Prisma: shopping_mall_products.shopping_mall_channel_id"},"code":{"type":"string","description":"Business-facing, unique product code per seller/channel. Prisma: shopping_mall_products.code"},"name":{"type":"string","description":"Product display name. Prisma: shopping_mall_products.name"},"status":{"type":"string","description":"Product status (e.g., Draft, Active, Paused, Discontinued, Deleted). Prisma: shopping_mall_products.status"},"created_at":{"type":"string","format":"date-time","description":"Product creation timestamp. Prisma: created_at"}},"required":["id","shopping_mall_seller_id","shopping_mall_channel_id","code","name","status","created_at"],"description":"Summary for product list display. Based on Prisma schema shopping_mall_products. Contains essential identity, owner, and display information for catalog UIs."},"IShoppingMallProductOption.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_options","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the product option record."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Parent product ID this option belongs to."},"name":{"type":"string","description":"Option name (e.g. Size, Color) as shown to customers in the UI."},"required":{"type":"boolean","description":"Whether this option must be selected to order product (business constraint field)."},"position":{"type":"integer","description":"Display order/position in option selection UI."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when option was created."},"updated_at":{"type":"string","format":"date-time","description":"Last update to option metadata."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null if still present."}},"required":["id","shopping_mall_product_id","name","required","position","created_at","updated_at"],"description":"Summary DTO for a product option in shopping_mall_product_options. Used for option listing, UI presentation, analytics, and validation. Contains business-identifying metadata but omits value arrays. Integrates with parent product entity for full composition/variant logic. Exported in summary result lists and option search APIs. ISO8601 format is used for all date/time fields. Optionally includes soft deletion timestamp for audit/recoverability."},"IShoppingMallProductVariant.ISummary":{"type":"object","description":"Summary details for a product variant (SKU) in the shopping mall catalog. Represents key business and display properties for use in product lists, order preparation, inventory review, and analytics. Based on the shopping_mall_product_variants Prisma schema with security filtering to prevent sensitive/irrelevant fields exposure. Suitable for collection views where full detail is not required but SKU identification and key pricing/inventory fields are necessary.\n\nThis definition enforces mapping to real database fields only, referencing variant identification, SKU/business code(s), core pricing and stock info, and weight for logistical calculations. For list views, excludes large text, historical details, and full audit traces unless specially required.\n\nDescriptions reference the Prisma model for each property, ensuring data consistency and audit compliance across inventory, order, and catalog modules.","x-samchon-prisma-schema":"shopping_mall_product_variants","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the variant record as defined in shopping_mall_product_variants.id. Used for referencing within product detail, cart, order, and analytics."},"sku_code":{"type":"string","description":"Internal SKU code/identifier unique within product. Used for business, inventory, and catalog identification. Mirrors shopping_mall_product_variants.sku_code."},"bar_code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Bar code or EAN/UPC for the variant (optional). May be null for custom/private-label SKUs. Matches shopping_mall_product_variants.bar_code."},"option_values_hash":{"type":"string","description":"Deterministic hash of selected option values for this variant, enabling fast lookup and uniqueness enforcement (business context: option mapping, SKU uniqueness). Mirrors shopping_mall_product_variants.option_values_hash."},"price":{"type":"number","format":"double","description":"Sales price for the specific SKU/variant as a floating point value (decimal/DoublePrecision). Corresponds to shopping_mall_product_variants.price. Used for order line totals, catalog listings, and price comparison modules."},"stock_quantity":{"type":"integer","description":"Current inventory quantity as stored in shopping_mall_product_variants.stock_quantity. Used for cart enablement, validation, and catalog business logic. NOT authoritative for full audit/reconciliation; snapshot historical records live elsewhere."},"weight":{"type":"number","format":"double","description":"Weight used for shipping calculations, per shopping_mall_product_variants.weight. Required for fulfillment, shipping, and logistics calculations. Always present."},"created_at":{"type":"string","format":"date-time","description":"Variant creation timestamp according to Prisma schema (shopping_mall_product_variants.created_at). Always reflects UTC ISO-8601 date string; used for inventory analytics and catalog workflows."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the variant, as per shopping_mall_product_variants.updated_at. In UTC ISO-8601 for synchronization and business event analysis."}},"required":["id","sku_code","option_values_hash","price","stock_quantity","weight","created_at","updated_at"]},"IShoppingMallProductTag.ISummary":{"type":"object","description":"Summary details for a product tag within a shopping mall catalog context. Used to support search, recommendation, analytics, and curation workflows. Based on the shopping_mall_product_tags Prisma schema, ensuring data is only drawn from defined business fields. Synthetic for API list display and analytics—does not duplicate resource-heavy or irrelevant details (e.g., tagging audit history, tag analytics).\n\nEach property aligns to a specific column in shopping_mall_product_tags, with uniqueness enforced at the (product, tag) level for list workflows. Descriptions are distilled from the schema for compliance and extensibility.","x-samchon-prisma-schema":"shopping_mall_product_tags","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the tag entry per shopping_mall_product_tags.id. Required for reference, editing, analytics, and batch workflows."},"tag":{"type":"string","description":"Tag/keyword string assigned to the product. Must match shopping_mall_product_tags.tag and adhere to any defined business or SEO restrictions. Used for search, AI, and analytics."}},"required":["id","tag"]},"IShoppingMallProductAttachmentLink.ISummary":{"type":"object","description":"Summary details for file attachment links associated with a shopping mall product. Used in product galleries, content media, downloadable docs, and evidence flows. Derived solely from columns in the shopping_mall_product_attachment_links Prisma table and related file metadata via business context. Contains only quick-reference and catalog info needed for UI thumbnail lists, download links, and rich content assembly—excludes substantial audit, heavy file, or relational data. Enforces audit consistency.\n\nProperties reference the product-attachment link, role/purpose, order, and attachment id for downstream use. Ensures no heavy file or attachment internals are mingled in summary display, for performance and privacy reasons.","x-samchon-prisma-schema":"shopping_mall_product_attachment_links","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the attachment link (shopping_mall_product_attachment_links.id). Used to reference and manage specific file associations with a product."},"attachment_id":{"type":"string","format":"uuid","description":"Attachment file reference for display/download operations. Links to the master attachment metadata and file versioning. Corresponds to shopping_mall_product_attachment_links.attachment_id."},"purpose":{"type":"string","description":"Attachment usage context for this link (e.g., main_image, gallery, spec_sheet). Business string—not formal enum—per shopping_mall_product_attachment_links.purpose. Used for UI slotting and purpose-driven filtering."},"position":{"type":"integer","description":"Order for displaying attachments of the same purpose/category, per shopping_mall_product_attachment_links.position. Used to sort gallery/media asset collections."}},"required":["id","attachment_id","purpose","position"]},"IShoppingMallCart.ISummary":{"type":"object","description":"Summary DTO for a shopping cart entry as defined in the shopping_mall_carts Prisma schema. Used to display user or admin lists of shopping carts for dashboard, analytics, and session management. Excludes heavy or confidential business details; shows only identity, status, customer linkage, and cart context for high-performance admin/UX dashboards. Fields reflect only those present in the DB schema—never inferred or extended. Complies with all privacy and audit requirements across session and cart flows.\n\nEach property is associated with a column in shopping_mall_carts, ensuring full traceability of cart CRUD operations and enabling compliance with audit, evidence, and regulatory policy in commerce domains. Timestamp fields shown in UTC ISO-8601 date-time string format. No business-internal or sensitive data is included.","x-samchon-prisma-schema":"shopping_mall_carts","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the cart (shopping_mall_carts.id). Required for all API resource operations, editing, and evidence trace."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Belonged customer's ID (shopping_mall_customers.id)—the cart owner/account. Ensures correct attribution in UX, analytics, and session merge/business workflows."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"Associated sales channel's ID (shopping_mall_channels.id). Permits scoping of cart for multi-store/channel management and compliance."},"shopping_mall_section_id":{"type":"string","format":"uuid","description":"Associated section within channel (shopping_mall_sections.id) for logic across channel/sections. Used for navigation, search, and analytics."},"source":{"type":"string","description":"Source of the cart (guest, member, migrated, etc). Mirrors shopping_mall_carts.source. Used for analytics, tracking session/business origin."},"status":{"type":"string","description":"Status of the cart (active, expired, checked_out, deleted) as defined in shopping_mall_carts.status. Used to drive business flows and cart-to-order validation."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration timestamp for automatic cart archival or business/session expiry window. Null if auto-expire not set, otherwise a UTC ISO-8601 date-time. Matches shopping_mall_carts.expires_at."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of cart creation, per shopping_mall_carts.created_at, in UTC ISO-8601. For session/business analytics."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent update to the cart (add/remove item, merge, etc.), stored as UTC ISO-8601. Sourced from shopping_mall_carts.updated_at."}},"required":["id","shopping_mall_customer_id","shopping_mall_channel_id","shopping_mall_section_id","source","status","created_at","updated_at"]},"IShoppingMallPayment.ISummary":{"type":"object","description":"Summary DTO for a payment record in the AI-driven shopping mall platform, representing key payment attributes for list/render contexts. This summary includes essential reference, status, amount, and audit metadata. Suitable for list/pagination operations as returned from /orders/{orderId}/payments, and aligns with shopping_mall_payments schema documentation.\n\nProperties are derived from actual columns in shopping_mall_payments. For complete details, use the full IShoppingMallPayment definition.","x-samchon-prisma-schema":"shopping_mall_payments","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this payment entry within the platform, corresponding to shopping_mall_payments.id."},"payment_type":{"type":"string","description":"Type of payment: e.g., 'card', 'virtual_account', 'deposit', 'mileage', 'split', as specifically recorded in shopping_mall_payments.payment_type."},"status":{"type":"string","description":"Payment status: possible values include 'pending', 'paid', 'cancelled', 'failed', 'refunded', etc. From shopping_mall_payments.status."},"amount":{"type":"number","format":"double","description":"Amount covered by this payment. Always a non-negative value, drawn from shopping_mall_payments.amount."},"currency":{"type":"string","description":"Currency code for this payment. From shopping_mall_payments.currency. Should be an ISO currency code."},"customer_id":{"type":"string","format":"uuid","description":"UUID of the shopping mall customer making or consuming this payment. Schema: shopping_mall_payments.shopping_mall_customer_id."},"order_id":{"type":"string","format":"uuid","description":"UUID of the related order. Schema: shopping_mall_payments.shopping_mall_order_id."},"requested_at":{"type":"string","format":"date-time","description":"Timestamp when payment was requested/initiated. From shopping_mall_payments.requested_at."},"confirmed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp the payment was successfully confirmed. Nullable; from shopping_mall_payments.confirmed_at."},"cancelled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for payment cancellation/refund event, if this ever occurred. Nullable field from shopping_mall_payments.cancelled_at."}},"required":["id","payment_type","status","amount","currency","customer_id","order_id","requested_at"],"$comment":"Summary DTO for shopping_mall_payments list views."},"IShoppingMallShipment.ISummary":{"type":"object","description":"Summary DTO for a shipment batch associated with a shopping mall order. Used for list/page rendering, this type reflects key shipment business/meta status for operational and analytics UI. Each property is mapped to a specific column in shopping_mall_shipments, reflecting the schema's business/audit requirements. All business and audit fields required for shipment paging/summaries are included. Full details are in the IShoppingMallShipment DTO.","x-samchon-prisma-schema":"shopping_mall_shipments","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this shipment batch. Maps to shopping_mall_shipments.id."},"order_id":{"type":"string","format":"uuid","description":"Parent order ID. Maps to shopping_mall_shipments.shopping_mall_order_id."},"seller_id":{"type":"string","format":"uuid","description":"UUID of seller responsible for fulfillment. From shopping_mall_shipments.shopping_mall_seller_id."},"shipment_code":{"type":"string","description":"Unique business/tracking code for the shipment (shopping_mall_shipments.shipment_code)."},"external_tracking_number":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"External carrier's shipment tracking number, if available; nullable field from shopping_mall_shipments.external_tracking_number."},"status":{"type":"string","description":"Shipment status, e.g., 'pending', 'shipped', 'delivered', 'returned', 'cancelled', per shopping_mall_shipments.status."},"carrier":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Carrier/logistics provider reference, nullable, from shopping_mall_shipments.carrier."},"requested_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for shipment prep initiation, from shopping_mall_shipments.requested_at."},"shipped_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Time goods were handed over to carrier, nullable, shopping_mall_shipments.shipped_at."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Delivery confirmation timestamp, nullable, shopping_mall_shipments.delivered_at."},"created_at":{"type":"string","format":"date-time","description":"Row creation datetime for audit, from shopping_mall_shipments.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update time of shipment meta, from shopping_mall_shipments.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp for compliance/audit, nullable, shopping_mall_shipments.deleted_at."}},"required":["id","order_id","seller_id","shipment_code","status","created_at","updated_at"],"$comment":"Summary DTO for shopping_mall_shipments list views."},"IShoppingMallDelivery.ISummary":{"type":"object","description":"Summary DTO representing a delivery record (address window, batch delivery) for a shopping mall order. Used for paginated/searchable delivery lists, this includes key recipient, address, status, shipment, and audit fields from shopping_mall_deliveries. Fields and descriptions are mapped directly from the schema specification and audit requirements. The full delivery entity is IShoppingMallDelivery; this summary is for index/grid purposes.","x-samchon-prisma-schema":"shopping_mall_deliveries","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the delivery record; shopping_mall_deliveries.id."},"order_id":{"type":"string","format":"uuid","description":"UUID for the related order. shopping_mall_deliveries.shopping_mall_order_id."},"shipment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Associated shipment batch (if multi-shipment), nullable, shopping_mall_deliveries.shopping_mall_shipment_id."},"recipient_name":{"type":"string","description":"Actual recipient name captured at the time; shopping_mall_deliveries.recipient_name."},"recipient_phone":{"type":"string","description":"Contact phone for the recipient. shopping_mall_deliveries.recipient_phone."},"address_snapshot":{"type":"string","description":"Serialized structure (e.g., JSON string) of the delivery address and any customs meta; frozen at time of creation (shopping_mall_deliveries.address_snapshot)."},"delivery_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User-supplied delivery instruction/message, nullable, shopping_mall_deliveries.delivery_message."},"delivery_status":{"type":"string","description":"Delivery lifecycle state (prepared, dispatched, delivered, returned, failed, confirmed, etc.). shopping_mall_deliveries.delivery_status."},"confirmed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Delivery confirmation time, if confirmed by user/system. Nullable."},"delivery_attempts":{"type":"integer","description":"Number of delivery attempts recorded for audit/evidence. shopping_mall_deliveries.delivery_attempts."},"created_at":{"type":"string","format":"date-time","description":"Record creation time for delivery slot/evidence. shopping_mall_deliveries.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update time (e.g., delivery event) for business audit. shopping_mall_deliveries.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp for logical removal/compliance. Nullable, shopping_mall_deliveries.deleted_at."}},"required":["id","order_id","recipient_name","recipient_phone","address_snapshot","delivery_status","delivery_attempts","created_at","updated_at"],"$comment":"Summary DTO for shopping_mall_deliveries list/grid views."},"IShoppingMallAfterSaleService.ISummary":{"type":"object","description":"Summary DTO for a given after-sales service case (returns, exchanges, refunds, etc.) linked to a specific order. Used in paginated or filterable result sets, it conveys essential business fields for workflow, audit, and compliance. Each property corresponds with shopping_mall_after_sale_services columns, as required for after-sales/CRM workflow and evidence retention. The full entity is IShoppingMallAfterSaleService, while this summary is for paging/search context.","x-samchon-prisma-schema":"shopping_mall_after_sale_services","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the after-sales service record; shopping_mall_after_sale_services.id."},"order_id":{"type":"string","format":"uuid","description":"Related order UUID for this after-sales entry. shopping_mall_after_sale_services.shopping_mall_order_id."},"delivery_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Linked delivery record ID, nullable when unassigned. shopping_mall_after_sale_services.shopping_mall_delivery_id."},"case_type":{"type":"string","description":"Business type for the after-sales case: examples include 'return', 'exchange', 'refund', 'repair', as in shopping_mall_after_sale_services.case_type."},"status":{"type":"string","description":"Workflow state or business status, such as 'requested', 'processing', 'approved', 'denied', 'completed', per shopping_mall_after_sale_services.status."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"User-provided or business-generated reason for after-sales request. Nullable; shopping_mall_after_sale_services.reason."},"evidence_snapshot":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Reference to snapshot/evidence related to this after-sales event, nullable, shopping_mall_after_sale_services.evidence_snapshot."},"resolution_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Resolution notes, business feedback, or customer notification for case handling; nullable; shopping_mall_after_sale_services.resolution_message."},"created_at":{"type":"string","format":"date-time","description":"After-sales case creation timestamp; shopping_mall_after_sale_services.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Latest update time (business audit/change) for this after-sales record; shopping_mall_after_sale_services.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp for case history, as required for compliance/legal recovery. shopping_mall_after_sale_services.deleted_at, nullable."}},"required":["id","order_id","case_type","status","created_at","updated_at"],"$comment":"Summary DTO for shopping_mall_after_sale_services list/grid context."},"IShoppingMallCoupon.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_coupons","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the coupon in the database."},"code":{"type":"string","description":"Unique coupon code or template (for single/bulk issuance).\n\nBusiness rule: uniqueness enforced per DB, used for end user redemption, analytics, and traceability."},"title":{"type":"string","description":"Coupon title or label displayed to users.\n\nIntended for UI/UX and business reporting."},"coupon_type":{"type":"string","description":"Type of coupon.\n\nMust be one of: public, private, one-time, etc. Business-layer determines enum values, often for privilege assignment or flow segmentation. Used to organize coupons for analytics, issuance, and application logic."},"discount_type":{"type":"string","description":"How the coupon computes its benefit (amount, percentage, free_shipping, ...). Business enum; enforced by application logic."},"discount_value":{"type":"number","description":"Discount value (interpreted as amount or % by discount_type). Must be a positive number for monetary/percentage value. Business validation applies."},"stackable":{"type":"boolean","description":"Boolean indicating whether coupon can be stacked with others."},"exclusive":{"type":"boolean","description":"Flag indicating if the coupon is exclusive (cannot be combined with any other coupon/benefit in a single order)."},"issued_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime when the coupon was activated/first issued.\n\nMay be null if coupon is not yet issued (draft/prepared state)."},"expires_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration datetime for the coupon. Nullable - may be null for permanent or system-cancelled coupons."},"used_count":{"type":"integer","description":"How many times this coupon has been used across all recipients. Used for business analytics, dashboarding, and application logic."}},"required":["id","code","title","coupon_type","discount_type","discount_value","stackable","exclusive","used_count"],"description":"Summary view of a shopping mall coupon. Used for listing/search in admin, seller, or analytics UI.\n\nIncludes only key identifying, business, and application control fields. Excludes full configuration, analytics, and deep targeting data. Fields are derived strictly from the shopping_mall_coupons schema. Used primarily in IPage<IShoppingMallCoupon.ISummary> pagination responses."},"IShoppingMallCouponCampaign.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_coupon_campaigns","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the campaign."},"name":{"type":"string","description":"Business-facing campaign name. Must be unique per DB constraint. Primary UI label."},"starts_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime when campaign begins; null means immediately active or system default."},"ends_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Expiration/end datetime for the campaign. Null means no planned expiration."},"business_status":{"type":"string","description":"Campaign business status or workflow indicator. Examples: draft, active, paused, expired, deleted. Used for filtering, dashboard, and automation."}},"required":["id","name","business_status"],"description":"Summary of a shopping mall coupon campaign. Used for campaign listing/search with key status, period, and identity fields. Excludes deep analytics and coupon relations. Aligned with shopping_mall_coupon_campaigns schema."},"IShoppingMallDeposit.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_deposits","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the deposit account."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Reference to the customer's unique identifier."},"balance":{"type":"number","description":"Current deposit balance (in system currency units). Always non-negative, may reflect pending operations until settled."},"status":{"type":"string","description":"Account status (active, frozen, closed, under_review, etc.) for financial and compliance operations."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the deposit record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update to the deposit record."}},"required":["id","shopping_mall_customer_id","balance","status","created_at","updated_at"],"description":"Summary DTO for a deposit account (user e-wallet).\n\nUsed in paginated administrative/index listings. Includes identifiers, balance, and account status.\n\nReflects shopping_mall_deposits table."},"IShoppingMallMileage.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_mileages","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique mileage account identifier for the customer."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"FK reference to the customer account which owns this mileage."},"balance":{"type":"number","description":"Current usable mileage/point balance. Non-negative value representing available loyalty points."},"status":{"type":"string","description":"Status of the point account (active, expired, frozen)."},"expired_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime when all current mileage expires if not renewed or spent. May be null for system-default, no expiry, or non-expiring bonus. Used for campaign logic."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when mileage account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update to the mileage account."}},"required":["id","shopping_mall_customer_id","balance","status","created_at","updated_at"],"description":"Summary DTO for a customer's mileage (loyalty point) account. Used in paginated or index listings for admin, support, or analytics flows. Aligned to shopping_mall_mileages schema."},"IShoppingMallDonation.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_donations","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the donation record as stored in the shopping_mall_donations table. Used for audit, referencing, and evidence preservation per compliance requirements."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"UUID reference to the donating customer (shopping_mall_customers.id). Ensures proper linkage for personalization, notification, and legal audit trails. Exposed for admins, masked or redacted in summary for other roles."},"source_type":{"type":"string","description":"Type of the donation source: 'deposit' or 'mileage', determining if the donation was made from deposit (monetary) or mileage (points) balance. Business enum, critical for finance/scope segmentation."},"source_entity_id":{"type":"string","format":"uuid","description":"UUID of the deposit or mileage entity that was the origin of funds/points for this donation. Used for audit, fraud detection, and historical traceability."},"target_campaign_code":{"type":"string","description":"Business code of the donation target campaign/event. Critical for analytic grouping, reporting, or regulatory inquiry. Enables context linking to donation campaigns or events."},"amount":{"type":"number","description":"Donation amount in currency (for deposit) or points (for mileage). Must be non-negative. Used for user and campaign analytics, and downstream audit trails."},"status":{"type":"string","description":"Current status/state of donation: e.g., 'pending', 'confirmed', 'failed', 'refunded', 'under_review'. Determines display and workflow. Used for analytics and fraud risk review."},"donated_at":{"type":"string","format":"date-time","description":"Timestamp when the donation was made (UTC ISO8601). Required for compliance, audit, and personal timeline features."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of logical deletion; indicates soft delete for audit/evidence policies. If not deleted, value is null."},{"type":"null"}],"description":"Timestamp of logical deletion for audit compliance. Null if active, otherwise ISO8601 string upon soft deletion for evidence retention. Not exposed in customer lists by default."}},"required":["id","shopping_mall_customer_id","source_type","source_entity_id","target_campaign_code","amount","status","donated_at"],"description":"Summary DTO for a donation transaction, referencing the shopping_mall_donations table. Designed for paginated/batch listings, compliance audits, and user transaction history dashboards. Contains essential business and audit fields per compliance/audit requirements."},"IShoppingMallBoard.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_boards","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the board (shopping_mall_boards.id). Used for navigation and audit referencing."},"shopping_mall_channel_id":{"type":"string","format":"uuid","description":"UUID of the channel to which this board belongs. Direct linkage to shopping_mall_channels and used for channel-specific filtering or hierarchy."},"shopping_mall_section_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the section (shopping_mall_sections.id) this board was attached to."},{"type":"null"}],"description":"Section UUID (or null) if the board is not section-scoped. Links to shopping_mall_sections for advanced filtering or hierarchy/browsing."},"title":{"type":"string","description":"Display name/title of the board as shown in the UI and navigation."},"description":{"oneOf":[{"type":"string","description":"Optional board description/purpose for clarity, audit, and navigation."},{"type":"null"}],"description":"Board description as rich text or Markdown. Nullable per schema for flexibility."},"visibility":{"type":"string","description":"Visibility of the board: 'public', 'private', 'channel-restricted', or 'section-restricted'. Enum per business/content policy."},"moderation_required":{"type":"boolean","description":"Indicates if posts require moderation before publication. Used for UI and workflow logic."},"post_expiry_days":{"oneOf":[{"type":"integer","description":"Number of days after which board posts auto-expire. Nullable for non-expiring boards."},{"type":"null"}],"description":"Integer (nullable) defining if/when posts on the board are auto-archived/expire. Null for indefinitely persistent boards. Used by automated clean-up and aging features."},"created_at":{"type":"string","format":"date-time","description":"Creation datetime for board audit/history (ISO8601)."},"updated_at":{"type":"string","format":"date-time","description":"Datetime of last update (ISO8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime of soft-delete for the board (ISO8601/null). Used to filter out inactive/removed boards in listings."}},"required":["id","shopping_mall_channel_id","title","visibility","moderation_required","created_at","updated_at"],"description":"Summary DTO for a bulletin board (shopping_mall_boards table). Used in listing pages, search/filter UIs, or audit exports. Contains visible attributes for overview and navigation, with necessary business and audit fields."},"IShoppingMallBoardPost.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_board_posts","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the board post, mapped to shopping_mall_board_posts.id."},"shopping_mall_board_id":{"type":"string","format":"uuid","description":"UUID of the parent board."},"title":{"oneOf":[{"type":"string","description":"Post or article title for the summary display (nullable by schema)."},{"type":"null"}],"description":"Optional post title (may be null). Used in overviews or navigation."},"body_summary":{"type":"string","description":"Shortened version of the post body for list/summary views. Typically truncated or generated from the main body for display in search/list UIs."},"reply_level":{"type":"integer","description":"Threading level: 0 for starter/root post, increasing for each reply depth. Used for UI indenting/nest visualization."},"is_official_answer":{"type":"boolean","description":"True if this post is an official answer (by admin/seller). Important for product Q&A work flows."},"visibility":{"type":"string","description":"Access control: 'public', 'registered-users', 'private', etc. Enum per board/policy."},"moderation_status":{"type":"string","description":"Current moderation state: 'pending', 'approved', 'denied', etc. Enum from workflow."},"created_at":{"type":"string","format":"date-time","description":"Post creation datetime (ISO8601, UTC) for sorting and audit."},"updated_at":{"type":"string","format":"date-time","description":"Last modification datetime for compliance and history (ISO8601, UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp: indicates logical removal for evidence retention. Null if active."}},"required":["id","shopping_mall_board_id","reply_level","is_official_answer","visibility","moderation_status","created_at","updated_at"],"description":"Summary DTO for a bulletin board post (shopping_mall_board_posts). Suitable for paginated/threaded lists or search, giving UI and audit essentials. Contains trimmed content and navigational data for overviews."},"IShoppingMallComment.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_comments","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment (shopping_mall_comments.id)."},"shopping_mall_board_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Board post ID this comment is attached to."},{"type":"null"}],"description":"Reference to parent board post (nullable per schema if comment is on product inquiry or review)."},"shopping_mall_product_inquiry_id":{"oneOf":[{"type":"string","format":"uuid","description":"Product inquiry ID, or null."},{"type":"null"}],"description":"Reference to product inquiry, if this is a comment on an inquiry; nullable."},"shopping_mall_review_id":{"oneOf":[{"type":"string","format":"uuid","description":"Review ID, or null."},{"type":"null"}],"description":"Reference to review, if comment is attached to a review; nullable."},"parent_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Parent comment uuid for threading; or null for root comments."},{"type":"null"}],"description":"Parent comment's uuid for threading/reply chain. Null means top-level comment."},"author_type":{"type":"string","description":"Discriminator field indicating author role: 'customer', 'seller', or 'admin'."},"comment_body_summary":{"type":"string","description":"Trimmed/short version of comment body for quick list display (typically first few lines or chars, as per UI needs)."},"level":{"type":"integer","description":"Depth level in reply thread: 0=top-level, >0=reply-to."},"moderation_status":{"type":"string","description":"Current moderation status: 'pending', 'approved', 'denied', etc."},"created_at":{"type":"string","format":"date-time","description":"Datetime of creation (ISO8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Last updated time (ISO8601, UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp; null if active."}},"required":["id","author_type","comment_body_summary","level","moderation_status","created_at","updated_at"],"description":"Summary DTO for a comment on board post, product inquiry, or review (shopping_mall_comments). Used for batches, thread-overviews, and evidence review; contains essential meta and efficient for listing/display/analytics."},"IShoppingMallProductInquiry.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_product_inquiries","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the product inquiry. This is the unique UUID identifier of the inquiry and must be globally unique within the system."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product's unique ID (UUID) that this inquiry is attached to.\n\nReferences shopping_mall_products.id."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Inquiry summary/title. This is an optional short text headline provided by the inquirer and may be null for minimal input scenarios."},"body":{"type":"string","description":"Full inquiry content/text as written by the customer or seller. This field is required and contains the actual Q&A message (not system-generated)."},"is_private":{"type":"boolean","description":"Visibility restriction. Set to true if the inquiry is private (visible only to the author, seller, and admins); false for public inquiries."},"answered":{"type":"boolean","description":"True if this inquiry has been officially answered (by seller or admin), otherwise false. Business logic for determining answered state is enforced server-side."},"moderation_status":{"type":"string","description":"Moderation workflow status string. This will be set to values like 'pending', 'approved', 'rejected', etc. depending on moderation process in place."},"created_at":{"type":"string","format":"date-time","description":"Datetime the inquiry was created (ISO 8601 UTC, required)."}},"required":["id","shopping_mall_product_id","body","is_private","answered","moderation_status","created_at"],"description":"Summary object for a product inquiry in the shopping mall system. Used in paginated query/listing and contains all properties required to display Q&A board previews in product detail UI grids.\n\nReferences the shopping_mall_product_inquiries table. Omits edit/reply thread, internal moderation logs, and detailed reply meta. Includes only fields appropriate for display in summary context for product and inquiry boards."},"IShoppingMallReview.ISummary":{"type":"object","x-samchon-prisma-schema":"shopping_mall_reviews","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the review. This is the system-unique identifier (UUID) for the review, immutable once assigned."},"shopping_mall_product_id":{"type":"string","format":"uuid","description":"Product's unique ID (UUID) reviewed here. References the shopping_mall_products.id column."},"shopping_mall_order_id":{"type":"string","format":"uuid","description":"Order's unique ID (UUID) linked to the review, used to confirm verified purchase status and enable one-review-per-purchase enforcement by business rules."},"shopping_mall_customer_id":{"type":"string","format":"uuid","description":"Reviewer's (customer's) unique ID. Used for attribution and moderation/audit trail, references shopping_mall_customers.id."},"rating":{"type":"integer","description":"Review's star/point rating, typically integer 1 (lowest) to 5 (highest). May be further restricted or validated by business logic."},"title":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Review title/headline, optional for customer convenience. May be null."},"moderation_status":{"type":"string","description":"Current moderation workflow status ('pending', 'approved', 'rejected', etc.). Enforced by review moderation logic."},"created_at":{"type":"string","format":"date-time","description":"Datetime the review was originally created, in ISO 8601 UTC format. Required for sort, filtering, and evidence trails."}},"required":["id","shopping_mall_product_id","shopping_mall_order_id","shopping_mall_customer_id","rating","moderation_status","created_at"],"description":"Summary DTO for a product review posted in the shopping mall backend.\n\nDerived from the shopping_mall_reviews schema. Used in review list UIs, moderation dashboards, analytics, and for batch retrieval. Contains only fields needed for preview, analytics, and list display. Does not include full review body, attached media, edit/reply threads, or detailed notification status."}}}}