import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IShoppingMallAiBackendAdmin } from "@ORGANIZATION/PROJECT-api/lib/structures/IShoppingMallAiBackendAdmin";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IShoppingMallAiBackendCoupon } from "@ORGANIZATION/PROJECT-api/lib/structures/IShoppingMallAiBackendCoupon";
import type { IShoppingMallAiBackendCouponIssuance } from "@ORGANIZATION/PROJECT-api/lib/structures/IShoppingMallAiBackendCouponIssuance";
import type { IShoppingMallAiBackendCouponNotification } from "@ORGANIZATION/PROJECT-api/lib/structures/IShoppingMallAiBackendCouponNotification";
import type { IPageIShoppingMallAiBackendCouponNotification } from "@ORGANIZATION/PROJECT-api/lib/structures/IPageIShoppingMallAiBackendCouponNotification";
import type { IPage } from "@ORGANIZATION/PROJECT-api/lib/structures/IPage";

export async function test_api_coupon_notification_list_success(
  connection: api.IConnection,
) {
  /**
   * E2E: Admin can view and filter a paginated list of coupon notifications for
   * a coupon.
   *
   * This test validates the following business requirements:
   *
   * - Admin authentication is required for notification access.
   * - Coupon notifications are generated by issuance and can be listed via the
   *   API.
   * - Response includes correct pagination and notification summary fields.
   * - Filtering by notification_type and status is supported.
   *
   * Steps:
   *
   * 1. Register a new admin via /auth/admin/join
   * 2. Create a new coupon via /shoppingMallAiBackend/admin/coupons
   * 3. Issue the coupon at least once to generate a notification
   * 4. Retrieve notification list for the coupon, verify at least one notification
   *    exists and pagination is present
   * 5. Retrieve notifications filtered by notification_type and by status, ensure
   *    filtering works
   */

  // 1. Register admin
  const adminEmail = typia.random<string & tags.Format<"email">>();
  const adminUsername = RandomGenerator.alphaNumeric(10);
  const adminJoin = await api.functional.auth.admin.join(connection, {
    body: {
      username: adminUsername,
      password_hash: RandomGenerator.alphaNumeric(32),
      name: RandomGenerator.name(),
      email: adminEmail,
      phone_number: null,
      is_active: true,
    } satisfies IShoppingMallAiBackendAdmin.ICreate,
  });
  typia.assert(adminJoin);
  const admin = adminJoin.admin;

  // 2. Create coupon
  const couponCreateInput: IShoppingMallAiBackendCoupon.ICreate = {
    code: RandomGenerator.alphaNumeric(8),
    type: RandomGenerator.pick([
      "fixed",
      "percentage",
      "shipping",
      "personal",
      "campaign",
    ] as const),
    title: RandomGenerator.paragraph({ sentences: 3, wordMin: 4, wordMax: 8 }),
    description: RandomGenerator.paragraph({ sentences: 8 }),
    value: 1000,
    min_order_amount: 10000,
    max_discount_amount: 5000,
    currency: "KRW",
    expires_at: null,
    stackable: true,
    personal: false,
    issued_quantity: 50,
    issued_per_user: 1,
    used_per_user: 1,
    usage_limit_total: 50,
    published_at: null,
    status: "active",
    shopping_mall_ai_backend_channel_id: null,
    shopping_mall_ai_backend_seller_id: null,
  };
  const coupon =
    await api.functional.shoppingMallAiBackend.admin.coupons.create(
      connection,
      {
        body: couponCreateInput,
      },
    );
  typia.assert(coupon);

  // 3. Issue coupon to trigger notification
  const issuance =
    await api.functional.shoppingMallAiBackend.admin.coupons.issuances.createIssuance(
      connection,
      {
        couponId: typia.assert<string & tags.Format<"uuid">>(coupon.id),
        body: {} satisfies IShoppingMallAiBackendCouponIssuance.ICreate,
      },
    );
  typia.assert(issuance);

  // 4. Retrieve notifications (unfiltered, default paging)
  const notificationList =
    await api.functional.shoppingMallAiBackend.admin.coupons.notifications.index(
      connection,
      {
        couponId: typia.assert<string & tags.Format<"uuid">>(coupon.id),
        body: {
          page: 1,
          limit: 20,
        } satisfies IShoppingMallAiBackendCouponNotification.IRequest,
      },
    );
  typia.assert(notificationList);
  TestValidator.predicate(
    "at least one coupon notification exists for coupon",
    notificationList.data.length >= 1,
  );
  TestValidator.equals(
    "pagination info present",
    typeof notificationList.pagination,
    "object",
  );

  const oneNotification = notificationList.data[0];

  // 5. Retrieve notifications filtered by notification_type and status
  if (oneNotification) {
    const filterByType =
      await api.functional.shoppingMallAiBackend.admin.coupons.notifications.index(
        connection,
        {
          couponId: typia.assert<string & tags.Format<"uuid">>(coupon.id),
          body: {
            notification_type: oneNotification.notification_type,
            page: 1,
            limit: 20,
          } satisfies IShoppingMallAiBackendCouponNotification.IRequest,
        },
      );
    typia.assert(filterByType);
    TestValidator.predicate(
      "all notifications in type filter match",
      filterByType.data.every(
        (notif) =>
          notif.notification_type === oneNotification.notification_type,
      ),
    );

    const filterByStatus =
      await api.functional.shoppingMallAiBackend.admin.coupons.notifications.index(
        connection,
        {
          couponId: typia.assert<string & tags.Format<"uuid">>(coupon.id),
          body: {
            status: oneNotification.status,
            page: 1,
            limit: 20,
          } satisfies IShoppingMallAiBackendCouponNotification.IRequest,
        },
      );
    typia.assert(filterByStatus);
    TestValidator.predicate(
      "all notifications in status filter match",
      filterByStatus.data.every(
        (notif) => notif.status === oneNotification.status,
      ),
    );
  }
}
