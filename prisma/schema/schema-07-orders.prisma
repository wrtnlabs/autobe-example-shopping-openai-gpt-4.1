/// Primary table for all purchase orders. Represents complete buyer intent
/// at checkout, including all relevant metadata for order lifecycle, buyer
/// references, source channel, pricing, address snapshot, and state
/// tracking. Core entity for commerce business logic. Supports multiple
/// order items and payment routes, and is referenced by fulfillment,
/// after-sales, and audit entities.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_orders {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Order owner's unique ID. References buyer's {@link ai_commerce_buyer.id}.
  buyer_id String
  
  /// Source channel for this order. References channel's {@link
  /// ai_commerce_channels.id}.
  channel_id String
  
  /// Unique business/tracking code for order, human-readable. E.g.
  /// 'ORD-20250001'.
  order_code String
  
  /// Current order status, e.g., created, payment_pending, shipped, delivered,
  /// cancelled, closed.
  status String
  
  /// Business workflow state (used for backend automation).
  business_status String?
  
  /// Total price for the order at checkout (locked at payment).
  total_price Float
  
  /// Cumulative paid amount (updated as payment proceeds).
  paid_amount Float
  
  /// ISO currency code (e.g., 'KRW', 'USD') for payment/settlement.
  currency String
  
  /// FK to delivery address snapshot used for this order. References {@link
  /// ai_commerce_user_address_snapshots.id}.
  address_snapshot_id String
  
  /// Order creation timestamp.
  created_at DateTime
  
  /// Most recent update timestamp.
  updated_at DateTime
  
  /// Timestamp (soft delete) if this order is invalidated/cancelled for
  /// legal/audit retention.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  buyer ai_commerce_buyer @relation(fields: [buyer_id], references: [id], onDelete: Cascade)
  channel ai_commerce_channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  
  ai_commerce_order_items ai_commerce_order_items[]
  ai_commerce_sub_orders ai_commerce_sub_orders[]
  ai_commerce_order_status_history ai_commerce_order_status_history[]
  ai_commerce_order_payments ai_commerce_order_payments[]
  ai_commerce_order_fulfillments ai_commerce_order_fulfillments[]
  ai_commerce_order_after_sales ai_commerce_order_after_sales[]
  ai_commerce_order_cancellations ai_commerce_order_cancellations[]
  ai_commerce_order_refunds ai_commerce_order_refunds[]
  ai_commerce_order_analytics ai_commerce_order_analytics?
  ai_commerce_order_snapshot_logs ai_commerce_order_snapshot_logs[]
  ai_commerce_order_audit_logs ai_commerce_order_audit_logs[]
  
  @@unique([order_code])
  @@index([buyer_id])
  @@index([channel_id])
  @@index([created_at])
}

/// Subsidiary table for line items within an order (one per purchased
/// product/option set). Contains direct reference to parent order, product
/// variant, pricing, quantities, and fulfillment state for split and
/// multi-seller scenarios.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_items {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Belonged order's {@link ai_commerce_orders.id}.
  order_id String
  
  /// FK for product variant purchased (references {@link
  /// ai_commerce_product_variants.id}).
  product_variant_id String
  
  /// Optional reference to seller of this item (for multi-vendor).
  seller_id String?
  
  /// Human-readable item code for logistics/buyer UX.
  item_code String
  
  /// Name displayed to buyer at purchase (from snapshot).
  name String
  
  /// Quantity purchased for this line item.
  quantity Int
  
  /// Price per single unit at checkout time.
  unit_price Float
  
  /// Total line price: unit_price * quantity.
  total_price Float
  
  /// Delivery lifecycle status for this line item (independent from full order
  /// for splits/partials).
  delivery_status String
  
  /// Item creation timestamp.
  created_at DateTime
  
  /// Most recent update timestamp.
  updated_at DateTime
  
  /// If set, item is canceled/removed (soft delete, for audit).
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  productVariant ai_commerce_product_variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  seller ai_commerce_seller? @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  
  ai_commerce_order_after_sales ai_commerce_order_after_sales[]
  ai_commerce_reviews ai_commerce_reviews?
  
  @@index([product_variant_id])
  
  @@unique([order_id, item_code])
  @@index([order_id])
  @@index([seller_id])
}

/// Table representing segmented sub-orders created when a single order is
/// split by seller/fulfillment method. Links back to parent order, holds
/// independent status, payment/fulfillment tracking, and reference to
/// responsible party.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_sub_orders {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Parent order's {@link ai_commerce_orders.id} field.
  order_id String
  
  /// FK to seller fulfilling this sub-order.
  seller_id String
  
  /// Unique business code/identifier for this sub-order, derived from order
  /// code + segment.
  suborder_code String
  
  /// Current status for this sub-order (e.g., payment_pending, shipped,
  /// delivered, completed, cancelled).
  status String
  
  /// Selected shipping method for this fulfillment segment.
  shipping_method String?
  
  /// Tracking waybill or reference number for this segment (nullable).
  tracking_number String?
  
  /// Total price allocable to this sub-order portion.
  total_price Float
  
  /// Sub-order creation timestamp.
  created_at DateTime
  
  /// Timestamp when sub-order was last updated.
  updated_at DateTime
  
  /// Soft delete marker for sub-order (for audit/legal evidence).
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  seller ai_commerce_seller @relation(fields: [seller_id], references: [id], onDelete: Cascade)
  
  ai_commerce_order_fulfillments ai_commerce_order_fulfillments[]
  
  @@unique([suborder_code])
  @@index([order_id])
  @@index([seller_id])
}

/// Ordered event log for all state transitions affecting the parent order.
/// Tracks every status/business_status change, actor, and timestamp for full
/// auditability. Never modified, append-only for historical integrity.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_status_history {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Parent order's {@link ai_commerce_orders.id}.
  order_id String
  
  /// User/admin responsible for state-change action. References buyer, seller,
  /// or admin id.
  actor_id String
  
  /// Previous order status value.
  old_status String
  
  /// New status after transition.
  new_status String
  
  /// Previous backend workflow value.
  old_business_status String?
  
  /// Workflow/backend state after change.
  new_business_status String?
  
  /// Business/admin note (if provided) for status change reason, escalation,
  /// or litigation.
  note String?
  
  /// Timestamp for this status change event.
  changed_at DateTime
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  actor ai_commerce_buyer @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id])
  
  @@index([order_id])
  @@index([changed_at])
}

/// Log of all payment-related events tied to an order (including partials,
/// retries, split-payments by method). Supports refunds, payment failure
/// records, and settlement tracking for dispute and financial audit.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_payments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Linked order's {@link ai_commerce_orders.id}.
  order_id String
  
  /// Reference to global payment record (references ai_commerce_payments.id).
  payment_id String
  
  /// Business/teller receipt or code for this applied payment (for
  /// output/settlement).
  payment_code String
  
  /// Payment status (pending, completed, failed, reversed, etc.).
  status String
  
  /// Paid amount linked to this payment event (could be partial, full, or
  /// refunded).
  amount Float
  
  /// Currency paid in (should match order but recorded for legal/audit).
  currency String
  
  /// Timestamp when this payment was recorded.
  applied_at DateTime
  
  /// Timestamp when payment was fully settled/confirmed.
  settled_at DateTime?
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  payment ai_commerce_payments @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  
  @@unique([payment_code])
  @@index([order_id])
  @@index([payment_id])
}

/// Tracks each shipping/fulfillment event against an order (can reference
/// either primary order or sub-order), including shipment/pickup, delivery
/// event, and related carrier/tracking info. Enables multi-stage and split
/// fulfillment documentation.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_fulfillments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Relevant order's {@link ai_commerce_orders.id}.
  order_id String
  
  /// Reference to sub-order if present (nullable).
  suborder_id String?
  
  /// Carrier/fulfillment tracking code (unique) for this event.
  fulfillment_code String
  
  /// Current status of fulfillment event (in transit, delivered, returned,
  /// etc.).
  status String
  
  /// Logistics carrier/service used (DHL, CJ, etc.).
  carrier String
  
  /// Contact info/reference for carrier as of fulfillment date.
  carrier_contact String?
  
  /// Timestamp for fulfillment event.
  fulfilled_at DateTime
  
  /// Latest recorded update for fulfillment info.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  subOrder ai_commerce_sub_orders? @relation(fields: [suborder_id], references: [id], onDelete: Cascade)
  
  @@unique([fulfillment_code])
  @@index([order_id])
  @@index([suborder_id])
}

/// Encompasses all after-sales service requests—returns, exchanges,
/// disputes, warranty, and escalations—pertaining to a single order or order
/// item. Tracks request state, actioned actors, evidentiary/blame
/// attachments, and final resolution step for compliance/audit.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_after_sales {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Affected order's {@link ai_commerce_orders.id}.
  order_id String
  
  /// Optional reference to specific line item affected.
  order_item_id String?
  
  /// Party initiating after-sales event (buyer, seller, admin by context).
  actor_id String
  
  /// After-sales event type: return, exchange, dispute, warranty, etc.
  type String
  
  /// Progress state of after-sales case (pending, in_review, approved,
  /// rejected, resolved, etc.).
  status String
  
  /// Time when request was created/received.
  opened_at DateTime
  
  /// Final time after-sales request was resolved/closed (nullable if still
  /// active).
  closed_at DateTime?
  
  /// Optional business note/case reason/summary for future analytics/audit.
  note String?
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  orderItem ai_commerce_order_items? @relation(fields: [order_item_id], references: [id], onDelete: Cascade)
  actor ai_commerce_buyer @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([order_item_id])
  @@index([actor_id])
  
  @@index([order_id])
  @@index([type])
  @@index([opened_at])
}

/// Manages all cancellation requests, processing, approvals, or denials for
/// orders or items. Supports full/partial cancellation, traces actor for
/// compliance, and records effective time for audit trail.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_cancellations {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Belonged order for cancellation. {@link ai_commerce_orders.id}.
  order_id String
  
  /// Party (buyer, seller, admin) submitting/cancelling this request.
  actor_id String
  
  /// Unique code for referencing this cancellation event.
  cancellation_code String
  
  /// Optional reason/justification for this cancellation.
  reason String?
  
  /// Current cancellation process status: requested, processing, approved,
  /// denied, completed.
  status String
  
  /// Timestamp when cancellation was requested.
  requested_at DateTime
  
  /// Timestamp when cancellation was approved/confirmed by system/admin.
  approved_at DateTime?
  
  /// When cancellation was fully processed and order/item status updated.
  finalized_at DateTime?
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  actor ai_commerce_buyer @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id])
  
  @@unique([cancellation_code])
  @@index([order_id])
  @@index([requested_at])
}

/// Represents all refund actions/attempts for an order, including amount,
/// status, and settlement outcome. Supports multiple refunds per order
/// (partial, staged, denied), captures responsible actor and resolution
/// context. Financial evidence for disputes/loss provisions.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_refunds {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Order receiving refund action. {@link ai_commerce_orders.id}.
  order_id String
  
  /// Party (buyer, seller, admin) initiating refund or processing.
  actor_id String
  
  /// Unique identifier for this refund event.
  refund_code String
  
  /// Optional reason/comment for refund request/audit.
  reason String?
  
  /// Refund workflow stage: pending, processing, denied, approved, paid,
  /// failed, etc.
  status String
  
  /// Refunded amount. Must be ≤ paid amount for order/item(s).
  amount Float
  
  /// Refund currency (must match original payment/order legal currency).
  currency String
  
  /// Date/time refund requested.
  requested_at DateTime
  
  /// Result/finalization time (may be null if pending).
  resolved_at DateTime?
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  actor ai_commerce_buyer @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id])
  
  @@unique([refund_code])
  @@index([order_id])
  @@index([status])
  @@index([requested_at])
}

/// Aggregated performance, status, and activity metrics for orders and
/// fulfillment. Supports KPIs, real-time dashboards, and
/// operational/statistical analysis. May be materialized for reporting, but
/// not directly user-editable.
///
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_analytics {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// FK for summarized order (if analytics are per-order level).
  order_id String
  
  /// Order submission/placed date (for period analysis).
  order_date DateTime
  
  /// Sum monetary value for this order (for aggregation/reporting).
  order_value Float
  
  /// Number of unique items in order (for item-level statistics).
  items_count Int
  
  /// Number of refunds registered within this order.
  refund_count Int
  
  /// How many after-sales/complaints registered on order/items.
  after_sales_count Int
  
  /// Measured seconds from order creation to final closed status transfer
  /// (latency/efficiency).
  completion_time_seconds Int?
  
  /// Final/most recent status for reporting (denormalized).
  last_status String
  
  /// Last modified/aggregation timestamp.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  
  @@unique([order_id])
  @@index([order_date])
}

/// Immutable time-based historical snapshots of orders and associated
/// entities (items, fulfillments, disputes). Captures full state upon
/// mutation for legal/forensic recovery. Required for auditability and legal
/// compliance.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_snapshot_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Original order associated with this snapshot capture.
  order_id String
  
  /// Nature of state capture: creation, edit, cancel, fulfilment, aftersales,
  /// etc.
  capture_type String
  
  /// User/admin id making change when snapshot is taken.
  actor_id String
  
  /// Time snapshot was taken.
  captured_at DateTime
  
  /// Full JSON string of captured entity state/content for audit/future
  /// analysis.
  entity_json String
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  
  @@index([order_id])
  @@index([captured_at])
}

/// Append-only log of every critical action on orders, items, refunds,
/// after-sales, or fulfillments—enables watertight evidence and forensic
/// trace for compliance. Records who/what/when and detailed context of
/// actions for transparency.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_order_audit_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Related order for this audit event.
  order_id String
  
  /// Type of action/event: create, update, payment, refund, fulfillment,
  /// cancellation, status_change, aftersales, etc.
  event_type String
  
  /// User or admin who performed the action.
  actor_id String
  
  /// Optional log details/context for this action, escalation, or outcome.
  event_note String?
  
  /// Timestamp when action/event took place.
  occurred_at DateTime
  
  //----
  // RELATIONS
  //----
  order ai_commerce_orders @relation(fields: [order_id], references: [id], onDelete: Cascade)
  
  @@index([order_id])
  @@index([occurred_at])
}