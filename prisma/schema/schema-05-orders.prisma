/// Core entity representing the customer's commercial transaction. Records
/// all business events and status changes in an order lifecycle, including
/// references to the customer, channel, and seller. Enforces regulatory and
/// audit constraints. Supports evidence preservation and compliance
/// investigation. Designed for independent creation, search, and legal
/// traceability.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_orders {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Belonged customer's {@link shopping_mall_ai_backend_customers.id}.
  shopping_mall_ai_backend_customer_id String @db.Uuid
  
  /// Order's channel {@link shopping_mall_ai_backend_channels.id}.
  shopping_mall_ai_backend_channel_id String @db.Uuid
  
  /// Order's seller {@link shopping_mall_ai_backend_sellers.id}. May be
  /// nullable if not routed/split yet.
  shopping_mall_ai_backend_seller_id String? @db.Uuid
  
  /// Business order number (unique per channel, for external and customer
  /// reference).
  code String
  
  /// Business state/code for the current order (e.g. pending, confirmed, paid,
  /// shipped, delivered, cancelled, etc.).
  status String
  
  /// Total amount of the order (final charge after all discounts and
  /// adjustments).
  total_amount Float @db.DoublePrecision
  
  /// Order currency (ISO 4217, e.g. KRW, USD, JPY).
  currency String
  
  /// Timestamp the order was submitted by the customer or created via an
  /// upstream channel.
  ordered_at DateTime @db.Timestamptz
  
  /// Timestamp the order was business-confirmed (assigns stock and locks
  /// payment intent).
  confirmed_at DateTime? @db.Timestamptz
  
  /// Timestamp if/when the order was cancelled, by user or operator.
  cancelled_at DateTime? @db.Timestamptz
  
  /// Timestamp when the order was finalized (delivered, refunded, etc.).
  closed_at DateTime? @db.Timestamptz
  
  /// System record creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// System record update timestamp.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp. Null if record is active.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  customer shopping_mall_ai_backend_customers @relation(fields: [shopping_mall_ai_backend_customer_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_orders_shopping_mall_ai_backe_d4846849")
  channel shopping_mall_ai_backend_channels @relation(fields: [shopping_mall_ai_backend_channel_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_orders_shopping_mall_ai_backe_261cd656")
  seller shopping_mall_ai_backend_sellers? @relation(fields: [shopping_mall_ai_backend_seller_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_orders_shopping_mall_ai_backe_27efef9a")
  
  shopping_mall_ai_backend_order_items shopping_mall_ai_backend_order_items[]
  shopping_mall_ai_backend_order_payments shopping_mall_ai_backend_order_payments[]
  shopping_mall_ai_backend_order_deliveries shopping_mall_ai_backend_order_deliveries[]
  shopping_mall_ai_backend_order_returns shopping_mall_ai_backend_order_returns[]
  shopping_mall_ai_backend_order_exchanges shopping_mall_ai_backend_order_exchanges[]
  shopping_mall_ai_backend_order_refunds shopping_mall_ai_backend_order_refunds[]
  shopping_mall_ai_backend_order_incidents shopping_mall_ai_backend_order_incidents[]
  shopping_mall_ai_backend_coupon_usages shopping_mall_ai_backend_coupon_usages[]
  shopping_mall_ai_backend_inquiries shopping_mall_ai_backend_inquiries[]
  
  @@index([shopping_mall_ai_backend_seller_id], map: "shopping_mall_ai_backend_orders_shopping_mall_ai_backe_d91485ef")
  
  @@unique([code, shopping_mall_ai_backend_channel_id], map: "shopping_mall_ai_backend_orders_code_shopping_mall_ai__52167c7c")
  @@index([shopping_mall_ai_backend_customer_id, created_at], map: "shopping_mall_ai_backend_orders_shopping_mall_ai_backe_0e322c0d")
  @@index([shopping_mall_ai_backend_channel_id, created_at], map: "shopping_mall_ai_backend_orders_shopping_mall_ai_backe_e41e6b6d")
  @@index([status, created_at])
  @@index([code(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Line items for individual products/options within an order. Supports
/// bundles, variants, quantity, and per-item price/discount. Managed only in
/// context of an order. No direct API/CRUD, but required for evidence and
/// fulfillment traceability.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_items {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Parent order's {@link shopping_mall_ai_backend_orders.id}.
  shopping_mall_ai_backend_order_id String @db.Uuid
  
  /// Purchased product's {@link shopping_mall_ai_backend_products.id}.
  shopping_mall_ai_backend_product_id String @db.Uuid
  
  /// Selected option's {@link shopping_mall_ai_backend_product_options.id}.
  shopping_mall_ai_backend_product_option_id String? @db.Uuid
  
  /// If bundled, the bundle's {@link
  /// shopping_mall_ai_backend_product_bundles.id}.
  shopping_mall_ai_backend_product_bundle_id String? @db.Uuid
  
  /// Denormalized copy of product title at time of order (evidence,
  /// compliance).
  product_title String
  
  /// Ordered quantity for this line item.
  quantity Int @db.Integer
  
  /// Unit price at time of order (pre-discount).
  unit_price Float @db.DoublePrecision
  
  /// Discount applied to this line (may be 0).
  discount_amount Float @db.DoublePrecision
  
  /// Final charge for this line (unit * qty - discounts).
  final_amount Float @db.DoublePrecision
  
  /// Currency code for item charge.
  currency String
  
  /// Record creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Record update timestamp.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp. Null if record is active.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order shopping_mall_ai_backend_orders @relation(fields: [shopping_mall_ai_backend_order_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_items_shopping_mall_ai__f6ad35a6")
  product shopping_mall_ai_backend_products @relation(fields: [shopping_mall_ai_backend_product_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_items_shopping_mall_ai__79d34d8c")
  productOption shopping_mall_ai_backend_product_options? @relation(fields: [shopping_mall_ai_backend_product_option_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_items_shopping_mall_ai__5d7dced4")
  productBundle shopping_mall_ai_backend_product_bundles? @relation(fields: [shopping_mall_ai_backend_product_bundle_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_items_shopping_mall_ai__2a69b503")
  
  shopping_mall_ai_backend_order_item_snapshots shopping_mall_ai_backend_order_item_snapshots[]
  shopping_mall_ai_backend_order_returns shopping_mall_ai_backend_order_returns[]
  shopping_mall_ai_backend_order_exchanges shopping_mall_ai_backend_order_exchanges[]
  
  @@index([shopping_mall_ai_backend_product_id], map: "shopping_mall_ai_backend_order_items_shopping_mall_ai__3ce591e8")
  @@index([shopping_mall_ai_backend_product_option_id], map: "shopping_mall_ai_backend_order_items_shopping_mall_ai__8d8d6e65")
  @@index([shopping_mall_ai_backend_product_bundle_id], map: "shopping_mall_ai_backend_order_items_shopping_mall_ai__de17b755")
  
  @@unique([shopping_mall_ai_backend_order_id, id], map: "shopping_mall_ai_backend_order_items_shopping_mall_ai__e345b275")
  @@index([shopping_mall_ai_backend_order_id], map: "shopping_mall_ai_backend_order_items_shopping_mall_ai__0dbbd7d3")
  @@index([product_title(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Historical snapshot versions of order items. Tracks changes to items
/// (e.g. price correction, option change, after-sale) for full audit trail
/// and evidence purposes. Append-only, not user-editable. Used for dispute
/// resolution and compliance reporting.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_item_snapshots {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// The original order item's {@link shopping_mall_ai_backend_order_items.id}.
  shopping_mall_ai_backend_order_item_id String @db.Uuid
  
  /// Business reason/context for the snapshot (e.g. after-sales edit, price
  /// change).
  snapshot_reason String
  
  /// Snapshot of ordered quantity at this version.
  quantity Int @db.Integer
  
  /// Snapshot unit price at this version.
  unit_price Float @db.DoublePrecision
  
  /// Snapshot discount value at this version.
  discount_amount Float @db.DoublePrecision
  
  /// Snapshot final value at this version.
  final_amount Float @db.DoublePrecision
  
  /// Snapshot creation timestamp (versioned history).
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  orderItem shopping_mall_ai_backend_order_items @relation(fields: [shopping_mall_ai_backend_order_item_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_item_snapshots_shopping_10581a38")
  
  @@unique([shopping_mall_ai_backend_order_item_id, created_at], map: "shopping_mall_ai_backend_order_item_snapshots_shopping_790a0de7")
}

/// Tracks all payment attempts and records associated with an order.
/// Supports multiple payment methods and split/partial charge scenarios.
/// Used for audit, fraud detection, reconciliation, and compliance. Managed
/// in context of the order; no direct creation by user.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_payments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Linked order's {@link shopping_mall_ai_backend_orders.id}.
  shopping_mall_ai_backend_order_id String @db.Uuid
  
  /// Business code for payment method (e.g. card, bank_transfer, deposit,
  /// mileage, coupon, etc).
  payment_method String
  
  /// Amount charged by this payment record.
  amount Float @db.DoublePrecision
  
  /// Payment currency.
  currency String
  
  /// Payment status (pending, succeeded, failed, refunded, etc).
  status String
  
  /// External payment provider identifier (if any).
  external_reference String?
  
  /// Payment requested timestamp.
  requested_at DateTime @db.Timestamptz
  
  /// Payment completed timestamp (if succeeded).
  completed_at DateTime? @db.Timestamptz
  
  /// Payment failed timestamp, if any.
  failed_at DateTime? @db.Timestamptz
  
  /// Payment cancellation timestamp.
  cancelled_at DateTime? @db.Timestamptz
  
  /// Creation timestamp for system logging.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp for system logging.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order shopping_mall_ai_backend_orders @relation(fields: [shopping_mall_ai_backend_order_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_payments_shopping_mall__0c99611e")
  
  shopping_mall_ai_backend_order_payment_attempts shopping_mall_ai_backend_order_payment_attempts[]
  
  @@unique([shopping_mall_ai_backend_order_id, payment_method, external_reference], map: "shopping_mall_ai_backend_order_payments_shopping_mall__924ed320")
  @@index([shopping_mall_ai_backend_order_id, created_at], map: "shopping_mall_ai_backend_order_payments_shopping_mall__87f872cf")
  @@index([status])
}

/// Records every attempt to process payment (for retries, partial payments,
/// failures, etc). Used from security, compliance, and business evidence
/// perspectives. Append-only. Linked to specific order payment entries.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_payment_attempts {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Parent payment's {@link shopping_mall_ai_backend_order_payments.id}.
  shopping_mall_ai_backend_order_payment_id String @db.Uuid
  
  /// Payment attempt result code (pending, success, fail, retry, etc).
  attempt_state String
  
  /// Error message (if any failure or rejection occurred).
  error_message String?
  
  /// Payment provider code (if used).
  provider_code String?
  
  /// Payment attempt timestamp (system clocked).
  requested_at DateTime @db.Timestamptz
  
  /// Attempt completion timestamp (if success/fail).
  completed_at DateTime? @db.Timestamptz
  
  /// System record creation time.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  orderPayment shopping_mall_ai_backend_order_payments @relation(fields: [shopping_mall_ai_backend_order_payment_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_payment_attempts_shoppi_c0ec9f62")
  
  @@unique([shopping_mall_ai_backend_order_payment_id, requested_at], map: "shopping_mall_ai_backend_order_payment_attempts_shoppi_b092a054")
  @@index([shopping_mall_ai_backend_order_payment_id], map: "shopping_mall_ai_backend_order_payment_attempts_shoppi_6817baa3")
}

/// Represents single or partial physical delivery event(s) related to an
/// order (e.g., split shipments, staggered delivery). Each links to the
/// order header, with detail for tracking, status, and timeline.
/// Fulfillment/logistics, not directly user-managed.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_deliveries {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Parent order's {@link shopping_mall_ai_backend_orders.id}.
  shopping_mall_ai_backend_order_id String @db.Uuid
  
  /// Delivery state (ready, in_progress, complete, failed, returned, etc).
  delivery_status String
  
  /// Fulfillment carrier/partner code.
  logistics_provider String?
  
  /// Logistics carrier tracking ID.
  tracking_number String?
  
  /// Datetime shipped or sent to carrier.
  shipped_at DateTime? @db.Timestamptz
  
  /// Datetime completed by carrier (delivered, received).
  delivered_at DateTime? @db.Timestamptz
  
  /// Any user/business free-text notes about delivery.
  delivery_notes String?
  
  /// Creation timestamp for record.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order shopping_mall_ai_backend_orders @relation(fields: [shopping_mall_ai_backend_order_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_deliveries_shopping_mal_021fe116")
  
  shopping_mall_ai_backend_order_delivery_events shopping_mall_ai_backend_order_delivery_events[]
  
  @@unique([shopping_mall_ai_backend_order_id, tracking_number], map: "shopping_mall_ai_backend_order_deliveries_shopping_mal_51caec59")
  @@index([shopping_mall_ai_backend_order_id], map: "shopping_mall_ai_backend_order_deliveries_shopping_mal_12dc5b5e")
  @@index([delivery_status])
}

/// Chronological event logs for all delivery status changes and logistics
/// evidence for a shipment. Used for business traceability, customer
/// service, and compliance. Append-only, one per discrete timeline event or
/// external update.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_delivery_events {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Parent delivery's {@link shopping_mall_ai_backend_order_deliveries.id}.
  shopping_mall_ai_backend_order_delivery_id String @db.Uuid
  
  /// Event type (status update, exception, checkpoint, etc).
  event_type String
  
  /// Free-text event context for traceability/evidence.
  event_context String?
  
  /// Timestamp for the event.
  logged_at DateTime @db.Timestamptz
  
  /// System creation timestamp.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  orderDelivery shopping_mall_ai_backend_order_deliveries @relation(fields: [shopping_mall_ai_backend_order_delivery_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_delivery_events_shoppin_54e76270")
  
  @@unique([shopping_mall_ai_backend_order_delivery_id, logged_at], map: "shopping_mall_ai_backend_order_delivery_events_shoppin_2dace243")
  @@index([shopping_mall_ai_backend_order_delivery_id], map: "shopping_mall_ai_backend_order_delivery_events_shoppin_d3911a42")
}

/// Return requests/records for order items. Linked to orders and specific
/// line-items. Manages business context (reason, status, evidence). Managed
/// as after-sales action; used for refund/exchange workflows. Subsidiary
/// table with compliance/audit focus.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_returns {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Linked order's {@link shopping_mall_ai_backend_orders.id}.
  shopping_mall_ai_backend_order_id String @db.Uuid
  
  /// Linked item's {@link shopping_mall_ai_backend_order_items.id}.
  shopping_mall_ai_backend_order_item_id String @db.Uuid
  
  /// Reason provided by customer for return.
  return_reason String
  
  /// Business logic status for the return process (requested, approved,
  /// rejected, completed).
  status String
  
  /// Timestamp when return was requested.
  requested_at DateTime @db.Timestamptz
  
  /// Timestamp when processed (approved/rejected).
  processed_at DateTime? @db.Timestamptz
  
  /// Return process completion timestamp.
  completed_at DateTime? @db.Timestamptz
  
  /// System creation date.
  created_at DateTime @db.Timestamptz
  
  /// Last update timestamp.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order shopping_mall_ai_backend_orders @relation(fields: [shopping_mall_ai_backend_order_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_returns_shopping_mall_a_8153f17c")
  orderItem shopping_mall_ai_backend_order_items @relation(fields: [shopping_mall_ai_backend_order_item_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_returns_shopping_mall_a_228545ce")
  
  @@index([shopping_mall_ai_backend_order_item_id], map: "shopping_mall_ai_backend_order_returns_shopping_mall_a_92cb4937")
  
  @@unique([shopping_mall_ai_backend_order_id, shopping_mall_ai_backend_order_item_id], map: "shopping_mall_ai_backend_order_returns_shopping_mall_a_32ecc40b")
  @@index([status, requested_at])
}

/// Exchange process records for items/orders. Handles after-sales exchanges
/// for eligible orders/items. Managed in context of original order/item. For
/// compliance and traceability (subsidiary).
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_exchanges {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Original order's {@link shopping_mall_ai_backend_orders.id}.
  shopping_mall_ai_backend_order_id String @db.Uuid
  
  /// Original item's {@link shopping_mall_ai_backend_order_items.id}.
  shopping_mall_ai_backend_order_item_id String @db.Uuid
  
  /// Reason provided for exchange.
  exchange_reason String
  
  /// Current exchange process status (requested, approved, rejected,
  /// completed, etc).
  status String
  
  /// Exchange requested timestamp.
  requested_at DateTime @db.Timestamptz
  
  /// Approval/rejection processed timestamp.
  processed_at DateTime? @db.Timestamptz
  
  /// Exchange finalized timestamp.
  completed_at DateTime? @db.Timestamptz
  
  /// System create timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Update timestamp for record.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order shopping_mall_ai_backend_orders @relation(fields: [shopping_mall_ai_backend_order_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_exchanges_shopping_mall_d96d8c4c")
  orderItem shopping_mall_ai_backend_order_items @relation(fields: [shopping_mall_ai_backend_order_item_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_exchanges_shopping_mall_191056aa")
  
  @@index([shopping_mall_ai_backend_order_item_id], map: "shopping_mall_ai_backend_order_exchanges_shopping_mall_a43c4dce")
  
  @@unique([shopping_mall_ai_backend_order_id, shopping_mall_ai_backend_order_item_id], map: "shopping_mall_ai_backend_order_exchanges_shopping_mall_81a0e3ec")
  @@index([status, requested_at], map: "shopping_mall_ai_backend_order_exchanges_status_reques_419a2a09")
}

/// Refund requests/records for orders or individual items. Supports
/// full/partial, per-item or per-order refunds. Subsidiary with full
/// business and audit context for compliance reporting. Managed by
/// operator/admin or automated logic.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_refunds {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Linked order's {@link shopping_mall_ai_backend_orders.id}.
  shopping_mall_ai_backend_order_id String @db.Uuid
  
  /// Reason for refund (e.g. customer request, system error, product issue).
  refund_reason String
  
  /// Type of refund (full, partial, per-item, etc).
  refund_type String
  
  /// Amount refunded.
  amount Float @db.DoublePrecision
  
  /// Currency of refund.
  currency String
  
  /// Current status of the refund (requested, approved, rejected, paid,
  /// completed, etc).
  status String
  
  /// Refund requested time.
  requested_at DateTime @db.Timestamptz
  
  /// Approval/rejection processing time.
  processed_at DateTime? @db.Timestamptz
  
  /// Refund completion timestamp.
  completed_at DateTime? @db.Timestamptz
  
  /// Record creation timestamp.
  created_at DateTime @db.Timestamptz
  
  /// Record update timestamp.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order shopping_mall_ai_backend_orders @relation(fields: [shopping_mall_ai_backend_order_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_refunds_shopping_mall_a_1bac7ea2")
  
  @@unique([shopping_mall_ai_backend_order_id, requested_at], map: "shopping_mall_ai_backend_order_refunds_shopping_mall_a_7b4698ac")
  @@index([status, requested_at])
}

/// Tracks incidents, exceptions, or evidence logs tied to orders: e.g.
/// fraud, user disputes, chargeback evidence, compliance events. Managed
/// only by admin/operator actions; append-only for audit, legal, and
/// business traceability.
///
/// @namespace Orders
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_ai_backend_order_incidents {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Order's {@link shopping_mall_ai_backend_orders.id}.
  shopping_mall_ai_backend_order_id String @db.Uuid
  
  /// Business code for incident type (fraud, dispute, system_error,
  /// compliance, evidence, etc).
  incident_type String
  
  /// Free-text or structured JSON business context.
  context String?
  
  /// When the incident/event occurred.
  event_at DateTime @db.Timestamptz
  
  /// System record created at.
  created_at DateTime @db.Timestamptz
  
  /// Updated at for record changes.
  updated_at DateTime @db.Timestamptz
  
  /// Soft delete timestamp.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  order shopping_mall_ai_backend_orders @relation(fields: [shopping_mall_ai_backend_order_id], references: [id], onDelete: Cascade, map: "shopping_mall_ai_backend_order_incidents_shopping_mall_95fde845")
  
  @@unique([shopping_mall_ai_backend_order_id, event_at, incident_type], map: "shopping_mall_ai_backend_order_incidents_shopping_mall_0656bd53")
  @@index([incident_type, event_at], map: "shopping_mall_ai_backend_order_incidents_incident_type_3c6af7c5")
}