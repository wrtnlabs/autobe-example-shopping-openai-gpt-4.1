/// Represents each user's digital deposit balance (electronic wallet) in the
/// system. Connects to one customer. Reflects the available deposit coin
/// balance for monetary operations (top-up, spend, refund), with direct
/// linkage to all deposit-related transactions. Snapshot logic ensures
/// regulatory traceability. Used for customer-initiated deposits, refunds,
/// or administrative adjustments. Separate from loyalty program mileages.
///
/// @namespace Coins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_deposits {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Belonged customer's {@link shopping_mall_customers.id}. Each deposit
  /// account is tied to one user account.
  shopping_mall_customer_id String
  
  /// Current deposit balance (in system currency units). Always non-negative,
  /// may reflect pending operations until settled.
  balance Float
  
  /// Account status (active, frozen, closed, under_review, etc.) for financial
  /// and compliance operations.
  status String
  
  /// Timestamp when the deposit record was created.
  created_at DateTime
  
  /// Timestamp for last update to the deposit record.
  updated_at DateTime
  
  /// Timestamp if deposit record is soft-deleted. Null unless deleted.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  customer shopping_mall_customers @relation(fields: [shopping_mall_customer_id], references: [id], onDelete: Cascade)
  
  shopping_mall_deposit_transactions shopping_mall_deposit_transactions[]
  
  @@unique([shopping_mall_customer_id])
  @@index([status])
}

/// Ledger of all deposit coin inflows and outflows for customers. Each
/// record is an evidence for financial audit, compliance, or fraud
/// monitoring. Tied to a deposit account and customer; may reference an
/// order; records business context, amounts, type (income/outcome), status,
/// and reason. Stores timestamps for creation and reversal. Allows tracing
/// for all deposit operations (top-up, spend, admin adjustment, refund,
/// etc.).
///
/// @namespace Coins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_deposit_transactions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Associated deposit account {@link shopping_mall_deposits.id}.
  shopping_mall_deposit_id String
  
  /// Target customer {@link shopping_mall_customers.id}. Always required for
  /// user-level ledger/audit.
  shopping_mall_customer_id String
  
  /// Linked order transaction (if applicable) {@link shopping_mall_orders.id}.
  /// Null if not related to an order.
  shopping_mall_order_id String?
  
  /// Transaction type (income, outcome, refund, admin_adjustment, reversal,
  /// etc.)
  type String
  
  /// Transaction amount (system currency units, positive value).
  amount Float
  
  /// Business-side processing status (applied, confirmed, failed, in_review,
  /// reversed, etc.).
  business_status String
  
  /// Detailed business reason or description for transaction (top-up,
  /// purchase, refund, bonus, manual debit, etc.).
  reason String?
  
  /// Optional reference to evidence, audit record, or snapshot backing this
  /// transaction.
  evidence_reference String?
  
  /// If this transaction was reversed/cancelled, indicates the datetime; null
  /// otherwise.
  reversed_at DateTime?
  
  /// Transaction creation timestamp.
  created_at DateTime
  
  /// Transaction update timestamp.
  updated_at DateTime
  
  /// Soft-delete timestamp if the transaction was deleted; null otherwise.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  deposit shopping_mall_deposits @relation(fields: [shopping_mall_deposit_id], references: [id], onDelete: Cascade)
  customer shopping_mall_customers @relation(fields: [shopping_mall_customer_id], references: [id], onDelete: Cascade)
  order shopping_mall_orders? @relation(fields: [shopping_mall_order_id], references: [id], onDelete: Cascade)
  
  @@index([shopping_mall_order_id])
  
  @@unique([shopping_mall_deposit_id, created_at], map: "shopping_mall_deposit_transactions_shopping_mall_depos_cf895386")
  @@index([shopping_mall_customer_id], map: "shopping_mall_deposit_transactions_shopping_mall_custo_cd1d4415")
  @@index([type, created_at])
}

/// Represents each user's mileage (loyalty/point system) balance. Separate
/// from deposit accounts; mileages are non-cash, generally earned by
/// system/business logic. Linked to a single customer. Used for loyalty,
/// reward, or promotional purposes. Subject to expiration and usage limits.
/// Fully auditable for compliance.
///
/// @namespace Coins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_mileages {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Belonged customer's {@link shopping_mall_customers.id}. Each mileage
  /// account is associated with a user.
  shopping_mall_customer_id String
  
  /// Current usable mileage/point balance. Non-negative value representing
  /// available loyalty points.
  balance Float
  
  /// Account status (active, expired, frozen). Indicates current ability to
  /// accrue or spend mileage.
  status String
  
  /// Datetime when all current mileage expires if not renewed or spent. Used
  /// for campaign/bonus mileages with deadlines.
  expired_at DateTime?
  
  /// Timestamp when the mileage account was created.
  created_at DateTime
  
  /// Timestamp for last update to the mileage account.
  updated_at DateTime
  
  /// Soft-delete timestamp; null if active.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  customer shopping_mall_customers @relation(fields: [shopping_mall_customer_id], references: [id], onDelete: Cascade)
  
  shopping_mall_mileage_transactions shopping_mall_mileage_transactions[]
  
  @@unique([shopping_mall_customer_id])
  @@index([status])
}

/// Complete ledger for all mileage (loyalty point) actions: accrual, spend,
/// expiration, adjustment, bonus, or refund. Tracks every change to user
/// mileage with full evidence for audit and compliance (one record per
/// event). Foreign key links to mileage and customer. May reference an order
/// or campaign. Records status, type, context/reason codes, evidence refs,
/// and timestamps.
///
/// @namespace Coins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_mileage_transactions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Associated mileage account {@link shopping_mall_mileages.id}.
  shopping_mall_mileage_id String
  
  /// Target customer {@link shopping_mall_customers.id}. Always required for
  /// user-level audit.
  shopping_mall_customer_id String
  
  /// Linked order (if associated) {@link shopping_mall_orders.id}. Null if not
  /// related to a specific order.
  shopping_mall_order_id String?
  
  /// Transaction type (accrual, spend, expiration, bonus, adjustment, refund,
  /// etc.).
  type String
  
  /// Mileage value for this transaction (positive for accrual/bonus, negative
  /// for spend/expiration).
  amount Float
  
  /// Processing/business status: applied, confirmed, failed, expired,
  /// reversed, in_review, etc.
  business_status String
  
  /// Optional business reason, event, or note (promo, adjustment, campaign,
  /// system grant, manual, etc.).
  reason String?
  
  /// Optional reference to compliance, audit, or related snapshot for the
  /// event.
  evidence_reference String?
  
  /// Datetime if this event was reversed/cancelled. Null otherwise.
  reversed_at DateTime?
  
  /// Datetime for event creation.
  created_at DateTime
  
  /// Datetime when this event was last updated.
  updated_at DateTime
  
  /// Soft-delete timestamp if event was deleted. Null otherwise.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  mileage shopping_mall_mileages @relation(fields: [shopping_mall_mileage_id], references: [id], onDelete: Cascade)
  customer shopping_mall_customers @relation(fields: [shopping_mall_customer_id], references: [id], onDelete: Cascade)
  order shopping_mall_orders? @relation(fields: [shopping_mall_order_id], references: [id], onDelete: Cascade)
  
  @@index([shopping_mall_order_id])
  
  @@unique([shopping_mall_mileage_id, created_at], map: "shopping_mall_mileage_transactions_shopping_mall_milea_6fe0d372")
  @@index([shopping_mall_customer_id], map: "shopping_mall_mileage_transactions_shopping_mall_custo_92ba2885")
  @@index([type, created_at])
}

/// Tracks all donation events using deposit/mileage by customers. Each
/// record captures donor, value, type (deposit or mileage), donation
/// target/campaign (external lookup or campaign id), status, datetime, and
/// evidence info for transparency, compliance, and analytics. Supports both
/// deposit and mileage as sources. Used for audit, fraud prevention,
/// campaign reporting, and regulatory evidence.
///
/// @namespace Coins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_donations {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Donating customer {@link shopping_mall_customers.id}.
  shopping_mall_customer_id String
  
  /// Type of the donation source (deposit, mileage). Determines if donation
  /// was made from deposit or mileage balance.
  source_type String
  
  /// Foreign key to the related deposit or mileage account
  /// (shopping_mall_deposits.id or shopping_mall_mileages.id).
  source_entity_id String
  
  /// The code or business key for the destination campaign/event receiving the
  /// donation.
  target_campaign_code String
  
  /// Donation amount (currency units for deposit, point units for mileage).
  /// Must be non-negative.
  amount Float
  
  /// Donation status (pending, confirmed, failed, refunded, under_review,
  /// etc.).
  status String
  
  /// Optional link to evidence record, snapshot, compliance request.
  evidence_reference String?
  
  /// Datetime donation was made.
  donated_at DateTime
  
  /// Datetime record was created (may differ from donated_at for
  /// backfill/correction).
  created_at DateTime
  
  /// Datetime record was last updated.
  updated_at DateTime
  
  /// Soft-delete timestamp for the donation entry, if any. Null if active.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  customer shopping_mall_customers @relation(fields: [shopping_mall_customer_id], references: [id], onDelete: Cascade)
  
  @@unique([source_entity_id, donated_at])
  @@index([shopping_mall_customer_id])
  @@index([target_campaign_code])
}

/// System/state snapshot table recording complete states of all deposit and
/// mileage accounts at one point in time for audit, compliance, regulatory
/// reporting, or recovery purposes. Stores entity id, entity type
/// (deposit/mileage), pre/post balance, timestamp, trigger info (system
/// maintenance, audit, campaign event), and evidence chain data. Used for
/// audit trails and regulatory proofs. Not directly manipulated by end
/// users.
///
/// @namespace Coins
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model shopping_mall_coin_snapshots {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Entity (deposit or mileage) being snapshotted: points to
  /// shopping_mall_deposits.id or shopping_mall_mileages.id. This is a
  /// business reference to an external table; not a Prisma model relation.
  /// Type is uuid for compatibility and traceability.
  entity_id String
  
  /// Type of the snapshotted entity (deposit or mileage).
  entity_type String
  
  /// Account balance before snapshot event.
  balance_before Float
  
  /// Account balance after snapshot event.
  balance_after Float
  
  /// Reason or business event that triggered the snapshot (system_audit,
  /// compliance, campaign, refund, etc.).
  snapshot_trigger String
  
  /// Optional referential link to audit/compliance/maintenance event or
  /// document.
  evidence_reference String?
  
  /// Datetime the snapshot was taken.
  created_at DateTime
  
  /// Datetime the snapshot record was last updated.
  updated_at DateTime
  
  /// Soft-delete timestamp, null unless the snapshot itself is nullified for
  /// business policy.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  @@unique([entity_id, created_at])
  @@index([entity_type])
  @@index([snapshot_trigger])
}