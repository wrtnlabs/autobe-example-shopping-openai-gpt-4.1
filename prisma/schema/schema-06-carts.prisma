/// Main shopping cart entity representing the buyer/member or guest's
/// persistent cart, either authenticated (user-linked) or anonymous
/// (session/tracking ID only). Holds overall status, timestamps, and
/// pointers to belonging user/session, with support for soft deletion and
/// recovery. Serves as the core container for cart CRUD and all downstream
/// order creation logic. References to user, session, store, or recovery
/// context are FKs to existing models in other components.
///
/// @namespace Carts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_carts {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Belonged buyer's {@link ai_commerce_buyer.id}. Nullable for guest carts.
  buyer_id String?
  
  /// Targeted store's {@link ai_commerce_stores.id} if used for store-centric
  /// cart logic.
  store_id String?
  
  /// Current cart status (draft, active, checked_out, expired, merged,
  /// deleted, etc).
  status String
  
  /// Total quantity of items currently in the cart (sum across all items).
  total_quantity Int
  
  /// Cart creation timestamp.
  created_at DateTime
  
  /// Last update to cart (item add/remove/modification).
  updated_at DateTime
  
  /// Soft delete marker for recovery or logical deletion.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  buyer ai_commerce_buyer? @relation(fields: [buyer_id], references: [id], onDelete: Cascade)
  store ai_commerce_stores? @relation(fields: [store_id], references: [id], onDelete: Cascade)
  
  ai_commerce_cart_items ai_commerce_cart_items[]
  ai_commerce_cart_sessions ai_commerce_cart_sessions?
  ai_commerce_cart_merges_of_source_cart_id ai_commerce_cart_merges[] @relation("ai_commerce_cart_merges_of_source_cart_id")
  ai_commerce_cart_merges_of_target_cart_id ai_commerce_cart_merges[] @relation("ai_commerce_cart_merges_of_target_cart_id")
  ai_commerce_cart_expirations ai_commerce_cart_expirations[]
  ai_commerce_cart_audit_logs ai_commerce_cart_audit_logs[]
  
  @@index([buyer_id])
  @@index([store_id])
  @@index([created_at])
}

/// Individual item in a shopping cart representing a product or variant
/// selection. Subsidiary to the main cart, records product, quantity,
/// pricing context as of addition, and any parent-child option references.
/// Serves as the target for modifications (add/remove/update) within cart
/// flows.
///
/// @namespace Carts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_cart_items {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Owning cart's {@link ai_commerce_carts.id}.
  cart_id String
  
  /// ID of product being purchased, links to {@link ai_commerce_products.id}.
  product_id String
  
  /// Variant/SKU selected (if applicable), links to {@link
  /// ai_commerce_product_variants.id}.
  variant_id String?
  
  /// Quantity of product selected (per cart item).
  quantity Int
  
  /// Unit price at time of addition (may differ from canonical product for
  /// snapshot consistency).
  unit_price Float
  
  /// Calculated total for (quantity × unit_price) at time of last update. Used
  /// for recovery in case of product price change after addition.
  item_total Float
  
  /// Timestamp when item was first added to cart.
  added_at DateTime
  
  /// Last updated timestamp for this line item.
  updated_at DateTime
  
  /// Soft delete timestamp for removing item but preserving audit trail.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  cart ai_commerce_carts @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product ai_commerce_products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  variant ai_commerce_product_variants? @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  
  ai_commerce_cart_item_options ai_commerce_cart_item_options[]
  
  @@index([variant_id])
  
  @@index([cart_id])
  @@index([product_id, variant_id])
}

/// Option selections linked to a specific cart item (e.g., size, color),
/// tracking chosen values and enabling variant/SKU mapping. Subsidiary; each
/// cart item may reference several such option records.
///
/// @namespace Carts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_cart_item_options {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Referenced cart item's {@link ai_commerce_cart_items.id}.
  cart_item_id String
  
  /// Name/code of option (e.g., 'color', 'size').
  option_name String
  
  /// The selected value for the option (e.g., 'red', 'XL').
  option_value String
  
  /// Option selection created_at, for snapshot traceability.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  cartItem ai_commerce_cart_items @relation(fields: [cart_item_id], references: [id], onDelete: Cascade)
  
  @@index([cart_item_id])
}

/// Tracks association between a cart and a user/device/session. Used for
/// both member and guest carts to support cart merging, session recovery,
/// and session-scoped cart behaviors.
///
/// @namespace Carts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_cart_sessions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Authenticated buyer's {@link ai_commerce_buyer.id}, null for guests.
  buyer_id String?
  
  /// Associated cart's {@link ai_commerce_carts.id}.
  cart_id String
  
  /// Opaque session identifier (for guest carts: device ID, cookie, or
  /// generated token).
  session_token String
  
  /// Current session status (active, expired, merged, etc).
  status String
  
  /// Session expiration timestamp.
  expires_at DateTime?
  
  /// Session creation time.
  created_at DateTime
  
  /// Session last update time.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  buyer ai_commerce_buyer? @relation(fields: [buyer_id], references: [id], onDelete: Cascade)
  cart ai_commerce_carts @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  
  @@unique([session_token])
  @@unique([cart_id])
  @@index([buyer_id])
}

/// Seller/admin-creatable cart templates enabling creation of pre-filled
/// carts for promotions, bundles, or rapid checkout. Main business entity
/// for template CRUD; each template has ownership, custom name, and usage
/// visibility flags. Supports full-text search and indexing for template
/// name/labels.
///
/// @namespace Carts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_cart_templates {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Creator's {@link ai_commerce_admin.id} or {@link ai_commerce_seller.id}.
  creator_id String
  
  /// If the template is store-specific, references {@link
  /// ai_commerce_stores.id}.
  store_id String?
  
  /// Business name for this cart template.
  template_name String
  
  /// Long-form business description of the cart template's purpose.
  description String?
  
  /// Whether the template is active and available for cart creation.
  active Boolean
  
  /// Template creation timestamp.
  created_at DateTime
  
  /// Last update to template state or settings.
  updated_at DateTime
  
  //----
  // RELATIONS
  //----
  creator ai_commerce_admin @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  store ai_commerce_stores? @relation(fields: [store_id], references: [id], onDelete: Cascade)
  
  @@unique([creator_id, template_name])
  @@index([store_id])
}

/// Snapshot/audit record of cart merges (e.g., guest to member, two member
/// carts, etc). Append-only table (no updates/deletes), capturing pre- and
/// post-merge cart IDs, actors, merge reason, and resulting changes. Used
/// for audit trail and historical debugging/evidence.
///
/// @namespace Carts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_cart_merges {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Source cart's {@link ai_commerce_carts.id} before merge.
  source_cart_id String
  
  /// Target cart's {@link ai_commerce_carts.id} after merge.
  target_cart_id String
  
  /// Merging actor's {@link ai_commerce_buyer.id} or admin ID. Nullable for
  /// automated/system merges.
  actor_id String?
  
  /// Business code or description for merge reason (e.g., 'login_merge',
  /// 'device_switch', 'admin_action').
  reason String
  
  /// Timestamp when merge action took place.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  sourceCart ai_commerce_carts @relation("ai_commerce_cart_merges_of_source_cart_id", fields: [source_cart_id], references: [id], onDelete: Cascade)
  targetCart ai_commerce_carts @relation("ai_commerce_cart_merges_of_target_cart_id", fields: [target_cart_id], references: [id], onDelete: Cascade)
  actor ai_commerce_buyer? @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id])
  
  @@index([source_cart_id])
  @@index([target_cart_id])
}

/// Snapshot/audit record of cart expirations or recoveries—append-only audit
/// trail for expiration logic enforcement, recovery/merge after timeout, or
/// policy changes. Used for compliance, debugging, and analytics.
///
/// @namespace Carts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_cart_expirations {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Expired or recovered cart's {@link ai_commerce_carts.id}.
  cart_id String
  
  /// Actor triggering expiration/recovery. May be system-user/admin or null
  /// for automatic expirations.
  actor_id String?
  
  /// Type of event (expiration, recovery, retry, auto_reopen, etc).
  event_type String
  
  /// Description or business context for expiration/recovery event.
  details String?
  
  /// Timestamp of expiration or recovery event.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  cart ai_commerce_carts @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  actor ai_commerce_admin? @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id])
  
  @@index([cart_id])
  @@index([event_type])
}

/// Comprehensive, append-only audit log for all cart-related modifications
/// (CRUD, merging, expiration, option changes, user actions). Records actor,
/// affected entity, action, before/after state JSON, and timestamps. Enables
/// forensic reconstructibility, regulatory/legal evidence, and
/// troubleshooting for all cart business events.
///
/// @namespace Carts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model ai_commerce_cart_audit_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Affected cart's {@link ai_commerce_carts.id} (if applicable).
  cart_id String?
  
  /// User/admin/system actor ({@link ai_commerce_buyer.id} or admin ID) who
  /// performed the action. Nullable for system events.
  actor_id String?
  
  /// Entity type affected (cart, cart_item, option, session, merge,
  /// expiration, etc).
  entity_type String
  
  /// CRUD or business event performed (create, update, remove, merge, expire,
  /// recover, etc).
  action_type String
  
  /// JSON snapshot of entity state before action. May be null for creates.
  before_state_json String?
  
  /// JSON snapshot after action. May be null for deletes.
  after_state_json String?
  
  /// Timestamp of action log record creation.
  created_at DateTime
  
  //----
  // RELATIONS
  //----
  cart ai_commerce_carts? @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  actor ai_commerce_admin? @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  
  @@index([actor_id])
  
  @@index([cart_id])
  @@index([entity_type])
  @@index([action_type])
}